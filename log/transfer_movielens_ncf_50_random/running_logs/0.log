[2024-12-02 17:37:36.498222] start transfer model NCF
{'recall_num': 50, 'recall_alg': 'random', 'epochs': 1, 'device': 'cuda:5', 'batch_size': 64, 'task_index': 0, 'num_task': 10, 'lr': 0.001}
test users have been loaded, len = 568
test users = ['18' '82' '208' '220' '258' '271' '317' '348' '359' '367' '370' '375'
 '387' '394' '415' '419' '421' '451' '455' '469' '470' '471' '520' '575'
 '577' '578' '586' '614' '689' '694' '710' '735' '739' '744' '764' '768'
 '910' '932' '971' '975' '982' '994' '1145' '1158' '1191' '1200' '1202'
 '1233' '1236' '1263' '1265' '1341' '1374' '1454' '1516' '1584' '1587'
 '1593' '1612' '1626' '1629' '1714' '1715' '1716' '1719' '1741' '1775'
 '1810' '1825' '1837' '1849' '1887' '1932' '1966' '2001' '2024' '2029'
 '2035' '2047' '2051' '2068' '2092' '2120' '2138' '2161' '2184' '2188'
 '2232' '2234' '2248' '2264' '2269' '2274' '2276' '2301' '2310' '2335'
 '2349' '2352' '2367' '2397' '2484' '2515' '2517' '2529' '2544' '2551'
 '2606' '2657' '2669' '2681' '2728' '2756' '2772' '2783' '2813' '2847'
 '2851' '2856' '2903' '2909' '2915' '2916' '2930' '2945' '2955' '2970'
 '2974' '2988' '2992' '3020' '3031' '3033' '3061' '3079' '3127' '3128'
 '3146' '3149' '3157' '3171' '3226' '3263' '3268' '3289' '3334' '3364'
 '3365' '3415' '3419' '3424' '3451' '3487' '3576' '3589' '3591' '3618'
 '3629' '3660' '3667' '3759' '3797' '3892' '3907' '3915' '3922' '3928'
 '3942' '3944' '3948' '3971' '3986' '3989' '4034' '4065' '4089' '4129'
 '4175' '4200' '4220' '4222' '4235' '4254' '4276' '4292' '4347' '4358'
 '4391' '4402' '4431' '4439' '4450' '4475' '4483' '4500' '4540' '4563'
 '4575' '4587' '4600' '4627' '4629' '4660' '4745' '4748' '4759' '4769'
 '4822' '4857' '4868' '4871' '4896' '4931' '4951' '4964' '4965' '4967'
 '4968' '4978' '5002' '5032' '5036' '5066' '5070' '5083' '5107' '5138'
 '5146' '5157' '5178' '5204' '5242' '5257' '5261' '5314' '5329' '5352'
 '5353' '5384' '5393' '5412' '5450' '5465' '5482' '5503' '5515' '5584'
 '5613' '5616' '5643' '5655' '5665' '5691' '5693' '5696' '5725' '5731'
 '5741' '5743' '5768' '5832' '5850' '5929' '5952' '5991' '5995' '5996'
 '6002' '6099' '6108' '6112' '6116' '6166' '6175' '6180' '6236' '6252'
 '6272' '6369' '6379' '6390' '6440' '6449' '6465' '6569' '6597' '6662'
 '6686' '6715' '6719' '6720' '6727' '6778' '6793' '6799' '6881' '6976'
 '6986' '7022' '7036' '7038' '7110' '7129' '7185' '7186' '7191' '7201'
 '7207' '7231' '7235' '7266' '7322' '7351' '7421' '7424' '7434' '7443'
 '7452' '7498' '7520' '7554' '7572' '7648' '7693' '7724' '7738' '7782'
 '7784' '7803' '7816' '7834' '7836' '7876' '7884' '7993' '8027' '8040'
 '8067' '8069' '8084' '8111' '8151' '8152' '8153' '8188' '8212' '8219'
 '8245' '8297' '8337' '8354' '8355' '8405' '8407' '8412' '8418' '8445'
 '8465' '8484' '8488' '8505' '8513' '8579' '8615' '8636' '8650' '8674'
 '8736' '8762' '8774' '8788' '8818' '8824' '8924' '8932' '8938' '8963'
 '8966' '8979' '8996' '8998' '9032' '9034' '9038' '9087' '9116' '9118'
 '9145' '9148' '9197' '9207' '9278' '9339' '9406' '9410' '9454' '9461'
 '9471' '9473' '9495' '9504' '9514' '9544' '9560' '9562' '9577' '9579'
 '9582' '9587' '9690' '9753' '9772' '9805' '9817' '9849' '9893' '9929'
 '9941' '9965' '9982' '10012' '10098' '10119' '10156' '10164' '10178'
 '10189' '10278' '10292' '10303' '10314' '10339' '10348' '10360' '10389'
 '10447' '10448' '10478' '10481' '10542' '10573' '10598' '10616' '10620'
 '10630' '10656' '10662' '10721' '10759' '10762' '10781' '10788' '10802'
 '10804' '10809' '10836' '10863' '10916' '10935' '10937' '11012' '11016'
 '11074' '11081' '11117' '11125' '11136' '11183' '11189' '11223' '11230'
 '11239' '11280' '11305' '11343' '11387' '11434' '11448' '11506' '11513'
 '11528' '11550' '11560' '11596' '11625' '11647' '11652' '11668' '11686'
 '11718' '11719' '11748' '11750' '11794' '11816' '11824' '11843' '11865'
 '11871' '11884' '11900' '11911' '11921' '11924' '11969' '12026' '12034'
 '12039' '12040' '12062' '12093' '12111' '12120' '12128' '12130' '12131'
 '12140' '12154' '12158' '12189' '12242' '12268' '12288' '12318' '12322'
 '12330' '12363' '12380' '12384' '12419' '12437' '12440' '12483' '12490'
 '12531' '12535' '12611' '12629' '12632' '12649' '12691' '12700' '12721'
 '12767' '12781' '12782' '12788' '12793' '12832' '12837' '12844' '12851'
 '12875' '12982' '13023' '13060' '13195' '13215' '13227' '13285' '13310'
 '13359' '13476' '13543' '13557' '13572' '13574' '13604']
[2024-12-02 17:37:36.517300] start test on test users
[2024-12-02 17:37:36.517351] start test user 18 0/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:37:39.232025] start test user 18 0/568 recall augumented users by random, augumented_users = [115696, 73167, 100150, 137462, 74660, 92943, 34260, 129758, 77566, 103447, 103473, 100246, 65746, 110354, 20215, 31024, 11613, 47242, 20766, 125404, 18282, 51549, 99518, 4624, 72391, 75149, 29453, 65602, 16386, 28442, 122891, 109360, 3568, 85282, 21313, 92606, 109105, 44527, 13736, 77674, 133864, 51304, 35007, 86870, 36841, 55591, 91217, 42291, 119703, 55107]
[2024-12-02 17:37:39.252589] user = 18 Cloud 0/568
[2024-12-02 17:37:43.508631] user = 18 Local 0/568
[2024-12-02 17:37:44.228290] user = 18 Local+ 0/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:37:46.392121] user = 18 MPDA- 0/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.623688155922039
Training on augumented user 115696 0/50 current_auc = 0.623688155922039
User 115696 AUC after training: 0.6221889055472264
User 115696 does not improve AUC. Reverting changes.
Training on augumented user 73167 1/50 current_auc = 0.623688155922039
User 73167 AUC after training: 0.623688155922039
User 73167 does not improve AUC. Reverting changes.
Training on augumented user 100150 2/50 current_auc = 0.623688155922039
User 100150 AUC after training: 0.6221889055472264
User 100150 does not improve AUC. Reverting changes.
Training on augumented user 137462 3/50 current_auc = 0.623688155922039
User 137462 AUC after training: 0.6221889055472264
User 137462 does not improve AUC. Reverting changes.
Training on augumented user 74660 4/50 current_auc = 0.623688155922039
User 74660 AUC after training: 0.623688155922039
User 74660 does not improve AUC. Reverting changes.
Training on augumented user 92943 5/50 current_auc = 0.623688155922039
User 92943 AUC after training: 0.623688155922039
User 92943 does not improve AUC. Reverting changes.
Training on augumented user 34260 6/50 current_auc = 0.623688155922039
User 34260 AUC after training: 0.6221889055472264
User 34260 does not improve AUC. Reverting changes.
Training on augumented user 129758 7/50 current_auc = 0.623688155922039
User 129758 AUC after training: 0.6221889055472264
User 129758 does not improve AUC. Reverting changes.
Training on augumented user 77566 8/50 current_auc = 0.623688155922039
User 77566 AUC after training: 0.623688155922039
User 77566 does not improve AUC. Reverting changes.
Training on augumented user 103447 9/50 current_auc = 0.623688155922039
User 103447 AUC after training: 0.623688155922039
User 103447 does not improve AUC. Reverting changes.
Training on augumented user 103473 10/50 current_auc = 0.623688155922039
User 103473 AUC after training: 0.6221889055472264
User 103473 does not improve AUC. Reverting changes.
Training on augumented user 100246 11/50 current_auc = 0.623688155922039
User 100246 AUC after training: 0.6206896551724138
User 100246 does not improve AUC. Reverting changes.
Training on augumented user 65746 12/50 current_auc = 0.623688155922039
User 65746 AUC after training: 0.6221889055472264
User 65746 does not improve AUC. Reverting changes.
Training on augumented user 110354 13/50 current_auc = 0.623688155922039
User 110354 AUC after training: 0.623688155922039
User 110354 does not improve AUC. Reverting changes.
Training on augumented user 20215 14/50 current_auc = 0.623688155922039
User 20215 AUC after training: 0.6191904047976012
User 20215 does not improve AUC. Reverting changes.
Training on augumented user 31024 15/50 current_auc = 0.623688155922039
User 31024 AUC after training: 0.623688155922039
User 31024 does not improve AUC. Reverting changes.
Training on augumented user 11613 16/50 current_auc = 0.623688155922039
User 11613 AUC after training: 0.6221889055472264
User 11613 does not improve AUC. Reverting changes.
Training on augumented user 47242 17/50 current_auc = 0.623688155922039
User 47242 AUC after training: 0.6221889055472264
User 47242 does not improve AUC. Reverting changes.
Training on augumented user 20766 18/50 current_auc = 0.623688155922039
User 20766 AUC after training: 0.623688155922039
User 20766 does not improve AUC. Reverting changes.
Training on augumented user 125404 19/50 current_auc = 0.623688155922039
User 125404 AUC after training: 0.623688155922039
User 125404 does not improve AUC. Reverting changes.
Training on augumented user 18282 20/50 current_auc = 0.623688155922039
User 18282 AUC after training: 0.623688155922039
User 18282 does not improve AUC. Reverting changes.
Training on augumented user 51549 21/50 current_auc = 0.623688155922039
User 51549 AUC after training: 0.6251874062968515
User 51549 improves AUC. Keeping the model.
Training on augumented user 99518 22/50 current_auc = 0.6251874062968515
User 99518 AUC after training: 0.623688155922039
User 99518 does not improve AUC. Reverting changes.
Training on augumented user 4624 23/50 current_auc = 0.6251874062968515
User 4624 AUC after training: 0.6251874062968515
User 4624 does not improve AUC. Reverting changes.
Training on augumented user 72391 24/50 current_auc = 0.6251874062968515
User 72391 AUC after training: 0.6251874062968515
User 72391 does not improve AUC. Reverting changes.
Training on augumented user 75149 25/50 current_auc = 0.6251874062968515
User 75149 AUC after training: 0.6251874062968515
User 75149 does not improve AUC. Reverting changes.
Training on augumented user 29453 26/50 current_auc = 0.6251874062968515
User 29453 AUC after training: 0.6251874062968515
User 29453 does not improve AUC. Reverting changes.
Training on augumented user 65602 27/50 current_auc = 0.6251874062968515
User 65602 AUC after training: 0.6251874062968515
User 65602 does not improve AUC. Reverting changes.
Training on augumented user 16386 28/50 current_auc = 0.6251874062968515
User 16386 AUC after training: 0.6251874062968515
User 16386 does not improve AUC. Reverting changes.
Training on augumented user 28442 29/50 current_auc = 0.6251874062968515
User 28442 AUC after training: 0.6251874062968515
User 28442 does not improve AUC. Reverting changes.
Training on augumented user 122891 30/50 current_auc = 0.6251874062968515
User 122891 AUC after training: 0.6251874062968515
User 122891 does not improve AUC. Reverting changes.
Training on augumented user 109360 31/50 current_auc = 0.6251874062968515
User 109360 AUC after training: 0.623688155922039
User 109360 does not improve AUC. Reverting changes.
Training on augumented user 3568 32/50 current_auc = 0.6251874062968515
User 3568 AUC after training: 0.6251874062968515
User 3568 does not improve AUC. Reverting changes.
Training on augumented user 85282 33/50 current_auc = 0.6251874062968515
User 85282 AUC after training: 0.6251874062968515
User 85282 does not improve AUC. Reverting changes.
Training on augumented user 21313 34/50 current_auc = 0.6251874062968515
User 21313 AUC after training: 0.6251874062968515
User 21313 does not improve AUC. Reverting changes.
Training on augumented user 92606 35/50 current_auc = 0.6251874062968515
User 92606 AUC after training: 0.6251874062968515
User 92606 does not improve AUC. Reverting changes.
Training on augumented user 109105 36/50 current_auc = 0.6251874062968515
User 109105 AUC after training: 0.6251874062968515
User 109105 does not improve AUC. Reverting changes.
Training on augumented user 44527 37/50 current_auc = 0.6251874062968515
User 44527 AUC after training: 0.623688155922039
User 44527 does not improve AUC. Reverting changes.
Training on augumented user 13736 38/50 current_auc = 0.6251874062968515
User 13736 AUC after training: 0.6251874062968515
User 13736 does not improve AUC. Reverting changes.
Training on augumented user 77674 39/50 current_auc = 0.6251874062968515
User 77674 AUC after training: 0.6251874062968515
User 77674 does not improve AUC. Reverting changes.
Training on augumented user 133864 40/50 current_auc = 0.6251874062968515
User 133864 AUC after training: 0.6251874062968515
User 133864 does not improve AUC. Reverting changes.
Training on augumented user 51304 41/50 current_auc = 0.6251874062968515
User 51304 AUC after training: 0.6251874062968515
User 51304 does not improve AUC. Reverting changes.
Training on augumented user 35007 42/50 current_auc = 0.6251874062968515
User 35007 AUC after training: 0.6251874062968515
User 35007 does not improve AUC. Reverting changes.
Training on augumented user 86870 43/50 current_auc = 0.6251874062968515
User 86870 AUC after training: 0.623688155922039
User 86870 does not improve AUC. Reverting changes.
Training on augumented user 36841 44/50 current_auc = 0.6251874062968515
User 36841 AUC after training: 0.6221889055472264
User 36841 does not improve AUC. Reverting changes.
Training on augumented user 55591 45/50 current_auc = 0.6251874062968515
User 55591 AUC after training: 0.6251874062968515
User 55591 does not improve AUC. Reverting changes.
Training on augumented user 91217 46/50 current_auc = 0.6251874062968515
User 91217 AUC after training: 0.623688155922039
User 91217 does not improve AUC. Reverting changes.
Training on augumented user 42291 47/50 current_auc = 0.6251874062968515
User 42291 AUC after training: 0.6251874062968515
User 42291 does not improve AUC. Reverting changes.
Training on augumented user 119703 48/50 current_auc = 0.6251874062968515
User 119703 AUC after training: 0.6251874062968515
User 119703 does not improve AUC. Reverting changes.
Training on augumented user 55107 49/50 current_auc = 0.6251874062968515
User 55107 AUC after training: 0.623688155922039
User 55107 does not improve AUC. Reverting changes.
[2024-12-02 17:38:21.059430] start test user 82 1/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:38:21.671941] start test user 82 1/568 recall augumented users by random, augumented_users = [12967, 114409, 113379, 124923, 3306, 12982, 72915, 100214, 47585, 29574, 24855, 69826, 53240, 45617, 47540, 38045, 119084, 98734, 99965, 76168, 51315, 15515, 15281, 14062, 74771, 48874, 28291, 63998, 54091, 43759, 90446, 136357, 15640, 54388, 74483, 111728, 82911, 48458, 87536, 122675, 71835, 64893, 84395, 123849, 10073, 34679, 117753, 102986, 47802, 7885]
[2024-12-02 17:38:21.688167] user = 82 Cloud 1/568
[2024-12-02 17:38:21.756473] user = 82 Local 1/568
[2024-12-02 17:38:21.846515] user = 82 Local+ 1/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:38:24.242731] user = 82 MPDA- 1/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7537447765991643
Training on augumented user 12967 0/50 current_auc = 0.7537447765991643
User 12967 AUC after training: 0.7542912246865959
User 12967 improves AUC. Keeping the model.
Training on augumented user 114409 1/50 current_auc = 0.7542912246865959
User 114409 AUC after training: 0.75422693667631
User 114409 does not improve AUC. Reverting changes.
Training on augumented user 113379 2/50 current_auc = 0.7542912246865959
User 113379 AUC after training: 0.7540340726454516
User 113379 does not improve AUC. Reverting changes.
Training on augumented user 124923 3/50 current_auc = 0.7542912246865959
User 124923 AUC after training: 0.7548376727740277
User 124923 improves AUC. Keeping the model.
Training on augumented user 3306 4/50 current_auc = 0.7548376727740277
User 3306 AUC after training: 0.7545805207328833
User 3306 does not improve AUC. Reverting changes.
Training on augumented user 12982 5/50 current_auc = 0.7548376727740277
User 12982 AUC after training: 0.7553198328511732
User 12982 improves AUC. Keeping the model.
Training on augumented user 72915 6/50 current_auc = 0.7553198328511732
User 72915 AUC after training: 0.7555126968820315
User 72915 improves AUC. Keeping the model.
Training on augumented user 100214 7/50 current_auc = 0.7555126968820315
User 100214 AUC after training: 0.7556412729026037
User 100214 improves AUC. Keeping the model.
Training on augumented user 47585 8/50 current_auc = 0.7556412729026037
User 47585 AUC after training: 0.7555769848923176
User 47585 does not improve AUC. Reverting changes.
Training on augumented user 29574 9/50 current_auc = 0.7556412729026037
User 29574 AUC after training: 0.7560912889746063
User 29574 improves AUC. Keeping the model.
Training on augumented user 24855 10/50 current_auc = 0.7560912889746063
User 24855 AUC after training: 0.7556412729026036
User 24855 does not improve AUC. Reverting changes.
Training on augumented user 69826 11/50 current_auc = 0.7560912889746063
User 69826 AUC after training: 0.7560912889746062
User 69826 does not improve AUC. Reverting changes.
Training on augumented user 53240 12/50 current_auc = 0.7560912889746063
User 53240 AUC after training: 0.7560270009643201
User 53240 does not improve AUC. Reverting changes.
Training on augumented user 45617 13/50 current_auc = 0.7560912889746063
User 45617 AUC after training: 0.755898424943748
User 45617 does not improve AUC. Reverting changes.
Training on augumented user 47540 14/50 current_auc = 0.7560912889746063
User 47540 AUC after training: 0.7553198328511732
User 47540 does not improve AUC. Reverting changes.
Training on augumented user 38045 15/50 current_auc = 0.7560912889746063
User 38045 AUC after training: 0.7558341369334619
User 38045 does not improve AUC. Reverting changes.
Training on augumented user 119084 16/50 current_auc = 0.7560912889746063
User 119084 AUC after training: 0.7564127290260366
User 119084 improves AUC. Keeping the model.
Training on augumented user 98734 17/50 current_auc = 0.7564127290260366
User 98734 AUC after training: 0.7560270009643202
User 98734 does not improve AUC. Reverting changes.
Training on augumented user 99965 18/50 current_auc = 0.7564127290260366
User 99965 AUC after training: 0.7564770170363228
User 99965 improves AUC. Keeping the model.
Training on augumented user 76168 19/50 current_auc = 0.7564770170363228
User 76168 AUC after training: 0.7559627129540339
User 76168 does not improve AUC. Reverting changes.
Training on augumented user 51315 20/50 current_auc = 0.7564770170363228
User 51315 AUC after training: 0.7562198649951783
User 51315 does not improve AUC. Reverting changes.
Training on augumented user 15515 21/50 current_auc = 0.7564770170363228
User 15515 AUC after training: 0.7562198649951783
User 15515 does not improve AUC. Reverting changes.
Training on augumented user 15281 22/50 current_auc = 0.7564770170363228
User 15281 AUC after training: 0.7559948569591771
User 15281 does not improve AUC. Reverting changes.
Training on augumented user 14062 23/50 current_auc = 0.7564770170363228
User 14062 AUC after training: 0.7564127290260366
User 14062 does not improve AUC. Reverting changes.
Training on augumented user 74771 24/50 current_auc = 0.7564770170363228
User 74771 AUC after training: 0.7560270009643202
User 74771 does not improve AUC. Reverting changes.
Training on augumented user 48874 25/50 current_auc = 0.7564770170363228
User 48874 AUC after training: 0.7557698489231759
User 48874 does not improve AUC. Reverting changes.
Training on augumented user 28291 26/50 current_auc = 0.7564770170363228
User 28291 AUC after training: 0.7564770170363226
User 28291 does not improve AUC. Reverting changes.
Training on augumented user 63998 27/50 current_auc = 0.7564770170363228
User 63998 AUC after training: 0.7560270009643202
User 63998 does not improve AUC. Reverting changes.
Training on augumented user 54091 28/50 current_auc = 0.7564770170363228
User 54091 AUC after training: 0.7557055609128898
User 54091 does not improve AUC. Reverting changes.
Training on augumented user 43759 29/50 current_auc = 0.7564770170363228
User 43759 AUC after training: 0.7563484410157506
User 43759 does not improve AUC. Reverting changes.
Training on augumented user 90446 30/50 current_auc = 0.7564770170363228
User 90446 AUC after training: 0.7557055609128897
User 90446 does not improve AUC. Reverting changes.
Training on augumented user 136357 31/50 current_auc = 0.7564770170363228
User 136357 AUC after training: 0.7558984249437479
User 136357 does not improve AUC. Reverting changes.
Training on augumented user 15640 32/50 current_auc = 0.7564770170363228
User 15640 AUC after training: 0.7560270009643202
User 15640 does not improve AUC. Reverting changes.
Training on augumented user 54388 33/50 current_auc = 0.7564770170363228
User 54388 AUC after training: 0.7561555769848922
User 54388 does not improve AUC. Reverting changes.
Training on augumented user 74483 34/50 current_auc = 0.7564770170363228
User 74483 AUC after training: 0.7557055609128898
User 74483 does not improve AUC. Reverting changes.
Training on augumented user 111728 35/50 current_auc = 0.7564770170363228
User 111728 AUC after training: 0.7560270009643202
User 111728 does not improve AUC. Reverting changes.
Training on augumented user 82911 36/50 current_auc = 0.7564770170363228
User 82911 AUC after training: 0.7558341369334619
User 82911 does not improve AUC. Reverting changes.
Training on augumented user 48458 37/50 current_auc = 0.7564770170363228
User 48458 AUC after training: 0.7560270009643201
User 48458 does not improve AUC. Reverting changes.
Training on augumented user 87536 38/50 current_auc = 0.7564770170363228
User 87536 AUC after training: 0.7565413050466089
User 87536 improves AUC. Keeping the model.
Training on augumented user 122675 39/50 current_auc = 0.7565413050466089
User 122675 AUC after training: 0.7565413050466088
User 122675 does not improve AUC. Reverting changes.
Training on augumented user 71835 40/50 current_auc = 0.7565413050466089
User 71835 AUC after training: 0.7553198328511732
User 71835 does not improve AUC. Reverting changes.
Training on augumented user 64893 41/50 current_auc = 0.7565413050466089
User 64893 AUC after training: 0.7557698489231758
User 64893 does not improve AUC. Reverting changes.
Training on augumented user 84395 42/50 current_auc = 0.7565413050466089
User 84395 AUC after training: 0.7552555448408871
User 84395 does not improve AUC. Reverting changes.
Training on augumented user 123849 43/50 current_auc = 0.7565413050466089
User 123849 AUC after training: 0.755962712954034
User 123849 does not improve AUC. Reverting changes.
Training on augumented user 10073 44/50 current_auc = 0.7565413050466089
User 10073 AUC after training: 0.7556412729026036
User 10073 does not improve AUC. Reverting changes.
Training on augumented user 34679 45/50 current_auc = 0.7565413050466089
User 34679 AUC after training: 0.755962712954034
User 34679 does not improve AUC. Reverting changes.
Training on augumented user 117753 46/50 current_auc = 0.7565413050466089
User 117753 AUC after training: 0.7563484410157505
User 117753 does not improve AUC. Reverting changes.
Training on augumented user 102986 47/50 current_auc = 0.7565413050466089
User 102986 AUC after training: 0.7562198649951783
User 102986 does not improve AUC. Reverting changes.
Training on augumented user 47802 48/50 current_auc = 0.7565413050466089
User 47802 AUC after training: 0.7560270009643202
User 47802 does not improve AUC. Reverting changes.
Training on augumented user 7885 49/50 current_auc = 0.7565413050466089
User 7885 AUC after training: 0.7564127290260366
User 7885 does not improve AUC. Reverting changes.
[2024-12-02 17:38:56.342959] start test user 208 2/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:38:56.814636] start test user 208 2/568 recall augumented users by random, augumented_users = [86377, 49279, 41400, 9658, 133268, 49953, 32720, 102589, 136381, 37728, 16687, 72124, 62674, 68044, 76835, 98560, 55558, 121761, 38312, 85164, 14122, 118164, 17273, 45087, 22275, 122641, 101197, 123128, 130855, 134206, 123485, 52271, 53600, 34876, 112876, 34781, 46257, 75413, 58140, 68494, 20650, 38, 97715, 86824, 88074, 92286, 56228, 10050, 18279, 119144]
[2024-12-02 17:38:56.832017] user = 208 Cloud 2/568
[2024-12-02 17:38:56.855561] user = 208 Local 2/568
[2024-12-02 17:38:57.019724] user = 208 Local+ 2/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:39:00.126954] user = 208 MPDA- 2/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6954108391608392
Training on augumented user 86377 0/50 current_auc = 0.6954108391608392
User 86377 AUC after training: 0.6952797202797202
User 86377 does not improve AUC. Reverting changes.
Training on augumented user 49279 1/50 current_auc = 0.6954108391608392
User 49279 AUC after training: 0.6944055944055944
User 49279 does not improve AUC. Reverting changes.
Training on augumented user 41400 2/50 current_auc = 0.6954108391608392
User 41400 AUC after training: 0.6959353146853147
User 41400 improves AUC. Keeping the model.
Training on augumented user 9658 3/50 current_auc = 0.6959353146853147
User 9658 AUC after training: 0.6951048951048951
User 9658 does not improve AUC. Reverting changes.
Training on augumented user 133268 4/50 current_auc = 0.6959353146853147
User 133268 AUC after training: 0.6949737762237763
User 133268 does not improve AUC. Reverting changes.
Training on augumented user 49953 5/50 current_auc = 0.6959353146853147
User 49953 AUC after training: 0.6964160839160838
User 49953 improves AUC. Keeping the model.
Training on augumented user 32720 6/50 current_auc = 0.6964160839160838
User 32720 AUC after training: 0.6962412587412588
User 32720 does not improve AUC. Reverting changes.
Training on augumented user 102589 7/50 current_auc = 0.6964160839160838
User 102589 AUC after training: 0.6965909090909091
User 102589 improves AUC. Keeping the model.
Training on augumented user 136381 8/50 current_auc = 0.6965909090909091
User 136381 AUC after training: 0.6958041958041958
User 136381 does not improve AUC. Reverting changes.
Training on augumented user 37728 9/50 current_auc = 0.6965909090909091
User 37728 AUC after training: 0.6968531468531468
User 37728 improves AUC. Keeping the model.
Training on augumented user 16687 10/50 current_auc = 0.6968531468531468
User 16687 AUC after training: 0.6961538461538461
User 16687 does not improve AUC. Reverting changes.
Training on augumented user 72124 11/50 current_auc = 0.6968531468531468
User 72124 AUC after training: 0.6971153846153846
User 72124 improves AUC. Keeping the model.
Training on augumented user 62674 12/50 current_auc = 0.6971153846153846
User 62674 AUC after training: 0.6967657342657343
User 62674 does not improve AUC. Reverting changes.
Training on augumented user 68044 13/50 current_auc = 0.6971153846153846
User 68044 AUC after training: 0.697027972027972
User 68044 does not improve AUC. Reverting changes.
Training on augumented user 76835 14/50 current_auc = 0.6971153846153846
User 76835 AUC after training: 0.6963286713286714
User 76835 does not improve AUC. Reverting changes.
Training on augumented user 98560 15/50 current_auc = 0.6971153846153846
User 98560 AUC after training: 0.6963286713286713
User 98560 does not improve AUC. Reverting changes.
Training on augumented user 55558 16/50 current_auc = 0.6971153846153846
User 55558 AUC after training: 0.6965034965034964
User 55558 does not improve AUC. Reverting changes.
Training on augumented user 121761 17/50 current_auc = 0.6971153846153846
User 121761 AUC after training: 0.6965034965034965
User 121761 does not improve AUC. Reverting changes.
Training on augumented user 38312 18/50 current_auc = 0.6971153846153846
User 38312 AUC after training: 0.697465034965035
User 38312 improves AUC. Keeping the model.
Training on augumented user 85164 19/50 current_auc = 0.697465034965035
User 85164 AUC after training: 0.6971153846153846
User 85164 does not improve AUC. Reverting changes.
Training on augumented user 14122 20/50 current_auc = 0.697465034965035
User 14122 AUC after training: 0.6979895104895103
User 14122 improves AUC. Keeping the model.
Training on augumented user 118164 21/50 current_auc = 0.6979895104895103
User 118164 AUC after training: 0.6973776223776224
User 118164 does not improve AUC. Reverting changes.
Training on augumented user 17273 22/50 current_auc = 0.6979895104895103
User 17273 AUC after training: 0.6970279720279721
User 17273 does not improve AUC. Reverting changes.
Training on augumented user 45087 23/50 current_auc = 0.6979895104895103
User 45087 AUC after training: 0.6969842657342656
User 45087 does not improve AUC. Reverting changes.
Training on augumented user 22275 24/50 current_auc = 0.6979895104895103
User 22275 AUC after training: 0.6977272727272726
User 22275 does not improve AUC. Reverting changes.
Training on augumented user 122641 25/50 current_auc = 0.6979895104895103
User 122641 AUC after training: 0.6974650349650349
User 122641 does not improve AUC. Reverting changes.
Training on augumented user 101197 26/50 current_auc = 0.6979895104895103
User 101197 AUC after training: 0.6965034965034965
User 101197 does not improve AUC. Reverting changes.
Training on augumented user 123128 27/50 current_auc = 0.6979895104895103
User 123128 AUC after training: 0.6977272727272728
User 123128 does not improve AUC. Reverting changes.
Training on augumented user 130855 28/50 current_auc = 0.6979895104895103
User 130855 AUC after training: 0.6968531468531468
User 130855 does not improve AUC. Reverting changes.
Training on augumented user 134206 29/50 current_auc = 0.6979895104895103
User 134206 AUC after training: 0.6978146853146852
User 134206 does not improve AUC. Reverting changes.
Training on augumented user 123485 30/50 current_auc = 0.6979895104895103
User 123485 AUC after training: 0.6969842657342658
User 123485 does not improve AUC. Reverting changes.
Training on augumented user 52271 31/50 current_auc = 0.6979895104895103
User 52271 AUC after training: 0.6972465034965034
User 52271 does not improve AUC. Reverting changes.
Training on augumented user 53600 32/50 current_auc = 0.6979895104895103
User 53600 AUC after training: 0.6979895104895104
User 53600 improves AUC. Keeping the model.
Training on augumented user 34876 33/50 current_auc = 0.6979895104895104
User 34876 AUC after training: 0.6976398601398601
User 34876 does not improve AUC. Reverting changes.
Training on augumented user 112876 34/50 current_auc = 0.6979895104895104
User 112876 AUC after training: 0.6977272727272728
User 112876 does not improve AUC. Reverting changes.
Training on augumented user 34781 35/50 current_auc = 0.6979895104895104
User 34781 AUC after training: 0.6964160839160839
User 34781 does not improve AUC. Reverting changes.
Training on augumented user 46257 36/50 current_auc = 0.6979895104895104
User 46257 AUC after training: 0.6978146853146853
User 46257 does not improve AUC. Reverting changes.
Training on augumented user 75413 37/50 current_auc = 0.6979895104895104
User 75413 AUC after training: 0.697465034965035
User 75413 does not improve AUC. Reverting changes.
Training on augumented user 58140 38/50 current_auc = 0.6979895104895104
User 58140 AUC after training: 0.6967657342657343
User 58140 does not improve AUC. Reverting changes.
Training on augumented user 68494 39/50 current_auc = 0.6979895104895104
User 68494 AUC after training: 0.6971590909090909
User 68494 does not improve AUC. Reverting changes.
Training on augumented user 20650 40/50 current_auc = 0.6979895104895104
User 20650 AUC after training: 0.698208041958042
User 20650 improves AUC. Keeping the model.
Training on augumented user 38 41/50 current_auc = 0.698208041958042
User 38 AUC after training: 0.698513986013986
User 38 improves AUC. Keeping the model.
Training on augumented user 97715 42/50 current_auc = 0.698513986013986
User 97715 AUC after training: 0.6982517482517482
User 97715 does not improve AUC. Reverting changes.
Training on augumented user 86824 43/50 current_auc = 0.698513986013986
User 86824 AUC after training: 0.6974213286713287
User 86824 does not improve AUC. Reverting changes.
Training on augumented user 88074 44/50 current_auc = 0.698513986013986
User 88074 AUC after training: 0.6986013986013986
User 88074 improves AUC. Keeping the model.
Training on augumented user 92286 45/50 current_auc = 0.6986013986013986
User 92286 AUC after training: 0.6981643356643357
User 92286 does not improve AUC. Reverting changes.
Training on augumented user 56228 46/50 current_auc = 0.6986013986013986
User 56228 AUC after training: 0.6985576923076923
User 56228 does not improve AUC. Reverting changes.
Training on augumented user 10050 47/50 current_auc = 0.6986013986013986
User 10050 AUC after training: 0.6987762237762238
User 10050 improves AUC. Keeping the model.
Training on augumented user 18279 48/50 current_auc = 0.6987762237762238
User 18279 AUC after training: 0.6988636363636362
User 18279 improves AUC. Keeping the model.
Training on augumented user 119144 49/50 current_auc = 0.6988636363636362
User 119144 AUC after training: 0.6987762237762238
User 119144 does not improve AUC. Reverting changes.
[2024-12-02 17:39:34.835286] start test user 220 3/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:39:35.457766] start test user 220 3/568 recall augumented users by random, augumented_users = [137463, 63570, 72150, 78009, 130903, 7385, 112654, 6878, 43445, 2909, 38268, 7929, 61251, 1610, 68551, 36188, 54649, 96689, 18325, 104620, 8260, 100344, 41911, 60521, 22576, 76363, 42305, 111147, 67569, 123008, 31696, 61458, 91461, 48955, 18954, 6101, 27469, 99146, 44791, 47535, 114939, 58776, 81110, 100425, 25553, 20593, 113951, 75819, 40084, 90277]
[2024-12-02 17:39:35.475533] user = 220 Cloud 3/568
[2024-12-02 17:39:35.487886] user = 220 Local 3/568
[2024-12-02 17:39:35.653240] user = 220 Local+ 3/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:39:38.309168] user = 220 MPDA- 3/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.584375
Training on augumented user 137463 0/50 current_auc = 0.584375
User 137463 AUC after training: 0.584375
User 137463 does not improve AUC. Reverting changes.
Training on augumented user 63570 1/50 current_auc = 0.584375
User 63570 AUC after training: 0.584375
User 63570 does not improve AUC. Reverting changes.
Training on augumented user 72150 2/50 current_auc = 0.584375
User 72150 AUC after training: 0.5875
User 72150 improves AUC. Keeping the model.
Training on augumented user 78009 3/50 current_auc = 0.5875
User 78009 AUC after training: 0.5875
User 78009 does not improve AUC. Reverting changes.
Training on augumented user 130903 4/50 current_auc = 0.5875
User 130903 AUC after training: 0.5875
User 130903 does not improve AUC. Reverting changes.
Training on augumented user 7385 5/50 current_auc = 0.5875
User 7385 AUC after training: 0.5875
User 7385 does not improve AUC. Reverting changes.
Training on augumented user 112654 6/50 current_auc = 0.5875
User 112654 AUC after training: 0.5875
User 112654 does not improve AUC. Reverting changes.
Training on augumented user 6878 7/50 current_auc = 0.5875
User 6878 AUC after training: 0.5875
User 6878 does not improve AUC. Reverting changes.
Training on augumented user 43445 8/50 current_auc = 0.5875
User 43445 AUC after training: 0.584375
User 43445 does not improve AUC. Reverting changes.
Training on augumented user 2909 9/50 current_auc = 0.5875
User 2909 AUC after training: 0.584375
User 2909 does not improve AUC. Reverting changes.
Training on augumented user 38268 10/50 current_auc = 0.5875
User 38268 AUC after training: 0.5875
User 38268 does not improve AUC. Reverting changes.
Training on augumented user 7929 11/50 current_auc = 0.5875
User 7929 AUC after training: 0.5875
User 7929 does not improve AUC. Reverting changes.
Training on augumented user 61251 12/50 current_auc = 0.5875
User 61251 AUC after training: 0.5875
User 61251 does not improve AUC. Reverting changes.
Training on augumented user 1610 13/50 current_auc = 0.5875
User 1610 AUC after training: 0.5875
User 1610 does not improve AUC. Reverting changes.
Training on augumented user 68551 14/50 current_auc = 0.5875
User 68551 AUC after training: 0.5875
User 68551 does not improve AUC. Reverting changes.
Training on augumented user 36188 15/50 current_auc = 0.5875
User 36188 AUC after training: 0.5875
User 36188 does not improve AUC. Reverting changes.
Training on augumented user 54649 16/50 current_auc = 0.5875
User 54649 AUC after training: 0.5875
User 54649 does not improve AUC. Reverting changes.
Training on augumented user 96689 17/50 current_auc = 0.5875
User 96689 AUC after training: 0.5875
User 96689 does not improve AUC. Reverting changes.
Training on augumented user 18325 18/50 current_auc = 0.5875
User 18325 AUC after training: 0.5875
User 18325 does not improve AUC. Reverting changes.
Training on augumented user 104620 19/50 current_auc = 0.5875
User 104620 AUC after training: 0.5875
User 104620 does not improve AUC. Reverting changes.
Training on augumented user 8260 20/50 current_auc = 0.5875
User 8260 AUC after training: 0.5875
User 8260 does not improve AUC. Reverting changes.
Training on augumented user 100344 21/50 current_auc = 0.5875
User 100344 AUC after training: 0.5875
User 100344 does not improve AUC. Reverting changes.
Training on augumented user 41911 22/50 current_auc = 0.5875
User 41911 AUC after training: 0.5875
User 41911 does not improve AUC. Reverting changes.
Training on augumented user 60521 23/50 current_auc = 0.5875
User 60521 AUC after training: 0.5875
User 60521 does not improve AUC. Reverting changes.
Training on augumented user 22576 24/50 current_auc = 0.5875
User 22576 AUC after training: 0.5875
User 22576 does not improve AUC. Reverting changes.
Training on augumented user 76363 25/50 current_auc = 0.5875
User 76363 AUC after training: 0.5875
User 76363 does not improve AUC. Reverting changes.
Training on augumented user 42305 26/50 current_auc = 0.5875
User 42305 AUC after training: 0.5875
User 42305 does not improve AUC. Reverting changes.
Training on augumented user 111147 27/50 current_auc = 0.5875
User 111147 AUC after training: 0.5875
User 111147 does not improve AUC. Reverting changes.
Training on augumented user 67569 28/50 current_auc = 0.5875
User 67569 AUC after training: 0.578125
User 67569 does not improve AUC. Reverting changes.
Training on augumented user 123008 29/50 current_auc = 0.5875
User 123008 AUC after training: 0.5875
User 123008 does not improve AUC. Reverting changes.
Training on augumented user 31696 30/50 current_auc = 0.5875
User 31696 AUC after training: 0.5875
User 31696 does not improve AUC. Reverting changes.
Training on augumented user 61458 31/50 current_auc = 0.5875
User 61458 AUC after training: 0.590625
User 61458 improves AUC. Keeping the model.
Training on augumented user 91461 32/50 current_auc = 0.590625
User 91461 AUC after training: 0.590625
User 91461 does not improve AUC. Reverting changes.
Training on augumented user 48955 33/50 current_auc = 0.590625
User 48955 AUC after training: 0.5875
User 48955 does not improve AUC. Reverting changes.
Training on augumented user 18954 34/50 current_auc = 0.590625
User 18954 AUC after training: 0.5875
User 18954 does not improve AUC. Reverting changes.
Training on augumented user 6101 35/50 current_auc = 0.590625
User 6101 AUC after training: 0.5875
User 6101 does not improve AUC. Reverting changes.
Training on augumented user 27469 36/50 current_auc = 0.590625
User 27469 AUC after training: 0.571875
User 27469 does not improve AUC. Reverting changes.
Training on augumented user 99146 37/50 current_auc = 0.590625
User 99146 AUC after training: 0.590625
User 99146 does not improve AUC. Reverting changes.
Training on augumented user 44791 38/50 current_auc = 0.590625
User 44791 AUC after training: 0.5875
User 44791 does not improve AUC. Reverting changes.
Training on augumented user 47535 39/50 current_auc = 0.590625
User 47535 AUC after training: 0.5875
User 47535 does not improve AUC. Reverting changes.
Training on augumented user 114939 40/50 current_auc = 0.590625
User 114939 AUC after training: 0.590625
User 114939 does not improve AUC. Reverting changes.
Training on augumented user 58776 41/50 current_auc = 0.590625
User 58776 AUC after training: 0.590625
User 58776 does not improve AUC. Reverting changes.
Training on augumented user 81110 42/50 current_auc = 0.590625
User 81110 AUC after training: 0.590625
User 81110 does not improve AUC. Reverting changes.
Training on augumented user 100425 43/50 current_auc = 0.590625
User 100425 AUC after training: 0.590625
User 100425 does not improve AUC. Reverting changes.
Training on augumented user 25553 44/50 current_auc = 0.590625
User 25553 AUC after training: 0.590625
User 25553 does not improve AUC. Reverting changes.
Training on augumented user 20593 45/50 current_auc = 0.590625
User 20593 AUC after training: 0.590625
User 20593 does not improve AUC. Reverting changes.
Training on augumented user 113951 46/50 current_auc = 0.590625
User 113951 AUC after training: 0.590625
User 113951 does not improve AUC. Reverting changes.
Training on augumented user 75819 47/50 current_auc = 0.590625
User 75819 AUC after training: 0.590625
User 75819 does not improve AUC. Reverting changes.
Training on augumented user 40084 48/50 current_auc = 0.590625
User 40084 AUC after training: 0.5875
User 40084 does not improve AUC. Reverting changes.
Training on augumented user 90277 49/50 current_auc = 0.590625
User 90277 AUC after training: 0.590625
User 90277 does not improve AUC. Reverting changes.
[2024-12-02 17:40:09.226981] start test user 258 4/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:40:09.646703] start test user 258 4/568 recall augumented users by random, augumented_users = [118975, 108788, 75874, 106374, 36240, 74992, 76753, 53712, 108547, 120615, 1986, 52476, 105595, 77779, 92302, 67249, 126030, 43833, 48028, 110784, 100085, 2595, 131860, 29961, 25818, 134017, 129462, 47870, 58666, 89842, 25035, 130091, 134618, 117051, 6253, 115781, 8686, 123331, 103278, 137044, 107839, 502, 86172, 65945, 64011, 7807, 31783, 97268, 105195, 51042]
[2024-12-02 17:40:09.661602] user = 258 Cloud 4/568
[2024-12-02 17:40:09.671668] user = 258 Local 4/568
[2024-12-02 17:40:09.746803] user = 258 Local+ 4/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:40:12.175924] user = 258 MPDA- 4/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6166666666666667
Training on augumented user 118975 0/50 current_auc = 0.6166666666666667
User 118975 AUC after training: 0.6166666666666667
User 118975 does not improve AUC. Reverting changes.
Training on augumented user 108788 1/50 current_auc = 0.6166666666666667
User 108788 AUC after training: 0.6166666666666667
User 108788 does not improve AUC. Reverting changes.
Training on augumented user 75874 2/50 current_auc = 0.6166666666666667
User 75874 AUC after training: 0.6166666666666667
User 75874 does not improve AUC. Reverting changes.
Training on augumented user 106374 3/50 current_auc = 0.6166666666666667
User 106374 AUC after training: 0.6
User 106374 does not improve AUC. Reverting changes.
Training on augumented user 36240 4/50 current_auc = 0.6166666666666667
User 36240 AUC after training: 0.6166666666666667
User 36240 does not improve AUC. Reverting changes.
Training on augumented user 74992 5/50 current_auc = 0.6166666666666667
User 74992 AUC after training: 0.6166666666666667
User 74992 does not improve AUC. Reverting changes.
Training on augumented user 76753 6/50 current_auc = 0.6166666666666667
User 76753 AUC after training: 0.6166666666666667
User 76753 does not improve AUC. Reverting changes.
Training on augumented user 53712 7/50 current_auc = 0.6166666666666667
User 53712 AUC after training: 0.6166666666666667
User 53712 does not improve AUC. Reverting changes.
Training on augumented user 108547 8/50 current_auc = 0.6166666666666667
User 108547 AUC after training: 0.6166666666666667
User 108547 does not improve AUC. Reverting changes.
Training on augumented user 120615 9/50 current_auc = 0.6166666666666667
User 120615 AUC after training: 0.6166666666666667
User 120615 does not improve AUC. Reverting changes.
Training on augumented user 1986 10/50 current_auc = 0.6166666666666667
User 1986 AUC after training: 0.6166666666666667
User 1986 does not improve AUC. Reverting changes.
Training on augumented user 52476 11/50 current_auc = 0.6166666666666667
User 52476 AUC after training: 0.6166666666666667
User 52476 does not improve AUC. Reverting changes.
Training on augumented user 105595 12/50 current_auc = 0.6166666666666667
User 105595 AUC after training: 0.6166666666666667
User 105595 does not improve AUC. Reverting changes.
Training on augumented user 77779 13/50 current_auc = 0.6166666666666667
User 77779 AUC after training: 0.6166666666666667
User 77779 does not improve AUC. Reverting changes.
Training on augumented user 92302 14/50 current_auc = 0.6166666666666667
User 92302 AUC after training: 0.5833333333333333
User 92302 does not improve AUC. Reverting changes.
Training on augumented user 67249 15/50 current_auc = 0.6166666666666667
User 67249 AUC after training: 0.6
User 67249 does not improve AUC. Reverting changes.
Training on augumented user 126030 16/50 current_auc = 0.6166666666666667
User 126030 AUC after training: 0.6166666666666667
User 126030 does not improve AUC. Reverting changes.
Training on augumented user 43833 17/50 current_auc = 0.6166666666666667
User 43833 AUC after training: 0.6166666666666667
User 43833 does not improve AUC. Reverting changes.
Training on augumented user 48028 18/50 current_auc = 0.6166666666666667
User 48028 AUC after training: 0.6166666666666667
User 48028 does not improve AUC. Reverting changes.
Training on augumented user 110784 19/50 current_auc = 0.6166666666666667
User 110784 AUC after training: 0.6166666666666667
User 110784 does not improve AUC. Reverting changes.
Training on augumented user 100085 20/50 current_auc = 0.6166666666666667
User 100085 AUC after training: 0.6166666666666667
User 100085 does not improve AUC. Reverting changes.
Training on augumented user 2595 21/50 current_auc = 0.6166666666666667
User 2595 AUC after training: 0.6166666666666667
User 2595 does not improve AUC. Reverting changes.
Training on augumented user 131860 22/50 current_auc = 0.6166666666666667
User 131860 AUC after training: 0.6166666666666667
User 131860 does not improve AUC. Reverting changes.
Training on augumented user 29961 23/50 current_auc = 0.6166666666666667
User 29961 AUC after training: 0.6166666666666667
User 29961 does not improve AUC. Reverting changes.
Training on augumented user 25818 24/50 current_auc = 0.6166666666666667
User 25818 AUC after training: 0.6
User 25818 does not improve AUC. Reverting changes.
Training on augumented user 134017 25/50 current_auc = 0.6166666666666667
User 134017 AUC after training: 0.6166666666666667
User 134017 does not improve AUC. Reverting changes.
Training on augumented user 129462 26/50 current_auc = 0.6166666666666667
User 129462 AUC after training: 0.6166666666666667
User 129462 does not improve AUC. Reverting changes.
Training on augumented user 47870 27/50 current_auc = 0.6166666666666667
User 47870 AUC after training: 0.6166666666666667
User 47870 does not improve AUC. Reverting changes.
Training on augumented user 58666 28/50 current_auc = 0.6166666666666667
User 58666 AUC after training: 0.6166666666666667
User 58666 does not improve AUC. Reverting changes.
Training on augumented user 89842 29/50 current_auc = 0.6166666666666667
User 89842 AUC after training: 0.6166666666666667
User 89842 does not improve AUC. Reverting changes.
Training on augumented user 25035 30/50 current_auc = 0.6166666666666667
User 25035 AUC after training: 0.6166666666666667
User 25035 does not improve AUC. Reverting changes.
Training on augumented user 130091 31/50 current_auc = 0.6166666666666667
User 130091 AUC after training: 0.6
User 130091 does not improve AUC. Reverting changes.
Training on augumented user 134618 32/50 current_auc = 0.6166666666666667
User 134618 AUC after training: 0.6
User 134618 does not improve AUC. Reverting changes.
Training on augumented user 117051 33/50 current_auc = 0.6166666666666667
User 117051 AUC after training: 0.6166666666666667
User 117051 does not improve AUC. Reverting changes.
Training on augumented user 6253 34/50 current_auc = 0.6166666666666667
User 6253 AUC after training: 0.6166666666666667
User 6253 does not improve AUC. Reverting changes.
Training on augumented user 115781 35/50 current_auc = 0.6166666666666667
User 115781 AUC after training: 0.6166666666666667
User 115781 does not improve AUC. Reverting changes.
Training on augumented user 8686 36/50 current_auc = 0.6166666666666667
User 8686 AUC after training: 0.6166666666666667
User 8686 does not improve AUC. Reverting changes.
Training on augumented user 123331 37/50 current_auc = 0.6166666666666667
User 123331 AUC after training: 0.6166666666666667
User 123331 does not improve AUC. Reverting changes.
Training on augumented user 103278 38/50 current_auc = 0.6166666666666667
User 103278 AUC after training: 0.6166666666666667
User 103278 does not improve AUC. Reverting changes.
Training on augumented user 137044 39/50 current_auc = 0.6166666666666667
User 137044 AUC after training: 0.6166666666666667
User 137044 does not improve AUC. Reverting changes.
Training on augumented user 107839 40/50 current_auc = 0.6166666666666667
User 107839 AUC after training: 0.6166666666666667
User 107839 does not improve AUC. Reverting changes.
Training on augumented user 502 41/50 current_auc = 0.6166666666666667
User 502 AUC after training: 0.6166666666666667
User 502 does not improve AUC. Reverting changes.
Training on augumented user 86172 42/50 current_auc = 0.6166666666666667
User 86172 AUC after training: 0.6166666666666667
User 86172 does not improve AUC. Reverting changes.
Training on augumented user 65945 43/50 current_auc = 0.6166666666666667
User 65945 AUC after training: 0.6166666666666667
User 65945 does not improve AUC. Reverting changes.
Training on augumented user 64011 44/50 current_auc = 0.6166666666666667
User 64011 AUC after training: 0.6
User 64011 does not improve AUC. Reverting changes.
Training on augumented user 7807 45/50 current_auc = 0.6166666666666667
User 7807 AUC after training: 0.6166666666666667
User 7807 does not improve AUC. Reverting changes.
Training on augumented user 31783 46/50 current_auc = 0.6166666666666667
User 31783 AUC after training: 0.6166666666666667
User 31783 does not improve AUC. Reverting changes.
Training on augumented user 97268 47/50 current_auc = 0.6166666666666667
User 97268 AUC after training: 0.6166666666666667
User 97268 does not improve AUC. Reverting changes.
Training on augumented user 105195 48/50 current_auc = 0.6166666666666667
User 105195 AUC after training: 0.6166666666666667
User 105195 does not improve AUC. Reverting changes.
Training on augumented user 51042 49/50 current_auc = 0.6166666666666667
User 51042 AUC after training: 0.6166666666666667
User 51042 does not improve AUC. Reverting changes.
[2024-12-02 17:40:42.952422] start test user 271 5/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:40:43.430330] start test user 271 5/568 recall augumented users by random, augumented_users = [27304, 134750, 74036, 70987, 67423, 120576, 124369, 58460, 67365, 24077, 137482, 91515, 81912, 64634, 29802, 119614, 2995, 92860, 114272, 77521, 124551, 87019, 70093, 128290, 96475, 132463, 105773, 136835, 14100, 55728, 63091, 134858, 131650, 60942, 110944, 75048, 35375, 117787, 19434, 133493, 46546, 93930, 91688, 97562, 138290, 38411, 91894, 58730, 91330, 124071]
[2024-12-02 17:40:43.451935] user = 271 Cloud 5/568
[2024-12-02 17:40:43.498757] user = 271 Local 5/568
[2024-12-02 17:40:43.603267] user = 271 Local+ 5/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:40:45.907514] user = 271 MPDA- 5/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6118340163934426
Training on augumented user 27304 0/50 current_auc = 0.6118340163934426
User 27304 AUC after training: 0.6115266393442623
User 27304 does not improve AUC. Reverting changes.
Training on augumented user 134750 1/50 current_auc = 0.6118340163934426
User 134750 AUC after training: 0.6122438524590164
User 134750 improves AUC. Keeping the model.
Training on augumented user 74036 2/50 current_auc = 0.6122438524590164
User 74036 AUC after training: 0.6099897540983606
User 74036 does not improve AUC. Reverting changes.
Training on augumented user 70987 3/50 current_auc = 0.6122438524590164
User 70987 AUC after training: 0.6120389344262295
User 70987 does not improve AUC. Reverting changes.
Training on augumented user 67423 4/50 current_auc = 0.6122438524590164
User 67423 AUC after training: 0.6112192622950819
User 67423 does not improve AUC. Reverting changes.
Training on augumented user 120576 5/50 current_auc = 0.6122438524590164
User 120576 AUC after training: 0.6122438524590164
User 120576 does not improve AUC. Reverting changes.
Training on augumented user 124369 6/50 current_auc = 0.6122438524590164
User 124369 AUC after training: 0.6114241803278689
User 124369 does not improve AUC. Reverting changes.
Training on augumented user 58460 7/50 current_auc = 0.6122438524590164
User 58460 AUC after training: 0.6124487704918034
User 58460 improves AUC. Keeping the model.
Training on augumented user 67365 8/50 current_auc = 0.6124487704918034
User 67365 AUC after training: 0.612141393442623
User 67365 does not improve AUC. Reverting changes.
Training on augumented user 24077 9/50 current_auc = 0.6124487704918034
User 24077 AUC after training: 0.6116290983606557
User 24077 does not improve AUC. Reverting changes.
Training on augumented user 137482 10/50 current_auc = 0.6124487704918034
User 137482 AUC after training: 0.6120389344262296
User 137482 does not improve AUC. Reverting changes.
Training on augumented user 91515 11/50 current_auc = 0.6124487704918034
User 91515 AUC after training: 0.6123463114754097
User 91515 does not improve AUC. Reverting changes.
Training on augumented user 81912 12/50 current_auc = 0.6124487704918034
User 81912 AUC after training: 0.6117315573770492
User 81912 does not improve AUC. Reverting changes.
Training on augumented user 64634 13/50 current_auc = 0.6124487704918034
User 64634 AUC after training: 0.6124487704918032
User 64634 does not improve AUC. Reverting changes.
Training on augumented user 29802 14/50 current_auc = 0.6124487704918034
User 29802 AUC after training: 0.6122438524590164
User 29802 does not improve AUC. Reverting changes.
Training on augumented user 119614 15/50 current_auc = 0.6124487704918034
User 119614 AUC after training: 0.6123463114754099
User 119614 does not improve AUC. Reverting changes.
Training on augumented user 2995 16/50 current_auc = 0.6124487704918034
User 2995 AUC after training: 0.6117315573770492
User 2995 does not improve AUC. Reverting changes.
Training on augumented user 92860 17/50 current_auc = 0.6124487704918034
User 92860 AUC after training: 0.6123463114754099
User 92860 does not improve AUC. Reverting changes.
Training on augumented user 114272 18/50 current_auc = 0.6124487704918034
User 114272 AUC after training: 0.6123463114754099
User 114272 does not improve AUC. Reverting changes.
Training on augumented user 77521 19/50 current_auc = 0.6124487704918034
User 77521 AUC after training: 0.6122438524590164
User 77521 does not improve AUC. Reverting changes.
Training on augumented user 124551 20/50 current_auc = 0.6124487704918034
User 124551 AUC after training: 0.611219262295082
User 124551 does not improve AUC. Reverting changes.
Training on augumented user 87019 21/50 current_auc = 0.6124487704918034
User 87019 AUC after training: 0.6118340163934426
User 87019 does not improve AUC. Reverting changes.
Training on augumented user 70093 22/50 current_auc = 0.6124487704918034
User 70093 AUC after training: 0.6119364754098361
User 70093 does not improve AUC. Reverting changes.
Training on augumented user 128290 23/50 current_auc = 0.6124487704918034
User 128290 AUC after training: 0.6116290983606557
User 128290 does not improve AUC. Reverting changes.
Training on augumented user 96475 24/50 current_auc = 0.6124487704918034
User 96475 AUC after training: 0.6114241803278688
User 96475 does not improve AUC. Reverting changes.
Training on augumented user 132463 25/50 current_auc = 0.6124487704918034
User 132463 AUC after training: 0.6117315573770491
User 132463 does not improve AUC. Reverting changes.
Training on augumented user 105773 26/50 current_auc = 0.6124487704918034
User 105773 AUC after training: 0.6116803278688525
User 105773 does not improve AUC. Reverting changes.
Training on augumented user 136835 27/50 current_auc = 0.6124487704918034
User 136835 AUC after training: 0.6124487704918034
User 136835 does not improve AUC. Reverting changes.
Training on augumented user 14100 28/50 current_auc = 0.6124487704918034
User 14100 AUC after training: 0.6118340163934426
User 14100 does not improve AUC. Reverting changes.
Training on augumented user 55728 29/50 current_auc = 0.6124487704918034
User 55728 AUC after training: 0.6120389344262296
User 55728 does not improve AUC. Reverting changes.
Training on augumented user 63091 30/50 current_auc = 0.6124487704918034
User 63091 AUC after training: 0.6111168032786886
User 63091 does not improve AUC. Reverting changes.
Training on augumented user 134858 31/50 current_auc = 0.6124487704918034
User 134858 AUC after training: 0.6117315573770491
User 134858 does not improve AUC. Reverting changes.
Training on augumented user 131650 32/50 current_auc = 0.6124487704918034
User 131650 AUC after training: 0.6122438524590164
User 131650 does not improve AUC. Reverting changes.
Training on augumented user 60942 33/50 current_auc = 0.6124487704918034
User 60942 AUC after training: 0.6118340163934426
User 60942 does not improve AUC. Reverting changes.
Training on augumented user 110944 34/50 current_auc = 0.6124487704918034
User 110944 AUC after training: 0.6117315573770492
User 110944 does not improve AUC. Reverting changes.
Training on augumented user 75048 35/50 current_auc = 0.6124487704918034
User 75048 AUC after training: 0.6122438524590164
User 75048 does not improve AUC. Reverting changes.
Training on augumented user 35375 36/50 current_auc = 0.6124487704918034
User 35375 AUC after training: 0.6123463114754097
User 35375 does not improve AUC. Reverting changes.
Training on augumented user 117787 37/50 current_auc = 0.6124487704918034
User 117787 AUC after training: 0.6121413934426229
User 117787 does not improve AUC. Reverting changes.
Training on augumented user 19434 38/50 current_auc = 0.6124487704918034
User 19434 AUC after training: 0.612141393442623
User 19434 does not improve AUC. Reverting changes.
Training on augumented user 133493 39/50 current_auc = 0.6124487704918034
User 133493 AUC after training: 0.6117315573770492
User 133493 does not improve AUC. Reverting changes.
Training on augumented user 46546 40/50 current_auc = 0.6124487704918034
User 46546 AUC after training: 0.611936475409836
User 46546 does not improve AUC. Reverting changes.
Training on augumented user 93930 41/50 current_auc = 0.6124487704918034
User 93930 AUC after training: 0.6116290983606557
User 93930 does not improve AUC. Reverting changes.
Training on augumented user 91688 42/50 current_auc = 0.6124487704918034
User 91688 AUC after training: 0.6127561475409836
User 91688 improves AUC. Keeping the model.
Training on augumented user 97562 43/50 current_auc = 0.6127561475409836
User 97562 AUC after training: 0.6123463114754099
User 97562 does not improve AUC. Reverting changes.
Training on augumented user 138290 44/50 current_auc = 0.6127561475409836
User 138290 AUC after training: 0.6125512295081967
User 138290 does not improve AUC. Reverting changes.
Training on augumented user 38411 45/50 current_auc = 0.6127561475409836
User 38411 AUC after training: 0.612141393442623
User 38411 does not improve AUC. Reverting changes.
Training on augumented user 91894 46/50 current_auc = 0.6127561475409836
User 91894 AUC after training: 0.6127561475409836
User 91894 does not improve AUC. Reverting changes.
Training on augumented user 58730 47/50 current_auc = 0.6127561475409836
User 58730 AUC after training: 0.6125512295081967
User 58730 does not improve AUC. Reverting changes.
Training on augumented user 91330 48/50 current_auc = 0.6127561475409836
User 91330 AUC after training: 0.6122438524590164
User 91330 does not improve AUC. Reverting changes.
Training on augumented user 124071 49/50 current_auc = 0.6127561475409836
User 124071 AUC after training: 0.6133709016393443
User 124071 improves AUC. Keeping the model.
[2024-12-02 17:41:22.262409] start test user 317 6/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:41:23.091099] start test user 317 6/568 recall augumented users by random, augumented_users = [117684, 22641, 66439, 112581, 54923, 28716, 93718, 105516, 52190, 123203, 115613, 77313, 127885, 7034, 38494, 5165, 66608, 109044, 115811, 25795, 46038, 79518, 129689, 134168, 47472, 67958, 135787, 60980, 117639, 11608, 78921, 6351, 82742, 121824, 95604, 16668, 115241, 94139, 59734, 60104, 106430, 116061, 1450, 81845, 99484, 82950, 72778, 122005, 133812, 26016]
[2024-12-02 17:41:23.114548] user = 317 Cloud 6/568
[2024-12-02 17:41:23.144214] user = 317 Local 6/568
[2024-12-02 17:41:23.223393] user = 317 Local+ 6/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:41:26.052231] user = 317 MPDA- 6/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 117684 0/50 current_auc = 0.5
User 117684 AUC after training: 0.5
User 117684 does not improve AUC. Reverting changes.
Training on augumented user 22641 1/50 current_auc = 0.5
User 22641 AUC after training: 0.5
User 22641 does not improve AUC. Reverting changes.
Training on augumented user 66439 2/50 current_auc = 0.5
User 66439 AUC after training: 0.5
User 66439 does not improve AUC. Reverting changes.
Training on augumented user 112581 3/50 current_auc = 0.5
User 112581 AUC after training: 0.5
User 112581 does not improve AUC. Reverting changes.
Training on augumented user 54923 4/50 current_auc = 0.5
User 54923 AUC after training: 0.5
User 54923 does not improve AUC. Reverting changes.
Training on augumented user 28716 5/50 current_auc = 0.5
User 28716 AUC after training: 0.5
User 28716 does not improve AUC. Reverting changes.
Training on augumented user 93718 6/50 current_auc = 0.5
User 93718 AUC after training: 0.5
User 93718 does not improve AUC. Reverting changes.
Training on augumented user 105516 7/50 current_auc = 0.5
User 105516 AUC after training: 0.5
User 105516 does not improve AUC. Reverting changes.
Training on augumented user 52190 8/50 current_auc = 0.5
User 52190 AUC after training: 0.5
User 52190 does not improve AUC. Reverting changes.
Training on augumented user 123203 9/50 current_auc = 0.5
User 123203 AUC after training: 0.5
User 123203 does not improve AUC. Reverting changes.
Training on augumented user 115613 10/50 current_auc = 0.5
User 115613 AUC after training: 0.5
User 115613 does not improve AUC. Reverting changes.
Training on augumented user 77313 11/50 current_auc = 0.5
User 77313 AUC after training: 0.5
User 77313 does not improve AUC. Reverting changes.
Training on augumented user 127885 12/50 current_auc = 0.5
User 127885 AUC after training: 0.5
User 127885 does not improve AUC. Reverting changes.
Training on augumented user 7034 13/50 current_auc = 0.5
User 7034 AUC after training: 0.5
User 7034 does not improve AUC. Reverting changes.
Training on augumented user 38494 14/50 current_auc = 0.5
User 38494 AUC after training: 0.5
User 38494 does not improve AUC. Reverting changes.
Training on augumented user 5165 15/50 current_auc = 0.5
User 5165 AUC after training: 0.5
User 5165 does not improve AUC. Reverting changes.
Training on augumented user 66608 16/50 current_auc = 0.5
User 66608 AUC after training: 0.5
User 66608 does not improve AUC. Reverting changes.
Training on augumented user 109044 17/50 current_auc = 0.5
User 109044 AUC after training: 0.5
User 109044 does not improve AUC. Reverting changes.
Training on augumented user 115811 18/50 current_auc = 0.5
User 115811 AUC after training: 0.5
User 115811 does not improve AUC. Reverting changes.
Training on augumented user 25795 19/50 current_auc = 0.5
User 25795 AUC after training: 0.5
User 25795 does not improve AUC. Reverting changes.
Training on augumented user 46038 20/50 current_auc = 0.5
User 46038 AUC after training: 0.5
User 46038 does not improve AUC. Reverting changes.
Training on augumented user 79518 21/50 current_auc = 0.5
User 79518 AUC after training: 0.5
User 79518 does not improve AUC. Reverting changes.
Training on augumented user 129689 22/50 current_auc = 0.5
User 129689 AUC after training: 0.5
User 129689 does not improve AUC. Reverting changes.
Training on augumented user 134168 23/50 current_auc = 0.5
User 134168 AUC after training: 0.5
User 134168 does not improve AUC. Reverting changes.
Training on augumented user 47472 24/50 current_auc = 0.5
User 47472 AUC after training: 0.5
User 47472 does not improve AUC. Reverting changes.
Training on augumented user 67958 25/50 current_auc = 0.5
User 67958 AUC after training: 0.5
User 67958 does not improve AUC. Reverting changes.
Training on augumented user 135787 26/50 current_auc = 0.5
User 135787 AUC after training: 0.5
User 135787 does not improve AUC. Reverting changes.
Training on augumented user 60980 27/50 current_auc = 0.5
User 60980 AUC after training: 0.5
User 60980 does not improve AUC. Reverting changes.
Training on augumented user 117639 28/50 current_auc = 0.5
User 117639 AUC after training: 0.5
User 117639 does not improve AUC. Reverting changes.
Training on augumented user 11608 29/50 current_auc = 0.5
User 11608 AUC after training: 0.5
User 11608 does not improve AUC. Reverting changes.
Training on augumented user 78921 30/50 current_auc = 0.5
User 78921 AUC after training: 0.5
User 78921 does not improve AUC. Reverting changes.
Training on augumented user 6351 31/50 current_auc = 0.5
User 6351 AUC after training: 0.5
User 6351 does not improve AUC. Reverting changes.
Training on augumented user 82742 32/50 current_auc = 0.5
User 82742 AUC after training: 0.5
User 82742 does not improve AUC. Reverting changes.
Training on augumented user 121824 33/50 current_auc = 0.5
User 121824 AUC after training: 0.5
User 121824 does not improve AUC. Reverting changes.
Training on augumented user 95604 34/50 current_auc = 0.5
User 95604 AUC after training: 0.5
User 95604 does not improve AUC. Reverting changes.
Training on augumented user 16668 35/50 current_auc = 0.5
User 16668 AUC after training: 0.5
User 16668 does not improve AUC. Reverting changes.
Training on augumented user 115241 36/50 current_auc = 0.5
User 115241 AUC after training: 0.5
User 115241 does not improve AUC. Reverting changes.
Training on augumented user 94139 37/50 current_auc = 0.5
User 94139 AUC after training: 0.5
User 94139 does not improve AUC. Reverting changes.
Training on augumented user 59734 38/50 current_auc = 0.5
User 59734 AUC after training: 0.5
User 59734 does not improve AUC. Reverting changes.
Training on augumented user 60104 39/50 current_auc = 0.5
User 60104 AUC after training: 0.5
User 60104 does not improve AUC. Reverting changes.
Training on augumented user 106430 40/50 current_auc = 0.5
User 106430 AUC after training: 0.5
User 106430 does not improve AUC. Reverting changes.
Training on augumented user 116061 41/50 current_auc = 0.5
User 116061 AUC after training: 0.5
User 116061 does not improve AUC. Reverting changes.
Training on augumented user 1450 42/50 current_auc = 0.5
User 1450 AUC after training: 0.5
User 1450 does not improve AUC. Reverting changes.
Training on augumented user 81845 43/50 current_auc = 0.5
User 81845 AUC after training: 0.5
User 81845 does not improve AUC. Reverting changes.
Training on augumented user 99484 44/50 current_auc = 0.5
User 99484 AUC after training: 0.5
User 99484 does not improve AUC. Reverting changes.
Training on augumented user 82950 45/50 current_auc = 0.5
User 82950 AUC after training: 0.5
User 82950 does not improve AUC. Reverting changes.
Training on augumented user 72778 46/50 current_auc = 0.5
User 72778 AUC after training: 0.5
User 72778 does not improve AUC. Reverting changes.
Training on augumented user 122005 47/50 current_auc = 0.5
User 122005 AUC after training: 0.5
User 122005 does not improve AUC. Reverting changes.
Training on augumented user 133812 48/50 current_auc = 0.5
User 133812 AUC after training: 0.5
User 133812 does not improve AUC. Reverting changes.
Training on augumented user 26016 49/50 current_auc = 0.5
User 26016 AUC after training: 0.5
User 26016 does not improve AUC. Reverting changes.
[2024-12-02 17:41:56.540280] start test user 348 7/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:41:57.390375] start test user 348 7/568 recall augumented users by random, augumented_users = [17547, 122526, 16801, 86347, 30814, 81730, 136000, 7261, 108469, 5078, 120273, 42113, 132190, 82753, 43215, 35691, 94664, 59688, 137462, 14158, 135370, 65169, 114814, 64502, 76256, 87510, 126402, 100052, 34558, 124250, 87506, 93053, 8817, 103440, 81903, 28517, 65299, 91918, 53603, 68237, 45017, 43787, 102898, 88747, 103488, 137522, 28970, 59363, 66915, 62490]
[2024-12-02 17:41:57.408494] user = 348 Cloud 7/568
[2024-12-02 17:41:57.443405] user = 348 Local 7/568
[2024-12-02 17:41:57.552413] user = 348 Local+ 7/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:42:00.056441] user = 348 MPDA- 7/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5666820064427058
Training on augumented user 17547 0/50 current_auc = 0.5666820064427058
User 17547 AUC after training: 0.5663291915938027
User 17547 does not improve AUC. Reverting changes.
Training on augumented user 122526 1/50 current_auc = 0.5666820064427058
User 122526 AUC after training: 0.5664519098021169
User 122526 does not improve AUC. Reverting changes.
Training on augumented user 16801 2/50 current_auc = 0.5666820064427058
User 16801 AUC after training: 0.5667587053229022
User 16801 improves AUC. Keeping the model.
Training on augumented user 86347 3/50 current_auc = 0.5667587053229022
User 86347 AUC after training: 0.5668507439791379
User 86347 improves AUC. Keeping the model.
Training on augumented user 30814 4/50 current_auc = 0.5668507439791379
User 30814 AUC after training: 0.5666359871145881
User 30814 does not improve AUC. Reverting changes.
Training on augumented user 81730 5/50 current_auc = 0.5668507439791379
User 81730 AUC after training: 0.56680472465102
User 81730 does not improve AUC. Reverting changes.
Training on augumented user 136000 6/50 current_auc = 0.5668507439791379
User 136000 AUC after training: 0.5670655008436877
User 136000 improves AUC. Keeping the model.
Training on augumented user 7261 7/50 current_auc = 0.5670655008436877
User 7261 AUC after training: 0.5670041417395306
User 7261 does not improve AUC. Reverting changes.
Training on augumented user 108469 8/50 current_auc = 0.5670655008436877
User 108469 AUC after training: 0.5672495781561588
User 108469 improves AUC. Keeping the model.
Training on augumented user 5078 9/50 current_auc = 0.5672495781561588
User 5078 AUC after training: 0.5671268599478447
User 5078 does not improve AUC. Reverting changes.
Training on augumented user 120273 10/50 current_auc = 0.5672495781561588
User 120273 AUC after training: 0.5670041417395306
User 120273 does not improve AUC. Reverting changes.
Training on augumented user 42113 11/50 current_auc = 0.5672495781561588
User 42113 AUC after training: 0.566973462187452
User 42113 does not improve AUC. Reverting changes.
Training on augumented user 132190 12/50 current_auc = 0.5672495781561588
User 132190 AUC after training: 0.5673569565884339
User 132190 improves AUC. Keeping the model.
Training on augumented user 82753 13/50 current_auc = 0.5673569565884339
User 82753 AUC after training: 0.5669888019634914
User 82753 does not improve AUC. Reverting changes.
Training on augumented user 43215 14/50 current_auc = 0.5673569565884339
User 43215 AUC after training: 0.5669581224114127
User 43215 does not improve AUC. Reverting changes.
Training on augumented user 35691 15/50 current_auc = 0.5673569565884339
User 35691 AUC after training: 0.567080840619727
User 35691 does not improve AUC. Reverting changes.
Training on augumented user 94664 16/50 current_auc = 0.5673569565884339
User 94664 AUC after training: 0.566973462187452
User 94664 does not improve AUC. Reverting changes.
Training on augumented user 59688 17/50 current_auc = 0.5673569565884339
User 59688 AUC after training: 0.5671728792759625
User 59688 does not improve AUC. Reverting changes.
Training on augumented user 137462 18/50 current_auc = 0.5673569565884339
User 137462 AUC after training: 0.5674489952446694
User 137462 improves AUC. Keeping the model.
Training on augumented user 14158 19/50 current_auc = 0.5674489952446694
User 14158 AUC after training: 0.5672649179321981
User 14158 does not improve AUC. Reverting changes.
Training on augumented user 135370 20/50 current_auc = 0.5674489952446694
User 135370 AUC after training: 0.566344531369842
User 135370 does not improve AUC. Reverting changes.
Training on augumented user 65169 21/50 current_auc = 0.5674489952446694
User 65169 AUC after training: 0.5665439484583525
User 65169 does not improve AUC. Reverting changes.
Training on augumented user 114814 22/50 current_auc = 0.5674489952446694
User 114814 AUC after training: 0.567080840619727
User 114814 does not improve AUC. Reverting changes.
Training on augumented user 64502 23/50 current_auc = 0.5674489952446694
User 64502 AUC after training: 0.5680012271820831
User 64502 improves AUC. Keeping the model.
Training on augumented user 76256 24/50 current_auc = 0.5680012271820831
User 76256 AUC after training: 0.5677251112133763
User 76256 does not improve AUC. Reverting changes.
Training on augumented user 87510 25/50 current_auc = 0.5680012271820831
User 87510 AUC after training: 0.56827734315079
User 87510 improves AUC. Keeping the model.
Training on augumented user 126402 26/50 current_auc = 0.56827734315079
User 126402 AUC after training: 0.5679705476300045
User 126402 does not improve AUC. Reverting changes.
Training on augumented user 100052 27/50 current_auc = 0.56827734315079
User 100052 AUC after training: 0.5683693818070257
User 100052 improves AUC. Keeping the model.
Training on augumented user 34558 28/50 current_auc = 0.5683693818070257
User 34558 AUC after training: 0.5683693818070257
User 34558 does not improve AUC. Reverting changes.
Training on augumented user 124250 29/50 current_auc = 0.5683693818070257
User 124250 AUC after training: 0.5683387022549471
User 124250 does not improve AUC. Reverting changes.
Training on augumented user 87506 30/50 current_auc = 0.5683693818070257
User 87506 AUC after training: 0.56680472465102
User 87506 does not improve AUC. Reverting changes.
Training on augumented user 93053 31/50 current_auc = 0.5683693818070257
User 93053 AUC after training: 0.568215984046633
User 93053 does not improve AUC. Reverting changes.
Training on augumented user 8817 32/50 current_auc = 0.5683693818070257
User 8817 AUC after training: 0.5680012271820831
User 8817 does not improve AUC. Reverting changes.
Training on augumented user 103440 33/50 current_auc = 0.5683693818070257
User 103440 AUC after training: 0.568737536431968
User 103440 improves AUC. Keeping the model.
Training on augumented user 81903 34/50 current_auc = 0.568737536431968
User 81903 AUC after training: 0.5688909341923608
User 81903 improves AUC. Keeping the model.
Training on augumented user 28517 35/50 current_auc = 0.5688909341923608
User 28517 AUC after training: 0.5687988955361252
User 28517 does not improve AUC. Reverting changes.
Training on augumented user 65299 36/50 current_auc = 0.5688909341923608
User 65299 AUC after training: 0.5684307409111826
User 65299 does not improve AUC. Reverting changes.
Training on augumented user 91918 37/50 current_auc = 0.5688909341923608
User 91918 AUC after training: 0.5685227795674183
User 91918 does not improve AUC. Reverting changes.
Training on augumented user 53603 38/50 current_auc = 0.5688909341923608
User 53603 AUC after training: 0.5688295750882038
User 53603 does not improve AUC. Reverting changes.
Training on augumented user 68237 39/50 current_auc = 0.5688909341923608
User 68237 AUC after training: 0.5689829728485964
User 68237 improves AUC. Keeping the model.
Training on augumented user 45017 40/50 current_auc = 0.5689829728485964
User 45017 AUC after training: 0.5687068568798896
User 45017 does not improve AUC. Reverting changes.
Training on augumented user 43787 41/50 current_auc = 0.5689829728485964
User 43787 AUC after training: 0.5684921000153397
User 43787 does not improve AUC. Reverting changes.
Training on augumented user 102898 42/50 current_auc = 0.5689829728485964
User 102898 AUC after training: 0.568676177327811
User 102898 does not improve AUC. Reverting changes.
Training on augumented user 88747 43/50 current_auc = 0.5689829728485964
User 88747 AUC after training: 0.5686454977757325
User 88747 does not improve AUC. Reverting changes.
Training on augumented user 103488 44/50 current_auc = 0.5689829728485964
User 103488 AUC after training: 0.5686148182236539
User 103488 does not improve AUC. Reverting changes.
Training on augumented user 137522 45/50 current_auc = 0.5689829728485964
User 137522 AUC after training: 0.5685841386715754
User 137522 does not improve AUC. Reverting changes.
Training on augumented user 28970 46/50 current_auc = 0.5689829728485964
User 28970 AUC after training: 0.5688295750882038
User 28970 does not improve AUC. Reverting changes.
Training on augumented user 59363 47/50 current_auc = 0.5689829728485964
User 59363 AUC after training: 0.5680319067341617
User 59363 does not improve AUC. Reverting changes.
Training on augumented user 66915 48/50 current_auc = 0.5689829728485964
User 66915 AUC after training: 0.5685841386715753
User 66915 does not improve AUC. Reverting changes.
Training on augumented user 62490 49/50 current_auc = 0.5689829728485964
User 62490 AUC after training: 0.5684614204632612
User 62490 does not improve AUC. Reverting changes.
[2024-12-02 17:42:30.760444] start test user 359 8/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:42:31.189523] start test user 359 8/568 recall augumented users by random, augumented_users = [134052, 98664, 49699, 42636, 76750, 137605, 70099, 15241, 111642, 29833, 50961, 41339, 9959, 38608, 11688, 17247, 115609, 14912, 23279, 58319, 26884, 89499, 90587, 9465, 76123, 68886, 99039, 18993, 120990, 117692, 79002, 4543, 58395, 108522, 57423, 54983, 131480, 8404, 135117, 52045, 37566, 111393, 54362, 121474, 43124, 121843, 80561, 71464, 136723, 13650]
[2024-12-02 17:42:31.206885] user = 359 Cloud 8/568
[2024-12-02 17:42:31.221221] user = 359 Local 8/568
[2024-12-02 17:42:31.402097] user = 359 Local+ 8/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:42:33.326784] user = 359 MPDA- 8/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.597244303126656
Training on augumented user 134052 0/50 current_auc = 0.597244303126656
User 134052 AUC after training: 0.5998940116587175
User 134052 improves AUC. Keeping the model.
Training on augumented user 98664 1/50 current_auc = 0.5998940116587175
User 98664 AUC after training: 0.6033386327503973
User 98664 improves AUC. Keeping the model.
Training on augumented user 49699 2/50 current_auc = 0.6033386327503973
User 49699 AUC after training: 0.6033386327503975
User 49699 improves AUC. Keeping the model.
Training on augumented user 42636 3/50 current_auc = 0.6033386327503975
User 42636 AUC after training: 0.6028086910439852
User 42636 does not improve AUC. Reverting changes.
Training on augumented user 76750 4/50 current_auc = 0.6033386327503975
User 76750 AUC after training: 0.6012188659247483
User 76750 does not improve AUC. Reverting changes.
Training on augumented user 137605 5/50 current_auc = 0.6033386327503975
User 137605 AUC after training: 0.604398516163222
User 137605 improves AUC. Keeping the model.
Training on augumented user 70099 6/50 current_auc = 0.604398516163222
User 70099 AUC after training: 0.602543720190779
User 70099 does not improve AUC. Reverting changes.
Training on augumented user 15241 7/50 current_auc = 0.604398516163222
User 15241 AUC after training: 0.6012188659247483
User 15241 does not improve AUC. Reverting changes.
Training on augumented user 111642 8/50 current_auc = 0.604398516163222
User 111642 AUC after training: 0.6033386327503973
User 111642 does not improve AUC. Reverting changes.
Training on augumented user 29833 9/50 current_auc = 0.604398516163222
User 29833 AUC after training: 0.6038685744568097
User 29833 does not improve AUC. Reverting changes.
Training on augumented user 50961 10/50 current_auc = 0.604398516163222
User 50961 AUC after training: 0.6054583995760465
User 50961 improves AUC. Keeping the model.
Training on augumented user 41339 11/50 current_auc = 0.6054583995760465
User 41339 AUC after training: 0.6041335453100158
User 41339 does not improve AUC. Reverting changes.
Training on augumented user 9959 12/50 current_auc = 0.6054583995760465
User 9959 AUC after training: 0.6038685744568096
User 9959 does not improve AUC. Reverting changes.
Training on augumented user 38608 13/50 current_auc = 0.6054583995760465
User 38608 AUC after training: 0.6051934287228404
User 38608 does not improve AUC. Reverting changes.
Training on augumented user 11688 14/50 current_auc = 0.6054583995760465
User 11688 AUC after training: 0.6051934287228404
User 11688 does not improve AUC. Reverting changes.
Training on augumented user 17247 15/50 current_auc = 0.6054583995760465
User 17247 AUC after training: 0.6041335453100158
User 17247 does not improve AUC. Reverting changes.
Training on augumented user 115609 16/50 current_auc = 0.6054583995760465
User 115609 AUC after training: 0.6022787493375729
User 115609 does not improve AUC. Reverting changes.
Training on augumented user 14912 17/50 current_auc = 0.6054583995760465
User 14912 AUC after training: 0.606253312135665
User 14912 improves AUC. Keeping the model.
Training on augumented user 23279 18/50 current_auc = 0.606253312135665
User 23279 AUC after training: 0.6004239533651299
User 23279 does not improve AUC. Reverting changes.
Training on augumented user 58319 19/50 current_auc = 0.606253312135665
User 58319 AUC after training: 0.6051934287228404
User 58319 does not improve AUC. Reverting changes.
Training on augumented user 26884 20/50 current_auc = 0.606253312135665
User 26884 AUC after training: 0.6051934287228404
User 26884 does not improve AUC. Reverting changes.
Training on augumented user 89499 21/50 current_auc = 0.606253312135665
User 89499 AUC after training: 0.6046634870164281
User 89499 does not improve AUC. Reverting changes.
Training on augumented user 90587 22/50 current_auc = 0.606253312135665
User 90587 AUC after training: 0.5998940116587175
User 90587 does not improve AUC. Reverting changes.
Training on augumented user 9465 23/50 current_auc = 0.606253312135665
User 9465 AUC after training: 0.6091679915209327
User 9465 improves AUC. Keeping the model.
Training on augumented user 76123 24/50 current_auc = 0.6091679915209327
User 76123 AUC after training: 0.6081081081081081
User 76123 does not improve AUC. Reverting changes.
Training on augumented user 68886 25/50 current_auc = 0.6091679915209327
User 68886 AUC after training: 0.6086380498145204
User 68886 does not improve AUC. Reverting changes.
Training on augumented user 99039 26/50 current_auc = 0.6091679915209327
User 99039 AUC after training: 0.6081081081081081
User 99039 does not improve AUC. Reverting changes.
Training on augumented user 18993 27/50 current_auc = 0.6091679915209327
User 18993 AUC after training: 0.608108108108108
User 18993 does not improve AUC. Reverting changes.
Training on augumented user 120990 28/50 current_auc = 0.6091679915209327
User 120990 AUC after training: 0.6081081081081081
User 120990 does not improve AUC. Reverting changes.
Training on augumented user 117692 29/50 current_auc = 0.6091679915209327
User 117692 AUC after training: 0.6091679915209327
User 117692 does not improve AUC. Reverting changes.
Training on augumented user 79002 30/50 current_auc = 0.6091679915209327
User 79002 AUC after training: 0.6070482246952835
User 79002 does not improve AUC. Reverting changes.
Training on augumented user 4543 31/50 current_auc = 0.6091679915209327
User 4543 AUC after training: 0.6086380498145204
User 4543 does not improve AUC. Reverting changes.
Training on augumented user 58395 32/50 current_auc = 0.6091679915209327
User 58395 AUC after training: 0.6049284578696343
User 58395 does not improve AUC. Reverting changes.
Training on augumented user 108522 33/50 current_auc = 0.6091679915209327
User 108522 AUC after training: 0.6030736618971912
User 108522 does not improve AUC. Reverting changes.
Training on augumented user 57423 34/50 current_auc = 0.6091679915209327
User 57423 AUC after training: 0.6054583995760466
User 57423 does not improve AUC. Reverting changes.
Training on augumented user 54983 35/50 current_auc = 0.6091679915209327
User 54983 AUC after training: 0.6091679915209327
User 54983 does not improve AUC. Reverting changes.
Training on augumented user 131480 36/50 current_auc = 0.6091679915209327
User 131480 AUC after training: 0.606253312135665
User 131480 does not improve AUC. Reverting changes.
Training on augumented user 8404 37/50 current_auc = 0.6091679915209327
User 8404 AUC after training: 0.6070482246952835
User 8404 does not improve AUC. Reverting changes.
Training on augumented user 135117 38/50 current_auc = 0.6091679915209327
User 135117 AUC after training: 0.6081081081081081
User 135117 does not improve AUC. Reverting changes.
Training on augumented user 52045 39/50 current_auc = 0.6091679915209327
User 52045 AUC after training: 0.6081081081081081
User 52045 does not improve AUC. Reverting changes.
Training on augumented user 37566 40/50 current_auc = 0.6091679915209327
User 37566 AUC after training: 0.6086380498145203
User 37566 does not improve AUC. Reverting changes.
Training on augumented user 111393 41/50 current_auc = 0.6091679915209327
User 111393 AUC after training: 0.6075781664016958
User 111393 does not improve AUC. Reverting changes.
Training on augumented user 54362 42/50 current_auc = 0.6091679915209327
User 54362 AUC after training: 0.6081081081081081
User 54362 does not improve AUC. Reverting changes.
Training on augumented user 121474 43/50 current_auc = 0.6091679915209327
User 121474 AUC after training: 0.6075781664016958
User 121474 does not improve AUC. Reverting changes.
Training on augumented user 43124 44/50 current_auc = 0.6091679915209327
User 43124 AUC after training: 0.6081081081081081
User 43124 does not improve AUC. Reverting changes.
Training on augumented user 121843 45/50 current_auc = 0.6091679915209327
User 121843 AUC after training: 0.6086380498145203
User 121843 does not improve AUC. Reverting changes.
Training on augumented user 80561 46/50 current_auc = 0.6091679915209327
User 80561 AUC after training: 0.6004239533651298
User 80561 does not improve AUC. Reverting changes.
Training on augumented user 71464 47/50 current_auc = 0.6091679915209327
User 71464 AUC after training: 0.6075781664016957
User 71464 does not improve AUC. Reverting changes.
Training on augumented user 136723 48/50 current_auc = 0.6091679915209327
User 136723 AUC after training: 0.609697933227345
User 136723 improves AUC. Keeping the model.
Training on augumented user 13650 49/50 current_auc = 0.609697933227345
User 13650 AUC after training: 0.6081081081081081
User 13650 does not improve AUC. Reverting changes.
[2024-12-02 17:43:07.722584] start test user 367 9/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:43:08.279792] start test user 367 9/568 recall augumented users by random, augumented_users = [29723, 45455, 2496, 89363, 65787, 79046, 41908, 74408, 47293, 11499, 77444, 125241, 78168, 27, 41292, 12799, 103326, 15200, 59175, 9236, 40725, 124145, 562, 21528, 94312, 71292, 32417, 31107, 5844, 11704, 1367, 63089, 19094, 77040, 72565, 117264, 125620, 26745, 27893, 81417, 31577, 44429, 39631, 92112, 103472, 16452, 8092, 72994, 49043, 62056]
[2024-12-02 17:43:08.294199] user = 367 Cloud 9/568
[2024-12-02 17:43:08.313664] user = 367 Local 9/568
[2024-12-02 17:43:08.435208] user = 367 Local+ 9/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:43:11.440086] user = 367 MPDA- 9/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6097560975609756
Training on augumented user 29723 0/50 current_auc = 0.6097560975609756
User 29723 AUC after training: 0.6091142490372272
User 29723 does not improve AUC. Reverting changes.
Training on augumented user 45455 1/50 current_auc = 0.6097560975609756
User 45455 AUC after training: 0.607188703465982
User 45455 does not improve AUC. Reverting changes.
Training on augumented user 2496 2/50 current_auc = 0.6097560975609756
User 2496 AUC after training: 0.6097560975609756
User 2496 does not improve AUC. Reverting changes.
Training on augumented user 89363 3/50 current_auc = 0.6097560975609756
User 89363 AUC after training: 0.610397946084724
User 89363 improves AUC. Keeping the model.
Training on augumented user 65787 4/50 current_auc = 0.610397946084724
User 65787 AUC after training: 0.6110397946084725
User 65787 improves AUC. Keeping the model.
Training on augumented user 79046 5/50 current_auc = 0.6110397946084725
User 79046 AUC after training: 0.6110397946084725
User 79046 does not improve AUC. Reverting changes.
Training on augumented user 41908 6/50 current_auc = 0.6110397946084725
User 41908 AUC after training: 0.6116816431322208
User 41908 improves AUC. Keeping the model.
Training on augumented user 74408 7/50 current_auc = 0.6116816431322208
User 74408 AUC after training: 0.6116816431322208
User 74408 does not improve AUC. Reverting changes.
Training on augumented user 47293 8/50 current_auc = 0.6116816431322208
User 47293 AUC after training: 0.6174582798459564
User 47293 improves AUC. Keeping the model.
Training on augumented user 11499 9/50 current_auc = 0.6174582798459564
User 11499 AUC after training: 0.6174582798459564
User 11499 does not improve AUC. Reverting changes.
Training on augumented user 77444 10/50 current_auc = 0.6174582798459564
User 77444 AUC after training: 0.6181001283697047
User 77444 improves AUC. Keeping the model.
Training on augumented user 125241 11/50 current_auc = 0.6181001283697047
User 125241 AUC after training: 0.6187419768934531
User 125241 improves AUC. Keeping the model.
Training on augumented user 78168 12/50 current_auc = 0.6187419768934531
User 78168 AUC after training: 0.6168164313222079
User 78168 does not improve AUC. Reverting changes.
Training on augumented user 27 13/50 current_auc = 0.6187419768934531
User 27 AUC after training: 0.6168164313222079
User 27 does not improve AUC. Reverting changes.
Training on augumented user 41292 14/50 current_auc = 0.6187419768934531
User 41292 AUC after training: 0.6187419768934531
User 41292 does not improve AUC. Reverting changes.
Training on augumented user 12799 15/50 current_auc = 0.6187419768934531
User 12799 AUC after training: 0.6161745827984595
User 12799 does not improve AUC. Reverting changes.
Training on augumented user 103326 16/50 current_auc = 0.6187419768934531
User 103326 AUC after training: 0.613607188703466
User 103326 does not improve AUC. Reverting changes.
Training on augumented user 15200 17/50 current_auc = 0.6187419768934531
User 15200 AUC after training: 0.6187419768934531
User 15200 does not improve AUC. Reverting changes.
Training on augumented user 59175 18/50 current_auc = 0.6187419768934531
User 59175 AUC after training: 0.6181001283697047
User 59175 does not improve AUC. Reverting changes.
Training on augumented user 9236 19/50 current_auc = 0.6187419768934531
User 9236 AUC after training: 0.616816431322208
User 9236 does not improve AUC. Reverting changes.
Training on augumented user 40725 20/50 current_auc = 0.6187419768934531
User 40725 AUC after training: 0.6174582798459564
User 40725 does not improve AUC. Reverting changes.
Training on augumented user 124145 21/50 current_auc = 0.6187419768934531
User 124145 AUC after training: 0.6181001283697047
User 124145 does not improve AUC. Reverting changes.
Training on augumented user 562 22/50 current_auc = 0.6187419768934531
User 562 AUC after training: 0.6181001283697047
User 562 does not improve AUC. Reverting changes.
Training on augumented user 21528 23/50 current_auc = 0.6187419768934531
User 21528 AUC after training: 0.6225930680359435
User 21528 improves AUC. Keeping the model.
Training on augumented user 94312 24/50 current_auc = 0.6225930680359435
User 94312 AUC after training: 0.623234916559692
User 94312 improves AUC. Keeping the model.
Training on augumented user 71292 25/50 current_auc = 0.623234916559692
User 71292 AUC after training: 0.623234916559692
User 71292 does not improve AUC. Reverting changes.
Training on augumented user 32417 26/50 current_auc = 0.623234916559692
User 32417 AUC after training: 0.6213093709884467
User 32417 does not improve AUC. Reverting changes.
Training on augumented user 31107 27/50 current_auc = 0.623234916559692
User 31107 AUC after training: 0.6213093709884467
User 31107 does not improve AUC. Reverting changes.
Training on augumented user 5844 28/50 current_auc = 0.623234916559692
User 5844 AUC after training: 0.6219512195121952
User 5844 does not improve AUC. Reverting changes.
Training on augumented user 11704 29/50 current_auc = 0.623234916559692
User 11704 AUC after training: 0.6206675224646983
User 11704 does not improve AUC. Reverting changes.
Training on augumented user 1367 30/50 current_auc = 0.623234916559692
User 1367 AUC after training: 0.6245186136071886
User 1367 improves AUC. Keeping the model.
Training on augumented user 63089 31/50 current_auc = 0.6245186136071886
User 63089 AUC after training: 0.6251604621309371
User 63089 improves AUC. Keeping the model.
Training on augumented user 19094 32/50 current_auc = 0.6251604621309371
User 19094 AUC after training: 0.6245186136071887
User 19094 does not improve AUC. Reverting changes.
Training on augumented user 77040 33/50 current_auc = 0.6251604621309371
User 77040 AUC after training: 0.6187419768934531
User 77040 does not improve AUC. Reverting changes.
Training on augumented user 72565 34/50 current_auc = 0.6251604621309371
User 72565 AUC after training: 0.6245186136071887
User 72565 does not improve AUC. Reverting changes.
Training on augumented user 117264 35/50 current_auc = 0.6251604621309371
User 117264 AUC after training: 0.6245186136071887
User 117264 does not improve AUC. Reverting changes.
Training on augumented user 125620 36/50 current_auc = 0.6251604621309371
User 125620 AUC after training: 0.6238767650834404
User 125620 does not improve AUC. Reverting changes.
Training on augumented user 26745 37/50 current_auc = 0.6251604621309371
User 26745 AUC after training: 0.6258023106546855
User 26745 improves AUC. Keeping the model.
Training on augumented user 27893 38/50 current_auc = 0.6258023106546855
User 27893 AUC after training: 0.6245186136071887
User 27893 does not improve AUC. Reverting changes.
Training on augumented user 81417 39/50 current_auc = 0.6258023106546855
User 81417 AUC after training: 0.6258023106546854
User 81417 does not improve AUC. Reverting changes.
Training on augumented user 31577 40/50 current_auc = 0.6258023106546855
User 31577 AUC after training: 0.6258023106546856
User 31577 improves AUC. Keeping the model.
Training on augumented user 44429 41/50 current_auc = 0.6258023106546856
User 44429 AUC after training: 0.6225930680359435
User 44429 does not improve AUC. Reverting changes.
Training on augumented user 39631 42/50 current_auc = 0.6258023106546856
User 39631 AUC after training: 0.6225930680359435
User 39631 does not improve AUC. Reverting changes.
Training on augumented user 92112 43/50 current_auc = 0.6258023106546856
User 92112 AUC after training: 0.6264441591784339
User 92112 improves AUC. Keeping the model.
Training on augumented user 103472 44/50 current_auc = 0.6264441591784339
User 103472 AUC after training: 0.6251604621309371
User 103472 does not improve AUC. Reverting changes.
Training on augumented user 16452 45/50 current_auc = 0.6264441591784339
User 16452 AUC after training: 0.6225930680359435
User 16452 does not improve AUC. Reverting changes.
Training on augumented user 8092 46/50 current_auc = 0.6264441591784339
User 8092 AUC after training: 0.623234916559692
User 8092 does not improve AUC. Reverting changes.
Training on augumented user 72994 47/50 current_auc = 0.6264441591784339
User 72994 AUC after training: 0.6238767650834404
User 72994 does not improve AUC. Reverting changes.
Training on augumented user 49043 48/50 current_auc = 0.6264441591784339
User 49043 AUC after training: 0.6232349165596919
User 49043 does not improve AUC. Reverting changes.
Training on augumented user 62056 49/50 current_auc = 0.6264441591784339
User 62056 AUC after training: 0.6251604621309371
User 62056 does not improve AUC. Reverting changes.
[2024-12-02 17:43:41.568831] start test user 370 10/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:43:42.048487] start test user 370 10/568 recall augumented users by random, augumented_users = [112152, 57181, 25115, 53690, 3918, 1110, 37750, 100599, 85526, 34176, 67088, 123870, 78544, 25222, 29113, 89342, 60793, 102492, 34082, 123114, 86446, 107336, 126228, 105013, 43270, 110381, 45454, 59210, 125939, 80765, 30055, 11546, 70591, 24168, 86727, 107724, 123016, 22026, 117682, 74333, 117857, 22156, 119510, 27232, 55067, 135442, 137361, 136700, 51450, 14465]
[2024-12-02 17:43:42.065370] user = 370 Cloud 10/568
[2024-12-02 17:43:42.096202] user = 370 Local 10/568
[2024-12-02 17:43:42.178064] user = 370 Local+ 10/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:43:44.449638] user = 370 MPDA- 10/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5943894389438944
Training on augumented user 112152 0/50 current_auc = 0.5943894389438944
User 112152 AUC after training: 0.5947194719471948
User 112152 improves AUC. Keeping the model.
Training on augumented user 57181 1/50 current_auc = 0.5947194719471948
User 57181 AUC after training: 0.5948514851485148
User 57181 improves AUC. Keeping the model.
Training on augumented user 25115 2/50 current_auc = 0.5948514851485148
User 25115 AUC after training: 0.5944884488448845
User 25115 does not improve AUC. Reverting changes.
Training on augumented user 53690 3/50 current_auc = 0.5948514851485148
User 53690 AUC after training: 0.595049504950495
User 53690 improves AUC. Keeping the model.
Training on augumented user 3918 4/50 current_auc = 0.595049504950495
User 3918 AUC after training: 0.5952805280528053
User 3918 improves AUC. Keeping the model.
Training on augumented user 1110 5/50 current_auc = 0.5952805280528053
User 1110 AUC after training: 0.5957425742574257
User 1110 improves AUC. Keeping the model.
Training on augumented user 37750 6/50 current_auc = 0.5957425742574257
User 37750 AUC after training: 0.5952475247524753
User 37750 does not improve AUC. Reverting changes.
Training on augumented user 100599 7/50 current_auc = 0.5957425742574257
User 100599 AUC after training: 0.5952805280528053
User 100599 does not improve AUC. Reverting changes.
Training on augumented user 85526 8/50 current_auc = 0.5957425742574257
User 85526 AUC after training: 0.5954455445544555
User 85526 does not improve AUC. Reverting changes.
Training on augumented user 34176 9/50 current_auc = 0.5957425742574257
User 34176 AUC after training: 0.5954455445544555
User 34176 does not improve AUC. Reverting changes.
Training on augumented user 67088 10/50 current_auc = 0.5957425742574257
User 67088 AUC after training: 0.5957755775577558
User 67088 improves AUC. Keeping the model.
Training on augumented user 123870 11/50 current_auc = 0.5957755775577558
User 123870 AUC after training: 0.5957095709570958
User 123870 does not improve AUC. Reverting changes.
Training on augumented user 78544 12/50 current_auc = 0.5957755775577558
User 78544 AUC after training: 0.595907590759076
User 78544 improves AUC. Keeping the model.
Training on augumented user 25222 13/50 current_auc = 0.595907590759076
User 25222 AUC after training: 0.5960726072607261
User 25222 improves AUC. Keeping the model.
Training on augumented user 29113 14/50 current_auc = 0.5960726072607261
User 29113 AUC after training: 0.5948679867986798
User 29113 does not improve AUC. Reverting changes.
Training on augumented user 89342 15/50 current_auc = 0.5960726072607261
User 89342 AUC after training: 0.5963531353135314
User 89342 improves AUC. Keeping the model.
Training on augumented user 60793 16/50 current_auc = 0.5963531353135314
User 60793 AUC after training: 0.5969141914191419
User 60793 improves AUC. Keeping the model.
Training on augumented user 102492 17/50 current_auc = 0.5969141914191419
User 102492 AUC after training: 0.5968151815181518
User 102492 does not improve AUC. Reverting changes.
Training on augumented user 34082 18/50 current_auc = 0.5969141914191419
User 34082 AUC after training: 0.5965511551155116
User 34082 does not improve AUC. Reverting changes.
Training on augumented user 123114 19/50 current_auc = 0.5969141914191419
User 123114 AUC after training: 0.5964521452145215
User 123114 does not improve AUC. Reverting changes.
Training on augumented user 86446 20/50 current_auc = 0.5969141914191419
User 86446 AUC after training: 0.5969141914191419
User 86446 does not improve AUC. Reverting changes.
Training on augumented user 107336 21/50 current_auc = 0.5969141914191419
User 107336 AUC after training: 0.597013201320132
User 107336 improves AUC. Keeping the model.
Training on augumented user 126228 22/50 current_auc = 0.597013201320132
User 126228 AUC after training: 0.5968151815181518
User 126228 does not improve AUC. Reverting changes.
Training on augumented user 105013 23/50 current_auc = 0.597013201320132
User 105013 AUC after training: 0.596897689768977
User 105013 does not improve AUC. Reverting changes.
Training on augumented user 43270 24/50 current_auc = 0.597013201320132
User 43270 AUC after training: 0.5971452145214522
User 43270 improves AUC. Keeping the model.
Training on augumented user 110381 25/50 current_auc = 0.5971452145214522
User 110381 AUC after training: 0.5971122112211221
User 110381 does not improve AUC. Reverting changes.
Training on augumented user 45454 26/50 current_auc = 0.5971452145214522
User 45454 AUC after training: 0.5977227722772277
User 45454 improves AUC. Keeping the model.
Training on augumented user 59210 27/50 current_auc = 0.5977227722772277
User 59210 AUC after training: 0.5976567656765677
User 59210 does not improve AUC. Reverting changes.
Training on augumented user 125939 28/50 current_auc = 0.5977227722772277
User 125939 AUC after training: 0.5976897689768976
User 125939 does not improve AUC. Reverting changes.
Training on augumented user 80765 29/50 current_auc = 0.5977227722772277
User 80765 AUC after training: 0.5977062706270627
User 80765 does not improve AUC. Reverting changes.
Training on augumented user 30055 30/50 current_auc = 0.5977227722772277
User 30055 AUC after training: 0.5967656765676568
User 30055 does not improve AUC. Reverting changes.
Training on augumented user 11546 31/50 current_auc = 0.5977227722772277
User 11546 AUC after training: 0.5973267326732674
User 11546 does not improve AUC. Reverting changes.
Training on augumented user 70591 32/50 current_auc = 0.5977227722772277
User 70591 AUC after training: 0.5968151815181518
User 70591 does not improve AUC. Reverting changes.
Training on augumented user 24168 33/50 current_auc = 0.5977227722772277
User 24168 AUC after training: 0.5972607260726073
User 24168 does not improve AUC. Reverting changes.
Training on augumented user 86727 34/50 current_auc = 0.5977227722772277
User 86727 AUC after training: 0.5975907590759075
User 86727 does not improve AUC. Reverting changes.
Training on augumented user 107724 35/50 current_auc = 0.5977227722772277
User 107724 AUC after training: 0.5973267326732674
User 107724 does not improve AUC. Reverting changes.
Training on augumented user 123016 36/50 current_auc = 0.5977227722772277
User 123016 AUC after training: 0.5964356435643564
User 123016 does not improve AUC. Reverting changes.
Training on augumented user 22026 37/50 current_auc = 0.5977227722772277
User 22026 AUC after training: 0.5978217821782179
User 22026 improves AUC. Keeping the model.
Training on augumented user 117682 38/50 current_auc = 0.5978217821782179
User 117682 AUC after training: 0.5976402640264026
User 117682 does not improve AUC. Reverting changes.
Training on augumented user 74333 39/50 current_auc = 0.5978217821782179
User 74333 AUC after training: 0.5978547854785479
User 74333 improves AUC. Keeping the model.
Training on augumented user 117857 40/50 current_auc = 0.5978547854785479
User 117857 AUC after training: 0.5977557755775578
User 117857 does not improve AUC. Reverting changes.
Training on augumented user 22156 41/50 current_auc = 0.5978547854785479
User 22156 AUC after training: 0.5978217821782178
User 22156 does not improve AUC. Reverting changes.
Training on augumented user 119510 42/50 current_auc = 0.5978547854785479
User 119510 AUC after training: 0.5982178217821783
User 119510 improves AUC. Keeping the model.
Training on augumented user 27232 43/50 current_auc = 0.5982178217821783
User 27232 AUC after training: 0.5975907590759075
User 27232 does not improve AUC. Reverting changes.
Training on augumented user 55067 44/50 current_auc = 0.5982178217821783
User 55067 AUC after training: 0.598151815181518
User 55067 does not improve AUC. Reverting changes.
Training on augumented user 135442 45/50 current_auc = 0.5982178217821783
User 135442 AUC after training: 0.5982508250825083
User 135442 improves AUC. Keeping the model.
Training on augumented user 137361 46/50 current_auc = 0.5982508250825083
User 137361 AUC after training: 0.5972607260726073
User 137361 does not improve AUC. Reverting changes.
Training on augumented user 136700 47/50 current_auc = 0.5982508250825083
User 136700 AUC after training: 0.5981683168316831
User 136700 does not improve AUC. Reverting changes.
Training on augumented user 51450 48/50 current_auc = 0.5982508250825083
User 51450 AUC after training: 0.5981848184818481
User 51450 does not improve AUC. Reverting changes.
Training on augumented user 14465 49/50 current_auc = 0.5982508250825083
User 14465 AUC after training: 0.5975742574257425
User 14465 does not improve AUC. Reverting changes.
[2024-12-02 17:44:16.604550] start test user 375 11/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:44:17.332158] start test user 375 11/568 recall augumented users by random, augumented_users = [21188, 57613, 61388, 114983, 79467, 23035, 127826, 67909, 96138, 67540, 74253, 67045, 67554, 56514, 878, 98927, 131254, 63033, 13737, 39795, 116864, 4082, 65246, 47292, 17963, 62856, 1987, 137566, 74549, 26277, 117110, 76025, 76708, 4104, 7065, 10098, 83207, 72102, 102269, 116404, 8157, 59676, 83715, 86534, 104610, 106807, 92574, 37639, 22388, 77690]
[2024-12-02 17:44:17.366630] user = 375 Cloud 11/568
[2024-12-02 17:44:17.377440] user = 375 Local 11/568
[2024-12-02 17:44:17.456707] user = 375 Local+ 11/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:44:20.633730] user = 375 MPDA- 11/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5709090909090909
Training on augumented user 21188 0/50 current_auc = 0.5709090909090909
User 21188 AUC after training: 0.5709090909090909
User 21188 does not improve AUC. Reverting changes.
Training on augumented user 57613 1/50 current_auc = 0.5709090909090909
User 57613 AUC after training: 0.5709090909090909
User 57613 does not improve AUC. Reverting changes.
Training on augumented user 61388 2/50 current_auc = 0.5709090909090909
User 61388 AUC after training: 0.5709090909090909
User 61388 does not improve AUC. Reverting changes.
Training on augumented user 114983 3/50 current_auc = 0.5709090909090909
User 114983 AUC after training: 0.5709090909090909
User 114983 does not improve AUC. Reverting changes.
Training on augumented user 79467 4/50 current_auc = 0.5709090909090909
User 79467 AUC after training: 0.5709090909090909
User 79467 does not improve AUC. Reverting changes.
Training on augumented user 23035 5/50 current_auc = 0.5709090909090909
User 23035 AUC after training: 0.5709090909090909
User 23035 does not improve AUC. Reverting changes.
Training on augumented user 127826 6/50 current_auc = 0.5709090909090909
User 127826 AUC after training: 0.5709090909090909
User 127826 does not improve AUC. Reverting changes.
Training on augumented user 67909 7/50 current_auc = 0.5709090909090909
User 67909 AUC after training: 0.5672727272727273
User 67909 does not improve AUC. Reverting changes.
Training on augumented user 96138 8/50 current_auc = 0.5709090909090909
User 96138 AUC after training: 0.5709090909090909
User 96138 does not improve AUC. Reverting changes.
Training on augumented user 67540 9/50 current_auc = 0.5709090909090909
User 67540 AUC after training: 0.5709090909090909
User 67540 does not improve AUC. Reverting changes.
Training on augumented user 74253 10/50 current_auc = 0.5709090909090909
User 74253 AUC after training: 0.5709090909090909
User 74253 does not improve AUC. Reverting changes.
Training on augumented user 67045 11/50 current_auc = 0.5709090909090909
User 67045 AUC after training: 0.5709090909090909
User 67045 does not improve AUC. Reverting changes.
Training on augumented user 67554 12/50 current_auc = 0.5709090909090909
User 67554 AUC after training: 0.5709090909090909
User 67554 does not improve AUC. Reverting changes.
Training on augumented user 56514 13/50 current_auc = 0.5709090909090909
User 56514 AUC after training: 0.5709090909090909
User 56514 does not improve AUC. Reverting changes.
Training on augumented user 878 14/50 current_auc = 0.5709090909090909
User 878 AUC after training: 0.5709090909090909
User 878 does not improve AUC. Reverting changes.
Training on augumented user 98927 15/50 current_auc = 0.5709090909090909
User 98927 AUC after training: 0.5709090909090909
User 98927 does not improve AUC. Reverting changes.
Training on augumented user 131254 16/50 current_auc = 0.5709090909090909
User 131254 AUC after training: 0.5709090909090909
User 131254 does not improve AUC. Reverting changes.
Training on augumented user 63033 17/50 current_auc = 0.5709090909090909
User 63033 AUC after training: 0.5709090909090909
User 63033 does not improve AUC. Reverting changes.
Training on augumented user 13737 18/50 current_auc = 0.5709090909090909
User 13737 AUC after training: 0.5636363636363636
User 13737 does not improve AUC. Reverting changes.
Training on augumented user 39795 19/50 current_auc = 0.5709090909090909
User 39795 AUC after training: 0.5709090909090909
User 39795 does not improve AUC. Reverting changes.
Training on augumented user 116864 20/50 current_auc = 0.5709090909090909
User 116864 AUC after training: 0.5709090909090909
User 116864 does not improve AUC. Reverting changes.
Training on augumented user 4082 21/50 current_auc = 0.5709090909090909
User 4082 AUC after training: 0.5709090909090909
User 4082 does not improve AUC. Reverting changes.
Training on augumented user 65246 22/50 current_auc = 0.5709090909090909
User 65246 AUC after training: 0.5709090909090909
User 65246 does not improve AUC. Reverting changes.
Training on augumented user 47292 23/50 current_auc = 0.5709090909090909
User 47292 AUC after training: 0.5672727272727273
User 47292 does not improve AUC. Reverting changes.
Training on augumented user 17963 24/50 current_auc = 0.5709090909090909
User 17963 AUC after training: 0.5709090909090909
User 17963 does not improve AUC. Reverting changes.
Training on augumented user 62856 25/50 current_auc = 0.5709090909090909
User 62856 AUC after training: 0.5709090909090909
User 62856 does not improve AUC. Reverting changes.
Training on augumented user 1987 26/50 current_auc = 0.5709090909090909
User 1987 AUC after training: 0.5709090909090909
User 1987 does not improve AUC. Reverting changes.
Training on augumented user 137566 27/50 current_auc = 0.5709090909090909
User 137566 AUC after training: 0.5709090909090909
User 137566 does not improve AUC. Reverting changes.
Training on augumented user 74549 28/50 current_auc = 0.5709090909090909
User 74549 AUC after training: 0.5745454545454545
User 74549 improves AUC. Keeping the model.
Training on augumented user 26277 29/50 current_auc = 0.5745454545454545
User 26277 AUC after training: 0.5636363636363636
User 26277 does not improve AUC. Reverting changes.
Training on augumented user 117110 30/50 current_auc = 0.5745454545454545
User 117110 AUC after training: 0.5745454545454545
User 117110 does not improve AUC. Reverting changes.
Training on augumented user 76025 31/50 current_auc = 0.5745454545454545
User 76025 AUC after training: 0.5745454545454545
User 76025 does not improve AUC. Reverting changes.
Training on augumented user 76708 32/50 current_auc = 0.5745454545454545
User 76708 AUC after training: 0.5745454545454545
User 76708 does not improve AUC. Reverting changes.
Training on augumented user 4104 33/50 current_auc = 0.5745454545454545
User 4104 AUC after training: 0.5745454545454545
User 4104 does not improve AUC. Reverting changes.
Training on augumented user 7065 34/50 current_auc = 0.5745454545454545
User 7065 AUC after training: 0.5745454545454545
User 7065 does not improve AUC. Reverting changes.
Training on augumented user 10098 35/50 current_auc = 0.5745454545454545
User 10098 AUC after training: 0.5709090909090908
User 10098 does not improve AUC. Reverting changes.
Training on augumented user 83207 36/50 current_auc = 0.5745454545454545
User 83207 AUC after training: 0.5745454545454545
User 83207 does not improve AUC. Reverting changes.
Training on augumented user 72102 37/50 current_auc = 0.5745454545454545
User 72102 AUC after training: 0.5745454545454545
User 72102 does not improve AUC. Reverting changes.
Training on augumented user 102269 38/50 current_auc = 0.5745454545454545
User 102269 AUC after training: 0.5709090909090908
User 102269 does not improve AUC. Reverting changes.
Training on augumented user 116404 39/50 current_auc = 0.5745454545454545
User 116404 AUC after training: 0.5709090909090908
User 116404 does not improve AUC. Reverting changes.
Training on augumented user 8157 40/50 current_auc = 0.5745454545454545
User 8157 AUC after training: 0.5745454545454545
User 8157 does not improve AUC. Reverting changes.
Training on augumented user 59676 41/50 current_auc = 0.5745454545454545
User 59676 AUC after training: 0.5745454545454545
User 59676 does not improve AUC. Reverting changes.
Training on augumented user 83715 42/50 current_auc = 0.5745454545454545
User 83715 AUC after training: 0.5745454545454545
User 83715 does not improve AUC. Reverting changes.
Training on augumented user 86534 43/50 current_auc = 0.5745454545454545
User 86534 AUC after training: 0.5709090909090908
User 86534 does not improve AUC. Reverting changes.
Training on augumented user 104610 44/50 current_auc = 0.5745454545454545
User 104610 AUC after training: 0.5745454545454545
User 104610 does not improve AUC. Reverting changes.
Training on augumented user 106807 45/50 current_auc = 0.5745454545454545
User 106807 AUC after training: 0.5709090909090909
User 106807 does not improve AUC. Reverting changes.
Training on augumented user 92574 46/50 current_auc = 0.5745454545454545
User 92574 AUC after training: 0.5709090909090909
User 92574 does not improve AUC. Reverting changes.
Training on augumented user 37639 47/50 current_auc = 0.5745454545454545
User 37639 AUC after training: 0.5672727272727273
User 37639 does not improve AUC. Reverting changes.
Training on augumented user 22388 48/50 current_auc = 0.5745454545454545
User 22388 AUC after training: 0.5709090909090908
User 22388 does not improve AUC. Reverting changes.
Training on augumented user 77690 49/50 current_auc = 0.5745454545454545
User 77690 AUC after training: 0.5709090909090908
User 77690 does not improve AUC. Reverting changes.
[2024-12-02 17:44:52.008845] start test user 387 12/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:44:52.518742] start test user 387 12/568 recall augumented users by random, augumented_users = [42646, 47410, 120611, 25823, 134635, 81982, 71347, 122790, 49842, 94084, 43594, 108132, 40767, 64162, 100753, 13008, 7494, 103805, 73146, 11261, 9096, 57993, 113507, 46079, 16278, 123077, 26915, 127381, 63682, 137002, 98638, 134153, 96387, 28410, 123443, 79582, 90168, 110865, 111695, 97888, 125185, 95453, 26809, 1070, 42709, 24212, 92496, 45730, 15389, 128510]
[2024-12-02 17:44:52.534635] user = 387 Cloud 12/568
[2024-12-02 17:44:52.550975] user = 387 Local 12/568
[2024-12-02 17:44:52.627072] user = 387 Local+ 12/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:44:54.838306] user = 387 MPDA- 12/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5979437229437229
Training on augumented user 42646 0/50 current_auc = 0.5979437229437229
User 42646 AUC after training: 0.5963203463203464
User 42646 does not improve AUC. Reverting changes.
Training on augumented user 47410 1/50 current_auc = 0.5979437229437229
User 47410 AUC after training: 0.5984848484848484
User 47410 improves AUC. Keeping the model.
Training on augumented user 120611 2/50 current_auc = 0.5984848484848484
User 120611 AUC after training: 0.597943722943723
User 120611 does not improve AUC. Reverting changes.
Training on augumented user 25823 3/50 current_auc = 0.5984848484848484
User 25823 AUC after training: 0.6006493506493507
User 25823 improves AUC. Keeping the model.
Training on augumented user 134635 4/50 current_auc = 0.6006493506493507
User 134635 AUC after training: 0.601461038961039
User 134635 improves AUC. Keeping the model.
Training on augumented user 81982 5/50 current_auc = 0.601461038961039
User 81982 AUC after training: 0.6017316017316017
User 81982 improves AUC. Keeping the model.
Training on augumented user 71347 6/50 current_auc = 0.6017316017316017
User 71347 AUC after training: 0.6022727272727273
User 71347 improves AUC. Keeping the model.
Training on augumented user 122790 7/50 current_auc = 0.6022727272727273
User 122790 AUC after training: 0.6028138528138528
User 122790 improves AUC. Keeping the model.
Training on augumented user 49842 8/50 current_auc = 0.6028138528138528
User 49842 AUC after training: 0.6006493506493507
User 49842 does not improve AUC. Reverting changes.
Training on augumented user 94084 9/50 current_auc = 0.6028138528138528
User 94084 AUC after training: 0.6020021645021645
User 94084 does not improve AUC. Reverting changes.
Training on augumented user 43594 10/50 current_auc = 0.6028138528138528
User 43594 AUC after training: 0.6033549783549783
User 43594 improves AUC. Keeping the model.
Training on augumented user 108132 11/50 current_auc = 0.6033549783549783
User 108132 AUC after training: 0.6011904761904762
User 108132 does not improve AUC. Reverting changes.
Training on augumented user 40767 12/50 current_auc = 0.6033549783549783
User 40767 AUC after training: 0.6038961038961039
User 40767 improves AUC. Keeping the model.
Training on augumented user 64162 13/50 current_auc = 0.6038961038961039
User 64162 AUC after training: 0.6028138528138528
User 64162 does not improve AUC. Reverting changes.
Training on augumented user 100753 14/50 current_auc = 0.6038961038961039
User 100753 AUC after training: 0.6036255411255411
User 100753 does not improve AUC. Reverting changes.
Training on augumented user 13008 15/50 current_auc = 0.6038961038961039
User 13008 AUC after training: 0.6022727272727273
User 13008 does not improve AUC. Reverting changes.
Training on augumented user 7494 16/50 current_auc = 0.6038961038961039
User 7494 AUC after training: 0.6033549783549784
User 7494 does not improve AUC. Reverting changes.
Training on augumented user 103805 17/50 current_auc = 0.6038961038961039
User 103805 AUC after training: 0.6033549783549783
User 103805 does not improve AUC. Reverting changes.
Training on augumented user 73146 18/50 current_auc = 0.6038961038961039
User 73146 AUC after training: 0.6038961038961039
User 73146 does not improve AUC. Reverting changes.
Training on augumented user 11261 19/50 current_auc = 0.6038961038961039
User 11261 AUC after training: 0.6038961038961039
User 11261 does not improve AUC. Reverting changes.
Training on augumented user 9096 20/50 current_auc = 0.6038961038961039
User 9096 AUC after training: 0.6011904761904762
User 9096 does not improve AUC. Reverting changes.
Training on augumented user 57993 21/50 current_auc = 0.6038961038961039
User 57993 AUC after training: 0.6047077922077922
User 57993 improves AUC. Keeping the model.
Training on augumented user 113507 22/50 current_auc = 0.6047077922077922
User 113507 AUC after training: 0.6057900432900433
User 113507 improves AUC. Keeping the model.
Training on augumented user 46079 23/50 current_auc = 0.6057900432900433
User 46079 AUC after training: 0.6063311688311689
User 46079 improves AUC. Keeping the model.
Training on augumented user 16278 24/50 current_auc = 0.6063311688311689
User 16278 AUC after training: 0.6036255411255411
User 16278 does not improve AUC. Reverting changes.
Training on augumented user 123077 25/50 current_auc = 0.6063311688311689
User 123077 AUC after training: 0.6066017316017316
User 123077 improves AUC. Keeping the model.
Training on augumented user 26915 26/50 current_auc = 0.6066017316017316
User 26915 AUC after training: 0.6066017316017317
User 26915 improves AUC. Keeping the model.
Training on augumented user 127381 27/50 current_auc = 0.6066017316017317
User 127381 AUC after training: 0.6055194805194806
User 127381 does not improve AUC. Reverting changes.
Training on augumented user 63682 28/50 current_auc = 0.6066017316017317
User 63682 AUC after training: 0.604978354978355
User 63682 does not improve AUC. Reverting changes.
Training on augumented user 137002 29/50 current_auc = 0.6066017316017317
User 137002 AUC after training: 0.6057900432900433
User 137002 does not improve AUC. Reverting changes.
Training on augumented user 98638 30/50 current_auc = 0.6066017316017317
User 98638 AUC after training: 0.6066017316017317
User 98638 does not improve AUC. Reverting changes.
Training on augumented user 134153 31/50 current_auc = 0.6066017316017317
User 134153 AUC after training: 0.6038961038961039
User 134153 does not improve AUC. Reverting changes.
Training on augumented user 96387 32/50 current_auc = 0.6066017316017317
User 96387 AUC after training: 0.6049783549783551
User 96387 does not improve AUC. Reverting changes.
Training on augumented user 28410 33/50 current_auc = 0.6066017316017317
User 28410 AUC after training: 0.6044372294372294
User 28410 does not improve AUC. Reverting changes.
Training on augumented user 123443 34/50 current_auc = 0.6066017316017317
User 123443 AUC after training: 0.604978354978355
User 123443 does not improve AUC. Reverting changes.
Training on augumented user 79582 35/50 current_auc = 0.6066017316017317
User 79582 AUC after training: 0.6055194805194806
User 79582 does not improve AUC. Reverting changes.
Training on augumented user 90168 36/50 current_auc = 0.6066017316017317
User 90168 AUC after training: 0.6060606060606061
User 90168 does not improve AUC. Reverting changes.
Training on augumented user 110865 37/50 current_auc = 0.6066017316017317
User 110865 AUC after training: 0.6060606060606061
User 110865 does not improve AUC. Reverting changes.
Training on augumented user 111695 38/50 current_auc = 0.6066017316017317
User 111695 AUC after training: 0.604978354978355
User 111695 does not improve AUC. Reverting changes.
Training on augumented user 97888 39/50 current_auc = 0.6066017316017317
User 97888 AUC after training: 0.6055194805194806
User 97888 does not improve AUC. Reverting changes.
Training on augumented user 125185 40/50 current_auc = 0.6066017316017317
User 125185 AUC after training: 0.6060606060606061
User 125185 does not improve AUC. Reverting changes.
Training on augumented user 95453 41/50 current_auc = 0.6066017316017317
User 95453 AUC after training: 0.6066017316017317
User 95453 does not improve AUC. Reverting changes.
Training on augumented user 26809 42/50 current_auc = 0.6066017316017317
User 26809 AUC after training: 0.6044372294372294
User 26809 does not improve AUC. Reverting changes.
Training on augumented user 1070 43/50 current_auc = 0.6066017316017317
User 1070 AUC after training: 0.6066017316017317
User 1070 does not improve AUC. Reverting changes.
Training on augumented user 42709 44/50 current_auc = 0.6066017316017317
User 42709 AUC after training: 0.6044372294372294
User 42709 does not improve AUC. Reverting changes.
Training on augumented user 24212 45/50 current_auc = 0.6066017316017317
User 24212 AUC after training: 0.5995670995670996
User 24212 does not improve AUC. Reverting changes.
Training on augumented user 92496 46/50 current_auc = 0.6066017316017317
User 92496 AUC after training: 0.6066017316017317
User 92496 does not improve AUC. Reverting changes.
Training on augumented user 45730 47/50 current_auc = 0.6066017316017317
User 45730 AUC after training: 0.6044372294372294
User 45730 does not improve AUC. Reverting changes.
Training on augumented user 15389 48/50 current_auc = 0.6066017316017317
User 15389 AUC after training: 0.6055194805194806
User 15389 does not improve AUC. Reverting changes.
Training on augumented user 128510 49/50 current_auc = 0.6066017316017317
User 128510 AUC after training: 0.6066017316017317
User 128510 does not improve AUC. Reverting changes.
[2024-12-02 17:45:25.957682] start test user 394 13/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:45:26.363683] start test user 394 13/568 recall augumented users by random, augumented_users = [95788, 2794, 16859, 75189, 9865, 91965, 120722, 28924, 87383, 40204, 117100, 103709, 82758, 46574, 5307, 43676, 72189, 123761, 41640, 88200, 127426, 12370, 9501, 2376, 85957, 93963, 72919, 44496, 79359, 136149, 43068, 10076, 124818, 57696, 109996, 28250, 51568, 31927, 137801, 99919, 100136, 120445, 125865, 62682, 104131, 117891, 127287, 55006, 54920, 78094]
[2024-12-02 17:45:26.380604] user = 394 Cloud 13/568
[2024-12-02 17:45:26.414134] user = 394 Local 13/568
[2024-12-02 17:45:26.625871] user = 394 Local+ 13/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:45:29.348936] user = 394 MPDA- 13/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6560846560846562
Training on augumented user 95788 0/50 current_auc = 0.6560846560846562
User 95788 AUC after training: 0.6560846560846562
User 95788 does not improve AUC. Reverting changes.
Training on augumented user 2794 1/50 current_auc = 0.6560846560846562
User 2794 AUC after training: 0.6560846560846562
User 2794 does not improve AUC. Reverting changes.
Training on augumented user 16859 2/50 current_auc = 0.6560846560846562
User 16859 AUC after training: 0.6563492063492063
User 16859 improves AUC. Keeping the model.
Training on augumented user 75189 3/50 current_auc = 0.6563492063492063
User 75189 AUC after training: 0.655820105820106
User 75189 does not improve AUC. Reverting changes.
Training on augumented user 9865 4/50 current_auc = 0.6563492063492063
User 9865 AUC after training: 0.657936507936508
User 9865 improves AUC. Keeping the model.
Training on augumented user 91965 5/50 current_auc = 0.657936507936508
User 91965 AUC after training: 0.6574074074074074
User 91965 does not improve AUC. Reverting changes.
Training on augumented user 120722 6/50 current_auc = 0.657936507936508
User 120722 AUC after training: 0.6576719576719577
User 120722 does not improve AUC. Reverting changes.
Training on augumented user 28924 7/50 current_auc = 0.657936507936508
User 28924 AUC after training: 0.6582010582010582
User 28924 improves AUC. Keeping the model.
Training on augumented user 87383 8/50 current_auc = 0.6582010582010582
User 87383 AUC after training: 0.6571428571428571
User 87383 does not improve AUC. Reverting changes.
Training on augumented user 40204 9/50 current_auc = 0.6582010582010582
User 40204 AUC after training: 0.6571428571428571
User 40204 does not improve AUC. Reverting changes.
Training on augumented user 117100 10/50 current_auc = 0.6582010582010582
User 117100 AUC after training: 0.6582010582010582
User 117100 does not improve AUC. Reverting changes.
Training on augumented user 103709 11/50 current_auc = 0.6582010582010582
User 103709 AUC after training: 0.6574074074074076
User 103709 does not improve AUC. Reverting changes.
Training on augumented user 82758 12/50 current_auc = 0.6582010582010582
User 82758 AUC after training: 0.6571428571428571
User 82758 does not improve AUC. Reverting changes.
Training on augumented user 46574 13/50 current_auc = 0.6582010582010582
User 46574 AUC after training: 0.6568783068783068
User 46574 does not improve AUC. Reverting changes.
Training on augumented user 5307 14/50 current_auc = 0.6582010582010582
User 5307 AUC after training: 0.6571428571428571
User 5307 does not improve AUC. Reverting changes.
Training on augumented user 43676 15/50 current_auc = 0.6582010582010582
User 43676 AUC after training: 0.6579365079365079
User 43676 does not improve AUC. Reverting changes.
Training on augumented user 72189 16/50 current_auc = 0.6582010582010582
User 72189 AUC after training: 0.6582010582010582
User 72189 does not improve AUC. Reverting changes.
Training on augumented user 123761 17/50 current_auc = 0.6582010582010582
User 123761 AUC after training: 0.6574074074074074
User 123761 does not improve AUC. Reverting changes.
Training on augumented user 41640 18/50 current_auc = 0.6582010582010582
User 41640 AUC after training: 0.6574074074074074
User 41640 does not improve AUC. Reverting changes.
Training on augumented user 88200 19/50 current_auc = 0.6582010582010582
User 88200 AUC after training: 0.657936507936508
User 88200 does not improve AUC. Reverting changes.
Training on augumented user 127426 20/50 current_auc = 0.6582010582010582
User 127426 AUC after training: 0.6576719576719576
User 127426 does not improve AUC. Reverting changes.
Training on augumented user 12370 21/50 current_auc = 0.6582010582010582
User 12370 AUC after training: 0.656878306878307
User 12370 does not improve AUC. Reverting changes.
Training on augumented user 9501 22/50 current_auc = 0.6582010582010582
User 9501 AUC after training: 0.657936507936508
User 9501 does not improve AUC. Reverting changes.
Training on augumented user 2376 23/50 current_auc = 0.6582010582010582
User 2376 AUC after training: 0.6576719576719576
User 2376 does not improve AUC. Reverting changes.
Training on augumented user 85957 24/50 current_auc = 0.6582010582010582
User 85957 AUC after training: 0.6579365079365079
User 85957 does not improve AUC. Reverting changes.
Training on augumented user 93963 25/50 current_auc = 0.6582010582010582
User 93963 AUC after training: 0.6576719576719579
User 93963 does not improve AUC. Reverting changes.
Training on augumented user 72919 26/50 current_auc = 0.6582010582010582
User 72919 AUC after training: 0.6582010582010582
User 72919 does not improve AUC. Reverting changes.
Training on augumented user 44496 27/50 current_auc = 0.6582010582010582
User 44496 AUC after training: 0.657936507936508
User 44496 does not improve AUC. Reverting changes.
Training on augumented user 79359 28/50 current_auc = 0.6582010582010582
User 79359 AUC after training: 0.6566137566137566
User 79359 does not improve AUC. Reverting changes.
Training on augumented user 136149 29/50 current_auc = 0.6582010582010582
User 136149 AUC after training: 0.6574074074074074
User 136149 does not improve AUC. Reverting changes.
Training on augumented user 43068 30/50 current_auc = 0.6582010582010582
User 43068 AUC after training: 0.6574074074074073
User 43068 does not improve AUC. Reverting changes.
Training on augumented user 10076 31/50 current_auc = 0.6582010582010582
User 10076 AUC after training: 0.656878306878307
User 10076 does not improve AUC. Reverting changes.
Training on augumented user 124818 32/50 current_auc = 0.6582010582010582
User 124818 AUC after training: 0.657936507936508
User 124818 does not improve AUC. Reverting changes.
Training on augumented user 57696 33/50 current_auc = 0.6582010582010582
User 57696 AUC after training: 0.6584656084656084
User 57696 improves AUC. Keeping the model.
Training on augumented user 109996 34/50 current_auc = 0.6584656084656084
User 109996 AUC after training: 0.6582010582010582
User 109996 does not improve AUC. Reverting changes.
Training on augumented user 28250 35/50 current_auc = 0.6584656084656084
User 28250 AUC after training: 0.6568783068783068
User 28250 does not improve AUC. Reverting changes.
Training on augumented user 51568 36/50 current_auc = 0.6584656084656084
User 51568 AUC after training: 0.657936507936508
User 51568 does not improve AUC. Reverting changes.
Training on augumented user 31927 37/50 current_auc = 0.6584656084656084
User 31927 AUC after training: 0.6574074074074074
User 31927 does not improve AUC. Reverting changes.
Training on augumented user 137801 38/50 current_auc = 0.6584656084656084
User 137801 AUC after training: 0.6582010582010582
User 137801 does not improve AUC. Reverting changes.
Training on augumented user 99919 39/50 current_auc = 0.6584656084656084
User 99919 AUC after training: 0.6574074074074076
User 99919 does not improve AUC. Reverting changes.
Training on augumented user 100136 40/50 current_auc = 0.6584656084656084
User 100136 AUC after training: 0.6574074074074074
User 100136 does not improve AUC. Reverting changes.
Training on augumented user 120445 41/50 current_auc = 0.6584656084656084
User 120445 AUC after training: 0.6584656084656084
User 120445 does not improve AUC. Reverting changes.
Training on augumented user 125865 42/50 current_auc = 0.6584656084656084
User 125865 AUC after training: 0.6579365079365079
User 125865 does not improve AUC. Reverting changes.
Training on augumented user 62682 43/50 current_auc = 0.6584656084656084
User 62682 AUC after training: 0.6579365079365079
User 62682 does not improve AUC. Reverting changes.
Training on augumented user 104131 44/50 current_auc = 0.6584656084656084
User 104131 AUC after training: 0.6584656084656084
User 104131 does not improve AUC. Reverting changes.
Training on augumented user 117891 45/50 current_auc = 0.6584656084656084
User 117891 AUC after training: 0.6592592592592593
User 117891 improves AUC. Keeping the model.
Training on augumented user 127287 46/50 current_auc = 0.6592592592592593
User 127287 AUC after training: 0.6566137566137566
User 127287 does not improve AUC. Reverting changes.
Training on augumented user 55006 47/50 current_auc = 0.6592592592592593
User 55006 AUC after training: 0.658994708994709
User 55006 does not improve AUC. Reverting changes.
Training on augumented user 54920 48/50 current_auc = 0.6592592592592593
User 54920 AUC after training: 0.6576719576719577
User 54920 does not improve AUC. Reverting changes.
Training on augumented user 78094 49/50 current_auc = 0.6592592592592593
User 78094 AUC after training: 0.6576719576719576
User 78094 does not improve AUC. Reverting changes.
[2024-12-02 17:46:02.329283] start test user 415 14/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:46:02.919774] start test user 415 14/568 recall augumented users by random, augumented_users = [47969, 46764, 79265, 111920, 85194, 122002, 10173, 72770, 28816, 137995, 122823, 131637, 35697, 32980, 51013, 14184, 54506, 111427, 13627, 55238, 25305, 81231, 100347, 85195, 73964, 87699, 29974, 16437, 46744, 61878, 34772, 98121, 51727, 24585, 3228, 40394, 33856, 116798, 1952, 25654, 79420, 39261, 36198, 30288, 84281, 70829, 1402, 29722, 116742, 73170]
[2024-12-02 17:46:02.936246] user = 415 Cloud 14/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:46:02.956129] user = 415 Local 14/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:46:03.080380] user = 415 Local+ 14/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:46:05.966102] user = 415 MPDA- 14/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 47969 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47969 AUC after training: 0.5
User 47969 does not improve AUC. Reverting changes.
Training on augumented user 46764 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46764 AUC after training: 0.5
User 46764 does not improve AUC. Reverting changes.
Training on augumented user 79265 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79265 AUC after training: 0.5
User 79265 does not improve AUC. Reverting changes.
Training on augumented user 111920 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111920 AUC after training: 0.5
User 111920 does not improve AUC. Reverting changes.
Training on augumented user 85194 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85194 AUC after training: 0.5
User 85194 does not improve AUC. Reverting changes.
Training on augumented user 122002 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122002 AUC after training: 0.5
User 122002 does not improve AUC. Reverting changes.
Training on augumented user 10173 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10173 AUC after training: 0.5
User 10173 does not improve AUC. Reverting changes.
Training on augumented user 72770 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72770 AUC after training: 0.5
User 72770 does not improve AUC. Reverting changes.
Training on augumented user 28816 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28816 AUC after training: 0.5
User 28816 does not improve AUC. Reverting changes.
Training on augumented user 137995 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137995 AUC after training: 0.5
User 137995 does not improve AUC. Reverting changes.
Training on augumented user 122823 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122823 AUC after training: 0.5
User 122823 does not improve AUC. Reverting changes.
Training on augumented user 131637 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131637 AUC after training: 0.5
User 131637 does not improve AUC. Reverting changes.
Training on augumented user 35697 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35697 AUC after training: 0.5
User 35697 does not improve AUC. Reverting changes.
Training on augumented user 32980 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32980 AUC after training: 0.5
User 32980 does not improve AUC. Reverting changes.
Training on augumented user 51013 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51013 AUC after training: 0.5
User 51013 does not improve AUC. Reverting changes.
Training on augumented user 14184 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14184 AUC after training: 0.5
User 14184 does not improve AUC. Reverting changes.
Training on augumented user 54506 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54506 AUC after training: 0.5
User 54506 does not improve AUC. Reverting changes.
Training on augumented user 111427 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111427 AUC after training: 0.5
User 111427 does not improve AUC. Reverting changes.
Training on augumented user 13627 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13627 AUC after training: 0.5
User 13627 does not improve AUC. Reverting changes.
Training on augumented user 55238 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55238 AUC after training: 0.5
User 55238 does not improve AUC. Reverting changes.
Training on augumented user 25305 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25305 AUC after training: 0.5
User 25305 does not improve AUC. Reverting changes.
Training on augumented user 81231 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81231 AUC after training: 0.5
User 81231 does not improve AUC. Reverting changes.
Training on augumented user 100347 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100347 AUC after training: 0.5
User 100347 does not improve AUC. Reverting changes.
Training on augumented user 85195 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85195 AUC after training: 0.5
User 85195 does not improve AUC. Reverting changes.
Training on augumented user 73964 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73964 AUC after training: 0.5
User 73964 does not improve AUC. Reverting changes.
Training on augumented user 87699 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87699 AUC after training: 0.5
User 87699 does not improve AUC. Reverting changes.
Training on augumented user 29974 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29974 AUC after training: 0.5
User 29974 does not improve AUC. Reverting changes.
Training on augumented user 16437 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16437 AUC after training: 0.5
User 16437 does not improve AUC. Reverting changes.
Training on augumented user 46744 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46744 AUC after training: 0.5
User 46744 does not improve AUC. Reverting changes.
Training on augumented user 61878 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61878 AUC after training: 0.5
User 61878 does not improve AUC. Reverting changes.
Training on augumented user 34772 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34772 AUC after training: 0.5
User 34772 does not improve AUC. Reverting changes.
Training on augumented user 98121 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98121 AUC after training: 0.5
User 98121 does not improve AUC. Reverting changes.
Training on augumented user 51727 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51727 AUC after training: 0.5
User 51727 does not improve AUC. Reverting changes.
Training on augumented user 24585 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24585 AUC after training: 0.5
User 24585 does not improve AUC. Reverting changes.
Training on augumented user 3228 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3228 AUC after training: 0.5
User 3228 does not improve AUC. Reverting changes.
Training on augumented user 40394 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40394 AUC after training: 0.5
User 40394 does not improve AUC. Reverting changes.
Training on augumented user 33856 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33856 AUC after training: 0.5
User 33856 does not improve AUC. Reverting changes.
Training on augumented user 116798 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116798 AUC after training: 0.5
User 116798 does not improve AUC. Reverting changes.
Training on augumented user 1952 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1952 AUC after training: 0.5
User 1952 does not improve AUC. Reverting changes.
Training on augumented user 25654 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25654 AUC after training: 0.5
User 25654 does not improve AUC. Reverting changes.
Training on augumented user 79420 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79420 AUC after training: 0.5
User 79420 does not improve AUC. Reverting changes.
Training on augumented user 39261 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39261 AUC after training: 0.5
User 39261 does not improve AUC. Reverting changes.
Training on augumented user 36198 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36198 AUC after training: 0.5
User 36198 does not improve AUC. Reverting changes.
Training on augumented user 30288 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30288 AUC after training: 0.5
User 30288 does not improve AUC. Reverting changes.
Training on augumented user 84281 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84281 AUC after training: 0.5
User 84281 does not improve AUC. Reverting changes.
Training on augumented user 70829 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70829 AUC after training: 0.5
User 70829 does not improve AUC. Reverting changes.
Training on augumented user 1402 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1402 AUC after training: 0.5
User 1402 does not improve AUC. Reverting changes.
Training on augumented user 29722 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29722 AUC after training: 0.5
User 29722 does not improve AUC. Reverting changes.
Training on augumented user 116742 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116742 AUC after training: 0.5
User 116742 does not improve AUC. Reverting changes.
Training on augumented user 73170 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73170 AUC after training: 0.5
User 73170 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:46:39.867047] start test user 419 15/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:46:40.632883] start test user 419 15/568 recall augumented users by random, augumented_users = [30767, 38573, 106779, 62157, 99124, 24477, 37790, 53833, 8198, 9370, 125428, 73964, 20692, 19385, 30769, 24573, 69351, 125061, 126211, 55205, 114297, 9057, 75824, 35876, 90754, 28229, 66386, 107189, 136814, 91745, 69454, 22496, 10804, 90101, 30184, 131065, 84875, 32557, 69790, 83961, 129278, 49519, 17098, 116734, 1813, 16624, 36871, 107192, 90457, 96512]
[2024-12-02 17:46:40.703379] user = 419 Cloud 15/568
[2024-12-02 17:46:40.740462] user = 419 Local 15/568
[2024-12-02 17:46:40.793476] user = 419 Local+ 15/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:46:43.249915] user = 419 MPDA- 15/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4166666666666667
Training on augumented user 30767 0/50 current_auc = 0.4166666666666667
User 30767 AUC after training: 0.4027777777777778
User 30767 does not improve AUC. Reverting changes.
Training on augumented user 38573 1/50 current_auc = 0.4166666666666667
User 38573 AUC after training: 0.4027777777777778
User 38573 does not improve AUC. Reverting changes.
Training on augumented user 106779 2/50 current_auc = 0.4166666666666667
User 106779 AUC after training: 0.4027777777777778
User 106779 does not improve AUC. Reverting changes.
Training on augumented user 62157 3/50 current_auc = 0.4166666666666667
User 62157 AUC after training: 0.4166666666666667
User 62157 does not improve AUC. Reverting changes.
Training on augumented user 99124 4/50 current_auc = 0.4166666666666667
User 99124 AUC after training: 0.4027777777777778
User 99124 does not improve AUC. Reverting changes.
Training on augumented user 24477 5/50 current_auc = 0.4166666666666667
User 24477 AUC after training: 0.4166666666666667
User 24477 does not improve AUC. Reverting changes.
Training on augumented user 37790 6/50 current_auc = 0.4166666666666667
User 37790 AUC after training: 0.4027777777777778
User 37790 does not improve AUC. Reverting changes.
Training on augumented user 53833 7/50 current_auc = 0.4166666666666667
User 53833 AUC after training: 0.4166666666666667
User 53833 does not improve AUC. Reverting changes.
Training on augumented user 8198 8/50 current_auc = 0.4166666666666667
User 8198 AUC after training: 0.4166666666666667
User 8198 does not improve AUC. Reverting changes.
Training on augumented user 9370 9/50 current_auc = 0.4166666666666667
User 9370 AUC after training: 0.3888888888888889
User 9370 does not improve AUC. Reverting changes.
Training on augumented user 125428 10/50 current_auc = 0.4166666666666667
User 125428 AUC after training: 0.4027777777777778
User 125428 does not improve AUC. Reverting changes.
Training on augumented user 73964 11/50 current_auc = 0.4166666666666667
User 73964 AUC after training: 0.4166666666666667
User 73964 does not improve AUC. Reverting changes.
Training on augumented user 20692 12/50 current_auc = 0.4166666666666667
User 20692 AUC after training: 0.4166666666666667
User 20692 does not improve AUC. Reverting changes.
Training on augumented user 19385 13/50 current_auc = 0.4166666666666667
User 19385 AUC after training: 0.4166666666666667
User 19385 does not improve AUC. Reverting changes.
Training on augumented user 30769 14/50 current_auc = 0.4166666666666667
User 30769 AUC after training: 0.4166666666666667
User 30769 does not improve AUC. Reverting changes.
Training on augumented user 24573 15/50 current_auc = 0.4166666666666667
User 24573 AUC after training: 0.4166666666666667
User 24573 does not improve AUC. Reverting changes.
Training on augumented user 69351 16/50 current_auc = 0.4166666666666667
User 69351 AUC after training: 0.4166666666666667
User 69351 does not improve AUC. Reverting changes.
Training on augumented user 125061 17/50 current_auc = 0.4166666666666667
User 125061 AUC after training: 0.4166666666666667
User 125061 does not improve AUC. Reverting changes.
Training on augumented user 126211 18/50 current_auc = 0.4166666666666667
User 126211 AUC after training: 0.4166666666666667
User 126211 does not improve AUC. Reverting changes.
Training on augumented user 55205 19/50 current_auc = 0.4166666666666667
User 55205 AUC after training: 0.375
User 55205 does not improve AUC. Reverting changes.
Training on augumented user 114297 20/50 current_auc = 0.4166666666666667
User 114297 AUC after training: 0.4166666666666667
User 114297 does not improve AUC. Reverting changes.
Training on augumented user 9057 21/50 current_auc = 0.4166666666666667
User 9057 AUC after training: 0.4166666666666667
User 9057 does not improve AUC. Reverting changes.
Training on augumented user 75824 22/50 current_auc = 0.4166666666666667
User 75824 AUC after training: 0.4166666666666667
User 75824 does not improve AUC. Reverting changes.
Training on augumented user 35876 23/50 current_auc = 0.4166666666666667
User 35876 AUC after training: 0.4166666666666667
User 35876 does not improve AUC. Reverting changes.
Training on augumented user 90754 24/50 current_auc = 0.4166666666666667
User 90754 AUC after training: 0.4166666666666667
User 90754 does not improve AUC. Reverting changes.
Training on augumented user 28229 25/50 current_auc = 0.4166666666666667
User 28229 AUC after training: 0.4166666666666667
User 28229 does not improve AUC. Reverting changes.
Training on augumented user 66386 26/50 current_auc = 0.4166666666666667
User 66386 AUC after training: 0.4027777777777778
User 66386 does not improve AUC. Reverting changes.
Training on augumented user 107189 27/50 current_auc = 0.4166666666666667
User 107189 AUC after training: 0.36111111111111116
User 107189 does not improve AUC. Reverting changes.
Training on augumented user 136814 28/50 current_auc = 0.4166666666666667
User 136814 AUC after training: 0.4166666666666667
User 136814 does not improve AUC. Reverting changes.
Training on augumented user 91745 29/50 current_auc = 0.4166666666666667
User 91745 AUC after training: 0.3888888888888889
User 91745 does not improve AUC. Reverting changes.
Training on augumented user 69454 30/50 current_auc = 0.4166666666666667
User 69454 AUC after training: 0.4027777777777778
User 69454 does not improve AUC. Reverting changes.
Training on augumented user 22496 31/50 current_auc = 0.4166666666666667
User 22496 AUC after training: 0.4166666666666667
User 22496 does not improve AUC. Reverting changes.
Training on augumented user 10804 32/50 current_auc = 0.4166666666666667
User 10804 AUC after training: 0.4027777777777778
User 10804 does not improve AUC. Reverting changes.
Training on augumented user 90101 33/50 current_auc = 0.4166666666666667
User 90101 AUC after training: 0.4166666666666667
User 90101 does not improve AUC. Reverting changes.
Training on augumented user 30184 34/50 current_auc = 0.4166666666666667
User 30184 AUC after training: 0.4166666666666667
User 30184 does not improve AUC. Reverting changes.
Training on augumented user 131065 35/50 current_auc = 0.4166666666666667
User 131065 AUC after training: 0.4166666666666667
User 131065 does not improve AUC. Reverting changes.
Training on augumented user 84875 36/50 current_auc = 0.4166666666666667
User 84875 AUC after training: 0.4166666666666667
User 84875 does not improve AUC. Reverting changes.
Training on augumented user 32557 37/50 current_auc = 0.4166666666666667
User 32557 AUC after training: 0.4027777777777778
User 32557 does not improve AUC. Reverting changes.
Training on augumented user 69790 38/50 current_auc = 0.4166666666666667
User 69790 AUC after training: 0.4166666666666667
User 69790 does not improve AUC. Reverting changes.
Training on augumented user 83961 39/50 current_auc = 0.4166666666666667
User 83961 AUC after training: 0.4166666666666667
User 83961 does not improve AUC. Reverting changes.
Training on augumented user 129278 40/50 current_auc = 0.4166666666666667
User 129278 AUC after training: 0.4166666666666667
User 129278 does not improve AUC. Reverting changes.
Training on augumented user 49519 41/50 current_auc = 0.4166666666666667
User 49519 AUC after training: 0.4166666666666667
User 49519 does not improve AUC. Reverting changes.
Training on augumented user 17098 42/50 current_auc = 0.4166666666666667
User 17098 AUC after training: 0.4166666666666667
User 17098 does not improve AUC. Reverting changes.
Training on augumented user 116734 43/50 current_auc = 0.4166666666666667
User 116734 AUC after training: 0.4166666666666667
User 116734 does not improve AUC. Reverting changes.
Training on augumented user 1813 44/50 current_auc = 0.4166666666666667
User 1813 AUC after training: 0.4166666666666667
User 1813 does not improve AUC. Reverting changes.
Training on augumented user 16624 45/50 current_auc = 0.4166666666666667
User 16624 AUC after training: 0.4027777777777778
User 16624 does not improve AUC. Reverting changes.
Training on augumented user 36871 46/50 current_auc = 0.4166666666666667
User 36871 AUC after training: 0.4027777777777778
User 36871 does not improve AUC. Reverting changes.
Training on augumented user 107192 47/50 current_auc = 0.4166666666666667
User 107192 AUC after training: 0.4166666666666667
User 107192 does not improve AUC. Reverting changes.
Training on augumented user 90457 48/50 current_auc = 0.4166666666666667
User 90457 AUC after training: 0.4166666666666667
User 90457 does not improve AUC. Reverting changes.
Training on augumented user 96512 49/50 current_auc = 0.4166666666666667
User 96512 AUC after training: 0.4166666666666667
User 96512 does not improve AUC. Reverting changes.
[2024-12-02 17:47:16.895608] start test user 421 16/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:47:17.643019] start test user 421 16/568 recall augumented users by random, augumented_users = [116809, 102983, 51758, 79183, 133624, 135919, 59284, 51196, 129495, 69988, 60209, 42351, 970, 127759, 137268, 62095, 128605, 35707, 102333, 31220, 57230, 118760, 127952, 33342, 90006, 3695, 96607, 63904, 18612, 130621, 128831, 10005, 36129, 119504, 1924, 13016, 63259, 77934, 62161, 7024, 64809, 2370, 117565, 86514, 90701, 95733, 66982, 12753, 1085, 37289]
[2024-12-02 17:47:17.660867] user = 421 Cloud 16/568
[2024-12-02 17:47:17.673792] user = 421 Local 16/568
[2024-12-02 17:47:17.855822] user = 421 Local+ 16/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:47:21.442663] user = 421 MPDA- 16/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7478070175438597
Training on augumented user 116809 0/50 current_auc = 0.7478070175438597
User 116809 AUC after training: 0.7456140350877193
User 116809 does not improve AUC. Reverting changes.
Training on augumented user 102983 1/50 current_auc = 0.7478070175438597
User 102983 AUC after training: 0.7478070175438597
User 102983 does not improve AUC. Reverting changes.
Training on augumented user 51758 2/50 current_auc = 0.7478070175438597
User 51758 AUC after training: 0.7456140350877193
User 51758 does not improve AUC. Reverting changes.
Training on augumented user 79183 3/50 current_auc = 0.7478070175438597
User 79183 AUC after training: 0.7478070175438597
User 79183 does not improve AUC. Reverting changes.
Training on augumented user 133624 4/50 current_auc = 0.7478070175438597
User 133624 AUC after training: 0.7456140350877193
User 133624 does not improve AUC. Reverting changes.
Training on augumented user 135919 5/50 current_auc = 0.7478070175438597
User 135919 AUC after training: 0.7478070175438597
User 135919 does not improve AUC. Reverting changes.
Training on augumented user 59284 6/50 current_auc = 0.7478070175438597
User 59284 AUC after training: 0.7456140350877193
User 59284 does not improve AUC. Reverting changes.
Training on augumented user 51196 7/50 current_auc = 0.7478070175438597
User 51196 AUC after training: 0.7478070175438597
User 51196 does not improve AUC. Reverting changes.
Training on augumented user 129495 8/50 current_auc = 0.7478070175438597
User 129495 AUC after training: 0.7478070175438597
User 129495 does not improve AUC. Reverting changes.
Training on augumented user 69988 9/50 current_auc = 0.7478070175438597
User 69988 AUC after training: 0.7478070175438597
User 69988 does not improve AUC. Reverting changes.
Training on augumented user 60209 10/50 current_auc = 0.7478070175438597
User 60209 AUC after training: 0.7478070175438597
User 60209 does not improve AUC. Reverting changes.
Training on augumented user 42351 11/50 current_auc = 0.7478070175438597
User 42351 AUC after training: 0.7478070175438597
User 42351 does not improve AUC. Reverting changes.
Training on augumented user 970 12/50 current_auc = 0.7478070175438597
User 970 AUC after training: 0.7521929824561404
User 970 improves AUC. Keeping the model.
Training on augumented user 127759 13/50 current_auc = 0.7521929824561404
User 127759 AUC after training: 0.7521929824561404
User 127759 does not improve AUC. Reverting changes.
Training on augumented user 137268 14/50 current_auc = 0.7521929824561404
User 137268 AUC after training: 0.7521929824561404
User 137268 does not improve AUC. Reverting changes.
Training on augumented user 62095 15/50 current_auc = 0.7521929824561404
User 62095 AUC after training: 0.7521929824561404
User 62095 does not improve AUC. Reverting changes.
Training on augumented user 128605 16/50 current_auc = 0.7521929824561404
User 128605 AUC after training: 0.7521929824561404
User 128605 does not improve AUC. Reverting changes.
Training on augumented user 35707 17/50 current_auc = 0.7521929824561404
User 35707 AUC after training: 0.7521929824561404
User 35707 does not improve AUC. Reverting changes.
Training on augumented user 102333 18/50 current_auc = 0.7521929824561404
User 102333 AUC after training: 0.7521929824561404
User 102333 does not improve AUC. Reverting changes.
Training on augumented user 31220 19/50 current_auc = 0.7521929824561404
User 31220 AUC after training: 0.7521929824561404
User 31220 does not improve AUC. Reverting changes.
Training on augumented user 57230 20/50 current_auc = 0.7521929824561404
User 57230 AUC after training: 0.7521929824561404
User 57230 does not improve AUC. Reverting changes.
Training on augumented user 118760 21/50 current_auc = 0.7521929824561404
User 118760 AUC after training: 0.7521929824561404
User 118760 does not improve AUC. Reverting changes.
Training on augumented user 127952 22/50 current_auc = 0.7521929824561404
User 127952 AUC after training: 0.7521929824561404
User 127952 does not improve AUC. Reverting changes.
Training on augumented user 33342 23/50 current_auc = 0.7521929824561404
User 33342 AUC after training: 0.7543859649122807
User 33342 improves AUC. Keeping the model.
Training on augumented user 90006 24/50 current_auc = 0.7543859649122807
User 90006 AUC after training: 0.7543859649122807
User 90006 does not improve AUC. Reverting changes.
Training on augumented user 3695 25/50 current_auc = 0.7543859649122807
User 3695 AUC after training: 0.7543859649122807
User 3695 does not improve AUC. Reverting changes.
Training on augumented user 96607 26/50 current_auc = 0.7543859649122807
User 96607 AUC after training: 0.7543859649122807
User 96607 does not improve AUC. Reverting changes.
Training on augumented user 63904 27/50 current_auc = 0.7543859649122807
User 63904 AUC after training: 0.7543859649122807
User 63904 does not improve AUC. Reverting changes.
Training on augumented user 18612 28/50 current_auc = 0.7543859649122807
User 18612 AUC after training: 0.7521929824561404
User 18612 does not improve AUC. Reverting changes.
Training on augumented user 130621 29/50 current_auc = 0.7543859649122807
User 130621 AUC after training: 0.7543859649122807
User 130621 does not improve AUC. Reverting changes.
Training on augumented user 128831 30/50 current_auc = 0.7543859649122807
User 128831 AUC after training: 0.7543859649122807
User 128831 does not improve AUC. Reverting changes.
Training on augumented user 10005 31/50 current_auc = 0.7543859649122807
User 10005 AUC after training: 0.7543859649122807
User 10005 does not improve AUC. Reverting changes.
Training on augumented user 36129 32/50 current_auc = 0.7543859649122807
User 36129 AUC after training: 0.7543859649122807
User 36129 does not improve AUC. Reverting changes.
Training on augumented user 119504 33/50 current_auc = 0.7543859649122807
User 119504 AUC after training: 0.7543859649122807
User 119504 does not improve AUC. Reverting changes.
Training on augumented user 1924 34/50 current_auc = 0.7543859649122807
User 1924 AUC after training: 0.7543859649122807
User 1924 does not improve AUC. Reverting changes.
Training on augumented user 13016 35/50 current_auc = 0.7543859649122807
User 13016 AUC after training: 0.7521929824561404
User 13016 does not improve AUC. Reverting changes.
Training on augumented user 63259 36/50 current_auc = 0.7543859649122807
User 63259 AUC after training: 0.7543859649122807
User 63259 does not improve AUC. Reverting changes.
Training on augumented user 77934 37/50 current_auc = 0.7543859649122807
User 77934 AUC after training: 0.7543859649122807
User 77934 does not improve AUC. Reverting changes.
Training on augumented user 62161 38/50 current_auc = 0.7543859649122807
User 62161 AUC after training: 0.7543859649122807
User 62161 does not improve AUC. Reverting changes.
Training on augumented user 7024 39/50 current_auc = 0.7543859649122807
User 7024 AUC after training: 0.7521929824561404
User 7024 does not improve AUC. Reverting changes.
Training on augumented user 64809 40/50 current_auc = 0.7543859649122807
User 64809 AUC after training: 0.7543859649122807
User 64809 does not improve AUC. Reverting changes.
Training on augumented user 2370 41/50 current_auc = 0.7543859649122807
User 2370 AUC after training: 0.7543859649122807
User 2370 does not improve AUC. Reverting changes.
Training on augumented user 117565 42/50 current_auc = 0.7543859649122807
User 117565 AUC after training: 0.7543859649122807
User 117565 does not improve AUC. Reverting changes.
Training on augumented user 86514 43/50 current_auc = 0.7543859649122807
User 86514 AUC after training: 0.7521929824561404
User 86514 does not improve AUC. Reverting changes.
Training on augumented user 90701 44/50 current_auc = 0.7543859649122807
User 90701 AUC after training: 0.7543859649122807
User 90701 does not improve AUC. Reverting changes.
Training on augumented user 95733 45/50 current_auc = 0.7543859649122807
User 95733 AUC after training: 0.7521929824561404
User 95733 does not improve AUC. Reverting changes.
Training on augumented user 66982 46/50 current_auc = 0.7543859649122807
User 66982 AUC after training: 0.7543859649122807
User 66982 does not improve AUC. Reverting changes.
Training on augumented user 12753 47/50 current_auc = 0.7543859649122807
User 12753 AUC after training: 0.7543859649122807
User 12753 does not improve AUC. Reverting changes.
Training on augumented user 1085 48/50 current_auc = 0.7543859649122807
User 1085 AUC after training: 0.7478070175438597
User 1085 does not improve AUC. Reverting changes.
Training on augumented user 37289 49/50 current_auc = 0.7543859649122807
User 37289 AUC after training: 0.7543859649122807
User 37289 does not improve AUC. Reverting changes.
[2024-12-02 17:47:52.234022] start test user 451 17/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:47:52.995919] start test user 451 17/568 recall augumented users by random, augumented_users = [1312, 74120, 96181, 53977, 97700, 135391, 108106, 123391, 71522, 79521, 92153, 61142, 12720, 117633, 16100, 38433, 109509, 136188, 81877, 98667, 80793, 45629, 6669, 4457, 46614, 79795, 95515, 21314, 75321, 126233, 86375, 33927, 3993, 100124, 129013, 88630, 7, 69571, 136604, 38312, 18547, 126066, 66033, 41135, 70440, 99203, 67993, 78632, 29006, 113629]
[2024-12-02 17:47:53.033446] user = 451 Cloud 17/568
[2024-12-02 17:47:53.048679] user = 451 Local 17/568
[2024-12-02 17:47:53.108096] user = 451 Local+ 17/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:47:55.786582] user = 451 MPDA- 17/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5271164021164021
Training on augumented user 1312 0/50 current_auc = 0.5271164021164021
User 1312 AUC after training: 0.5264550264550265
User 1312 does not improve AUC. Reverting changes.
Training on augumented user 74120 1/50 current_auc = 0.5271164021164021
User 74120 AUC after training: 0.5271164021164021
User 74120 does not improve AUC. Reverting changes.
Training on augumented user 96181 2/50 current_auc = 0.5271164021164021
User 96181 AUC after training: 0.5264550264550265
User 96181 does not improve AUC. Reverting changes.
Training on augumented user 53977 3/50 current_auc = 0.5271164021164021
User 53977 AUC after training: 0.5257936507936508
User 53977 does not improve AUC. Reverting changes.
Training on augumented user 97700 4/50 current_auc = 0.5271164021164021
User 97700 AUC after training: 0.5257936507936508
User 97700 does not improve AUC. Reverting changes.
Training on augumented user 135391 5/50 current_auc = 0.5271164021164021
User 135391 AUC after training: 0.5264550264550265
User 135391 does not improve AUC. Reverting changes.
Training on augumented user 108106 6/50 current_auc = 0.5271164021164021
User 108106 AUC after training: 0.5271164021164021
User 108106 does not improve AUC. Reverting changes.
Training on augumented user 123391 7/50 current_auc = 0.5271164021164021
User 123391 AUC after training: 0.5271164021164021
User 123391 does not improve AUC. Reverting changes.
Training on augumented user 71522 8/50 current_auc = 0.5271164021164021
User 71522 AUC after training: 0.5271164021164021
User 71522 does not improve AUC. Reverting changes.
Training on augumented user 79521 9/50 current_auc = 0.5271164021164021
User 79521 AUC after training: 0.5211640211640212
User 79521 does not improve AUC. Reverting changes.
Training on augumented user 92153 10/50 current_auc = 0.5271164021164021
User 92153 AUC after training: 0.5271164021164021
User 92153 does not improve AUC. Reverting changes.
Training on augumented user 61142 11/50 current_auc = 0.5271164021164021
User 61142 AUC after training: 0.5277777777777778
User 61142 improves AUC. Keeping the model.
Training on augumented user 12720 12/50 current_auc = 0.5277777777777778
User 12720 AUC after training: 0.5271164021164021
User 12720 does not improve AUC. Reverting changes.
Training on augumented user 117633 13/50 current_auc = 0.5277777777777778
User 117633 AUC after training: 0.5277777777777778
User 117633 does not improve AUC. Reverting changes.
Training on augumented user 16100 14/50 current_auc = 0.5277777777777778
User 16100 AUC after training: 0.5271164021164021
User 16100 does not improve AUC. Reverting changes.
Training on augumented user 38433 15/50 current_auc = 0.5277777777777778
User 38433 AUC after training: 0.5271164021164021
User 38433 does not improve AUC. Reverting changes.
Training on augumented user 109509 16/50 current_auc = 0.5277777777777778
User 109509 AUC after training: 0.5284391534391535
User 109509 improves AUC. Keeping the model.
Training on augumented user 136188 17/50 current_auc = 0.5284391534391535
User 136188 AUC after training: 0.5277777777777778
User 136188 does not improve AUC. Reverting changes.
Training on augumented user 81877 18/50 current_auc = 0.5284391534391535
User 81877 AUC after training: 0.5271164021164021
User 81877 does not improve AUC. Reverting changes.
Training on augumented user 98667 19/50 current_auc = 0.5284391534391535
User 98667 AUC after training: 0.5271164021164021
User 98667 does not improve AUC. Reverting changes.
Training on augumented user 80793 20/50 current_auc = 0.5284391534391535
User 80793 AUC after training: 0.5277777777777778
User 80793 does not improve AUC. Reverting changes.
Training on augumented user 45629 21/50 current_auc = 0.5284391534391535
User 45629 AUC after training: 0.5284391534391535
User 45629 does not improve AUC. Reverting changes.
Training on augumented user 6669 22/50 current_auc = 0.5284391534391535
User 6669 AUC after training: 0.5277777777777778
User 6669 does not improve AUC. Reverting changes.
Training on augumented user 4457 23/50 current_auc = 0.5284391534391535
User 4457 AUC after training: 0.5284391534391535
User 4457 does not improve AUC. Reverting changes.
Training on augumented user 46614 24/50 current_auc = 0.5284391534391535
User 46614 AUC after training: 0.5277777777777777
User 46614 does not improve AUC. Reverting changes.
Training on augumented user 79795 25/50 current_auc = 0.5284391534391535
User 79795 AUC after training: 0.5277777777777778
User 79795 does not improve AUC. Reverting changes.
Training on augumented user 95515 26/50 current_auc = 0.5284391534391535
User 95515 AUC after training: 0.5277777777777778
User 95515 does not improve AUC. Reverting changes.
Training on augumented user 21314 27/50 current_auc = 0.5284391534391535
User 21314 AUC after training: 0.5284391534391535
User 21314 does not improve AUC. Reverting changes.
Training on augumented user 75321 28/50 current_auc = 0.5284391534391535
User 75321 AUC after training: 0.5277777777777778
User 75321 does not improve AUC. Reverting changes.
Training on augumented user 126233 29/50 current_auc = 0.5284391534391535
User 126233 AUC after training: 0.5277777777777778
User 126233 does not improve AUC. Reverting changes.
Training on augumented user 86375 30/50 current_auc = 0.5284391534391535
User 86375 AUC after training: 0.5284391534391535
User 86375 does not improve AUC. Reverting changes.
Training on augumented user 33927 31/50 current_auc = 0.5284391534391535
User 33927 AUC after training: 0.5271164021164021
User 33927 does not improve AUC. Reverting changes.
Training on augumented user 3993 32/50 current_auc = 0.5284391534391535
User 3993 AUC after training: 0.5271164021164021
User 3993 does not improve AUC. Reverting changes.
Training on augumented user 100124 33/50 current_auc = 0.5284391534391535
User 100124 AUC after training: 0.5277777777777778
User 100124 does not improve AUC. Reverting changes.
Training on augumented user 129013 34/50 current_auc = 0.5284391534391535
User 129013 AUC after training: 0.5271164021164021
User 129013 does not improve AUC. Reverting changes.
Training on augumented user 88630 35/50 current_auc = 0.5284391534391535
User 88630 AUC after training: 0.5291005291005291
User 88630 improves AUC. Keeping the model.
Training on augumented user 7 36/50 current_auc = 0.5291005291005291
User 7 AUC after training: 0.5271164021164021
User 7 does not improve AUC. Reverting changes.
Training on augumented user 69571 37/50 current_auc = 0.5291005291005291
User 69571 AUC after training: 0.5277777777777778
User 69571 does not improve AUC. Reverting changes.
Training on augumented user 136604 38/50 current_auc = 0.5291005291005291
User 136604 AUC after training: 0.5257936507936508
User 136604 does not improve AUC. Reverting changes.
Training on augumented user 38312 39/50 current_auc = 0.5291005291005291
User 38312 AUC after training: 0.5277777777777777
User 38312 does not improve AUC. Reverting changes.
Training on augumented user 18547 40/50 current_auc = 0.5291005291005291
User 18547 AUC after training: 0.5264550264550264
User 18547 does not improve AUC. Reverting changes.
Training on augumented user 126066 41/50 current_auc = 0.5291005291005291
User 126066 AUC after training: 0.5277777777777777
User 126066 does not improve AUC. Reverting changes.
Training on augumented user 66033 42/50 current_auc = 0.5291005291005291
User 66033 AUC after training: 0.5277777777777777
User 66033 does not improve AUC. Reverting changes.
Training on augumented user 41135 43/50 current_auc = 0.5291005291005291
User 41135 AUC after training: 0.5277777777777778
User 41135 does not improve AUC. Reverting changes.
Training on augumented user 70440 44/50 current_auc = 0.5291005291005291
User 70440 AUC after training: 0.5284391534391535
User 70440 does not improve AUC. Reverting changes.
Training on augumented user 99203 45/50 current_auc = 0.5291005291005291
User 99203 AUC after training: 0.5277777777777778
User 99203 does not improve AUC. Reverting changes.
Training on augumented user 67993 46/50 current_auc = 0.5291005291005291
User 67993 AUC after training: 0.5271164021164021
User 67993 does not improve AUC. Reverting changes.
Training on augumented user 78632 47/50 current_auc = 0.5291005291005291
User 78632 AUC after training: 0.5297619047619048
User 78632 improves AUC. Keeping the model.
Training on augumented user 29006 48/50 current_auc = 0.5297619047619048
User 29006 AUC after training: 0.5271164021164021
User 29006 does not improve AUC. Reverting changes.
Training on augumented user 113629 49/50 current_auc = 0.5297619047619048
User 113629 AUC after training: 0.5304232804232804
User 113629 improves AUC. Keeping the model.
[2024-12-02 17:48:23.733592] start test user 455 18/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:48:24.244083] start test user 455 18/568 recall augumented users by random, augumented_users = [116801, 125924, 11369, 125117, 12366, 100084, 8848, 13859, 107171, 97604, 63111, 123382, 106305, 68607, 112332, 2887, 99319, 117181, 65360, 97112, 119926, 112815, 41738, 103240, 34389, 54451, 81532, 92168, 43994, 39818, 52806, 66600, 38869, 46343, 120480, 64790, 121165, 50133, 28238, 60539, 9052, 57078, 29983, 7645, 89865, 48674, 113337, 3096, 24430, 124352]
[2024-12-02 17:48:24.259743] user = 455 Cloud 18/568
[2024-12-02 17:48:24.270552] user = 455 Local 18/568
[2024-12-02 17:48:24.345156] user = 455 Local+ 18/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:48:26.491195] user = 455 MPDA- 18/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5876068376068376
Training on augumented user 116801 0/50 current_auc = 0.5876068376068376
User 116801 AUC after training: 0.5876068376068376
User 116801 does not improve AUC. Reverting changes.
Training on augumented user 125924 1/50 current_auc = 0.5876068376068376
User 125924 AUC after training: 0.5854700854700856
User 125924 does not improve AUC. Reverting changes.
Training on augumented user 11369 2/50 current_auc = 0.5876068376068376
User 11369 AUC after training: 0.5854700854700855
User 11369 does not improve AUC. Reverting changes.
Training on augumented user 125117 3/50 current_auc = 0.5876068376068376
User 125117 AUC after training: 0.5854700854700855
User 125117 does not improve AUC. Reverting changes.
Training on augumented user 12366 4/50 current_auc = 0.5876068376068376
User 12366 AUC after training: 0.5897435897435898
User 12366 improves AUC. Keeping the model.
Training on augumented user 100084 5/50 current_auc = 0.5897435897435898
User 100084 AUC after training: 0.5918803418803419
User 100084 improves AUC. Keeping the model.
Training on augumented user 8848 6/50 current_auc = 0.5918803418803419
User 8848 AUC after training: 0.5897435897435898
User 8848 does not improve AUC. Reverting changes.
Training on augumented user 13859 7/50 current_auc = 0.5918803418803419
User 13859 AUC after training: 0.5833333333333334
User 13859 does not improve AUC. Reverting changes.
Training on augumented user 107171 8/50 current_auc = 0.5918803418803419
User 107171 AUC after training: 0.5897435897435898
User 107171 does not improve AUC. Reverting changes.
Training on augumented user 97604 9/50 current_auc = 0.5918803418803419
User 97604 AUC after training: 0.5908119658119658
User 97604 does not improve AUC. Reverting changes.
Training on augumented user 63111 10/50 current_auc = 0.5918803418803419
User 63111 AUC after training: 0.5876068376068376
User 63111 does not improve AUC. Reverting changes.
Training on augumented user 123382 11/50 current_auc = 0.5918803418803419
User 123382 AUC after training: 0.5897435897435898
User 123382 does not improve AUC. Reverting changes.
Training on augumented user 106305 12/50 current_auc = 0.5918803418803419
User 106305 AUC after training: 0.5897435897435898
User 106305 does not improve AUC. Reverting changes.
Training on augumented user 68607 13/50 current_auc = 0.5918803418803419
User 68607 AUC after training: 0.5918803418803419
User 68607 does not improve AUC. Reverting changes.
Training on augumented user 112332 14/50 current_auc = 0.5918803418803419
User 112332 AUC after training: 0.5897435897435898
User 112332 does not improve AUC. Reverting changes.
Training on augumented user 2887 15/50 current_auc = 0.5918803418803419
User 2887 AUC after training: 0.5876068376068376
User 2887 does not improve AUC. Reverting changes.
Training on augumented user 99319 16/50 current_auc = 0.5918803418803419
User 99319 AUC after training: 0.5897435897435898
User 99319 does not improve AUC. Reverting changes.
Training on augumented user 117181 17/50 current_auc = 0.5918803418803419
User 117181 AUC after training: 0.5876068376068376
User 117181 does not improve AUC. Reverting changes.
Training on augumented user 65360 18/50 current_auc = 0.5918803418803419
User 65360 AUC after training: 0.5918803418803419
User 65360 does not improve AUC. Reverting changes.
Training on augumented user 97112 19/50 current_auc = 0.5918803418803419
User 97112 AUC after training: 0.5897435897435898
User 97112 does not improve AUC. Reverting changes.
Training on augumented user 119926 20/50 current_auc = 0.5918803418803419
User 119926 AUC after training: 0.5897435897435898
User 119926 does not improve AUC. Reverting changes.
Training on augumented user 112815 21/50 current_auc = 0.5918803418803419
User 112815 AUC after training: 0.5876068376068376
User 112815 does not improve AUC. Reverting changes.
Training on augumented user 41738 22/50 current_auc = 0.5918803418803419
User 41738 AUC after training: 0.5897435897435898
User 41738 does not improve AUC. Reverting changes.
Training on augumented user 103240 23/50 current_auc = 0.5918803418803419
User 103240 AUC after training: 0.5876068376068376
User 103240 does not improve AUC. Reverting changes.
Training on augumented user 34389 24/50 current_auc = 0.5918803418803419
User 34389 AUC after training: 0.5918803418803419
User 34389 does not improve AUC. Reverting changes.
Training on augumented user 54451 25/50 current_auc = 0.5918803418803419
User 54451 AUC after training: 0.5854700854700855
User 54451 does not improve AUC. Reverting changes.
Training on augumented user 81532 26/50 current_auc = 0.5918803418803419
User 81532 AUC after training: 0.594017094017094
User 81532 improves AUC. Keeping the model.
Training on augumented user 92168 27/50 current_auc = 0.594017094017094
User 92168 AUC after training: 0.5961538461538461
User 92168 improves AUC. Keeping the model.
Training on augumented user 43994 28/50 current_auc = 0.5961538461538461
User 43994 AUC after training: 0.5961538461538461
User 43994 does not improve AUC. Reverting changes.
Training on augumented user 39818 29/50 current_auc = 0.5961538461538461
User 39818 AUC after training: 0.594017094017094
User 39818 does not improve AUC. Reverting changes.
Training on augumented user 52806 30/50 current_auc = 0.5961538461538461
User 52806 AUC after training: 0.5961538461538461
User 52806 does not improve AUC. Reverting changes.
Training on augumented user 66600 31/50 current_auc = 0.5961538461538461
User 66600 AUC after training: 0.5961538461538461
User 66600 does not improve AUC. Reverting changes.
Training on augumented user 38869 32/50 current_auc = 0.5961538461538461
User 38869 AUC after training: 0.5961538461538461
User 38869 does not improve AUC. Reverting changes.
Training on augumented user 46343 33/50 current_auc = 0.5961538461538461
User 46343 AUC after training: 0.5961538461538461
User 46343 does not improve AUC. Reverting changes.
Training on augumented user 120480 34/50 current_auc = 0.5961538461538461
User 120480 AUC after training: 0.5961538461538461
User 120480 does not improve AUC. Reverting changes.
Training on augumented user 64790 35/50 current_auc = 0.5961538461538461
User 64790 AUC after training: 0.5918803418803419
User 64790 does not improve AUC. Reverting changes.
Training on augumented user 121165 36/50 current_auc = 0.5961538461538461
User 121165 AUC after training: 0.5961538461538461
User 121165 does not improve AUC. Reverting changes.
Training on augumented user 50133 37/50 current_auc = 0.5961538461538461
User 50133 AUC after training: 0.594017094017094
User 50133 does not improve AUC. Reverting changes.
Training on augumented user 28238 38/50 current_auc = 0.5961538461538461
User 28238 AUC after training: 0.5918803418803419
User 28238 does not improve AUC. Reverting changes.
Training on augumented user 60539 39/50 current_auc = 0.5961538461538461
User 60539 AUC after training: 0.594017094017094
User 60539 does not improve AUC. Reverting changes.
Training on augumented user 9052 40/50 current_auc = 0.5961538461538461
User 9052 AUC after training: 0.5961538461538461
User 9052 does not improve AUC. Reverting changes.
Training on augumented user 57078 41/50 current_auc = 0.5961538461538461
User 57078 AUC after training: 0.594017094017094
User 57078 does not improve AUC. Reverting changes.
Training on augumented user 29983 42/50 current_auc = 0.5961538461538461
User 29983 AUC after training: 0.5961538461538461
User 29983 does not improve AUC. Reverting changes.
Training on augumented user 7645 43/50 current_auc = 0.5961538461538461
User 7645 AUC after training: 0.594017094017094
User 7645 does not improve AUC. Reverting changes.
Training on augumented user 89865 44/50 current_auc = 0.5961538461538461
User 89865 AUC after training: 0.5961538461538461
User 89865 does not improve AUC. Reverting changes.
Training on augumented user 48674 45/50 current_auc = 0.5961538461538461
User 48674 AUC after training: 0.5961538461538461
User 48674 does not improve AUC. Reverting changes.
Training on augumented user 113337 46/50 current_auc = 0.5961538461538461
User 113337 AUC after training: 0.594017094017094
User 113337 does not improve AUC. Reverting changes.
Training on augumented user 3096 47/50 current_auc = 0.5961538461538461
User 3096 AUC after training: 0.594017094017094
User 3096 does not improve AUC. Reverting changes.
Training on augumented user 24430 48/50 current_auc = 0.5961538461538461
User 24430 AUC after training: 0.5961538461538461
User 24430 does not improve AUC. Reverting changes.
Training on augumented user 124352 49/50 current_auc = 0.5961538461538461
User 124352 AUC after training: 0.5897435897435898
User 124352 does not improve AUC. Reverting changes.
[2024-12-02 17:48:54.422801] start test user 469 19/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:48:55.095405] start test user 469 19/568 recall augumented users by random, augumented_users = [128013, 93000, 49099, 43301, 5623, 1188, 27293, 100892, 135343, 52326, 14473, 30792, 68245, 74516, 22866, 39511, 75705, 22858, 92418, 97053, 70441, 108338, 117511, 28482, 54518, 134781, 34803, 73146, 5098, 346, 132911, 137757, 82551, 15523, 13088, 82542, 87273, 25576, 133288, 121649, 36083, 116000, 36979, 38241, 70522, 106630, 98370, 118869, 39889, 77724]
[2024-12-02 17:48:55.132035] user = 469 Cloud 19/568
[2024-12-02 17:48:55.150056] user = 469 Local 19/568
[2024-12-02 17:48:55.226040] user = 469 Local+ 19/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:48:58.162940] user = 469 MPDA- 19/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7741935483870968
Training on augumented user 128013 0/50 current_auc = 0.7741935483870968
User 128013 AUC after training: 0.7741935483870968
User 128013 does not improve AUC. Reverting changes.
Training on augumented user 93000 1/50 current_auc = 0.7741935483870968
User 93000 AUC after training: 0.7692307692307692
User 93000 does not improve AUC. Reverting changes.
Training on augumented user 49099 2/50 current_auc = 0.7741935483870968
User 49099 AUC after training: 0.7692307692307692
User 49099 does not improve AUC. Reverting changes.
Training on augumented user 43301 3/50 current_auc = 0.7741935483870968
User 43301 AUC after training: 0.771712158808933
User 43301 does not improve AUC. Reverting changes.
Training on augumented user 5623 4/50 current_auc = 0.7741935483870968
User 5623 AUC after training: 0.7741935483870968
User 5623 does not improve AUC. Reverting changes.
Training on augumented user 1188 5/50 current_auc = 0.7741935483870968
User 1188 AUC after training: 0.771712158808933
User 1188 does not improve AUC. Reverting changes.
Training on augumented user 27293 6/50 current_auc = 0.7741935483870968
User 27293 AUC after training: 0.7692307692307692
User 27293 does not improve AUC. Reverting changes.
Training on augumented user 100892 7/50 current_auc = 0.7741935483870968
User 100892 AUC after training: 0.7741935483870968
User 100892 does not improve AUC. Reverting changes.
Training on augumented user 135343 8/50 current_auc = 0.7741935483870968
User 135343 AUC after training: 0.7692307692307692
User 135343 does not improve AUC. Reverting changes.
Training on augumented user 52326 9/50 current_auc = 0.7741935483870968
User 52326 AUC after training: 0.7741935483870968
User 52326 does not improve AUC. Reverting changes.
Training on augumented user 14473 10/50 current_auc = 0.7741935483870968
User 14473 AUC after training: 0.7741935483870968
User 14473 does not improve AUC. Reverting changes.
Training on augumented user 30792 11/50 current_auc = 0.7741935483870968
User 30792 AUC after training: 0.7741935483870968
User 30792 does not improve AUC. Reverting changes.
Training on augumented user 68245 12/50 current_auc = 0.7741935483870968
User 68245 AUC after training: 0.7692307692307692
User 68245 does not improve AUC. Reverting changes.
Training on augumented user 74516 13/50 current_auc = 0.7741935483870968
User 74516 AUC after training: 0.7741935483870968
User 74516 does not improve AUC. Reverting changes.
Training on augumented user 22866 14/50 current_auc = 0.7741935483870968
User 22866 AUC after training: 0.771712158808933
User 22866 does not improve AUC. Reverting changes.
Training on augumented user 39511 15/50 current_auc = 0.7741935483870968
User 39511 AUC after training: 0.7741935483870968
User 39511 does not improve AUC. Reverting changes.
Training on augumented user 75705 16/50 current_auc = 0.7741935483870968
User 75705 AUC after training: 0.7692307692307692
User 75705 does not improve AUC. Reverting changes.
Training on augumented user 22858 17/50 current_auc = 0.7741935483870968
User 22858 AUC after training: 0.771712158808933
User 22858 does not improve AUC. Reverting changes.
Training on augumented user 92418 18/50 current_auc = 0.7741935483870968
User 92418 AUC after training: 0.771712158808933
User 92418 does not improve AUC. Reverting changes.
Training on augumented user 97053 19/50 current_auc = 0.7741935483870968
User 97053 AUC after training: 0.7741935483870968
User 97053 does not improve AUC. Reverting changes.
Training on augumented user 70441 20/50 current_auc = 0.7741935483870968
User 70441 AUC after training: 0.7741935483870968
User 70441 does not improve AUC. Reverting changes.
Training on augumented user 108338 21/50 current_auc = 0.7741935483870968
User 108338 AUC after training: 0.7741935483870968
User 108338 does not improve AUC. Reverting changes.
Training on augumented user 117511 22/50 current_auc = 0.7741935483870968
User 117511 AUC after training: 0.771712158808933
User 117511 does not improve AUC. Reverting changes.
Training on augumented user 28482 23/50 current_auc = 0.7741935483870968
User 28482 AUC after training: 0.771712158808933
User 28482 does not improve AUC. Reverting changes.
Training on augumented user 54518 24/50 current_auc = 0.7741935483870968
User 54518 AUC after training: 0.7717121588089331
User 54518 does not improve AUC. Reverting changes.
Training on augumented user 134781 25/50 current_auc = 0.7741935483870968
User 134781 AUC after training: 0.771712158808933
User 134781 does not improve AUC. Reverting changes.
Training on augumented user 34803 26/50 current_auc = 0.7741935483870968
User 34803 AUC after training: 0.7717121588089331
User 34803 does not improve AUC. Reverting changes.
Training on augumented user 73146 27/50 current_auc = 0.7741935483870968
User 73146 AUC after training: 0.7741935483870968
User 73146 does not improve AUC. Reverting changes.
Training on augumented user 5098 28/50 current_auc = 0.7741935483870968
User 5098 AUC after training: 0.7741935483870968
User 5098 does not improve AUC. Reverting changes.
Training on augumented user 346 29/50 current_auc = 0.7741935483870968
User 346 AUC after training: 0.7717121588089331
User 346 does not improve AUC. Reverting changes.
Training on augumented user 132911 30/50 current_auc = 0.7741935483870968
User 132911 AUC after training: 0.7741935483870968
User 132911 does not improve AUC. Reverting changes.
Training on augumented user 137757 31/50 current_auc = 0.7741935483870968
User 137757 AUC after training: 0.7692307692307692
User 137757 does not improve AUC. Reverting changes.
Training on augumented user 82551 32/50 current_auc = 0.7741935483870968
User 82551 AUC after training: 0.7692307692307692
User 82551 does not improve AUC. Reverting changes.
Training on augumented user 15523 33/50 current_auc = 0.7741935483870968
User 15523 AUC after training: 0.7741935483870968
User 15523 does not improve AUC. Reverting changes.
Training on augumented user 13088 34/50 current_auc = 0.7741935483870968
User 13088 AUC after training: 0.7717121588089331
User 13088 does not improve AUC. Reverting changes.
Training on augumented user 82542 35/50 current_auc = 0.7741935483870968
User 82542 AUC after training: 0.7717121588089331
User 82542 does not improve AUC. Reverting changes.
Training on augumented user 87273 36/50 current_auc = 0.7741935483870968
User 87273 AUC after training: 0.7717121588089331
User 87273 does not improve AUC. Reverting changes.
Training on augumented user 25576 37/50 current_auc = 0.7741935483870968
User 25576 AUC after training: 0.7741935483870968
User 25576 does not improve AUC. Reverting changes.
Training on augumented user 133288 38/50 current_auc = 0.7741935483870968
User 133288 AUC after training: 0.7692307692307692
User 133288 does not improve AUC. Reverting changes.
Training on augumented user 121649 39/50 current_auc = 0.7741935483870968
User 121649 AUC after training: 0.771712158808933
User 121649 does not improve AUC. Reverting changes.
Training on augumented user 36083 40/50 current_auc = 0.7741935483870968
User 36083 AUC after training: 0.771712158808933
User 36083 does not improve AUC. Reverting changes.
Training on augumented user 116000 41/50 current_auc = 0.7741935483870968
User 116000 AUC after training: 0.7741935483870968
User 116000 does not improve AUC. Reverting changes.
Training on augumented user 36979 42/50 current_auc = 0.7741935483870968
User 36979 AUC after training: 0.7717121588089331
User 36979 does not improve AUC. Reverting changes.
Training on augumented user 38241 43/50 current_auc = 0.7741935483870968
User 38241 AUC after training: 0.7766749379652605
User 38241 improves AUC. Keeping the model.
Training on augumented user 70522 44/50 current_auc = 0.7766749379652605
User 70522 AUC after training: 0.7741935483870968
User 70522 does not improve AUC. Reverting changes.
Training on augumented user 106630 45/50 current_auc = 0.7766749379652605
User 106630 AUC after training: 0.7741935483870968
User 106630 does not improve AUC. Reverting changes.
Training on augumented user 98370 46/50 current_auc = 0.7766749379652605
User 98370 AUC after training: 0.7692307692307692
User 98370 does not improve AUC. Reverting changes.
Training on augumented user 118869 47/50 current_auc = 0.7766749379652605
User 118869 AUC after training: 0.7766749379652605
User 118869 does not improve AUC. Reverting changes.
Training on augumented user 39889 48/50 current_auc = 0.7766749379652605
User 39889 AUC after training: 0.7741935483870968
User 39889 does not improve AUC. Reverting changes.
Training on augumented user 77724 49/50 current_auc = 0.7766749379652605
User 77724 AUC after training: 0.7766749379652605
User 77724 does not improve AUC. Reverting changes.
[2024-12-02 17:49:30.422433] start test user 470 20/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:49:31.395491] start test user 470 20/568 recall augumented users by random, augumented_users = [129082, 109643, 92862, 76138, 74799, 16948, 87340, 71413, 79363, 36146, 54386, 104199, 123770, 26792, 109859, 76472, 71485, 53055, 46867, 13419, 2386, 20583, 20358, 23786, 129890, 88854, 64367, 102610, 81727, 8118, 69560, 88206, 16509, 89059, 60814, 130060, 114758, 39159, 104912, 10826, 130712, 56340, 123360, 295, 123980, 120267, 88287, 60579, 43105, 56180]
[2024-12-02 17:49:31.431587] user = 470 Cloud 20/568
[2024-12-02 17:49:31.477019] user = 470 Local 20/568
[2024-12-02 17:49:31.509198] user = 470 Local+ 20/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:49:34.736413] user = 470 MPDA- 20/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 129082 0/50 current_auc = 1.0
User 129082 AUC after training: 1.0
User 129082 does not improve AUC. Reverting changes.
Training on augumented user 109643 1/50 current_auc = 1.0
User 109643 AUC after training: 1.0
User 109643 does not improve AUC. Reverting changes.
Training on augumented user 92862 2/50 current_auc = 1.0
User 92862 AUC after training: 1.0
User 92862 does not improve AUC. Reverting changes.
Training on augumented user 76138 3/50 current_auc = 1.0
User 76138 AUC after training: 1.0
User 76138 does not improve AUC. Reverting changes.
Training on augumented user 74799 4/50 current_auc = 1.0
User 74799 AUC after training: 1.0
User 74799 does not improve AUC. Reverting changes.
Training on augumented user 16948 5/50 current_auc = 1.0
User 16948 AUC after training: 1.0
User 16948 does not improve AUC. Reverting changes.
Training on augumented user 87340 6/50 current_auc = 1.0
User 87340 AUC after training: 1.0
User 87340 does not improve AUC. Reverting changes.
Training on augumented user 71413 7/50 current_auc = 1.0
User 71413 AUC after training: 1.0
User 71413 does not improve AUC. Reverting changes.
Training on augumented user 79363 8/50 current_auc = 1.0
User 79363 AUC after training: 1.0
User 79363 does not improve AUC. Reverting changes.
Training on augumented user 36146 9/50 current_auc = 1.0
User 36146 AUC after training: 1.0
User 36146 does not improve AUC. Reverting changes.
Training on augumented user 54386 10/50 current_auc = 1.0
User 54386 AUC after training: 1.0
User 54386 does not improve AUC. Reverting changes.
Training on augumented user 104199 11/50 current_auc = 1.0
User 104199 AUC after training: 1.0
User 104199 does not improve AUC. Reverting changes.
Training on augumented user 123770 12/50 current_auc = 1.0
User 123770 AUC after training: 1.0
User 123770 does not improve AUC. Reverting changes.
Training on augumented user 26792 13/50 current_auc = 1.0
User 26792 AUC after training: 1.0
User 26792 does not improve AUC. Reverting changes.
Training on augumented user 109859 14/50 current_auc = 1.0
User 109859 AUC after training: 1.0
User 109859 does not improve AUC. Reverting changes.
Training on augumented user 76472 15/50 current_auc = 1.0
User 76472 AUC after training: 1.0
User 76472 does not improve AUC. Reverting changes.
Training on augumented user 71485 16/50 current_auc = 1.0
User 71485 AUC after training: 1.0
User 71485 does not improve AUC. Reverting changes.
Training on augumented user 53055 17/50 current_auc = 1.0
User 53055 AUC after training: 1.0
User 53055 does not improve AUC. Reverting changes.
Training on augumented user 46867 18/50 current_auc = 1.0
User 46867 AUC after training: 1.0
User 46867 does not improve AUC. Reverting changes.
Training on augumented user 13419 19/50 current_auc = 1.0
User 13419 AUC after training: 1.0
User 13419 does not improve AUC. Reverting changes.
Training on augumented user 2386 20/50 current_auc = 1.0
User 2386 AUC after training: 1.0
User 2386 does not improve AUC. Reverting changes.
Training on augumented user 20583 21/50 current_auc = 1.0
User 20583 AUC after training: 1.0
User 20583 does not improve AUC. Reverting changes.
Training on augumented user 20358 22/50 current_auc = 1.0
User 20358 AUC after training: 1.0
User 20358 does not improve AUC. Reverting changes.
Training on augumented user 23786 23/50 current_auc = 1.0
User 23786 AUC after training: 1.0
User 23786 does not improve AUC. Reverting changes.
Training on augumented user 129890 24/50 current_auc = 1.0
User 129890 AUC after training: 1.0
User 129890 does not improve AUC. Reverting changes.
Training on augumented user 88854 25/50 current_auc = 1.0
User 88854 AUC after training: 1.0
User 88854 does not improve AUC. Reverting changes.
Training on augumented user 64367 26/50 current_auc = 1.0
User 64367 AUC after training: 1.0
User 64367 does not improve AUC. Reverting changes.
Training on augumented user 102610 27/50 current_auc = 1.0
User 102610 AUC after training: 1.0
User 102610 does not improve AUC. Reverting changes.
Training on augumented user 81727 28/50 current_auc = 1.0
User 81727 AUC after training: 1.0
User 81727 does not improve AUC. Reverting changes.
Training on augumented user 8118 29/50 current_auc = 1.0
User 8118 AUC after training: 1.0
User 8118 does not improve AUC. Reverting changes.
Training on augumented user 69560 30/50 current_auc = 1.0
User 69560 AUC after training: 1.0
User 69560 does not improve AUC. Reverting changes.
Training on augumented user 88206 31/50 current_auc = 1.0
User 88206 AUC after training: 1.0
User 88206 does not improve AUC. Reverting changes.
Training on augumented user 16509 32/50 current_auc = 1.0
User 16509 AUC after training: 1.0
User 16509 does not improve AUC. Reverting changes.
Training on augumented user 89059 33/50 current_auc = 1.0
User 89059 AUC after training: 1.0
User 89059 does not improve AUC. Reverting changes.
Training on augumented user 60814 34/50 current_auc = 1.0
User 60814 AUC after training: 1.0
User 60814 does not improve AUC. Reverting changes.
Training on augumented user 130060 35/50 current_auc = 1.0
User 130060 AUC after training: 1.0
User 130060 does not improve AUC. Reverting changes.
Training on augumented user 114758 36/50 current_auc = 1.0
User 114758 AUC after training: 1.0
User 114758 does not improve AUC. Reverting changes.
Training on augumented user 39159 37/50 current_auc = 1.0
User 39159 AUC after training: 1.0
User 39159 does not improve AUC. Reverting changes.
Training on augumented user 104912 38/50 current_auc = 1.0
User 104912 AUC after training: 1.0
User 104912 does not improve AUC. Reverting changes.
Training on augumented user 10826 39/50 current_auc = 1.0
User 10826 AUC after training: 1.0
User 10826 does not improve AUC. Reverting changes.
Training on augumented user 130712 40/50 current_auc = 1.0
User 130712 AUC after training: 1.0
User 130712 does not improve AUC. Reverting changes.
Training on augumented user 56340 41/50 current_auc = 1.0
User 56340 AUC after training: 1.0
User 56340 does not improve AUC. Reverting changes.
Training on augumented user 123360 42/50 current_auc = 1.0
User 123360 AUC after training: 1.0
User 123360 does not improve AUC. Reverting changes.
Training on augumented user 295 43/50 current_auc = 1.0
User 295 AUC after training: 1.0
User 295 does not improve AUC. Reverting changes.
Training on augumented user 123980 44/50 current_auc = 1.0
User 123980 AUC after training: 1.0
User 123980 does not improve AUC. Reverting changes.
Training on augumented user 120267 45/50 current_auc = 1.0
User 120267 AUC after training: 0.5
User 120267 does not improve AUC. Reverting changes.
Training on augumented user 88287 46/50 current_auc = 1.0
User 88287 AUC after training: 1.0
User 88287 does not improve AUC. Reverting changes.
Training on augumented user 60579 47/50 current_auc = 1.0
User 60579 AUC after training: 1.0
User 60579 does not improve AUC. Reverting changes.
Training on augumented user 43105 48/50 current_auc = 1.0
User 43105 AUC after training: 1.0
User 43105 does not improve AUC. Reverting changes.
Training on augumented user 56180 49/50 current_auc = 1.0
User 56180 AUC after training: 1.0
User 56180 does not improve AUC. Reverting changes.
[2024-12-02 17:50:07.140212] start test user 471 21/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:50:07.553374] start test user 471 21/568 recall augumented users by random, augumented_users = [7769, 131868, 138026, 132520, 86237, 123220, 14329, 3108, 7099, 44217, 41537, 116542, 46864, 39347, 10079, 96212, 16751, 43760, 52898, 131505, 47549, 125752, 130366, 23066, 89044, 9604, 96849, 83923, 268, 6414, 67756, 1390, 97135, 103478, 70908, 7034, 4, 37313, 135818, 96986, 122616, 96501, 103204, 123511, 129238, 83293, 123499, 115862, 14260, 17547]
[2024-12-02 17:50:07.569566] user = 471 Cloud 21/568
[2024-12-02 17:50:07.581385] user = 471 Local 21/568
[2024-12-02 17:50:07.788038] user = 471 Local+ 21/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:50:10.440964] user = 471 MPDA- 21/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5185185185185186
Training on augumented user 7769 0/50 current_auc = 0.5185185185185186
User 7769 AUC after training: 0.5148148148148148
User 7769 does not improve AUC. Reverting changes.
Training on augumented user 131868 1/50 current_auc = 0.5185185185185186
User 131868 AUC after training: 0.5185185185185186
User 131868 does not improve AUC. Reverting changes.
Training on augumented user 138026 2/50 current_auc = 0.5185185185185186
User 138026 AUC after training: 0.5185185185185186
User 138026 does not improve AUC. Reverting changes.
Training on augumented user 132520 3/50 current_auc = 0.5185185185185186
User 132520 AUC after training: 0.5185185185185186
User 132520 does not improve AUC. Reverting changes.
Training on augumented user 86237 4/50 current_auc = 0.5185185185185186
User 86237 AUC after training: 0.5148148148148148
User 86237 does not improve AUC. Reverting changes.
Training on augumented user 123220 5/50 current_auc = 0.5185185185185186
User 123220 AUC after training: 0.5185185185185186
User 123220 does not improve AUC. Reverting changes.
Training on augumented user 14329 6/50 current_auc = 0.5185185185185186
User 14329 AUC after training: 0.5185185185185186
User 14329 does not improve AUC. Reverting changes.
Training on augumented user 3108 7/50 current_auc = 0.5185185185185186
User 3108 AUC after training: 0.5148148148148148
User 3108 does not improve AUC. Reverting changes.
Training on augumented user 7099 8/50 current_auc = 0.5185185185185186
User 7099 AUC after training: 0.5185185185185186
User 7099 does not improve AUC. Reverting changes.
Training on augumented user 44217 9/50 current_auc = 0.5185185185185186
User 44217 AUC after training: 0.5185185185185186
User 44217 does not improve AUC. Reverting changes.
Training on augumented user 41537 10/50 current_auc = 0.5185185185185186
User 41537 AUC after training: 0.5148148148148148
User 41537 does not improve AUC. Reverting changes.
Training on augumented user 116542 11/50 current_auc = 0.5185185185185186
User 116542 AUC after training: 0.5185185185185186
User 116542 does not improve AUC. Reverting changes.
Training on augumented user 46864 12/50 current_auc = 0.5185185185185186
User 46864 AUC after training: 0.5185185185185186
User 46864 does not improve AUC. Reverting changes.
Training on augumented user 39347 13/50 current_auc = 0.5185185185185186
User 39347 AUC after training: 0.5185185185185186
User 39347 does not improve AUC. Reverting changes.
Training on augumented user 10079 14/50 current_auc = 0.5185185185185186
User 10079 AUC after training: 0.5185185185185186
User 10079 does not improve AUC. Reverting changes.
Training on augumented user 96212 15/50 current_auc = 0.5185185185185186
User 96212 AUC after training: 0.5185185185185186
User 96212 does not improve AUC. Reverting changes.
Training on augumented user 16751 16/50 current_auc = 0.5185185185185186
User 16751 AUC after training: 0.5148148148148148
User 16751 does not improve AUC. Reverting changes.
Training on augumented user 43760 17/50 current_auc = 0.5185185185185186
User 43760 AUC after training: 0.5185185185185186
User 43760 does not improve AUC. Reverting changes.
Training on augumented user 52898 18/50 current_auc = 0.5185185185185186
User 52898 AUC after training: 0.5259259259259259
User 52898 improves AUC. Keeping the model.
Training on augumented user 131505 19/50 current_auc = 0.5259259259259259
User 131505 AUC after training: 0.5222222222222223
User 131505 does not improve AUC. Reverting changes.
Training on augumented user 47549 20/50 current_auc = 0.5259259259259259
User 47549 AUC after training: 0.5259259259259259
User 47549 does not improve AUC. Reverting changes.
Training on augumented user 125752 21/50 current_auc = 0.5259259259259259
User 125752 AUC after training: 0.5185185185185186
User 125752 does not improve AUC. Reverting changes.
Training on augumented user 130366 22/50 current_auc = 0.5259259259259259
User 130366 AUC after training: 0.5185185185185186
User 130366 does not improve AUC. Reverting changes.
Training on augumented user 23066 23/50 current_auc = 0.5259259259259259
User 23066 AUC after training: 0.5222222222222223
User 23066 does not improve AUC. Reverting changes.
Training on augumented user 89044 24/50 current_auc = 0.5259259259259259
User 89044 AUC after training: 0.5222222222222223
User 89044 does not improve AUC. Reverting changes.
Training on augumented user 9604 25/50 current_auc = 0.5259259259259259
User 9604 AUC after training: 0.5259259259259259
User 9604 does not improve AUC. Reverting changes.
Training on augumented user 96849 26/50 current_auc = 0.5259259259259259
User 96849 AUC after training: 0.5259259259259259
User 96849 does not improve AUC. Reverting changes.
Training on augumented user 83923 27/50 current_auc = 0.5259259259259259
User 83923 AUC after training: 0.5296296296296297
User 83923 improves AUC. Keeping the model.
Training on augumented user 268 28/50 current_auc = 0.5296296296296297
User 268 AUC after training: 0.5259259259259259
User 268 does not improve AUC. Reverting changes.
Training on augumented user 6414 29/50 current_auc = 0.5296296296296297
User 6414 AUC after training: 0.5259259259259259
User 6414 does not improve AUC. Reverting changes.
Training on augumented user 67756 30/50 current_auc = 0.5296296296296297
User 67756 AUC after training: 0.5222222222222223
User 67756 does not improve AUC. Reverting changes.
Training on augumented user 1390 31/50 current_auc = 0.5296296296296297
User 1390 AUC after training: 0.5296296296296297
User 1390 does not improve AUC. Reverting changes.
Training on augumented user 97135 32/50 current_auc = 0.5296296296296297
User 97135 AUC after training: 0.5259259259259259
User 97135 does not improve AUC. Reverting changes.
Training on augumented user 103478 33/50 current_auc = 0.5296296296296297
User 103478 AUC after training: 0.5222222222222221
User 103478 does not improve AUC. Reverting changes.
Training on augumented user 70908 34/50 current_auc = 0.5296296296296297
User 70908 AUC after training: 0.5222222222222223
User 70908 does not improve AUC. Reverting changes.
Training on augumented user 7034 35/50 current_auc = 0.5296296296296297
User 7034 AUC after training: 0.5296296296296297
User 7034 does not improve AUC. Reverting changes.
Training on augumented user 4 36/50 current_auc = 0.5296296296296297
User 4 AUC after training: 0.5296296296296297
User 4 does not improve AUC. Reverting changes.
Training on augumented user 37313 37/50 current_auc = 0.5296296296296297
User 37313 AUC after training: 0.5296296296296297
User 37313 does not improve AUC. Reverting changes.
Training on augumented user 135818 38/50 current_auc = 0.5296296296296297
User 135818 AUC after training: 0.5296296296296297
User 135818 does not improve AUC. Reverting changes.
Training on augumented user 96986 39/50 current_auc = 0.5296296296296297
User 96986 AUC after training: 0.5222222222222223
User 96986 does not improve AUC. Reverting changes.
Training on augumented user 122616 40/50 current_auc = 0.5296296296296297
User 122616 AUC after training: 0.5296296296296297
User 122616 does not improve AUC. Reverting changes.
Training on augumented user 96501 41/50 current_auc = 0.5296296296296297
User 96501 AUC after training: 0.5296296296296297
User 96501 does not improve AUC. Reverting changes.
Training on augumented user 103204 42/50 current_auc = 0.5296296296296297
User 103204 AUC after training: 0.5259259259259259
User 103204 does not improve AUC. Reverting changes.
Training on augumented user 123511 43/50 current_auc = 0.5296296296296297
User 123511 AUC after training: 0.5296296296296297
User 123511 does not improve AUC. Reverting changes.
Training on augumented user 129238 44/50 current_auc = 0.5296296296296297
User 129238 AUC after training: 0.5296296296296297
User 129238 does not improve AUC. Reverting changes.
Training on augumented user 83293 45/50 current_auc = 0.5296296296296297
User 83293 AUC after training: 0.5222222222222223
User 83293 does not improve AUC. Reverting changes.
Training on augumented user 123499 46/50 current_auc = 0.5296296296296297
User 123499 AUC after training: 0.5296296296296297
User 123499 does not improve AUC. Reverting changes.
Training on augumented user 115862 47/50 current_auc = 0.5296296296296297
User 115862 AUC after training: 0.5259259259259259
User 115862 does not improve AUC. Reverting changes.
Training on augumented user 14260 48/50 current_auc = 0.5296296296296297
User 14260 AUC after training: 0.5259259259259259
User 14260 does not improve AUC. Reverting changes.
Training on augumented user 17547 49/50 current_auc = 0.5296296296296297
User 17547 AUC after training: 0.5296296296296297
User 17547 does not improve AUC. Reverting changes.
[2024-12-02 17:50:38.353526] start test user 520 22/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:50:38.949444] start test user 520 22/568 recall augumented users by random, augumented_users = [70236, 13605, 111768, 47575, 97781, 26483, 91104, 120261, 103853, 135730, 29130, 100312, 39745, 18887, 12242, 34244, 9555, 90894, 30217, 119093, 5394, 131015, 35344, 39627, 138198, 35485, 67740, 81865, 96438, 42221, 127048, 53681, 117351, 61518, 91364, 61117, 102132, 54946, 41599, 53508, 11519, 134530, 62434, 93778, 73962, 94727, 8369, 18469, 26279, 73090]
[2024-12-02 17:50:38.965370] user = 520 Cloud 22/568
[2024-12-02 17:50:39.020542] user = 520 Local 22/568
[2024-12-02 17:50:39.132020] user = 520 Local+ 22/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:50:41.109797] user = 520 MPDA- 22/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.531832298136646
Training on augumented user 70236 0/50 current_auc = 0.531832298136646
User 70236 AUC after training: 0.5333850931677019
User 70236 improves AUC. Keeping the model.
Training on augumented user 13605 1/50 current_auc = 0.5333850931677019
User 13605 AUC after training: 0.5338703416149069
User 13605 improves AUC. Keeping the model.
Training on augumented user 111768 2/50 current_auc = 0.5338703416149069
User 111768 AUC after training: 0.532123447204969
User 111768 does not improve AUC. Reverting changes.
Training on augumented user 47575 3/50 current_auc = 0.5338703416149069
User 47575 AUC after training: 0.5330939440993789
User 47575 does not improve AUC. Reverting changes.
Training on augumented user 97781 4/50 current_auc = 0.5338703416149069
User 97781 AUC after training: 0.5337732919254659
User 97781 does not improve AUC. Reverting changes.
Training on augumented user 26483 5/50 current_auc = 0.5338703416149069
User 26483 AUC after training: 0.5335791925465838
User 26483 does not improve AUC. Reverting changes.
Training on augumented user 91104 6/50 current_auc = 0.5338703416149069
User 91104 AUC after training: 0.5333850931677019
User 91104 does not improve AUC. Reverting changes.
Training on augumented user 120261 7/50 current_auc = 0.5338703416149069
User 120261 AUC after training: 0.5337732919254659
User 120261 does not improve AUC. Reverting changes.
Training on augumented user 103853 8/50 current_auc = 0.5338703416149069
User 103853 AUC after training: 0.5330939440993789
User 103853 does not improve AUC. Reverting changes.
Training on augumented user 135730 9/50 current_auc = 0.5338703416149069
User 135730 AUC after training: 0.5328027950310559
User 135730 does not improve AUC. Reverting changes.
Training on augumented user 29130 10/50 current_auc = 0.5338703416149069
User 29130 AUC after training: 0.5327057453416149
User 29130 does not improve AUC. Reverting changes.
Training on augumented user 100312 11/50 current_auc = 0.5338703416149069
User 100312 AUC after training: 0.5324145962732919
User 100312 does not improve AUC. Reverting changes.
Training on augumented user 39745 12/50 current_auc = 0.5338703416149069
User 39745 AUC after training: 0.5344526397515528
User 39745 improves AUC. Keeping the model.
Training on augumented user 18887 13/50 current_auc = 0.5344526397515528
User 18887 AUC after training: 0.5335791925465838
User 18887 does not improve AUC. Reverting changes.
Training on augumented user 12242 14/50 current_auc = 0.5344526397515528
User 12242 AUC after training: 0.5340644409937888
User 12242 does not improve AUC. Reverting changes.
Training on augumented user 34244 15/50 current_auc = 0.5344526397515528
User 34244 AUC after training: 0.5332880434782609
User 34244 does not improve AUC. Reverting changes.
Training on augumented user 9555 16/50 current_auc = 0.5344526397515528
User 9555 AUC after training: 0.5346467391304348
User 9555 improves AUC. Keeping the model.
Training on augumented user 90894 17/50 current_auc = 0.5346467391304348
User 90894 AUC after training: 0.5348408385093169
User 90894 improves AUC. Keeping the model.
Training on augumented user 30217 18/50 current_auc = 0.5348408385093169
User 30217 AUC after training: 0.5333850931677018
User 30217 does not improve AUC. Reverting changes.
Training on augumented user 119093 19/50 current_auc = 0.5348408385093169
User 119093 AUC after training: 0.5354231366459627
User 119093 improves AUC. Keeping the model.
Training on augumented user 5394 20/50 current_auc = 0.5354231366459627
User 5394 AUC after training: 0.5334821428571428
User 5394 does not improve AUC. Reverting changes.
Training on augumented user 131015 21/50 current_auc = 0.5354231366459627
User 131015 AUC after training: 0.5349378881987578
User 131015 does not improve AUC. Reverting changes.
Training on augumented user 35344 22/50 current_auc = 0.5354231366459627
User 35344 AUC after training: 0.5342585403726707
User 35344 does not improve AUC. Reverting changes.
Training on augumented user 39627 23/50 current_auc = 0.5354231366459627
User 39627 AUC after training: 0.5353260869565217
User 39627 does not improve AUC. Reverting changes.
Training on augumented user 138198 24/50 current_auc = 0.5354231366459627
User 138198 AUC after training: 0.5353260869565217
User 138198 does not improve AUC. Reverting changes.
Training on augumented user 35485 25/50 current_auc = 0.5354231366459627
User 35485 AUC after training: 0.5345496894409938
User 35485 does not improve AUC. Reverting changes.
Training on augumented user 67740 26/50 current_auc = 0.5354231366459627
User 67740 AUC after training: 0.5345496894409938
User 67740 does not improve AUC. Reverting changes.
Training on augumented user 81865 27/50 current_auc = 0.5354231366459627
User 81865 AUC after training: 0.5344526397515528
User 81865 does not improve AUC. Reverting changes.
Training on augumented user 96438 28/50 current_auc = 0.5354231366459627
User 96438 AUC after training: 0.531735248447205
User 96438 does not improve AUC. Reverting changes.
Training on augumented user 42221 29/50 current_auc = 0.5354231366459627
User 42221 AUC after training: 0.5355201863354038
User 42221 improves AUC. Keeping the model.
Training on augumented user 127048 30/50 current_auc = 0.5355201863354038
User 127048 AUC after training: 0.5350349378881988
User 127048 does not improve AUC. Reverting changes.
Training on augumented user 53681 31/50 current_auc = 0.5355201863354038
User 53681 AUC after training: 0.5354231366459627
User 53681 does not improve AUC. Reverting changes.
Training on augumented user 117351 32/50 current_auc = 0.5355201863354038
User 117351 AUC after training: 0.5349378881987576
User 117351 does not improve AUC. Reverting changes.
Training on augumented user 61518 33/50 current_auc = 0.5355201863354038
User 61518 AUC after training: 0.5339673913043479
User 61518 does not improve AUC. Reverting changes.
Training on augumented user 91364 34/50 current_auc = 0.5355201863354038
User 91364 AUC after training: 0.5345496894409938
User 91364 does not improve AUC. Reverting changes.
Training on augumented user 61117 35/50 current_auc = 0.5355201863354038
User 61117 AUC after training: 0.5347437888198758
User 61117 does not improve AUC. Reverting changes.
Training on augumented user 102132 36/50 current_auc = 0.5355201863354038
User 102132 AUC after training: 0.5370729813664596
User 102132 improves AUC. Keeping the model.
Training on augumented user 54946 37/50 current_auc = 0.5370729813664596
User 54946 AUC after training: 0.5360054347826086
User 54946 does not improve AUC. Reverting changes.
Training on augumented user 41599 38/50 current_auc = 0.5370729813664596
User 41599 AUC after training: 0.5362965838509317
User 41599 does not improve AUC. Reverting changes.
Training on augumented user 53508 39/50 current_auc = 0.5370729813664596
User 53508 AUC after training: 0.5368788819875776
User 53508 does not improve AUC. Reverting changes.
Training on augumented user 11519 40/50 current_auc = 0.5370729813664596
User 11519 AUC after training: 0.5371700310559007
User 11519 improves AUC. Keeping the model.
Training on augumented user 134530 41/50 current_auc = 0.5371700310559007
User 134530 AUC after training: 0.5380434782608696
User 134530 improves AUC. Keeping the model.
Training on augumented user 62434 42/50 current_auc = 0.5380434782608696
User 62434 AUC after training: 0.5377523291925466
User 62434 does not improve AUC. Reverting changes.
Training on augumented user 93778 43/50 current_auc = 0.5380434782608696
User 93778 AUC after training: 0.5385287267080745
User 93778 improves AUC. Keeping the model.
Training on augumented user 73962 44/50 current_auc = 0.5385287267080745
User 73962 AUC after training: 0.5381405279503106
User 73962 does not improve AUC. Reverting changes.
Training on augumented user 94727 45/50 current_auc = 0.5385287267080745
User 94727 AUC after training: 0.5377523291925466
User 94727 does not improve AUC. Reverting changes.
Training on augumented user 8369 46/50 current_auc = 0.5385287267080745
User 8369 AUC after training: 0.5390139751552795
User 8369 improves AUC. Keeping the model.
Training on augumented user 18469 47/50 current_auc = 0.5390139751552795
User 18469 AUC after training: 0.5389169254658386
User 18469 does not improve AUC. Reverting changes.
Training on augumented user 26279 48/50 current_auc = 0.5390139751552795
User 26279 AUC after training: 0.5374611801242235
User 26279 does not improve AUC. Reverting changes.
Training on augumented user 73090 49/50 current_auc = 0.5390139751552795
User 73090 AUC after training: 0.5382375776397517
User 73090 does not improve AUC. Reverting changes.
[2024-12-02 17:51:11.640714] start test user 575 23/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:51:12.063884] start test user 575 23/568 recall augumented users by random, augumented_users = [94353, 73878, 100982, 55751, 126185, 75202, 107576, 57621, 65304, 115253, 55744, 117234, 43222, 24135, 64848, 89920, 105911, 130965, 109913, 14672, 128920, 97037, 21748, 50610, 7753, 18467, 104396, 99781, 74524, 101815, 123143, 134123, 107570, 5311, 44659, 19048, 116642, 44429, 64884, 79355, 109929, 47806, 118627, 88064, 14604, 38211, 126257, 84484, 13185, 21966]
[2024-12-02 17:51:12.079582] user = 575 Cloud 23/568
[2024-12-02 17:51:12.099969] user = 575 Local 23/568
[2024-12-02 17:51:12.137655] user = 575 Local+ 23/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:51:14.688143] user = 575 MPDA- 23/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.2685185185185185
Training on augumented user 94353 0/50 current_auc = 0.2685185185185185
User 94353 AUC after training: 0.2685185185185185
User 94353 does not improve AUC. Reverting changes.
Training on augumented user 73878 1/50 current_auc = 0.2685185185185185
User 73878 AUC after training: 0.25925925925925924
User 73878 does not improve AUC. Reverting changes.
Training on augumented user 100982 2/50 current_auc = 0.2685185185185185
User 100982 AUC after training: 0.2685185185185185
User 100982 does not improve AUC. Reverting changes.
Training on augumented user 55751 3/50 current_auc = 0.2685185185185185
User 55751 AUC after training: 0.2685185185185185
User 55751 does not improve AUC. Reverting changes.
Training on augumented user 126185 4/50 current_auc = 0.2685185185185185
User 126185 AUC after training: 0.2685185185185185
User 126185 does not improve AUC. Reverting changes.
Training on augumented user 75202 5/50 current_auc = 0.2685185185185185
User 75202 AUC after training: 0.2685185185185185
User 75202 does not improve AUC. Reverting changes.
Training on augumented user 107576 6/50 current_auc = 0.2685185185185185
User 107576 AUC after training: 0.25925925925925924
User 107576 does not improve AUC. Reverting changes.
Training on augumented user 57621 7/50 current_auc = 0.2685185185185185
User 57621 AUC after training: 0.25925925925925924
User 57621 does not improve AUC. Reverting changes.
Training on augumented user 65304 8/50 current_auc = 0.2685185185185185
User 65304 AUC after training: 0.2777777777777778
User 65304 improves AUC. Keeping the model.
Training on augumented user 115253 9/50 current_auc = 0.2777777777777778
User 115253 AUC after training: 0.2777777777777778
User 115253 does not improve AUC. Reverting changes.
Training on augumented user 55744 10/50 current_auc = 0.2777777777777778
User 55744 AUC after training: 0.2777777777777778
User 55744 does not improve AUC. Reverting changes.
Training on augumented user 117234 11/50 current_auc = 0.2777777777777778
User 117234 AUC after training: 0.2777777777777778
User 117234 does not improve AUC. Reverting changes.
Training on augumented user 43222 12/50 current_auc = 0.2777777777777778
User 43222 AUC after training: 0.28703703703703703
User 43222 improves AUC. Keeping the model.
Training on augumented user 24135 13/50 current_auc = 0.28703703703703703
User 24135 AUC after training: 0.2777777777777778
User 24135 does not improve AUC. Reverting changes.
Training on augumented user 64848 14/50 current_auc = 0.28703703703703703
User 64848 AUC after training: 0.27777777777777773
User 64848 does not improve AUC. Reverting changes.
Training on augumented user 89920 15/50 current_auc = 0.28703703703703703
User 89920 AUC after training: 0.2777777777777778
User 89920 does not improve AUC. Reverting changes.
Training on augumented user 105911 16/50 current_auc = 0.28703703703703703
User 105911 AUC after training: 0.28703703703703703
User 105911 does not improve AUC. Reverting changes.
Training on augumented user 130965 17/50 current_auc = 0.28703703703703703
User 130965 AUC after training: 0.2777777777777778
User 130965 does not improve AUC. Reverting changes.
Training on augumented user 109913 18/50 current_auc = 0.28703703703703703
User 109913 AUC after training: 0.28703703703703703
User 109913 does not improve AUC. Reverting changes.
Training on augumented user 14672 19/50 current_auc = 0.28703703703703703
User 14672 AUC after training: 0.2777777777777778
User 14672 does not improve AUC. Reverting changes.
Training on augumented user 128920 20/50 current_auc = 0.28703703703703703
User 128920 AUC after training: 0.2777777777777778
User 128920 does not improve AUC. Reverting changes.
Training on augumented user 97037 21/50 current_auc = 0.28703703703703703
User 97037 AUC after training: 0.27777777777777773
User 97037 does not improve AUC. Reverting changes.
Training on augumented user 21748 22/50 current_auc = 0.28703703703703703
User 21748 AUC after training: 0.27777777777777773
User 21748 does not improve AUC. Reverting changes.
Training on augumented user 50610 23/50 current_auc = 0.28703703703703703
User 50610 AUC after training: 0.27777777777777773
User 50610 does not improve AUC. Reverting changes.
Training on augumented user 7753 24/50 current_auc = 0.28703703703703703
User 7753 AUC after training: 0.2777777777777778
User 7753 does not improve AUC. Reverting changes.
Training on augumented user 18467 25/50 current_auc = 0.28703703703703703
User 18467 AUC after training: 0.27777777777777773
User 18467 does not improve AUC. Reverting changes.
Training on augumented user 104396 26/50 current_auc = 0.28703703703703703
User 104396 AUC after training: 0.27777777777777773
User 104396 does not improve AUC. Reverting changes.
Training on augumented user 99781 27/50 current_auc = 0.28703703703703703
User 99781 AUC after training: 0.26851851851851855
User 99781 does not improve AUC. Reverting changes.
Training on augumented user 74524 28/50 current_auc = 0.28703703703703703
User 74524 AUC after training: 0.2777777777777778
User 74524 does not improve AUC. Reverting changes.
Training on augumented user 101815 29/50 current_auc = 0.28703703703703703
User 101815 AUC after training: 0.2685185185185185
User 101815 does not improve AUC. Reverting changes.
Training on augumented user 123143 30/50 current_auc = 0.28703703703703703
User 123143 AUC after training: 0.2777777777777778
User 123143 does not improve AUC. Reverting changes.
Training on augumented user 134123 31/50 current_auc = 0.28703703703703703
User 134123 AUC after training: 0.2777777777777778
User 134123 does not improve AUC. Reverting changes.
Training on augumented user 107570 32/50 current_auc = 0.28703703703703703
User 107570 AUC after training: 0.27777777777777773
User 107570 does not improve AUC. Reverting changes.
Training on augumented user 5311 33/50 current_auc = 0.28703703703703703
User 5311 AUC after training: 0.27777777777777773
User 5311 does not improve AUC. Reverting changes.
Training on augumented user 44659 34/50 current_auc = 0.28703703703703703
User 44659 AUC after training: 0.27777777777777773
User 44659 does not improve AUC. Reverting changes.
Training on augumented user 19048 35/50 current_auc = 0.28703703703703703
User 19048 AUC after training: 0.27777777777777773
User 19048 does not improve AUC. Reverting changes.
Training on augumented user 116642 36/50 current_auc = 0.28703703703703703
User 116642 AUC after training: 0.2777777777777778
User 116642 does not improve AUC. Reverting changes.
Training on augumented user 44429 37/50 current_auc = 0.28703703703703703
User 44429 AUC after training: 0.2777777777777778
User 44429 does not improve AUC. Reverting changes.
Training on augumented user 64884 38/50 current_auc = 0.28703703703703703
User 64884 AUC after training: 0.27777777777777773
User 64884 does not improve AUC. Reverting changes.
Training on augumented user 79355 39/50 current_auc = 0.28703703703703703
User 79355 AUC after training: 0.27777777777777773
User 79355 does not improve AUC. Reverting changes.
Training on augumented user 109929 40/50 current_auc = 0.28703703703703703
User 109929 AUC after training: 0.2777777777777778
User 109929 does not improve AUC. Reverting changes.
Training on augumented user 47806 41/50 current_auc = 0.28703703703703703
User 47806 AUC after training: 0.27777777777777773
User 47806 does not improve AUC. Reverting changes.
Training on augumented user 118627 42/50 current_auc = 0.28703703703703703
User 118627 AUC after training: 0.27777777777777773
User 118627 does not improve AUC. Reverting changes.
Training on augumented user 88064 43/50 current_auc = 0.28703703703703703
User 88064 AUC after training: 0.2777777777777778
User 88064 does not improve AUC. Reverting changes.
Training on augumented user 14604 44/50 current_auc = 0.28703703703703703
User 14604 AUC after training: 0.2777777777777778
User 14604 does not improve AUC. Reverting changes.
Training on augumented user 38211 45/50 current_auc = 0.28703703703703703
User 38211 AUC after training: 0.27777777777777773
User 38211 does not improve AUC. Reverting changes.
Training on augumented user 126257 46/50 current_auc = 0.28703703703703703
User 126257 AUC after training: 0.2777777777777778
User 126257 does not improve AUC. Reverting changes.
Training on augumented user 84484 47/50 current_auc = 0.28703703703703703
User 84484 AUC after training: 0.27777777777777773
User 84484 does not improve AUC. Reverting changes.
Training on augumented user 13185 48/50 current_auc = 0.28703703703703703
User 13185 AUC after training: 0.28703703703703703
User 13185 does not improve AUC. Reverting changes.
Training on augumented user 21966 49/50 current_auc = 0.28703703703703703
User 21966 AUC after training: 0.28703703703703703
User 21966 does not improve AUC. Reverting changes.
[2024-12-02 17:51:47.056536] start test user 577 24/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:51:47.495678] start test user 577 24/568 recall augumented users by random, augumented_users = [64503, 43513, 5386, 15363, 19920, 4981, 92542, 91755, 76303, 130424, 32375, 136531, 110891, 102081, 38913, 126196, 32830, 106583, 23621, 12083, 71493, 106475, 127991, 136329, 89181, 9488, 65456, 10980, 103623, 1139, 8069, 62097, 2668, 114146, 44640, 42458, 54629, 134623, 9560, 116089, 114516, 88343, 12483, 77808, 117373, 74901, 118380, 100846, 40824, 68174]
[2024-12-02 17:51:47.510908] user = 577 Cloud 24/568
[2024-12-02 17:51:47.521690] user = 577 Local 24/568
[2024-12-02 17:51:47.555935] user = 577 Local+ 24/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:51:49.473467] user = 577 MPDA- 24/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6
Training on augumented user 64503 0/50 current_auc = 0.6
User 64503 AUC after training: 0.6
User 64503 does not improve AUC. Reverting changes.
Training on augumented user 43513 1/50 current_auc = 0.6
User 43513 AUC after training: 0.55
User 43513 does not improve AUC. Reverting changes.
Training on augumented user 5386 2/50 current_auc = 0.6
User 5386 AUC after training: 0.6
User 5386 does not improve AUC. Reverting changes.
Training on augumented user 15363 3/50 current_auc = 0.6
User 15363 AUC after training: 0.55
User 15363 does not improve AUC. Reverting changes.
Training on augumented user 19920 4/50 current_auc = 0.6
User 19920 AUC after training: 0.55
User 19920 does not improve AUC. Reverting changes.
Training on augumented user 4981 5/50 current_auc = 0.6
User 4981 AUC after training: 0.55
User 4981 does not improve AUC. Reverting changes.
Training on augumented user 92542 6/50 current_auc = 0.6
User 92542 AUC after training: 0.6
User 92542 does not improve AUC. Reverting changes.
Training on augumented user 91755 7/50 current_auc = 0.6
User 91755 AUC after training: 0.6
User 91755 does not improve AUC. Reverting changes.
Training on augumented user 76303 8/50 current_auc = 0.6
User 76303 AUC after training: 0.6
User 76303 does not improve AUC. Reverting changes.
Training on augumented user 130424 9/50 current_auc = 0.6
User 130424 AUC after training: 0.55
User 130424 does not improve AUC. Reverting changes.
Training on augumented user 32375 10/50 current_auc = 0.6
User 32375 AUC after training: 0.55
User 32375 does not improve AUC. Reverting changes.
Training on augumented user 136531 11/50 current_auc = 0.6
User 136531 AUC after training: 0.6
User 136531 does not improve AUC. Reverting changes.
Training on augumented user 110891 12/50 current_auc = 0.6
User 110891 AUC after training: 0.55
User 110891 does not improve AUC. Reverting changes.
Training on augumented user 102081 13/50 current_auc = 0.6
User 102081 AUC after training: 0.6
User 102081 does not improve AUC. Reverting changes.
Training on augumented user 38913 14/50 current_auc = 0.6
User 38913 AUC after training: 0.6
User 38913 does not improve AUC. Reverting changes.
Training on augumented user 126196 15/50 current_auc = 0.6
User 126196 AUC after training: 0.55
User 126196 does not improve AUC. Reverting changes.
Training on augumented user 32830 16/50 current_auc = 0.6
User 32830 AUC after training: 0.55
User 32830 does not improve AUC. Reverting changes.
Training on augumented user 106583 17/50 current_auc = 0.6
User 106583 AUC after training: 0.6
User 106583 does not improve AUC. Reverting changes.
Training on augumented user 23621 18/50 current_auc = 0.6
User 23621 AUC after training: 0.6
User 23621 does not improve AUC. Reverting changes.
Training on augumented user 12083 19/50 current_auc = 0.6
User 12083 AUC after training: 0.55
User 12083 does not improve AUC. Reverting changes.
Training on augumented user 71493 20/50 current_auc = 0.6
User 71493 AUC after training: 0.55
User 71493 does not improve AUC. Reverting changes.
Training on augumented user 106475 21/50 current_auc = 0.6
User 106475 AUC after training: 0.6
User 106475 does not improve AUC. Reverting changes.
Training on augumented user 127991 22/50 current_auc = 0.6
User 127991 AUC after training: 0.6
User 127991 does not improve AUC. Reverting changes.
Training on augumented user 136329 23/50 current_auc = 0.6
User 136329 AUC after training: 0.55
User 136329 does not improve AUC. Reverting changes.
Training on augumented user 89181 24/50 current_auc = 0.6
User 89181 AUC after training: 0.6
User 89181 does not improve AUC. Reverting changes.
Training on augumented user 9488 25/50 current_auc = 0.6
User 9488 AUC after training: 0.55
User 9488 does not improve AUC. Reverting changes.
Training on augumented user 65456 26/50 current_auc = 0.6
User 65456 AUC after training: 0.6
User 65456 does not improve AUC. Reverting changes.
Training on augumented user 10980 27/50 current_auc = 0.6
User 10980 AUC after training: 0.55
User 10980 does not improve AUC. Reverting changes.
Training on augumented user 103623 28/50 current_auc = 0.6
User 103623 AUC after training: 0.6
User 103623 does not improve AUC. Reverting changes.
Training on augumented user 1139 29/50 current_auc = 0.6
User 1139 AUC after training: 0.6
User 1139 does not improve AUC. Reverting changes.
Training on augumented user 8069 30/50 current_auc = 0.6
User 8069 AUC after training: 0.6
User 8069 does not improve AUC. Reverting changes.
Training on augumented user 62097 31/50 current_auc = 0.6
User 62097 AUC after training: 0.55
User 62097 does not improve AUC. Reverting changes.
Training on augumented user 2668 32/50 current_auc = 0.6
User 2668 AUC after training: 0.55
User 2668 does not improve AUC. Reverting changes.
Training on augumented user 114146 33/50 current_auc = 0.6
User 114146 AUC after training: 0.55
User 114146 does not improve AUC. Reverting changes.
Training on augumented user 44640 34/50 current_auc = 0.6
User 44640 AUC after training: 0.6
User 44640 does not improve AUC. Reverting changes.
Training on augumented user 42458 35/50 current_auc = 0.6
User 42458 AUC after training: 0.55
User 42458 does not improve AUC. Reverting changes.
Training on augumented user 54629 36/50 current_auc = 0.6
User 54629 AUC after training: 0.6
User 54629 does not improve AUC. Reverting changes.
Training on augumented user 134623 37/50 current_auc = 0.6
User 134623 AUC after training: 0.55
User 134623 does not improve AUC. Reverting changes.
Training on augumented user 9560 38/50 current_auc = 0.6
User 9560 AUC after training: 0.6
User 9560 does not improve AUC. Reverting changes.
Training on augumented user 116089 39/50 current_auc = 0.6
User 116089 AUC after training: 0.55
User 116089 does not improve AUC. Reverting changes.
Training on augumented user 114516 40/50 current_auc = 0.6
User 114516 AUC after training: 0.6
User 114516 does not improve AUC. Reverting changes.
Training on augumented user 88343 41/50 current_auc = 0.6
User 88343 AUC after training: 0.6
User 88343 does not improve AUC. Reverting changes.
Training on augumented user 12483 42/50 current_auc = 0.6
User 12483 AUC after training: 0.55
User 12483 does not improve AUC. Reverting changes.
Training on augumented user 77808 43/50 current_auc = 0.6
User 77808 AUC after training: 0.6
User 77808 does not improve AUC. Reverting changes.
Training on augumented user 117373 44/50 current_auc = 0.6
User 117373 AUC after training: 0.55
User 117373 does not improve AUC. Reverting changes.
Training on augumented user 74901 45/50 current_auc = 0.6
User 74901 AUC after training: 0.6
User 74901 does not improve AUC. Reverting changes.
Training on augumented user 118380 46/50 current_auc = 0.6
User 118380 AUC after training: 0.55
User 118380 does not improve AUC. Reverting changes.
Training on augumented user 100846 47/50 current_auc = 0.6
User 100846 AUC after training: 0.55
User 100846 does not improve AUC. Reverting changes.
Training on augumented user 40824 48/50 current_auc = 0.6
User 40824 AUC after training: 0.55
User 40824 does not improve AUC. Reverting changes.
Training on augumented user 68174 49/50 current_auc = 0.6
User 68174 AUC after training: 0.55
User 68174 does not improve AUC. Reverting changes.
[2024-12-02 17:52:23.569192] start test user 578 25/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:52:24.407919] start test user 578 25/568 recall augumented users by random, augumented_users = [39634, 86943, 29250, 73485, 79104, 78755, 65572, 34514, 118563, 57782, 63300, 83853, 22324, 30924, 94529, 90130, 59443, 32600, 82753, 41689, 111020, 108830, 7790, 126286, 53503, 80554, 64630, 88652, 30251, 95853, 38035, 42764, 32624, 90709, 64409, 36471, 137085, 16942, 31135, 59477, 75323, 4385, 135719, 97672, 125664, 73964, 42748, 80123, 59778, 131585]
[2024-12-02 17:52:24.424867] user = 578 Cloud 25/568
[2024-12-02 17:52:24.447097] user = 578 Local 25/568
[2024-12-02 17:52:24.544771] user = 578 Local+ 25/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:52:28.112682] user = 578 MPDA- 25/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5127041742286751
Training on augumented user 39634 0/50 current_auc = 0.5127041742286751
User 39634 AUC after training: 0.5108892921960072
User 39634 does not improve AUC. Reverting changes.
Training on augumented user 86943 1/50 current_auc = 0.5127041742286751
User 86943 AUC after training: 0.5108892921960073
User 86943 does not improve AUC. Reverting changes.
Training on augumented user 29250 2/50 current_auc = 0.5127041742286751
User 29250 AUC after training: 0.5081669691470054
User 29250 does not improve AUC. Reverting changes.
Training on augumented user 73485 3/50 current_auc = 0.5127041742286751
User 73485 AUC after training: 0.5108892921960072
User 73485 does not improve AUC. Reverting changes.
Training on augumented user 79104 4/50 current_auc = 0.5127041742286751
User 79104 AUC after training: 0.5108892921960073
User 79104 does not improve AUC. Reverting changes.
Training on augumented user 78755 5/50 current_auc = 0.5127041742286751
User 78755 AUC after training: 0.5108892921960072
User 78755 does not improve AUC. Reverting changes.
Training on augumented user 65572 6/50 current_auc = 0.5127041742286751
User 65572 AUC after training: 0.5127041742286751
User 65572 does not improve AUC. Reverting changes.
Training on augumented user 34514 7/50 current_auc = 0.5127041742286751
User 34514 AUC after training: 0.5127041742286751
User 34514 does not improve AUC. Reverting changes.
Training on augumented user 118563 8/50 current_auc = 0.5127041742286751
User 118563 AUC after training: 0.5108892921960072
User 118563 does not improve AUC. Reverting changes.
Training on augumented user 57782 9/50 current_auc = 0.5127041742286751
User 57782 AUC after training: 0.5127041742286751
User 57782 does not improve AUC. Reverting changes.
Training on augumented user 63300 10/50 current_auc = 0.5127041742286751
User 63300 AUC after training: 0.5117967332123412
User 63300 does not improve AUC. Reverting changes.
Training on augumented user 83853 11/50 current_auc = 0.5127041742286751
User 83853 AUC after training: 0.5127041742286751
User 83853 does not improve AUC. Reverting changes.
Training on augumented user 22324 12/50 current_auc = 0.5127041742286751
User 22324 AUC after training: 0.5099818511796733
User 22324 does not improve AUC. Reverting changes.
Training on augumented user 30924 13/50 current_auc = 0.5127041742286751
User 30924 AUC after training: 0.5108892921960072
User 30924 does not improve AUC. Reverting changes.
Training on augumented user 94529 14/50 current_auc = 0.5127041742286751
User 94529 AUC after training: 0.5108892921960072
User 94529 does not improve AUC. Reverting changes.
Training on augumented user 90130 15/50 current_auc = 0.5127041742286751
User 90130 AUC after training: 0.5108892921960072
User 90130 does not improve AUC. Reverting changes.
Training on augumented user 59443 16/50 current_auc = 0.5127041742286751
User 59443 AUC after training: 0.5145190562613431
User 59443 improves AUC. Keeping the model.
Training on augumented user 32600 17/50 current_auc = 0.5145190562613431
User 32600 AUC after training: 0.5108892921960073
User 32600 does not improve AUC. Reverting changes.
Training on augumented user 82753 18/50 current_auc = 0.5145190562613431
User 82753 AUC after training: 0.5108892921960072
User 82753 does not improve AUC. Reverting changes.
Training on augumented user 41689 19/50 current_auc = 0.5145190562613431
User 41689 AUC after training: 0.5117967332123412
User 41689 does not improve AUC. Reverting changes.
Training on augumented user 111020 20/50 current_auc = 0.5145190562613431
User 111020 AUC after training: 0.5108892921960073
User 111020 does not improve AUC. Reverting changes.
Training on augumented user 108830 21/50 current_auc = 0.5145190562613431
User 108830 AUC after training: 0.5099818511796732
User 108830 does not improve AUC. Reverting changes.
Training on augumented user 7790 22/50 current_auc = 0.5145190562613431
User 7790 AUC after training: 0.5136116152450091
User 7790 does not improve AUC. Reverting changes.
Training on augumented user 126286 23/50 current_auc = 0.5145190562613431
User 126286 AUC after training: 0.5099818511796732
User 126286 does not improve AUC. Reverting changes.
Training on augumented user 53503 24/50 current_auc = 0.5145190562613431
User 53503 AUC after training: 0.5099818511796732
User 53503 does not improve AUC. Reverting changes.
Training on augumented user 80554 25/50 current_auc = 0.5145190562613431
User 80554 AUC after training: 0.5117967332123412
User 80554 does not improve AUC. Reverting changes.
Training on augumented user 64630 26/50 current_auc = 0.5145190562613431
User 64630 AUC after training: 0.5108892921960072
User 64630 does not improve AUC. Reverting changes.
Training on augumented user 88652 27/50 current_auc = 0.5145190562613431
User 88652 AUC after training: 0.5108892921960073
User 88652 does not improve AUC. Reverting changes.
Training on augumented user 30251 28/50 current_auc = 0.5145190562613431
User 30251 AUC after training: 0.5145190562613431
User 30251 does not improve AUC. Reverting changes.
Training on augumented user 95853 29/50 current_auc = 0.5145190562613431
User 95853 AUC after training: 0.5117967332123412
User 95853 does not improve AUC. Reverting changes.
Training on augumented user 38035 30/50 current_auc = 0.5145190562613431
User 38035 AUC after training: 0.5108892921960072
User 38035 does not improve AUC. Reverting changes.
Training on augumented user 42764 31/50 current_auc = 0.5145190562613431
User 42764 AUC after training: 0.5127041742286751
User 42764 does not improve AUC. Reverting changes.
Training on augumented user 32624 32/50 current_auc = 0.5145190562613431
User 32624 AUC after training: 0.5145190562613431
User 32624 does not improve AUC. Reverting changes.
Training on augumented user 90709 33/50 current_auc = 0.5145190562613431
User 90709 AUC after training: 0.5136116152450091
User 90709 does not improve AUC. Reverting changes.
Training on augumented user 64409 34/50 current_auc = 0.5145190562613431
User 64409 AUC after training: 0.5145190562613431
User 64409 does not improve AUC. Reverting changes.
Training on augumented user 36471 35/50 current_auc = 0.5145190562613431
User 36471 AUC after training: 0.5145190562613431
User 36471 does not improve AUC. Reverting changes.
Training on augumented user 137085 36/50 current_auc = 0.5145190562613431
User 137085 AUC after training: 0.5117967332123412
User 137085 does not improve AUC. Reverting changes.
Training on augumented user 16942 37/50 current_auc = 0.5145190562613431
User 16942 AUC after training: 0.5136116152450091
User 16942 does not improve AUC. Reverting changes.
Training on augumented user 31135 38/50 current_auc = 0.5145190562613431
User 31135 AUC after training: 0.5117967332123412
User 31135 does not improve AUC. Reverting changes.
Training on augumented user 59477 39/50 current_auc = 0.5145190562613431
User 59477 AUC after training: 0.5063520871143375
User 59477 does not improve AUC. Reverting changes.
Training on augumented user 75323 40/50 current_auc = 0.5145190562613431
User 75323 AUC after training: 0.5127041742286751
User 75323 does not improve AUC. Reverting changes.
Training on augumented user 4385 41/50 current_auc = 0.5145190562613431
User 4385 AUC after training: 0.5108892921960072
User 4385 does not improve AUC. Reverting changes.
Training on augumented user 135719 42/50 current_auc = 0.5145190562613431
User 135719 AUC after training: 0.5117967332123412
User 135719 does not improve AUC. Reverting changes.
Training on augumented user 97672 43/50 current_auc = 0.5145190562613431
User 97672 AUC after training: 0.5108892921960072
User 97672 does not improve AUC. Reverting changes.
Training on augumented user 125664 44/50 current_auc = 0.5145190562613431
User 125664 AUC after training: 0.5108892921960072
User 125664 does not improve AUC. Reverting changes.
Training on augumented user 73964 45/50 current_auc = 0.5145190562613431
User 73964 AUC after training: 0.5127041742286751
User 73964 does not improve AUC. Reverting changes.
Training on augumented user 42748 46/50 current_auc = 0.5145190562613431
User 42748 AUC after training: 0.5072595281306714
User 42748 does not improve AUC. Reverting changes.
Training on augumented user 80123 47/50 current_auc = 0.5145190562613431
User 80123 AUC after training: 0.5127041742286751
User 80123 does not improve AUC. Reverting changes.
Training on augumented user 59778 48/50 current_auc = 0.5145190562613431
User 59778 AUC after training: 0.5117967332123412
User 59778 does not improve AUC. Reverting changes.
Training on augumented user 131585 49/50 current_auc = 0.5145190562613431
User 131585 AUC after training: 0.5127041742286751
User 131585 does not improve AUC. Reverting changes.
[2024-12-02 17:52:56.939801] start test user 586 26/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:52:57.374831] start test user 586 26/568 recall augumented users by random, augumented_users = [116390, 40502, 86983, 98157, 99790, 125021, 104400, 37634, 18044, 128574, 16776, 91187, 112396, 136085, 38588, 33058, 15377, 29879, 73146, 124029, 36067, 120381, 122669, 93995, 130576, 134380, 79844, 102121, 15768, 114892, 100959, 65926, 123750, 77189, 9783, 32480, 50870, 46460, 35393, 39392, 116982, 26752, 128098, 9436, 65251, 120899, 83319, 69731, 62170, 133231]
[2024-12-02 17:52:57.392663] user = 586 Cloud 26/568
[2024-12-02 17:52:57.422255] user = 586 Local 26/568
[2024-12-02 17:52:57.573895] user = 586 Local+ 26/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:53:00.060126] user = 586 MPDA- 26/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6253743104806935
Training on augumented user 116390 0/50 current_auc = 0.6253743104806935
User 116390 AUC after training: 0.6252561071710008
User 116390 does not improve AUC. Reverting changes.
Training on augumented user 40502 1/50 current_auc = 0.6253743104806935
User 40502 AUC after training: 0.6257289204097713
User 40502 improves AUC. Keeping the model.
Training on augumented user 86983 2/50 current_auc = 0.6257289204097713
User 86983 AUC after training: 0.6255319148936169
User 86983 does not improve AUC. Reverting changes.
Training on augumented user 98157 3/50 current_auc = 0.6257289204097713
User 98157 AUC after training: 0.6256107171000789
User 98157 does not improve AUC. Reverting changes.
Training on augumented user 99790 4/50 current_auc = 0.6257289204097713
User 99790 AUC after training: 0.6252167060677699
User 99790 does not improve AUC. Reverting changes.
Training on augumented user 125021 5/50 current_auc = 0.6257289204097713
User 125021 AUC after training: 0.6252955082742317
User 125021 does not improve AUC. Reverting changes.
Training on augumented user 104400 6/50 current_auc = 0.6257289204097713
User 104400 AUC after training: 0.625177304964539
User 104400 does not improve AUC. Reverting changes.
Training on augumented user 37634 7/50 current_auc = 0.6257289204097713
User 37634 AUC after training: 0.6252561071710008
User 37634 does not improve AUC. Reverting changes.
Training on augumented user 18044 8/50 current_auc = 0.6257289204097713
User 18044 AUC after training: 0.6253349093774626
User 18044 does not improve AUC. Reverting changes.
Training on augumented user 128574 9/50 current_auc = 0.6257289204097713
User 128574 AUC after training: 0.6252561071710008
User 128574 does not improve AUC. Reverting changes.
Training on augumented user 16776 10/50 current_auc = 0.6257289204097713
User 16776 AUC after training: 0.6252955082742316
User 16776 does not improve AUC. Reverting changes.
Training on augumented user 91187 11/50 current_auc = 0.6257289204097713
User 91187 AUC after training: 0.6257289204097713
User 91187 does not improve AUC. Reverting changes.
Training on augumented user 112396 12/50 current_auc = 0.6257289204097713
User 112396 AUC after training: 0.624822695035461
User 112396 does not improve AUC. Reverting changes.
Training on augumented user 136085 13/50 current_auc = 0.6257289204097713
User 136085 AUC after training: 0.6250197005516154
User 136085 does not improve AUC. Reverting changes.
Training on augumented user 38588 14/50 current_auc = 0.6257289204097713
User 38588 AUC after training: 0.6252561071710008
User 38588 does not improve AUC. Reverting changes.
Training on augumented user 33058 15/50 current_auc = 0.6257289204097713
User 33058 AUC after training: 0.6257289204097715
User 33058 improves AUC. Keeping the model.
Training on augumented user 15377 16/50 current_auc = 0.6257289204097715
User 15377 AUC after training: 0.6256895193065406
User 15377 does not improve AUC. Reverting changes.
Training on augumented user 29879 17/50 current_auc = 0.6257289204097715
User 29879 AUC after training: 0.6269109535066982
User 29879 improves AUC. Keeping the model.
Training on augumented user 73146 18/50 current_auc = 0.6269109535066982
User 73146 AUC after training: 0.6268321513002364
User 73146 does not improve AUC. Reverting changes.
Training on augumented user 124029 19/50 current_auc = 0.6269109535066982
User 124029 AUC after training: 0.6271079590228527
User 124029 improves AUC. Keeping the model.
Training on augumented user 36067 20/50 current_auc = 0.6271079590228527
User 36067 AUC after training: 0.6255713159968479
User 36067 does not improve AUC. Reverting changes.
Training on augumented user 120381 21/50 current_auc = 0.6271079590228527
User 120381 AUC after training: 0.6269503546099291
User 120381 does not improve AUC. Reverting changes.
Training on augumented user 122669 22/50 current_auc = 0.6271079590228527
User 122669 AUC after training: 0.6271079590228527
User 122669 does not improve AUC. Reverting changes.
Training on augumented user 93995 23/50 current_auc = 0.6271079590228527
User 93995 AUC after training: 0.6271867612293144
User 93995 improves AUC. Keeping the model.
Training on augumented user 130576 24/50 current_auc = 0.6271867612293144
User 130576 AUC after training: 0.6272655634357762
User 130576 improves AUC. Keeping the model.
Training on augumented user 134380 25/50 current_auc = 0.6272655634357762
User 134380 AUC after training: 0.6250197005516154
User 134380 does not improve AUC. Reverting changes.
Training on augumented user 79844 26/50 current_auc = 0.6272655634357762
User 79844 AUC after training: 0.6267927501970055
User 79844 does not improve AUC. Reverting changes.
Training on augumented user 102121 27/50 current_auc = 0.6272655634357762
User 102121 AUC after training: 0.6273837667454689
User 102121 improves AUC. Keeping the model.
Training on augumented user 15768 28/50 current_auc = 0.6273837667454689
User 15768 AUC after training: 0.6267927501970054
User 15768 does not improve AUC. Reverting changes.
Training on augumented user 114892 29/50 current_auc = 0.6273837667454689
User 114892 AUC after training: 0.6267927501970055
User 114892 does not improve AUC. Reverting changes.
Training on augumented user 100959 30/50 current_auc = 0.6273837667454689
User 100959 AUC after training: 0.6271473601260835
User 100959 does not improve AUC. Reverting changes.
Training on augumented user 65926 31/50 current_auc = 0.6273837667454689
User 65926 AUC after training: 0.626635145784082
User 65926 does not improve AUC. Reverting changes.
Training on augumented user 123750 32/50 current_auc = 0.6273837667454689
User 123750 AUC after training: 0.624468085106383
User 123750 does not improve AUC. Reverting changes.
Training on augumented user 77189 33/50 current_auc = 0.6273837667454689
User 77189 AUC after training: 0.6269503546099291
User 77189 does not improve AUC. Reverting changes.
Training on augumented user 9783 34/50 current_auc = 0.6273837667454689
User 9783 AUC after training: 0.6258077226162332
User 9783 does not improve AUC. Reverting changes.
Training on augumented user 32480 35/50 current_auc = 0.6273837667454689
User 32480 AUC after training: 0.6263987391646967
User 32480 does not improve AUC. Reverting changes.
Training on augumented user 50870 36/50 current_auc = 0.6273837667454689
User 50870 AUC after training: 0.6274231678486998
User 50870 improves AUC. Keeping the model.
Training on augumented user 46460 37/50 current_auc = 0.6274231678486998
User 46460 AUC after training: 0.6277777777777778
User 46460 improves AUC. Keeping the model.
Training on augumented user 35393 38/50 current_auc = 0.6277777777777778
User 35393 AUC after training: 0.6259259259259259
User 35393 does not improve AUC. Reverting changes.
Training on augumented user 39392 39/50 current_auc = 0.6277777777777778
User 39392 AUC after training: 0.6260441292356186
User 39392 does not improve AUC. Reverting changes.
Training on augumented user 116982 40/50 current_auc = 0.6277777777777778
User 116982 AUC after training: 0.625177304964539
User 116982 does not improve AUC. Reverting changes.
Training on augumented user 26752 41/50 current_auc = 0.6277777777777778
User 26752 AUC after training: 0.6265563435776202
User 26752 does not improve AUC. Reverting changes.
Training on augumented user 128098 42/50 current_auc = 0.6277777777777778
User 128098 AUC after training: 0.6259259259259259
User 128098 does not improve AUC. Reverting changes.
Training on augumented user 9436 43/50 current_auc = 0.6277777777777778
User 9436 AUC after training: 0.6274625689519308
User 9436 does not improve AUC. Reverting changes.
Training on augumented user 65251 44/50 current_auc = 0.6277777777777778
User 65251 AUC after training: 0.6273049645390071
User 65251 does not improve AUC. Reverting changes.
Training on augumented user 120899 45/50 current_auc = 0.6277777777777778
User 120899 AUC after training: 0.6274231678486998
User 120899 does not improve AUC. Reverting changes.
Training on augumented user 83319 46/50 current_auc = 0.6277777777777778
User 83319 AUC after training: 0.6274231678486999
User 83319 does not improve AUC. Reverting changes.
Training on augumented user 69731 47/50 current_auc = 0.6277777777777778
User 69731 AUC after training: 0.6265957446808511
User 69731 does not improve AUC. Reverting changes.
Training on augumented user 62170 48/50 current_auc = 0.6277777777777778
User 62170 AUC after training: 0.6275019700551616
User 62170 does not improve AUC. Reverting changes.
Training on augumented user 133231 49/50 current_auc = 0.6277777777777778
User 133231 AUC after training: 0.6276595744680851
User 133231 does not improve AUC. Reverting changes.
[2024-12-02 17:53:32.646065] start test user 614 27/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:53:33.496361] start test user 614 27/568 recall augumented users by random, augumented_users = [120118, 62688, 118040, 6347, 91728, 52093, 66357, 129893, 93804, 85158, 14607, 23786, 136238, 48262, 4239, 137243, 106195, 84855, 130812, 128151, 12629, 119544, 128767, 18712, 62138, 101276, 43356, 21225, 22924, 51451, 111758, 67295, 56804, 132486, 100740, 114635, 59423, 97702, 79297, 59351, 123035, 98551, 112831, 58560, 13759, 7510, 47398, 84578, 59754, 52205]
[2024-12-02 17:53:33.513514] user = 614 Cloud 27/568
[2024-12-02 17:53:33.532454] user = 614 Local 27/568
[2024-12-02 17:53:33.763859] user = 614 Local+ 27/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:53:35.673965] user = 614 MPDA- 27/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5249745158002038
Training on augumented user 120118 0/50 current_auc = 0.5249745158002038
User 120118 AUC after training: 0.5247196738022426
User 120118 does not improve AUC. Reverting changes.
Training on augumented user 62688 1/50 current_auc = 0.5249745158002038
User 62688 AUC after training: 0.526333673122664
User 62688 improves AUC. Keeping the model.
Training on augumented user 118040 2/50 current_auc = 0.526333673122664
User 118040 AUC after training: 0.5263336731226639
User 118040 does not improve AUC. Reverting changes.
Training on augumented user 6347 3/50 current_auc = 0.526333673122664
User 6347 AUC after training: 0.525654094461434
User 6347 does not improve AUC. Reverting changes.
Training on augumented user 91728 4/50 current_auc = 0.526333673122664
User 91728 AUC after training: 0.5246347264695888
User 91728 does not improve AUC. Reverting changes.
Training on augumented user 52093 5/50 current_auc = 0.526333673122664
User 52093 AUC after training: 0.5265035677879714
User 52093 improves AUC. Keeping the model.
Training on augumented user 66357 6/50 current_auc = 0.5265035677879714
User 66357 AUC after training: 0.5254841997961264
User 66357 does not improve AUC. Reverting changes.
Training on augumented user 129893 7/50 current_auc = 0.5265035677879714
User 129893 AUC after training: 0.527013251783894
User 129893 improves AUC. Keeping the model.
Training on augumented user 93804 8/50 current_auc = 0.527013251783894
User 93804 AUC after training: 0.5259938837920489
User 93804 does not improve AUC. Reverting changes.
Training on augumented user 85158 9/50 current_auc = 0.527013251783894
User 85158 AUC after training: 0.5265035677879715
User 85158 does not improve AUC. Reverting changes.
Training on augumented user 14607 10/50 current_auc = 0.527013251783894
User 14607 AUC after training: 0.5253143051308189
User 14607 does not improve AUC. Reverting changes.
Training on augumented user 23786 11/50 current_auc = 0.527013251783894
User 23786 AUC after training: 0.5249745158002039
User 23786 does not improve AUC. Reverting changes.
Training on augumented user 136238 12/50 current_auc = 0.527013251783894
User 136238 AUC after training: 0.5241250424736663
User 136238 does not improve AUC. Reverting changes.
Training on augumented user 48262 13/50 current_auc = 0.527013251783894
User 48262 AUC after training: 0.5258239891267413
User 48262 does not improve AUC. Reverting changes.
Training on augumented user 4239 14/50 current_auc = 0.527013251783894
User 4239 AUC after training: 0.526673462453279
User 4239 does not improve AUC. Reverting changes.
Training on augumented user 137243 15/50 current_auc = 0.527013251783894
User 137243 AUC after training: 0.5246347264695889
User 137243 does not improve AUC. Reverting changes.
Training on augumented user 106195 16/50 current_auc = 0.527013251783894
User 106195 AUC after training: 0.525654094461434
User 106195 does not improve AUC. Reverting changes.
Training on augumented user 84855 17/50 current_auc = 0.527013251783894
User 84855 AUC after training: 0.5236153584777438
User 84855 does not improve AUC. Reverting changes.
Training on augumented user 130812 18/50 current_auc = 0.527013251783894
User 130812 AUC after training: 0.5236153584777438
User 130812 does not improve AUC. Reverting changes.
Training on augumented user 128151 19/50 current_auc = 0.527013251783894
User 128151 AUC after training: 0.5251444104655113
User 128151 does not improve AUC. Reverting changes.
Training on augumented user 12629 20/50 current_auc = 0.527013251783894
User 12629 AUC after training: 0.5251444104655114
User 12629 does not improve AUC. Reverting changes.
Training on augumented user 119544 21/50 current_auc = 0.527013251783894
User 119544 AUC after training: 0.526333673122664
User 119544 does not improve AUC. Reverting changes.
Training on augumented user 128767 22/50 current_auc = 0.527013251783894
User 128767 AUC after training: 0.5259938837920489
User 128767 does not improve AUC. Reverting changes.
Training on augumented user 18712 23/50 current_auc = 0.527013251783894
User 18712 AUC after training: 0.5258239891267414
User 18712 does not improve AUC. Reverting changes.
Training on augumented user 62138 24/50 current_auc = 0.527013251783894
User 62138 AUC after training: 0.5266734624532791
User 62138 does not improve AUC. Reverting changes.
Training on augumented user 101276 25/50 current_auc = 0.527013251783894
User 101276 AUC after training: 0.5268433571185864
User 101276 does not improve AUC. Reverting changes.
Training on augumented user 43356 26/50 current_auc = 0.527013251783894
User 43356 AUC after training: 0.5251444104655114
User 43356 does not improve AUC. Reverting changes.
Training on augumented user 21225 27/50 current_auc = 0.527013251783894
User 21225 AUC after training: 0.5261637784573564
User 21225 does not improve AUC. Reverting changes.
Training on augumented user 22924 28/50 current_auc = 0.527013251783894
User 22924 AUC after training: 0.526673462453279
User 22924 does not improve AUC. Reverting changes.
Training on augumented user 51451 29/50 current_auc = 0.527013251783894
User 51451 AUC after training: 0.526333673122664
User 51451 does not improve AUC. Reverting changes.
Training on augumented user 111758 30/50 current_auc = 0.527013251783894
User 111758 AUC after training: 0.5251444104655114
User 111758 does not improve AUC. Reverting changes.
Training on augumented user 67295 31/50 current_auc = 0.527013251783894
User 67295 AUC after training: 0.526333673122664
User 67295 does not improve AUC. Reverting changes.
Training on augumented user 56804 32/50 current_auc = 0.527013251783894
User 56804 AUC after training: 0.5261637784573565
User 56804 does not improve AUC. Reverting changes.
Training on augumented user 132486 33/50 current_auc = 0.527013251783894
User 132486 AUC after training: 0.5237852531430514
User 132486 does not improve AUC. Reverting changes.
Training on augumented user 100740 34/50 current_auc = 0.527013251783894
User 100740 AUC after training: 0.5265035677879715
User 100740 does not improve AUC. Reverting changes.
Training on augumented user 114635 35/50 current_auc = 0.527013251783894
User 114635 AUC after training: 0.5258239891267414
User 114635 does not improve AUC. Reverting changes.
Training on augumented user 59423 36/50 current_auc = 0.527013251783894
User 59423 AUC after training: 0.5265035677879715
User 59423 does not improve AUC. Reverting changes.
Training on augumented user 97702 37/50 current_auc = 0.527013251783894
User 97702 AUC after training: 0.527353041114509
User 97702 improves AUC. Keeping the model.
Training on augumented user 79297 38/50 current_auc = 0.527353041114509
User 79297 AUC after training: 0.5268433571185864
User 79297 does not improve AUC. Reverting changes.
Training on augumented user 59351 39/50 current_auc = 0.527353041114509
User 59351 AUC after training: 0.5275229357798166
User 59351 improves AUC. Keeping the model.
Training on augumented user 123035 40/50 current_auc = 0.5275229357798166
User 123035 AUC after training: 0.527353041114509
User 123035 does not improve AUC. Reverting changes.
Training on augumented user 98551 41/50 current_auc = 0.5275229357798166
User 98551 AUC after training: 0.527353041114509
User 98551 does not improve AUC. Reverting changes.
Training on augumented user 112831 42/50 current_auc = 0.5275229357798166
User 112831 AUC after training: 0.527353041114509
User 112831 does not improve AUC. Reverting changes.
Training on augumented user 58560 43/50 current_auc = 0.5275229357798166
User 58560 AUC after training: 0.526673462453279
User 58560 does not improve AUC. Reverting changes.
Training on augumented user 13759 44/50 current_auc = 0.5275229357798166
User 13759 AUC after training: 0.527692830445124
User 13759 improves AUC. Keeping the model.
Training on augumented user 7510 45/50 current_auc = 0.527692830445124
User 7510 AUC after training: 0.5271831464492015
User 7510 does not improve AUC. Reverting changes.
Training on augumented user 47398 46/50 current_auc = 0.527692830445124
User 47398 AUC after training: 0.527353041114509
User 47398 does not improve AUC. Reverting changes.
Training on augumented user 84578 47/50 current_auc = 0.527692830445124
User 84578 AUC after training: 0.5270132517838939
User 84578 does not improve AUC. Reverting changes.
Training on augumented user 59754 48/50 current_auc = 0.527692830445124
User 59754 AUC after training: 0.527353041114509
User 59754 does not improve AUC. Reverting changes.
Training on augumented user 52205 49/50 current_auc = 0.527692830445124
User 52205 AUC after training: 0.526333673122664
User 52205 does not improve AUC. Reverting changes.
[2024-12-02 17:54:06.479598] start test user 689 28/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:54:06.990411] start test user 689 28/568 recall augumented users by random, augumented_users = [90590, 49169, 132289, 131242, 125259, 83057, 42584, 22245, 103717, 113457, 43761, 21035, 98550, 32008, 18148, 78959, 53962, 83845, 94987, 51914, 42328, 64077, 5717, 87874, 75092, 86664, 9348, 104745, 56425, 81095, 131542, 115491, 88769, 111910, 123057, 13935, 102297, 121560, 57966, 21503, 92996, 87807, 42191, 57198, 69630, 93984, 23445, 119956, 38165, 18989]
[2024-12-02 17:54:07.005736] user = 689 Cloud 28/568
[2024-12-02 17:54:07.016035] user = 689 Local 28/568
[2024-12-02 17:54:07.100155] user = 689 Local+ 28/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:54:09.770474] user = 689 MPDA- 28/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6858974358974359
Training on augumented user 90590 0/50 current_auc = 0.6858974358974359
User 90590 AUC after training: 0.6858974358974359
User 90590 does not improve AUC. Reverting changes.
Training on augumented user 49169 1/50 current_auc = 0.6858974358974359
User 49169 AUC after training: 0.6858974358974359
User 49169 does not improve AUC. Reverting changes.
Training on augumented user 132289 2/50 current_auc = 0.6858974358974359
User 132289 AUC after training: 0.6858974358974359
User 132289 does not improve AUC. Reverting changes.
Training on augumented user 131242 3/50 current_auc = 0.6858974358974359
User 131242 AUC after training: 0.6858974358974359
User 131242 does not improve AUC. Reverting changes.
Training on augumented user 125259 4/50 current_auc = 0.6858974358974359
User 125259 AUC after training: 0.6858974358974359
User 125259 does not improve AUC. Reverting changes.
Training on augumented user 83057 5/50 current_auc = 0.6858974358974359
User 83057 AUC after training: 0.6858974358974359
User 83057 does not improve AUC. Reverting changes.
Training on augumented user 42584 6/50 current_auc = 0.6858974358974359
User 42584 AUC after training: 0.6858974358974359
User 42584 does not improve AUC. Reverting changes.
Training on augumented user 22245 7/50 current_auc = 0.6858974358974359
User 22245 AUC after training: 0.6858974358974359
User 22245 does not improve AUC. Reverting changes.
Training on augumented user 103717 8/50 current_auc = 0.6858974358974359
User 103717 AUC after training: 0.6858974358974359
User 103717 does not improve AUC. Reverting changes.
Training on augumented user 113457 9/50 current_auc = 0.6858974358974359
User 113457 AUC after training: 0.6858974358974359
User 113457 does not improve AUC. Reverting changes.
Training on augumented user 43761 10/50 current_auc = 0.6858974358974359
User 43761 AUC after training: 0.6858974358974359
User 43761 does not improve AUC. Reverting changes.
Training on augumented user 21035 11/50 current_auc = 0.6858974358974359
User 21035 AUC after training: 0.6858974358974359
User 21035 does not improve AUC. Reverting changes.
Training on augumented user 98550 12/50 current_auc = 0.6858974358974359
User 98550 AUC after training: 0.6858974358974359
User 98550 does not improve AUC. Reverting changes.
Training on augumented user 32008 13/50 current_auc = 0.6858974358974359
User 32008 AUC after training: 0.6858974358974359
User 32008 does not improve AUC. Reverting changes.
Training on augumented user 18148 14/50 current_auc = 0.6858974358974359
User 18148 AUC after training: 0.6858974358974359
User 18148 does not improve AUC. Reverting changes.
Training on augumented user 78959 15/50 current_auc = 0.6858974358974359
User 78959 AUC after training: 0.6858974358974359
User 78959 does not improve AUC. Reverting changes.
Training on augumented user 53962 16/50 current_auc = 0.6858974358974359
User 53962 AUC after training: 0.6858974358974359
User 53962 does not improve AUC. Reverting changes.
Training on augumented user 83845 17/50 current_auc = 0.6858974358974359
User 83845 AUC after training: 0.6858974358974359
User 83845 does not improve AUC. Reverting changes.
Training on augumented user 94987 18/50 current_auc = 0.6858974358974359
User 94987 AUC after training: 0.6858974358974359
User 94987 does not improve AUC. Reverting changes.
Training on augumented user 51914 19/50 current_auc = 0.6858974358974359
User 51914 AUC after training: 0.6858974358974359
User 51914 does not improve AUC. Reverting changes.
Training on augumented user 42328 20/50 current_auc = 0.6858974358974359
User 42328 AUC after training: 0.6858974358974359
User 42328 does not improve AUC. Reverting changes.
Training on augumented user 64077 21/50 current_auc = 0.6858974358974359
User 64077 AUC after training: 0.6858974358974359
User 64077 does not improve AUC. Reverting changes.
Training on augumented user 5717 22/50 current_auc = 0.6858974358974359
User 5717 AUC after training: 0.6858974358974359
User 5717 does not improve AUC. Reverting changes.
Training on augumented user 87874 23/50 current_auc = 0.6858974358974359
User 87874 AUC after training: 0.6858974358974359
User 87874 does not improve AUC. Reverting changes.
Training on augumented user 75092 24/50 current_auc = 0.6858974358974359
User 75092 AUC after training: 0.6858974358974359
User 75092 does not improve AUC. Reverting changes.
Training on augumented user 86664 25/50 current_auc = 0.6858974358974359
User 86664 AUC after training: 0.6858974358974359
User 86664 does not improve AUC. Reverting changes.
Training on augumented user 9348 26/50 current_auc = 0.6858974358974359
User 9348 AUC after training: 0.6858974358974359
User 9348 does not improve AUC. Reverting changes.
Training on augumented user 104745 27/50 current_auc = 0.6858974358974359
User 104745 AUC after training: 0.6858974358974359
User 104745 does not improve AUC. Reverting changes.
Training on augumented user 56425 28/50 current_auc = 0.6858974358974359
User 56425 AUC after training: 0.6858974358974359
User 56425 does not improve AUC. Reverting changes.
Training on augumented user 81095 29/50 current_auc = 0.6858974358974359
User 81095 AUC after training: 0.6858974358974359
User 81095 does not improve AUC. Reverting changes.
Training on augumented user 131542 30/50 current_auc = 0.6858974358974359
User 131542 AUC after training: 0.6858974358974359
User 131542 does not improve AUC. Reverting changes.
Training on augumented user 115491 31/50 current_auc = 0.6858974358974359
User 115491 AUC after training: 0.6858974358974359
User 115491 does not improve AUC. Reverting changes.
Training on augumented user 88769 32/50 current_auc = 0.6858974358974359
User 88769 AUC after training: 0.6858974358974359
User 88769 does not improve AUC. Reverting changes.
Training on augumented user 111910 33/50 current_auc = 0.6858974358974359
User 111910 AUC after training: 0.6858974358974359
User 111910 does not improve AUC. Reverting changes.
Training on augumented user 123057 34/50 current_auc = 0.6858974358974359
User 123057 AUC after training: 0.6858974358974359
User 123057 does not improve AUC. Reverting changes.
Training on augumented user 13935 35/50 current_auc = 0.6858974358974359
User 13935 AUC after training: 0.6858974358974359
User 13935 does not improve AUC. Reverting changes.
Training on augumented user 102297 36/50 current_auc = 0.6858974358974359
User 102297 AUC after training: 0.6858974358974359
User 102297 does not improve AUC. Reverting changes.
Training on augumented user 121560 37/50 current_auc = 0.6858974358974359
User 121560 AUC after training: 0.6858974358974359
User 121560 does not improve AUC. Reverting changes.
Training on augumented user 57966 38/50 current_auc = 0.6858974358974359
User 57966 AUC after training: 0.6858974358974359
User 57966 does not improve AUC. Reverting changes.
Training on augumented user 21503 39/50 current_auc = 0.6858974358974359
User 21503 AUC after training: 0.6858974358974359
User 21503 does not improve AUC. Reverting changes.
Training on augumented user 92996 40/50 current_auc = 0.6858974358974359
User 92996 AUC after training: 0.6858974358974359
User 92996 does not improve AUC. Reverting changes.
Training on augumented user 87807 41/50 current_auc = 0.6858974358974359
User 87807 AUC after training: 0.6858974358974359
User 87807 does not improve AUC. Reverting changes.
Training on augumented user 42191 42/50 current_auc = 0.6858974358974359
User 42191 AUC after training: 0.6858974358974359
User 42191 does not improve AUC. Reverting changes.
Training on augumented user 57198 43/50 current_auc = 0.6858974358974359
User 57198 AUC after training: 0.6858974358974359
User 57198 does not improve AUC. Reverting changes.
Training on augumented user 69630 44/50 current_auc = 0.6858974358974359
User 69630 AUC after training: 0.6858974358974359
User 69630 does not improve AUC. Reverting changes.
Training on augumented user 93984 45/50 current_auc = 0.6858974358974359
User 93984 AUC after training: 0.6858974358974359
User 93984 does not improve AUC. Reverting changes.
Training on augumented user 23445 46/50 current_auc = 0.6858974358974359
User 23445 AUC after training: 0.6858974358974359
User 23445 does not improve AUC. Reverting changes.
Training on augumented user 119956 47/50 current_auc = 0.6858974358974359
User 119956 AUC after training: 0.6858974358974359
User 119956 does not improve AUC. Reverting changes.
Training on augumented user 38165 48/50 current_auc = 0.6858974358974359
User 38165 AUC after training: 0.6858974358974359
User 38165 does not improve AUC. Reverting changes.
Training on augumented user 18989 49/50 current_auc = 0.6858974358974359
User 18989 AUC after training: 0.6858974358974359
User 18989 does not improve AUC. Reverting changes.
[2024-12-02 17:54:40.971006] start test user 694 29/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:54:41.801962] start test user 694 29/568 recall augumented users by random, augumented_users = [53414, 10647, 92403, 59265, 70869, 91961, 96104, 34510, 130143, 29769, 109181, 106977, 126433, 128697, 108275, 69290, 29694, 9137, 80083, 56838, 72317, 77376, 86755, 80727, 23585, 34332, 69576, 63594, 16741, 4238, 854, 101864, 61288, 28540, 99421, 86252, 132223, 50810, 72690, 91811, 16918, 58156, 3919, 39213, 92731, 130539, 112809, 58848, 133404, 51435]
[2024-12-02 17:54:41.817738] user = 694 Cloud 29/568
[2024-12-02 17:54:41.840409] user = 694 Local 29/568
[2024-12-02 17:54:41.903782] user = 694 Local+ 29/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:54:43.932099] user = 694 MPDA- 29/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7422680412371133
Training on augumented user 53414 0/50 current_auc = 0.7422680412371133
User 53414 AUC after training: 0.7420103092783505
User 53414 does not improve AUC. Reverting changes.
Training on augumented user 10647 1/50 current_auc = 0.7422680412371133
User 10647 AUC after training: 0.7422680412371134
User 10647 improves AUC. Keeping the model.
Training on augumented user 92403 2/50 current_auc = 0.7422680412371134
User 92403 AUC after training: 0.7414948453608247
User 92403 does not improve AUC. Reverting changes.
Training on augumented user 59265 3/50 current_auc = 0.7422680412371134
User 59265 AUC after training: 0.7420103092783504
User 59265 does not improve AUC. Reverting changes.
Training on augumented user 70869 4/50 current_auc = 0.7422680412371134
User 70869 AUC after training: 0.7427835051546392
User 70869 improves AUC. Keeping the model.
Training on augumented user 91961 5/50 current_auc = 0.7427835051546392
User 91961 AUC after training: 0.7420103092783504
User 91961 does not improve AUC. Reverting changes.
Training on augumented user 96104 6/50 current_auc = 0.7427835051546392
User 96104 AUC after training: 0.7414948453608248
User 96104 does not improve AUC. Reverting changes.
Training on augumented user 34510 7/50 current_auc = 0.7427835051546392
User 34510 AUC after training: 0.7417525773195877
User 34510 does not improve AUC. Reverting changes.
Training on augumented user 130143 8/50 current_auc = 0.7427835051546392
User 130143 AUC after training: 0.7417525773195875
User 130143 does not improve AUC. Reverting changes.
Training on augumented user 29769 9/50 current_auc = 0.7427835051546392
User 29769 AUC after training: 0.7430412371134021
User 29769 improves AUC. Keeping the model.
Training on augumented user 109181 10/50 current_auc = 0.7430412371134021
User 109181 AUC after training: 0.7422680412371134
User 109181 does not improve AUC. Reverting changes.
Training on augumented user 106977 11/50 current_auc = 0.7430412371134021
User 106977 AUC after training: 0.7427835051546392
User 106977 does not improve AUC. Reverting changes.
Training on augumented user 126433 12/50 current_auc = 0.7430412371134021
User 126433 AUC after training: 0.743298969072165
User 126433 improves AUC. Keeping the model.
Training on augumented user 128697 13/50 current_auc = 0.743298969072165
User 128697 AUC after training: 0.743041237113402
User 128697 does not improve AUC. Reverting changes.
Training on augumented user 108275 14/50 current_auc = 0.743298969072165
User 108275 AUC after training: 0.7430412371134021
User 108275 does not improve AUC. Reverting changes.
Training on augumented user 69290 15/50 current_auc = 0.743298969072165
User 69290 AUC after training: 0.7430412371134021
User 69290 does not improve AUC. Reverting changes.
Training on augumented user 29694 16/50 current_auc = 0.743298969072165
User 29694 AUC after training: 0.7425257731958763
User 29694 does not improve AUC. Reverting changes.
Training on augumented user 9137 17/50 current_auc = 0.743298969072165
User 9137 AUC after training: 0.743298969072165
User 9137 does not improve AUC. Reverting changes.
Training on augumented user 80083 18/50 current_auc = 0.743298969072165
User 80083 AUC after training: 0.7425257731958763
User 80083 does not improve AUC. Reverting changes.
Training on augumented user 56838 19/50 current_auc = 0.743298969072165
User 56838 AUC after training: 0.7427835051546392
User 56838 does not improve AUC. Reverting changes.
Training on augumented user 72317 20/50 current_auc = 0.743298969072165
User 72317 AUC after training: 0.7432989690721651
User 72317 improves AUC. Keeping the model.
Training on augumented user 77376 21/50 current_auc = 0.7432989690721651
User 77376 AUC after training: 0.7440721649484537
User 77376 improves AUC. Keeping the model.
Training on augumented user 86755 22/50 current_auc = 0.7440721649484537
User 86755 AUC after training: 0.7443298969072166
User 86755 improves AUC. Keeping the model.
Training on augumented user 80727 23/50 current_auc = 0.7443298969072166
User 80727 AUC after training: 0.7430412371134021
User 80727 does not improve AUC. Reverting changes.
Training on augumented user 23585 24/50 current_auc = 0.7443298969072166
User 23585 AUC after training: 0.7440721649484537
User 23585 does not improve AUC. Reverting changes.
Training on augumented user 34332 25/50 current_auc = 0.7443298969072166
User 34332 AUC after training: 0.7420103092783505
User 34332 does not improve AUC. Reverting changes.
Training on augumented user 69576 26/50 current_auc = 0.7443298969072166
User 69576 AUC after training: 0.743556701030928
User 69576 does not improve AUC. Reverting changes.
Training on augumented user 63594 27/50 current_auc = 0.7443298969072166
User 63594 AUC after training: 0.7440721649484537
User 63594 does not improve AUC. Reverting changes.
Training on augumented user 16741 28/50 current_auc = 0.7443298969072166
User 16741 AUC after training: 0.7440721649484537
User 16741 does not improve AUC. Reverting changes.
Training on augumented user 4238 29/50 current_auc = 0.7443298969072166
User 4238 AUC after training: 0.7427835051546392
User 4238 does not improve AUC. Reverting changes.
Training on augumented user 854 30/50 current_auc = 0.7443298969072166
User 854 AUC after training: 0.7435567010309279
User 854 does not improve AUC. Reverting changes.
Training on augumented user 101864 31/50 current_auc = 0.7443298969072166
User 101864 AUC after training: 0.7443298969072166
User 101864 does not improve AUC. Reverting changes.
Training on augumented user 61288 32/50 current_auc = 0.7443298969072166
User 61288 AUC after training: 0.7427835051546392
User 61288 does not improve AUC. Reverting changes.
Training on augumented user 28540 33/50 current_auc = 0.7443298969072166
User 28540 AUC after training: 0.7440721649484536
User 28540 does not improve AUC. Reverting changes.
Training on augumented user 99421 34/50 current_auc = 0.7443298969072166
User 99421 AUC after training: 0.7430412371134021
User 99421 does not improve AUC. Reverting changes.
Training on augumented user 86252 35/50 current_auc = 0.7443298969072166
User 86252 AUC after training: 0.7425257731958762
User 86252 does not improve AUC. Reverting changes.
Training on augumented user 132223 36/50 current_auc = 0.7443298969072166
User 132223 AUC after training: 0.7438144329896907
User 132223 does not improve AUC. Reverting changes.
Training on augumented user 50810 37/50 current_auc = 0.7443298969072166
User 50810 AUC after training: 0.7435567010309279
User 50810 does not improve AUC. Reverting changes.
Training on augumented user 72690 38/50 current_auc = 0.7443298969072166
User 72690 AUC after training: 0.7440721649484536
User 72690 does not improve AUC. Reverting changes.
Training on augumented user 91811 39/50 current_auc = 0.7443298969072166
User 91811 AUC after training: 0.7427835051546392
User 91811 does not improve AUC. Reverting changes.
Training on augumented user 16918 40/50 current_auc = 0.7443298969072166
User 16918 AUC after training: 0.7432989690721651
User 16918 does not improve AUC. Reverting changes.
Training on augumented user 58156 41/50 current_auc = 0.7443298969072166
User 58156 AUC after training: 0.7420103092783504
User 58156 does not improve AUC. Reverting changes.
Training on augumented user 3919 42/50 current_auc = 0.7443298969072166
User 3919 AUC after training: 0.7425257731958763
User 3919 does not improve AUC. Reverting changes.
Training on augumented user 39213 43/50 current_auc = 0.7443298969072166
User 39213 AUC after training: 0.743298969072165
User 39213 does not improve AUC. Reverting changes.
Training on augumented user 92731 44/50 current_auc = 0.7443298969072166
User 92731 AUC after training: 0.7427835051546391
User 92731 does not improve AUC. Reverting changes.
Training on augumented user 130539 45/50 current_auc = 0.7443298969072166
User 130539 AUC after training: 0.7438144329896909
User 130539 does not improve AUC. Reverting changes.
Training on augumented user 112809 46/50 current_auc = 0.7443298969072166
User 112809 AUC after training: 0.7438144329896909
User 112809 does not improve AUC. Reverting changes.
Training on augumented user 58848 47/50 current_auc = 0.7443298969072166
User 58848 AUC after training: 0.7440721649484537
User 58848 does not improve AUC. Reverting changes.
Training on augumented user 133404 48/50 current_auc = 0.7443298969072166
User 133404 AUC after training: 0.7432989690721651
User 133404 does not improve AUC. Reverting changes.
Training on augumented user 51435 49/50 current_auc = 0.7443298969072166
User 51435 AUC after training: 0.7440721649484536
User 51435 does not improve AUC. Reverting changes.
[2024-12-02 17:55:15.319664] start test user 710 30/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:55:15.857727] start test user 710 30/568 recall augumented users by random, augumented_users = [93274, 67507, 16776, 95962, 13239, 10992, 18584, 83398, 20530, 69151, 105261, 27185, 15347, 90862, 136242, 73242, 61222, 63570, 35024, 114496, 8817, 92507, 128266, 80244, 71333, 103983, 28392, 135248, 105057, 6135, 129916, 107193, 18784, 45960, 72849, 42222, 9743, 38518, 52415, 109378, 121515, 105589, 105140, 24960, 52518, 72745, 86770, 127907, 99869, 135148]
[2024-12-02 17:55:15.874697] user = 710 Cloud 30/568
[2024-12-02 17:55:15.923757] user = 710 Local 30/568
[2024-12-02 17:55:16.293121] user = 710 Local+ 30/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:55:18.511957] user = 710 MPDA- 30/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6120218579234973
Training on augumented user 93274 0/50 current_auc = 0.6120218579234973
User 93274 AUC after training: 0.6123094621800403
User 93274 improves AUC. Keeping the model.
Training on augumented user 67507 1/50 current_auc = 0.6123094621800403
User 67507 AUC after training: 0.6125251653724475
User 67507 improves AUC. Keeping the model.
Training on augumented user 16776 2/50 current_auc = 0.6125251653724475
User 16776 AUC after training: 0.6126689675007191
User 16776 improves AUC. Keeping the model.
Training on augumented user 95962 3/50 current_auc = 0.6126689675007191
User 95962 AUC after training: 0.6128846706931262
User 95962 improves AUC. Keeping the model.
Training on augumented user 13239 4/50 current_auc = 0.6128846706931262
User 13239 AUC after training: 0.6127408685648548
User 13239 does not improve AUC. Reverting changes.
Training on augumented user 10992 5/50 current_auc = 0.6128846706931262
User 10992 AUC after training: 0.613819384526891
User 10992 improves AUC. Keeping the model.
Training on augumented user 18584 6/50 current_auc = 0.613819384526891
User 18584 AUC after training: 0.6133879781420766
User 18584 does not improve AUC. Reverting changes.
Training on augumented user 83398 7/50 current_auc = 0.613819384526891
User 83398 AUC after training: 0.6133879781420766
User 83398 does not improve AUC. Reverting changes.
Training on augumented user 20530 8/50 current_auc = 0.613819384526891
User 20530 AUC after training: 0.613819384526891
User 20530 does not improve AUC. Reverting changes.
Training on augumented user 69151 9/50 current_auc = 0.613819384526891
User 69151 AUC after training: 0.6122375611159045
User 69151 does not improve AUC. Reverting changes.
Training on augumented user 105261 10/50 current_auc = 0.613819384526891
User 105261 AUC after training: 0.613819384526891
User 105261 does not improve AUC. Reverting changes.
Training on augumented user 27185 11/50 current_auc = 0.613819384526891
User 27185 AUC after training: 0.6136755823986195
User 27185 does not improve AUC. Reverting changes.
Training on augumented user 15347 12/50 current_auc = 0.613819384526891
User 15347 AUC after training: 0.6139631866551626
User 15347 improves AUC. Keeping the model.
Training on augumented user 90862 13/50 current_auc = 0.6139631866551626
User 90862 AUC after training: 0.6131722749496693
User 90862 does not improve AUC. Reverting changes.
Training on augumented user 136242 14/50 current_auc = 0.6139631866551626
User 136242 AUC after training: 0.6136755823986195
User 136242 does not improve AUC. Reverting changes.
Training on augumented user 73242 15/50 current_auc = 0.6139631866551626
User 73242 AUC after training: 0.6139631866551625
User 73242 does not improve AUC. Reverting changes.
Training on augumented user 61222 16/50 current_auc = 0.6139631866551626
User 61222 AUC after training: 0.6139631866551625
User 61222 does not improve AUC. Reverting changes.
Training on augumented user 63570 17/50 current_auc = 0.6139631866551626
User 63570 AUC after training: 0.613244176013805
User 63570 does not improve AUC. Reverting changes.
Training on augumented user 35024 18/50 current_auc = 0.6139631866551626
User 35024 AUC after training: 0.613531780270348
User 35024 does not improve AUC. Reverting changes.
Training on augumented user 114496 19/50 current_auc = 0.6139631866551626
User 114496 AUC after training: 0.6135317802703479
User 114496 does not improve AUC. Reverting changes.
Training on augumented user 8817 20/50 current_auc = 0.6139631866551626
User 8817 AUC after training: 0.613819384526891
User 8817 does not improve AUC. Reverting changes.
Training on augumented user 92507 21/50 current_auc = 0.6139631866551626
User 92507 AUC after training: 0.6134598792062123
User 92507 does not improve AUC. Reverting changes.
Training on augumented user 128266 22/50 current_auc = 0.6139631866551626
User 128266 AUC after training: 0.6131722749496692
User 128266 does not improve AUC. Reverting changes.
Training on augumented user 80244 23/50 current_auc = 0.6139631866551626
User 80244 AUC after training: 0.6130284728213978
User 80244 does not improve AUC. Reverting changes.
Training on augumented user 71333 24/50 current_auc = 0.6139631866551626
User 71333 AUC after training: 0.6136036813344838
User 71333 does not improve AUC. Reverting changes.
Training on augumented user 103983 25/50 current_auc = 0.6139631866551626
User 103983 AUC after training: 0.614394593039977
User 103983 improves AUC. Keeping the model.
Training on augumented user 28392 26/50 current_auc = 0.614394593039977
User 28392 AUC after training: 0.6138912855910268
User 28392 does not improve AUC. Reverting changes.
Training on augumented user 135248 27/50 current_auc = 0.614394593039977
User 135248 AUC after training: 0.6127408685648548
User 135248 does not improve AUC. Reverting changes.
Training on augumented user 105057 28/50 current_auc = 0.614394593039977
User 105057 AUC after training: 0.6131003738855335
User 105057 does not improve AUC. Reverting changes.
Training on augumented user 6135 29/50 current_auc = 0.614394593039977
User 6135 AUC after training: 0.6133160770779408
User 6135 does not improve AUC. Reverting changes.
Training on augumented user 129916 30/50 current_auc = 0.614394593039977
User 129916 AUC after training: 0.6126689675007191
User 129916 does not improve AUC. Reverting changes.
Training on augumented user 107193 31/50 current_auc = 0.614394593039977
User 107193 AUC after training: 0.6143226919758413
User 107193 does not improve AUC. Reverting changes.
Training on augumented user 18784 32/50 current_auc = 0.614394593039977
User 18784 AUC after training: 0.614394593039977
User 18784 does not improve AUC. Reverting changes.
Training on augumented user 45960 33/50 current_auc = 0.614394593039977
User 45960 AUC after training: 0.6133879781420766
User 45960 does not improve AUC. Reverting changes.
Training on augumented user 72849 34/50 current_auc = 0.614394593039977
User 72849 AUC after training: 0.6143226919758412
User 72849 does not improve AUC. Reverting changes.
Training on augumented user 42222 35/50 current_auc = 0.614394593039977
User 42222 AUC after training: 0.6140350877192983
User 42222 does not improve AUC. Reverting changes.
Training on augumented user 9743 36/50 current_auc = 0.614394593039977
User 9743 AUC after training: 0.6137474834627553
User 9743 does not improve AUC. Reverting changes.
Training on augumented user 38518 37/50 current_auc = 0.614394593039977
User 38518 AUC after training: 0.6136036813344838
User 38518 does not improve AUC. Reverting changes.
Training on augumented user 52415 38/50 current_auc = 0.614394593039977
User 52415 AUC after training: 0.6123813632441761
User 52415 does not improve AUC. Reverting changes.
Training on augumented user 109378 39/50 current_auc = 0.614394593039977
User 109378 AUC after training: 0.6144664941041128
User 109378 improves AUC. Keeping the model.
Training on augumented user 121515 40/50 current_auc = 0.6144664941041128
User 121515 AUC after training: 0.6136036813344838
User 121515 does not improve AUC. Reverting changes.
Training on augumented user 105589 41/50 current_auc = 0.6144664941041128
User 105589 AUC after training: 0.614394593039977
User 105589 does not improve AUC. Reverting changes.
Training on augumented user 105140 42/50 current_auc = 0.6144664941041128
User 105140 AUC after training: 0.6138912855910268
User 105140 does not improve AUC. Reverting changes.
Training on augumented user 24960 43/50 current_auc = 0.6144664941041128
User 24960 AUC after training: 0.6141069887834341
User 24960 does not improve AUC. Reverting changes.
Training on augumented user 52518 44/50 current_auc = 0.6144664941041128
User 52518 AUC after training: 0.6138912855910268
User 52518 does not improve AUC. Reverting changes.
Training on augumented user 72745 45/50 current_auc = 0.6144664941041128
User 72745 AUC after training: 0.6147540983606558
User 72745 improves AUC. Keeping the model.
Training on augumented user 86770 46/50 current_auc = 0.6147540983606558
User 86770 AUC after training: 0.61468219729652
User 86770 does not improve AUC. Reverting changes.
Training on augumented user 127907 47/50 current_auc = 0.6147540983606558
User 127907 AUC after training: 0.6143226919758413
User 127907 does not improve AUC. Reverting changes.
Training on augumented user 99869 48/50 current_auc = 0.6147540983606558
User 99869 AUC after training: 0.6141069887834341
User 99869 does not improve AUC. Reverting changes.
Training on augumented user 135148 49/50 current_auc = 0.6147540983606558
User 135148 AUC after training: 0.6142507909117055
User 135148 does not improve AUC. Reverting changes.
[2024-12-02 17:55:51.225123] start test user 735 31/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:55:52.140761] start test user 735 31/568 recall augumented users by random, augumented_users = [98149, 88689, 90620, 125166, 88092, 117030, 16011, 53002, 16284, 73849, 94080, 1191, 1879, 127773, 42200, 10294, 118348, 8954, 46827, 80070, 117875, 102434, 132676, 72157, 29333, 130938, 136287, 125332, 21311, 105153, 90182, 117195, 59627, 70143, 89103, 12268, 100929, 46301, 15323, 126495, 10782, 761, 118429, 42916, 14698, 77826, 21055, 71032, 45019, 79557]
[2024-12-02 17:55:52.165262] user = 735 Cloud 31/568
[2024-12-02 17:55:52.187581] user = 735 Local 31/568
[2024-12-02 17:55:52.243715] user = 735 Local+ 31/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:55:55.416270] user = 735 MPDA- 31/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6374239350912779
Training on augumented user 98149 0/50 current_auc = 0.6374239350912779
User 98149 AUC after training: 0.638184584178499
User 98149 improves AUC. Keeping the model.
Training on augumented user 88689 1/50 current_auc = 0.638184584178499
User 88689 AUC after training: 0.6383536173089926
User 88689 improves AUC. Keeping the model.
Training on augumented user 90620 2/50 current_auc = 0.6383536173089926
User 90620 AUC after training: 0.6397058823529411
User 90620 improves AUC. Keeping the model.
Training on augumented user 125166 3/50 current_auc = 0.6397058823529411
User 125166 AUC after training: 0.6422413793103449
User 125166 improves AUC. Keeping the model.
Training on augumented user 88092 4/50 current_auc = 0.6422413793103449
User 88092 AUC after training: 0.642156862745098
User 88092 does not improve AUC. Reverting changes.
Training on augumented user 117030 5/50 current_auc = 0.6422413793103449
User 117030 AUC after training: 0.6423258958755917
User 117030 improves AUC. Keeping the model.
Training on augumented user 16011 6/50 current_auc = 0.6423258958755917
User 16011 AUC after training: 0.6433400946585531
User 16011 improves AUC. Keeping the model.
Training on augumented user 53002 7/50 current_auc = 0.6433400946585531
User 53002 AUC after training: 0.6463826910074375
User 53002 improves AUC. Keeping the model.
Training on augumented user 16284 8/50 current_auc = 0.6463826910074375
User 16284 AUC after training: 0.645368492224476
User 16284 does not improve AUC. Reverting changes.
Training on augumented user 73849 9/50 current_auc = 0.6463826910074375
User 73849 AUC after training: 0.6460446247464503
User 73849 does not improve AUC. Reverting changes.
Training on augumented user 94080 10/50 current_auc = 0.6463826910074375
User 94080 AUC after training: 0.6447768762677485
User 94080 does not improve AUC. Reverting changes.
Training on augumented user 1191 11/50 current_auc = 0.6463826910074375
User 1191 AUC after training: 0.644185260311021
User 1191 does not improve AUC. Reverting changes.
Training on augumented user 1879 12/50 current_auc = 0.6463826910074375
User 1879 AUC after training: 0.6467207572684246
User 1879 improves AUC. Keeping the model.
Training on augumented user 127773 13/50 current_auc = 0.6467207572684246
User 127773 AUC after training: 0.6463826910074374
User 127773 does not improve AUC. Reverting changes.
Training on augumented user 42200 14/50 current_auc = 0.6467207572684246
User 42200 AUC after training: 0.6440162271805274
User 42200 does not improve AUC. Reverting changes.
Training on augumented user 10294 15/50 current_auc = 0.6467207572684246
User 10294 AUC after training: 0.6460446247464503
User 10294 does not improve AUC. Reverting changes.
Training on augumented user 118348 16/50 current_auc = 0.6467207572684246
User 118348 AUC after training: 0.6448613928329953
User 118348 does not improve AUC. Reverting changes.
Training on augumented user 8954 17/50 current_auc = 0.6467207572684246
User 8954 AUC after training: 0.6463826910074375
User 8954 does not improve AUC. Reverting changes.
Training on augumented user 46827 18/50 current_auc = 0.6467207572684246
User 46827 AUC after training: 0.6450304259634887
User 46827 does not improve AUC. Reverting changes.
Training on augumented user 80070 19/50 current_auc = 0.6467207572684246
User 80070 AUC after training: 0.6458755916159566
User 80070 does not improve AUC. Reverting changes.
Training on augumented user 117875 20/50 current_auc = 0.6467207572684246
User 117875 AUC after training: 0.6460446247464503
User 117875 does not improve AUC. Reverting changes.
Training on augumented user 102434 21/50 current_auc = 0.6467207572684246
User 102434 AUC after training: 0.6448613928329953
User 102434 does not improve AUC. Reverting changes.
Training on augumented user 132676 22/50 current_auc = 0.6467207572684246
User 132676 AUC after training: 0.6450304259634889
User 132676 does not improve AUC. Reverting changes.
Training on augumented user 72157 23/50 current_auc = 0.6467207572684246
User 72157 AUC after training: 0.645368492224476
User 72157 does not improve AUC. Reverting changes.
Training on augumented user 29333 24/50 current_auc = 0.6467207572684246
User 29333 AUC after training: 0.6404665314401623
User 29333 does not improve AUC. Reverting changes.
Training on augumented user 130938 25/50 current_auc = 0.6467207572684246
User 130938 AUC after training: 0.6417342799188641
User 130938 does not improve AUC. Reverting changes.
Training on augumented user 136287 26/50 current_auc = 0.6467207572684246
User 136287 AUC after training: 0.6457065584854631
User 136287 does not improve AUC. Reverting changes.
Training on augumented user 125332 27/50 current_auc = 0.6467207572684246
User 125332 AUC after training: 0.6468897903989181
User 125332 improves AUC. Keeping the model.
Training on augumented user 21311 28/50 current_auc = 0.6468897903989181
User 21311 AUC after training: 0.6460446247464504
User 21311 does not improve AUC. Reverting changes.
Training on augumented user 105153 29/50 current_auc = 0.6468897903989181
User 105153 AUC after training: 0.6458755916159566
User 105153 does not improve AUC. Reverting changes.
Training on augumented user 90182 30/50 current_auc = 0.6468897903989181
User 90182 AUC after training: 0.6455375253549694
User 90182 does not improve AUC. Reverting changes.
Training on augumented user 117195 31/50 current_auc = 0.6468897903989181
User 117195 AUC after training: 0.647396889790399
User 117195 improves AUC. Keeping the model.
Training on augumented user 59627 32/50 current_auc = 0.647396889790399
User 59627 AUC after training: 0.6453684922244759
User 59627 does not improve AUC. Reverting changes.
Training on augumented user 70143 33/50 current_auc = 0.647396889790399
User 70143 AUC after training: 0.6421568627450981
User 70143 does not improve AUC. Reverting changes.
Training on augumented user 89103 34/50 current_auc = 0.647396889790399
User 89103 AUC after training: 0.645368492224476
User 89103 does not improve AUC. Reverting changes.
Training on augumented user 12268 35/50 current_auc = 0.647396889790399
User 12268 AUC after training: 0.6468897903989183
User 12268 does not improve AUC. Reverting changes.
Training on augumented user 100929 36/50 current_auc = 0.647396889790399
User 100929 AUC after training: 0.6463826910074374
User 100929 does not improve AUC. Reverting changes.
Training on augumented user 46301 37/50 current_auc = 0.647396889790399
User 46301 AUC after training: 0.6468897903989183
User 46301 does not improve AUC. Reverting changes.
Training on augumented user 15323 38/50 current_auc = 0.647396889790399
User 15323 AUC after training: 0.6463826910074374
User 15323 does not improve AUC. Reverting changes.
Training on augumented user 126495 39/50 current_auc = 0.647396889790399
User 126495 AUC after training: 0.646551724137931
User 126495 does not improve AUC. Reverting changes.
Training on augumented user 10782 40/50 current_auc = 0.647396889790399
User 10782 AUC after training: 0.6470588235294118
User 10782 does not improve AUC. Reverting changes.
Training on augumented user 761 41/50 current_auc = 0.647396889790399
User 761 AUC after training: 0.6454530087897228
User 761 does not improve AUC. Reverting changes.
Training on augumented user 118429 42/50 current_auc = 0.647396889790399
User 118429 AUC after training: 0.6463826910074375
User 118429 does not improve AUC. Reverting changes.
Training on augumented user 42916 43/50 current_auc = 0.647396889790399
User 42916 AUC after training: 0.6467207572684246
User 42916 does not improve AUC. Reverting changes.
Training on augumented user 14698 44/50 current_auc = 0.647396889790399
User 14698 AUC after training: 0.6468052738336714
User 14698 does not improve AUC. Reverting changes.
Training on augumented user 77826 45/50 current_auc = 0.647396889790399
User 77826 AUC after training: 0.646551724137931
User 77826 does not improve AUC. Reverting changes.
Training on augumented user 21055 46/50 current_auc = 0.647396889790399
User 21055 AUC after training: 0.6435091277890467
User 21055 does not improve AUC. Reverting changes.
Training on augumented user 71032 47/50 current_auc = 0.647396889790399
User 71032 AUC after training: 0.6462136578769438
User 71032 does not improve AUC. Reverting changes.
Training on augumented user 45019 48/50 current_auc = 0.647396889790399
User 45019 AUC after training: 0.6479039891818796
User 45019 improves AUC. Keeping the model.
Training on augumented user 79557 49/50 current_auc = 0.6479039891818796
User 79557 AUC after training: 0.6470588235294119
User 79557 does not improve AUC. Reverting changes.
[2024-12-02 17:56:26.132241] start test user 739 32/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:56:26.595372] start test user 739 32/568 recall augumented users by random, augumented_users = [95380, 61196, 43472, 48536, 51934, 122864, 20978, 11119, 91918, 100079, 80289, 1323, 88333, 41688, 43429, 62502, 70052, 29257, 41294, 30657, 106345, 70279, 86384, 49123, 110062, 109247, 35840, 41419, 39068, 138269, 82176, 43591, 71515, 79689, 99456, 6985, 94746, 59159, 15168, 81152, 135370, 129869, 28369, 118940, 116588, 74026, 18054, 53022, 117089, 2623]
[2024-12-02 17:56:26.611636] user = 739 Cloud 32/568
[2024-12-02 17:56:26.642093] user = 739 Local 32/568
[2024-12-02 17:56:26.715964] user = 739 Local+ 32/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:56:29.279302] user = 739 MPDA- 32/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6155427631578948
Training on augumented user 95380 0/50 current_auc = 0.6155427631578948
User 95380 AUC after training: 0.6152063397129186
User 95380 does not improve AUC. Reverting changes.
Training on augumented user 61196 1/50 current_auc = 0.6155427631578948
User 61196 AUC after training: 0.6155427631578947
User 61196 does not improve AUC. Reverting changes.
Training on augumented user 43472 2/50 current_auc = 0.6155427631578948
User 43472 AUC after training: 0.6153184808612441
User 43472 does not improve AUC. Reverting changes.
Training on augumented user 48536 3/50 current_auc = 0.6155427631578948
User 48536 AUC after training: 0.6156922846889952
User 48536 improves AUC. Keeping the model.
Training on augumented user 51934 4/50 current_auc = 0.6156922846889952
User 51934 AUC after training: 0.6153558612440191
User 51934 does not improve AUC. Reverting changes.
Training on augumented user 122864 5/50 current_auc = 0.6156922846889952
User 122864 AUC after training: 0.6153558612440192
User 122864 does not improve AUC. Reverting changes.
Training on augumented user 20978 6/50 current_auc = 0.6156922846889952
User 20978 AUC after training: 0.6172248803827751
User 20978 improves AUC. Keeping the model.
Training on augumented user 11119 7/50 current_auc = 0.6172248803827751
User 11119 AUC after training: 0.6172248803827751
User 11119 does not improve AUC. Reverting changes.
Training on augumented user 91918 8/50 current_auc = 0.6172248803827751
User 91918 AUC after training: 0.6166641746411483
User 91918 does not improve AUC. Reverting changes.
Training on augumented user 100079 9/50 current_auc = 0.6172248803827751
User 100079 AUC after training: 0.6162903708133971
User 100079 does not improve AUC. Reverting changes.
Training on augumented user 80289 10/50 current_auc = 0.6172248803827751
User 80289 AUC after training: 0.6174117822966507
User 80289 improves AUC. Keeping the model.
Training on augumented user 1323 11/50 current_auc = 0.6174117822966507
User 1323 AUC after training: 0.6180846291866029
User 1323 improves AUC. Keeping the model.
Training on augumented user 88333 12/50 current_auc = 0.6180846291866029
User 88333 AUC after training: 0.6180472488038278
User 88333 does not improve AUC. Reverting changes.
Training on augumented user 41688 13/50 current_auc = 0.6180846291866029
User 41688 AUC after training: 0.618122009569378
User 41688 improves AUC. Keeping the model.
Training on augumented user 43429 14/50 current_auc = 0.618122009569378
User 43429 AUC after training: 0.6179724880382775
User 43429 does not improve AUC. Reverting changes.
Training on augumented user 62502 15/50 current_auc = 0.618122009569378
User 62502 AUC after training: 0.6175239234449761
User 62502 does not improve AUC. Reverting changes.
Training on augumented user 70052 16/50 current_auc = 0.618122009569378
User 70052 AUC after training: 0.6179724880382775
User 70052 does not improve AUC. Reverting changes.
Training on augumented user 29257 17/50 current_auc = 0.618122009569378
User 29257 AUC after training: 0.61872009569378
User 29257 improves AUC. Keeping the model.
Training on augumented user 41294 18/50 current_auc = 0.61872009569378
User 41294 AUC after training: 0.6188322368421053
User 41294 improves AUC. Keeping the model.
Training on augumented user 30657 19/50 current_auc = 0.6188322368421053
User 30657 AUC after training: 0.6187574760765551
User 30657 does not improve AUC. Reverting changes.
Training on augumented user 106345 20/50 current_auc = 0.6188322368421053
User 106345 AUC after training: 0.6184958133971292
User 106345 does not improve AUC. Reverting changes.
Training on augumented user 70279 21/50 current_auc = 0.6188322368421053
User 70279 AUC after training: 0.6177855861244019
User 70279 does not improve AUC. Reverting changes.
Training on augumented user 86384 22/50 current_auc = 0.6188322368421053
User 86384 AUC after training: 0.6184584330143541
User 86384 does not improve AUC. Reverting changes.
Training on augumented user 49123 23/50 current_auc = 0.6188322368421053
User 49123 AUC after training: 0.6189443779904307
User 49123 improves AUC. Keeping the model.
Training on augumented user 110062 24/50 current_auc = 0.6189443779904307
User 110062 AUC after training: 0.6190565191387559
User 110062 improves AUC. Keeping the model.
Training on augumented user 109247 25/50 current_auc = 0.6190565191387559
User 109247 AUC after training: 0.6189069976076556
User 109247 does not improve AUC. Reverting changes.
Training on augumented user 35840 26/50 current_auc = 0.6190565191387559
User 35840 AUC after training: 0.6190191387559809
User 35840 does not improve AUC. Reverting changes.
Training on augumented user 41419 27/50 current_auc = 0.6190565191387559
User 41419 AUC after training: 0.6190938995215312
User 41419 improves AUC. Keeping the model.
Training on augumented user 39068 28/50 current_auc = 0.6190938995215312
User 39068 AUC after training: 0.6192808014354066
User 39068 improves AUC. Keeping the model.
Training on augumented user 138269 29/50 current_auc = 0.6192808014354066
User 138269 AUC after training: 0.6192434210526316
User 138269 does not improve AUC. Reverting changes.
Training on augumented user 82176 30/50 current_auc = 0.6192808014354066
User 82176 AUC after training: 0.6194303229665071
User 82176 improves AUC. Keeping the model.
Training on augumented user 43591 31/50 current_auc = 0.6194303229665071
User 43591 AUC after training: 0.6194677033492824
User 43591 improves AUC. Keeping the model.
Training on augumented user 71515 32/50 current_auc = 0.6194677033492824
User 71515 AUC after training: 0.6184958133971291
User 71515 does not improve AUC. Reverting changes.
Training on augumented user 79689 33/50 current_auc = 0.6194677033492824
User 79689 AUC after training: 0.6192808014354068
User 79689 does not improve AUC. Reverting changes.
Training on augumented user 99456 34/50 current_auc = 0.6194677033492824
User 99456 AUC after training: 0.619056519138756
User 99456 does not improve AUC. Reverting changes.
Training on augumented user 6985 35/50 current_auc = 0.6194677033492824
User 6985 AUC after training: 0.619991028708134
User 6985 improves AUC. Keeping the model.
Training on augumented user 94746 36/50 current_auc = 0.619991028708134
User 94746 AUC after training: 0.6199162679425837
User 94746 does not improve AUC. Reverting changes.
Training on augumented user 59159 37/50 current_auc = 0.619991028708134
User 59159 AUC after training: 0.6200657894736842
User 59159 improves AUC. Keeping the model.
Training on augumented user 15168 38/50 current_auc = 0.6200657894736842
User 15168 AUC after training: 0.6196546052631579
User 15168 does not improve AUC. Reverting changes.
Training on augumented user 81152 39/50 current_auc = 0.6200657894736842
User 81152 AUC after training: 0.6198415071770336
User 81152 does not improve AUC. Reverting changes.
Training on augumented user 135370 40/50 current_auc = 0.6200657894736842
User 135370 AUC after training: 0.6203648325358851
User 135370 improves AUC. Keeping the model.
Training on augumented user 129869 41/50 current_auc = 0.6203648325358851
User 129869 AUC after training: 0.6204769736842105
User 129869 improves AUC. Keeping the model.
Training on augumented user 28369 42/50 current_auc = 0.6204769736842105
User 28369 AUC after training: 0.6204022129186604
User 28369 does not improve AUC. Reverting changes.
Training on augumented user 118940 43/50 current_auc = 0.6204769736842105
User 118940 AUC after training: 0.6203274521531101
User 118940 does not improve AUC. Reverting changes.
Training on augumented user 116588 44/50 current_auc = 0.6204769736842105
User 116588 AUC after training: 0.6204022129186604
User 116588 does not improve AUC. Reverting changes.
Training on augumented user 74026 45/50 current_auc = 0.6204769736842105
User 74026 AUC after training: 0.6207386363636364
User 74026 improves AUC. Keeping the model.
Training on augumented user 18054 46/50 current_auc = 0.6207386363636364
User 18054 AUC after training: 0.6204769736842105
User 18054 does not improve AUC. Reverting changes.
Training on augumented user 53022 47/50 current_auc = 0.6207386363636364
User 53022 AUC after training: 0.6205891148325359
User 53022 does not improve AUC. Reverting changes.
Training on augumented user 117089 48/50 current_auc = 0.6207386363636364
User 117089 AUC after training: 0.6202526913875598
User 117089 does not improve AUC. Reverting changes.
Training on augumented user 2623 49/50 current_auc = 0.6207386363636364
User 2623 AUC after training: 0.6205143540669856
User 2623 does not improve AUC. Reverting changes.
[2024-12-02 17:57:04.177795] start test user 744 33/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:57:04.693958] start test user 744 33/568 recall augumented users by random, augumented_users = [70859, 25185, 38437, 63272, 91266, 42760, 52202, 47767, 38462, 93908, 86210, 19813, 71807, 80480, 103867, 126729, 78137, 123132, 10845, 59685, 69632, 64372, 58295, 97007, 127397, 69801, 18353, 122446, 135564, 93050, 73161, 86735, 39428, 11368, 57485, 87160, 84171, 40445, 12622, 69019, 48317, 56954, 31649, 92666, 30890, 10953, 78209, 60970, 115684, 68519]
[2024-12-02 17:57:04.711532] user = 744 Cloud 33/568
[2024-12-02 17:57:04.722812] user = 744 Local 33/568
[2024-12-02 17:57:04.836033] user = 744 Local+ 33/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:57:07.481217] user = 744 MPDA- 33/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.573076923076923
Training on augumented user 70859 0/50 current_auc = 0.573076923076923
User 70859 AUC after training: 0.573076923076923
User 70859 does not improve AUC. Reverting changes.
Training on augumented user 25185 1/50 current_auc = 0.573076923076923
User 25185 AUC after training: 0.573076923076923
User 25185 does not improve AUC. Reverting changes.
Training on augumented user 38437 2/50 current_auc = 0.573076923076923
User 38437 AUC after training: 0.573076923076923
User 38437 does not improve AUC. Reverting changes.
Training on augumented user 63272 3/50 current_auc = 0.573076923076923
User 63272 AUC after training: 0.573076923076923
User 63272 does not improve AUC. Reverting changes.
Training on augumented user 91266 4/50 current_auc = 0.573076923076923
User 91266 AUC after training: 0.5692307692307692
User 91266 does not improve AUC. Reverting changes.
Training on augumented user 42760 5/50 current_auc = 0.573076923076923
User 42760 AUC after training: 0.573076923076923
User 42760 does not improve AUC. Reverting changes.
Training on augumented user 52202 6/50 current_auc = 0.573076923076923
User 52202 AUC after training: 0.573076923076923
User 52202 does not improve AUC. Reverting changes.
Training on augumented user 47767 7/50 current_auc = 0.573076923076923
User 47767 AUC after training: 0.573076923076923
User 47767 does not improve AUC. Reverting changes.
Training on augumented user 38462 8/50 current_auc = 0.573076923076923
User 38462 AUC after training: 0.573076923076923
User 38462 does not improve AUC. Reverting changes.
Training on augumented user 93908 9/50 current_auc = 0.573076923076923
User 93908 AUC after training: 0.573076923076923
User 93908 does not improve AUC. Reverting changes.
Training on augumented user 86210 10/50 current_auc = 0.573076923076923
User 86210 AUC after training: 0.5692307692307692
User 86210 does not improve AUC. Reverting changes.
Training on augumented user 19813 11/50 current_auc = 0.573076923076923
User 19813 AUC after training: 0.5692307692307692
User 19813 does not improve AUC. Reverting changes.
Training on augumented user 71807 12/50 current_auc = 0.573076923076923
User 71807 AUC after training: 0.573076923076923
User 71807 does not improve AUC. Reverting changes.
Training on augumented user 80480 13/50 current_auc = 0.573076923076923
User 80480 AUC after training: 0.573076923076923
User 80480 does not improve AUC. Reverting changes.
Training on augumented user 103867 14/50 current_auc = 0.573076923076923
User 103867 AUC after training: 0.573076923076923
User 103867 does not improve AUC. Reverting changes.
Training on augumented user 126729 15/50 current_auc = 0.573076923076923
User 126729 AUC after training: 0.573076923076923
User 126729 does not improve AUC. Reverting changes.
Training on augumented user 78137 16/50 current_auc = 0.573076923076923
User 78137 AUC after training: 0.573076923076923
User 78137 does not improve AUC. Reverting changes.
Training on augumented user 123132 17/50 current_auc = 0.573076923076923
User 123132 AUC after training: 0.5692307692307692
User 123132 does not improve AUC. Reverting changes.
Training on augumented user 10845 18/50 current_auc = 0.573076923076923
User 10845 AUC after training: 0.573076923076923
User 10845 does not improve AUC. Reverting changes.
Training on augumented user 59685 19/50 current_auc = 0.573076923076923
User 59685 AUC after training: 0.573076923076923
User 59685 does not improve AUC. Reverting changes.
Training on augumented user 69632 20/50 current_auc = 0.573076923076923
User 69632 AUC after training: 0.573076923076923
User 69632 does not improve AUC. Reverting changes.
Training on augumented user 64372 21/50 current_auc = 0.573076923076923
User 64372 AUC after training: 0.5692307692307692
User 64372 does not improve AUC. Reverting changes.
Training on augumented user 58295 22/50 current_auc = 0.573076923076923
User 58295 AUC after training: 0.573076923076923
User 58295 does not improve AUC. Reverting changes.
Training on augumented user 97007 23/50 current_auc = 0.573076923076923
User 97007 AUC after training: 0.5692307692307692
User 97007 does not improve AUC. Reverting changes.
Training on augumented user 127397 24/50 current_auc = 0.573076923076923
User 127397 AUC after training: 0.573076923076923
User 127397 does not improve AUC. Reverting changes.
Training on augumented user 69801 25/50 current_auc = 0.573076923076923
User 69801 AUC after training: 0.5692307692307692
User 69801 does not improve AUC. Reverting changes.
Training on augumented user 18353 26/50 current_auc = 0.573076923076923
User 18353 AUC after training: 0.5692307692307692
User 18353 does not improve AUC. Reverting changes.
Training on augumented user 122446 27/50 current_auc = 0.573076923076923
User 122446 AUC after training: 0.573076923076923
User 122446 does not improve AUC. Reverting changes.
Training on augumented user 135564 28/50 current_auc = 0.573076923076923
User 135564 AUC after training: 0.573076923076923
User 135564 does not improve AUC. Reverting changes.
Training on augumented user 93050 29/50 current_auc = 0.573076923076923
User 93050 AUC after training: 0.573076923076923
User 93050 does not improve AUC. Reverting changes.
Training on augumented user 73161 30/50 current_auc = 0.573076923076923
User 73161 AUC after training: 0.573076923076923
User 73161 does not improve AUC. Reverting changes.
Training on augumented user 86735 31/50 current_auc = 0.573076923076923
User 86735 AUC after training: 0.573076923076923
User 86735 does not improve AUC. Reverting changes.
Training on augumented user 39428 32/50 current_auc = 0.573076923076923
User 39428 AUC after training: 0.5692307692307692
User 39428 does not improve AUC. Reverting changes.
Training on augumented user 11368 33/50 current_auc = 0.573076923076923
User 11368 AUC after training: 0.5692307692307692
User 11368 does not improve AUC. Reverting changes.
Training on augumented user 57485 34/50 current_auc = 0.573076923076923
User 57485 AUC after training: 0.5692307692307692
User 57485 does not improve AUC. Reverting changes.
Training on augumented user 87160 35/50 current_auc = 0.573076923076923
User 87160 AUC after training: 0.573076923076923
User 87160 does not improve AUC. Reverting changes.
Training on augumented user 84171 36/50 current_auc = 0.573076923076923
User 84171 AUC after training: 0.573076923076923
User 84171 does not improve AUC. Reverting changes.
Training on augumented user 40445 37/50 current_auc = 0.573076923076923
User 40445 AUC after training: 0.573076923076923
User 40445 does not improve AUC. Reverting changes.
Training on augumented user 12622 38/50 current_auc = 0.573076923076923
User 12622 AUC after training: 0.573076923076923
User 12622 does not improve AUC. Reverting changes.
Training on augumented user 69019 39/50 current_auc = 0.573076923076923
User 69019 AUC after training: 0.5692307692307692
User 69019 does not improve AUC. Reverting changes.
Training on augumented user 48317 40/50 current_auc = 0.573076923076923
User 48317 AUC after training: 0.573076923076923
User 48317 does not improve AUC. Reverting changes.
Training on augumented user 56954 41/50 current_auc = 0.573076923076923
User 56954 AUC after training: 0.5692307692307692
User 56954 does not improve AUC. Reverting changes.
Training on augumented user 31649 42/50 current_auc = 0.573076923076923
User 31649 AUC after training: 0.573076923076923
User 31649 does not improve AUC. Reverting changes.
Training on augumented user 92666 43/50 current_auc = 0.573076923076923
User 92666 AUC after training: 0.573076923076923
User 92666 does not improve AUC. Reverting changes.
Training on augumented user 30890 44/50 current_auc = 0.573076923076923
User 30890 AUC after training: 0.5692307692307692
User 30890 does not improve AUC. Reverting changes.
Training on augumented user 10953 45/50 current_auc = 0.573076923076923
User 10953 AUC after training: 0.573076923076923
User 10953 does not improve AUC. Reverting changes.
Training on augumented user 78209 46/50 current_auc = 0.573076923076923
User 78209 AUC after training: 0.5692307692307692
User 78209 does not improve AUC. Reverting changes.
Training on augumented user 60970 47/50 current_auc = 0.573076923076923
User 60970 AUC after training: 0.573076923076923
User 60970 does not improve AUC. Reverting changes.
Training on augumented user 115684 48/50 current_auc = 0.573076923076923
User 115684 AUC after training: 0.573076923076923
User 115684 does not improve AUC. Reverting changes.
Training on augumented user 68519 49/50 current_auc = 0.573076923076923
User 68519 AUC after training: 0.573076923076923
User 68519 does not improve AUC. Reverting changes.
[2024-12-02 17:57:42.732949] start test user 764 34/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:57:43.462707] start test user 764 34/568 recall augumented users by random, augumented_users = [107660, 32087, 41578, 100772, 61000, 130785, 27261, 107713, 122595, 12640, 113548, 97398, 100849, 137830, 100355, 137746, 75579, 116572, 18564, 119563, 83121, 31661, 28890, 64888, 134554, 2738, 43480, 74115, 65837, 23988, 17095, 88467, 116147, 60252, 1209, 52265, 110807, 57236, 63543, 23788, 127603, 38641, 12472, 19967, 7278, 37969, 134485, 118689, 72240, 759]
[2024-12-02 17:57:43.478846] user = 764 Cloud 34/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:57:43.493161] user = 764 Local 34/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:57:43.525306] user = 764 Local+ 34/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:57:46.658780] user = 764 MPDA- 34/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 107660 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107660 AUC after training: 0.5
User 107660 does not improve AUC. Reverting changes.
Training on augumented user 32087 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32087 AUC after training: 0.5
User 32087 does not improve AUC. Reverting changes.
Training on augumented user 41578 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41578 AUC after training: 0.5
User 41578 does not improve AUC. Reverting changes.
Training on augumented user 100772 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100772 AUC after training: 0.5
User 100772 does not improve AUC. Reverting changes.
Training on augumented user 61000 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61000 AUC after training: 0.5
User 61000 does not improve AUC. Reverting changes.
Training on augumented user 130785 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130785 AUC after training: 0.5
User 130785 does not improve AUC. Reverting changes.
Training on augumented user 27261 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27261 AUC after training: 0.5
User 27261 does not improve AUC. Reverting changes.
Training on augumented user 107713 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107713 AUC after training: 0.5
User 107713 does not improve AUC. Reverting changes.
Training on augumented user 122595 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122595 AUC after training: 0.5
User 122595 does not improve AUC. Reverting changes.
Training on augumented user 12640 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12640 AUC after training: 0.5
User 12640 does not improve AUC. Reverting changes.
Training on augumented user 113548 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113548 AUC after training: 0.5
User 113548 does not improve AUC. Reverting changes.
Training on augumented user 97398 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97398 AUC after training: 0.5
User 97398 does not improve AUC. Reverting changes.
Training on augumented user 100849 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100849 AUC after training: 0.5
User 100849 does not improve AUC. Reverting changes.
Training on augumented user 137830 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137830 AUC after training: 0.5
User 137830 does not improve AUC. Reverting changes.
Training on augumented user 100355 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100355 AUC after training: 0.5
User 100355 does not improve AUC. Reverting changes.
Training on augumented user 137746 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137746 AUC after training: 0.5
User 137746 does not improve AUC. Reverting changes.
Training on augumented user 75579 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75579 AUC after training: 0.5
User 75579 does not improve AUC. Reverting changes.
Training on augumented user 116572 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116572 AUC after training: 0.5
User 116572 does not improve AUC. Reverting changes.
Training on augumented user 18564 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18564 AUC after training: 0.5
User 18564 does not improve AUC. Reverting changes.
Training on augumented user 119563 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119563 AUC after training: 0.5
User 119563 does not improve AUC. Reverting changes.
Training on augumented user 83121 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83121 AUC after training: 0.5
User 83121 does not improve AUC. Reverting changes.
Training on augumented user 31661 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31661 AUC after training: 0.5
User 31661 does not improve AUC. Reverting changes.
Training on augumented user 28890 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28890 AUC after training: 0.5
User 28890 does not improve AUC. Reverting changes.
Training on augumented user 64888 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64888 AUC after training: 0.5
User 64888 does not improve AUC. Reverting changes.
Training on augumented user 134554 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134554 AUC after training: 0.5
User 134554 does not improve AUC. Reverting changes.
Training on augumented user 2738 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2738 AUC after training: 0.5
User 2738 does not improve AUC. Reverting changes.
Training on augumented user 43480 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43480 AUC after training: 0.5
User 43480 does not improve AUC. Reverting changes.
Training on augumented user 74115 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74115 AUC after training: 0.5
User 74115 does not improve AUC. Reverting changes.
Training on augumented user 65837 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65837 AUC after training: 0.5
User 65837 does not improve AUC. Reverting changes.
Training on augumented user 23988 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23988 AUC after training: 0.5
User 23988 does not improve AUC. Reverting changes.
Training on augumented user 17095 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17095 AUC after training: 0.5
User 17095 does not improve AUC. Reverting changes.
Training on augumented user 88467 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88467 AUC after training: 0.5
User 88467 does not improve AUC. Reverting changes.
Training on augumented user 116147 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116147 AUC after training: 0.5
User 116147 does not improve AUC. Reverting changes.
Training on augumented user 60252 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60252 AUC after training: 0.5
User 60252 does not improve AUC. Reverting changes.
Training on augumented user 1209 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1209 AUC after training: 0.5
User 1209 does not improve AUC. Reverting changes.
Training on augumented user 52265 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52265 AUC after training: 0.5
User 52265 does not improve AUC. Reverting changes.
Training on augumented user 110807 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110807 AUC after training: 0.5
User 110807 does not improve AUC. Reverting changes.
Training on augumented user 57236 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57236 AUC after training: 0.5
User 57236 does not improve AUC. Reverting changes.
Training on augumented user 63543 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63543 AUC after training: 0.5
User 63543 does not improve AUC. Reverting changes.
Training on augumented user 23788 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23788 AUC after training: 0.5
User 23788 does not improve AUC. Reverting changes.
Training on augumented user 127603 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127603 AUC after training: 0.5
User 127603 does not improve AUC. Reverting changes.
Training on augumented user 38641 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38641 AUC after training: 0.5
User 38641 does not improve AUC. Reverting changes.
Training on augumented user 12472 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12472 AUC after training: 0.5
User 12472 does not improve AUC. Reverting changes.
Training on augumented user 19967 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19967 AUC after training: 0.5
User 19967 does not improve AUC. Reverting changes.
Training on augumented user 7278 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7278 AUC after training: 0.5
User 7278 does not improve AUC. Reverting changes.
Training on augumented user 37969 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37969 AUC after training: 0.5
User 37969 does not improve AUC. Reverting changes.
Training on augumented user 134485 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134485 AUC after training: 0.5
User 134485 does not improve AUC. Reverting changes.
Training on augumented user 118689 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118689 AUC after training: 0.5
User 118689 does not improve AUC. Reverting changes.
Training on augumented user 72240 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72240 AUC after training: 0.5
User 72240 does not improve AUC. Reverting changes.
Training on augumented user 759 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 759 AUC after training: 0.5
User 759 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:58:16.799242] start test user 768 35/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:58:17.271769] start test user 768 35/568 recall augumented users by random, augumented_users = [42119, 136623, 115574, 129304, 5873, 128043, 120894, 31435, 71806, 19292, 10744, 107360, 78865, 22528, 49136, 15602, 4946, 95505, 103199, 56790, 63548, 52060, 14912, 115942, 103985, 6659, 31418, 33855, 113006, 137951, 1103, 26397, 98677, 73014, 19530, 121954, 119420, 51994, 26879, 134181, 119830, 113530, 96231, 58090, 100596, 46674, 79463, 12916, 95569, 69559]
[2024-12-02 17:58:17.290420] user = 768 Cloud 35/568
[2024-12-02 17:58:17.338196] user = 768 Local 35/568
[2024-12-02 17:58:17.602955] user = 768 Local+ 35/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:58:19.987006] user = 768 MPDA- 35/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6599469496021221
Training on augumented user 42119 0/50 current_auc = 0.6599469496021221
User 42119 AUC after training: 0.6606432360742706
User 42119 improves AUC. Keeping the model.
Training on augumented user 136623 1/50 current_auc = 0.6606432360742706
User 136623 AUC after training: 0.6608753315649867
User 136623 improves AUC. Keeping the model.
Training on augumented user 115574 2/50 current_auc = 0.6608753315649867
User 115574 AUC after training: 0.6602785145888593
User 115574 does not improve AUC. Reverting changes.
Training on augumented user 129304 3/50 current_auc = 0.6608753315649867
User 129304 AUC after training: 0.6610742705570292
User 129304 improves AUC. Keeping the model.
Training on augumented user 5873 4/50 current_auc = 0.6610742705570292
User 5873 AUC after training: 0.6604940318302387
User 5873 does not improve AUC. Reverting changes.
Training on augumented user 128043 5/50 current_auc = 0.6610742705570292
User 128043 AUC after training: 0.6600629973474801
User 128043 does not improve AUC. Reverting changes.
Training on augumented user 120894 6/50 current_auc = 0.6610742705570292
User 120894 AUC after training: 0.6614058355437666
User 120894 improves AUC. Keeping the model.
Training on augumented user 31435 7/50 current_auc = 0.6614058355437666
User 31435 AUC after training: 0.6600629973474801
User 31435 does not improve AUC. Reverting changes.
Training on augumented user 71806 8/50 current_auc = 0.6614058355437666
User 71806 AUC after training: 0.6607095490716179
User 71806 does not improve AUC. Reverting changes.
Training on augumented user 19292 9/50 current_auc = 0.6614058355437666
User 19292 AUC after training: 0.6612400530503979
User 19292 does not improve AUC. Reverting changes.
Training on augumented user 10744 10/50 current_auc = 0.6614058355437666
User 10744 AUC after training: 0.6595822281167107
User 10744 does not improve AUC. Reverting changes.
Training on augumented user 107360 11/50 current_auc = 0.6614058355437666
User 107360 AUC after training: 0.6610742705570292
User 107360 does not improve AUC. Reverting changes.
Training on augumented user 78865 12/50 current_auc = 0.6614058355437666
User 78865 AUC after training: 0.6615053050397879
User 78865 improves AUC. Keeping the model.
Training on augumented user 22528 13/50 current_auc = 0.6615053050397879
User 22528 AUC after training: 0.6610742705570292
User 22528 does not improve AUC. Reverting changes.
Training on augumented user 49136 14/50 current_auc = 0.6615053050397879
User 49136 AUC after training: 0.6613063660477453
User 49136 does not improve AUC. Reverting changes.
Training on augumented user 15602 15/50 current_auc = 0.6615053050397879
User 15602 AUC after training: 0.6611405835543767
User 15602 does not improve AUC. Reverting changes.
Training on augumented user 4946 16/50 current_auc = 0.6615053050397879
User 4946 AUC after training: 0.6611405835543767
User 4946 does not improve AUC. Reverting changes.
Training on augumented user 95505 17/50 current_auc = 0.6615053050397879
User 95505 AUC after training: 0.6613395225464191
User 95505 does not improve AUC. Reverting changes.
Training on augumented user 103199 18/50 current_auc = 0.6615053050397879
User 103199 AUC after training: 0.6607261273209549
User 103199 does not improve AUC. Reverting changes.
Training on augumented user 56790 19/50 current_auc = 0.6615053050397879
User 56790 AUC after training: 0.6600464190981432
User 56790 does not improve AUC. Reverting changes.
Training on augumented user 63548 20/50 current_auc = 0.6615053050397879
User 63548 AUC after training: 0.6618037135278515
User 63548 improves AUC. Keeping the model.
Training on augumented user 52060 21/50 current_auc = 0.6618037135278515
User 52060 AUC after training: 0.6618700265251989
User 52060 improves AUC. Keeping the model.
Training on augumented user 14912 22/50 current_auc = 0.6618700265251989
User 14912 AUC after training: 0.6616379310344828
User 14912 does not improve AUC. Reverting changes.
Training on augumented user 115942 23/50 current_auc = 0.6618700265251989
User 115942 AUC after training: 0.6616545092838196
User 115942 does not improve AUC. Reverting changes.
Training on augumented user 103985 24/50 current_auc = 0.6618700265251989
User 103985 AUC after training: 0.6616379310344828
User 103985 does not improve AUC. Reverting changes.
Training on augumented user 6659 25/50 current_auc = 0.6618700265251989
User 6659 AUC after training: 0.6613892572944298
User 6659 does not improve AUC. Reverting changes.
Training on augumented user 31418 26/50 current_auc = 0.6618700265251989
User 31418 AUC after training: 0.6618037135278514
User 31418 does not improve AUC. Reverting changes.
Training on augumented user 33855 27/50 current_auc = 0.6618700265251989
User 33855 AUC after training: 0.6616710875331565
User 33855 does not improve AUC. Reverting changes.
Training on augumented user 113006 28/50 current_auc = 0.6618700265251989
User 113006 AUC after training: 0.6620358090185676
User 113006 improves AUC. Keeping the model.
Training on augumented user 137951 29/50 current_auc = 0.6620358090185676
User 137951 AUC after training: 0.6619031830238726
User 137951 does not improve AUC. Reverting changes.
Training on augumented user 1103 30/50 current_auc = 0.6620358090185676
User 1103 AUC after training: 0.661870026525199
User 1103 does not improve AUC. Reverting changes.
Training on augumented user 26397 31/50 current_auc = 0.6620358090185676
User 26397 AUC after training: 0.6619031830238726
User 26397 does not improve AUC. Reverting changes.
Training on augumented user 98677 32/50 current_auc = 0.6620358090185676
User 98677 AUC after training: 0.6616710875331564
User 98677 does not improve AUC. Reverting changes.
Training on augumented user 73014 33/50 current_auc = 0.6620358090185676
User 73014 AUC after training: 0.6621352785145889
User 73014 improves AUC. Keeping the model.
Training on augumented user 19530 34/50 current_auc = 0.6621352785145889
User 19530 AUC after training: 0.6619694960212201
User 19530 does not improve AUC. Reverting changes.
Training on augumented user 121954 35/50 current_auc = 0.6621352785145889
User 121954 AUC after training: 0.6622015915119364
User 121954 improves AUC. Keeping the model.
Training on augumented user 119420 36/50 current_auc = 0.6622015915119364
User 119420 AUC after training: 0.6621684350132626
User 119420 does not improve AUC. Reverting changes.
Training on augumented user 51994 37/50 current_auc = 0.6622015915119364
User 51994 AUC after training: 0.6605106100795755
User 51994 does not improve AUC. Reverting changes.
Training on augumented user 26879 38/50 current_auc = 0.6622015915119364
User 26879 AUC after training: 0.6622347480106101
User 26879 improves AUC. Keeping the model.
Training on augumented user 134181 39/50 current_auc = 0.6622347480106101
User 134181 AUC after training: 0.6608421750663129
User 134181 does not improve AUC. Reverting changes.
Training on augumented user 119830 40/50 current_auc = 0.6622347480106101
User 119830 AUC after training: 0.6621352785145889
User 119830 does not improve AUC. Reverting changes.
Training on augumented user 113530 41/50 current_auc = 0.6622347480106101
User 113530 AUC after training: 0.6621352785145889
User 113530 does not improve AUC. Reverting changes.
Training on augumented user 96231 42/50 current_auc = 0.6622347480106101
User 96231 AUC after training: 0.6621352785145889
User 96231 does not improve AUC. Reverting changes.
Training on augumented user 58090 43/50 current_auc = 0.6622347480106101
User 58090 AUC after training: 0.6621352785145889
User 58090 does not improve AUC. Reverting changes.
Training on augumented user 100596 44/50 current_auc = 0.6622347480106101
User 100596 AUC after training: 0.6617042440318301
User 100596 does not improve AUC. Reverting changes.
Training on augumented user 46674 45/50 current_auc = 0.6622347480106101
User 46674 AUC after training: 0.6625994694960213
User 46674 improves AUC. Keeping the model.
Training on augumented user 79463 46/50 current_auc = 0.6625994694960213
User 79463 AUC after training: 0.6624502652519894
User 79463 does not improve AUC. Reverting changes.
Training on augumented user 12916 47/50 current_auc = 0.6625994694960213
User 12916 AUC after training: 0.6627320954907161
User 12916 improves AUC. Keeping the model.
Training on augumented user 95569 48/50 current_auc = 0.6627320954907161
User 95569 AUC after training: 0.6617539787798409
User 95569 does not improve AUC. Reverting changes.
Training on augumented user 69559 49/50 current_auc = 0.6627320954907161
User 69559 AUC after training: 0.6626989389920424
User 69559 does not improve AUC. Reverting changes.
[2024-12-02 17:58:56.090869] start test user 910 36/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:58:56.915044] start test user 910 36/568 recall augumented users by random, augumented_users = [31448, 16634, 52932, 69803, 87584, 74886, 101525, 134513, 55857, 54606, 32802, 36181, 85209, 92301, 25357, 96961, 89045, 3619, 30009, 45916, 71304, 52906, 122297, 136976, 26937, 84085, 55248, 54989, 48350, 75742, 110784, 54068, 41880, 66809, 85643, 119392, 130609, 83870, 85136, 117867, 102578, 85712, 123110, 40133, 106725, 73703, 48412, 76786, 112928, 56434]
[2024-12-02 17:58:56.937880] user = 910 Cloud 36/568
[2024-12-02 17:58:56.975626] user = 910 Local 36/568
[2024-12-02 17:58:57.262936] user = 910 Local+ 36/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:59:00.012140] user = 910 MPDA- 36/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6355811889973381
Training on augumented user 31448 0/50 current_auc = 0.6355811889973381
User 31448 AUC after training: 0.6349304939367051
User 31448 does not improve AUC. Reverting changes.
Training on augumented user 16634 1/50 current_auc = 0.6355811889973381
User 16634 AUC after training: 0.634575569358178
User 16634 does not improve AUC. Reverting changes.
Training on augumented user 52932 2/50 current_auc = 0.6355811889973381
User 52932 AUC after training: 0.635226264418811
User 52932 does not improve AUC. Reverting changes.
Training on augumented user 69803 3/50 current_auc = 0.6355811889973381
User 69803 AUC after training: 0.6353149955634427
User 69803 does not improve AUC. Reverting changes.
Training on augumented user 87584 4/50 current_auc = 0.6355811889973381
User 87584 AUC after training: 0.6348713398402839
User 87584 does not improve AUC. Reverting changes.
Training on augumented user 74886 5/50 current_auc = 0.6355811889973381
User 74886 AUC after training: 0.6348417627920733
User 74886 does not improve AUC. Reverting changes.
Training on augumented user 101525 6/50 current_auc = 0.6355811889973381
User 101525 AUC after training: 0.6351375332741792
User 101525 does not improve AUC. Reverting changes.
Training on augumented user 134513 7/50 current_auc = 0.6355811889973381
User 134513 AUC after training: 0.6344572611653357
User 134513 does not improve AUC. Reverting changes.
Training on augumented user 55857 8/50 current_auc = 0.6355811889973381
User 55857 AUC after training: 0.6360544217687074
User 55857 improves AUC. Keeping the model.
Training on augumented user 54606 9/50 current_auc = 0.6360544217687074
User 54606 AUC after training: 0.6355811889973381
User 54606 does not improve AUC. Reverting changes.
Training on augumented user 32802 10/50 current_auc = 0.6360544217687074
User 32802 AUC after training: 0.6361135758651287
User 32802 improves AUC. Keeping the model.
Training on augumented user 36181 11/50 current_auc = 0.6361135758651287
User 36181 AUC after training: 0.6361727299615498
User 36181 improves AUC. Keeping the model.
Training on augumented user 85209 12/50 current_auc = 0.6361727299615498
User 85209 AUC after training: 0.6362910381543921
User 85209 improves AUC. Keeping the model.
Training on augumented user 92301 13/50 current_auc = 0.6362910381543921
User 92301 AUC after training: 0.6357586512866016
User 92301 does not improve AUC. Reverting changes.
Training on augumented user 25357 14/50 current_auc = 0.6362910381543921
User 25357 AUC after training: 0.6360248447204969
User 25357 does not improve AUC. Reverting changes.
Training on augumented user 96961 15/50 current_auc = 0.6362910381543921
User 96961 AUC after training: 0.636586808636498
User 96961 improves AUC. Keeping the model.
Training on augumented user 89045 16/50 current_auc = 0.636586808636498
User 89045 AUC after training: 0.6365572315882876
User 89045 does not improve AUC. Reverting changes.
Training on augumented user 3619 17/50 current_auc = 0.636586808636498
User 3619 AUC after training: 0.6364389233954452
User 3619 does not improve AUC. Reverting changes.
Training on augumented user 30009 18/50 current_auc = 0.636586808636498
User 30009 AUC after training: 0.6361727299615499
User 30009 does not improve AUC. Reverting changes.
Training on augumented user 45916 19/50 current_auc = 0.636586808636498
User 45916 AUC after training: 0.6359065365276546
User 45916 does not improve AUC. Reverting changes.
Training on augumented user 71304 20/50 current_auc = 0.636586808636498
User 71304 AUC after training: 0.6356699201419699
User 71304 does not improve AUC. Reverting changes.
Training on augumented user 52906 21/50 current_auc = 0.636586808636498
User 52906 AUC after training: 0.6361727299615498
User 52906 does not improve AUC. Reverting changes.
Training on augumented user 122297 22/50 current_auc = 0.636586808636498
User 122297 AUC after training: 0.6366163856847086
User 122297 improves AUC. Keeping the model.
Training on augumented user 136976 23/50 current_auc = 0.6366163856847086
User 136976 AUC after training: 0.6367051168293405
User 136976 improves AUC. Keeping the model.
Training on augumented user 26937 24/50 current_auc = 0.6367051168293405
User 26937 AUC after training: 0.6364389233954452
User 26937 does not improve AUC. Reverting changes.
Training on augumented user 84085 25/50 current_auc = 0.6367051168293405
User 84085 AUC after training: 0.6366163856847088
User 84085 does not improve AUC. Reverting changes.
Training on augumented user 55248 26/50 current_auc = 0.6367051168293405
User 55248 AUC after training: 0.6363797692990241
User 55248 does not improve AUC. Reverting changes.
Training on augumented user 54989 27/50 current_auc = 0.6367051168293405
User 54989 AUC after training: 0.6350488021295475
User 54989 does not improve AUC. Reverting changes.
Training on augumented user 48350 28/50 current_auc = 0.6367051168293405
User 48350 AUC after training: 0.6370008873114463
User 48350 improves AUC. Keeping the model.
Training on augumented user 75742 29/50 current_auc = 0.6370008873114463
User 75742 AUC after training: 0.6371487725524994
User 75742 improves AUC. Keeping the model.
Training on augumented user 110784 30/50 current_auc = 0.6371487725524994
User 110784 AUC after training: 0.6373558118899734
User 110784 improves AUC. Keeping the model.
Training on augumented user 54068 31/50 current_auc = 0.6373558118899734
User 54068 AUC after training: 0.6364389233954452
User 54068 does not improve AUC. Reverting changes.
Training on augumented user 41880 32/50 current_auc = 0.6373558118899734
User 41880 AUC after training: 0.6372375036971311
User 41880 does not improve AUC. Reverting changes.
Training on augumented user 66809 33/50 current_auc = 0.6373558118899734
User 66809 AUC after training: 0.6374445430346052
User 66809 improves AUC. Keeping the model.
Training on augumented user 85643 34/50 current_auc = 0.6374445430346052
User 85643 AUC after training: 0.6372670807453416
User 85643 does not improve AUC. Reverting changes.
Training on augumented user 119392 35/50 current_auc = 0.6374445430346052
User 119392 AUC after training: 0.637740313516711
User 119392 improves AUC. Keeping the model.
Training on augumented user 130609 36/50 current_auc = 0.637740313516711
User 130609 AUC after training: 0.6374445430346051
User 130609 does not improve AUC. Reverting changes.
Training on augumented user 83870 37/50 current_auc = 0.637740313516711
User 83870 AUC after training: 0.6376811594202898
User 83870 does not improve AUC. Reverting changes.
Training on augumented user 85136 38/50 current_auc = 0.637740313516711
User 85136 AUC after training: 0.6368234250221828
User 85136 does not improve AUC. Reverting changes.
Training on augumented user 117867 39/50 current_auc = 0.637740313516711
User 117867 AUC after training: 0.6376220053238686
User 117867 does not improve AUC. Reverting changes.
Training on augumented user 102578 40/50 current_auc = 0.637740313516711
User 102578 AUC after training: 0.6376220053238687
User 102578 does not improve AUC. Reverting changes.
Training on augumented user 85712 41/50 current_auc = 0.637740313516711
User 85712 AUC after training: 0.6372966577935523
User 85712 does not improve AUC. Reverting changes.
Training on augumented user 123110 42/50 current_auc = 0.637740313516711
User 123110 AUC after training: 0.6369713102632357
User 123110 does not improve AUC. Reverting changes.
Training on augumented user 40133 43/50 current_auc = 0.637740313516711
User 40133 AUC after training: 0.6370304643596569
User 40133 does not improve AUC. Reverting changes.
Training on augumented user 106725 44/50 current_auc = 0.637740313516711
User 106725 AUC after training: 0.6373262348417629
User 106725 does not improve AUC. Reverting changes.
Training on augumented user 73703 45/50 current_auc = 0.637740313516711
User 73703 AUC after training: 0.6379769299023957
User 73703 improves AUC. Keeping the model.
Training on augumented user 48412 46/50 current_auc = 0.6379769299023957
User 48412 AUC after training: 0.6368530020703933
User 48412 does not improve AUC. Reverting changes.
Training on augumented user 76786 47/50 current_auc = 0.6379769299023957
User 76786 AUC after training: 0.6372670807453417
User 76786 does not improve AUC. Reverting changes.
Training on augumented user 112928 48/50 current_auc = 0.6379769299023957
User 112928 AUC after training: 0.6371487725524992
User 112928 does not improve AUC. Reverting changes.
Training on augumented user 56434 49/50 current_auc = 0.6379769299023957
User 56434 AUC after training: 0.6377403135167111
User 56434 does not improve AUC. Reverting changes.
[2024-12-02 17:59:32.904850] start test user 932 37/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:59:33.385492] start test user 932 37/568 recall augumented users by random, augumented_users = [36242, 32998, 115858, 115052, 26997, 60358, 95280, 20219, 27406, 106623, 115773, 7338, 61650, 119818, 66584, 77255, 98695, 61188, 104635, 65553, 87122, 127929, 62891, 83538, 10092, 45699, 84283, 94411, 28405, 37089, 66890, 83911, 90144, 51976, 92311, 21410, 128291, 78207, 40167, 34209, 94482, 76395, 91344, 111022, 87121, 80891, 61850, 125397, 3919, 38701]
[2024-12-02 17:59:33.400527] user = 932 Cloud 37/568
[2024-12-02 17:59:33.410863] user = 932 Local 37/568
[2024-12-02 17:59:33.441847] user = 932 Local+ 37/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:59:36.057492] user = 932 MPDA- 37/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7159090909090909
Training on augumented user 36242 0/50 current_auc = 0.7159090909090909
User 36242 AUC after training: 0.7159090909090909
User 36242 does not improve AUC. Reverting changes.
Training on augumented user 32998 1/50 current_auc = 0.7159090909090909
User 32998 AUC after training: 0.7159090909090909
User 32998 does not improve AUC. Reverting changes.
Training on augumented user 115858 2/50 current_auc = 0.7159090909090909
User 115858 AUC after training: 0.7159090909090909
User 115858 does not improve AUC. Reverting changes.
Training on augumented user 115052 3/50 current_auc = 0.7159090909090909
User 115052 AUC after training: 0.7159090909090909
User 115052 does not improve AUC. Reverting changes.
Training on augumented user 26997 4/50 current_auc = 0.7159090909090909
User 26997 AUC after training: 0.7159090909090909
User 26997 does not improve AUC. Reverting changes.
Training on augumented user 60358 5/50 current_auc = 0.7159090909090909
User 60358 AUC after training: 0.712121212121212
User 60358 does not improve AUC. Reverting changes.
Training on augumented user 95280 6/50 current_auc = 0.7159090909090909
User 95280 AUC after training: 0.7159090909090909
User 95280 does not improve AUC. Reverting changes.
Training on augumented user 20219 7/50 current_auc = 0.7159090909090909
User 20219 AUC after training: 0.7159090909090909
User 20219 does not improve AUC. Reverting changes.
Training on augumented user 27406 8/50 current_auc = 0.7159090909090909
User 27406 AUC after training: 0.7159090909090909
User 27406 does not improve AUC. Reverting changes.
Training on augumented user 106623 9/50 current_auc = 0.7159090909090909
User 106623 AUC after training: 0.7159090909090909
User 106623 does not improve AUC. Reverting changes.
Training on augumented user 115773 10/50 current_auc = 0.7159090909090909
User 115773 AUC after training: 0.7159090909090909
User 115773 does not improve AUC. Reverting changes.
Training on augumented user 7338 11/50 current_auc = 0.7159090909090909
User 7338 AUC after training: 0.7159090909090909
User 7338 does not improve AUC. Reverting changes.
Training on augumented user 61650 12/50 current_auc = 0.7159090909090909
User 61650 AUC after training: 0.7159090909090909
User 61650 does not improve AUC. Reverting changes.
Training on augumented user 119818 13/50 current_auc = 0.7159090909090909
User 119818 AUC after training: 0.7159090909090909
User 119818 does not improve AUC. Reverting changes.
Training on augumented user 66584 14/50 current_auc = 0.7159090909090909
User 66584 AUC after training: 0.7159090909090909
User 66584 does not improve AUC. Reverting changes.
Training on augumented user 77255 15/50 current_auc = 0.7159090909090909
User 77255 AUC after training: 0.7159090909090909
User 77255 does not improve AUC. Reverting changes.
Training on augumented user 98695 16/50 current_auc = 0.7159090909090909
User 98695 AUC after training: 0.7159090909090909
User 98695 does not improve AUC. Reverting changes.
Training on augumented user 61188 17/50 current_auc = 0.7159090909090909
User 61188 AUC after training: 0.7159090909090909
User 61188 does not improve AUC. Reverting changes.
Training on augumented user 104635 18/50 current_auc = 0.7159090909090909
User 104635 AUC after training: 0.7159090909090909
User 104635 does not improve AUC. Reverting changes.
Training on augumented user 65553 19/50 current_auc = 0.7159090909090909
User 65553 AUC after training: 0.7159090909090909
User 65553 does not improve AUC. Reverting changes.
Training on augumented user 87122 20/50 current_auc = 0.7159090909090909
User 87122 AUC after training: 0.7159090909090909
User 87122 does not improve AUC. Reverting changes.
Training on augumented user 127929 21/50 current_auc = 0.7159090909090909
User 127929 AUC after training: 0.7159090909090909
User 127929 does not improve AUC. Reverting changes.
Training on augumented user 62891 22/50 current_auc = 0.7159090909090909
User 62891 AUC after training: 0.7121212121212122
User 62891 does not improve AUC. Reverting changes.
Training on augumented user 83538 23/50 current_auc = 0.7159090909090909
User 83538 AUC after training: 0.7159090909090909
User 83538 does not improve AUC. Reverting changes.
Training on augumented user 10092 24/50 current_auc = 0.7159090909090909
User 10092 AUC after training: 0.7159090909090909
User 10092 does not improve AUC. Reverting changes.
Training on augumented user 45699 25/50 current_auc = 0.7159090909090909
User 45699 AUC after training: 0.7159090909090909
User 45699 does not improve AUC. Reverting changes.
Training on augumented user 84283 26/50 current_auc = 0.7159090909090909
User 84283 AUC after training: 0.7159090909090909
User 84283 does not improve AUC. Reverting changes.
Training on augumented user 94411 27/50 current_auc = 0.7159090909090909
User 94411 AUC after training: 0.7159090909090909
User 94411 does not improve AUC. Reverting changes.
Training on augumented user 28405 28/50 current_auc = 0.7159090909090909
User 28405 AUC after training: 0.7159090909090909
User 28405 does not improve AUC. Reverting changes.
Training on augumented user 37089 29/50 current_auc = 0.7159090909090909
User 37089 AUC after training: 0.7159090909090909
User 37089 does not improve AUC. Reverting changes.
Training on augumented user 66890 30/50 current_auc = 0.7159090909090909
User 66890 AUC after training: 0.7159090909090909
User 66890 does not improve AUC. Reverting changes.
Training on augumented user 83911 31/50 current_auc = 0.7159090909090909
User 83911 AUC after training: 0.7159090909090909
User 83911 does not improve AUC. Reverting changes.
Training on augumented user 90144 32/50 current_auc = 0.7159090909090909
User 90144 AUC after training: 0.7159090909090909
User 90144 does not improve AUC. Reverting changes.
Training on augumented user 51976 33/50 current_auc = 0.7159090909090909
User 51976 AUC after training: 0.7159090909090909
User 51976 does not improve AUC. Reverting changes.
Training on augumented user 92311 34/50 current_auc = 0.7159090909090909
User 92311 AUC after training: 0.7159090909090909
User 92311 does not improve AUC. Reverting changes.
Training on augumented user 21410 35/50 current_auc = 0.7159090909090909
User 21410 AUC after training: 0.7159090909090909
User 21410 does not improve AUC. Reverting changes.
Training on augumented user 128291 36/50 current_auc = 0.7159090909090909
User 128291 AUC after training: 0.7159090909090909
User 128291 does not improve AUC. Reverting changes.
Training on augumented user 78207 37/50 current_auc = 0.7159090909090909
User 78207 AUC after training: 0.7159090909090909
User 78207 does not improve AUC. Reverting changes.
Training on augumented user 40167 38/50 current_auc = 0.7159090909090909
User 40167 AUC after training: 0.7159090909090909
User 40167 does not improve AUC. Reverting changes.
Training on augumented user 34209 39/50 current_auc = 0.7159090909090909
User 34209 AUC after training: 0.7159090909090909
User 34209 does not improve AUC. Reverting changes.
Training on augumented user 94482 40/50 current_auc = 0.7159090909090909
User 94482 AUC after training: 0.7196969696969697
User 94482 improves AUC. Keeping the model.
Training on augumented user 76395 41/50 current_auc = 0.7196969696969697
User 76395 AUC after training: 0.7159090909090909
User 76395 does not improve AUC. Reverting changes.
Training on augumented user 91344 42/50 current_auc = 0.7196969696969697
User 91344 AUC after training: 0.7159090909090909
User 91344 does not improve AUC. Reverting changes.
Training on augumented user 111022 43/50 current_auc = 0.7196969696969697
User 111022 AUC after training: 0.7196969696969697
User 111022 does not improve AUC. Reverting changes.
Training on augumented user 87121 44/50 current_auc = 0.7196969696969697
User 87121 AUC after training: 0.7159090909090909
User 87121 does not improve AUC. Reverting changes.
Training on augumented user 80891 45/50 current_auc = 0.7196969696969697
User 80891 AUC after training: 0.7196969696969697
User 80891 does not improve AUC. Reverting changes.
Training on augumented user 61850 46/50 current_auc = 0.7196969696969697
User 61850 AUC after training: 0.7159090909090909
User 61850 does not improve AUC. Reverting changes.
Training on augumented user 125397 47/50 current_auc = 0.7196969696969697
User 125397 AUC after training: 0.7159090909090909
User 125397 does not improve AUC. Reverting changes.
Training on augumented user 3919 48/50 current_auc = 0.7196969696969697
User 3919 AUC after training: 0.7159090909090909
User 3919 does not improve AUC. Reverting changes.
Training on augumented user 38701 49/50 current_auc = 0.7196969696969697
User 38701 AUC after training: 0.7196969696969697
User 38701 does not improve AUC. Reverting changes.
[2024-12-02 18:00:04.943518] start test user 971 38/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:00:05.659196] start test user 971 38/568 recall augumented users by random, augumented_users = [69704, 65175, 117928, 50431, 41844, 57830, 79878, 74337, 48804, 96496, 49204, 97784, 91866, 115102, 42114, 29397, 106663, 77135, 69788, 115732, 134616, 37419, 91110, 8609, 64361, 2587, 70340, 64321, 3374, 118279, 99142, 117029, 11847, 14264, 4691, 127971, 116133, 115085, 128323, 82247, 27675, 46082, 14884, 40357, 123022, 37515, 92396, 79003, 117970, 45994]
[2024-12-02 18:00:05.676327] user = 971 Cloud 38/568
[2024-12-02 18:00:05.689345] user = 971 Local 38/568
[2024-12-02 18:00:05.943547] user = 971 Local+ 38/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:00:08.773448] user = 971 MPDA- 38/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7210526315789474
Training on augumented user 69704 0/50 current_auc = 0.7210526315789474
User 69704 AUC after training: 0.7210526315789474
User 69704 does not improve AUC. Reverting changes.
Training on augumented user 65175 1/50 current_auc = 0.7210526315789474
User 65175 AUC after training: 0.7263157894736842
User 65175 improves AUC. Keeping the model.
Training on augumented user 117928 2/50 current_auc = 0.7263157894736842
User 117928 AUC after training: 0.7263157894736842
User 117928 does not improve AUC. Reverting changes.
Training on augumented user 50431 3/50 current_auc = 0.7263157894736842
User 50431 AUC after training: 0.7263157894736842
User 50431 does not improve AUC. Reverting changes.
Training on augumented user 41844 4/50 current_auc = 0.7263157894736842
User 41844 AUC after training: 0.7263157894736842
User 41844 does not improve AUC. Reverting changes.
Training on augumented user 57830 5/50 current_auc = 0.7263157894736842
User 57830 AUC after training: 0.7236842105263158
User 57830 does not improve AUC. Reverting changes.
Training on augumented user 79878 6/50 current_auc = 0.7263157894736842
User 79878 AUC after training: 0.7263157894736842
User 79878 does not improve AUC. Reverting changes.
Training on augumented user 74337 7/50 current_auc = 0.7263157894736842
User 74337 AUC after training: 0.7263157894736842
User 74337 does not improve AUC. Reverting changes.
Training on augumented user 48804 8/50 current_auc = 0.7263157894736842
User 48804 AUC after training: 0.7263157894736842
User 48804 does not improve AUC. Reverting changes.
Training on augumented user 96496 9/50 current_auc = 0.7263157894736842
User 96496 AUC after training: 0.7263157894736842
User 96496 does not improve AUC. Reverting changes.
Training on augumented user 49204 10/50 current_auc = 0.7263157894736842
User 49204 AUC after training: 0.7315789473684211
User 49204 improves AUC. Keeping the model.
Training on augumented user 97784 11/50 current_auc = 0.7315789473684211
User 97784 AUC after training: 0.7315789473684211
User 97784 does not improve AUC. Reverting changes.
Training on augumented user 91866 12/50 current_auc = 0.7315789473684211
User 91866 AUC after training: 0.7315789473684211
User 91866 does not improve AUC. Reverting changes.
Training on augumented user 115102 13/50 current_auc = 0.7315789473684211
User 115102 AUC after training: 0.7315789473684211
User 115102 does not improve AUC. Reverting changes.
Training on augumented user 42114 14/50 current_auc = 0.7315789473684211
User 42114 AUC after training: 0.7263157894736842
User 42114 does not improve AUC. Reverting changes.
Training on augumented user 29397 15/50 current_auc = 0.7315789473684211
User 29397 AUC after training: 0.7315789473684211
User 29397 does not improve AUC. Reverting changes.
Training on augumented user 106663 16/50 current_auc = 0.7315789473684211
User 106663 AUC after training: 0.7315789473684211
User 106663 does not improve AUC. Reverting changes.
Training on augumented user 77135 17/50 current_auc = 0.7315789473684211
User 77135 AUC after training: 0.7315789473684211
User 77135 does not improve AUC. Reverting changes.
Training on augumented user 69788 18/50 current_auc = 0.7315789473684211
User 69788 AUC after training: 0.7315789473684211
User 69788 does not improve AUC. Reverting changes.
Training on augumented user 115732 19/50 current_auc = 0.7315789473684211
User 115732 AUC after training: 0.7263157894736842
User 115732 does not improve AUC. Reverting changes.
Training on augumented user 134616 20/50 current_auc = 0.7315789473684211
User 134616 AUC after training: 0.7263157894736842
User 134616 does not improve AUC. Reverting changes.
Training on augumented user 37419 21/50 current_auc = 0.7315789473684211
User 37419 AUC after training: 0.7315789473684211
User 37419 does not improve AUC. Reverting changes.
Training on augumented user 91110 22/50 current_auc = 0.7315789473684211
User 91110 AUC after training: 0.7263157894736842
User 91110 does not improve AUC. Reverting changes.
Training on augumented user 8609 23/50 current_auc = 0.7315789473684211
User 8609 AUC after training: 0.7315789473684211
User 8609 does not improve AUC. Reverting changes.
Training on augumented user 64361 24/50 current_auc = 0.7315789473684211
User 64361 AUC after training: 0.7315789473684211
User 64361 does not improve AUC. Reverting changes.
Training on augumented user 2587 25/50 current_auc = 0.7315789473684211
User 2587 AUC after training: 0.7263157894736842
User 2587 does not improve AUC. Reverting changes.
Training on augumented user 70340 26/50 current_auc = 0.7315789473684211
User 70340 AUC after training: 0.7263157894736842
User 70340 does not improve AUC. Reverting changes.
Training on augumented user 64321 27/50 current_auc = 0.7315789473684211
User 64321 AUC after training: 0.7342105263157895
User 64321 improves AUC. Keeping the model.
Training on augumented user 3374 28/50 current_auc = 0.7342105263157895
User 3374 AUC after training: 0.7342105263157895
User 3374 does not improve AUC. Reverting changes.
Training on augumented user 118279 29/50 current_auc = 0.7342105263157895
User 118279 AUC after training: 0.7342105263157895
User 118279 does not improve AUC. Reverting changes.
Training on augumented user 99142 30/50 current_auc = 0.7342105263157895
User 99142 AUC after training: 0.7342105263157895
User 99142 does not improve AUC. Reverting changes.
Training on augumented user 117029 31/50 current_auc = 0.7342105263157895
User 117029 AUC after training: 0.7342105263157895
User 117029 does not improve AUC. Reverting changes.
Training on augumented user 11847 32/50 current_auc = 0.7342105263157895
User 11847 AUC after training: 0.7315789473684211
User 11847 does not improve AUC. Reverting changes.
Training on augumented user 14264 33/50 current_auc = 0.7342105263157895
User 14264 AUC after training: 0.7342105263157895
User 14264 does not improve AUC. Reverting changes.
Training on augumented user 4691 34/50 current_auc = 0.7342105263157895
User 4691 AUC after training: 0.7342105263157895
User 4691 does not improve AUC. Reverting changes.
Training on augumented user 127971 35/50 current_auc = 0.7342105263157895
User 127971 AUC after training: 0.7289473684210527
User 127971 does not improve AUC. Reverting changes.
Training on augumented user 116133 36/50 current_auc = 0.7342105263157895
User 116133 AUC after training: 0.7342105263157895
User 116133 does not improve AUC. Reverting changes.
Training on augumented user 115085 37/50 current_auc = 0.7342105263157895
User 115085 AUC after training: 0.7315789473684211
User 115085 does not improve AUC. Reverting changes.
Training on augumented user 128323 38/50 current_auc = 0.7342105263157895
User 128323 AUC after training: 0.7315789473684211
User 128323 does not improve AUC. Reverting changes.
Training on augumented user 82247 39/50 current_auc = 0.7342105263157895
User 82247 AUC after training: 0.7342105263157895
User 82247 does not improve AUC. Reverting changes.
Training on augumented user 27675 40/50 current_auc = 0.7342105263157895
User 27675 AUC after training: 0.7315789473684211
User 27675 does not improve AUC. Reverting changes.
Training on augumented user 46082 41/50 current_auc = 0.7342105263157895
User 46082 AUC after training: 0.7342105263157895
User 46082 does not improve AUC. Reverting changes.
Training on augumented user 14884 42/50 current_auc = 0.7342105263157895
User 14884 AUC after training: 0.7394736842105264
User 14884 improves AUC. Keeping the model.
Training on augumented user 40357 43/50 current_auc = 0.7394736842105264
User 40357 AUC after training: 0.736842105263158
User 40357 does not improve AUC. Reverting changes.
Training on augumented user 123022 44/50 current_auc = 0.7394736842105264
User 123022 AUC after training: 0.7421052631578948
User 123022 improves AUC. Keeping the model.
Training on augumented user 37515 45/50 current_auc = 0.7421052631578948
User 37515 AUC after training: 0.7315789473684211
User 37515 does not improve AUC. Reverting changes.
Training on augumented user 92396 46/50 current_auc = 0.7421052631578948
User 92396 AUC after training: 0.7421052631578948
User 92396 does not improve AUC. Reverting changes.
Training on augumented user 79003 47/50 current_auc = 0.7421052631578948
User 79003 AUC after training: 0.7421052631578948
User 79003 does not improve AUC. Reverting changes.
Training on augumented user 117970 48/50 current_auc = 0.7421052631578948
User 117970 AUC after training: 0.7394736842105264
User 117970 does not improve AUC. Reverting changes.
Training on augumented user 45994 49/50 current_auc = 0.7421052631578948
User 45994 AUC after training: 0.7342105263157895
User 45994 does not improve AUC. Reverting changes.
[2024-12-02 18:00:37.335132] start test user 975 39/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:00:37.860260] start test user 975 39/568 recall augumented users by random, augumented_users = [68852, 138333, 40299, 92734, 43822, 1138, 102936, 12, 53486, 41246, 74898, 58785, 32140, 47698, 136923, 62917, 111303, 110318, 81469, 114542, 65051, 57034, 125903, 104430, 33679, 85120, 15932, 2616, 47663, 46832, 3897, 49364, 51101, 50469, 116030, 46377, 123562, 16946, 75299, 32033, 2331, 130236, 108624, 92337, 51909, 88311, 103307, 50740, 70530, 42799]
[2024-12-02 18:00:37.877482] user = 975 Cloud 39/568
[2024-12-02 18:00:37.890102] user = 975 Local 39/568
[2024-12-02 18:00:37.941803] user = 975 Local+ 39/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:00:41.470585] user = 975 MPDA- 39/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6594202898550725
Training on augumented user 68852 0/50 current_auc = 0.6594202898550725
User 68852 AUC after training: 0.6545893719806763
User 68852 does not improve AUC. Reverting changes.
Training on augumented user 138333 1/50 current_auc = 0.6594202898550725
User 138333 AUC after training: 0.6642512077294687
User 138333 improves AUC. Keeping the model.
Training on augumented user 40299 2/50 current_auc = 0.6642512077294687
User 40299 AUC after training: 0.6594202898550725
User 40299 does not improve AUC. Reverting changes.
Training on augumented user 92734 3/50 current_auc = 0.6642512077294687
User 92734 AUC after training: 0.6594202898550725
User 92734 does not improve AUC. Reverting changes.
Training on augumented user 43822 4/50 current_auc = 0.6642512077294687
User 43822 AUC after training: 0.6666666666666667
User 43822 improves AUC. Keeping the model.
Training on augumented user 1138 5/50 current_auc = 0.6666666666666667
User 1138 AUC after training: 0.6618357487922706
User 1138 does not improve AUC. Reverting changes.
Training on augumented user 102936 6/50 current_auc = 0.6666666666666667
User 102936 AUC after training: 0.6642512077294687
User 102936 does not improve AUC. Reverting changes.
Training on augumented user 12 7/50 current_auc = 0.6666666666666667
User 12 AUC after training: 0.6642512077294687
User 12 does not improve AUC. Reverting changes.
Training on augumented user 53486 8/50 current_auc = 0.6666666666666667
User 53486 AUC after training: 0.6570048309178744
User 53486 does not improve AUC. Reverting changes.
Training on augumented user 41246 9/50 current_auc = 0.6666666666666667
User 41246 AUC after training: 0.6642512077294687
User 41246 does not improve AUC. Reverting changes.
Training on augumented user 74898 10/50 current_auc = 0.6666666666666667
User 74898 AUC after training: 0.6666666666666667
User 74898 does not improve AUC. Reverting changes.
Training on augumented user 58785 11/50 current_auc = 0.6666666666666667
User 58785 AUC after training: 0.6666666666666667
User 58785 does not improve AUC. Reverting changes.
Training on augumented user 32140 12/50 current_auc = 0.6666666666666667
User 32140 AUC after training: 0.6690821256038648
User 32140 improves AUC. Keeping the model.
Training on augumented user 47698 13/50 current_auc = 0.6690821256038648
User 47698 AUC after training: 0.6690821256038647
User 47698 does not improve AUC. Reverting changes.
Training on augumented user 136923 14/50 current_auc = 0.6690821256038648
User 136923 AUC after training: 0.6666666666666667
User 136923 does not improve AUC. Reverting changes.
Training on augumented user 62917 15/50 current_auc = 0.6690821256038648
User 62917 AUC after training: 0.6690821256038647
User 62917 does not improve AUC. Reverting changes.
Training on augumented user 111303 16/50 current_auc = 0.6690821256038648
User 111303 AUC after training: 0.6690821256038648
User 111303 does not improve AUC. Reverting changes.
Training on augumented user 110318 17/50 current_auc = 0.6690821256038648
User 110318 AUC after training: 0.6739130434782609
User 110318 improves AUC. Keeping the model.
Training on augumented user 81469 18/50 current_auc = 0.6739130434782609
User 81469 AUC after training: 0.6570048309178744
User 81469 does not improve AUC. Reverting changes.
Training on augumented user 114542 19/50 current_auc = 0.6739130434782609
User 114542 AUC after training: 0.6642512077294687
User 114542 does not improve AUC. Reverting changes.
Training on augumented user 65051 20/50 current_auc = 0.6739130434782609
User 65051 AUC after training: 0.6570048309178744
User 65051 does not improve AUC. Reverting changes.
Training on augumented user 57034 21/50 current_auc = 0.6739130434782609
User 57034 AUC after training: 0.6714975845410629
User 57034 does not improve AUC. Reverting changes.
Training on augumented user 125903 22/50 current_auc = 0.6739130434782609
User 125903 AUC after training: 0.6570048309178744
User 125903 does not improve AUC. Reverting changes.
Training on augumented user 104430 23/50 current_auc = 0.6739130434782609
User 104430 AUC after training: 0.6739130434782609
User 104430 does not improve AUC. Reverting changes.
Training on augumented user 33679 24/50 current_auc = 0.6739130434782609
User 33679 AUC after training: 0.6570048309178744
User 33679 does not improve AUC. Reverting changes.
Training on augumented user 85120 25/50 current_auc = 0.6739130434782609
User 85120 AUC after training: 0.6666666666666667
User 85120 does not improve AUC. Reverting changes.
Training on augumented user 15932 26/50 current_auc = 0.6739130434782609
User 15932 AUC after training: 0.6714975845410628
User 15932 does not improve AUC. Reverting changes.
Training on augumented user 2616 27/50 current_auc = 0.6739130434782609
User 2616 AUC after training: 0.6714975845410629
User 2616 does not improve AUC. Reverting changes.
Training on augumented user 47663 28/50 current_auc = 0.6739130434782609
User 47663 AUC after training: 0.6714975845410628
User 47663 does not improve AUC. Reverting changes.
Training on augumented user 46832 29/50 current_auc = 0.6739130434782609
User 46832 AUC after training: 0.6690821256038648
User 46832 does not improve AUC. Reverting changes.
Training on augumented user 3897 30/50 current_auc = 0.6739130434782609
User 3897 AUC after training: 0.6666666666666667
User 3897 does not improve AUC. Reverting changes.
Training on augumented user 49364 31/50 current_auc = 0.6739130434782609
User 49364 AUC after training: 0.6690821256038648
User 49364 does not improve AUC. Reverting changes.
Training on augumented user 51101 32/50 current_auc = 0.6739130434782609
User 51101 AUC after training: 0.6690821256038647
User 51101 does not improve AUC. Reverting changes.
Training on augumented user 50469 33/50 current_auc = 0.6739130434782609
User 50469 AUC after training: 0.6714975845410628
User 50469 does not improve AUC. Reverting changes.
Training on augumented user 116030 34/50 current_auc = 0.6739130434782609
User 116030 AUC after training: 0.6618357487922706
User 116030 does not improve AUC. Reverting changes.
Training on augumented user 46377 35/50 current_auc = 0.6739130434782609
User 46377 AUC after training: 0.6714975845410629
User 46377 does not improve AUC. Reverting changes.
Training on augumented user 123562 36/50 current_auc = 0.6739130434782609
User 123562 AUC after training: 0.6666666666666666
User 123562 does not improve AUC. Reverting changes.
Training on augumented user 16946 37/50 current_auc = 0.6739130434782609
User 16946 AUC after training: 0.6497584541062802
User 16946 does not improve AUC. Reverting changes.
Training on augumented user 75299 38/50 current_auc = 0.6739130434782609
User 75299 AUC after training: 0.6545893719806763
User 75299 does not improve AUC. Reverting changes.
Training on augumented user 32033 39/50 current_auc = 0.6739130434782609
User 32033 AUC after training: 0.6690821256038648
User 32033 does not improve AUC. Reverting changes.
Training on augumented user 2331 40/50 current_auc = 0.6739130434782609
User 2331 AUC after training: 0.6666666666666667
User 2331 does not improve AUC. Reverting changes.
Training on augumented user 130236 41/50 current_auc = 0.6739130434782609
User 130236 AUC after training: 0.6618357487922706
User 130236 does not improve AUC. Reverting changes.
Training on augumented user 108624 42/50 current_auc = 0.6739130434782609
User 108624 AUC after training: 0.6666666666666667
User 108624 does not improve AUC. Reverting changes.
Training on augumented user 92337 43/50 current_auc = 0.6739130434782609
User 92337 AUC after training: 0.6690821256038648
User 92337 does not improve AUC. Reverting changes.
Training on augumented user 51909 44/50 current_auc = 0.6739130434782609
User 51909 AUC after training: 0.6666666666666667
User 51909 does not improve AUC. Reverting changes.
Training on augumented user 88311 45/50 current_auc = 0.6739130434782609
User 88311 AUC after training: 0.6666666666666667
User 88311 does not improve AUC. Reverting changes.
Training on augumented user 103307 46/50 current_auc = 0.6739130434782609
User 103307 AUC after training: 0.6690821256038648
User 103307 does not improve AUC. Reverting changes.
Training on augumented user 50740 47/50 current_auc = 0.6739130434782609
User 50740 AUC after training: 0.6666666666666666
User 50740 does not improve AUC. Reverting changes.
Training on augumented user 70530 48/50 current_auc = 0.6739130434782609
User 70530 AUC after training: 0.6714975845410629
User 70530 does not improve AUC. Reverting changes.
Training on augumented user 42799 49/50 current_auc = 0.6739130434782609
User 42799 AUC after training: 0.6666666666666667
User 42799 does not improve AUC. Reverting changes.
[2024-12-02 18:01:12.920720] start test user 982 40/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:01:13.615649] start test user 982 40/568 recall augumented users by random, augumented_users = [1176, 67464, 1259, 15714, 82176, 67095, 130943, 69384, 56278, 38077, 642, 94575, 11999, 74033, 35210, 121701, 116532, 123536, 82001, 23125, 18673, 65681, 78305, 30464, 93649, 39556, 49935, 94716, 36217, 99258, 63834, 83472, 75097, 79734, 106782, 9111, 136492, 125201, 122556, 47447, 73803, 71584, 25191, 55461, 99081, 19333, 5295, 105184, 60596, 19107]
[2024-12-02 18:01:13.636724] user = 982 Cloud 40/568
[2024-12-02 18:01:13.658397] user = 982 Local 40/568
[2024-12-02 18:01:13.996503] user = 982 Local+ 40/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:01:17.661516] user = 982 MPDA- 40/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6448202959830867
Training on augumented user 1176 0/50 current_auc = 0.6448202959830867
User 1176 AUC after training: 0.6448202959830867
User 1176 does not improve AUC. Reverting changes.
Training on augumented user 67464 1/50 current_auc = 0.6448202959830867
User 67464 AUC after training: 0.6448202959830867
User 67464 does not improve AUC. Reverting changes.
Training on augumented user 1259 2/50 current_auc = 0.6448202959830867
User 1259 AUC after training: 0.6448202959830867
User 1259 does not improve AUC. Reverting changes.
Training on augumented user 15714 3/50 current_auc = 0.6448202959830867
User 15714 AUC after training: 0.6448202959830867
User 15714 does not improve AUC. Reverting changes.
Training on augumented user 82176 4/50 current_auc = 0.6448202959830867
User 82176 AUC after training: 0.6448202959830867
User 82176 does not improve AUC. Reverting changes.
Training on augumented user 67095 5/50 current_auc = 0.6448202959830867
User 67095 AUC after training: 0.6448202959830867
User 67095 does not improve AUC. Reverting changes.
Training on augumented user 130943 6/50 current_auc = 0.6448202959830867
User 130943 AUC after training: 0.6448202959830867
User 130943 does not improve AUC. Reverting changes.
Training on augumented user 69384 7/50 current_auc = 0.6448202959830867
User 69384 AUC after training: 0.6469344608879491
User 69384 improves AUC. Keeping the model.
Training on augumented user 56278 8/50 current_auc = 0.6469344608879491
User 56278 AUC after training: 0.6469344608879491
User 56278 does not improve AUC. Reverting changes.
Training on augumented user 38077 9/50 current_auc = 0.6469344608879491
User 38077 AUC after training: 0.6490486257928118
User 38077 improves AUC. Keeping the model.
Training on augumented user 642 10/50 current_auc = 0.6490486257928118
User 642 AUC after training: 0.6490486257928118
User 642 does not improve AUC. Reverting changes.
Training on augumented user 94575 11/50 current_auc = 0.6490486257928118
User 94575 AUC after training: 0.6490486257928119
User 94575 improves AUC. Keeping the model.
Training on augumented user 11999 12/50 current_auc = 0.6490486257928119
User 11999 AUC after training: 0.6469344608879491
User 11999 does not improve AUC. Reverting changes.
Training on augumented user 74033 13/50 current_auc = 0.6490486257928119
User 74033 AUC after training: 0.6490486257928119
User 74033 does not improve AUC. Reverting changes.
Training on augumented user 35210 14/50 current_auc = 0.6490486257928119
User 35210 AUC after training: 0.6469344608879491
User 35210 does not improve AUC. Reverting changes.
Training on augumented user 121701 15/50 current_auc = 0.6490486257928119
User 121701 AUC after training: 0.6490486257928118
User 121701 does not improve AUC. Reverting changes.
Training on augumented user 116532 16/50 current_auc = 0.6490486257928119
User 116532 AUC after training: 0.6490486257928119
User 116532 does not improve AUC. Reverting changes.
Training on augumented user 123536 17/50 current_auc = 0.6490486257928119
User 123536 AUC after training: 0.6469344608879491
User 123536 does not improve AUC. Reverting changes.
Training on augumented user 82001 18/50 current_auc = 0.6490486257928119
User 82001 AUC after training: 0.6469344608879491
User 82001 does not improve AUC. Reverting changes.
Training on augumented user 23125 19/50 current_auc = 0.6490486257928119
User 23125 AUC after training: 0.6490486257928118
User 23125 does not improve AUC. Reverting changes.
Training on augumented user 18673 20/50 current_auc = 0.6490486257928119
User 18673 AUC after training: 0.6469344608879491
User 18673 does not improve AUC. Reverting changes.
Training on augumented user 65681 21/50 current_auc = 0.6490486257928119
User 65681 AUC after training: 0.6490486257928119
User 65681 does not improve AUC. Reverting changes.
Training on augumented user 78305 22/50 current_auc = 0.6490486257928119
User 78305 AUC after training: 0.6501057082452432
User 78305 improves AUC. Keeping the model.
Training on augumented user 30464 23/50 current_auc = 0.6501057082452432
User 30464 AUC after training: 0.6522198731501057
User 30464 improves AUC. Keeping the model.
Training on augumented user 93649 24/50 current_auc = 0.6522198731501057
User 93649 AUC after training: 0.6501057082452432
User 93649 does not improve AUC. Reverting changes.
Training on augumented user 39556 25/50 current_auc = 0.6522198731501057
User 39556 AUC after training: 0.6490486257928118
User 39556 does not improve AUC. Reverting changes.
Training on augumented user 49935 26/50 current_auc = 0.6522198731501057
User 49935 AUC after training: 0.6490486257928118
User 49935 does not improve AUC. Reverting changes.
Training on augumented user 94716 27/50 current_auc = 0.6522198731501057
User 94716 AUC after training: 0.653276955602537
User 94716 improves AUC. Keeping the model.
Training on augumented user 36217 28/50 current_auc = 0.653276955602537
User 36217 AUC after training: 0.653276955602537
User 36217 does not improve AUC. Reverting changes.
Training on augumented user 99258 29/50 current_auc = 0.653276955602537
User 99258 AUC after training: 0.6511627906976744
User 99258 does not improve AUC. Reverting changes.
Training on augumented user 63834 30/50 current_auc = 0.653276955602537
User 63834 AUC after training: 0.653276955602537
User 63834 does not improve AUC. Reverting changes.
Training on augumented user 83472 31/50 current_auc = 0.653276955602537
User 83472 AUC after training: 0.6511627906976744
User 83472 does not improve AUC. Reverting changes.
Training on augumented user 75097 32/50 current_auc = 0.653276955602537
User 75097 AUC after training: 0.653276955602537
User 75097 does not improve AUC. Reverting changes.
Training on augumented user 79734 33/50 current_auc = 0.653276955602537
User 79734 AUC after training: 0.6490486257928118
User 79734 does not improve AUC. Reverting changes.
Training on augumented user 106782 34/50 current_auc = 0.653276955602537
User 106782 AUC after training: 0.6553911205073996
User 106782 improves AUC. Keeping the model.
Training on augumented user 9111 35/50 current_auc = 0.6553911205073996
User 9111 AUC after training: 0.6553911205073996
User 9111 does not improve AUC. Reverting changes.
Training on augumented user 136492 36/50 current_auc = 0.6553911205073996
User 136492 AUC after training: 0.6553911205073996
User 136492 does not improve AUC. Reverting changes.
Training on augumented user 125201 37/50 current_auc = 0.6553911205073996
User 125201 AUC after training: 0.6553911205073996
User 125201 does not improve AUC. Reverting changes.
Training on augumented user 122556 38/50 current_auc = 0.6553911205073996
User 122556 AUC after training: 0.6575052854122622
User 122556 improves AUC. Keeping the model.
Training on augumented user 47447 39/50 current_auc = 0.6575052854122622
User 47447 AUC after training: 0.6553911205073996
User 47447 does not improve AUC. Reverting changes.
Training on augumented user 73803 40/50 current_auc = 0.6575052854122622
User 73803 AUC after training: 0.6490486257928119
User 73803 does not improve AUC. Reverting changes.
Training on augumented user 71584 41/50 current_auc = 0.6575052854122622
User 71584 AUC after training: 0.6596194503171248
User 71584 improves AUC. Keeping the model.
Training on augumented user 25191 42/50 current_auc = 0.6596194503171248
User 25191 AUC after training: 0.6575052854122622
User 25191 does not improve AUC. Reverting changes.
Training on augumented user 55461 43/50 current_auc = 0.6596194503171248
User 55461 AUC after training: 0.6575052854122622
User 55461 does not improve AUC. Reverting changes.
Training on augumented user 99081 44/50 current_auc = 0.6596194503171248
User 99081 AUC after training: 0.6596194503171248
User 99081 does not improve AUC. Reverting changes.
Training on augumented user 19333 45/50 current_auc = 0.6596194503171248
User 19333 AUC after training: 0.6575052854122622
User 19333 does not improve AUC. Reverting changes.
Training on augumented user 5295 46/50 current_auc = 0.6596194503171248
User 5295 AUC after training: 0.6575052854122622
User 5295 does not improve AUC. Reverting changes.
Training on augumented user 105184 47/50 current_auc = 0.6596194503171248
User 105184 AUC after training: 0.6490486257928119
User 105184 does not improve AUC. Reverting changes.
Training on augumented user 60596 48/50 current_auc = 0.6596194503171248
User 60596 AUC after training: 0.6596194503171248
User 60596 does not improve AUC. Reverting changes.
Training on augumented user 19107 49/50 current_auc = 0.6596194503171248
User 19107 AUC after training: 0.6553911205073996
User 19107 does not improve AUC. Reverting changes.
[2024-12-02 18:01:46.221000] start test user 994 41/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:01:46.644225] start test user 994 41/568 recall augumented users by random, augumented_users = [41222, 7246, 38136, 65343, 125135, 19007, 92937, 103499, 51781, 105727, 81970, 14428, 113095, 91717, 38975, 89693, 47523, 51954, 27566, 124113, 78335, 118430, 30942, 99386, 132815, 86197, 100105, 27309, 137391, 75112, 13492, 79919, 48693, 58439, 28179, 130292, 136525, 33503, 75012, 100989, 6055, 59836, 125230, 29790, 77133, 112096, 32217, 83722, 58394, 116826]
[2024-12-02 18:01:46.659600] user = 994 Cloud 41/568
[2024-12-02 18:01:46.680778] user = 994 Local 41/568
[2024-12-02 18:01:46.755834] user = 994 Local+ 41/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:01:49.037393] user = 994 MPDA- 41/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.2592592592592593
Training on augumented user 41222 0/50 current_auc = 0.2592592592592593
User 41222 AUC after training: 0.22222222222222224
User 41222 does not improve AUC. Reverting changes.
Training on augumented user 7246 1/50 current_auc = 0.2592592592592593
User 7246 AUC after training: 0.2592592592592593
User 7246 does not improve AUC. Reverting changes.
Training on augumented user 38136 2/50 current_auc = 0.2592592592592593
User 38136 AUC after training: 0.22222222222222224
User 38136 does not improve AUC. Reverting changes.
Training on augumented user 65343 3/50 current_auc = 0.2592592592592593
User 65343 AUC after training: 0.2592592592592593
User 65343 does not improve AUC. Reverting changes.
Training on augumented user 125135 4/50 current_auc = 0.2592592592592593
User 125135 AUC after training: 0.2592592592592593
User 125135 does not improve AUC. Reverting changes.
Training on augumented user 19007 5/50 current_auc = 0.2592592592592593
User 19007 AUC after training: 0.2592592592592593
User 19007 does not improve AUC. Reverting changes.
Training on augumented user 92937 6/50 current_auc = 0.2592592592592593
User 92937 AUC after training: 0.2592592592592593
User 92937 does not improve AUC. Reverting changes.
Training on augumented user 103499 7/50 current_auc = 0.2592592592592593
User 103499 AUC after training: 0.2592592592592593
User 103499 does not improve AUC. Reverting changes.
Training on augumented user 51781 8/50 current_auc = 0.2592592592592593
User 51781 AUC after training: 0.2592592592592593
User 51781 does not improve AUC. Reverting changes.
Training on augumented user 105727 9/50 current_auc = 0.2592592592592593
User 105727 AUC after training: 0.2592592592592593
User 105727 does not improve AUC. Reverting changes.
Training on augumented user 81970 10/50 current_auc = 0.2592592592592593
User 81970 AUC after training: 0.2592592592592593
User 81970 does not improve AUC. Reverting changes.
Training on augumented user 14428 11/50 current_auc = 0.2592592592592593
User 14428 AUC after training: 0.2592592592592593
User 14428 does not improve AUC. Reverting changes.
Training on augumented user 113095 12/50 current_auc = 0.2592592592592593
User 113095 AUC after training: 0.2592592592592593
User 113095 does not improve AUC. Reverting changes.
Training on augumented user 91717 13/50 current_auc = 0.2592592592592593
User 91717 AUC after training: 0.2592592592592593
User 91717 does not improve AUC. Reverting changes.
Training on augumented user 38975 14/50 current_auc = 0.2592592592592593
User 38975 AUC after training: 0.2592592592592593
User 38975 does not improve AUC. Reverting changes.
Training on augumented user 89693 15/50 current_auc = 0.2592592592592593
User 89693 AUC after training: 0.2592592592592593
User 89693 does not improve AUC. Reverting changes.
Training on augumented user 47523 16/50 current_auc = 0.2592592592592593
User 47523 AUC after training: 0.2592592592592593
User 47523 does not improve AUC. Reverting changes.
Training on augumented user 51954 17/50 current_auc = 0.2592592592592593
User 51954 AUC after training: 0.2592592592592593
User 51954 does not improve AUC. Reverting changes.
Training on augumented user 27566 18/50 current_auc = 0.2592592592592593
User 27566 AUC after training: 0.2592592592592593
User 27566 does not improve AUC. Reverting changes.
Training on augumented user 124113 19/50 current_auc = 0.2592592592592593
User 124113 AUC after training: 0.22222222222222224
User 124113 does not improve AUC. Reverting changes.
Training on augumented user 78335 20/50 current_auc = 0.2592592592592593
User 78335 AUC after training: 0.2592592592592593
User 78335 does not improve AUC. Reverting changes.
Training on augumented user 118430 21/50 current_auc = 0.2592592592592593
User 118430 AUC after training: 0.2592592592592593
User 118430 does not improve AUC. Reverting changes.
Training on augumented user 30942 22/50 current_auc = 0.2592592592592593
User 30942 AUC after training: 0.2592592592592593
User 30942 does not improve AUC. Reverting changes.
Training on augumented user 99386 23/50 current_auc = 0.2592592592592593
User 99386 AUC after training: 0.2592592592592593
User 99386 does not improve AUC. Reverting changes.
Training on augumented user 132815 24/50 current_auc = 0.2592592592592593
User 132815 AUC after training: 0.22222222222222224
User 132815 does not improve AUC. Reverting changes.
Training on augumented user 86197 25/50 current_auc = 0.2592592592592593
User 86197 AUC after training: 0.2592592592592593
User 86197 does not improve AUC. Reverting changes.
Training on augumented user 100105 26/50 current_auc = 0.2592592592592593
User 100105 AUC after training: 0.2592592592592593
User 100105 does not improve AUC. Reverting changes.
Training on augumented user 27309 27/50 current_auc = 0.2592592592592593
User 27309 AUC after training: 0.2592592592592593
User 27309 does not improve AUC. Reverting changes.
Training on augumented user 137391 28/50 current_auc = 0.2592592592592593
User 137391 AUC after training: 0.22222222222222224
User 137391 does not improve AUC. Reverting changes.
Training on augumented user 75112 29/50 current_auc = 0.2592592592592593
User 75112 AUC after training: 0.22222222222222224
User 75112 does not improve AUC. Reverting changes.
Training on augumented user 13492 30/50 current_auc = 0.2592592592592593
User 13492 AUC after training: 0.22222222222222224
User 13492 does not improve AUC. Reverting changes.
Training on augumented user 79919 31/50 current_auc = 0.2592592592592593
User 79919 AUC after training: 0.2592592592592593
User 79919 does not improve AUC. Reverting changes.
Training on augumented user 48693 32/50 current_auc = 0.2592592592592593
User 48693 AUC after training: 0.2592592592592593
User 48693 does not improve AUC. Reverting changes.
Training on augumented user 58439 33/50 current_auc = 0.2592592592592593
User 58439 AUC after training: 0.2592592592592593
User 58439 does not improve AUC. Reverting changes.
Training on augumented user 28179 34/50 current_auc = 0.2592592592592593
User 28179 AUC after training: 0.22222222222222224
User 28179 does not improve AUC. Reverting changes.
Training on augumented user 130292 35/50 current_auc = 0.2592592592592593
User 130292 AUC after training: 0.2592592592592593
User 130292 does not improve AUC. Reverting changes.
Training on augumented user 136525 36/50 current_auc = 0.2592592592592593
User 136525 AUC after training: 0.2592592592592593
User 136525 does not improve AUC. Reverting changes.
Training on augumented user 33503 37/50 current_auc = 0.2592592592592593
User 33503 AUC after training: 0.2592592592592593
User 33503 does not improve AUC. Reverting changes.
Training on augumented user 75012 38/50 current_auc = 0.2592592592592593
User 75012 AUC after training: 0.22222222222222224
User 75012 does not improve AUC. Reverting changes.
Training on augumented user 100989 39/50 current_auc = 0.2592592592592593
User 100989 AUC after training: 0.22222222222222224
User 100989 does not improve AUC. Reverting changes.
Training on augumented user 6055 40/50 current_auc = 0.2592592592592593
User 6055 AUC after training: 0.2592592592592593
User 6055 does not improve AUC. Reverting changes.
Training on augumented user 59836 41/50 current_auc = 0.2592592592592593
User 59836 AUC after training: 0.2592592592592593
User 59836 does not improve AUC. Reverting changes.
Training on augumented user 125230 42/50 current_auc = 0.2592592592592593
User 125230 AUC after training: 0.22222222222222224
User 125230 does not improve AUC. Reverting changes.
Training on augumented user 29790 43/50 current_auc = 0.2592592592592593
User 29790 AUC after training: 0.2962962962962963
User 29790 improves AUC. Keeping the model.
Training on augumented user 77133 44/50 current_auc = 0.2962962962962963
User 77133 AUC after training: 0.2962962962962963
User 77133 does not improve AUC. Reverting changes.
Training on augumented user 112096 45/50 current_auc = 0.2962962962962963
User 112096 AUC after training: 0.2962962962962963
User 112096 does not improve AUC. Reverting changes.
Training on augumented user 32217 46/50 current_auc = 0.2962962962962963
User 32217 AUC after training: 0.22222222222222224
User 32217 does not improve AUC. Reverting changes.
Training on augumented user 83722 47/50 current_auc = 0.2962962962962963
User 83722 AUC after training: 0.2962962962962963
User 83722 does not improve AUC. Reverting changes.
Training on augumented user 58394 48/50 current_auc = 0.2962962962962963
User 58394 AUC after training: 0.2592592592592593
User 58394 does not improve AUC. Reverting changes.
Training on augumented user 116826 49/50 current_auc = 0.2962962962962963
User 116826 AUC after training: 0.2592592592592593
User 116826 does not improve AUC. Reverting changes.
[2024-12-02 18:02:19.348760] start test user 1145 42/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:02:19.882980] start test user 1145 42/568 recall augumented users by random, augumented_users = [7803, 114109, 34812, 105995, 65601, 83602, 32437, 736, 97615, 105718, 82294, 7782, 47549, 89927, 48346, 2186, 41631, 58629, 126383, 40658, 61084, 84462, 48496, 71450, 45136, 61600, 76336, 100425, 96445, 136376, 35932, 93651, 110416, 34566, 119123, 70560, 84933, 108088, 67703, 67754, 114554, 107531, 15810, 7833, 25308, 4732, 128641, 22277, 45000, 80733]
[2024-12-02 18:02:19.900537] user = 1145 Cloud 42/568
[2024-12-02 18:02:19.913823] user = 1145 Local 42/568
[2024-12-02 18:02:19.969021] user = 1145 Local+ 42/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:02:22.817259] user = 1145 MPDA- 42/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6555555555555556
Training on augumented user 7803 0/50 current_auc = 0.6555555555555556
User 7803 AUC after training: 0.6555555555555556
User 7803 does not improve AUC. Reverting changes.
Training on augumented user 114109 1/50 current_auc = 0.6555555555555556
User 114109 AUC after training: 0.6587301587301587
User 114109 improves AUC. Keeping the model.
Training on augumented user 34812 2/50 current_auc = 0.6587301587301587
User 34812 AUC after training: 0.6523809523809524
User 34812 does not improve AUC. Reverting changes.
Training on augumented user 105995 3/50 current_auc = 0.6587301587301587
User 105995 AUC after training: 0.6587301587301587
User 105995 does not improve AUC. Reverting changes.
Training on augumented user 65601 4/50 current_auc = 0.6587301587301587
User 65601 AUC after training: 0.6555555555555556
User 65601 does not improve AUC. Reverting changes.
Training on augumented user 83602 5/50 current_auc = 0.6587301587301587
User 83602 AUC after training: 0.6587301587301587
User 83602 does not improve AUC. Reverting changes.
Training on augumented user 32437 6/50 current_auc = 0.6587301587301587
User 32437 AUC after training: 0.6587301587301587
User 32437 does not improve AUC. Reverting changes.
Training on augumented user 736 7/50 current_auc = 0.6587301587301587
User 736 AUC after training: 0.6555555555555556
User 736 does not improve AUC. Reverting changes.
Training on augumented user 97615 8/50 current_auc = 0.6587301587301587
User 97615 AUC after training: 0.6587301587301587
User 97615 does not improve AUC. Reverting changes.
Training on augumented user 105718 9/50 current_auc = 0.6587301587301587
User 105718 AUC after training: 0.6587301587301587
User 105718 does not improve AUC. Reverting changes.
Training on augumented user 82294 10/50 current_auc = 0.6587301587301587
User 82294 AUC after training: 0.6555555555555556
User 82294 does not improve AUC. Reverting changes.
Training on augumented user 7782 11/50 current_auc = 0.6587301587301587
User 7782 AUC after training: 0.6587301587301587
User 7782 does not improve AUC. Reverting changes.
Training on augumented user 47549 12/50 current_auc = 0.6587301587301587
User 47549 AUC after training: 0.6587301587301587
User 47549 does not improve AUC. Reverting changes.
Training on augumented user 89927 13/50 current_auc = 0.6587301587301587
User 89927 AUC after training: 0.6555555555555556
User 89927 does not improve AUC. Reverting changes.
Training on augumented user 48346 14/50 current_auc = 0.6587301587301587
User 48346 AUC after training: 0.6587301587301587
User 48346 does not improve AUC. Reverting changes.
Training on augumented user 2186 15/50 current_auc = 0.6587301587301587
User 2186 AUC after training: 0.6587301587301587
User 2186 does not improve AUC. Reverting changes.
Training on augumented user 41631 16/50 current_auc = 0.6587301587301587
User 41631 AUC after training: 0.6555555555555556
User 41631 does not improve AUC. Reverting changes.
Training on augumented user 58629 17/50 current_auc = 0.6587301587301587
User 58629 AUC after training: 0.6555555555555556
User 58629 does not improve AUC. Reverting changes.
Training on augumented user 126383 18/50 current_auc = 0.6587301587301587
User 126383 AUC after training: 0.6587301587301587
User 126383 does not improve AUC. Reverting changes.
Training on augumented user 40658 19/50 current_auc = 0.6587301587301587
User 40658 AUC after training: 0.6555555555555556
User 40658 does not improve AUC. Reverting changes.
Training on augumented user 61084 20/50 current_auc = 0.6587301587301587
User 61084 AUC after training: 0.6555555555555556
User 61084 does not improve AUC. Reverting changes.
Training on augumented user 84462 21/50 current_auc = 0.6587301587301587
User 84462 AUC after training: 0.6555555555555556
User 84462 does not improve AUC. Reverting changes.
Training on augumented user 48496 22/50 current_auc = 0.6587301587301587
User 48496 AUC after training: 0.6555555555555556
User 48496 does not improve AUC. Reverting changes.
Training on augumented user 71450 23/50 current_auc = 0.6587301587301587
User 71450 AUC after training: 0.6555555555555556
User 71450 does not improve AUC. Reverting changes.
Training on augumented user 45136 24/50 current_auc = 0.6587301587301587
User 45136 AUC after training: 0.6555555555555556
User 45136 does not improve AUC. Reverting changes.
Training on augumented user 61600 25/50 current_auc = 0.6587301587301587
User 61600 AUC after training: 0.6555555555555556
User 61600 does not improve AUC. Reverting changes.
Training on augumented user 76336 26/50 current_auc = 0.6587301587301587
User 76336 AUC after training: 0.6555555555555556
User 76336 does not improve AUC. Reverting changes.
Training on augumented user 100425 27/50 current_auc = 0.6587301587301587
User 100425 AUC after training: 0.6587301587301587
User 100425 does not improve AUC. Reverting changes.
Training on augumented user 96445 28/50 current_auc = 0.6587301587301587
User 96445 AUC after training: 0.6587301587301587
User 96445 does not improve AUC. Reverting changes.
Training on augumented user 136376 29/50 current_auc = 0.6587301587301587
User 136376 AUC after training: 0.6523809523809524
User 136376 does not improve AUC. Reverting changes.
Training on augumented user 35932 30/50 current_auc = 0.6587301587301587
User 35932 AUC after training: 0.6587301587301587
User 35932 does not improve AUC. Reverting changes.
Training on augumented user 93651 31/50 current_auc = 0.6587301587301587
User 93651 AUC after training: 0.6587301587301587
User 93651 does not improve AUC. Reverting changes.
Training on augumented user 110416 32/50 current_auc = 0.6587301587301587
User 110416 AUC after training: 0.6587301587301587
User 110416 does not improve AUC. Reverting changes.
Training on augumented user 34566 33/50 current_auc = 0.6587301587301587
User 34566 AUC after training: 0.6555555555555556
User 34566 does not improve AUC. Reverting changes.
Training on augumented user 119123 34/50 current_auc = 0.6587301587301587
User 119123 AUC after training: 0.6587301587301587
User 119123 does not improve AUC. Reverting changes.
Training on augumented user 70560 35/50 current_auc = 0.6587301587301587
User 70560 AUC after training: 0.6587301587301587
User 70560 does not improve AUC. Reverting changes.
Training on augumented user 84933 36/50 current_auc = 0.6587301587301587
User 84933 AUC after training: 0.6555555555555556
User 84933 does not improve AUC. Reverting changes.
Training on augumented user 108088 37/50 current_auc = 0.6587301587301587
User 108088 AUC after training: 0.6587301587301587
User 108088 does not improve AUC. Reverting changes.
Training on augumented user 67703 38/50 current_auc = 0.6587301587301587
User 67703 AUC after training: 0.6587301587301587
User 67703 does not improve AUC. Reverting changes.
Training on augumented user 67754 39/50 current_auc = 0.6587301587301587
User 67754 AUC after training: 0.6523809523809524
User 67754 does not improve AUC. Reverting changes.
Training on augumented user 114554 40/50 current_auc = 0.6587301587301587
User 114554 AUC after training: 0.6555555555555556
User 114554 does not improve AUC. Reverting changes.
Training on augumented user 107531 41/50 current_auc = 0.6587301587301587
User 107531 AUC after training: 0.6555555555555556
User 107531 does not improve AUC. Reverting changes.
Training on augumented user 15810 42/50 current_auc = 0.6587301587301587
User 15810 AUC after training: 0.6555555555555556
User 15810 does not improve AUC. Reverting changes.
Training on augumented user 7833 43/50 current_auc = 0.6587301587301587
User 7833 AUC after training: 0.6603174603174603
User 7833 improves AUC. Keeping the model.
Training on augumented user 25308 44/50 current_auc = 0.6603174603174603
User 25308 AUC after training: 0.6603174603174603
User 25308 does not improve AUC. Reverting changes.
Training on augumented user 4732 45/50 current_auc = 0.6603174603174603
User 4732 AUC after training: 0.6571428571428571
User 4732 does not improve AUC. Reverting changes.
Training on augumented user 128641 46/50 current_auc = 0.6603174603174603
User 128641 AUC after training: 0.6523809523809524
User 128641 does not improve AUC. Reverting changes.
Training on augumented user 22277 47/50 current_auc = 0.6603174603174603
User 22277 AUC after training: 0.6603174603174603
User 22277 does not improve AUC. Reverting changes.
Training on augumented user 45000 48/50 current_auc = 0.6603174603174603
User 45000 AUC after training: 0.6571428571428571
User 45000 does not improve AUC. Reverting changes.
Training on augumented user 80733 49/50 current_auc = 0.6603174603174603
User 80733 AUC after training: 0.6587301587301587
User 80733 does not improve AUC. Reverting changes.
[2024-12-02 18:02:52.694985] start test user 1158 43/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:02:53.167557] start test user 1158 43/568 recall augumented users by random, augumented_users = [32466, 63682, 120699, 84747, 114816, 90633, 16096, 36475, 130456, 104962, 16995, 29516, 108611, 41181, 107064, 64743, 118565, 19545, 132963, 603, 26716, 37890, 102914, 53351, 67844, 108896, 40997, 94986, 48626, 132906, 8743, 116707, 2778, 66644, 86193, 86456, 33912, 125180, 10460, 102396, 111428, 6014, 9076, 98316, 106414, 102046, 120616, 29189, 29440, 91085]
[2024-12-02 18:02:53.180524] user = 1158 Cloud 43/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:02:53.186118] user = 1158 Local 43/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:02:53.225301] user = 1158 Local+ 43/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:02:55.814546] user = 1158 MPDA- 43/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 32466 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32466 AUC after training: 0.5
User 32466 does not improve AUC. Reverting changes.
Training on augumented user 63682 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63682 AUC after training: 0.5
User 63682 does not improve AUC. Reverting changes.
Training on augumented user 120699 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120699 AUC after training: 0.5
User 120699 does not improve AUC. Reverting changes.
Training on augumented user 84747 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84747 AUC after training: 0.5
User 84747 does not improve AUC. Reverting changes.
Training on augumented user 114816 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114816 AUC after training: 0.5
User 114816 does not improve AUC. Reverting changes.
Training on augumented user 90633 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90633 AUC after training: 0.5
User 90633 does not improve AUC. Reverting changes.
Training on augumented user 16096 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16096 AUC after training: 0.5
User 16096 does not improve AUC. Reverting changes.
Training on augumented user 36475 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36475 AUC after training: 0.5
User 36475 does not improve AUC. Reverting changes.
Training on augumented user 130456 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130456 AUC after training: 0.5
User 130456 does not improve AUC. Reverting changes.
Training on augumented user 104962 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104962 AUC after training: 0.5
User 104962 does not improve AUC. Reverting changes.
Training on augumented user 16995 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16995 AUC after training: 0.5
User 16995 does not improve AUC. Reverting changes.
Training on augumented user 29516 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29516 AUC after training: 0.5
User 29516 does not improve AUC. Reverting changes.
Training on augumented user 108611 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108611 AUC after training: 0.5
User 108611 does not improve AUC. Reverting changes.
Training on augumented user 41181 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41181 AUC after training: 0.5
User 41181 does not improve AUC. Reverting changes.
Training on augumented user 107064 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107064 AUC after training: 0.5
User 107064 does not improve AUC. Reverting changes.
Training on augumented user 64743 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64743 AUC after training: 0.5
User 64743 does not improve AUC. Reverting changes.
Training on augumented user 118565 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118565 AUC after training: 0.5
User 118565 does not improve AUC. Reverting changes.
Training on augumented user 19545 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19545 AUC after training: 0.5
User 19545 does not improve AUC. Reverting changes.
Training on augumented user 132963 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132963 AUC after training: 0.5
User 132963 does not improve AUC. Reverting changes.
Training on augumented user 603 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 603 AUC after training: 0.5
User 603 does not improve AUC. Reverting changes.
Training on augumented user 26716 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26716 AUC after training: 0.5
User 26716 does not improve AUC. Reverting changes.
Training on augumented user 37890 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37890 AUC after training: 0.5
User 37890 does not improve AUC. Reverting changes.
Training on augumented user 102914 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102914 AUC after training: 0.5
User 102914 does not improve AUC. Reverting changes.
Training on augumented user 53351 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53351 AUC after training: 0.5
User 53351 does not improve AUC. Reverting changes.
Training on augumented user 67844 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67844 AUC after training: 0.5
User 67844 does not improve AUC. Reverting changes.
Training on augumented user 108896 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108896 AUC after training: 0.5
User 108896 does not improve AUC. Reverting changes.
Training on augumented user 40997 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40997 AUC after training: 0.5
User 40997 does not improve AUC. Reverting changes.
Training on augumented user 94986 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94986 AUC after training: 0.5
User 94986 does not improve AUC. Reverting changes.
Training on augumented user 48626 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48626 AUC after training: 0.5
User 48626 does not improve AUC. Reverting changes.
Training on augumented user 132906 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132906 AUC after training: 0.5
User 132906 does not improve AUC. Reverting changes.
Training on augumented user 8743 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8743 AUC after training: 0.5
User 8743 does not improve AUC. Reverting changes.
Training on augumented user 116707 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116707 AUC after training: 0.5
User 116707 does not improve AUC. Reverting changes.
Training on augumented user 2778 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2778 AUC after training: 0.5
User 2778 does not improve AUC. Reverting changes.
Training on augumented user 66644 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66644 AUC after training: 0.5
User 66644 does not improve AUC. Reverting changes.
Training on augumented user 86193 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86193 AUC after training: 0.5
User 86193 does not improve AUC. Reverting changes.
Training on augumented user 86456 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86456 AUC after training: 0.5
User 86456 does not improve AUC. Reverting changes.
Training on augumented user 33912 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33912 AUC after training: 0.5
User 33912 does not improve AUC. Reverting changes.
Training on augumented user 125180 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125180 AUC after training: 0.5
User 125180 does not improve AUC. Reverting changes.
Training on augumented user 10460 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10460 AUC after training: 0.5
User 10460 does not improve AUC. Reverting changes.
Training on augumented user 102396 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102396 AUC after training: 0.5
User 102396 does not improve AUC. Reverting changes.
Training on augumented user 111428 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111428 AUC after training: 0.5
User 111428 does not improve AUC. Reverting changes.
Training on augumented user 6014 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6014 AUC after training: 0.5
User 6014 does not improve AUC. Reverting changes.
Training on augumented user 9076 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9076 AUC after training: 0.5
User 9076 does not improve AUC. Reverting changes.
Training on augumented user 98316 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98316 AUC after training: 0.5
User 98316 does not improve AUC. Reverting changes.
Training on augumented user 106414 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106414 AUC after training: 0.5
User 106414 does not improve AUC. Reverting changes.
Training on augumented user 102046 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102046 AUC after training: 0.5
User 102046 does not improve AUC. Reverting changes.
Training on augumented user 120616 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120616 AUC after training: 0.5
User 120616 does not improve AUC. Reverting changes.
Training on augumented user 29189 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29189 AUC after training: 0.5
User 29189 does not improve AUC. Reverting changes.
Training on augumented user 29440 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29440 AUC after training: 0.5
User 29440 does not improve AUC. Reverting changes.
Training on augumented user 91085 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91085 AUC after training: 0.5
User 91085 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:03:21.910811] start test user 1191 44/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:03:22.344290] start test user 1191 44/568 recall augumented users by random, augumented_users = [63465, 41859, 115180, 26204, 138144, 86790, 2988, 73452, 36509, 69002, 11706, 42356, 28565, 17853, 5633, 75816, 53031, 12034, 122255, 62204, 8704, 45989, 25045, 65510, 12276, 25492, 28730, 123524, 77410, 107785, 86578, 20971, 32636, 102740, 126187, 62375, 75097, 7197, 137991, 59886, 15393, 73841, 32533, 36207, 106736, 23177, 103973, 49777, 135229, 37265]
[2024-12-02 18:03:22.358780] user = 1191 Cloud 44/568
[2024-12-02 18:03:22.368677] user = 1191 Local 44/568
[2024-12-02 18:03:22.427287] user = 1191 Local+ 44/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:03:25.310307] user = 1191 MPDA- 44/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 63465 0/50 current_auc = 1.0
User 63465 AUC after training: 1.0
User 63465 does not improve AUC. Reverting changes.
Training on augumented user 41859 1/50 current_auc = 1.0
User 41859 AUC after training: 1.0
User 41859 does not improve AUC. Reverting changes.
Training on augumented user 115180 2/50 current_auc = 1.0
User 115180 AUC after training: 1.0
User 115180 does not improve AUC. Reverting changes.
Training on augumented user 26204 3/50 current_auc = 1.0
User 26204 AUC after training: 1.0
User 26204 does not improve AUC. Reverting changes.
Training on augumented user 138144 4/50 current_auc = 1.0
User 138144 AUC after training: 1.0
User 138144 does not improve AUC. Reverting changes.
Training on augumented user 86790 5/50 current_auc = 1.0
User 86790 AUC after training: 1.0
User 86790 does not improve AUC. Reverting changes.
Training on augumented user 2988 6/50 current_auc = 1.0
User 2988 AUC after training: 1.0
User 2988 does not improve AUC. Reverting changes.
Training on augumented user 73452 7/50 current_auc = 1.0
User 73452 AUC after training: 1.0
User 73452 does not improve AUC. Reverting changes.
Training on augumented user 36509 8/50 current_auc = 1.0
User 36509 AUC after training: 1.0
User 36509 does not improve AUC. Reverting changes.
Training on augumented user 69002 9/50 current_auc = 1.0
User 69002 AUC after training: 1.0
User 69002 does not improve AUC. Reverting changes.
Training on augumented user 11706 10/50 current_auc = 1.0
User 11706 AUC after training: 1.0
User 11706 does not improve AUC. Reverting changes.
Training on augumented user 42356 11/50 current_auc = 1.0
User 42356 AUC after training: 1.0
User 42356 does not improve AUC. Reverting changes.
Training on augumented user 28565 12/50 current_auc = 1.0
User 28565 AUC after training: 1.0
User 28565 does not improve AUC. Reverting changes.
Training on augumented user 17853 13/50 current_auc = 1.0
User 17853 AUC after training: 1.0
User 17853 does not improve AUC. Reverting changes.
Training on augumented user 5633 14/50 current_auc = 1.0
User 5633 AUC after training: 1.0
User 5633 does not improve AUC. Reverting changes.
Training on augumented user 75816 15/50 current_auc = 1.0
User 75816 AUC after training: 1.0
User 75816 does not improve AUC. Reverting changes.
Training on augumented user 53031 16/50 current_auc = 1.0
User 53031 AUC after training: 1.0
User 53031 does not improve AUC. Reverting changes.
Training on augumented user 12034 17/50 current_auc = 1.0
User 12034 AUC after training: 1.0
User 12034 does not improve AUC. Reverting changes.
Training on augumented user 122255 18/50 current_auc = 1.0
User 122255 AUC after training: 1.0
User 122255 does not improve AUC. Reverting changes.
Training on augumented user 62204 19/50 current_auc = 1.0
User 62204 AUC after training: 1.0
User 62204 does not improve AUC. Reverting changes.
Training on augumented user 8704 20/50 current_auc = 1.0
User 8704 AUC after training: 1.0
User 8704 does not improve AUC. Reverting changes.
Training on augumented user 45989 21/50 current_auc = 1.0
User 45989 AUC after training: 1.0
User 45989 does not improve AUC. Reverting changes.
Training on augumented user 25045 22/50 current_auc = 1.0
User 25045 AUC after training: 1.0
User 25045 does not improve AUC. Reverting changes.
Training on augumented user 65510 23/50 current_auc = 1.0
User 65510 AUC after training: 1.0
User 65510 does not improve AUC. Reverting changes.
Training on augumented user 12276 24/50 current_auc = 1.0
User 12276 AUC after training: 1.0
User 12276 does not improve AUC. Reverting changes.
Training on augumented user 25492 25/50 current_auc = 1.0
User 25492 AUC after training: 1.0
User 25492 does not improve AUC. Reverting changes.
Training on augumented user 28730 26/50 current_auc = 1.0
User 28730 AUC after training: 1.0
User 28730 does not improve AUC. Reverting changes.
Training on augumented user 123524 27/50 current_auc = 1.0
User 123524 AUC after training: 1.0
User 123524 does not improve AUC. Reverting changes.
Training on augumented user 77410 28/50 current_auc = 1.0
User 77410 AUC after training: 1.0
User 77410 does not improve AUC. Reverting changes.
Training on augumented user 107785 29/50 current_auc = 1.0
User 107785 AUC after training: 1.0
User 107785 does not improve AUC. Reverting changes.
Training on augumented user 86578 30/50 current_auc = 1.0
User 86578 AUC after training: 1.0
User 86578 does not improve AUC. Reverting changes.
Training on augumented user 20971 31/50 current_auc = 1.0
User 20971 AUC after training: 1.0
User 20971 does not improve AUC. Reverting changes.
Training on augumented user 32636 32/50 current_auc = 1.0
User 32636 AUC after training: 1.0
User 32636 does not improve AUC. Reverting changes.
Training on augumented user 102740 33/50 current_auc = 1.0
User 102740 AUC after training: 1.0
User 102740 does not improve AUC. Reverting changes.
Training on augumented user 126187 34/50 current_auc = 1.0
User 126187 AUC after training: 1.0
User 126187 does not improve AUC. Reverting changes.
Training on augumented user 62375 35/50 current_auc = 1.0
User 62375 AUC after training: 1.0
User 62375 does not improve AUC. Reverting changes.
Training on augumented user 75097 36/50 current_auc = 1.0
User 75097 AUC after training: 1.0
User 75097 does not improve AUC. Reverting changes.
Training on augumented user 7197 37/50 current_auc = 1.0
User 7197 AUC after training: 1.0
User 7197 does not improve AUC. Reverting changes.
Training on augumented user 137991 38/50 current_auc = 1.0
User 137991 AUC after training: 1.0
User 137991 does not improve AUC. Reverting changes.
Training on augumented user 59886 39/50 current_auc = 1.0
User 59886 AUC after training: 1.0
User 59886 does not improve AUC. Reverting changes.
Training on augumented user 15393 40/50 current_auc = 1.0
User 15393 AUC after training: 1.0
User 15393 does not improve AUC. Reverting changes.
Training on augumented user 73841 41/50 current_auc = 1.0
User 73841 AUC after training: 1.0
User 73841 does not improve AUC. Reverting changes.
Training on augumented user 32533 42/50 current_auc = 1.0
User 32533 AUC after training: 1.0
User 32533 does not improve AUC. Reverting changes.
Training on augumented user 36207 43/50 current_auc = 1.0
User 36207 AUC after training: 1.0
User 36207 does not improve AUC. Reverting changes.
Training on augumented user 106736 44/50 current_auc = 1.0
User 106736 AUC after training: 1.0
User 106736 does not improve AUC. Reverting changes.
Training on augumented user 23177 45/50 current_auc = 1.0
User 23177 AUC after training: 1.0
User 23177 does not improve AUC. Reverting changes.
Training on augumented user 103973 46/50 current_auc = 1.0
User 103973 AUC after training: 1.0
User 103973 does not improve AUC. Reverting changes.
Training on augumented user 49777 47/50 current_auc = 1.0
User 49777 AUC after training: 1.0
User 49777 does not improve AUC. Reverting changes.
Training on augumented user 135229 48/50 current_auc = 1.0
User 135229 AUC after training: 1.0
User 135229 does not improve AUC. Reverting changes.
Training on augumented user 37265 49/50 current_auc = 1.0
User 37265 AUC after training: 1.0
User 37265 does not improve AUC. Reverting changes.
[2024-12-02 18:03:59.557307] start test user 1200 45/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:04:00.032360] start test user 1200 45/568 recall augumented users by random, augumented_users = [105955, 25915, 34358, 81587, 26875, 53598, 117215, 137774, 109433, 64484, 3265, 55019, 59435, 42828, 117160, 132810, 45942, 53686, 16199, 28786, 29140, 75741, 101655, 100463, 79458, 50393, 136806, 104429, 3536, 18852, 39778, 85759, 82427, 40468, 76904, 42132, 52850, 38122, 30528, 15538, 35272, 87560, 22882, 114646, 38815, 62436, 122686, 13758, 89008, 80829]
[2024-12-02 18:04:00.049253] user = 1200 Cloud 45/568
[2024-12-02 18:04:00.060853] user = 1200 Local 45/568
[2024-12-02 18:04:00.233609] user = 1200 Local+ 45/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:04:02.513795] user = 1200 MPDA- 45/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.810901001112347
Training on augumented user 105955 0/50 current_auc = 0.810901001112347
User 105955 AUC after training: 0.8120133481646274
User 105955 improves AUC. Keeping the model.
Training on augumented user 25915 1/50 current_auc = 0.8120133481646274
User 25915 AUC after training: 0.8175750834260289
User 25915 improves AUC. Keeping the model.
Training on augumented user 34358 2/50 current_auc = 0.8175750834260289
User 34358 AUC after training: 0.8175750834260289
User 34358 does not improve AUC. Reverting changes.
Training on augumented user 81587 3/50 current_auc = 0.8175750834260289
User 81587 AUC after training: 0.8175750834260289
User 81587 does not improve AUC. Reverting changes.
Training on augumented user 26875 4/50 current_auc = 0.8175750834260289
User 26875 AUC after training: 0.8120133481646274
User 26875 does not improve AUC. Reverting changes.
Training on augumented user 53598 5/50 current_auc = 0.8175750834260289
User 53598 AUC after training: 0.8175750834260289
User 53598 does not improve AUC. Reverting changes.
Training on augumented user 117215 6/50 current_auc = 0.8175750834260289
User 117215 AUC after training: 0.8175750834260289
User 117215 does not improve AUC. Reverting changes.
Training on augumented user 137774 7/50 current_auc = 0.8175750834260289
User 137774 AUC after training: 0.8175750834260289
User 137774 does not improve AUC. Reverting changes.
Training on augumented user 109433 8/50 current_auc = 0.8175750834260289
User 109433 AUC after training: 0.814238042269188
User 109433 does not improve AUC. Reverting changes.
Training on augumented user 64484 9/50 current_auc = 0.8175750834260289
User 64484 AUC after training: 0.8164627363737487
User 64484 does not improve AUC. Reverting changes.
Training on augumented user 3265 10/50 current_auc = 0.8175750834260289
User 3265 AUC after training: 0.8175750834260289
User 3265 does not improve AUC. Reverting changes.
Training on augumented user 55019 11/50 current_auc = 0.8175750834260289
User 55019 AUC after training: 0.814238042269188
User 55019 does not improve AUC. Reverting changes.
Training on augumented user 59435 12/50 current_auc = 0.8175750834260289
User 59435 AUC after training: 0.8175750834260289
User 59435 does not improve AUC. Reverting changes.
Training on augumented user 42828 13/50 current_auc = 0.8175750834260289
User 42828 AUC after training: 0.8120133481646274
User 42828 does not improve AUC. Reverting changes.
Training on augumented user 117160 14/50 current_auc = 0.8175750834260289
User 117160 AUC after training: 0.8164627363737487
User 117160 does not improve AUC. Reverting changes.
Training on augumented user 132810 15/50 current_auc = 0.8175750834260289
User 132810 AUC after training: 0.814238042269188
User 132810 does not improve AUC. Reverting changes.
Training on augumented user 45942 16/50 current_auc = 0.8175750834260289
User 45942 AUC after training: 0.8164627363737487
User 45942 does not improve AUC. Reverting changes.
Training on augumented user 53686 17/50 current_auc = 0.8175750834260289
User 53686 AUC after training: 0.814238042269188
User 53686 does not improve AUC. Reverting changes.
Training on augumented user 16199 18/50 current_auc = 0.8175750834260289
User 16199 AUC after training: 0.8175750834260289
User 16199 does not improve AUC. Reverting changes.
Training on augumented user 28786 19/50 current_auc = 0.8175750834260289
User 28786 AUC after training: 0.8175750834260289
User 28786 does not improve AUC. Reverting changes.
Training on augumented user 29140 20/50 current_auc = 0.8175750834260289
User 29140 AUC after training: 0.814238042269188
User 29140 does not improve AUC. Reverting changes.
Training on augumented user 75741 21/50 current_auc = 0.8175750834260289
User 75741 AUC after training: 0.8164627363737487
User 75741 does not improve AUC. Reverting changes.
Training on augumented user 101655 22/50 current_auc = 0.8175750834260289
User 101655 AUC after training: 0.8175750834260289
User 101655 does not improve AUC. Reverting changes.
Training on augumented user 100463 23/50 current_auc = 0.8175750834260289
User 100463 AUC after training: 0.8164627363737487
User 100463 does not improve AUC. Reverting changes.
Training on augumented user 79458 24/50 current_auc = 0.8175750834260289
User 79458 AUC after training: 0.8175750834260289
User 79458 does not improve AUC. Reverting changes.
Training on augumented user 50393 25/50 current_auc = 0.8175750834260289
User 50393 AUC after training: 0.8153503893214683
User 50393 does not improve AUC. Reverting changes.
Training on augumented user 136806 26/50 current_auc = 0.8175750834260289
User 136806 AUC after training: 0.8131256952169077
User 136806 does not improve AUC. Reverting changes.
Training on augumented user 104429 27/50 current_auc = 0.8175750834260289
User 104429 AUC after training: 0.8175750834260289
User 104429 does not improve AUC. Reverting changes.
Training on augumented user 3536 28/50 current_auc = 0.8175750834260289
User 3536 AUC after training: 0.8164627363737487
User 3536 does not improve AUC. Reverting changes.
Training on augumented user 18852 29/50 current_auc = 0.8175750834260289
User 18852 AUC after training: 0.8164627363737487
User 18852 does not improve AUC. Reverting changes.
Training on augumented user 39778 30/50 current_auc = 0.8175750834260289
User 39778 AUC after training: 0.8131256952169077
User 39778 does not improve AUC. Reverting changes.
Training on augumented user 85759 31/50 current_auc = 0.8175750834260289
User 85759 AUC after training: 0.8175750834260289
User 85759 does not improve AUC. Reverting changes.
Training on augumented user 82427 32/50 current_auc = 0.8175750834260289
User 82427 AUC after training: 0.8175750834260289
User 82427 does not improve AUC. Reverting changes.
Training on augumented user 40468 33/50 current_auc = 0.8175750834260289
User 40468 AUC after training: 0.8120133481646274
User 40468 does not improve AUC. Reverting changes.
Training on augumented user 76904 34/50 current_auc = 0.8175750834260289
User 76904 AUC after training: 0.8164627363737487
User 76904 does not improve AUC. Reverting changes.
Training on augumented user 42132 35/50 current_auc = 0.8175750834260289
User 42132 AUC after training: 0.8175750834260289
User 42132 does not improve AUC. Reverting changes.
Training on augumented user 52850 36/50 current_auc = 0.8175750834260289
User 52850 AUC after training: 0.8175750834260289
User 52850 does not improve AUC. Reverting changes.
Training on augumented user 38122 37/50 current_auc = 0.8175750834260289
User 38122 AUC after training: 0.8175750834260289
User 38122 does not improve AUC. Reverting changes.
Training on augumented user 30528 38/50 current_auc = 0.8175750834260289
User 30528 AUC after training: 0.8131256952169077
User 30528 does not improve AUC. Reverting changes.
Training on augumented user 15538 39/50 current_auc = 0.8175750834260289
User 15538 AUC after training: 0.8175750834260289
User 15538 does not improve AUC. Reverting changes.
Training on augumented user 35272 40/50 current_auc = 0.8175750834260289
User 35272 AUC after training: 0.8164627363737487
User 35272 does not improve AUC. Reverting changes.
Training on augumented user 87560 41/50 current_auc = 0.8175750834260289
User 87560 AUC after training: 0.8164627363737487
User 87560 does not improve AUC. Reverting changes.
Training on augumented user 22882 42/50 current_auc = 0.8175750834260289
User 22882 AUC after training: 0.8153503893214683
User 22882 does not improve AUC. Reverting changes.
Training on augumented user 114646 43/50 current_auc = 0.8175750834260289
User 114646 AUC after training: 0.8186874304783092
User 114646 improves AUC. Keeping the model.
Training on augumented user 38815 44/50 current_auc = 0.8186874304783092
User 38815 AUC after training: 0.8186874304783092
User 38815 does not improve AUC. Reverting changes.
Training on augumented user 62436 45/50 current_auc = 0.8186874304783092
User 62436 AUC after training: 0.8153503893214683
User 62436 does not improve AUC. Reverting changes.
Training on augumented user 122686 46/50 current_auc = 0.8186874304783092
User 122686 AUC after training: 0.8131256952169077
User 122686 does not improve AUC. Reverting changes.
Training on augumented user 13758 47/50 current_auc = 0.8186874304783092
User 13758 AUC after training: 0.8175750834260289
User 13758 does not improve AUC. Reverting changes.
Training on augumented user 89008 48/50 current_auc = 0.8186874304783092
User 89008 AUC after training: 0.8175750834260289
User 89008 does not improve AUC. Reverting changes.
Training on augumented user 80829 49/50 current_auc = 0.8186874304783092
User 80829 AUC after training: 0.8164627363737487
User 80829 does not improve AUC. Reverting changes.
[2024-12-02 18:04:30.901156] start test user 1202 46/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:04:31.394706] start test user 1202 46/568 recall augumented users by random, augumented_users = [34959, 93921, 134635, 112878, 75612, 87526, 119234, 19232, 135606, 73801, 137976, 122424, 10537, 33554, 66731, 14509, 112042, 40032, 126786, 32939, 11728, 102131, 74776, 7014, 60083, 4111, 12206, 42595, 34015, 127725, 4056, 57650, 39617, 134569, 14979, 87643, 97834, 89941, 79848, 8145, 113368, 59741, 40560, 106270, 102280, 26904, 124818, 34629, 53089, 92781]
[2024-12-02 18:04:31.409299] user = 1202 Cloud 46/568
[2024-12-02 18:04:31.425854] user = 1202 Local 46/568
[2024-12-02 18:04:31.472953] user = 1202 Local+ 46/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:04:33.937418] user = 1202 MPDA- 46/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7328506097560976
Training on augumented user 34959 0/50 current_auc = 0.7328506097560976
User 34959 AUC after training: 0.7320884146341464
User 34959 does not improve AUC. Reverting changes.
Training on augumented user 93921 1/50 current_auc = 0.7328506097560976
User 93921 AUC after training: 0.7305640243902438
User 93921 does not improve AUC. Reverting changes.
Training on augumented user 134635 2/50 current_auc = 0.7328506097560976
User 134635 AUC after training: 0.7320884146341464
User 134635 does not improve AUC. Reverting changes.
Training on augumented user 112878 3/50 current_auc = 0.7328506097560976
User 112878 AUC after training: 0.7336128048780488
User 112878 improves AUC. Keeping the model.
Training on augumented user 75612 4/50 current_auc = 0.7336128048780488
User 75612 AUC after training: 0.7320884146341463
User 75612 does not improve AUC. Reverting changes.
Training on augumented user 87526 5/50 current_auc = 0.7336128048780488
User 87526 AUC after training: 0.7347560975609757
User 87526 improves AUC. Keeping the model.
Training on augumented user 119234 6/50 current_auc = 0.7347560975609757
User 119234 AUC after training: 0.7339939024390243
User 119234 does not improve AUC. Reverting changes.
Training on augumented user 19232 7/50 current_auc = 0.7347560975609757
User 19232 AUC after training: 0.7328506097560975
User 19232 does not improve AUC. Reverting changes.
Training on augumented user 135606 8/50 current_auc = 0.7347560975609757
User 135606 AUC after training: 0.7347560975609757
User 135606 does not improve AUC. Reverting changes.
Training on augumented user 73801 9/50 current_auc = 0.7347560975609757
User 73801 AUC after training: 0.7332317073170732
User 73801 does not improve AUC. Reverting changes.
Training on augumented user 137976 10/50 current_auc = 0.7347560975609757
User 137976 AUC after training: 0.7313262195121951
User 137976 does not improve AUC. Reverting changes.
Training on augumented user 122424 11/50 current_auc = 0.7347560975609757
User 122424 AUC after training: 0.7320884146341463
User 122424 does not improve AUC. Reverting changes.
Training on augumented user 10537 12/50 current_auc = 0.7347560975609757
User 10537 AUC after training: 0.7332317073170732
User 10537 does not improve AUC. Reverting changes.
Training on augumented user 33554 13/50 current_auc = 0.7347560975609757
User 33554 AUC after training: 0.7320884146341463
User 33554 does not improve AUC. Reverting changes.
Training on augumented user 66731 14/50 current_auc = 0.7347560975609757
User 66731 AUC after training: 0.7328506097560976
User 66731 does not improve AUC. Reverting changes.
Training on augumented user 14509 15/50 current_auc = 0.7347560975609757
User 14509 AUC after training: 0.7343750000000001
User 14509 does not improve AUC. Reverting changes.
Training on augumented user 112042 16/50 current_auc = 0.7347560975609757
User 112042 AUC after training: 0.7336128048780488
User 112042 does not improve AUC. Reverting changes.
Training on augumented user 40032 17/50 current_auc = 0.7347560975609757
User 40032 AUC after training: 0.7378048780487806
User 40032 improves AUC. Keeping the model.
Training on augumented user 126786 18/50 current_auc = 0.7378048780487806
User 126786 AUC after training: 0.7339939024390245
User 126786 does not improve AUC. Reverting changes.
Training on augumented user 32939 19/50 current_auc = 0.7378048780487806
User 32939 AUC after training: 0.7366615853658537
User 32939 does not improve AUC. Reverting changes.
Training on augumented user 11728 20/50 current_auc = 0.7378048780487806
User 11728 AUC after training: 0.7370426829268293
User 11728 does not improve AUC. Reverting changes.
Training on augumented user 102131 21/50 current_auc = 0.7378048780487806
User 102131 AUC after training: 0.7332317073170733
User 102131 does not improve AUC. Reverting changes.
Training on augumented user 74776 22/50 current_auc = 0.7378048780487806
User 74776 AUC after training: 0.7366615853658537
User 74776 does not improve AUC. Reverting changes.
Training on augumented user 7014 23/50 current_auc = 0.7378048780487806
User 7014 AUC after training: 0.7381859756097562
User 7014 improves AUC. Keeping the model.
Training on augumented user 60083 24/50 current_auc = 0.7381859756097562
User 60083 AUC after training: 0.7397103658536586
User 60083 improves AUC. Keeping the model.
Training on augumented user 4111 25/50 current_auc = 0.7397103658536586
User 4111 AUC after training: 0.7355182926829269
User 4111 does not improve AUC. Reverting changes.
Training on augumented user 12206 26/50 current_auc = 0.7397103658536586
User 12206 AUC after training: 0.7385670731707318
User 12206 does not improve AUC. Reverting changes.
Training on augumented user 42595 27/50 current_auc = 0.7397103658536586
User 42595 AUC after training: 0.7336128048780488
User 42595 does not improve AUC. Reverting changes.
Training on augumented user 34015 28/50 current_auc = 0.7397103658536586
User 34015 AUC after training: 0.739329268292683
User 34015 does not improve AUC. Reverting changes.
Training on augumented user 127725 29/50 current_auc = 0.7397103658536586
User 127725 AUC after training: 0.7362804878048781
User 127725 does not improve AUC. Reverting changes.
Training on augumented user 4056 30/50 current_auc = 0.7397103658536586
User 4056 AUC after training: 0.7355182926829269
User 4056 does not improve AUC. Reverting changes.
Training on augumented user 57650 31/50 current_auc = 0.7397103658536586
User 57650 AUC after training: 0.7362804878048781
User 57650 does not improve AUC. Reverting changes.
Training on augumented user 39617 32/50 current_auc = 0.7397103658536586
User 39617 AUC after training: 0.7355182926829269
User 39617 does not improve AUC. Reverting changes.
Training on augumented user 134569 33/50 current_auc = 0.7397103658536586
User 134569 AUC after training: 0.7362804878048781
User 134569 does not improve AUC. Reverting changes.
Training on augumented user 14979 34/50 current_auc = 0.7397103658536586
User 14979 AUC after training: 0.7370426829268293
User 14979 does not improve AUC. Reverting changes.
Training on augumented user 87643 35/50 current_auc = 0.7397103658536586
User 87643 AUC after training: 0.739329268292683
User 87643 does not improve AUC. Reverting changes.
Training on augumented user 97834 36/50 current_auc = 0.7397103658536586
User 97834 AUC after training: 0.7378048780487805
User 97834 does not improve AUC. Reverting changes.
Training on augumented user 89941 37/50 current_auc = 0.7397103658536586
User 89941 AUC after training: 0.7366615853658537
User 89941 does not improve AUC. Reverting changes.
Training on augumented user 79848 38/50 current_auc = 0.7397103658536586
User 79848 AUC after training: 0.7374237804878049
User 79848 does not improve AUC. Reverting changes.
Training on augumented user 8145 39/50 current_auc = 0.7397103658536586
User 8145 AUC after training: 0.7347560975609757
User 8145 does not improve AUC. Reverting changes.
Training on augumented user 113368 40/50 current_auc = 0.7397103658536586
User 113368 AUC after training: 0.7370426829268293
User 113368 does not improve AUC. Reverting changes.
Training on augumented user 59741 41/50 current_auc = 0.7397103658536586
User 59741 AUC after training: 0.7355182926829269
User 59741 does not improve AUC. Reverting changes.
Training on augumented user 40560 42/50 current_auc = 0.7397103658536586
User 40560 AUC after training: 0.7385670731707317
User 40560 does not improve AUC. Reverting changes.
Training on augumented user 106270 43/50 current_auc = 0.7397103658536586
User 106270 AUC after training: 0.7355182926829269
User 106270 does not improve AUC. Reverting changes.
Training on augumented user 102280 44/50 current_auc = 0.7397103658536586
User 102280 AUC after training: 0.7339939024390245
User 102280 does not improve AUC. Reverting changes.
Training on augumented user 26904 45/50 current_auc = 0.7397103658536586
User 26904 AUC after training: 0.7328506097560976
User 26904 does not improve AUC. Reverting changes.
Training on augumented user 124818 46/50 current_auc = 0.7397103658536586
User 124818 AUC after training: 0.7339939024390245
User 124818 does not improve AUC. Reverting changes.
Training on augumented user 34629 47/50 current_auc = 0.7397103658536586
User 34629 AUC after training: 0.7385670731707318
User 34629 does not improve AUC. Reverting changes.
Training on augumented user 53089 48/50 current_auc = 0.7397103658536586
User 53089 AUC after training: 0.7328506097560977
User 53089 does not improve AUC. Reverting changes.
Training on augumented user 92781 49/50 current_auc = 0.7397103658536586
User 92781 AUC after training: 0.7358993902439025
User 92781 does not improve AUC. Reverting changes.
[2024-12-02 18:04:58.626005] start test user 1233 47/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:04:59.048418] start test user 1233 47/568 recall augumented users by random, augumented_users = [123839, 9126, 22161, 33799, 25682, 118826, 13171, 119731, 32729, 40804, 13435, 102562, 118573, 31736, 76942, 47520, 32254, 53728, 1458, 36202, 85195, 129119, 42980, 86104, 36396, 58133, 95834, 128823, 8684, 59983, 125102, 34514, 3426, 81782, 51793, 84348, 43484, 108199, 126014, 17301, 129204, 43675, 24130, 123251, 94972, 12275, 107371, 125173, 47240, 132844]
[2024-12-02 18:04:59.063062] user = 1233 Cloud 47/568
[2024-12-02 18:04:59.073141] user = 1233 Local 47/568
[2024-12-02 18:04:59.098989] user = 1233 Local+ 47/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:05:00.415725] user = 1233 MPDA- 47/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.3939393939393939
Training on augumented user 123839 0/50 current_auc = 0.3939393939393939
User 123839 AUC after training: 0.42424242424242425
User 123839 improves AUC. Keeping the model.
Training on augumented user 9126 1/50 current_auc = 0.42424242424242425
User 9126 AUC after training: 0.42424242424242425
User 9126 does not improve AUC. Reverting changes.
Training on augumented user 22161 2/50 current_auc = 0.42424242424242425
User 22161 AUC after training: 0.42424242424242425
User 22161 does not improve AUC. Reverting changes.
Training on augumented user 33799 3/50 current_auc = 0.42424242424242425
User 33799 AUC after training: 0.4545454545454546
User 33799 improves AUC. Keeping the model.
Training on augumented user 25682 4/50 current_auc = 0.4545454545454546
User 25682 AUC after training: 0.393939393939394
User 25682 does not improve AUC. Reverting changes.
Training on augumented user 118826 5/50 current_auc = 0.4545454545454546
User 118826 AUC after training: 0.42424242424242425
User 118826 does not improve AUC. Reverting changes.
Training on augumented user 13171 6/50 current_auc = 0.4545454545454546
User 13171 AUC after training: 0.4242424242424243
User 13171 does not improve AUC. Reverting changes.
Training on augumented user 119731 7/50 current_auc = 0.4545454545454546
User 119731 AUC after training: 0.42424242424242425
User 119731 does not improve AUC. Reverting changes.
Training on augumented user 32729 8/50 current_auc = 0.4545454545454546
User 32729 AUC after training: 0.42424242424242425
User 32729 does not improve AUC. Reverting changes.
Training on augumented user 40804 9/50 current_auc = 0.4545454545454546
User 40804 AUC after training: 0.48484848484848486
User 40804 improves AUC. Keeping the model.
Training on augumented user 13435 10/50 current_auc = 0.48484848484848486
User 13435 AUC after training: 0.48484848484848486
User 13435 does not improve AUC. Reverting changes.
Training on augumented user 102562 11/50 current_auc = 0.48484848484848486
User 102562 AUC after training: 0.48484848484848486
User 102562 does not improve AUC. Reverting changes.
Training on augumented user 118573 12/50 current_auc = 0.48484848484848486
User 118573 AUC after training: 0.5151515151515151
User 118573 improves AUC. Keeping the model.
Training on augumented user 31736 13/50 current_auc = 0.5151515151515151
User 31736 AUC after training: 0.48484848484848486
User 31736 does not improve AUC. Reverting changes.
Training on augumented user 76942 14/50 current_auc = 0.5151515151515151
User 76942 AUC after training: 0.5151515151515151
User 76942 does not improve AUC. Reverting changes.
Training on augumented user 47520 15/50 current_auc = 0.5151515151515151
User 47520 AUC after training: 0.5151515151515151
User 47520 does not improve AUC. Reverting changes.
Training on augumented user 32254 16/50 current_auc = 0.5151515151515151
User 32254 AUC after training: 0.48484848484848486
User 32254 does not improve AUC. Reverting changes.
Training on augumented user 53728 17/50 current_auc = 0.5151515151515151
User 53728 AUC after training: 0.48484848484848486
User 53728 does not improve AUC. Reverting changes.
Training on augumented user 1458 18/50 current_auc = 0.5151515151515151
User 1458 AUC after training: 0.5151515151515151
User 1458 does not improve AUC. Reverting changes.
Training on augumented user 36202 19/50 current_auc = 0.5151515151515151
User 36202 AUC after training: 0.5151515151515151
User 36202 does not improve AUC. Reverting changes.
Training on augumented user 85195 20/50 current_auc = 0.5151515151515151
User 85195 AUC after training: 0.5151515151515151
User 85195 does not improve AUC. Reverting changes.
Training on augumented user 129119 21/50 current_auc = 0.5151515151515151
User 129119 AUC after training: 0.5151515151515151
User 129119 does not improve AUC. Reverting changes.
Training on augumented user 42980 22/50 current_auc = 0.5151515151515151
User 42980 AUC after training: 0.5151515151515151
User 42980 does not improve AUC. Reverting changes.
Training on augumented user 86104 23/50 current_auc = 0.5151515151515151
User 86104 AUC after training: 0.5151515151515151
User 86104 does not improve AUC. Reverting changes.
Training on augumented user 36396 24/50 current_auc = 0.5151515151515151
User 36396 AUC after training: 0.5151515151515151
User 36396 does not improve AUC. Reverting changes.
Training on augumented user 58133 25/50 current_auc = 0.5151515151515151
User 58133 AUC after training: 0.5151515151515151
User 58133 does not improve AUC. Reverting changes.
Training on augumented user 95834 26/50 current_auc = 0.5151515151515151
User 95834 AUC after training: 0.5151515151515151
User 95834 does not improve AUC. Reverting changes.
Training on augumented user 128823 27/50 current_auc = 0.5151515151515151
User 128823 AUC after training: 0.48484848484848486
User 128823 does not improve AUC. Reverting changes.
Training on augumented user 8684 28/50 current_auc = 0.5151515151515151
User 8684 AUC after training: 0.5151515151515151
User 8684 does not improve AUC. Reverting changes.
Training on augumented user 59983 29/50 current_auc = 0.5151515151515151
User 59983 AUC after training: 0.48484848484848486
User 59983 does not improve AUC. Reverting changes.
Training on augumented user 125102 30/50 current_auc = 0.5151515151515151
User 125102 AUC after training: 0.5151515151515151
User 125102 does not improve AUC. Reverting changes.
Training on augumented user 34514 31/50 current_auc = 0.5151515151515151
User 34514 AUC after training: 0.5151515151515151
User 34514 does not improve AUC. Reverting changes.
Training on augumented user 3426 32/50 current_auc = 0.5151515151515151
User 3426 AUC after training: 0.5151515151515151
User 3426 does not improve AUC. Reverting changes.
Training on augumented user 81782 33/50 current_auc = 0.5151515151515151
User 81782 AUC after training: 0.5151515151515151
User 81782 does not improve AUC. Reverting changes.
Training on augumented user 51793 34/50 current_auc = 0.5151515151515151
User 51793 AUC after training: 0.48484848484848486
User 51793 does not improve AUC. Reverting changes.
Training on augumented user 84348 35/50 current_auc = 0.5151515151515151
User 84348 AUC after training: 0.5151515151515151
User 84348 does not improve AUC. Reverting changes.
Training on augumented user 43484 36/50 current_auc = 0.5151515151515151
User 43484 AUC after training: 0.5151515151515151
User 43484 does not improve AUC. Reverting changes.
Training on augumented user 108199 37/50 current_auc = 0.5151515151515151
User 108199 AUC after training: 0.5151515151515151
User 108199 does not improve AUC. Reverting changes.
Training on augumented user 126014 38/50 current_auc = 0.5151515151515151
User 126014 AUC after training: 0.48484848484848486
User 126014 does not improve AUC. Reverting changes.
Training on augumented user 17301 39/50 current_auc = 0.5151515151515151
User 17301 AUC after training: 0.48484848484848486
User 17301 does not improve AUC. Reverting changes.
Training on augumented user 129204 40/50 current_auc = 0.5151515151515151
User 129204 AUC after training: 0.5151515151515151
User 129204 does not improve AUC. Reverting changes.
Training on augumented user 43675 41/50 current_auc = 0.5151515151515151
User 43675 AUC after training: 0.5151515151515151
User 43675 does not improve AUC. Reverting changes.
Training on augumented user 24130 42/50 current_auc = 0.5151515151515151
User 24130 AUC after training: 0.48484848484848486
User 24130 does not improve AUC. Reverting changes.
Training on augumented user 123251 43/50 current_auc = 0.5151515151515151
User 123251 AUC after training: 0.5151515151515151
User 123251 does not improve AUC. Reverting changes.
Training on augumented user 94972 44/50 current_auc = 0.5151515151515151
User 94972 AUC after training: 0.48484848484848486
User 94972 does not improve AUC. Reverting changes.
Training on augumented user 12275 45/50 current_auc = 0.5151515151515151
User 12275 AUC after training: 0.5151515151515151
User 12275 does not improve AUC. Reverting changes.
Training on augumented user 107371 46/50 current_auc = 0.5151515151515151
User 107371 AUC after training: 0.5151515151515151
User 107371 does not improve AUC. Reverting changes.
Training on augumented user 125173 47/50 current_auc = 0.5151515151515151
User 125173 AUC after training: 0.5151515151515151
User 125173 does not improve AUC. Reverting changes.
Training on augumented user 47240 48/50 current_auc = 0.5151515151515151
User 47240 AUC after training: 0.5151515151515151
User 47240 does not improve AUC. Reverting changes.
Training on augumented user 132844 49/50 current_auc = 0.5151515151515151
User 132844 AUC after training: 0.48484848484848486
User 132844 does not improve AUC. Reverting changes.
[2024-12-02 18:05:28.184658] start test user 1236 48/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:05:28.704631] start test user 1236 48/568 recall augumented users by random, augumented_users = [101307, 39922, 111184, 106162, 53155, 632, 85170, 37514, 65098, 103783, 17711, 5586, 104837, 11261, 79461, 61846, 63339, 121215, 58129, 131283, 52952, 29949, 103314, 54989, 4069, 114146, 97756, 47041, 105147, 3681, 46988, 32677, 50748, 71610, 63664, 87377, 43097, 106531, 45912, 104456, 115195, 136664, 18702, 45854, 135520, 28678, 94862, 125777, 54512, 65822]
[2024-12-02 18:05:28.721532] user = 1236 Cloud 48/568
[2024-12-02 18:05:28.735608] user = 1236 Local 48/568
[2024-12-02 18:05:28.758315] user = 1236 Local+ 48/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:05:30.992116] user = 1236 MPDA- 48/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7692307692307692
Training on augumented user 101307 0/50 current_auc = 0.7692307692307692
User 101307 AUC after training: 0.7692307692307692
User 101307 does not improve AUC. Reverting changes.
Training on augumented user 39922 1/50 current_auc = 0.7692307692307692
User 39922 AUC after training: 0.7692307692307692
User 39922 does not improve AUC. Reverting changes.
Training on augumented user 111184 2/50 current_auc = 0.7692307692307692
User 111184 AUC after training: 0.7692307692307692
User 111184 does not improve AUC. Reverting changes.
Training on augumented user 106162 3/50 current_auc = 0.7692307692307692
User 106162 AUC after training: 0.7692307692307692
User 106162 does not improve AUC. Reverting changes.
Training on augumented user 53155 4/50 current_auc = 0.7692307692307692
User 53155 AUC after training: 0.76657824933687
User 53155 does not improve AUC. Reverting changes.
Training on augumented user 632 5/50 current_auc = 0.7692307692307692
User 632 AUC after training: 0.7612732095490716
User 632 does not improve AUC. Reverting changes.
Training on augumented user 85170 6/50 current_auc = 0.7692307692307692
User 85170 AUC after training: 0.7692307692307692
User 85170 does not improve AUC. Reverting changes.
Training on augumented user 37514 7/50 current_auc = 0.7692307692307692
User 37514 AUC after training: 0.76657824933687
User 37514 does not improve AUC. Reverting changes.
Training on augumented user 65098 8/50 current_auc = 0.7692307692307692
User 65098 AUC after training: 0.7692307692307692
User 65098 does not improve AUC. Reverting changes.
Training on augumented user 103783 9/50 current_auc = 0.7692307692307692
User 103783 AUC after training: 0.7692307692307692
User 103783 does not improve AUC. Reverting changes.
Training on augumented user 17711 10/50 current_auc = 0.7692307692307692
User 17711 AUC after training: 0.7718832891246684
User 17711 improves AUC. Keeping the model.
Training on augumented user 5586 11/50 current_auc = 0.7718832891246684
User 5586 AUC after training: 0.7718832891246684
User 5586 does not improve AUC. Reverting changes.
Training on augumented user 104837 12/50 current_auc = 0.7718832891246684
User 104837 AUC after training: 0.7718832891246684
User 104837 does not improve AUC. Reverting changes.
Training on augumented user 11261 13/50 current_auc = 0.7718832891246684
User 11261 AUC after training: 0.7718832891246684
User 11261 does not improve AUC. Reverting changes.
Training on augumented user 79461 14/50 current_auc = 0.7718832891246684
User 79461 AUC after training: 0.7692307692307692
User 79461 does not improve AUC. Reverting changes.
Training on augumented user 61846 15/50 current_auc = 0.7718832891246684
User 61846 AUC after training: 0.7718832891246684
User 61846 does not improve AUC. Reverting changes.
Training on augumented user 63339 16/50 current_auc = 0.7718832891246684
User 63339 AUC after training: 0.7745358090185677
User 63339 improves AUC. Keeping the model.
Training on augumented user 121215 17/50 current_auc = 0.7745358090185677
User 121215 AUC after training: 0.76657824933687
User 121215 does not improve AUC. Reverting changes.
Training on augumented user 58129 18/50 current_auc = 0.7745358090185677
User 58129 AUC after training: 0.7692307692307692
User 58129 does not improve AUC. Reverting changes.
Training on augumented user 131283 19/50 current_auc = 0.7745358090185677
User 131283 AUC after training: 0.7692307692307692
User 131283 does not improve AUC. Reverting changes.
Training on augumented user 52952 20/50 current_auc = 0.7745358090185677
User 52952 AUC after training: 0.7718832891246684
User 52952 does not improve AUC. Reverting changes.
Training on augumented user 29949 21/50 current_auc = 0.7745358090185677
User 29949 AUC after training: 0.7745358090185677
User 29949 does not improve AUC. Reverting changes.
Training on augumented user 103314 22/50 current_auc = 0.7745358090185677
User 103314 AUC after training: 0.7718832891246684
User 103314 does not improve AUC. Reverting changes.
Training on augumented user 54989 23/50 current_auc = 0.7745358090185677
User 54989 AUC after training: 0.7692307692307692
User 54989 does not improve AUC. Reverting changes.
Training on augumented user 4069 24/50 current_auc = 0.7745358090185677
User 4069 AUC after training: 0.76657824933687
User 4069 does not improve AUC. Reverting changes.
Training on augumented user 114146 25/50 current_auc = 0.7745358090185677
User 114146 AUC after training: 0.7692307692307692
User 114146 does not improve AUC. Reverting changes.
Training on augumented user 97756 26/50 current_auc = 0.7745358090185677
User 97756 AUC after training: 0.7692307692307692
User 97756 does not improve AUC. Reverting changes.
Training on augumented user 47041 27/50 current_auc = 0.7745358090185677
User 47041 AUC after training: 0.7745358090185677
User 47041 does not improve AUC. Reverting changes.
Training on augumented user 105147 28/50 current_auc = 0.7745358090185677
User 105147 AUC after training: 0.7745358090185677
User 105147 does not improve AUC. Reverting changes.
Training on augumented user 3681 29/50 current_auc = 0.7745358090185677
User 3681 AUC after training: 0.76657824933687
User 3681 does not improve AUC. Reverting changes.
Training on augumented user 46988 30/50 current_auc = 0.7745358090185677
User 46988 AUC after training: 0.7718832891246684
User 46988 does not improve AUC. Reverting changes.
Training on augumented user 32677 31/50 current_auc = 0.7745358090185677
User 32677 AUC after training: 0.7718832891246684
User 32677 does not improve AUC. Reverting changes.
Training on augumented user 50748 32/50 current_auc = 0.7745358090185677
User 50748 AUC after training: 0.7639257294429709
User 50748 does not improve AUC. Reverting changes.
Training on augumented user 71610 33/50 current_auc = 0.7745358090185677
User 71610 AUC after training: 0.7692307692307692
User 71610 does not improve AUC. Reverting changes.
Training on augumented user 63664 34/50 current_auc = 0.7745358090185677
User 63664 AUC after training: 0.7692307692307692
User 63664 does not improve AUC. Reverting changes.
Training on augumented user 87377 35/50 current_auc = 0.7745358090185677
User 87377 AUC after training: 0.7745358090185677
User 87377 does not improve AUC. Reverting changes.
Training on augumented user 43097 36/50 current_auc = 0.7745358090185677
User 43097 AUC after training: 0.7718832891246684
User 43097 does not improve AUC. Reverting changes.
Training on augumented user 106531 37/50 current_auc = 0.7745358090185677
User 106531 AUC after training: 0.7718832891246684
User 106531 does not improve AUC. Reverting changes.
Training on augumented user 45912 38/50 current_auc = 0.7745358090185677
User 45912 AUC after training: 0.76657824933687
User 45912 does not improve AUC. Reverting changes.
Training on augumented user 104456 39/50 current_auc = 0.7745358090185677
User 104456 AUC after training: 0.7745358090185677
User 104456 does not improve AUC. Reverting changes.
Training on augumented user 115195 40/50 current_auc = 0.7745358090185677
User 115195 AUC after training: 0.7798408488063661
User 115195 improves AUC. Keeping the model.
Training on augumented user 136664 41/50 current_auc = 0.7798408488063661
User 136664 AUC after training: 0.7745358090185676
User 136664 does not improve AUC. Reverting changes.
Training on augumented user 18702 42/50 current_auc = 0.7798408488063661
User 18702 AUC after training: 0.7745358090185677
User 18702 does not improve AUC. Reverting changes.
Training on augumented user 45854 43/50 current_auc = 0.7798408488063661
User 45854 AUC after training: 0.7771883289124668
User 45854 does not improve AUC. Reverting changes.
Training on augumented user 135520 44/50 current_auc = 0.7798408488063661
User 135520 AUC after training: 0.7745358090185676
User 135520 does not improve AUC. Reverting changes.
Training on augumented user 28678 45/50 current_auc = 0.7798408488063661
User 28678 AUC after training: 0.7771883289124668
User 28678 does not improve AUC. Reverting changes.
Training on augumented user 94862 46/50 current_auc = 0.7798408488063661
User 94862 AUC after training: 0.7718832891246684
User 94862 does not improve AUC. Reverting changes.
Training on augumented user 125777 47/50 current_auc = 0.7798408488063661
User 125777 AUC after training: 0.7718832891246684
User 125777 does not improve AUC. Reverting changes.
Training on augumented user 54512 48/50 current_auc = 0.7798408488063661
User 54512 AUC after training: 0.7718832891246684
User 54512 does not improve AUC. Reverting changes.
Training on augumented user 65822 49/50 current_auc = 0.7798408488063661
User 65822 AUC after training: 0.7771883289124668
User 65822 does not improve AUC. Reverting changes.
[2024-12-02 18:06:04.249381] start test user 1263 49/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:06:04.872096] start test user 1263 49/568 recall augumented users by random, augumented_users = [90642, 133423, 56114, 103032, 1670, 132975, 109809, 116179, 132499, 129526, 111578, 122036, 82489, 42841, 82183, 35697, 98688, 131822, 42079, 8893, 100978, 56183, 99804, 40782, 118500, 60076, 121941, 98817, 85897, 63733, 119675, 46386, 83951, 31013, 100913, 14172, 98079, 24478, 9535, 69907, 115329, 70474, 26399, 136525, 9385, 4889, 55525, 103589, 67858, 18265]
[2024-12-02 18:06:04.905560] user = 1263 Cloud 49/568
[2024-12-02 18:06:04.930086] user = 1263 Local 49/568
[2024-12-02 18:06:04.965946] user = 1263 Local+ 49/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:06:07.506134] user = 1263 MPDA- 49/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.2727272727272727
Training on augumented user 90642 0/50 current_auc = 0.2727272727272727
User 90642 AUC after training: 0.2727272727272727
User 90642 does not improve AUC. Reverting changes.
Training on augumented user 133423 1/50 current_auc = 0.2727272727272727
User 133423 AUC after training: 0.2727272727272727
User 133423 does not improve AUC. Reverting changes.
Training on augumented user 56114 2/50 current_auc = 0.2727272727272727
User 56114 AUC after training: 0.2727272727272727
User 56114 does not improve AUC. Reverting changes.
Training on augumented user 103032 3/50 current_auc = 0.2727272727272727
User 103032 AUC after training: 0.2727272727272727
User 103032 does not improve AUC. Reverting changes.
Training on augumented user 1670 4/50 current_auc = 0.2727272727272727
User 1670 AUC after training: 0.2727272727272727
User 1670 does not improve AUC. Reverting changes.
Training on augumented user 132975 5/50 current_auc = 0.2727272727272727
User 132975 AUC after training: 0.2727272727272727
User 132975 does not improve AUC. Reverting changes.
Training on augumented user 109809 6/50 current_auc = 0.2727272727272727
User 109809 AUC after training: 0.2727272727272727
User 109809 does not improve AUC. Reverting changes.
Training on augumented user 116179 7/50 current_auc = 0.2727272727272727
User 116179 AUC after training: 0.2727272727272727
User 116179 does not improve AUC. Reverting changes.
Training on augumented user 132499 8/50 current_auc = 0.2727272727272727
User 132499 AUC after training: 0.2727272727272727
User 132499 does not improve AUC. Reverting changes.
Training on augumented user 129526 9/50 current_auc = 0.2727272727272727
User 129526 AUC after training: 0.2727272727272727
User 129526 does not improve AUC. Reverting changes.
Training on augumented user 111578 10/50 current_auc = 0.2727272727272727
User 111578 AUC after training: 0.2727272727272727
User 111578 does not improve AUC. Reverting changes.
Training on augumented user 122036 11/50 current_auc = 0.2727272727272727
User 122036 AUC after training: 0.2727272727272727
User 122036 does not improve AUC. Reverting changes.
Training on augumented user 82489 12/50 current_auc = 0.2727272727272727
User 82489 AUC after training: 0.2727272727272727
User 82489 does not improve AUC. Reverting changes.
Training on augumented user 42841 13/50 current_auc = 0.2727272727272727
User 42841 AUC after training: 0.2727272727272727
User 42841 does not improve AUC. Reverting changes.
Training on augumented user 82183 14/50 current_auc = 0.2727272727272727
User 82183 AUC after training: 0.2727272727272727
User 82183 does not improve AUC. Reverting changes.
Training on augumented user 35697 15/50 current_auc = 0.2727272727272727
User 35697 AUC after training: 0.2727272727272727
User 35697 does not improve AUC. Reverting changes.
Training on augumented user 98688 16/50 current_auc = 0.2727272727272727
User 98688 AUC after training: 0.2727272727272727
User 98688 does not improve AUC. Reverting changes.
Training on augumented user 131822 17/50 current_auc = 0.2727272727272727
User 131822 AUC after training: 0.2727272727272727
User 131822 does not improve AUC. Reverting changes.
Training on augumented user 42079 18/50 current_auc = 0.2727272727272727
User 42079 AUC after training: 0.2727272727272727
User 42079 does not improve AUC. Reverting changes.
Training on augumented user 8893 19/50 current_auc = 0.2727272727272727
User 8893 AUC after training: 0.2727272727272727
User 8893 does not improve AUC. Reverting changes.
Training on augumented user 100978 20/50 current_auc = 0.2727272727272727
User 100978 AUC after training: 0.2727272727272727
User 100978 does not improve AUC. Reverting changes.
Training on augumented user 56183 21/50 current_auc = 0.2727272727272727
User 56183 AUC after training: 0.2727272727272727
User 56183 does not improve AUC. Reverting changes.
Training on augumented user 99804 22/50 current_auc = 0.2727272727272727
User 99804 AUC after training: 0.2727272727272727
User 99804 does not improve AUC. Reverting changes.
Training on augumented user 40782 23/50 current_auc = 0.2727272727272727
User 40782 AUC after training: 0.2727272727272727
User 40782 does not improve AUC. Reverting changes.
Training on augumented user 118500 24/50 current_auc = 0.2727272727272727
User 118500 AUC after training: 0.2727272727272727
User 118500 does not improve AUC. Reverting changes.
Training on augumented user 60076 25/50 current_auc = 0.2727272727272727
User 60076 AUC after training: 0.2727272727272727
User 60076 does not improve AUC. Reverting changes.
Training on augumented user 121941 26/50 current_auc = 0.2727272727272727
User 121941 AUC after training: 0.2727272727272727
User 121941 does not improve AUC. Reverting changes.
Training on augumented user 98817 27/50 current_auc = 0.2727272727272727
User 98817 AUC after training: 0.2727272727272727
User 98817 does not improve AUC. Reverting changes.
Training on augumented user 85897 28/50 current_auc = 0.2727272727272727
User 85897 AUC after training: 0.2727272727272727
User 85897 does not improve AUC. Reverting changes.
Training on augumented user 63733 29/50 current_auc = 0.2727272727272727
User 63733 AUC after training: 0.2727272727272727
User 63733 does not improve AUC. Reverting changes.
Training on augumented user 119675 30/50 current_auc = 0.2727272727272727
User 119675 AUC after training: 0.2727272727272727
User 119675 does not improve AUC. Reverting changes.
Training on augumented user 46386 31/50 current_auc = 0.2727272727272727
User 46386 AUC after training: 0.2727272727272727
User 46386 does not improve AUC. Reverting changes.
Training on augumented user 83951 32/50 current_auc = 0.2727272727272727
User 83951 AUC after training: 0.2727272727272727
User 83951 does not improve AUC. Reverting changes.
Training on augumented user 31013 33/50 current_auc = 0.2727272727272727
User 31013 AUC after training: 0.2727272727272727
User 31013 does not improve AUC. Reverting changes.
Training on augumented user 100913 34/50 current_auc = 0.2727272727272727
User 100913 AUC after training: 0.2727272727272727
User 100913 does not improve AUC. Reverting changes.
Training on augumented user 14172 35/50 current_auc = 0.2727272727272727
User 14172 AUC after training: 0.2727272727272727
User 14172 does not improve AUC. Reverting changes.
Training on augumented user 98079 36/50 current_auc = 0.2727272727272727
User 98079 AUC after training: 0.2727272727272727
User 98079 does not improve AUC. Reverting changes.
Training on augumented user 24478 37/50 current_auc = 0.2727272727272727
User 24478 AUC after training: 0.2727272727272727
User 24478 does not improve AUC. Reverting changes.
Training on augumented user 9535 38/50 current_auc = 0.2727272727272727
User 9535 AUC after training: 0.2727272727272727
User 9535 does not improve AUC. Reverting changes.
Training on augumented user 69907 39/50 current_auc = 0.2727272727272727
User 69907 AUC after training: 0.2727272727272727
User 69907 does not improve AUC. Reverting changes.
Training on augumented user 115329 40/50 current_auc = 0.2727272727272727
User 115329 AUC after training: 0.2727272727272727
User 115329 does not improve AUC. Reverting changes.
Training on augumented user 70474 41/50 current_auc = 0.2727272727272727
User 70474 AUC after training: 0.2727272727272727
User 70474 does not improve AUC. Reverting changes.
Training on augumented user 26399 42/50 current_auc = 0.2727272727272727
User 26399 AUC after training: 0.2727272727272727
User 26399 does not improve AUC. Reverting changes.
Training on augumented user 136525 43/50 current_auc = 0.2727272727272727
User 136525 AUC after training: 0.2727272727272727
User 136525 does not improve AUC. Reverting changes.
Training on augumented user 9385 44/50 current_auc = 0.2727272727272727
User 9385 AUC after training: 0.2727272727272727
User 9385 does not improve AUC. Reverting changes.
Training on augumented user 4889 45/50 current_auc = 0.2727272727272727
User 4889 AUC after training: 0.2727272727272727
User 4889 does not improve AUC. Reverting changes.
Training on augumented user 55525 46/50 current_auc = 0.2727272727272727
User 55525 AUC after training: 0.2727272727272727
User 55525 does not improve AUC. Reverting changes.
Training on augumented user 103589 47/50 current_auc = 0.2727272727272727
User 103589 AUC after training: 0.2727272727272727
User 103589 does not improve AUC. Reverting changes.
Training on augumented user 67858 48/50 current_auc = 0.2727272727272727
User 67858 AUC after training: 0.2727272727272727
User 67858 does not improve AUC. Reverting changes.
Training on augumented user 18265 49/50 current_auc = 0.2727272727272727
User 18265 AUC after training: 0.2727272727272727
User 18265 does not improve AUC. Reverting changes.
[2024-12-02 18:06:37.097050] start test user 1265 50/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:06:37.551721] start test user 1265 50/568 recall augumented users by random, augumented_users = [23818, 68431, 18509, 135587, 47894, 113253, 72177, 29063, 113564, 129044, 37480, 43897, 137906, 93814, 68687, 51344, 63357, 16881, 26705, 40733, 97290, 64386, 51289, 16558, 134041, 124546, 71616, 118587, 87229, 117152, 118037, 92007, 50861, 117804, 105156, 118686, 55636, 99286, 83689, 123797, 79877, 16938, 69829, 87042, 100640, 32603, 90405, 3768, 101193, 71032]
[2024-12-02 18:06:37.566973] user = 1265 Cloud 50/568
[2024-12-02 18:06:37.576559] user = 1265 Local 50/568
[2024-12-02 18:06:37.604099] user = 1265 Local+ 50/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:06:41.112873] user = 1265 MPDA- 50/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.75
Training on augumented user 23818 0/50 current_auc = 0.75
User 23818 AUC after training: 0.75
User 23818 does not improve AUC. Reverting changes.
Training on augumented user 68431 1/50 current_auc = 0.75
User 68431 AUC after training: 0.75
User 68431 does not improve AUC. Reverting changes.
Training on augumented user 18509 2/50 current_auc = 0.75
User 18509 AUC after training: 0.75
User 18509 does not improve AUC. Reverting changes.
Training on augumented user 135587 3/50 current_auc = 0.75
User 135587 AUC after training: 1.0
User 135587 improves AUC. Keeping the model.
Training on augumented user 47894 4/50 current_auc = 1.0
User 47894 AUC after training: 1.0
User 47894 does not improve AUC. Reverting changes.
Training on augumented user 113253 5/50 current_auc = 1.0
User 113253 AUC after training: 1.0
User 113253 does not improve AUC. Reverting changes.
Training on augumented user 72177 6/50 current_auc = 1.0
User 72177 AUC after training: 0.75
User 72177 does not improve AUC. Reverting changes.
Training on augumented user 29063 7/50 current_auc = 1.0
User 29063 AUC after training: 1.0
User 29063 does not improve AUC. Reverting changes.
Training on augumented user 113564 8/50 current_auc = 1.0
User 113564 AUC after training: 0.75
User 113564 does not improve AUC. Reverting changes.
Training on augumented user 129044 9/50 current_auc = 1.0
User 129044 AUC after training: 1.0
User 129044 does not improve AUC. Reverting changes.
Training on augumented user 37480 10/50 current_auc = 1.0
User 37480 AUC after training: 0.75
User 37480 does not improve AUC. Reverting changes.
Training on augumented user 43897 11/50 current_auc = 1.0
User 43897 AUC after training: 1.0
User 43897 does not improve AUC. Reverting changes.
Training on augumented user 137906 12/50 current_auc = 1.0
User 137906 AUC after training: 1.0
User 137906 does not improve AUC. Reverting changes.
Training on augumented user 93814 13/50 current_auc = 1.0
User 93814 AUC after training: 1.0
User 93814 does not improve AUC. Reverting changes.
Training on augumented user 68687 14/50 current_auc = 1.0
User 68687 AUC after training: 0.75
User 68687 does not improve AUC. Reverting changes.
Training on augumented user 51344 15/50 current_auc = 1.0
User 51344 AUC after training: 1.0
User 51344 does not improve AUC. Reverting changes.
Training on augumented user 63357 16/50 current_auc = 1.0
User 63357 AUC after training: 1.0
User 63357 does not improve AUC. Reverting changes.
Training on augumented user 16881 17/50 current_auc = 1.0
User 16881 AUC after training: 1.0
User 16881 does not improve AUC. Reverting changes.
Training on augumented user 26705 18/50 current_auc = 1.0
User 26705 AUC after training: 1.0
User 26705 does not improve AUC. Reverting changes.
Training on augumented user 40733 19/50 current_auc = 1.0
User 40733 AUC after training: 1.0
User 40733 does not improve AUC. Reverting changes.
Training on augumented user 97290 20/50 current_auc = 1.0
User 97290 AUC after training: 1.0
User 97290 does not improve AUC. Reverting changes.
Training on augumented user 64386 21/50 current_auc = 1.0
User 64386 AUC after training: 1.0
User 64386 does not improve AUC. Reverting changes.
Training on augumented user 51289 22/50 current_auc = 1.0
User 51289 AUC after training: 0.75
User 51289 does not improve AUC. Reverting changes.
Training on augumented user 16558 23/50 current_auc = 1.0
User 16558 AUC after training: 1.0
User 16558 does not improve AUC. Reverting changes.
Training on augumented user 134041 24/50 current_auc = 1.0
User 134041 AUC after training: 1.0
User 134041 does not improve AUC. Reverting changes.
Training on augumented user 124546 25/50 current_auc = 1.0
User 124546 AUC after training: 1.0
User 124546 does not improve AUC. Reverting changes.
Training on augumented user 71616 26/50 current_auc = 1.0
User 71616 AUC after training: 1.0
User 71616 does not improve AUC. Reverting changes.
Training on augumented user 118587 27/50 current_auc = 1.0
User 118587 AUC after training: 1.0
User 118587 does not improve AUC. Reverting changes.
Training on augumented user 87229 28/50 current_auc = 1.0
User 87229 AUC after training: 0.75
User 87229 does not improve AUC. Reverting changes.
Training on augumented user 117152 29/50 current_auc = 1.0
User 117152 AUC after training: 1.0
User 117152 does not improve AUC. Reverting changes.
Training on augumented user 118037 30/50 current_auc = 1.0
User 118037 AUC after training: 1.0
User 118037 does not improve AUC. Reverting changes.
Training on augumented user 92007 31/50 current_auc = 1.0
User 92007 AUC after training: 0.75
User 92007 does not improve AUC. Reverting changes.
Training on augumented user 50861 32/50 current_auc = 1.0
User 50861 AUC after training: 1.0
User 50861 does not improve AUC. Reverting changes.
Training on augumented user 117804 33/50 current_auc = 1.0
User 117804 AUC after training: 1.0
User 117804 does not improve AUC. Reverting changes.
Training on augumented user 105156 34/50 current_auc = 1.0
User 105156 AUC after training: 1.0
User 105156 does not improve AUC. Reverting changes.
Training on augumented user 118686 35/50 current_auc = 1.0
User 118686 AUC after training: 1.0
User 118686 does not improve AUC. Reverting changes.
Training on augumented user 55636 36/50 current_auc = 1.0
User 55636 AUC after training: 0.75
User 55636 does not improve AUC. Reverting changes.
Training on augumented user 99286 37/50 current_auc = 1.0
User 99286 AUC after training: 0.75
User 99286 does not improve AUC. Reverting changes.
Training on augumented user 83689 38/50 current_auc = 1.0
User 83689 AUC after training: 1.0
User 83689 does not improve AUC. Reverting changes.
Training on augumented user 123797 39/50 current_auc = 1.0
User 123797 AUC after training: 0.75
User 123797 does not improve AUC. Reverting changes.
Training on augumented user 79877 40/50 current_auc = 1.0
User 79877 AUC after training: 0.75
User 79877 does not improve AUC. Reverting changes.
Training on augumented user 16938 41/50 current_auc = 1.0
User 16938 AUC after training: 1.0
User 16938 does not improve AUC. Reverting changes.
Training on augumented user 69829 42/50 current_auc = 1.0
User 69829 AUC after training: 0.75
User 69829 does not improve AUC. Reverting changes.
Training on augumented user 87042 43/50 current_auc = 1.0
User 87042 AUC after training: 0.75
User 87042 does not improve AUC. Reverting changes.
Training on augumented user 100640 44/50 current_auc = 1.0
User 100640 AUC after training: 1.0
User 100640 does not improve AUC. Reverting changes.
Training on augumented user 32603 45/50 current_auc = 1.0
User 32603 AUC after training: 0.75
User 32603 does not improve AUC. Reverting changes.
Training on augumented user 90405 46/50 current_auc = 1.0
User 90405 AUC after training: 1.0
User 90405 does not improve AUC. Reverting changes.
Training on augumented user 3768 47/50 current_auc = 1.0
User 3768 AUC after training: 1.0
User 3768 does not improve AUC. Reverting changes.
Training on augumented user 101193 48/50 current_auc = 1.0
User 101193 AUC after training: 1.0
User 101193 does not improve AUC. Reverting changes.
Training on augumented user 71032 49/50 current_auc = 1.0
User 71032 AUC after training: 1.0
User 71032 does not improve AUC. Reverting changes.
[2024-12-02 18:07:14.051893] start test user 1341 51/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:07:14.490942] start test user 1341 51/568 recall augumented users by random, augumented_users = [5876, 5068, 127980, 71597, 30319, 31062, 119075, 61775, 99278, 51847, 46675, 106136, 36627, 42633, 20453, 27337, 39609, 70363, 98829, 57459, 114474, 134148, 132493, 20167, 25876, 90115, 43385, 43231, 101135, 135958, 28453, 62088, 134480, 111722, 61414, 86787, 96796, 20958, 48497, 65526, 67037, 40439, 122569, 72883, 95402, 81232, 113428, 32280, 47801, 63956]
[2024-12-02 18:07:14.519294] user = 1341 Cloud 51/568
[2024-12-02 18:07:14.560973] user = 1341 Local 51/568
[2024-12-02 18:07:14.640902] user = 1341 Local+ 51/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:07:16.026553] user = 1341 MPDA- 51/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7603758001238902
Training on augumented user 5876 0/50 current_auc = 0.7603758001238902
User 5876 AUC after training: 0.7605822837084452
User 5876 improves AUC. Keeping the model.
Training on augumented user 5068 1/50 current_auc = 0.7605822837084452
User 5068 AUC after training: 0.7601693165393351
User 5068 does not improve AUC. Reverting changes.
Training on augumented user 127980 2/50 current_auc = 0.7605822837084452
User 127980 AUC after training: 0.7609952508775553
User 127980 improves AUC. Keeping the model.
Training on augumented user 71597 3/50 current_auc = 0.7609952508775553
User 71597 AUC after training: 0.7622341523848855
User 71597 improves AUC. Keeping the model.
Training on augumented user 30319 4/50 current_auc = 0.7622341523848855
User 30319 AUC after training: 0.7617179434234977
User 30319 does not improve AUC. Reverting changes.
Training on augumented user 31062 5/50 current_auc = 0.7622341523848855
User 31062 AUC after training: 0.7630600867231055
User 31062 improves AUC. Keeping the model.
Training on augumented user 119075 6/50 current_auc = 0.7630600867231055
User 119075 AUC after training: 0.763163328515383
User 119075 improves AUC. Keeping the model.
Training on augumented user 61775 7/50 current_auc = 0.763163328515383
User 61775 AUC after training: 0.762337394177163
User 61775 does not improve AUC. Reverting changes.
Training on augumented user 99278 8/50 current_auc = 0.763163328515383
User 99278 AUC after training: 0.7624406359694405
User 99278 does not improve AUC. Reverting changes.
Training on augumented user 51847 9/50 current_auc = 0.763163328515383
User 51847 AUC after training: 0.763369812099938
User 51847 improves AUC. Keeping the model.
Training on augumented user 46675 10/50 current_auc = 0.763369812099938
User 46675 AUC after training: 0.763576295684493
User 46675 improves AUC. Keeping the model.
Training on augumented user 106136 11/50 current_auc = 0.763576295684493
User 106136 AUC after training: 0.7636795374767706
User 106136 improves AUC. Keeping the model.
Training on augumented user 36627 12/50 current_auc = 0.7636795374767706
User 36627 AUC after training: 0.7634730538922156
User 36627 does not improve AUC. Reverting changes.
Training on augumented user 42633 13/50 current_auc = 0.7636795374767706
User 42633 AUC after training: 0.7632665703076605
User 42633 does not improve AUC. Reverting changes.
Training on augumented user 20453 14/50 current_auc = 0.7636795374767706
User 20453 AUC after training: 0.7607887672930003
User 20453 does not improve AUC. Reverting changes.
Training on augumented user 27337 15/50 current_auc = 0.7636795374767706
User 27337 AUC after training: 0.7638860210613256
User 27337 improves AUC. Keeping the model.
Training on augumented user 39609 16/50 current_auc = 0.7638860210613256
User 39609 AUC after training: 0.7640925046458806
User 39609 improves AUC. Keeping the model.
Training on augumented user 70363 17/50 current_auc = 0.7640925046458806
User 70363 AUC after training: 0.7645054718149907
User 70363 improves AUC. Keeping the model.
Training on augumented user 98829 18/50 current_auc = 0.7645054718149907
User 98829 AUC after training: 0.7638860210613256
User 98829 does not improve AUC. Reverting changes.
Training on augumented user 57459 19/50 current_auc = 0.7645054718149907
User 57459 AUC after training: 0.7640925046458806
User 57459 does not improve AUC. Reverting changes.
Training on augumented user 114474 20/50 current_auc = 0.7645054718149907
User 114474 AUC after training: 0.7642989882304356
User 114474 does not improve AUC. Reverting changes.
Training on augumented user 134148 21/50 current_auc = 0.7645054718149907
User 134148 AUC after training: 0.762956844930828
User 134148 does not improve AUC. Reverting changes.
Training on augumented user 132493 22/50 current_auc = 0.7645054718149907
User 132493 AUC after training: 0.7635762956844931
User 132493 does not improve AUC. Reverting changes.
Training on augumented user 20167 23/50 current_auc = 0.7645054718149907
User 20167 AUC after training: 0.7645054718149906
User 20167 does not improve AUC. Reverting changes.
Training on augumented user 25876 24/50 current_auc = 0.7645054718149907
User 25876 AUC after training: 0.7640925046458806
User 25876 does not improve AUC. Reverting changes.
Training on augumented user 90115 25/50 current_auc = 0.7645054718149907
User 90115 AUC after training: 0.7625438777617178
User 90115 does not improve AUC. Reverting changes.
Training on augumented user 43385 26/50 current_auc = 0.7645054718149907
User 43385 AUC after training: 0.7646087136072682
User 43385 improves AUC. Keeping the model.
Training on augumented user 43231 27/50 current_auc = 0.7646087136072682
User 43231 AUC after training: 0.7650216807763783
User 43231 improves AUC. Keeping the model.
Training on augumented user 101135 28/50 current_auc = 0.7650216807763783
User 101135 AUC after training: 0.7647119553995458
User 101135 does not improve AUC. Reverting changes.
Training on augumented user 135958 29/50 current_auc = 0.7650216807763783
User 135958 AUC after training: 0.7636795374767705
User 135958 does not improve AUC. Reverting changes.
Training on augumented user 28453 30/50 current_auc = 0.7650216807763783
User 28453 AUC after training: 0.7644022300227132
User 28453 does not improve AUC. Reverting changes.
Training on augumented user 62088 31/50 current_auc = 0.7650216807763783
User 62088 AUC after training: 0.7642989882304356
User 62088 does not improve AUC. Reverting changes.
Training on augumented user 134480 32/50 current_auc = 0.7650216807763783
User 134480 AUC after training: 0.7645054718149907
User 134480 does not improve AUC. Reverting changes.
Training on augumented user 111722 33/50 current_auc = 0.7650216807763783
User 111722 AUC after training: 0.7644022300227131
User 111722 does not improve AUC. Reverting changes.
Training on augumented user 61414 34/50 current_auc = 0.7650216807763783
User 61414 AUC after training: 0.7644022300227132
User 61414 does not improve AUC. Reverting changes.
Training on augumented user 86787 35/50 current_auc = 0.7650216807763783
User 86787 AUC after training: 0.7642989882304357
User 86787 does not improve AUC. Reverting changes.
Training on augumented user 96796 36/50 current_auc = 0.7650216807763783
User 96796 AUC after training: 0.7649184389841007
User 96796 does not improve AUC. Reverting changes.
Training on augumented user 20958 37/50 current_auc = 0.7650216807763783
User 20958 AUC after training: 0.7640925046458806
User 20958 does not improve AUC. Reverting changes.
Training on augumented user 48497 38/50 current_auc = 0.7650216807763783
User 48497 AUC after training: 0.7640925046458806
User 48497 does not improve AUC. Reverting changes.
Training on augumented user 65526 39/50 current_auc = 0.7650216807763783
User 65526 AUC after training: 0.7639892628536031
User 65526 does not improve AUC. Reverting changes.
Training on augumented user 67037 40/50 current_auc = 0.7650216807763783
User 67037 AUC after training: 0.7651249225686558
User 67037 improves AUC. Keeping the model.
Training on augumented user 40439 41/50 current_auc = 0.7651249225686558
User 40439 AUC after training: 0.7650216807763782
User 40439 does not improve AUC. Reverting changes.
Training on augumented user 122569 42/50 current_auc = 0.7651249225686558
User 122569 AUC after training: 0.7650216807763783
User 122569 does not improve AUC. Reverting changes.
Training on augumented user 72883 43/50 current_auc = 0.7651249225686558
User 72883 AUC after training: 0.7644022300227131
User 72883 does not improve AUC. Reverting changes.
Training on augumented user 95402 44/50 current_auc = 0.7651249225686558
User 95402 AUC after training: 0.7636795374767706
User 95402 does not improve AUC. Reverting changes.
Training on augumented user 81232 45/50 current_auc = 0.7651249225686558
User 81232 AUC after training: 0.7645054718149907
User 81232 does not improve AUC. Reverting changes.
Training on augumented user 113428 46/50 current_auc = 0.7651249225686558
User 113428 AUC after training: 0.7648151971918232
User 113428 does not improve AUC. Reverting changes.
Training on augumented user 32280 47/50 current_auc = 0.7651249225686558
User 32280 AUC after training: 0.7646087136072682
User 32280 does not improve AUC. Reverting changes.
Training on augumented user 47801 48/50 current_auc = 0.7651249225686558
User 47801 AUC after training: 0.7647119553995457
User 47801 does not improve AUC. Reverting changes.
Training on augumented user 63956 49/50 current_auc = 0.7651249225686558
User 63956 AUC after training: 0.7640925046458806
User 63956 does not improve AUC. Reverting changes.
[2024-12-02 18:07:45.767914] start test user 1374 52/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:07:46.587317] start test user 1374 52/568 recall augumented users by random, augumented_users = [51598, 129974, 23991, 133477, 130624, 10338, 102803, 62439, 67487, 12525, 78966, 105204, 68915, 43678, 57899, 49170, 53893, 57676, 82787, 119126, 126466, 69876, 94661, 62224, 54887, 109422, 82043, 15744, 78544, 77546, 46180, 134122, 6245, 70581, 98972, 99223, 111888, 2585, 85899, 3189, 122535, 39258, 30026, 76253, 3711, 69853, 84010, 13234, 44625, 79143]
[2024-12-02 18:07:46.602504] user = 1374 Cloud 52/568
[2024-12-02 18:07:46.612706] user = 1374 Local 52/568
[2024-12-02 18:07:46.714581] user = 1374 Local+ 52/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:07:48.383374] user = 1374 MPDA- 52/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5314685314685315
Training on augumented user 51598 0/50 current_auc = 0.5314685314685315
User 51598 AUC after training: 0.5314685314685315
User 51598 does not improve AUC. Reverting changes.
Training on augumented user 129974 1/50 current_auc = 0.5314685314685315
User 129974 AUC after training: 0.5314685314685315
User 129974 does not improve AUC. Reverting changes.
Training on augumented user 23991 2/50 current_auc = 0.5314685314685315
User 23991 AUC after training: 0.5314685314685315
User 23991 does not improve AUC. Reverting changes.
Training on augumented user 133477 3/50 current_auc = 0.5314685314685315
User 133477 AUC after training: 0.5314685314685315
User 133477 does not improve AUC. Reverting changes.
Training on augumented user 130624 4/50 current_auc = 0.5314685314685315
User 130624 AUC after training: 0.5314685314685315
User 130624 does not improve AUC. Reverting changes.
Training on augumented user 10338 5/50 current_auc = 0.5314685314685315
User 10338 AUC after training: 0.5314685314685315
User 10338 does not improve AUC. Reverting changes.
Training on augumented user 102803 6/50 current_auc = 0.5314685314685315
User 102803 AUC after training: 0.5314685314685315
User 102803 does not improve AUC. Reverting changes.
Training on augumented user 62439 7/50 current_auc = 0.5314685314685315
User 62439 AUC after training: 0.5314685314685315
User 62439 does not improve AUC. Reverting changes.
Training on augumented user 67487 8/50 current_auc = 0.5314685314685315
User 67487 AUC after training: 0.5314685314685315
User 67487 does not improve AUC. Reverting changes.
Training on augumented user 12525 9/50 current_auc = 0.5314685314685315
User 12525 AUC after training: 0.5314685314685315
User 12525 does not improve AUC. Reverting changes.
Training on augumented user 78966 10/50 current_auc = 0.5314685314685315
User 78966 AUC after training: 0.5314685314685315
User 78966 does not improve AUC. Reverting changes.
Training on augumented user 105204 11/50 current_auc = 0.5314685314685315
User 105204 AUC after training: 0.5314685314685315
User 105204 does not improve AUC. Reverting changes.
Training on augumented user 68915 12/50 current_auc = 0.5314685314685315
User 68915 AUC after training: 0.5314685314685315
User 68915 does not improve AUC. Reverting changes.
Training on augumented user 43678 13/50 current_auc = 0.5314685314685315
User 43678 AUC after training: 0.5314685314685315
User 43678 does not improve AUC. Reverting changes.
Training on augumented user 57899 14/50 current_auc = 0.5314685314685315
User 57899 AUC after training: 0.5314685314685315
User 57899 does not improve AUC. Reverting changes.
Training on augumented user 49170 15/50 current_auc = 0.5314685314685315
User 49170 AUC after training: 0.5314685314685315
User 49170 does not improve AUC. Reverting changes.
Training on augumented user 53893 16/50 current_auc = 0.5314685314685315
User 53893 AUC after training: 0.5314685314685315
User 53893 does not improve AUC. Reverting changes.
Training on augumented user 57676 17/50 current_auc = 0.5314685314685315
User 57676 AUC after training: 0.5314685314685315
User 57676 does not improve AUC. Reverting changes.
Training on augumented user 82787 18/50 current_auc = 0.5314685314685315
User 82787 AUC after training: 0.5314685314685315
User 82787 does not improve AUC. Reverting changes.
Training on augumented user 119126 19/50 current_auc = 0.5314685314685315
User 119126 AUC after training: 0.5314685314685315
User 119126 does not improve AUC. Reverting changes.
Training on augumented user 126466 20/50 current_auc = 0.5314685314685315
User 126466 AUC after training: 0.5314685314685315
User 126466 does not improve AUC. Reverting changes.
Training on augumented user 69876 21/50 current_auc = 0.5314685314685315
User 69876 AUC after training: 0.5314685314685315
User 69876 does not improve AUC. Reverting changes.
Training on augumented user 94661 22/50 current_auc = 0.5314685314685315
User 94661 AUC after training: 0.5314685314685315
User 94661 does not improve AUC. Reverting changes.
Training on augumented user 62224 23/50 current_auc = 0.5314685314685315
User 62224 AUC after training: 0.5314685314685315
User 62224 does not improve AUC. Reverting changes.
Training on augumented user 54887 24/50 current_auc = 0.5314685314685315
User 54887 AUC after training: 0.5314685314685315
User 54887 does not improve AUC. Reverting changes.
Training on augumented user 109422 25/50 current_auc = 0.5314685314685315
User 109422 AUC after training: 0.5314685314685315
User 109422 does not improve AUC. Reverting changes.
Training on augumented user 82043 26/50 current_auc = 0.5314685314685315
User 82043 AUC after training: 0.5314685314685315
User 82043 does not improve AUC. Reverting changes.
Training on augumented user 15744 27/50 current_auc = 0.5314685314685315
User 15744 AUC after training: 0.5314685314685315
User 15744 does not improve AUC. Reverting changes.
Training on augumented user 78544 28/50 current_auc = 0.5314685314685315
User 78544 AUC after training: 0.5314685314685315
User 78544 does not improve AUC. Reverting changes.
Training on augumented user 77546 29/50 current_auc = 0.5314685314685315
User 77546 AUC after training: 0.5314685314685315
User 77546 does not improve AUC. Reverting changes.
Training on augumented user 46180 30/50 current_auc = 0.5314685314685315
User 46180 AUC after training: 0.5384615384615385
User 46180 improves AUC. Keeping the model.
Training on augumented user 134122 31/50 current_auc = 0.5384615384615385
User 134122 AUC after training: 0.5314685314685315
User 134122 does not improve AUC. Reverting changes.
Training on augumented user 6245 32/50 current_auc = 0.5384615384615385
User 6245 AUC after training: 0.5314685314685315
User 6245 does not improve AUC. Reverting changes.
Training on augumented user 70581 33/50 current_auc = 0.5384615384615385
User 70581 AUC after training: 0.5384615384615385
User 70581 does not improve AUC. Reverting changes.
Training on augumented user 98972 34/50 current_auc = 0.5384615384615385
User 98972 AUC after training: 0.5384615384615385
User 98972 does not improve AUC. Reverting changes.
Training on augumented user 99223 35/50 current_auc = 0.5384615384615385
User 99223 AUC after training: 0.5384615384615385
User 99223 does not improve AUC. Reverting changes.
Training on augumented user 111888 36/50 current_auc = 0.5384615384615385
User 111888 AUC after training: 0.5314685314685315
User 111888 does not improve AUC. Reverting changes.
Training on augumented user 2585 37/50 current_auc = 0.5384615384615385
User 2585 AUC after training: 0.5384615384615385
User 2585 does not improve AUC. Reverting changes.
Training on augumented user 85899 38/50 current_auc = 0.5384615384615385
User 85899 AUC after training: 0.5384615384615385
User 85899 does not improve AUC. Reverting changes.
Training on augumented user 3189 39/50 current_auc = 0.5384615384615385
User 3189 AUC after training: 0.5384615384615385
User 3189 does not improve AUC. Reverting changes.
Training on augumented user 122535 40/50 current_auc = 0.5384615384615385
User 122535 AUC after training: 0.5384615384615385
User 122535 does not improve AUC. Reverting changes.
Training on augumented user 39258 41/50 current_auc = 0.5384615384615385
User 39258 AUC after training: 0.5384615384615385
User 39258 does not improve AUC. Reverting changes.
Training on augumented user 30026 42/50 current_auc = 0.5384615384615385
User 30026 AUC after training: 0.5384615384615385
User 30026 does not improve AUC. Reverting changes.
Training on augumented user 76253 43/50 current_auc = 0.5384615384615385
User 76253 AUC after training: 0.5384615384615385
User 76253 does not improve AUC. Reverting changes.
Training on augumented user 3711 44/50 current_auc = 0.5384615384615385
User 3711 AUC after training: 0.5384615384615385
User 3711 does not improve AUC. Reverting changes.
Training on augumented user 69853 45/50 current_auc = 0.5384615384615385
User 69853 AUC after training: 0.5384615384615385
User 69853 does not improve AUC. Reverting changes.
Training on augumented user 84010 46/50 current_auc = 0.5384615384615385
User 84010 AUC after training: 0.5314685314685315
User 84010 does not improve AUC. Reverting changes.
Training on augumented user 13234 47/50 current_auc = 0.5384615384615385
User 13234 AUC after training: 0.5384615384615385
User 13234 does not improve AUC. Reverting changes.
Training on augumented user 44625 48/50 current_auc = 0.5384615384615385
User 44625 AUC after training: 0.5384615384615385
User 44625 does not improve AUC. Reverting changes.
Training on augumented user 79143 49/50 current_auc = 0.5384615384615385
User 79143 AUC after training: 0.5384615384615385
User 79143 does not improve AUC. Reverting changes.
[2024-12-02 18:08:06.860451] start test user 1454 53/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:08:07.484333] start test user 1454 53/568 recall augumented users by random, augumented_users = [13125, 36983, 124613, 64816, 70205, 65982, 29415, 120110, 103003, 67364, 13729, 81636, 124153, 77276, 73840, 27098, 59901, 14408, 113244, 56430, 55914, 99020, 61966, 30189, 76181, 9724, 121117, 41743, 44824, 22811, 1817, 57204, 127841, 62928, 113386, 9302, 87565, 113763, 99691, 109659, 90552, 50104, 2015, 76397, 135238, 87673, 19666, 77249, 84911, 95606]
[2024-12-02 18:08:07.498974] user = 1454 Cloud 53/568
[2024-12-02 18:08:07.509244] user = 1454 Local 53/568
[2024-12-02 18:08:07.538995] user = 1454 Local+ 53/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:08:09.395164] user = 1454 MPDA- 53/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7142857142857144
Training on augumented user 13125 0/50 current_auc = 0.7142857142857144
User 13125 AUC after training: 0.7142857142857144
User 13125 does not improve AUC. Reverting changes.
Training on augumented user 36983 1/50 current_auc = 0.7142857142857144
User 36983 AUC after training: 0.6938775510204083
User 36983 does not improve AUC. Reverting changes.
Training on augumented user 124613 2/50 current_auc = 0.7142857142857144
User 124613 AUC after training: 0.7142857142857144
User 124613 does not improve AUC. Reverting changes.
Training on augumented user 64816 3/50 current_auc = 0.7142857142857144
User 64816 AUC after training: 0.7040816326530612
User 64816 does not improve AUC. Reverting changes.
Training on augumented user 70205 4/50 current_auc = 0.7142857142857144
User 70205 AUC after training: 0.7142857142857144
User 70205 does not improve AUC. Reverting changes.
Training on augumented user 65982 5/50 current_auc = 0.7142857142857144
User 65982 AUC after training: 0.7040816326530612
User 65982 does not improve AUC. Reverting changes.
Training on augumented user 29415 6/50 current_auc = 0.7142857142857144
User 29415 AUC after training: 0.7142857142857144
User 29415 does not improve AUC. Reverting changes.
Training on augumented user 120110 7/50 current_auc = 0.7142857142857144
User 120110 AUC after training: 0.7142857142857144
User 120110 does not improve AUC. Reverting changes.
Training on augumented user 103003 8/50 current_auc = 0.7142857142857144
User 103003 AUC after training: 0.7040816326530612
User 103003 does not improve AUC. Reverting changes.
Training on augumented user 67364 9/50 current_auc = 0.7142857142857144
User 67364 AUC after training: 0.7142857142857144
User 67364 does not improve AUC. Reverting changes.
Training on augumented user 13729 10/50 current_auc = 0.7142857142857144
User 13729 AUC after training: 0.7040816326530612
User 13729 does not improve AUC. Reverting changes.
Training on augumented user 81636 11/50 current_auc = 0.7142857142857144
User 81636 AUC after training: 0.6938775510204083
User 81636 does not improve AUC. Reverting changes.
Training on augumented user 124153 12/50 current_auc = 0.7142857142857144
User 124153 AUC after training: 0.7142857142857144
User 124153 does not improve AUC. Reverting changes.
Training on augumented user 77276 13/50 current_auc = 0.7142857142857144
User 77276 AUC after training: 0.7142857142857144
User 77276 does not improve AUC. Reverting changes.
Training on augumented user 73840 14/50 current_auc = 0.7142857142857144
User 73840 AUC after training: 0.7142857142857144
User 73840 does not improve AUC. Reverting changes.
Training on augumented user 27098 15/50 current_auc = 0.7142857142857144
User 27098 AUC after training: 0.6938775510204083
User 27098 does not improve AUC. Reverting changes.
Training on augumented user 59901 16/50 current_auc = 0.7142857142857144
User 59901 AUC after training: 0.7040816326530612
User 59901 does not improve AUC. Reverting changes.
Training on augumented user 14408 17/50 current_auc = 0.7142857142857144
User 14408 AUC after training: 0.7040816326530612
User 14408 does not improve AUC. Reverting changes.
Training on augumented user 113244 18/50 current_auc = 0.7142857142857144
User 113244 AUC after training: 0.7142857142857144
User 113244 does not improve AUC. Reverting changes.
Training on augumented user 56430 19/50 current_auc = 0.7142857142857144
User 56430 AUC after training: 0.7142857142857144
User 56430 does not improve AUC. Reverting changes.
Training on augumented user 55914 20/50 current_auc = 0.7142857142857144
User 55914 AUC after training: 0.7142857142857144
User 55914 does not improve AUC. Reverting changes.
Training on augumented user 99020 21/50 current_auc = 0.7142857142857144
User 99020 AUC after training: 0.6938775510204083
User 99020 does not improve AUC. Reverting changes.
Training on augumented user 61966 22/50 current_auc = 0.7142857142857144
User 61966 AUC after training: 0.7040816326530612
User 61966 does not improve AUC. Reverting changes.
Training on augumented user 30189 23/50 current_auc = 0.7142857142857144
User 30189 AUC after training: 0.7142857142857144
User 30189 does not improve AUC. Reverting changes.
Training on augumented user 76181 24/50 current_auc = 0.7142857142857144
User 76181 AUC after training: 0.7142857142857144
User 76181 does not improve AUC. Reverting changes.
Training on augumented user 9724 25/50 current_auc = 0.7142857142857144
User 9724 AUC after training: 0.7142857142857144
User 9724 does not improve AUC. Reverting changes.
Training on augumented user 121117 26/50 current_auc = 0.7142857142857144
User 121117 AUC after training: 0.7142857142857144
User 121117 does not improve AUC. Reverting changes.
Training on augumented user 41743 27/50 current_auc = 0.7142857142857144
User 41743 AUC after training: 0.7142857142857144
User 41743 does not improve AUC. Reverting changes.
Training on augumented user 44824 28/50 current_auc = 0.7142857142857144
User 44824 AUC after training: 0.7040816326530612
User 44824 does not improve AUC. Reverting changes.
Training on augumented user 22811 29/50 current_auc = 0.7142857142857144
User 22811 AUC after training: 0.7142857142857144
User 22811 does not improve AUC. Reverting changes.
Training on augumented user 1817 30/50 current_auc = 0.7142857142857144
User 1817 AUC after training: 0.7040816326530612
User 1817 does not improve AUC. Reverting changes.
Training on augumented user 57204 31/50 current_auc = 0.7142857142857144
User 57204 AUC after training: 0.7142857142857144
User 57204 does not improve AUC. Reverting changes.
Training on augumented user 127841 32/50 current_auc = 0.7142857142857144
User 127841 AUC after training: 0.7142857142857144
User 127841 does not improve AUC. Reverting changes.
Training on augumented user 62928 33/50 current_auc = 0.7142857142857144
User 62928 AUC after training: 0.7142857142857144
User 62928 does not improve AUC. Reverting changes.
Training on augumented user 113386 34/50 current_auc = 0.7142857142857144
User 113386 AUC after training: 0.6836734693877551
User 113386 does not improve AUC. Reverting changes.
Training on augumented user 9302 35/50 current_auc = 0.7142857142857144
User 9302 AUC after training: 0.6938775510204083
User 9302 does not improve AUC. Reverting changes.
Training on augumented user 87565 36/50 current_auc = 0.7142857142857144
User 87565 AUC after training: 0.6938775510204083
User 87565 does not improve AUC. Reverting changes.
Training on augumented user 113763 37/50 current_auc = 0.7142857142857144
User 113763 AUC after training: 0.7142857142857144
User 113763 does not improve AUC. Reverting changes.
Training on augumented user 99691 38/50 current_auc = 0.7142857142857144
User 99691 AUC after training: 0.7142857142857144
User 99691 does not improve AUC. Reverting changes.
Training on augumented user 109659 39/50 current_auc = 0.7142857142857144
User 109659 AUC after training: 0.7142857142857144
User 109659 does not improve AUC. Reverting changes.
Training on augumented user 90552 40/50 current_auc = 0.7142857142857144
User 90552 AUC after training: 0.7040816326530612
User 90552 does not improve AUC. Reverting changes.
Training on augumented user 50104 41/50 current_auc = 0.7142857142857144
User 50104 AUC after training: 0.7142857142857144
User 50104 does not improve AUC. Reverting changes.
Training on augumented user 2015 42/50 current_auc = 0.7142857142857144
User 2015 AUC after training: 0.7142857142857144
User 2015 does not improve AUC. Reverting changes.
Training on augumented user 76397 43/50 current_auc = 0.7142857142857144
User 76397 AUC after training: 0.7040816326530612
User 76397 does not improve AUC. Reverting changes.
Training on augumented user 135238 44/50 current_auc = 0.7142857142857144
User 135238 AUC after training: 0.7142857142857144
User 135238 does not improve AUC. Reverting changes.
Training on augumented user 87673 45/50 current_auc = 0.7142857142857144
User 87673 AUC after training: 0.7040816326530612
User 87673 does not improve AUC. Reverting changes.
Training on augumented user 19666 46/50 current_auc = 0.7142857142857144
User 19666 AUC after training: 0.7142857142857144
User 19666 does not improve AUC. Reverting changes.
Training on augumented user 77249 47/50 current_auc = 0.7142857142857144
User 77249 AUC after training: 0.7142857142857144
User 77249 does not improve AUC. Reverting changes.
Training on augumented user 84911 48/50 current_auc = 0.7142857142857144
User 84911 AUC after training: 0.7040816326530612
User 84911 does not improve AUC. Reverting changes.
Training on augumented user 95606 49/50 current_auc = 0.7142857142857144
User 95606 AUC after training: 0.7142857142857144
User 95606 does not improve AUC. Reverting changes.
[2024-12-02 18:08:41.595488] start test user 1516 54/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:08:42.035419] start test user 1516 54/568 recall augumented users by random, augumented_users = [8370, 60158, 126680, 81899, 15441, 14570, 37612, 111542, 25289, 51627, 97069, 68502, 37790, 61076, 91726, 21682, 101951, 19015, 49033, 15443, 38837, 136481, 84630, 125201, 50311, 37001, 9517, 11135, 31521, 111748, 17777, 34442, 18700, 98238, 109257, 37978, 12253, 110854, 95150, 81935, 70930, 121862, 11163, 38863, 90791, 58460, 43463, 12618, 129660, 128891]
[2024-12-02 18:08:42.051683] user = 1516 Cloud 54/568
[2024-12-02 18:08:42.061889] user = 1516 Local 54/568
[2024-12-02 18:08:42.214703] user = 1516 Local+ 54/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:08:44.408471] user = 1516 MPDA- 54/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.9375
Training on augumented user 8370 0/50 current_auc = 0.9375
User 8370 AUC after training: 0.9375
User 8370 does not improve AUC. Reverting changes.
Training on augumented user 60158 1/50 current_auc = 0.9375
User 60158 AUC after training: 0.9375
User 60158 does not improve AUC. Reverting changes.
Training on augumented user 126680 2/50 current_auc = 0.9375
User 126680 AUC after training: 1.0
User 126680 improves AUC. Keeping the model.
Training on augumented user 81899 3/50 current_auc = 1.0
User 81899 AUC after training: 1.0
User 81899 does not improve AUC. Reverting changes.
Training on augumented user 15441 4/50 current_auc = 1.0
User 15441 AUC after training: 1.0
User 15441 does not improve AUC. Reverting changes.
Training on augumented user 14570 5/50 current_auc = 1.0
User 14570 AUC after training: 1.0
User 14570 does not improve AUC. Reverting changes.
Training on augumented user 37612 6/50 current_auc = 1.0
User 37612 AUC after training: 1.0
User 37612 does not improve AUC. Reverting changes.
Training on augumented user 111542 7/50 current_auc = 1.0
User 111542 AUC after training: 1.0
User 111542 does not improve AUC. Reverting changes.
Training on augumented user 25289 8/50 current_auc = 1.0
User 25289 AUC after training: 0.9375
User 25289 does not improve AUC. Reverting changes.
Training on augumented user 51627 9/50 current_auc = 1.0
User 51627 AUC after training: 1.0
User 51627 does not improve AUC. Reverting changes.
Training on augumented user 97069 10/50 current_auc = 1.0
User 97069 AUC after training: 1.0
User 97069 does not improve AUC. Reverting changes.
Training on augumented user 68502 11/50 current_auc = 1.0
User 68502 AUC after training: 1.0
User 68502 does not improve AUC. Reverting changes.
Training on augumented user 37790 12/50 current_auc = 1.0
User 37790 AUC after training: 0.9375
User 37790 does not improve AUC. Reverting changes.
Training on augumented user 61076 13/50 current_auc = 1.0
User 61076 AUC after training: 1.0
User 61076 does not improve AUC. Reverting changes.
Training on augumented user 91726 14/50 current_auc = 1.0
User 91726 AUC after training: 1.0
User 91726 does not improve AUC. Reverting changes.
Training on augumented user 21682 15/50 current_auc = 1.0
User 21682 AUC after training: 1.0
User 21682 does not improve AUC. Reverting changes.
Training on augumented user 101951 16/50 current_auc = 1.0
User 101951 AUC after training: 1.0
User 101951 does not improve AUC. Reverting changes.
Training on augumented user 19015 17/50 current_auc = 1.0
User 19015 AUC after training: 1.0
User 19015 does not improve AUC. Reverting changes.
Training on augumented user 49033 18/50 current_auc = 1.0
User 49033 AUC after training: 1.0
User 49033 does not improve AUC. Reverting changes.
Training on augumented user 15443 19/50 current_auc = 1.0
User 15443 AUC after training: 1.0
User 15443 does not improve AUC. Reverting changes.
Training on augumented user 38837 20/50 current_auc = 1.0
User 38837 AUC after training: 1.0
User 38837 does not improve AUC. Reverting changes.
Training on augumented user 136481 21/50 current_auc = 1.0
User 136481 AUC after training: 1.0
User 136481 does not improve AUC. Reverting changes.
Training on augumented user 84630 22/50 current_auc = 1.0
User 84630 AUC after training: 1.0
User 84630 does not improve AUC. Reverting changes.
Training on augumented user 125201 23/50 current_auc = 1.0
User 125201 AUC after training: 0.9375
User 125201 does not improve AUC. Reverting changes.
Training on augumented user 50311 24/50 current_auc = 1.0
User 50311 AUC after training: 1.0
User 50311 does not improve AUC. Reverting changes.
Training on augumented user 37001 25/50 current_auc = 1.0
User 37001 AUC after training: 1.0
User 37001 does not improve AUC. Reverting changes.
Training on augumented user 9517 26/50 current_auc = 1.0
User 9517 AUC after training: 1.0
User 9517 does not improve AUC. Reverting changes.
Training on augumented user 11135 27/50 current_auc = 1.0
User 11135 AUC after training: 1.0
User 11135 does not improve AUC. Reverting changes.
Training on augumented user 31521 28/50 current_auc = 1.0
User 31521 AUC after training: 1.0
User 31521 does not improve AUC. Reverting changes.
Training on augumented user 111748 29/50 current_auc = 1.0
User 111748 AUC after training: 1.0
User 111748 does not improve AUC. Reverting changes.
Training on augumented user 17777 30/50 current_auc = 1.0
User 17777 AUC after training: 1.0
User 17777 does not improve AUC. Reverting changes.
Training on augumented user 34442 31/50 current_auc = 1.0
User 34442 AUC after training: 1.0
User 34442 does not improve AUC. Reverting changes.
Training on augumented user 18700 32/50 current_auc = 1.0
User 18700 AUC after training: 0.9375
User 18700 does not improve AUC. Reverting changes.
Training on augumented user 98238 33/50 current_auc = 1.0
User 98238 AUC after training: 0.9375
User 98238 does not improve AUC. Reverting changes.
Training on augumented user 109257 34/50 current_auc = 1.0
User 109257 AUC after training: 1.0
User 109257 does not improve AUC. Reverting changes.
Training on augumented user 37978 35/50 current_auc = 1.0
User 37978 AUC after training: 0.9375
User 37978 does not improve AUC. Reverting changes.
Training on augumented user 12253 36/50 current_auc = 1.0
User 12253 AUC after training: 1.0
User 12253 does not improve AUC. Reverting changes.
Training on augumented user 110854 37/50 current_auc = 1.0
User 110854 AUC after training: 0.9375
User 110854 does not improve AUC. Reverting changes.
Training on augumented user 95150 38/50 current_auc = 1.0
User 95150 AUC after training: 1.0
User 95150 does not improve AUC. Reverting changes.
Training on augumented user 81935 39/50 current_auc = 1.0
User 81935 AUC after training: 1.0
User 81935 does not improve AUC. Reverting changes.
Training on augumented user 70930 40/50 current_auc = 1.0
User 70930 AUC after training: 1.0
User 70930 does not improve AUC. Reverting changes.
Training on augumented user 121862 41/50 current_auc = 1.0
User 121862 AUC after training: 1.0
User 121862 does not improve AUC. Reverting changes.
Training on augumented user 11163 42/50 current_auc = 1.0
User 11163 AUC after training: 1.0
User 11163 does not improve AUC. Reverting changes.
Training on augumented user 38863 43/50 current_auc = 1.0
User 38863 AUC after training: 1.0
User 38863 does not improve AUC. Reverting changes.
Training on augumented user 90791 44/50 current_auc = 1.0
User 90791 AUC after training: 1.0
User 90791 does not improve AUC. Reverting changes.
Training on augumented user 58460 45/50 current_auc = 1.0
User 58460 AUC after training: 1.0
User 58460 does not improve AUC. Reverting changes.
Training on augumented user 43463 46/50 current_auc = 1.0
User 43463 AUC after training: 1.0
User 43463 does not improve AUC. Reverting changes.
Training on augumented user 12618 47/50 current_auc = 1.0
User 12618 AUC after training: 1.0
User 12618 does not improve AUC. Reverting changes.
Training on augumented user 129660 48/50 current_auc = 1.0
User 129660 AUC after training: 1.0
User 129660 does not improve AUC. Reverting changes.
Training on augumented user 128891 49/50 current_auc = 1.0
User 128891 AUC after training: 1.0
User 128891 does not improve AUC. Reverting changes.
[2024-12-02 18:09:14.212164] start test user 1584 55/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:09:14.657883] start test user 1584 55/568 recall augumented users by random, augumented_users = [29653, 128148, 119214, 93037, 7913, 97712, 69417, 2600, 86859, 4338, 37192, 78227, 81903, 22501, 137216, 95915, 44897, 2944, 96975, 109380, 87653, 52100, 60376, 105620, 56320, 56903, 125585, 94921, 18468, 95597, 32879, 40578, 114245, 17237, 58406, 49100, 37450, 129375, 58290, 96013, 95319, 66390, 63168, 82419, 24104, 67313, 70036, 120685, 104736, 15997]
[2024-12-02 18:09:14.672265] user = 1584 Cloud 55/568
[2024-12-02 18:09:14.681739] user = 1584 Local 55/568
[2024-12-02 18:09:14.733021] user = 1584 Local+ 55/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:09:17.216754] user = 1584 MPDA- 55/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.9107142857142857
Training on augumented user 29653 0/50 current_auc = 0.9107142857142857
User 29653 AUC after training: 0.9107142857142857
User 29653 does not improve AUC. Reverting changes.
Training on augumented user 128148 1/50 current_auc = 0.9107142857142857
User 128148 AUC after training: 0.9107142857142857
User 128148 does not improve AUC. Reverting changes.
Training on augumented user 119214 2/50 current_auc = 0.9107142857142857
User 119214 AUC after training: 0.9285714285714286
User 119214 improves AUC. Keeping the model.
Training on augumented user 93037 3/50 current_auc = 0.9285714285714286
User 93037 AUC after training: 0.9285714285714286
User 93037 does not improve AUC. Reverting changes.
Training on augumented user 7913 4/50 current_auc = 0.9285714285714286
User 7913 AUC after training: 0.9285714285714286
User 7913 does not improve AUC. Reverting changes.
Training on augumented user 97712 5/50 current_auc = 0.9285714285714286
User 97712 AUC after training: 0.9107142857142857
User 97712 does not improve AUC. Reverting changes.
Training on augumented user 69417 6/50 current_auc = 0.9285714285714286
User 69417 AUC after training: 0.9285714285714286
User 69417 does not improve AUC. Reverting changes.
Training on augumented user 2600 7/50 current_auc = 0.9285714285714286
User 2600 AUC after training: 0.9285714285714286
User 2600 does not improve AUC. Reverting changes.
Training on augumented user 86859 8/50 current_auc = 0.9285714285714286
User 86859 AUC after training: 0.9285714285714286
User 86859 does not improve AUC. Reverting changes.
Training on augumented user 4338 9/50 current_auc = 0.9285714285714286
User 4338 AUC after training: 0.9285714285714286
User 4338 does not improve AUC. Reverting changes.
Training on augumented user 37192 10/50 current_auc = 0.9285714285714286
User 37192 AUC after training: 0.9285714285714286
User 37192 does not improve AUC. Reverting changes.
Training on augumented user 78227 11/50 current_auc = 0.9285714285714286
User 78227 AUC after training: 0.9285714285714286
User 78227 does not improve AUC. Reverting changes.
Training on augumented user 81903 12/50 current_auc = 0.9285714285714286
User 81903 AUC after training: 0.9285714285714286
User 81903 does not improve AUC. Reverting changes.
Training on augumented user 22501 13/50 current_auc = 0.9285714285714286
User 22501 AUC after training: 0.9285714285714286
User 22501 does not improve AUC. Reverting changes.
Training on augumented user 137216 14/50 current_auc = 0.9285714285714286
User 137216 AUC after training: 0.9285714285714286
User 137216 does not improve AUC. Reverting changes.
Training on augumented user 95915 15/50 current_auc = 0.9285714285714286
User 95915 AUC after training: 0.9285714285714286
User 95915 does not improve AUC. Reverting changes.
Training on augumented user 44897 16/50 current_auc = 0.9285714285714286
User 44897 AUC after training: 0.9285714285714286
User 44897 does not improve AUC. Reverting changes.
Training on augumented user 2944 17/50 current_auc = 0.9285714285714286
User 2944 AUC after training: 0.9285714285714286
User 2944 does not improve AUC. Reverting changes.
Training on augumented user 96975 18/50 current_auc = 0.9285714285714286
User 96975 AUC after training: 0.9285714285714286
User 96975 does not improve AUC. Reverting changes.
Training on augumented user 109380 19/50 current_auc = 0.9285714285714286
User 109380 AUC after training: 0.9285714285714286
User 109380 does not improve AUC. Reverting changes.
Training on augumented user 87653 20/50 current_auc = 0.9285714285714286
User 87653 AUC after training: 0.9285714285714286
User 87653 does not improve AUC. Reverting changes.
Training on augumented user 52100 21/50 current_auc = 0.9285714285714286
User 52100 AUC after training: 0.9285714285714286
User 52100 does not improve AUC. Reverting changes.
Training on augumented user 60376 22/50 current_auc = 0.9285714285714286
User 60376 AUC after training: 0.9285714285714286
User 60376 does not improve AUC. Reverting changes.
Training on augumented user 105620 23/50 current_auc = 0.9285714285714286
User 105620 AUC after training: 0.9285714285714286
User 105620 does not improve AUC. Reverting changes.
Training on augumented user 56320 24/50 current_auc = 0.9285714285714286
User 56320 AUC after training: 0.9285714285714286
User 56320 does not improve AUC. Reverting changes.
Training on augumented user 56903 25/50 current_auc = 0.9285714285714286
User 56903 AUC after training: 0.9285714285714286
User 56903 does not improve AUC. Reverting changes.
Training on augumented user 125585 26/50 current_auc = 0.9285714285714286
User 125585 AUC after training: 0.9285714285714286
User 125585 does not improve AUC. Reverting changes.
Training on augumented user 94921 27/50 current_auc = 0.9285714285714286
User 94921 AUC after training: 0.9285714285714286
User 94921 does not improve AUC. Reverting changes.
Training on augumented user 18468 28/50 current_auc = 0.9285714285714286
User 18468 AUC after training: 0.9285714285714286
User 18468 does not improve AUC. Reverting changes.
Training on augumented user 95597 29/50 current_auc = 0.9285714285714286
User 95597 AUC after training: 0.9285714285714286
User 95597 does not improve AUC. Reverting changes.
Training on augumented user 32879 30/50 current_auc = 0.9285714285714286
User 32879 AUC after training: 0.9285714285714286
User 32879 does not improve AUC. Reverting changes.
Training on augumented user 40578 31/50 current_auc = 0.9285714285714286
User 40578 AUC after training: 0.9285714285714286
User 40578 does not improve AUC. Reverting changes.
Training on augumented user 114245 32/50 current_auc = 0.9285714285714286
User 114245 AUC after training: 0.9285714285714286
User 114245 does not improve AUC. Reverting changes.
Training on augumented user 17237 33/50 current_auc = 0.9285714285714286
User 17237 AUC after training: 0.9285714285714286
User 17237 does not improve AUC. Reverting changes.
Training on augumented user 58406 34/50 current_auc = 0.9285714285714286
User 58406 AUC after training: 0.9285714285714286
User 58406 does not improve AUC. Reverting changes.
Training on augumented user 49100 35/50 current_auc = 0.9285714285714286
User 49100 AUC after training: 0.9285714285714286
User 49100 does not improve AUC. Reverting changes.
Training on augumented user 37450 36/50 current_auc = 0.9285714285714286
User 37450 AUC after training: 0.9285714285714286
User 37450 does not improve AUC. Reverting changes.
Training on augumented user 129375 37/50 current_auc = 0.9285714285714286
User 129375 AUC after training: 0.9285714285714286
User 129375 does not improve AUC. Reverting changes.
Training on augumented user 58290 38/50 current_auc = 0.9285714285714286
User 58290 AUC after training: 0.9107142857142857
User 58290 does not improve AUC. Reverting changes.
Training on augumented user 96013 39/50 current_auc = 0.9285714285714286
User 96013 AUC after training: 0.9107142857142857
User 96013 does not improve AUC. Reverting changes.
Training on augumented user 95319 40/50 current_auc = 0.9285714285714286
User 95319 AUC after training: 0.9285714285714286
User 95319 does not improve AUC. Reverting changes.
Training on augumented user 66390 41/50 current_auc = 0.9285714285714286
User 66390 AUC after training: 0.9285714285714286
User 66390 does not improve AUC. Reverting changes.
Training on augumented user 63168 42/50 current_auc = 0.9285714285714286
User 63168 AUC after training: 0.9285714285714286
User 63168 does not improve AUC. Reverting changes.
Training on augumented user 82419 43/50 current_auc = 0.9285714285714286
User 82419 AUC after training: 0.9285714285714286
User 82419 does not improve AUC. Reverting changes.
Training on augumented user 24104 44/50 current_auc = 0.9285714285714286
User 24104 AUC after training: 0.9285714285714286
User 24104 does not improve AUC. Reverting changes.
Training on augumented user 67313 45/50 current_auc = 0.9285714285714286
User 67313 AUC after training: 0.9285714285714286
User 67313 does not improve AUC. Reverting changes.
Training on augumented user 70036 46/50 current_auc = 0.9285714285714286
User 70036 AUC after training: 0.9107142857142857
User 70036 does not improve AUC. Reverting changes.
Training on augumented user 120685 47/50 current_auc = 0.9285714285714286
User 120685 AUC after training: 0.9285714285714286
User 120685 does not improve AUC. Reverting changes.
Training on augumented user 104736 48/50 current_auc = 0.9285714285714286
User 104736 AUC after training: 0.9285714285714286
User 104736 does not improve AUC. Reverting changes.
Training on augumented user 15997 49/50 current_auc = 0.9285714285714286
User 15997 AUC after training: 0.9285714285714286
User 15997 does not improve AUC. Reverting changes.
[2024-12-02 18:09:44.029754] start test user 1587 56/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:09:44.446830] start test user 1587 56/568 recall augumented users by random, augumented_users = [118067, 127000, 135964, 112351, 125801, 18798, 114364, 15998, 109234, 17023, 92087, 33656, 1637, 101123, 61721, 462, 121337, 743, 113496, 88554, 104722, 109876, 94159, 113119, 33142, 55489, 131073, 118850, 95124, 120890, 99099, 3370, 69918, 47271, 33782, 28541, 68224, 93409, 40542, 132169, 31864, 110492, 121924, 28870, 98373, 37123, 33880, 25093, 43698, 61288]
[2024-12-02 18:09:44.461653] user = 1587 Cloud 56/568
[2024-12-02 18:09:44.471012] user = 1587 Local 56/568
[2024-12-02 18:09:44.523794] user = 1587 Local+ 56/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:09:46.919262] user = 1587 MPDA- 56/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.575
Training on augumented user 118067 0/50 current_auc = 0.575
User 118067 AUC after training: 0.5916666666666666
User 118067 improves AUC. Keeping the model.
Training on augumented user 127000 1/50 current_auc = 0.5916666666666666
User 127000 AUC after training: 0.5916666666666666
User 127000 does not improve AUC. Reverting changes.
Training on augumented user 135964 2/50 current_auc = 0.5916666666666666
User 135964 AUC after training: 0.5916666666666666
User 135964 does not improve AUC. Reverting changes.
Training on augumented user 112351 3/50 current_auc = 0.5916666666666666
User 112351 AUC after training: 0.5583333333333333
User 112351 does not improve AUC. Reverting changes.
Training on augumented user 125801 4/50 current_auc = 0.5916666666666666
User 125801 AUC after training: 0.5916666666666666
User 125801 does not improve AUC. Reverting changes.
Training on augumented user 18798 5/50 current_auc = 0.5916666666666666
User 18798 AUC after training: 0.5916666666666666
User 18798 does not improve AUC. Reverting changes.
Training on augumented user 114364 6/50 current_auc = 0.5916666666666666
User 114364 AUC after training: 0.5916666666666666
User 114364 does not improve AUC. Reverting changes.
Training on augumented user 15998 7/50 current_auc = 0.5916666666666666
User 15998 AUC after training: 0.6083333333333333
User 15998 improves AUC. Keeping the model.
Training on augumented user 109234 8/50 current_auc = 0.6083333333333333
User 109234 AUC after training: 0.5916666666666666
User 109234 does not improve AUC. Reverting changes.
Training on augumented user 17023 9/50 current_auc = 0.6083333333333333
User 17023 AUC after training: 0.625
User 17023 improves AUC. Keeping the model.
Training on augumented user 92087 10/50 current_auc = 0.625
User 92087 AUC after training: 0.6083333333333333
User 92087 does not improve AUC. Reverting changes.
Training on augumented user 33656 11/50 current_auc = 0.625
User 33656 AUC after training: 0.6333333333333333
User 33656 improves AUC. Keeping the model.
Training on augumented user 1637 12/50 current_auc = 0.6333333333333333
User 1637 AUC after training: 0.625
User 1637 does not improve AUC. Reverting changes.
Training on augumented user 101123 13/50 current_auc = 0.6333333333333333
User 101123 AUC after training: 0.625
User 101123 does not improve AUC. Reverting changes.
Training on augumented user 61721 14/50 current_auc = 0.6333333333333333
User 61721 AUC after training: 0.6333333333333333
User 61721 does not improve AUC. Reverting changes.
Training on augumented user 462 15/50 current_auc = 0.6333333333333333
User 462 AUC after training: 0.625
User 462 does not improve AUC. Reverting changes.
Training on augumented user 121337 16/50 current_auc = 0.6333333333333333
User 121337 AUC after training: 0.625
User 121337 does not improve AUC. Reverting changes.
Training on augumented user 743 17/50 current_auc = 0.6333333333333333
User 743 AUC after training: 0.6333333333333333
User 743 does not improve AUC. Reverting changes.
Training on augumented user 113496 18/50 current_auc = 0.6333333333333333
User 113496 AUC after training: 0.625
User 113496 does not improve AUC. Reverting changes.
Training on augumented user 88554 19/50 current_auc = 0.6333333333333333
User 88554 AUC after training: 0.5916666666666666
User 88554 does not improve AUC. Reverting changes.
Training on augumented user 104722 20/50 current_auc = 0.6333333333333333
User 104722 AUC after training: 0.625
User 104722 does not improve AUC. Reverting changes.
Training on augumented user 109876 21/50 current_auc = 0.6333333333333333
User 109876 AUC after training: 0.575
User 109876 does not improve AUC. Reverting changes.
Training on augumented user 94159 22/50 current_auc = 0.6333333333333333
User 94159 AUC after training: 0.6333333333333333
User 94159 does not improve AUC. Reverting changes.
Training on augumented user 113119 23/50 current_auc = 0.6333333333333333
User 113119 AUC after training: 0.6499999999999999
User 113119 improves AUC. Keeping the model.
Training on augumented user 33142 24/50 current_auc = 0.6499999999999999
User 33142 AUC after training: 0.6499999999999999
User 33142 does not improve AUC. Reverting changes.
Training on augumented user 55489 25/50 current_auc = 0.6499999999999999
User 55489 AUC after training: 0.6166666666666666
User 55489 does not improve AUC. Reverting changes.
Training on augumented user 131073 26/50 current_auc = 0.6499999999999999
User 131073 AUC after training: 0.6499999999999999
User 131073 does not improve AUC. Reverting changes.
Training on augumented user 118850 27/50 current_auc = 0.6499999999999999
User 118850 AUC after training: 0.6416666666666666
User 118850 does not improve AUC. Reverting changes.
Training on augumented user 95124 28/50 current_auc = 0.6499999999999999
User 95124 AUC after training: 0.6499999999999999
User 95124 does not improve AUC. Reverting changes.
Training on augumented user 120890 29/50 current_auc = 0.6499999999999999
User 120890 AUC after training: 0.575
User 120890 does not improve AUC. Reverting changes.
Training on augumented user 99099 30/50 current_auc = 0.6499999999999999
User 99099 AUC after training: 0.6499999999999999
User 99099 does not improve AUC. Reverting changes.
Training on augumented user 3370 31/50 current_auc = 0.6499999999999999
User 3370 AUC after training: 0.6499999999999999
User 3370 does not improve AUC. Reverting changes.
Training on augumented user 69918 32/50 current_auc = 0.6499999999999999
User 69918 AUC after training: 0.6499999999999999
User 69918 does not improve AUC. Reverting changes.
Training on augumented user 47271 33/50 current_auc = 0.6499999999999999
User 47271 AUC after training: 0.6499999999999999
User 47271 does not improve AUC. Reverting changes.
Training on augumented user 33782 34/50 current_auc = 0.6499999999999999
User 33782 AUC after training: 0.6499999999999999
User 33782 does not improve AUC. Reverting changes.
Training on augumented user 28541 35/50 current_auc = 0.6499999999999999
User 28541 AUC after training: 0.625
User 28541 does not improve AUC. Reverting changes.
Training on augumented user 68224 36/50 current_auc = 0.6499999999999999
User 68224 AUC after training: 0.6333333333333333
User 68224 does not improve AUC. Reverting changes.
Training on augumented user 93409 37/50 current_auc = 0.6499999999999999
User 93409 AUC after training: 0.6499999999999999
User 93409 does not improve AUC. Reverting changes.
Training on augumented user 40542 38/50 current_auc = 0.6499999999999999
User 40542 AUC after training: 0.6499999999999999
User 40542 does not improve AUC. Reverting changes.
Training on augumented user 132169 39/50 current_auc = 0.6499999999999999
User 132169 AUC after training: 0.6499999999999999
User 132169 does not improve AUC. Reverting changes.
Training on augumented user 31864 40/50 current_auc = 0.6499999999999999
User 31864 AUC after training: 0.6333333333333333
User 31864 does not improve AUC. Reverting changes.
Training on augumented user 110492 41/50 current_auc = 0.6499999999999999
User 110492 AUC after training: 0.6499999999999999
User 110492 does not improve AUC. Reverting changes.
Training on augumented user 121924 42/50 current_auc = 0.6499999999999999
User 121924 AUC after training: 0.6333333333333333
User 121924 does not improve AUC. Reverting changes.
Training on augumented user 28870 43/50 current_auc = 0.6499999999999999
User 28870 AUC after training: 0.6499999999999999
User 28870 does not improve AUC. Reverting changes.
Training on augumented user 98373 44/50 current_auc = 0.6499999999999999
User 98373 AUC after training: 0.6499999999999999
User 98373 does not improve AUC. Reverting changes.
Training on augumented user 37123 45/50 current_auc = 0.6499999999999999
User 37123 AUC after training: 0.6499999999999999
User 37123 does not improve AUC. Reverting changes.
Training on augumented user 33880 46/50 current_auc = 0.6499999999999999
User 33880 AUC after training: 0.6499999999999999
User 33880 does not improve AUC. Reverting changes.
Training on augumented user 25093 47/50 current_auc = 0.6499999999999999
User 25093 AUC after training: 0.575
User 25093 does not improve AUC. Reverting changes.
Training on augumented user 43698 48/50 current_auc = 0.6499999999999999
User 43698 AUC after training: 0.6499999999999999
User 43698 does not improve AUC. Reverting changes.
Training on augumented user 61288 49/50 current_auc = 0.6499999999999999
User 61288 AUC after training: 0.625
User 61288 does not improve AUC. Reverting changes.
[2024-12-02 18:10:17.232214] start test user 1593 57/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:10:17.895491] start test user 1593 57/568 recall augumented users by random, augumented_users = [37595, 114228, 55972, 62082, 18788, 11631, 77060, 37567, 137176, 9086, 102129, 87333, 93473, 73301, 23983, 36167, 122890, 30315, 136618, 5682, 99809, 4356, 45268, 125640, 81857, 90610, 137460, 52163, 27440, 38941, 113524, 44636, 114710, 123596, 52025, 131182, 65260, 52048, 133467, 128556, 41072, 92182, 8917, 94402, 90367, 98775, 123846, 31316, 20601, 138130]
[2024-12-02 18:10:17.924033] user = 1593 Cloud 57/568
[2024-12-02 18:10:17.965392] user = 1593 Local 57/568
[2024-12-02 18:10:17.992913] user = 1593 Local+ 57/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:10:20.434049] user = 1593 MPDA- 57/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8055555555555556
Training on augumented user 37595 0/50 current_auc = 0.8055555555555556
User 37595 AUC after training: 0.8055555555555556
User 37595 does not improve AUC. Reverting changes.
Training on augumented user 114228 1/50 current_auc = 0.8055555555555556
User 114228 AUC after training: 0.8055555555555556
User 114228 does not improve AUC. Reverting changes.
Training on augumented user 55972 2/50 current_auc = 0.8055555555555556
User 55972 AUC after training: 0.8055555555555556
User 55972 does not improve AUC. Reverting changes.
Training on augumented user 62082 3/50 current_auc = 0.8055555555555556
User 62082 AUC after training: 0.8055555555555556
User 62082 does not improve AUC. Reverting changes.
Training on augumented user 18788 4/50 current_auc = 0.8055555555555556
User 18788 AUC after training: 0.8055555555555556
User 18788 does not improve AUC. Reverting changes.
Training on augumented user 11631 5/50 current_auc = 0.8055555555555556
User 11631 AUC after training: 0.8333333333333334
User 11631 improves AUC. Keeping the model.
Training on augumented user 77060 6/50 current_auc = 0.8333333333333334
User 77060 AUC after training: 0.8333333333333334
User 77060 does not improve AUC. Reverting changes.
Training on augumented user 37567 7/50 current_auc = 0.8333333333333334
User 37567 AUC after training: 0.8055555555555556
User 37567 does not improve AUC. Reverting changes.
Training on augumented user 137176 8/50 current_auc = 0.8333333333333334
User 137176 AUC after training: 0.8333333333333334
User 137176 does not improve AUC. Reverting changes.
Training on augumented user 9086 9/50 current_auc = 0.8333333333333334
User 9086 AUC after training: 0.8333333333333334
User 9086 does not improve AUC. Reverting changes.
Training on augumented user 102129 10/50 current_auc = 0.8333333333333334
User 102129 AUC after training: 0.8055555555555556
User 102129 does not improve AUC. Reverting changes.
Training on augumented user 87333 11/50 current_auc = 0.8333333333333334
User 87333 AUC after training: 0.8055555555555556
User 87333 does not improve AUC. Reverting changes.
Training on augumented user 93473 12/50 current_auc = 0.8333333333333334
User 93473 AUC after training: 0.8333333333333334
User 93473 does not improve AUC. Reverting changes.
Training on augumented user 73301 13/50 current_auc = 0.8333333333333334
User 73301 AUC after training: 0.8333333333333334
User 73301 does not improve AUC. Reverting changes.
Training on augumented user 23983 14/50 current_auc = 0.8333333333333334
User 23983 AUC after training: 0.8333333333333334
User 23983 does not improve AUC. Reverting changes.
Training on augumented user 36167 15/50 current_auc = 0.8333333333333334
User 36167 AUC after training: 0.8333333333333334
User 36167 does not improve AUC. Reverting changes.
Training on augumented user 122890 16/50 current_auc = 0.8333333333333334
User 122890 AUC after training: 0.8055555555555556
User 122890 does not improve AUC. Reverting changes.
Training on augumented user 30315 17/50 current_auc = 0.8333333333333334
User 30315 AUC after training: 0.8055555555555556
User 30315 does not improve AUC. Reverting changes.
Training on augumented user 136618 18/50 current_auc = 0.8333333333333334
User 136618 AUC after training: 0.8333333333333334
User 136618 does not improve AUC. Reverting changes.
Training on augumented user 5682 19/50 current_auc = 0.8333333333333334
User 5682 AUC after training: 0.8333333333333334
User 5682 does not improve AUC. Reverting changes.
Training on augumented user 99809 20/50 current_auc = 0.8333333333333334
User 99809 AUC after training: 0.8333333333333334
User 99809 does not improve AUC. Reverting changes.
Training on augumented user 4356 21/50 current_auc = 0.8333333333333334
User 4356 AUC after training: 0.8333333333333334
User 4356 does not improve AUC. Reverting changes.
Training on augumented user 45268 22/50 current_auc = 0.8333333333333334
User 45268 AUC after training: 0.8333333333333334
User 45268 does not improve AUC. Reverting changes.
Training on augumented user 125640 23/50 current_auc = 0.8333333333333334
User 125640 AUC after training: 0.8333333333333334
User 125640 does not improve AUC. Reverting changes.
Training on augumented user 81857 24/50 current_auc = 0.8333333333333334
User 81857 AUC after training: 0.8333333333333334
User 81857 does not improve AUC. Reverting changes.
Training on augumented user 90610 25/50 current_auc = 0.8333333333333334
User 90610 AUC after training: 0.8055555555555556
User 90610 does not improve AUC. Reverting changes.
Training on augumented user 137460 26/50 current_auc = 0.8333333333333334
User 137460 AUC after training: 0.8333333333333334
User 137460 does not improve AUC. Reverting changes.
Training on augumented user 52163 27/50 current_auc = 0.8333333333333334
User 52163 AUC after training: 0.8333333333333334
User 52163 does not improve AUC. Reverting changes.
Training on augumented user 27440 28/50 current_auc = 0.8333333333333334
User 27440 AUC after training: 0.8333333333333334
User 27440 does not improve AUC. Reverting changes.
Training on augumented user 38941 29/50 current_auc = 0.8333333333333334
User 38941 AUC after training: 0.8333333333333334
User 38941 does not improve AUC. Reverting changes.
Training on augumented user 113524 30/50 current_auc = 0.8333333333333334
User 113524 AUC after training: 0.8333333333333334
User 113524 does not improve AUC. Reverting changes.
Training on augumented user 44636 31/50 current_auc = 0.8333333333333334
User 44636 AUC after training: 0.8055555555555556
User 44636 does not improve AUC. Reverting changes.
Training on augumented user 114710 32/50 current_auc = 0.8333333333333334
User 114710 AUC after training: 0.8333333333333334
User 114710 does not improve AUC. Reverting changes.
Training on augumented user 123596 33/50 current_auc = 0.8333333333333334
User 123596 AUC after training: 0.8333333333333334
User 123596 does not improve AUC. Reverting changes.
Training on augumented user 52025 34/50 current_auc = 0.8333333333333334
User 52025 AUC after training: 0.8333333333333334
User 52025 does not improve AUC. Reverting changes.
Training on augumented user 131182 35/50 current_auc = 0.8333333333333334
User 131182 AUC after training: 0.8333333333333334
User 131182 does not improve AUC. Reverting changes.
Training on augumented user 65260 36/50 current_auc = 0.8333333333333334
User 65260 AUC after training: 0.8333333333333334
User 65260 does not improve AUC. Reverting changes.
Training on augumented user 52048 37/50 current_auc = 0.8333333333333334
User 52048 AUC after training: 0.8333333333333334
User 52048 does not improve AUC. Reverting changes.
Training on augumented user 133467 38/50 current_auc = 0.8333333333333334
User 133467 AUC after training: 0.8055555555555556
User 133467 does not improve AUC. Reverting changes.
Training on augumented user 128556 39/50 current_auc = 0.8333333333333334
User 128556 AUC after training: 0.8333333333333334
User 128556 does not improve AUC. Reverting changes.
Training on augumented user 41072 40/50 current_auc = 0.8333333333333334
User 41072 AUC after training: 0.8333333333333334
User 41072 does not improve AUC. Reverting changes.
Training on augumented user 92182 41/50 current_auc = 0.8333333333333334
User 92182 AUC after training: 0.8333333333333334
User 92182 does not improve AUC. Reverting changes.
Training on augumented user 8917 42/50 current_auc = 0.8333333333333334
User 8917 AUC after training: 0.8333333333333334
User 8917 does not improve AUC. Reverting changes.
Training on augumented user 94402 43/50 current_auc = 0.8333333333333334
User 94402 AUC after training: 0.8333333333333334
User 94402 does not improve AUC. Reverting changes.
Training on augumented user 90367 44/50 current_auc = 0.8333333333333334
User 90367 AUC after training: 0.8333333333333334
User 90367 does not improve AUC. Reverting changes.
Training on augumented user 98775 45/50 current_auc = 0.8333333333333334
User 98775 AUC after training: 0.8333333333333334
User 98775 does not improve AUC. Reverting changes.
Training on augumented user 123846 46/50 current_auc = 0.8333333333333334
User 123846 AUC after training: 0.8333333333333334
User 123846 does not improve AUC. Reverting changes.
Training on augumented user 31316 47/50 current_auc = 0.8333333333333334
User 31316 AUC after training: 0.8333333333333334
User 31316 does not improve AUC. Reverting changes.
Training on augumented user 20601 48/50 current_auc = 0.8333333333333334
User 20601 AUC after training: 0.8055555555555556
User 20601 does not improve AUC. Reverting changes.
Training on augumented user 138130 49/50 current_auc = 0.8333333333333334
User 138130 AUC after training: 0.8333333333333334
User 138130 does not improve AUC. Reverting changes.
[2024-12-02 18:10:51.813278] start test user 1612 58/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:10:52.286612] start test user 1612 58/568 recall augumented users by random, augumented_users = [37043, 60902, 60526, 58211, 123624, 58316, 39657, 32753, 85350, 81591, 8462, 20474, 122689, 76085, 78433, 127688, 104076, 102862, 111900, 1122, 74640, 32080, 109010, 49158, 113606, 99844, 34480, 118110, 109555, 124387, 58095, 119151, 13349, 52520, 82463, 31436, 11997, 131376, 91038, 75276, 31771, 51563, 55051, 28799, 32176, 83709, 56446, 32265, 64666, 50075]
[2024-12-02 18:10:52.301303] user = 1612 Cloud 58/568
[2024-12-02 18:10:52.312449] user = 1612 Local 58/568
[2024-12-02 18:10:52.341557] user = 1612 Local+ 58/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:10:53.857507] user = 1612 MPDA- 58/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6510204081632653
Training on augumented user 37043 0/50 current_auc = 0.6510204081632653
User 37043 AUC after training: 0.6520408163265307
User 37043 improves AUC. Keeping the model.
Training on augumented user 60902 1/50 current_auc = 0.6520408163265307
User 60902 AUC after training: 0.6540816326530612
User 60902 improves AUC. Keeping the model.
Training on augumented user 60526 2/50 current_auc = 0.6540816326530612
User 60526 AUC after training: 0.6479591836734695
User 60526 does not improve AUC. Reverting changes.
Training on augumented user 58211 3/50 current_auc = 0.6540816326530612
User 58211 AUC after training: 0.6520408163265307
User 58211 does not improve AUC. Reverting changes.
Training on augumented user 123624 4/50 current_auc = 0.6540816326530612
User 123624 AUC after training: 0.6520408163265307
User 123624 does not improve AUC. Reverting changes.
Training on augumented user 58316 5/50 current_auc = 0.6540816326530612
User 58316 AUC after training: 0.6540816326530612
User 58316 does not improve AUC. Reverting changes.
Training on augumented user 39657 6/50 current_auc = 0.6540816326530612
User 39657 AUC after training: 0.6510204081632653
User 39657 does not improve AUC. Reverting changes.
Training on augumented user 32753 7/50 current_auc = 0.6540816326530612
User 32753 AUC after training: 0.653061224489796
User 32753 does not improve AUC. Reverting changes.
Training on augumented user 85350 8/50 current_auc = 0.6540816326530612
User 85350 AUC after training: 0.6530612244897959
User 85350 does not improve AUC. Reverting changes.
Training on augumented user 81591 9/50 current_auc = 0.6540816326530612
User 81591 AUC after training: 0.6510204081632653
User 81591 does not improve AUC. Reverting changes.
Training on augumented user 8462 10/50 current_auc = 0.6540816326530612
User 8462 AUC after training: 0.6510204081632653
User 8462 does not improve AUC. Reverting changes.
Training on augumented user 20474 11/50 current_auc = 0.6540816326530612
User 20474 AUC after training: 0.65
User 20474 does not improve AUC. Reverting changes.
Training on augumented user 122689 12/50 current_auc = 0.6540816326530612
User 122689 AUC after training: 0.6520408163265307
User 122689 does not improve AUC. Reverting changes.
Training on augumented user 76085 13/50 current_auc = 0.6540816326530612
User 76085 AUC after training: 0.6530612244897959
User 76085 does not improve AUC. Reverting changes.
Training on augumented user 78433 14/50 current_auc = 0.6540816326530612
User 78433 AUC after training: 0.6479591836734694
User 78433 does not improve AUC. Reverting changes.
Training on augumented user 127688 15/50 current_auc = 0.6540816326530612
User 127688 AUC after training: 0.6540816326530612
User 127688 does not improve AUC. Reverting changes.
Training on augumented user 104076 16/50 current_auc = 0.6540816326530612
User 104076 AUC after training: 0.6510204081632653
User 104076 does not improve AUC. Reverting changes.
Training on augumented user 102862 17/50 current_auc = 0.6540816326530612
User 102862 AUC after training: 0.6540816326530612
User 102862 does not improve AUC. Reverting changes.
Training on augumented user 111900 18/50 current_auc = 0.6540816326530612
User 111900 AUC after training: 0.65
User 111900 does not improve AUC. Reverting changes.
Training on augumented user 1122 19/50 current_auc = 0.6540816326530612
User 1122 AUC after training: 0.6530612244897959
User 1122 does not improve AUC. Reverting changes.
Training on augumented user 74640 20/50 current_auc = 0.6540816326530612
User 74640 AUC after training: 0.6510204081632653
User 74640 does not improve AUC. Reverting changes.
Training on augumented user 32080 21/50 current_auc = 0.6540816326530612
User 32080 AUC after training: 0.6540816326530612
User 32080 does not improve AUC. Reverting changes.
Training on augumented user 109010 22/50 current_auc = 0.6540816326530612
User 109010 AUC after training: 0.6489795918367347
User 109010 does not improve AUC. Reverting changes.
Training on augumented user 49158 23/50 current_auc = 0.6540816326530612
User 49158 AUC after training: 0.6510204081632653
User 49158 does not improve AUC. Reverting changes.
Training on augumented user 113606 24/50 current_auc = 0.6540816326530612
User 113606 AUC after training: 0.6510204081632653
User 113606 does not improve AUC. Reverting changes.
Training on augumented user 99844 25/50 current_auc = 0.6540816326530612
User 99844 AUC after training: 0.6510204081632653
User 99844 does not improve AUC. Reverting changes.
Training on augumented user 34480 26/50 current_auc = 0.6540816326530612
User 34480 AUC after training: 0.653061224489796
User 34480 does not improve AUC. Reverting changes.
Training on augumented user 118110 27/50 current_auc = 0.6540816326530612
User 118110 AUC after training: 0.65
User 118110 does not improve AUC. Reverting changes.
Training on augumented user 109555 28/50 current_auc = 0.6540816326530612
User 109555 AUC after training: 0.6540816326530613
User 109555 improves AUC. Keeping the model.
Training on augumented user 124387 29/50 current_auc = 0.6540816326530613
User 124387 AUC after training: 0.6530612244897959
User 124387 does not improve AUC. Reverting changes.
Training on augumented user 58095 30/50 current_auc = 0.6540816326530613
User 58095 AUC after training: 0.6540816326530612
User 58095 does not improve AUC. Reverting changes.
Training on augumented user 119151 31/50 current_auc = 0.6540816326530613
User 119151 AUC after training: 0.6551020408163266
User 119151 improves AUC. Keeping the model.
Training on augumented user 13349 32/50 current_auc = 0.6551020408163266
User 13349 AUC after training: 0.6540816326530612
User 13349 does not improve AUC. Reverting changes.
Training on augumented user 52520 33/50 current_auc = 0.6551020408163266
User 52520 AUC after training: 0.65
User 52520 does not improve AUC. Reverting changes.
Training on augumented user 82463 34/50 current_auc = 0.6551020408163266
User 82463 AUC after training: 0.6510204081632653
User 82463 does not improve AUC. Reverting changes.
Training on augumented user 31436 35/50 current_auc = 0.6551020408163266
User 31436 AUC after training: 0.6571428571428571
User 31436 improves AUC. Keeping the model.
Training on augumented user 11997 36/50 current_auc = 0.6571428571428571
User 11997 AUC after training: 0.6561224489795919
User 11997 does not improve AUC. Reverting changes.
Training on augumented user 131376 37/50 current_auc = 0.6571428571428571
User 131376 AUC after training: 0.6571428571428571
User 131376 does not improve AUC. Reverting changes.
Training on augumented user 91038 38/50 current_auc = 0.6571428571428571
User 91038 AUC after training: 0.6469387755102041
User 91038 does not improve AUC. Reverting changes.
Training on augumented user 75276 39/50 current_auc = 0.6571428571428571
User 75276 AUC after training: 0.6561224489795918
User 75276 does not improve AUC. Reverting changes.
Training on augumented user 31771 40/50 current_auc = 0.6571428571428571
User 31771 AUC after training: 0.6489795918367347
User 31771 does not improve AUC. Reverting changes.
Training on augumented user 51563 41/50 current_auc = 0.6571428571428571
User 51563 AUC after training: 0.6551020408163265
User 51563 does not improve AUC. Reverting changes.
Training on augumented user 55051 42/50 current_auc = 0.6571428571428571
User 55051 AUC after training: 0.6581632653061225
User 55051 improves AUC. Keeping the model.
Training on augumented user 28799 43/50 current_auc = 0.6581632653061225
User 28799 AUC after training: 0.6571428571428571
User 28799 does not improve AUC. Reverting changes.
Training on augumented user 32176 44/50 current_auc = 0.6581632653061225
User 32176 AUC after training: 0.6581632653061225
User 32176 does not improve AUC. Reverting changes.
Training on augumented user 83709 45/50 current_auc = 0.6581632653061225
User 83709 AUC after training: 0.6571428571428573
User 83709 does not improve AUC. Reverting changes.
Training on augumented user 56446 46/50 current_auc = 0.6581632653061225
User 56446 AUC after training: 0.6581632653061225
User 56446 does not improve AUC. Reverting changes.
Training on augumented user 32265 47/50 current_auc = 0.6581632653061225
User 32265 AUC after training: 0.6571428571428571
User 32265 does not improve AUC. Reverting changes.
Training on augumented user 64666 48/50 current_auc = 0.6581632653061225
User 64666 AUC after training: 0.6520408163265307
User 64666 does not improve AUC. Reverting changes.
Training on augumented user 50075 49/50 current_auc = 0.6581632653061225
User 50075 AUC after training: 0.6571428571428571
User 50075 does not improve AUC. Reverting changes.
[2024-12-02 18:11:20.934051] start test user 1626 59/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:11:21.573701] start test user 1626 59/568 recall augumented users by random, augumented_users = [118052, 111675, 73246, 17533, 51333, 6446, 28462, 63658, 91233, 32287, 59284, 97573, 25509, 51765, 77240, 49738, 113013, 126565, 126253, 38016, 22793, 35291, 8293, 46974, 22999, 61501, 13072, 120914, 61092, 8101, 13214, 79444, 77295, 86391, 26814, 70333, 3402, 95824, 59113, 31912, 10068, 18869, 62258, 17794, 55646, 25329, 6517, 97885, 60104, 78462]
[2024-12-02 18:11:21.588147] user = 1626 Cloud 59/568
[2024-12-02 18:11:21.608987] user = 1626 Local 59/568
[2024-12-02 18:11:21.649247] user = 1626 Local+ 59/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:11:23.682098] user = 1626 MPDA- 59/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7041580041580042
Training on augumented user 118052 0/50 current_auc = 0.7041580041580042
User 118052 AUC after training: 0.7033264033264033
User 118052 does not improve AUC. Reverting changes.
Training on augumented user 111675 1/50 current_auc = 0.7041580041580042
User 111675 AUC after training: 0.7047817047817048
User 111675 improves AUC. Keeping the model.
Training on augumented user 73246 2/50 current_auc = 0.7047817047817048
User 73246 AUC after training: 0.7039501039501039
User 73246 does not improve AUC. Reverting changes.
Training on augumented user 17533 3/50 current_auc = 0.7047817047817048
User 17533 AUC after training: 0.7051975051975052
User 17533 improves AUC. Keeping the model.
Training on augumented user 51333 4/50 current_auc = 0.7051975051975052
User 51333 AUC after training: 0.7039501039501039
User 51333 does not improve AUC. Reverting changes.
Training on augumented user 6446 5/50 current_auc = 0.7051975051975052
User 6446 AUC after training: 0.7051975051975052
User 6446 does not improve AUC. Reverting changes.
Training on augumented user 28462 6/50 current_auc = 0.7051975051975052
User 28462 AUC after training: 0.7068607068607069
User 28462 improves AUC. Keeping the model.
Training on augumented user 63658 7/50 current_auc = 0.7068607068607069
User 63658 AUC after training: 0.7039501039501039
User 63658 does not improve AUC. Reverting changes.
Training on augumented user 91233 8/50 current_auc = 0.7068607068607069
User 91233 AUC after training: 0.7085239085239086
User 91233 improves AUC. Keeping the model.
Training on augumented user 32287 9/50 current_auc = 0.7085239085239086
User 32287 AUC after training: 0.7064449064449064
User 32287 does not improve AUC. Reverting changes.
Training on augumented user 59284 10/50 current_auc = 0.7085239085239086
User 59284 AUC after training: 0.7068607068607069
User 59284 does not improve AUC. Reverting changes.
Training on augumented user 97573 11/50 current_auc = 0.7085239085239086
User 97573 AUC after training: 0.7081081081081081
User 97573 does not improve AUC. Reverting changes.
Training on augumented user 25509 12/50 current_auc = 0.7085239085239086
User 25509 AUC after training: 0.7076923076923076
User 25509 does not improve AUC. Reverting changes.
Training on augumented user 51765 13/50 current_auc = 0.7085239085239086
User 51765 AUC after training: 0.7024948024948025
User 51765 does not improve AUC. Reverting changes.
Training on augumented user 77240 14/50 current_auc = 0.7085239085239086
User 77240 AUC after training: 0.7027027027027026
User 77240 does not improve AUC. Reverting changes.
Training on augumented user 49738 15/50 current_auc = 0.7085239085239086
User 49738 AUC after training: 0.7022869022869023
User 49738 does not improve AUC. Reverting changes.
Training on augumented user 113013 16/50 current_auc = 0.7085239085239086
User 113013 AUC after training: 0.7076923076923076
User 113013 does not improve AUC. Reverting changes.
Training on augumented user 126565 17/50 current_auc = 0.7085239085239086
User 126565 AUC after training: 0.7051975051975052
User 126565 does not improve AUC. Reverting changes.
Training on augumented user 126253 18/50 current_auc = 0.7085239085239086
User 126253 AUC after training: 0.7043659043659043
User 126253 does not improve AUC. Reverting changes.
Training on augumented user 38016 19/50 current_auc = 0.7085239085239086
User 38016 AUC after training: 0.7076923076923076
User 38016 does not improve AUC. Reverting changes.
Training on augumented user 22793 20/50 current_auc = 0.7085239085239086
User 22793 AUC after training: 0.7068607068607069
User 22793 does not improve AUC. Reverting changes.
Training on augumented user 35291 21/50 current_auc = 0.7085239085239086
User 35291 AUC after training: 0.7072765072765073
User 35291 does not improve AUC. Reverting changes.
Training on augumented user 8293 22/50 current_auc = 0.7085239085239086
User 8293 AUC after training: 0.7072765072765073
User 8293 does not improve AUC. Reverting changes.
Training on augumented user 46974 23/50 current_auc = 0.7085239085239086
User 46974 AUC after training: 0.7068607068607069
User 46974 does not improve AUC. Reverting changes.
Training on augumented user 22999 24/50 current_auc = 0.7085239085239086
User 22999 AUC after training: 0.706029106029106
User 22999 does not improve AUC. Reverting changes.
Training on augumented user 61501 25/50 current_auc = 0.7085239085239086
User 61501 AUC after training: 0.7076923076923076
User 61501 does not improve AUC. Reverting changes.
Training on augumented user 13072 26/50 current_auc = 0.7085239085239086
User 13072 AUC after training: 0.7076923076923076
User 13072 does not improve AUC. Reverting changes.
Training on augumented user 120914 27/50 current_auc = 0.7085239085239086
User 120914 AUC after training: 0.7072765072765073
User 120914 does not improve AUC. Reverting changes.
Training on augumented user 61092 28/50 current_auc = 0.7085239085239086
User 61092 AUC after training: 0.706029106029106
User 61092 does not improve AUC. Reverting changes.
Training on augumented user 8101 29/50 current_auc = 0.7085239085239086
User 8101 AUC after training: 0.7064449064449064
User 8101 does not improve AUC. Reverting changes.
Training on augumented user 13214 30/50 current_auc = 0.7085239085239086
User 13214 AUC after training: 0.7072765072765073
User 13214 does not improve AUC. Reverting changes.
Training on augumented user 79444 31/50 current_auc = 0.7085239085239086
User 79444 AUC after training: 0.7072765072765073
User 79444 does not improve AUC. Reverting changes.
Training on augumented user 77295 32/50 current_auc = 0.7085239085239086
User 77295 AUC after training: 0.7068607068607069
User 77295 does not improve AUC. Reverting changes.
Training on augumented user 86391 33/50 current_auc = 0.7085239085239086
User 86391 AUC after training: 0.7072765072765073
User 86391 does not improve AUC. Reverting changes.
Training on augumented user 26814 34/50 current_auc = 0.7085239085239086
User 26814 AUC after training: 0.7081081081081081
User 26814 does not improve AUC. Reverting changes.
Training on augumented user 70333 35/50 current_auc = 0.7085239085239086
User 70333 AUC after training: 0.7068607068607069
User 70333 does not improve AUC. Reverting changes.
Training on augumented user 3402 36/50 current_auc = 0.7085239085239086
User 3402 AUC after training: 0.7072765072765073
User 3402 does not improve AUC. Reverting changes.
Training on augumented user 95824 37/50 current_auc = 0.7085239085239086
User 95824 AUC after training: 0.7068607068607069
User 95824 does not improve AUC. Reverting changes.
Training on augumented user 59113 38/50 current_auc = 0.7085239085239086
User 59113 AUC after training: 0.7064449064449064
User 59113 does not improve AUC. Reverting changes.
Training on augumented user 31912 39/50 current_auc = 0.7085239085239086
User 31912 AUC after training: 0.706029106029106
User 31912 does not improve AUC. Reverting changes.
Training on augumented user 10068 40/50 current_auc = 0.7085239085239086
User 10068 AUC after training: 0.7072765072765073
User 10068 does not improve AUC. Reverting changes.
Training on augumented user 18869 41/50 current_auc = 0.7085239085239086
User 18869 AUC after training: 0.706029106029106
User 18869 does not improve AUC. Reverting changes.
Training on augumented user 62258 42/50 current_auc = 0.7085239085239086
User 62258 AUC after training: 0.706029106029106
User 62258 does not improve AUC. Reverting changes.
Training on augumented user 17794 43/50 current_auc = 0.7085239085239086
User 17794 AUC after training: 0.7068607068607069
User 17794 does not improve AUC. Reverting changes.
Training on augumented user 55646 44/50 current_auc = 0.7085239085239086
User 55646 AUC after training: 0.7076923076923076
User 55646 does not improve AUC. Reverting changes.
Training on augumented user 25329 45/50 current_auc = 0.7085239085239086
User 25329 AUC after training: 0.7056133056133056
User 25329 does not improve AUC. Reverting changes.
Training on augumented user 6517 46/50 current_auc = 0.7085239085239086
User 6517 AUC after training: 0.7068607068607069
User 6517 does not improve AUC. Reverting changes.
Training on augumented user 97885 47/50 current_auc = 0.7085239085239086
User 97885 AUC after training: 0.7074844074844074
User 97885 does not improve AUC. Reverting changes.
Training on augumented user 60104 48/50 current_auc = 0.7085239085239086
User 60104 AUC after training: 0.7058212058212059
User 60104 does not improve AUC. Reverting changes.
Training on augumented user 78462 49/50 current_auc = 0.7085239085239086
User 78462 AUC after training: 0.7051975051975052
User 78462 does not improve AUC. Reverting changes.
[2024-12-02 18:11:50.143921] start test user 1629 60/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:11:50.558062] start test user 1629 60/568 recall augumented users by random, augumented_users = [3045, 99848, 66457, 538, 90409, 72930, 134468, 113477, 50632, 135971, 112425, 136443, 125474, 128490, 88142, 7752, 27771, 18013, 68748, 101713, 29876, 121919, 85942, 14036, 80851, 11421, 104186, 64685, 96614, 132466, 20133, 2327, 62174, 105501, 86661, 43176, 35318, 87370, 792, 35666, 88510, 29159, 98564, 116906, 102924, 74063, 71839, 124709, 56275, 60420]
[2024-12-02 18:11:50.572868] user = 1629 Cloud 60/568
[2024-12-02 18:11:50.595726] user = 1629 Local 60/568
[2024-12-02 18:11:50.646750] user = 1629 Local+ 60/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:11:52.453905] user = 1629 MPDA- 60/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7074074074074075
Training on augumented user 3045 0/50 current_auc = 0.7074074074074075
User 3045 AUC after training: 0.708289241622575
User 3045 improves AUC. Keeping the model.
Training on augumented user 99848 1/50 current_auc = 0.708289241622575
User 99848 AUC after training: 0.707936507936508
User 99848 does not improve AUC. Reverting changes.
Training on augumented user 66457 2/50 current_auc = 0.708289241622575
User 66457 AUC after training: 0.7074074074074075
User 66457 does not improve AUC. Reverting changes.
Training on augumented user 538 3/50 current_auc = 0.708289241622575
User 538 AUC after training: 0.7078483245149912
User 538 does not improve AUC. Reverting changes.
Training on augumented user 90409 4/50 current_auc = 0.708289241622575
User 90409 AUC after training: 0.7069664902998237
User 90409 does not improve AUC. Reverting changes.
Training on augumented user 72930 5/50 current_auc = 0.708289241622575
User 72930 AUC after training: 0.7082010582010583
User 72930 does not improve AUC. Reverting changes.
Training on augumented user 134468 6/50 current_auc = 0.708289241622575
User 134468 AUC after training: 0.707936507936508
User 134468 does not improve AUC. Reverting changes.
Training on augumented user 113477 7/50 current_auc = 0.708289241622575
User 113477 AUC after training: 0.7070546737213403
User 113477 does not improve AUC. Reverting changes.
Training on augumented user 50632 8/50 current_auc = 0.708289241622575
User 50632 AUC after training: 0.707231040564374
User 50632 does not improve AUC. Reverting changes.
Training on augumented user 135971 9/50 current_auc = 0.708289241622575
User 135971 AUC after training: 0.7074955908289242
User 135971 does not improve AUC. Reverting changes.
Training on augumented user 112425 10/50 current_auc = 0.708289241622575
User 112425 AUC after training: 0.7075837742504409
User 112425 does not improve AUC. Reverting changes.
Training on augumented user 136443 11/50 current_auc = 0.708289241622575
User 136443 AUC after training: 0.7077601410934745
User 136443 does not improve AUC. Reverting changes.
Training on augumented user 125474 12/50 current_auc = 0.708289241622575
User 125474 AUC after training: 0.7081128747795414
User 125474 does not improve AUC. Reverting changes.
Training on augumented user 128490 13/50 current_auc = 0.708289241622575
User 128490 AUC after training: 0.7081128747795414
User 128490 does not improve AUC. Reverting changes.
Training on augumented user 88142 14/50 current_auc = 0.708289241622575
User 88142 AUC after training: 0.7074955908289242
User 88142 does not improve AUC. Reverting changes.
Training on augumented user 7752 15/50 current_auc = 0.708289241622575
User 7752 AUC after training: 0.7080687830687831
User 7752 does not improve AUC. Reverting changes.
Training on augumented user 27771 16/50 current_auc = 0.708289241622575
User 27771 AUC after training: 0.7080246913580247
User 27771 does not improve AUC. Reverting changes.
Training on augumented user 18013 17/50 current_auc = 0.708289241622575
User 18013 AUC after training: 0.7074074074074074
User 18013 does not improve AUC. Reverting changes.
Training on augumented user 68748 18/50 current_auc = 0.708289241622575
User 68748 AUC after training: 0.7074074074074075
User 68748 does not improve AUC. Reverting changes.
Training on augumented user 101713 19/50 current_auc = 0.708289241622575
User 101713 AUC after training: 0.7080246913580247
User 101713 does not improve AUC. Reverting changes.
Training on augumented user 29876 20/50 current_auc = 0.708289241622575
User 29876 AUC after training: 0.7080246913580247
User 29876 does not improve AUC. Reverting changes.
Training on augumented user 121919 21/50 current_auc = 0.708289241622575
User 121919 AUC after training: 0.7083774250440917
User 121919 improves AUC. Keeping the model.
Training on augumented user 85942 22/50 current_auc = 0.7083774250440917
User 85942 AUC after training: 0.7070546737213405
User 85942 does not improve AUC. Reverting changes.
Training on augumented user 14036 23/50 current_auc = 0.7083774250440917
User 14036 AUC after training: 0.7084656084656085
User 14036 improves AUC. Keeping the model.
Training on augumented user 80851 24/50 current_auc = 0.7084656084656085
User 80851 AUC after training: 0.708289241622575
User 80851 does not improve AUC. Reverting changes.
Training on augumented user 11421 25/50 current_auc = 0.7084656084656085
User 11421 AUC after training: 0.7082010582010583
User 11421 does not improve AUC. Reverting changes.
Training on augumented user 104186 26/50 current_auc = 0.7084656084656085
User 104186 AUC after training: 0.707231040564374
User 104186 does not improve AUC. Reverting changes.
Training on augumented user 64685 27/50 current_auc = 0.7084656084656085
User 64685 AUC after training: 0.7081128747795414
User 64685 does not improve AUC. Reverting changes.
Training on augumented user 96614 28/50 current_auc = 0.7084656084656085
User 96614 AUC after training: 0.7085537918871253
User 96614 improves AUC. Keeping the model.
Training on augumented user 132466 29/50 current_auc = 0.7085537918871253
User 132466 AUC after training: 0.7080246913580248
User 132466 does not improve AUC. Reverting changes.
Training on augumented user 20133 30/50 current_auc = 0.7085537918871253
User 20133 AUC after training: 0.7078483245149911
User 20133 does not improve AUC. Reverting changes.
Training on augumented user 2327 31/50 current_auc = 0.7085537918871253
User 2327 AUC after training: 0.708641975308642
User 2327 improves AUC. Keeping the model.
Training on augumented user 62174 32/50 current_auc = 0.708641975308642
User 62174 AUC after training: 0.7084656084656086
User 62174 does not improve AUC. Reverting changes.
Training on augumented user 105501 33/50 current_auc = 0.708641975308642
User 105501 AUC after training: 0.7079365079365081
User 105501 does not improve AUC. Reverting changes.
Training on augumented user 86661 34/50 current_auc = 0.708641975308642
User 86661 AUC after training: 0.7080246913580248
User 86661 does not improve AUC. Reverting changes.
Training on augumented user 43176 35/50 current_auc = 0.708641975308642
User 43176 AUC after training: 0.7089947089947091
User 43176 improves AUC. Keeping the model.
Training on augumented user 35318 36/50 current_auc = 0.7089947089947091
User 35318 AUC after training: 0.7084656084656086
User 35318 does not improve AUC. Reverting changes.
Training on augumented user 87370 37/50 current_auc = 0.7089947089947091
User 87370 AUC after training: 0.7084656084656085
User 87370 does not improve AUC. Reverting changes.
Training on augumented user 792 38/50 current_auc = 0.7089947089947091
User 792 AUC after training: 0.7077601410934744
User 792 does not improve AUC. Reverting changes.
Training on augumented user 35666 39/50 current_auc = 0.7089947089947091
User 35666 AUC after training: 0.708994708994709
User 35666 does not improve AUC. Reverting changes.
Training on augumented user 88510 40/50 current_auc = 0.7089947089947091
User 88510 AUC after training: 0.708641975308642
User 88510 does not improve AUC. Reverting changes.
Training on augumented user 29159 41/50 current_auc = 0.7089947089947091
User 29159 AUC after training: 0.7091710758377425
User 29159 improves AUC. Keeping the model.
Training on augumented user 98564 42/50 current_auc = 0.7091710758377425
User 98564 AUC after training: 0.7086419753086419
User 98564 does not improve AUC. Reverting changes.
Training on augumented user 116906 43/50 current_auc = 0.7091710758377425
User 116906 AUC after training: 0.7089947089947091
User 116906 does not improve AUC. Reverting changes.
Training on augumented user 102924 44/50 current_auc = 0.7091710758377425
User 102924 AUC after training: 0.7088183421516756
User 102924 does not improve AUC. Reverting changes.
Training on augumented user 74063 45/50 current_auc = 0.7091710758377425
User 74063 AUC after training: 0.7087301587301588
User 74063 does not improve AUC. Reverting changes.
Training on augumented user 71839 46/50 current_auc = 0.7091710758377425
User 71839 AUC after training: 0.7086419753086419
User 71839 does not improve AUC. Reverting changes.
Training on augumented user 124709 47/50 current_auc = 0.7091710758377425
User 124709 AUC after training: 0.7082010582010583
User 124709 does not improve AUC. Reverting changes.
Training on augumented user 56275 48/50 current_auc = 0.7091710758377425
User 56275 AUC after training: 0.7086419753086419
User 56275 does not improve AUC. Reverting changes.
Training on augumented user 60420 49/50 current_auc = 0.7091710758377425
User 60420 AUC after training: 0.708994708994709
User 60420 does not improve AUC. Reverting changes.
[2024-12-02 18:12:20.778494] start test user 1714 61/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:12:21.395389] start test user 1714 61/568 recall augumented users by random, augumented_users = [50142, 94234, 94708, 55152, 111205, 101350, 24991, 10601, 27004, 111792, 21440, 17298, 84457, 30999, 48715, 57785, 112845, 52443, 96860, 89040, 121236, 69868, 107457, 35867, 8895, 65980, 53528, 84731, 6538, 131594, 32357, 64597, 66841, 73290, 36775, 73801, 30453, 67425, 62290, 35698, 30139, 12044, 73483, 120824, 106085, 74270, 8855, 58003, 80550, 117302]
[2024-12-02 18:12:21.410072] user = 1714 Cloud 61/568
[2024-12-02 18:12:21.423851] user = 1714 Local 61/568
[2024-12-02 18:12:21.457973] user = 1714 Local+ 61/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:12:24.438342] user = 1714 MPDA- 61/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5683760683760684
Training on augumented user 50142 0/50 current_auc = 0.5683760683760684
User 50142 AUC after training: 0.5662393162393162
User 50142 does not improve AUC. Reverting changes.
Training on augumented user 94234 1/50 current_auc = 0.5683760683760684
User 94234 AUC after training: 0.5625
User 94234 does not improve AUC. Reverting changes.
Training on augumented user 94708 2/50 current_auc = 0.5683760683760684
User 94708 AUC after training: 0.5608974358974359
User 94708 does not improve AUC. Reverting changes.
Training on augumented user 55152 3/50 current_auc = 0.5683760683760684
User 55152 AUC after training: 0.5673076923076923
User 55152 does not improve AUC. Reverting changes.
Training on augumented user 111205 4/50 current_auc = 0.5683760683760684
User 111205 AUC after training: 0.5662393162393162
User 111205 does not improve AUC. Reverting changes.
Training on augumented user 101350 5/50 current_auc = 0.5683760683760684
User 101350 AUC after training: 0.5635683760683761
User 101350 does not improve AUC. Reverting changes.
Training on augumented user 24991 6/50 current_auc = 0.5683760683760684
User 24991 AUC after training: 0.5683760683760684
User 24991 does not improve AUC. Reverting changes.
Training on augumented user 10601 7/50 current_auc = 0.5683760683760684
User 10601 AUC after training: 0.5683760683760684
User 10601 does not improve AUC. Reverting changes.
Training on augumented user 27004 8/50 current_auc = 0.5683760683760684
User 27004 AUC after training: 0.5641025641025641
User 27004 does not improve AUC. Reverting changes.
Training on augumented user 111792 9/50 current_auc = 0.5683760683760684
User 111792 AUC after training: 0.5683760683760684
User 111792 does not improve AUC. Reverting changes.
Training on augumented user 21440 10/50 current_auc = 0.5683760683760684
User 21440 AUC after training: 0.5694444444444444
User 21440 improves AUC. Keeping the model.
Training on augumented user 17298 11/50 current_auc = 0.5694444444444444
User 17298 AUC after training: 0.5667735042735043
User 17298 does not improve AUC. Reverting changes.
Training on augumented user 84457 12/50 current_auc = 0.5694444444444444
User 84457 AUC after training: 0.5662393162393162
User 84457 does not improve AUC. Reverting changes.
Training on augumented user 30999 13/50 current_auc = 0.5694444444444444
User 30999 AUC after training: 0.5662393162393162
User 30999 does not improve AUC. Reverting changes.
Training on augumented user 48715 14/50 current_auc = 0.5694444444444444
User 48715 AUC after training: 0.5662393162393162
User 48715 does not improve AUC. Reverting changes.
Training on augumented user 57785 15/50 current_auc = 0.5694444444444444
User 57785 AUC after training: 0.5683760683760684
User 57785 does not improve AUC. Reverting changes.
Training on augumented user 112845 16/50 current_auc = 0.5694444444444444
User 112845 AUC after training: 0.5694444444444444
User 112845 does not improve AUC. Reverting changes.
Training on augumented user 52443 17/50 current_auc = 0.5694444444444444
User 52443 AUC after training: 0.5651709401709402
User 52443 does not improve AUC. Reverting changes.
Training on augumented user 96860 18/50 current_auc = 0.5694444444444444
User 96860 AUC after training: 0.5673076923076923
User 96860 does not improve AUC. Reverting changes.
Training on augumented user 89040 19/50 current_auc = 0.5694444444444444
User 89040 AUC after training: 0.5683760683760684
User 89040 does not improve AUC. Reverting changes.
Training on augumented user 121236 20/50 current_auc = 0.5694444444444444
User 121236 AUC after training: 0.5683760683760684
User 121236 does not improve AUC. Reverting changes.
Training on augumented user 69868 21/50 current_auc = 0.5694444444444444
User 69868 AUC after training: 0.563034188034188
User 69868 does not improve AUC. Reverting changes.
Training on augumented user 107457 22/50 current_auc = 0.5694444444444444
User 107457 AUC after training: 0.5662393162393162
User 107457 does not improve AUC. Reverting changes.
Training on augumented user 35867 23/50 current_auc = 0.5694444444444444
User 35867 AUC after training: 0.5694444444444444
User 35867 does not improve AUC. Reverting changes.
Training on augumented user 8895 24/50 current_auc = 0.5694444444444444
User 8895 AUC after training: 0.5673076923076923
User 8895 does not improve AUC. Reverting changes.
Training on augumented user 65980 25/50 current_auc = 0.5694444444444444
User 65980 AUC after training: 0.5683760683760684
User 65980 does not improve AUC. Reverting changes.
Training on augumented user 53528 26/50 current_auc = 0.5694444444444444
User 53528 AUC after training: 0.5662393162393162
User 53528 does not improve AUC. Reverting changes.
Training on augumented user 84731 27/50 current_auc = 0.5694444444444444
User 84731 AUC after training: 0.5683760683760684
User 84731 does not improve AUC. Reverting changes.
Training on augumented user 6538 28/50 current_auc = 0.5694444444444444
User 6538 AUC after training: 0.5662393162393162
User 6538 does not improve AUC. Reverting changes.
Training on augumented user 131594 29/50 current_auc = 0.5694444444444444
User 131594 AUC after training: 0.5726495726495726
User 131594 improves AUC. Keeping the model.
Training on augumented user 32357 30/50 current_auc = 0.5726495726495726
User 32357 AUC after training: 0.5715811965811967
User 32357 does not improve AUC. Reverting changes.
Training on augumented user 64597 31/50 current_auc = 0.5726495726495726
User 64597 AUC after training: 0.5705128205128206
User 64597 does not improve AUC. Reverting changes.
Training on augumented user 66841 32/50 current_auc = 0.5726495726495726
User 66841 AUC after training: 0.5705128205128206
User 66841 does not improve AUC. Reverting changes.
Training on augumented user 73290 33/50 current_auc = 0.5726495726495726
User 73290 AUC after training: 0.5731837606837606
User 73290 improves AUC. Keeping the model.
Training on augumented user 36775 34/50 current_auc = 0.5731837606837606
User 36775 AUC after training: 0.5737179487179488
User 36775 improves AUC. Keeping the model.
Training on augumented user 73801 35/50 current_auc = 0.5737179487179488
User 73801 AUC after training: 0.5673076923076923
User 73801 does not improve AUC. Reverting changes.
Training on augumented user 30453 36/50 current_auc = 0.5737179487179488
User 30453 AUC after training: 0.5726495726495726
User 30453 does not improve AUC. Reverting changes.
Training on augumented user 67425 37/50 current_auc = 0.5737179487179488
User 67425 AUC after training: 0.5683760683760684
User 67425 does not improve AUC. Reverting changes.
Training on augumented user 62290 38/50 current_auc = 0.5737179487179488
User 62290 AUC after training: 0.5673076923076923
User 62290 does not improve AUC. Reverting changes.
Training on augumented user 35698 39/50 current_auc = 0.5737179487179488
User 35698 AUC after training: 0.5694444444444444
User 35698 does not improve AUC. Reverting changes.
Training on augumented user 30139 40/50 current_auc = 0.5737179487179488
User 30139 AUC after training: 0.5737179487179487
User 30139 does not improve AUC. Reverting changes.
Training on augumented user 12044 41/50 current_auc = 0.5737179487179488
User 12044 AUC after training: 0.577991452991453
User 12044 improves AUC. Keeping the model.
Training on augumented user 73483 42/50 current_auc = 0.577991452991453
User 73483 AUC after training: 0.5811965811965812
User 73483 improves AUC. Keeping the model.
Training on augumented user 120824 43/50 current_auc = 0.5811965811965812
User 120824 AUC after training: 0.5811965811965812
User 120824 does not improve AUC. Reverting changes.
Training on augumented user 106085 44/50 current_auc = 0.5811965811965812
User 106085 AUC after training: 0.5811965811965812
User 106085 does not improve AUC. Reverting changes.
Training on augumented user 74270 45/50 current_auc = 0.5811965811965812
User 74270 AUC after training: 0.5801282051282052
User 74270 does not improve AUC. Reverting changes.
Training on augumented user 8855 46/50 current_auc = 0.5811965811965812
User 8855 AUC after training: 0.5790598290598291
User 8855 does not improve AUC. Reverting changes.
Training on augumented user 58003 47/50 current_auc = 0.5811965811965812
User 58003 AUC after training: 0.577991452991453
User 58003 does not improve AUC. Reverting changes.
Training on augumented user 80550 48/50 current_auc = 0.5811965811965812
User 80550 AUC after training: 0.576923076923077
User 80550 does not improve AUC. Reverting changes.
Training on augumented user 117302 49/50 current_auc = 0.5811965811965812
User 117302 AUC after training: 0.5790598290598291
User 117302 does not improve AUC. Reverting changes.
[2024-12-02 18:12:55.803127] start test user 1715 62/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:12:56.298936] start test user 1715 62/568 recall augumented users by random, augumented_users = [88829, 135037, 120743, 97131, 36690, 70645, 122920, 107020, 75599, 88453, 48151, 24613, 114092, 5880, 53074, 67405, 22718, 122581, 120861, 86294, 129074, 25176, 28263, 75449, 85109, 26596, 8742, 12976, 35894, 108302, 57921, 15240, 147, 125681, 118924, 131373, 49746, 11556, 39043, 91628, 103831, 101079, 119158, 28176, 62240, 72514, 19782, 132807, 120340, 119166]
[2024-12-02 18:12:56.316335] user = 1715 Cloud 62/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:12:56.334242] user = 1715 Local 62/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:12:56.525051] user = 1715 Local+ 62/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:12:59.178475] user = 1715 MPDA- 62/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 88829 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88829 AUC after training: 0.5
User 88829 does not improve AUC. Reverting changes.
Training on augumented user 135037 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135037 AUC after training: 0.5
User 135037 does not improve AUC. Reverting changes.
Training on augumented user 120743 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120743 AUC after training: 0.5
User 120743 does not improve AUC. Reverting changes.
Training on augumented user 97131 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97131 AUC after training: 0.5
User 97131 does not improve AUC. Reverting changes.
Training on augumented user 36690 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36690 AUC after training: 0.5
User 36690 does not improve AUC. Reverting changes.
Training on augumented user 70645 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70645 AUC after training: 0.5
User 70645 does not improve AUC. Reverting changes.
Training on augumented user 122920 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122920 AUC after training: 0.5
User 122920 does not improve AUC. Reverting changes.
Training on augumented user 107020 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107020 AUC after training: 0.5
User 107020 does not improve AUC. Reverting changes.
Training on augumented user 75599 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75599 AUC after training: 0.5
User 75599 does not improve AUC. Reverting changes.
Training on augumented user 88453 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88453 AUC after training: 0.5
User 88453 does not improve AUC. Reverting changes.
Training on augumented user 48151 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48151 AUC after training: 0.5
User 48151 does not improve AUC. Reverting changes.
Training on augumented user 24613 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24613 AUC after training: 0.5
User 24613 does not improve AUC. Reverting changes.
Training on augumented user 114092 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114092 AUC after training: 0.5
User 114092 does not improve AUC. Reverting changes.
Training on augumented user 5880 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5880 AUC after training: 0.5
User 5880 does not improve AUC. Reverting changes.
Training on augumented user 53074 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53074 AUC after training: 0.5
User 53074 does not improve AUC. Reverting changes.
Training on augumented user 67405 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67405 AUC after training: 0.5
User 67405 does not improve AUC. Reverting changes.
Training on augumented user 22718 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22718 AUC after training: 0.5
User 22718 does not improve AUC. Reverting changes.
Training on augumented user 122581 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122581 AUC after training: 0.5
User 122581 does not improve AUC. Reverting changes.
Training on augumented user 120861 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120861 AUC after training: 0.5
User 120861 does not improve AUC. Reverting changes.
Training on augumented user 86294 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86294 AUC after training: 0.5
User 86294 does not improve AUC. Reverting changes.
Training on augumented user 129074 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129074 AUC after training: 0.5
User 129074 does not improve AUC. Reverting changes.
Training on augumented user 25176 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25176 AUC after training: 0.5
User 25176 does not improve AUC. Reverting changes.
Training on augumented user 28263 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28263 AUC after training: 0.5
User 28263 does not improve AUC. Reverting changes.
Training on augumented user 75449 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75449 AUC after training: 0.5
User 75449 does not improve AUC. Reverting changes.
Training on augumented user 85109 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85109 AUC after training: 0.5
User 85109 does not improve AUC. Reverting changes.
Training on augumented user 26596 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26596 AUC after training: 0.5
User 26596 does not improve AUC. Reverting changes.
Training on augumented user 8742 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8742 AUC after training: 0.5
User 8742 does not improve AUC. Reverting changes.
Training on augumented user 12976 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12976 AUC after training: 0.5
User 12976 does not improve AUC. Reverting changes.
Training on augumented user 35894 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35894 AUC after training: 0.5
User 35894 does not improve AUC. Reverting changes.
Training on augumented user 108302 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108302 AUC after training: 0.5
User 108302 does not improve AUC. Reverting changes.
Training on augumented user 57921 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57921 AUC after training: 0.5
User 57921 does not improve AUC. Reverting changes.
Training on augumented user 15240 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15240 AUC after training: 0.5
User 15240 does not improve AUC. Reverting changes.
Training on augumented user 147 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 147 AUC after training: 0.5
User 147 does not improve AUC. Reverting changes.
Training on augumented user 125681 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125681 AUC after training: 0.5
User 125681 does not improve AUC. Reverting changes.
Training on augumented user 118924 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118924 AUC after training: 0.5
User 118924 does not improve AUC. Reverting changes.
Training on augumented user 131373 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131373 AUC after training: 0.5
User 131373 does not improve AUC. Reverting changes.
Training on augumented user 49746 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49746 AUC after training: 0.5
User 49746 does not improve AUC. Reverting changes.
Training on augumented user 11556 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11556 AUC after training: 0.5
User 11556 does not improve AUC. Reverting changes.
Training on augumented user 39043 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39043 AUC after training: 0.5
User 39043 does not improve AUC. Reverting changes.
Training on augumented user 91628 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91628 AUC after training: 0.5
User 91628 does not improve AUC. Reverting changes.
Training on augumented user 103831 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103831 AUC after training: 0.5
User 103831 does not improve AUC. Reverting changes.
Training on augumented user 101079 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101079 AUC after training: 0.5
User 101079 does not improve AUC. Reverting changes.
Training on augumented user 119158 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119158 AUC after training: 0.5
User 119158 does not improve AUC. Reverting changes.
Training on augumented user 28176 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28176 AUC after training: 0.5
User 28176 does not improve AUC. Reverting changes.
Training on augumented user 62240 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62240 AUC after training: 0.5
User 62240 does not improve AUC. Reverting changes.
Training on augumented user 72514 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72514 AUC after training: 0.5
User 72514 does not improve AUC. Reverting changes.
Training on augumented user 19782 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19782 AUC after training: 0.5
User 19782 does not improve AUC. Reverting changes.
Training on augumented user 132807 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132807 AUC after training: 0.5
User 132807 does not improve AUC. Reverting changes.
Training on augumented user 120340 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120340 AUC after training: 0.5
User 120340 does not improve AUC. Reverting changes.
Training on augumented user 119166 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119166 AUC after training: 0.5
User 119166 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:13:23.956206] start test user 1716 63/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:13:24.652409] start test user 1716 63/568 recall augumented users by random, augumented_users = [115872, 76387, 14059, 106319, 27189, 20098, 65846, 14376, 127383, 19890, 25078, 27600, 76559, 60785, 105597, 95863, 123035, 123757, 112566, 110590, 44666, 61690, 46651, 95840, 48369, 56276, 127799, 82387, 130235, 121354, 16344, 82469, 81232, 13710, 59552, 72042, 115354, 21222, 80104, 42797, 98034, 63249, 77282, 88679, 92571, 58720, 7233, 18554, 20971, 119803]
[2024-12-02 18:13:24.669415] user = 1716 Cloud 63/568
[2024-12-02 18:13:24.689715] user = 1716 Local 63/568
[2024-12-02 18:13:24.779505] user = 1716 Local+ 63/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:13:27.626258] user = 1716 MPDA- 63/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6666666666666667
Training on augumented user 115872 0/50 current_auc = 0.6666666666666667
User 115872 AUC after training: 0.6666666666666667
User 115872 does not improve AUC. Reverting changes.
Training on augumented user 76387 1/50 current_auc = 0.6666666666666667
User 76387 AUC after training: 0.6666666666666667
User 76387 does not improve AUC. Reverting changes.
Training on augumented user 14059 2/50 current_auc = 0.6666666666666667
User 14059 AUC after training: 0.6666666666666667
User 14059 does not improve AUC. Reverting changes.
Training on augumented user 106319 3/50 current_auc = 0.6666666666666667
User 106319 AUC after training: 0.6666666666666667
User 106319 does not improve AUC. Reverting changes.
Training on augumented user 27189 4/50 current_auc = 0.6666666666666667
User 27189 AUC after training: 0.6666666666666667
User 27189 does not improve AUC. Reverting changes.
Training on augumented user 20098 5/50 current_auc = 0.6666666666666667
User 20098 AUC after training: 0.6666666666666667
User 20098 does not improve AUC. Reverting changes.
Training on augumented user 65846 6/50 current_auc = 0.6666666666666667
User 65846 AUC after training: 0.6666666666666667
User 65846 does not improve AUC. Reverting changes.
Training on augumented user 14376 7/50 current_auc = 0.6666666666666667
User 14376 AUC after training: 0.6666666666666667
User 14376 does not improve AUC. Reverting changes.
Training on augumented user 127383 8/50 current_auc = 0.6666666666666667
User 127383 AUC after training: 0.6666666666666667
User 127383 does not improve AUC. Reverting changes.
Training on augumented user 19890 9/50 current_auc = 0.6666666666666667
User 19890 AUC after training: 0.6666666666666667
User 19890 does not improve AUC. Reverting changes.
Training on augumented user 25078 10/50 current_auc = 0.6666666666666667
User 25078 AUC after training: 0.6666666666666667
User 25078 does not improve AUC. Reverting changes.
Training on augumented user 27600 11/50 current_auc = 0.6666666666666667
User 27600 AUC after training: 0.6666666666666667
User 27600 does not improve AUC. Reverting changes.
Training on augumented user 76559 12/50 current_auc = 0.6666666666666667
User 76559 AUC after training: 0.6666666666666667
User 76559 does not improve AUC. Reverting changes.
Training on augumented user 60785 13/50 current_auc = 0.6666666666666667
User 60785 AUC after training: 0.6666666666666667
User 60785 does not improve AUC. Reverting changes.
Training on augumented user 105597 14/50 current_auc = 0.6666666666666667
User 105597 AUC after training: 0.6666666666666667
User 105597 does not improve AUC. Reverting changes.
Training on augumented user 95863 15/50 current_auc = 0.6666666666666667
User 95863 AUC after training: 0.6666666666666667
User 95863 does not improve AUC. Reverting changes.
Training on augumented user 123035 16/50 current_auc = 0.6666666666666667
User 123035 AUC after training: 0.6666666666666667
User 123035 does not improve AUC. Reverting changes.
Training on augumented user 123757 17/50 current_auc = 0.6666666666666667
User 123757 AUC after training: 0.6666666666666667
User 123757 does not improve AUC. Reverting changes.
Training on augumented user 112566 18/50 current_auc = 0.6666666666666667
User 112566 AUC after training: 0.6666666666666667
User 112566 does not improve AUC. Reverting changes.
Training on augumented user 110590 19/50 current_auc = 0.6666666666666667
User 110590 AUC after training: 0.6666666666666667
User 110590 does not improve AUC. Reverting changes.
Training on augumented user 44666 20/50 current_auc = 0.6666666666666667
User 44666 AUC after training: 0.6666666666666667
User 44666 does not improve AUC. Reverting changes.
Training on augumented user 61690 21/50 current_auc = 0.6666666666666667
User 61690 AUC after training: 0.6666666666666667
User 61690 does not improve AUC. Reverting changes.
Training on augumented user 46651 22/50 current_auc = 0.6666666666666667
User 46651 AUC after training: 0.6666666666666667
User 46651 does not improve AUC. Reverting changes.
Training on augumented user 95840 23/50 current_auc = 0.6666666666666667
User 95840 AUC after training: 0.6666666666666667
User 95840 does not improve AUC. Reverting changes.
Training on augumented user 48369 24/50 current_auc = 0.6666666666666667
User 48369 AUC after training: 0.6666666666666667
User 48369 does not improve AUC. Reverting changes.
Training on augumented user 56276 25/50 current_auc = 0.6666666666666667
User 56276 AUC after training: 0.6666666666666667
User 56276 does not improve AUC. Reverting changes.
Training on augumented user 127799 26/50 current_auc = 0.6666666666666667
User 127799 AUC after training: 0.6666666666666667
User 127799 does not improve AUC. Reverting changes.
Training on augumented user 82387 27/50 current_auc = 0.6666666666666667
User 82387 AUC after training: 0.6666666666666667
User 82387 does not improve AUC. Reverting changes.
Training on augumented user 130235 28/50 current_auc = 0.6666666666666667
User 130235 AUC after training: 0.6666666666666667
User 130235 does not improve AUC. Reverting changes.
Training on augumented user 121354 29/50 current_auc = 0.6666666666666667
User 121354 AUC after training: 0.6666666666666667
User 121354 does not improve AUC. Reverting changes.
Training on augumented user 16344 30/50 current_auc = 0.6666666666666667
User 16344 AUC after training: 0.6666666666666667
User 16344 does not improve AUC. Reverting changes.
Training on augumented user 82469 31/50 current_auc = 0.6666666666666667
User 82469 AUC after training: 0.6666666666666667
User 82469 does not improve AUC. Reverting changes.
Training on augumented user 81232 32/50 current_auc = 0.6666666666666667
User 81232 AUC after training: 0.6666666666666667
User 81232 does not improve AUC. Reverting changes.
Training on augumented user 13710 33/50 current_auc = 0.6666666666666667
User 13710 AUC after training: 0.6666666666666667
User 13710 does not improve AUC. Reverting changes.
Training on augumented user 59552 34/50 current_auc = 0.6666666666666667
User 59552 AUC after training: 0.6666666666666667
User 59552 does not improve AUC. Reverting changes.
Training on augumented user 72042 35/50 current_auc = 0.6666666666666667
User 72042 AUC after training: 0.6666666666666667
User 72042 does not improve AUC. Reverting changes.
Training on augumented user 115354 36/50 current_auc = 0.6666666666666667
User 115354 AUC after training: 0.6666666666666667
User 115354 does not improve AUC. Reverting changes.
Training on augumented user 21222 37/50 current_auc = 0.6666666666666667
User 21222 AUC after training: 0.6666666666666667
User 21222 does not improve AUC. Reverting changes.
Training on augumented user 80104 38/50 current_auc = 0.6666666666666667
User 80104 AUC after training: 0.6666666666666667
User 80104 does not improve AUC. Reverting changes.
Training on augumented user 42797 39/50 current_auc = 0.6666666666666667
User 42797 AUC after training: 0.6666666666666667
User 42797 does not improve AUC. Reverting changes.
Training on augumented user 98034 40/50 current_auc = 0.6666666666666667
User 98034 AUC after training: 0.6666666666666667
User 98034 does not improve AUC. Reverting changes.
Training on augumented user 63249 41/50 current_auc = 0.6666666666666667
User 63249 AUC after training: 0.6666666666666667
User 63249 does not improve AUC. Reverting changes.
Training on augumented user 77282 42/50 current_auc = 0.6666666666666667
User 77282 AUC after training: 0.6666666666666667
User 77282 does not improve AUC. Reverting changes.
Training on augumented user 88679 43/50 current_auc = 0.6666666666666667
User 88679 AUC after training: 0.6666666666666667
User 88679 does not improve AUC. Reverting changes.
Training on augumented user 92571 44/50 current_auc = 0.6666666666666667
User 92571 AUC after training: 0.6666666666666667
User 92571 does not improve AUC. Reverting changes.
Training on augumented user 58720 45/50 current_auc = 0.6666666666666667
User 58720 AUC after training: 0.6666666666666667
User 58720 does not improve AUC. Reverting changes.
Training on augumented user 7233 46/50 current_auc = 0.6666666666666667
User 7233 AUC after training: 0.6666666666666667
User 7233 does not improve AUC. Reverting changes.
Training on augumented user 18554 47/50 current_auc = 0.6666666666666667
User 18554 AUC after training: 0.6666666666666667
User 18554 does not improve AUC. Reverting changes.
Training on augumented user 20971 48/50 current_auc = 0.6666666666666667
User 20971 AUC after training: 0.6666666666666667
User 20971 does not improve AUC. Reverting changes.
Training on augumented user 119803 49/50 current_auc = 0.6666666666666667
User 119803 AUC after training: 0.6666666666666667
User 119803 does not improve AUC. Reverting changes.
[2024-12-02 18:13:57.727489] start test user 1719 64/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:13:58.308789] start test user 1719 64/568 recall augumented users by random, augumented_users = [91609, 96449, 78326, 23933, 65162, 115244, 56767, 100567, 115412, 12013, 18418, 136123, 8155, 79090, 61645, 52201, 107076, 105533, 87592, 107550, 13089, 89523, 132729, 13173, 51693, 6608, 28166, 99039, 115545, 47024, 92997, 53223, 116205, 48165, 58103, 94620, 4574, 125158, 133132, 40669, 113449, 89943, 94767, 79187, 107316, 54376, 57922, 134761, 46061, 113805]
[2024-12-02 18:13:58.323514] user = 1719 Cloud 64/568
[2024-12-02 18:13:58.333746] user = 1719 Local 64/568
[2024-12-02 18:13:58.389344] user = 1719 Local+ 64/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:14:00.819833] user = 1719 MPDA- 64/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5476190476190477
Training on augumented user 91609 0/50 current_auc = 0.5476190476190477
User 91609 AUC after training: 0.5476190476190477
User 91609 does not improve AUC. Reverting changes.
Training on augumented user 96449 1/50 current_auc = 0.5476190476190477
User 96449 AUC after training: 0.5476190476190477
User 96449 does not improve AUC. Reverting changes.
Training on augumented user 78326 2/50 current_auc = 0.5476190476190477
User 78326 AUC after training: 0.5476190476190477
User 78326 does not improve AUC. Reverting changes.
Training on augumented user 23933 3/50 current_auc = 0.5476190476190477
User 23933 AUC after training: 0.5476190476190477
User 23933 does not improve AUC. Reverting changes.
Training on augumented user 65162 4/50 current_auc = 0.5476190476190477
User 65162 AUC after training: 0.5476190476190477
User 65162 does not improve AUC. Reverting changes.
Training on augumented user 115244 5/50 current_auc = 0.5476190476190477
User 115244 AUC after training: 0.5476190476190477
User 115244 does not improve AUC. Reverting changes.
Training on augumented user 56767 6/50 current_auc = 0.5476190476190477
User 56767 AUC after training: 0.5476190476190477
User 56767 does not improve AUC. Reverting changes.
Training on augumented user 100567 7/50 current_auc = 0.5476190476190477
User 100567 AUC after training: 0.5595238095238095
User 100567 improves AUC. Keeping the model.
Training on augumented user 115412 8/50 current_auc = 0.5595238095238095
User 115412 AUC after training: 0.5595238095238095
User 115412 does not improve AUC. Reverting changes.
Training on augumented user 12013 9/50 current_auc = 0.5595238095238095
User 12013 AUC after training: 0.5595238095238095
User 12013 does not improve AUC. Reverting changes.
Training on augumented user 18418 10/50 current_auc = 0.5595238095238095
User 18418 AUC after training: 0.5595238095238095
User 18418 does not improve AUC. Reverting changes.
Training on augumented user 136123 11/50 current_auc = 0.5595238095238095
User 136123 AUC after training: 0.5595238095238095
User 136123 does not improve AUC. Reverting changes.
Training on augumented user 8155 12/50 current_auc = 0.5595238095238095
User 8155 AUC after training: 0.5595238095238095
User 8155 does not improve AUC. Reverting changes.
Training on augumented user 79090 13/50 current_auc = 0.5595238095238095
User 79090 AUC after training: 0.5595238095238095
User 79090 does not improve AUC. Reverting changes.
Training on augumented user 61645 14/50 current_auc = 0.5595238095238095
User 61645 AUC after training: 0.5595238095238095
User 61645 does not improve AUC. Reverting changes.
Training on augumented user 52201 15/50 current_auc = 0.5595238095238095
User 52201 AUC after training: 0.5595238095238095
User 52201 does not improve AUC. Reverting changes.
Training on augumented user 107076 16/50 current_auc = 0.5595238095238095
User 107076 AUC after training: 0.5595238095238095
User 107076 does not improve AUC. Reverting changes.
Training on augumented user 105533 17/50 current_auc = 0.5595238095238095
User 105533 AUC after training: 0.5595238095238095
User 105533 does not improve AUC. Reverting changes.
Training on augumented user 87592 18/50 current_auc = 0.5595238095238095
User 87592 AUC after training: 0.5595238095238095
User 87592 does not improve AUC. Reverting changes.
Training on augumented user 107550 19/50 current_auc = 0.5595238095238095
User 107550 AUC after training: 0.5595238095238095
User 107550 does not improve AUC. Reverting changes.
Training on augumented user 13089 20/50 current_auc = 0.5595238095238095
User 13089 AUC after training: 0.5595238095238095
User 13089 does not improve AUC. Reverting changes.
Training on augumented user 89523 21/50 current_auc = 0.5595238095238095
User 89523 AUC after training: 0.5595238095238095
User 89523 does not improve AUC. Reverting changes.
Training on augumented user 132729 22/50 current_auc = 0.5595238095238095
User 132729 AUC after training: 0.5595238095238095
User 132729 does not improve AUC. Reverting changes.
Training on augumented user 13173 23/50 current_auc = 0.5595238095238095
User 13173 AUC after training: 0.5595238095238095
User 13173 does not improve AUC. Reverting changes.
Training on augumented user 51693 24/50 current_auc = 0.5595238095238095
User 51693 AUC after training: 0.5476190476190477
User 51693 does not improve AUC. Reverting changes.
Training on augumented user 6608 25/50 current_auc = 0.5595238095238095
User 6608 AUC after training: 0.5595238095238095
User 6608 does not improve AUC. Reverting changes.
Training on augumented user 28166 26/50 current_auc = 0.5595238095238095
User 28166 AUC after training: 0.5595238095238095
User 28166 does not improve AUC. Reverting changes.
Training on augumented user 99039 27/50 current_auc = 0.5595238095238095
User 99039 AUC after training: 0.5595238095238095
User 99039 does not improve AUC. Reverting changes.
Training on augumented user 115545 28/50 current_auc = 0.5595238095238095
User 115545 AUC after training: 0.5595238095238095
User 115545 does not improve AUC. Reverting changes.
Training on augumented user 47024 29/50 current_auc = 0.5595238095238095
User 47024 AUC after training: 0.5595238095238095
User 47024 does not improve AUC. Reverting changes.
Training on augumented user 92997 30/50 current_auc = 0.5595238095238095
User 92997 AUC after training: 0.5595238095238095
User 92997 does not improve AUC. Reverting changes.
Training on augumented user 53223 31/50 current_auc = 0.5595238095238095
User 53223 AUC after training: 0.5595238095238095
User 53223 does not improve AUC. Reverting changes.
Training on augumented user 116205 32/50 current_auc = 0.5595238095238095
User 116205 AUC after training: 0.5595238095238095
User 116205 does not improve AUC. Reverting changes.
Training on augumented user 48165 33/50 current_auc = 0.5595238095238095
User 48165 AUC after training: 0.5515873015873016
User 48165 does not improve AUC. Reverting changes.
Training on augumented user 58103 34/50 current_auc = 0.5595238095238095
User 58103 AUC after training: 0.5595238095238095
User 58103 does not improve AUC. Reverting changes.
Training on augumented user 94620 35/50 current_auc = 0.5595238095238095
User 94620 AUC after training: 0.5595238095238095
User 94620 does not improve AUC. Reverting changes.
Training on augumented user 4574 36/50 current_auc = 0.5595238095238095
User 4574 AUC after training: 0.5595238095238095
User 4574 does not improve AUC. Reverting changes.
Training on augumented user 125158 37/50 current_auc = 0.5595238095238095
User 125158 AUC after training: 0.5595238095238095
User 125158 does not improve AUC. Reverting changes.
Training on augumented user 133132 38/50 current_auc = 0.5595238095238095
User 133132 AUC after training: 0.5595238095238095
User 133132 does not improve AUC. Reverting changes.
Training on augumented user 40669 39/50 current_auc = 0.5595238095238095
User 40669 AUC after training: 0.5595238095238095
User 40669 does not improve AUC. Reverting changes.
Training on augumented user 113449 40/50 current_auc = 0.5595238095238095
User 113449 AUC after training: 0.5595238095238095
User 113449 does not improve AUC. Reverting changes.
Training on augumented user 89943 41/50 current_auc = 0.5595238095238095
User 89943 AUC after training: 0.5595238095238095
User 89943 does not improve AUC. Reverting changes.
Training on augumented user 94767 42/50 current_auc = 0.5595238095238095
User 94767 AUC after training: 0.5634920634920635
User 94767 improves AUC. Keeping the model.
Training on augumented user 79187 43/50 current_auc = 0.5634920634920635
User 79187 AUC after training: 0.5634920634920635
User 79187 does not improve AUC. Reverting changes.
Training on augumented user 107316 44/50 current_auc = 0.5634920634920635
User 107316 AUC after training: 0.5634920634920635
User 107316 does not improve AUC. Reverting changes.
Training on augumented user 54376 45/50 current_auc = 0.5634920634920635
User 54376 AUC after training: 0.5555555555555556
User 54376 does not improve AUC. Reverting changes.
Training on augumented user 57922 46/50 current_auc = 0.5634920634920635
User 57922 AUC after training: 0.5634920634920635
User 57922 does not improve AUC. Reverting changes.
Training on augumented user 134761 47/50 current_auc = 0.5634920634920635
User 134761 AUC after training: 0.5595238095238095
User 134761 does not improve AUC. Reverting changes.
Training on augumented user 46061 48/50 current_auc = 0.5634920634920635
User 46061 AUC after training: 0.5555555555555556
User 46061 does not improve AUC. Reverting changes.
Training on augumented user 113805 49/50 current_auc = 0.5634920634920635
User 113805 AUC after training: 0.5634920634920635
User 113805 does not improve AUC. Reverting changes.
[2024-12-02 18:14:28.426445] start test user 1741 65/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:14:28.853532] start test user 1741 65/568 recall augumented users by random, augumented_users = [119912, 115389, 108796, 8324, 71912, 84244, 45349, 49955, 64943, 45115, 78, 1372, 84780, 86892, 21324, 26730, 92415, 133899, 122180, 70333, 132362, 85145, 40636, 28197, 73956, 86293, 35430, 31446, 82854, 22256, 77542, 56322, 7194, 33153, 130830, 90911, 53871, 110216, 33280, 32418, 100644, 135095, 116205, 43677, 14966, 77774, 110179, 52007, 66986, 42450]
[2024-12-02 18:14:28.869624] user = 1741 Cloud 65/568
[2024-12-02 18:14:28.892359] user = 1741 Local 65/568
[2024-12-02 18:14:29.018388] user = 1741 Local+ 65/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:14:30.506819] user = 1741 MPDA- 65/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5776978417266188
Training on augumented user 119912 0/50 current_auc = 0.5776978417266188
User 119912 AUC after training: 0.5782973621103118
User 119912 improves AUC. Keeping the model.
Training on augumented user 115389 1/50 current_auc = 0.5782973621103118
User 115389 AUC after training: 0.5781774580335731
User 115389 does not improve AUC. Reverting changes.
Training on augumented user 108796 2/50 current_auc = 0.5782973621103118
User 108796 AUC after training: 0.5781774580335731
User 108796 does not improve AUC. Reverting changes.
Training on augumented user 8324 3/50 current_auc = 0.5782973621103118
User 8324 AUC after training: 0.5780575539568344
User 8324 does not improve AUC. Reverting changes.
Training on augumented user 71912 4/50 current_auc = 0.5782973621103118
User 71912 AUC after training: 0.5782973621103118
User 71912 does not improve AUC. Reverting changes.
Training on augumented user 84244 5/50 current_auc = 0.5782973621103118
User 84244 AUC after training: 0.5780575539568346
User 84244 does not improve AUC. Reverting changes.
Training on augumented user 45349 6/50 current_auc = 0.5782973621103118
User 45349 AUC after training: 0.5781774580335731
User 45349 does not improve AUC. Reverting changes.
Training on augumented user 49955 7/50 current_auc = 0.5782973621103118
User 49955 AUC after training: 0.5782973621103117
User 49955 does not improve AUC. Reverting changes.
Training on augumented user 64943 8/50 current_auc = 0.5782973621103118
User 64943 AUC after training: 0.5776978417266188
User 64943 does not improve AUC. Reverting changes.
Training on augumented user 45115 9/50 current_auc = 0.5782973621103118
User 45115 AUC after training: 0.5778177458033573
User 45115 does not improve AUC. Reverting changes.
Training on augumented user 78 10/50 current_auc = 0.5782973621103118
User 78 AUC after training: 0.5781774580335731
User 78 does not improve AUC. Reverting changes.
Training on augumented user 1372 11/50 current_auc = 0.5782973621103118
User 1372 AUC after training: 0.5793764988009593
User 1372 improves AUC. Keeping the model.
Training on augumented user 84780 12/50 current_auc = 0.5793764988009593
User 84780 AUC after training: 0.5794964028776979
User 84780 improves AUC. Keeping the model.
Training on augumented user 86892 13/50 current_auc = 0.5794964028776979
User 86892 AUC after training: 0.5793764988009593
User 86892 does not improve AUC. Reverting changes.
Training on augumented user 21324 14/50 current_auc = 0.5794964028776979
User 21324 AUC after training: 0.5794964028776979
User 21324 does not improve AUC. Reverting changes.
Training on augumented user 26730 15/50 current_auc = 0.5794964028776979
User 26730 AUC after training: 0.5792565947242206
User 26730 does not improve AUC. Reverting changes.
Training on augumented user 92415 16/50 current_auc = 0.5794964028776979
User 92415 AUC after training: 0.579136690647482
User 92415 does not improve AUC. Reverting changes.
Training on augumented user 133899 17/50 current_auc = 0.5794964028776979
User 133899 AUC after training: 0.5796163069544364
User 133899 improves AUC. Keeping the model.
Training on augumented user 122180 18/50 current_auc = 0.5796163069544364
User 122180 AUC after training: 0.5794964028776979
User 122180 does not improve AUC. Reverting changes.
Training on augumented user 70333 19/50 current_auc = 0.5796163069544364
User 70333 AUC after training: 0.5792565947242206
User 70333 does not improve AUC. Reverting changes.
Training on augumented user 132362 20/50 current_auc = 0.5796163069544364
User 132362 AUC after training: 0.5792565947242206
User 132362 does not improve AUC. Reverting changes.
Training on augumented user 85145 21/50 current_auc = 0.5796163069544364
User 85145 AUC after training: 0.5794964028776979
User 85145 does not improve AUC. Reverting changes.
Training on augumented user 40636 22/50 current_auc = 0.5796163069544364
User 40636 AUC after training: 0.5785371702637889
User 40636 does not improve AUC. Reverting changes.
Training on augumented user 28197 23/50 current_auc = 0.5796163069544364
User 28197 AUC after training: 0.5794964028776979
User 28197 does not improve AUC. Reverting changes.
Training on augumented user 73956 24/50 current_auc = 0.5796163069544364
User 73956 AUC after training: 0.5790167865707434
User 73956 does not improve AUC. Reverting changes.
Training on augumented user 86293 25/50 current_auc = 0.5796163069544364
User 86293 AUC after training: 0.5800959232613909
User 86293 improves AUC. Keeping the model.
Training on augumented user 35430 26/50 current_auc = 0.5800959232613909
User 35430 AUC after training: 0.5786570743405276
User 35430 does not improve AUC. Reverting changes.
Training on augumented user 31446 27/50 current_auc = 0.5800959232613909
User 31446 AUC after training: 0.5799760191846524
User 31446 does not improve AUC. Reverting changes.
Training on augumented user 82854 28/50 current_auc = 0.5800959232613909
User 82854 AUC after training: 0.5799760191846522
User 82854 does not improve AUC. Reverting changes.
Training on augumented user 22256 29/50 current_auc = 0.5800959232613909
User 22256 AUC after training: 0.579736211031175
User 22256 does not improve AUC. Reverting changes.
Training on augumented user 77542 30/50 current_auc = 0.5800959232613909
User 77542 AUC after training: 0.5802158273381295
User 77542 improves AUC. Keeping the model.
Training on augumented user 56322 31/50 current_auc = 0.5802158273381295
User 56322 AUC after training: 0.5797362110311751
User 56322 does not improve AUC. Reverting changes.
Training on augumented user 7194 32/50 current_auc = 0.5802158273381295
User 7194 AUC after training: 0.580695443645084
User 7194 improves AUC. Keeping the model.
Training on augumented user 33153 33/50 current_auc = 0.580695443645084
User 33153 AUC after training: 0.5808153477218225
User 33153 improves AUC. Keeping the model.
Training on augumented user 130830 34/50 current_auc = 0.5808153477218225
User 130830 AUC after training: 0.5802158273381295
User 130830 does not improve AUC. Reverting changes.
Training on augumented user 90911 35/50 current_auc = 0.5808153477218225
User 90911 AUC after training: 0.5810551558752997
User 90911 improves AUC. Keeping the model.
Training on augumented user 53871 36/50 current_auc = 0.5810551558752997
User 53871 AUC after training: 0.5811750599520383
User 53871 improves AUC. Keeping the model.
Training on augumented user 110216 37/50 current_auc = 0.5811750599520383
User 110216 AUC after training: 0.580695443645084
User 110216 does not improve AUC. Reverting changes.
Training on augumented user 33280 38/50 current_auc = 0.5811750599520383
User 33280 AUC after training: 0.581294964028777
User 33280 improves AUC. Keeping the model.
Training on augumented user 32418 39/50 current_auc = 0.581294964028777
User 32418 AUC after training: 0.5811750599520382
User 32418 does not improve AUC. Reverting changes.
Training on augumented user 100644 40/50 current_auc = 0.581294964028777
User 100644 AUC after training: 0.5808153477218225
User 100644 does not improve AUC. Reverting changes.
Training on augumented user 135095 41/50 current_auc = 0.581294964028777
User 135095 AUC after training: 0.5811750599520383
User 135095 does not improve AUC. Reverting changes.
Training on augumented user 116205 42/50 current_auc = 0.581294964028777
User 116205 AUC after training: 0.5814148681055156
User 116205 improves AUC. Keeping the model.
Training on augumented user 43677 43/50 current_auc = 0.5814148681055156
User 43677 AUC after training: 0.5810551558752998
User 43677 does not improve AUC. Reverting changes.
Training on augumented user 14966 44/50 current_auc = 0.5814148681055156
User 14966 AUC after training: 0.5809352517985611
User 14966 does not improve AUC. Reverting changes.
Training on augumented user 77774 45/50 current_auc = 0.5814148681055156
User 77774 AUC after training: 0.581294964028777
User 77774 does not improve AUC. Reverting changes.
Training on augumented user 110179 46/50 current_auc = 0.5814148681055156
User 110179 AUC after training: 0.58189448441247
User 110179 improves AUC. Keeping the model.
Training on augumented user 52007 47/50 current_auc = 0.58189448441247
User 52007 AUC after training: 0.5814148681055156
User 52007 does not improve AUC. Reverting changes.
Training on augumented user 66986 48/50 current_auc = 0.58189448441247
User 66986 AUC after training: 0.5816546762589928
User 66986 does not improve AUC. Reverting changes.
Training on augumented user 42450 49/50 current_auc = 0.58189448441247
User 42450 AUC after training: 0.5814148681055156
User 42450 does not improve AUC. Reverting changes.
[2024-12-02 18:14:56.952753] start test user 1775 66/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:14:57.534905] start test user 1775 66/568 recall augumented users by random, augumented_users = [25296, 50283, 92492, 52771, 52146, 90077, 110183, 2310, 87945, 40928, 25627, 56698, 55485, 12998, 61238, 101742, 51608, 19147, 69936, 84106, 211, 64187, 130041, 102392, 103705, 70708, 100872, 53163, 70239, 12570, 42555, 42791, 124369, 106034, 87649, 64769, 53353, 50519, 103431, 3008, 106292, 88076, 122498, 60912, 75990, 12748, 3066, 121550, 77543, 11930]
[2024-12-02 18:14:57.549570] user = 1775 Cloud 66/568
[2024-12-02 18:14:57.563243] user = 1775 Local 66/568
[2024-12-02 18:14:57.622651] user = 1775 Local+ 66/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:15:00.279241] user = 1775 MPDA- 66/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6964573268921095
Training on augumented user 25296 0/50 current_auc = 0.6964573268921095
User 25296 AUC after training: 0.6976650563607085
User 25296 improves AUC. Keeping the model.
Training on augumented user 50283 1/50 current_auc = 0.6976650563607085
User 50283 AUC after training: 0.6992753623188406
User 50283 improves AUC. Keeping the model.
Training on augumented user 92492 2/50 current_auc = 0.6992753623188406
User 92492 AUC after training: 0.6992753623188406
User 92492 does not improve AUC. Reverting changes.
Training on augumented user 52771 3/50 current_auc = 0.6992753623188406
User 52771 AUC after training: 0.7000805152979066
User 52771 improves AUC. Keeping the model.
Training on augumented user 52146 4/50 current_auc = 0.7000805152979066
User 52146 AUC after training: 0.6976650563607085
User 52146 does not improve AUC. Reverting changes.
Training on augumented user 90077 5/50 current_auc = 0.7000805152979066
User 90077 AUC after training: 0.6976650563607085
User 90077 does not improve AUC. Reverting changes.
Training on augumented user 110183 6/50 current_auc = 0.7000805152979066
User 110183 AUC after training: 0.7000805152979066
User 110183 does not improve AUC. Reverting changes.
Training on augumented user 2310 7/50 current_auc = 0.7000805152979066
User 2310 AUC after training: 0.7000805152979066
User 2310 does not improve AUC. Reverting changes.
Training on augumented user 87945 8/50 current_auc = 0.7000805152979066
User 87945 AUC after training: 0.6984702093397746
User 87945 does not improve AUC. Reverting changes.
Training on augumented user 40928 9/50 current_auc = 0.7000805152979066
User 40928 AUC after training: 0.7000805152979066
User 40928 does not improve AUC. Reverting changes.
Training on augumented user 25627 10/50 current_auc = 0.7000805152979066
User 25627 AUC after training: 0.7008856682769726
User 25627 improves AUC. Keeping the model.
Training on augumented user 56698 11/50 current_auc = 0.7008856682769726
User 56698 AUC after training: 0.7016908212560387
User 56698 improves AUC. Keeping the model.
Training on augumented user 55485 12/50 current_auc = 0.7016908212560387
User 55485 AUC after training: 0.7016908212560387
User 55485 does not improve AUC. Reverting changes.
Training on augumented user 12998 13/50 current_auc = 0.7016908212560387
User 12998 AUC after training: 0.7000805152979066
User 12998 does not improve AUC. Reverting changes.
Training on augumented user 61238 14/50 current_auc = 0.7016908212560387
User 61238 AUC after training: 0.7016908212560387
User 61238 does not improve AUC. Reverting changes.
Training on augumented user 101742 15/50 current_auc = 0.7016908212560387
User 101742 AUC after training: 0.7008856682769726
User 101742 does not improve AUC. Reverting changes.
Training on augumented user 51608 16/50 current_auc = 0.7016908212560387
User 51608 AUC after training: 0.7000805152979066
User 51608 does not improve AUC. Reverting changes.
Training on augumented user 19147 17/50 current_auc = 0.7016908212560387
User 19147 AUC after training: 0.6984702093397746
User 19147 does not improve AUC. Reverting changes.
Training on augumented user 69936 18/50 current_auc = 0.7016908212560387
User 69936 AUC after training: 0.7008856682769726
User 69936 does not improve AUC. Reverting changes.
Training on augumented user 84106 19/50 current_auc = 0.7016908212560387
User 84106 AUC after training: 0.7016908212560387
User 84106 does not improve AUC. Reverting changes.
Training on augumented user 211 20/50 current_auc = 0.7016908212560387
User 211 AUC after training: 0.7008856682769726
User 211 does not improve AUC. Reverting changes.
Training on augumented user 64187 21/50 current_auc = 0.7016908212560387
User 64187 AUC after training: 0.7000805152979066
User 64187 does not improve AUC. Reverting changes.
Training on augumented user 130041 22/50 current_auc = 0.7016908212560387
User 130041 AUC after training: 0.7016908212560387
User 130041 does not improve AUC. Reverting changes.
Training on augumented user 102392 23/50 current_auc = 0.7016908212560387
User 102392 AUC after training: 0.7000805152979066
User 102392 does not improve AUC. Reverting changes.
Training on augumented user 103705 24/50 current_auc = 0.7016908212560387
User 103705 AUC after training: 0.7000805152979066
User 103705 does not improve AUC. Reverting changes.
Training on augumented user 70708 25/50 current_auc = 0.7016908212560387
User 70708 AUC after training: 0.7000805152979066
User 70708 does not improve AUC. Reverting changes.
Training on augumented user 100872 26/50 current_auc = 0.7016908212560387
User 100872 AUC after training: 0.7024959742351047
User 100872 improves AUC. Keeping the model.
Training on augumented user 53163 27/50 current_auc = 0.7024959742351047
User 53163 AUC after training: 0.7000805152979066
User 53163 does not improve AUC. Reverting changes.
Training on augumented user 70239 28/50 current_auc = 0.7024959742351047
User 70239 AUC after training: 0.7016908212560387
User 70239 does not improve AUC. Reverting changes.
Training on augumented user 12570 29/50 current_auc = 0.7024959742351047
User 12570 AUC after training: 0.6992753623188406
User 12570 does not improve AUC. Reverting changes.
Training on augumented user 42555 30/50 current_auc = 0.7024959742351047
User 42555 AUC after training: 0.7008856682769726
User 42555 does not improve AUC. Reverting changes.
Training on augumented user 42791 31/50 current_auc = 0.7024959742351047
User 42791 AUC after training: 0.7024959742351047
User 42791 does not improve AUC. Reverting changes.
Training on augumented user 124369 32/50 current_auc = 0.7024959742351047
User 124369 AUC after training: 0.7000805152979066
User 124369 does not improve AUC. Reverting changes.
Training on augumented user 106034 33/50 current_auc = 0.7024959742351047
User 106034 AUC after training: 0.7008856682769726
User 106034 does not improve AUC. Reverting changes.
Training on augumented user 87649 34/50 current_auc = 0.7024959742351047
User 87649 AUC after training: 0.7024959742351047
User 87649 does not improve AUC. Reverting changes.
Training on augumented user 64769 35/50 current_auc = 0.7024959742351047
User 64769 AUC after training: 0.7008856682769726
User 64769 does not improve AUC. Reverting changes.
Training on augumented user 53353 36/50 current_auc = 0.7024959742351047
User 53353 AUC after training: 0.6996779388083736
User 53353 does not improve AUC. Reverting changes.
Training on augumented user 50519 37/50 current_auc = 0.7024959742351047
User 50519 AUC after training: 0.7000805152979066
User 50519 does not improve AUC. Reverting changes.
Training on augumented user 103431 38/50 current_auc = 0.7024959742351047
User 103431 AUC after training: 0.7000805152979066
User 103431 does not improve AUC. Reverting changes.
Training on augumented user 3008 39/50 current_auc = 0.7024959742351047
User 3008 AUC after training: 0.7000805152979066
User 3008 does not improve AUC. Reverting changes.
Training on augumented user 106292 40/50 current_auc = 0.7024959742351047
User 106292 AUC after training: 0.7000805152979066
User 106292 does not improve AUC. Reverting changes.
Training on augumented user 88076 41/50 current_auc = 0.7024959742351047
User 88076 AUC after training: 0.7000805152979066
User 88076 does not improve AUC. Reverting changes.
Training on augumented user 122498 42/50 current_auc = 0.7024959742351047
User 122498 AUC after training: 0.6976650563607085
User 122498 does not improve AUC. Reverting changes.
Training on augumented user 60912 43/50 current_auc = 0.7024959742351047
User 60912 AUC after training: 0.7008856682769726
User 60912 does not improve AUC. Reverting changes.
Training on augumented user 75990 44/50 current_auc = 0.7024959742351047
User 75990 AUC after training: 0.6980676328502415
User 75990 does not improve AUC. Reverting changes.
Training on augumented user 12748 45/50 current_auc = 0.7024959742351047
User 12748 AUC after training: 0.7008856682769726
User 12748 does not improve AUC. Reverting changes.
Training on augumented user 3066 46/50 current_auc = 0.7024959742351047
User 3066 AUC after training: 0.7000805152979066
User 3066 does not improve AUC. Reverting changes.
Training on augumented user 121550 47/50 current_auc = 0.7024959742351047
User 121550 AUC after training: 0.7008856682769726
User 121550 does not improve AUC. Reverting changes.
Training on augumented user 77543 48/50 current_auc = 0.7024959742351047
User 77543 AUC after training: 0.7004830917874396
User 77543 does not improve AUC. Reverting changes.
Training on augumented user 11930 49/50 current_auc = 0.7024959742351047
User 11930 AUC after training: 0.7016908212560387
User 11930 does not improve AUC. Reverting changes.
[2024-12-02 18:15:32.355304] start test user 1810 67/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:15:32.796872] start test user 1810 67/568 recall augumented users by random, augumented_users = [16718, 118663, 6008, 88941, 13492, 90226, 35768, 132038, 34475, 47308, 74328, 126711, 100474, 90614, 20181, 87133, 108778, 112612, 50105, 8890, 60546, 57649, 123263, 38835, 74030, 105195, 37900, 1421, 95613, 54667, 114158, 73904, 11549, 64867, 65400, 85163, 40555, 96807, 121730, 116750, 132313, 28011, 75588, 11857, 105146, 118342, 137181, 117851, 61168, 71549]
[2024-12-02 18:15:32.811831] user = 1810 Cloud 67/568
[2024-12-02 18:15:32.858611] user = 1810 Local 67/568
[2024-12-02 18:15:32.928279] user = 1810 Local+ 67/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:15:35.841408] user = 1810 MPDA- 67/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6955717712914834
Training on augumented user 16718 0/50 current_auc = 0.6955717712914834
User 16718 AUC after training: 0.6948720511795281
User 16718 does not improve AUC. Reverting changes.
Training on augumented user 118663 1/50 current_auc = 0.6955717712914834
User 118663 AUC after training: 0.6950719712115154
User 118663 does not improve AUC. Reverting changes.
Training on augumented user 6008 2/50 current_auc = 0.6955717712914834
User 6008 AUC after training: 0.6956217512994801
User 6008 improves AUC. Keeping the model.
Training on augumented user 88941 3/50 current_auc = 0.6956217512994801
User 88941 AUC after training: 0.6950219912035185
User 88941 does not improve AUC. Reverting changes.
Training on augumented user 13492 4/50 current_auc = 0.6956217512994801
User 13492 AUC after training: 0.6956717313074771
User 13492 improves AUC. Keeping the model.
Training on augumented user 90226 5/50 current_auc = 0.6956717313074771
User 90226 AUC after training: 0.6957217113154739
User 90226 improves AUC. Keeping the model.
Training on augumented user 35768 6/50 current_auc = 0.6957217113154739
User 35768 AUC after training: 0.695546781287485
User 35768 does not improve AUC. Reverting changes.
Training on augumented user 132038 7/50 current_auc = 0.6957217113154739
User 132038 AUC after training: 0.696171531387445
User 132038 improves AUC. Keeping the model.
Training on augumented user 34475 8/50 current_auc = 0.696171531387445
User 34475 AUC after training: 0.6955467812874849
User 34475 does not improve AUC. Reverting changes.
Training on augumented user 47308 9/50 current_auc = 0.696171531387445
User 47308 AUC after training: 0.6951469412235105
User 47308 does not improve AUC. Reverting changes.
Training on augumented user 74328 10/50 current_auc = 0.696171531387445
User 74328 AUC after training: 0.6960715713714514
User 74328 does not improve AUC. Reverting changes.
Training on augumented user 126711 11/50 current_auc = 0.696171531387445
User 126711 AUC after training: 0.6958716513394643
User 126711 does not improve AUC. Reverting changes.
Training on augumented user 100474 12/50 current_auc = 0.696171531387445
User 100474 AUC after training: 0.6950219912035187
User 100474 does not improve AUC. Reverting changes.
Training on augumented user 90614 13/50 current_auc = 0.696171531387445
User 90614 AUC after training: 0.6952469012395042
User 90614 does not improve AUC. Reverting changes.
Training on augumented user 20181 14/50 current_auc = 0.696171531387445
User 20181 AUC after training: 0.6952219112355058
User 20181 does not improve AUC. Reverting changes.
Training on augumented user 87133 15/50 current_auc = 0.696171531387445
User 87133 AUC after training: 0.6957217113154739
User 87133 does not improve AUC. Reverting changes.
Training on augumented user 108778 16/50 current_auc = 0.696171531387445
User 108778 AUC after training: 0.6950219912035185
User 108778 does not improve AUC. Reverting changes.
Training on augumented user 112612 17/50 current_auc = 0.696171531387445
User 112612 AUC after training: 0.6949720111955218
User 112612 does not improve AUC. Reverting changes.
Training on augumented user 50105 18/50 current_auc = 0.696171531387445
User 50105 AUC after training: 0.694422231107557
User 50105 does not improve AUC. Reverting changes.
Training on augumented user 8890 19/50 current_auc = 0.696171531387445
User 8890 AUC after training: 0.6959716113554577
User 8890 does not improve AUC. Reverting changes.
Training on augumented user 60546 20/50 current_auc = 0.696171531387445
User 60546 AUC after training: 0.695671731307477
User 60546 does not improve AUC. Reverting changes.
Training on augumented user 57649 21/50 current_auc = 0.696171531387445
User 57649 AUC after training: 0.695921631347461
User 57649 does not improve AUC. Reverting changes.
Training on augumented user 123263 22/50 current_auc = 0.696171531387445
User 123263 AUC after training: 0.6954718112754898
User 123263 does not improve AUC. Reverting changes.
Training on augumented user 38835 23/50 current_auc = 0.696171531387445
User 38835 AUC after training: 0.6957217113154739
User 38835 does not improve AUC. Reverting changes.
Training on augumented user 74030 24/50 current_auc = 0.696171531387445
User 74030 AUC after training: 0.694722111155538
User 74030 does not improve AUC. Reverting changes.
Training on augumented user 105195 25/50 current_auc = 0.696171531387445
User 105195 AUC after training: 0.6959966013594563
User 105195 does not improve AUC. Reverting changes.
Training on augumented user 37900 26/50 current_auc = 0.696171531387445
User 37900 AUC after training: 0.6955217912834866
User 37900 does not improve AUC. Reverting changes.
Training on augumented user 1421 27/50 current_auc = 0.696171531387445
User 1421 AUC after training: 0.694672131147541
User 1421 does not improve AUC. Reverting changes.
Training on augumented user 95613 28/50 current_auc = 0.696171531387445
User 95613 AUC after training: 0.6939224310275889
User 95613 does not improve AUC. Reverting changes.
Training on augumented user 54667 29/50 current_auc = 0.696171531387445
User 54667 AUC after training: 0.6954218312674929
User 54667 does not improve AUC. Reverting changes.
Training on augumented user 114158 30/50 current_auc = 0.696171531387445
User 114158 AUC after training: 0.6952718912435026
User 114158 does not improve AUC. Reverting changes.
Training on augumented user 73904 31/50 current_auc = 0.696171531387445
User 73904 AUC after training: 0.6957716913234706
User 73904 does not improve AUC. Reverting changes.
Training on augumented user 11549 32/50 current_auc = 0.696171531387445
User 11549 AUC after training: 0.6951469412235105
User 11549 does not improve AUC. Reverting changes.
Training on augumented user 64867 33/50 current_auc = 0.696171531387445
User 64867 AUC after training: 0.6947720911635346
User 64867 does not improve AUC. Reverting changes.
Training on augumented user 65400 34/50 current_auc = 0.696171531387445
User 65400 AUC after training: 0.6965213914434225
User 65400 improves AUC. Keeping the model.
Training on augumented user 85163 35/50 current_auc = 0.6965213914434225
User 85163 AUC after training: 0.6967712914834066
User 85163 improves AUC. Keeping the model.
Training on augumented user 40555 36/50 current_auc = 0.6967712914834066
User 40555 AUC after training: 0.6962215113954418
User 40555 does not improve AUC. Reverting changes.
Training on augumented user 96807 37/50 current_auc = 0.6967712914834066
User 96807 AUC after training: 0.6966213514594164
User 96807 does not improve AUC. Reverting changes.
Training on augumented user 121730 38/50 current_auc = 0.6967712914834066
User 121730 AUC after training: 0.6967712914834066
User 121730 does not improve AUC. Reverting changes.
Training on augumented user 116750 39/50 current_auc = 0.6967712914834066
User 116750 AUC after training: 0.6963714514194324
User 116750 does not improve AUC. Reverting changes.
Training on augumented user 132313 40/50 current_auc = 0.6967712914834066
User 132313 AUC after training: 0.696171531387445
User 132313 does not improve AUC. Reverting changes.
Training on augumented user 28011 41/50 current_auc = 0.6967712914834066
User 28011 AUC after training: 0.6961215513794483
User 28011 does not improve AUC. Reverting changes.
Training on augumented user 75588 42/50 current_auc = 0.6967712914834066
User 75588 AUC after training: 0.6958966413434626
User 75588 does not improve AUC. Reverting changes.
Training on augumented user 11857 43/50 current_auc = 0.6967712914834066
User 11857 AUC after training: 0.6969212315073969
User 11857 improves AUC. Keeping the model.
Training on augumented user 105146 44/50 current_auc = 0.6969212315073969
User 105146 AUC after training: 0.6976709316273491
User 105146 improves AUC. Keeping the model.
Training on augumented user 118342 45/50 current_auc = 0.6976709316273491
User 118342 AUC after training: 0.6976209516193523
User 118342 does not improve AUC. Reverting changes.
Training on augumented user 137181 46/50 current_auc = 0.6976709316273491
User 137181 AUC after training: 0.6967712914834066
User 137181 does not improve AUC. Reverting changes.
Training on augumented user 117851 47/50 current_auc = 0.6976709316273491
User 117851 AUC after training: 0.6958216713314674
User 117851 does not improve AUC. Reverting changes.
Training on augumented user 61168 48/50 current_auc = 0.6976709316273491
User 61168 AUC after training: 0.6966213514594162
User 61168 does not improve AUC. Reverting changes.
Training on augumented user 71549 49/50 current_auc = 0.6976709316273491
User 71549 AUC after training: 0.697421031587365
User 71549 does not improve AUC. Reverting changes.
[2024-12-02 18:16:08.476161] start test user 1825 68/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:16:08.939846] start test user 1825 68/568 recall augumented users by random, augumented_users = [7038, 107053, 26743, 124512, 93595, 32780, 78137, 65966, 70403, 69067, 81104, 109822, 128392, 128219, 120139, 7672, 23973, 69656, 135339, 85706, 45262, 134452, 34418, 101610, 26035, 40668, 76151, 112134, 95024, 62961, 83889, 71388, 84310, 31969, 10361, 26652, 117941, 128379, 9038, 54182, 66700, 6980, 68257, 77912, 9006, 62990, 123750, 10641, 37921, 57393]
[2024-12-02 18:16:08.954352] user = 1825 Cloud 68/568
[2024-12-02 18:16:08.975487] user = 1825 Local 68/568
[2024-12-02 18:16:09.153820] user = 1825 Local+ 68/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:16:11.950097] user = 1825 MPDA- 68/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6767836257309943
Training on augumented user 7038 0/50 current_auc = 0.6767836257309943
User 7038 AUC after training: 0.675672514619883
User 7038 does not improve AUC. Reverting changes.
Training on augumented user 107053 1/50 current_auc = 0.6767836257309943
User 107053 AUC after training: 0.676608187134503
User 107053 does not improve AUC. Reverting changes.
Training on augumented user 26743 2/50 current_auc = 0.6767836257309943
User 26743 AUC after training: 0.6769005847953217
User 26743 improves AUC. Keeping the model.
Training on augumented user 124512 3/50 current_auc = 0.6769005847953217
User 124512 AUC after training: 0.6754970760233918
User 124512 does not improve AUC. Reverting changes.
Training on augumented user 93595 4/50 current_auc = 0.6769005847953217
User 93595 AUC after training: 0.6765497076023391
User 93595 does not improve AUC. Reverting changes.
Training on augumented user 32780 5/50 current_auc = 0.6769005847953217
User 32780 AUC after training: 0.6782456140350877
User 32780 improves AUC. Keeping the model.
Training on augumented user 78137 6/50 current_auc = 0.6782456140350877
User 78137 AUC after training: 0.6764912280701755
User 78137 does not improve AUC. Reverting changes.
Training on augumented user 65966 7/50 current_auc = 0.6782456140350877
User 65966 AUC after training: 0.6784795321637426
User 65966 improves AUC. Keeping the model.
Training on augumented user 70403 8/50 current_auc = 0.6784795321637426
User 70403 AUC after training: 0.6789473684210526
User 70403 improves AUC. Keeping the model.
Training on augumented user 69067 9/50 current_auc = 0.6789473684210526
User 69067 AUC after training: 0.6791812865497076
User 69067 improves AUC. Keeping the model.
Training on augumented user 81104 10/50 current_auc = 0.6791812865497076
User 81104 AUC after training: 0.6794152046783625
User 81104 improves AUC. Keeping the model.
Training on augumented user 109822 11/50 current_auc = 0.6794152046783625
User 109822 AUC after training: 0.6784795321637427
User 109822 does not improve AUC. Reverting changes.
Training on augumented user 128392 12/50 current_auc = 0.6794152046783625
User 128392 AUC after training: 0.6799999999999999
User 128392 improves AUC. Keeping the model.
Training on augumented user 128219 13/50 current_auc = 0.6799999999999999
User 128219 AUC after training: 0.67953216374269
User 128219 does not improve AUC. Reverting changes.
Training on augumented user 120139 14/50 current_auc = 0.6799999999999999
User 120139 AUC after training: 0.6796491228070174
User 120139 does not improve AUC. Reverting changes.
Training on augumented user 7672 15/50 current_auc = 0.6799999999999999
User 7672 AUC after training: 0.6798830409356725
User 7672 does not improve AUC. Reverting changes.
Training on augumented user 23973 16/50 current_auc = 0.6799999999999999
User 23973 AUC after training: 0.6803508771929824
User 23973 improves AUC. Keeping the model.
Training on augumented user 69656 17/50 current_auc = 0.6803508771929824
User 69656 AUC after training: 0.6809356725146198
User 69656 improves AUC. Keeping the model.
Training on augumented user 135339 18/50 current_auc = 0.6809356725146198
User 135339 AUC after training: 0.6809356725146198
User 135339 does not improve AUC. Reverting changes.
Training on augumented user 85706 19/50 current_auc = 0.6809356725146198
User 85706 AUC after training: 0.6810526315789474
User 85706 improves AUC. Keeping the model.
Training on augumented user 45262 20/50 current_auc = 0.6810526315789474
User 45262 AUC after training: 0.6808187134502923
User 45262 does not improve AUC. Reverting changes.
Training on augumented user 134452 21/50 current_auc = 0.6810526315789474
User 134452 AUC after training: 0.6792982456140351
User 134452 does not improve AUC. Reverting changes.
Training on augumented user 34418 22/50 current_auc = 0.6810526315789474
User 34418 AUC after training: 0.6807017543859649
User 34418 does not improve AUC. Reverting changes.
Training on augumented user 101610 23/50 current_auc = 0.6810526315789474
User 101610 AUC after training: 0.6808187134502924
User 101610 does not improve AUC. Reverting changes.
Training on augumented user 26035 24/50 current_auc = 0.6810526315789474
User 26035 AUC after training: 0.6807017543859649
User 26035 does not improve AUC. Reverting changes.
Training on augumented user 40668 25/50 current_auc = 0.6810526315789474
User 40668 AUC after training: 0.6804678362573099
User 40668 does not improve AUC. Reverting changes.
Training on augumented user 76151 26/50 current_auc = 0.6810526315789474
User 76151 AUC after training: 0.6810526315789474
User 76151 does not improve AUC. Reverting changes.
Training on augumented user 112134 27/50 current_auc = 0.6810526315789474
User 112134 AUC after training: 0.6811695906432749
User 112134 improves AUC. Keeping the model.
Training on augumented user 95024 28/50 current_auc = 0.6811695906432749
User 95024 AUC after training: 0.6811695906432749
User 95024 does not improve AUC. Reverting changes.
Training on augumented user 62961 29/50 current_auc = 0.6811695906432749
User 62961 AUC after training: 0.6791228070175439
User 62961 does not improve AUC. Reverting changes.
Training on augumented user 83889 30/50 current_auc = 0.6811695906432749
User 83889 AUC after training: 0.6804678362573099
User 83889 does not improve AUC. Reverting changes.
Training on augumented user 71388 31/50 current_auc = 0.6811695906432749
User 71388 AUC after training: 0.6811695906432748
User 71388 does not improve AUC. Reverting changes.
Training on augumented user 84310 32/50 current_auc = 0.6811695906432749
User 84310 AUC after training: 0.6810526315789472
User 84310 does not improve AUC. Reverting changes.
Training on augumented user 31969 33/50 current_auc = 0.6811695906432749
User 31969 AUC after training: 0.6808187134502924
User 31969 does not improve AUC. Reverting changes.
Training on augumented user 10361 34/50 current_auc = 0.6811695906432749
User 10361 AUC after training: 0.68093567251462
User 10361 does not improve AUC. Reverting changes.
Training on augumented user 26652 35/50 current_auc = 0.6811695906432749
User 26652 AUC after training: 0.6810526315789474
User 26652 does not improve AUC. Reverting changes.
Training on augumented user 117941 36/50 current_auc = 0.6811695906432749
User 117941 AUC after training: 0.6808187134502924
User 117941 does not improve AUC. Reverting changes.
Training on augumented user 128379 37/50 current_auc = 0.6811695906432749
User 128379 AUC after training: 0.6810526315789475
User 128379 does not improve AUC. Reverting changes.
Training on augumented user 9038 38/50 current_auc = 0.6811695906432749
User 9038 AUC after training: 0.6809356725146198
User 9038 does not improve AUC. Reverting changes.
Training on augumented user 54182 39/50 current_auc = 0.6811695906432749
User 54182 AUC after training: 0.6808771929824561
User 54182 does not improve AUC. Reverting changes.
Training on augumented user 66700 40/50 current_auc = 0.6811695906432749
User 66700 AUC after training: 0.6810526315789474
User 66700 does not improve AUC. Reverting changes.
Training on augumented user 6980 41/50 current_auc = 0.6811695906432749
User 6980 AUC after training: 0.6807017543859648
User 6980 does not improve AUC. Reverting changes.
Training on augumented user 68257 42/50 current_auc = 0.6811695906432749
User 68257 AUC after training: 0.6802339181286551
User 68257 does not improve AUC. Reverting changes.
Training on augumented user 77912 43/50 current_auc = 0.6811695906432749
User 77912 AUC after training: 0.6809941520467836
User 77912 does not improve AUC. Reverting changes.
Training on augumented user 9006 44/50 current_auc = 0.6811695906432749
User 9006 AUC after training: 0.68093567251462
User 9006 does not improve AUC. Reverting changes.
Training on augumented user 62990 45/50 current_auc = 0.6811695906432749
User 62990 AUC after training: 0.6809356725146197
User 62990 does not improve AUC. Reverting changes.
Training on augumented user 123750 46/50 current_auc = 0.6811695906432749
User 123750 AUC after training: 0.6792982456140351
User 123750 does not improve AUC. Reverting changes.
Training on augumented user 10641 47/50 current_auc = 0.6811695906432749
User 10641 AUC after training: 0.6817543859649122
User 10641 improves AUC. Keeping the model.
Training on augumented user 37921 48/50 current_auc = 0.6817543859649122
User 37921 AUC after training: 0.6821052631578947
User 37921 improves AUC. Keeping the model.
Training on augumented user 57393 49/50 current_auc = 0.6821052631578947
User 57393 AUC after training: 0.6817543859649122
User 57393 does not improve AUC. Reverting changes.
[2024-12-02 18:16:42.756899] start test user 1837 69/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:16:43.382251] start test user 1837 69/568 recall augumented users by random, augumented_users = [50514, 133048, 49137, 77710, 39779, 42532, 62583, 125365, 70639, 40110, 75833, 130798, 49142, 32070, 136732, 112392, 90329, 136670, 90332, 21866, 67746, 49537, 68646, 76748, 7202, 67121, 63207, 60058, 25985, 112715, 25679, 100722, 24006, 11936, 5311, 62623, 21874, 3709, 114700, 24110, 91002, 5220, 1472, 131824, 129893, 11716, 113177, 82132, 25737, 127658]
[2024-12-02 18:16:43.398717] user = 1837 Cloud 69/568
[2024-12-02 18:16:43.423144] user = 1837 Local 69/568
[2024-12-02 18:16:43.527658] user = 1837 Local+ 69/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:16:45.993066] user = 1837 MPDA- 69/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6226164079822618
Training on augumented user 50514 0/50 current_auc = 0.6226164079822618
User 50514 AUC after training: 0.6224685883222469
User 50514 does not improve AUC. Reverting changes.
Training on augumented user 133048 1/50 current_auc = 0.6226164079822618
User 133048 AUC after training: 0.620990391722099
User 133048 does not improve AUC. Reverting changes.
Training on augumented user 49137 2/50 current_auc = 0.6226164079822618
User 49137 AUC after training: 0.6224685883222468
User 49137 does not improve AUC. Reverting changes.
Training on augumented user 77710 3/50 current_auc = 0.6226164079822618
User 77710 AUC after training: 0.6227642276422765
User 77710 improves AUC. Keeping the model.
Training on augumented user 39779 4/50 current_auc = 0.6227642276422765
User 39779 AUC after training: 0.6223207686622321
User 39779 does not improve AUC. Reverting changes.
Training on augumented user 42532 5/50 current_auc = 0.6227642276422765
User 42532 AUC after training: 0.6226164079822617
User 42532 does not improve AUC. Reverting changes.
Training on augumented user 62583 6/50 current_auc = 0.6227642276422765
User 62583 AUC after training: 0.6223207686622321
User 62583 does not improve AUC. Reverting changes.
Training on augumented user 125365 7/50 current_auc = 0.6227642276422765
User 125365 AUC after training: 0.6232076866223208
User 125365 improves AUC. Keeping the model.
Training on augumented user 70639 8/50 current_auc = 0.6232076866223208
User 70639 AUC after training: 0.6227642276422765
User 70639 does not improve AUC. Reverting changes.
Training on augumented user 40110 9/50 current_auc = 0.6232076866223208
User 40110 AUC after training: 0.6235033259423504
User 40110 improves AUC. Keeping the model.
Training on augumented user 75833 10/50 current_auc = 0.6235033259423504
User 75833 AUC after training: 0.6232076866223207
User 75833 does not improve AUC. Reverting changes.
Training on augumented user 130798 11/50 current_auc = 0.6235033259423504
User 130798 AUC after training: 0.6233555062823356
User 130798 does not improve AUC. Reverting changes.
Training on augumented user 49142 12/50 current_auc = 0.6235033259423504
User 49142 AUC after training: 0.6235033259423504
User 49142 does not improve AUC. Reverting changes.
Training on augumented user 32070 13/50 current_auc = 0.6235033259423504
User 32070 AUC after training: 0.6226164079822617
User 32070 does not improve AUC. Reverting changes.
Training on augumented user 136732 14/50 current_auc = 0.6235033259423504
User 136732 AUC after training: 0.6235033259423504
User 136732 does not improve AUC. Reverting changes.
Training on augumented user 112392 15/50 current_auc = 0.6235033259423504
User 112392 AUC after training: 0.621729490022173
User 112392 does not improve AUC. Reverting changes.
Training on augumented user 90329 16/50 current_auc = 0.6235033259423504
User 90329 AUC after training: 0.6239467849223947
User 90329 improves AUC. Keeping the model.
Training on augumented user 136670 17/50 current_auc = 0.6239467849223947
User 136670 AUC after training: 0.6233555062823355
User 136670 does not improve AUC. Reverting changes.
Training on augumented user 90332 18/50 current_auc = 0.6239467849223947
User 90332 AUC after training: 0.6229120473022912
User 90332 does not improve AUC. Reverting changes.
Training on augumented user 21866 19/50 current_auc = 0.6239467849223947
User 21866 AUC after training: 0.6226164079822617
User 21866 does not improve AUC. Reverting changes.
Training on augumented user 67746 20/50 current_auc = 0.6239467849223947
User 67746 AUC after training: 0.6227642276422765
User 67746 does not improve AUC. Reverting changes.
Training on augumented user 49537 21/50 current_auc = 0.6239467849223947
User 49537 AUC after training: 0.6236511456023651
User 49537 does not improve AUC. Reverting changes.
Training on augumented user 68646 22/50 current_auc = 0.6239467849223947
User 68646 AUC after training: 0.6229120473022912
User 68646 does not improve AUC. Reverting changes.
Training on augumented user 76748 23/50 current_auc = 0.6239467849223947
User 76748 AUC after training: 0.6236511456023651
User 76748 does not improve AUC. Reverting changes.
Training on augumented user 7202 24/50 current_auc = 0.6239467849223947
User 7202 AUC after training: 0.6229120473022912
User 7202 does not improve AUC. Reverting changes.
Training on augumented user 67121 25/50 current_auc = 0.6239467849223947
User 67121 AUC after training: 0.623059866962306
User 67121 does not improve AUC. Reverting changes.
Training on augumented user 63207 26/50 current_auc = 0.6239467849223947
User 63207 AUC after training: 0.6232076866223208
User 63207 does not improve AUC. Reverting changes.
Training on augumented user 60058 27/50 current_auc = 0.6239467849223947
User 60058 AUC after training: 0.6229120473022912
User 60058 does not improve AUC. Reverting changes.
Training on augumented user 25985 28/50 current_auc = 0.6239467849223947
User 25985 AUC after training: 0.6235033259423504
User 25985 does not improve AUC. Reverting changes.
Training on augumented user 112715 29/50 current_auc = 0.6239467849223947
User 112715 AUC after training: 0.6236511456023651
User 112715 does not improve AUC. Reverting changes.
Training on augumented user 25679 30/50 current_auc = 0.6239467849223947
User 25679 AUC after training: 0.6233555062823356
User 25679 does not improve AUC. Reverting changes.
Training on augumented user 100722 31/50 current_auc = 0.6239467849223947
User 100722 AUC after training: 0.6224685883222468
User 100722 does not improve AUC. Reverting changes.
Training on augumented user 24006 32/50 current_auc = 0.6239467849223947
User 24006 AUC after training: 0.6242424242424243
User 24006 improves AUC. Keeping the model.
Training on augumented user 11936 33/50 current_auc = 0.6242424242424243
User 11936 AUC after training: 0.6237989652623799
User 11936 does not improve AUC. Reverting changes.
Training on augumented user 5311 34/50 current_auc = 0.6242424242424243
User 5311 AUC after training: 0.6240946045824095
User 5311 does not improve AUC. Reverting changes.
Training on augumented user 62623 35/50 current_auc = 0.6242424242424243
User 62623 AUC after training: 0.6233555062823355
User 62623 does not improve AUC. Reverting changes.
Training on augumented user 21874 36/50 current_auc = 0.6242424242424243
User 21874 AUC after training: 0.6235033259423504
User 21874 does not improve AUC. Reverting changes.
Training on augumented user 3709 37/50 current_auc = 0.6242424242424243
User 3709 AUC after training: 0.6239467849223947
User 3709 does not improve AUC. Reverting changes.
Training on augumented user 114700 38/50 current_auc = 0.6242424242424243
User 114700 AUC after training: 0.6243902439024391
User 114700 improves AUC. Keeping the model.
Training on augumented user 24110 39/50 current_auc = 0.6243902439024391
User 24110 AUC after training: 0.62379896526238
User 24110 does not improve AUC. Reverting changes.
Training on augumented user 91002 40/50 current_auc = 0.6243902439024391
User 91002 AUC after training: 0.6239467849223947
User 91002 does not improve AUC. Reverting changes.
Training on augumented user 5220 41/50 current_auc = 0.6243902439024391
User 5220 AUC after training: 0.6245380635624538
User 5220 improves AUC. Keeping the model.
Training on augumented user 1472 42/50 current_auc = 0.6245380635624538
User 1472 AUC after training: 0.6246858832224687
User 1472 improves AUC. Keeping the model.
Training on augumented user 131824 43/50 current_auc = 0.6246858832224687
User 131824 AUC after training: 0.624390243902439
User 131824 does not improve AUC. Reverting changes.
Training on augumented user 129893 44/50 current_auc = 0.6246858832224687
User 129893 AUC after training: 0.6248337028824834
User 129893 improves AUC. Keeping the model.
Training on augumented user 11716 45/50 current_auc = 0.6248337028824834
User 11716 AUC after training: 0.6240946045824094
User 11716 does not improve AUC. Reverting changes.
Training on augumented user 113177 46/50 current_auc = 0.6248337028824834
User 113177 AUC after training: 0.6252771618625277
User 113177 improves AUC. Keeping the model.
Training on augumented user 82132 47/50 current_auc = 0.6252771618625277
User 82132 AUC after training: 0.6243902439024391
User 82132 does not improve AUC. Reverting changes.
Training on augumented user 25737 48/50 current_auc = 0.6252771618625277
User 25737 AUC after training: 0.624390243902439
User 25737 does not improve AUC. Reverting changes.
Training on augumented user 127658 49/50 current_auc = 0.6252771618625277
User 127658 AUC after training: 0.6252771618625277
User 127658 does not improve AUC. Reverting changes.
[2024-12-02 18:17:17.788484] start test user 1849 70/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:17:18.614170] start test user 1849 70/568 recall augumented users by random, augumented_users = [86063, 69982, 135868, 39772, 56163, 106376, 90339, 99108, 77657, 132749, 131867, 771, 51691, 5970, 115020, 88676, 1885, 135573, 97576, 9879, 105312, 106151, 117497, 47574, 48362, 128759, 56808, 17545, 128931, 125879, 11369, 114503, 69590, 123495, 71546, 90965, 115620, 124205, 70075, 43834, 73879, 104777, 50475, 10296, 120920, 45673, 31927, 18554, 19027, 39002]
[2024-12-02 18:17:18.642998] user = 1849 Cloud 70/568
[2024-12-02 18:17:18.653427] user = 1849 Local 70/568
[2024-12-02 18:17:18.945131] user = 1849 Local+ 70/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:17:21.330993] user = 1849 MPDA- 70/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8763736263736264
Training on augumented user 86063 0/50 current_auc = 0.8763736263736264
User 86063 AUC after training: 0.8763736263736264
User 86063 does not improve AUC. Reverting changes.
Training on augumented user 69982 1/50 current_auc = 0.8763736263736264
User 69982 AUC after training: 0.8736263736263736
User 69982 does not improve AUC. Reverting changes.
Training on augumented user 135868 2/50 current_auc = 0.8763736263736264
User 135868 AUC after training: 0.8763736263736264
User 135868 does not improve AUC. Reverting changes.
Training on augumented user 39772 3/50 current_auc = 0.8763736263736264
User 39772 AUC after training: 0.8763736263736264
User 39772 does not improve AUC. Reverting changes.
Training on augumented user 56163 4/50 current_auc = 0.8763736263736264
User 56163 AUC after training: 0.8763736263736264
User 56163 does not improve AUC. Reverting changes.
Training on augumented user 106376 5/50 current_auc = 0.8763736263736264
User 106376 AUC after training: 0.8763736263736264
User 106376 does not improve AUC. Reverting changes.
Training on augumented user 90339 6/50 current_auc = 0.8763736263736264
User 90339 AUC after training: 0.8763736263736264
User 90339 does not improve AUC. Reverting changes.
Training on augumented user 99108 7/50 current_auc = 0.8763736263736264
User 99108 AUC after training: 0.8763736263736264
User 99108 does not improve AUC. Reverting changes.
Training on augumented user 77657 8/50 current_auc = 0.8763736263736264
User 77657 AUC after training: 0.8791208791208791
User 77657 improves AUC. Keeping the model.
Training on augumented user 132749 9/50 current_auc = 0.8791208791208791
User 132749 AUC after training: 0.8763736263736264
User 132749 does not improve AUC. Reverting changes.
Training on augumented user 131867 10/50 current_auc = 0.8791208791208791
User 131867 AUC after training: 0.8791208791208791
User 131867 does not improve AUC. Reverting changes.
Training on augumented user 771 11/50 current_auc = 0.8791208791208791
User 771 AUC after training: 0.8763736263736264
User 771 does not improve AUC. Reverting changes.
Training on augumented user 51691 12/50 current_auc = 0.8791208791208791
User 51691 AUC after training: 0.8818681318681318
User 51691 improves AUC. Keeping the model.
Training on augumented user 5970 13/50 current_auc = 0.8818681318681318
User 5970 AUC after training: 0.8818681318681318
User 5970 does not improve AUC. Reverting changes.
Training on augumented user 115020 14/50 current_auc = 0.8818681318681318
User 115020 AUC after training: 0.8818681318681318
User 115020 does not improve AUC. Reverting changes.
Training on augumented user 88676 15/50 current_auc = 0.8818681318681318
User 88676 AUC after training: 0.8736263736263736
User 88676 does not improve AUC. Reverting changes.
Training on augumented user 1885 16/50 current_auc = 0.8818681318681318
User 1885 AUC after training: 0.8791208791208791
User 1885 does not improve AUC. Reverting changes.
Training on augumented user 135573 17/50 current_auc = 0.8818681318681318
User 135573 AUC after training: 0.8818681318681318
User 135573 does not improve AUC. Reverting changes.
Training on augumented user 97576 18/50 current_auc = 0.8818681318681318
User 97576 AUC after training: 0.8763736263736264
User 97576 does not improve AUC. Reverting changes.
Training on augumented user 9879 19/50 current_auc = 0.8818681318681318
User 9879 AUC after training: 0.8736263736263736
User 9879 does not improve AUC. Reverting changes.
Training on augumented user 105312 20/50 current_auc = 0.8818681318681318
User 105312 AUC after training: 0.8791208791208791
User 105312 does not improve AUC. Reverting changes.
Training on augumented user 106151 21/50 current_auc = 0.8818681318681318
User 106151 AUC after training: 0.8791208791208791
User 106151 does not improve AUC. Reverting changes.
Training on augumented user 117497 22/50 current_auc = 0.8818681318681318
User 117497 AUC after training: 0.8818681318681318
User 117497 does not improve AUC. Reverting changes.
Training on augumented user 47574 23/50 current_auc = 0.8818681318681318
User 47574 AUC after training: 0.8818681318681318
User 47574 does not improve AUC. Reverting changes.
Training on augumented user 48362 24/50 current_auc = 0.8818681318681318
User 48362 AUC after training: 0.8763736263736264
User 48362 does not improve AUC. Reverting changes.
Training on augumented user 128759 25/50 current_auc = 0.8818681318681318
User 128759 AUC after training: 0.8791208791208791
User 128759 does not improve AUC. Reverting changes.
Training on augumented user 56808 26/50 current_auc = 0.8818681318681318
User 56808 AUC after training: 0.8791208791208791
User 56808 does not improve AUC. Reverting changes.
Training on augumented user 17545 27/50 current_auc = 0.8818681318681318
User 17545 AUC after training: 0.8763736263736264
User 17545 does not improve AUC. Reverting changes.
Training on augumented user 128931 28/50 current_auc = 0.8818681318681318
User 128931 AUC after training: 0.8736263736263736
User 128931 does not improve AUC. Reverting changes.
Training on augumented user 125879 29/50 current_auc = 0.8818681318681318
User 125879 AUC after training: 0.8818681318681318
User 125879 does not improve AUC. Reverting changes.
Training on augumented user 11369 30/50 current_auc = 0.8818681318681318
User 11369 AUC after training: 0.8791208791208791
User 11369 does not improve AUC. Reverting changes.
Training on augumented user 114503 31/50 current_auc = 0.8818681318681318
User 114503 AUC after training: 0.8791208791208791
User 114503 does not improve AUC. Reverting changes.
Training on augumented user 69590 32/50 current_auc = 0.8818681318681318
User 69590 AUC after training: 0.8791208791208791
User 69590 does not improve AUC. Reverting changes.
Training on augumented user 123495 33/50 current_auc = 0.8818681318681318
User 123495 AUC after training: 0.8818681318681318
User 123495 does not improve AUC. Reverting changes.
Training on augumented user 71546 34/50 current_auc = 0.8818681318681318
User 71546 AUC after training: 0.8791208791208791
User 71546 does not improve AUC. Reverting changes.
Training on augumented user 90965 35/50 current_auc = 0.8818681318681318
User 90965 AUC after training: 0.8791208791208791
User 90965 does not improve AUC. Reverting changes.
Training on augumented user 115620 36/50 current_auc = 0.8818681318681318
User 115620 AUC after training: 0.8763736263736264
User 115620 does not improve AUC. Reverting changes.
Training on augumented user 124205 37/50 current_auc = 0.8818681318681318
User 124205 AUC after training: 0.8846153846153846
User 124205 improves AUC. Keeping the model.
Training on augumented user 70075 38/50 current_auc = 0.8846153846153846
User 70075 AUC after training: 0.8846153846153846
User 70075 does not improve AUC. Reverting changes.
Training on augumented user 43834 39/50 current_auc = 0.8846153846153846
User 43834 AUC after training: 0.8846153846153846
User 43834 does not improve AUC. Reverting changes.
Training on augumented user 73879 40/50 current_auc = 0.8846153846153846
User 73879 AUC after training: 0.8846153846153846
User 73879 does not improve AUC. Reverting changes.
Training on augumented user 104777 41/50 current_auc = 0.8846153846153846
User 104777 AUC after training: 0.8818681318681318
User 104777 does not improve AUC. Reverting changes.
Training on augumented user 50475 42/50 current_auc = 0.8846153846153846
User 50475 AUC after training: 0.8818681318681318
User 50475 does not improve AUC. Reverting changes.
Training on augumented user 10296 43/50 current_auc = 0.8846153846153846
User 10296 AUC after training: 0.8846153846153846
User 10296 does not improve AUC. Reverting changes.
Training on augumented user 120920 44/50 current_auc = 0.8846153846153846
User 120920 AUC after training: 0.8846153846153846
User 120920 does not improve AUC. Reverting changes.
Training on augumented user 45673 45/50 current_auc = 0.8846153846153846
User 45673 AUC after training: 0.8846153846153846
User 45673 does not improve AUC. Reverting changes.
Training on augumented user 31927 46/50 current_auc = 0.8846153846153846
User 31927 AUC after training: 0.8846153846153846
User 31927 does not improve AUC. Reverting changes.
Training on augumented user 18554 47/50 current_auc = 0.8846153846153846
User 18554 AUC after training: 0.8846153846153846
User 18554 does not improve AUC. Reverting changes.
Training on augumented user 19027 48/50 current_auc = 0.8846153846153846
User 19027 AUC after training: 0.8818681318681318
User 19027 does not improve AUC. Reverting changes.
Training on augumented user 39002 49/50 current_auc = 0.8846153846153846
User 39002 AUC after training: 0.8818681318681318
User 39002 does not improve AUC. Reverting changes.
[2024-12-02 18:17:48.013821] start test user 1887 71/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:17:48.706378] start test user 1887 71/568 recall augumented users by random, augumented_users = [111064, 21151, 36968, 2987, 12629, 105848, 32600, 68030, 14490, 60238, 137078, 21963, 118388, 64383, 35475, 70295, 131915, 137383, 70997, 86367, 21848, 43180, 113596, 92740, 70873, 37715, 85727, 118711, 112378, 48337, 764, 42974, 24346, 64637, 52062, 4391, 30796, 100972, 88845, 44092, 124883, 80044, 16888, 43852, 71279, 91992, 106438, 14058, 12480, 17016]
[2024-12-02 18:17:48.729242] user = 1887 Cloud 71/568
[2024-12-02 18:17:48.809868] user = 1887 Local 71/568
[2024-12-02 18:17:48.987729] user = 1887 Local+ 71/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:17:51.602352] user = 1887 MPDA- 71/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7520420511269097
Training on augumented user 111064 0/50 current_auc = 0.7520420511269097
User 111064 AUC after training: 0.7521428931578682
User 111064 improves AUC. Keeping the model.
Training on augumented user 21151 1/50 current_auc = 0.7521428931578682
User 21151 AUC after training: 0.7520231432461049
User 21151 does not improve AUC. Reverting changes.
Training on augumented user 36968 2/50 current_auc = 0.7521428931578682
User 36968 AUC after training: 0.7521996168002822
User 36968 improves AUC. Keeping the model.
Training on augumented user 2987 3/50 current_auc = 0.7521996168002822
User 2987 AUC after training: 0.7519853274844954
User 2987 does not improve AUC. Reverting changes.
Training on augumented user 12629 4/50 current_auc = 0.7521996168002822
User 12629 AUC after training: 0.7511911964906972
User 12629 does not improve AUC. Reverting changes.
Training on augumented user 105848 5/50 current_auc = 0.7521996168002822
User 105848 AUC after training: 0.7522059194272172
User 105848 improves AUC. Keeping the model.
Training on augumented user 32600 6/50 current_auc = 0.7522059194272172
User 32600 AUC after training: 0.7519223012151466
User 32600 does not improve AUC. Reverting changes.
Training on augumented user 68030 7/50 current_auc = 0.7522059194272172
User 68030 AUC after training: 0.752155498411738
User 68030 does not improve AUC. Reverting changes.
Training on augumented user 14490 8/50 current_auc = 0.7522059194272172
User 14490 AUC after training: 0.7521744062925427
User 14490 does not improve AUC. Reverting changes.
Training on augumented user 60238 9/50 current_auc = 0.7522059194272172
User 60238 AUC after training: 0.7524013008621993
User 60238 improves AUC. Keeping the model.
Training on augumented user 137078 10/50 current_auc = 0.7524013008621993
User 137078 AUC after training: 0.7524454192507438
User 137078 improves AUC. Keeping the model.
Training on augumented user 21963 11/50 current_auc = 0.7524454192507438
User 21963 AUC after training: 0.7527857611052287
User 21963 improves AUC. Keeping the model.
Training on augumented user 118388 12/50 current_auc = 0.7527857611052287
User 118388 AUC after training: 0.7520735642615842
User 118388 does not improve AUC. Reverting changes.
Training on augumented user 64383 13/50 current_auc = 0.7527857611052287
User 64383 AUC after training: 0.7521365905309333
User 64383 does not improve AUC. Reverting changes.
Training on augumented user 35475 14/50 current_auc = 0.7527857611052287
User 35475 AUC after training: 0.7523949982352645
User 35475 does not improve AUC. Reverting changes.
Training on augumented user 70295 15/50 current_auc = 0.7527857611052287
User 70295 AUC after training: 0.752495840266223
User 70295 does not improve AUC. Reverting changes.
Training on augumented user 131915 16/50 current_auc = 0.7527857611052287
User 131915 AUC after training: 0.7525273534008974
User 131915 does not improve AUC. Reverting changes.
Training on augumented user 137383 17/50 current_auc = 0.7527857611052287
User 137383 AUC after training: 0.7526092875510513
User 137383 does not improve AUC. Reverting changes.
Training on augumented user 70997 18/50 current_auc = 0.7527857611052287
User 70997 AUC after training: 0.7525525639086372
User 70997 does not improve AUC. Reverting changes.
Training on augumented user 86367 19/50 current_auc = 0.7527857611052287
User 86367 AUC after training: 0.7518466696919276
User 86367 does not improve AUC. Reverting changes.
Training on augumented user 21848 20/50 current_auc = 0.7527857611052287
User 21848 AUC after training: 0.752552563908637
User 21848 does not improve AUC. Reverting changes.
Training on augumented user 43180 21/50 current_auc = 0.7527857611052287
User 43180 AUC after training: 0.7502710129582009
User 43180 does not improve AUC. Reverting changes.
Training on augumented user 113596 22/50 current_auc = 0.7527857611052287
User 113596 AUC after training: 0.7524013008621995
User 113596 does not improve AUC. Reverting changes.
Training on augumented user 92740 23/50 current_auc = 0.7527857611052287
User 92740 AUC after training: 0.7521933141733474
User 92740 does not improve AUC. Reverting changes.
Training on augumented user 70873 24/50 current_auc = 0.7527857611052287
User 70873 AUC after training: 0.7525714717894418
User 70873 does not improve AUC. Reverting changes.
Training on augumented user 37715 25/50 current_auc = 0.7527857611052287
User 37715 AUC after training: 0.7525840770433117
User 37715 does not improve AUC. Reverting changes.
Training on augumented user 85727 26/50 current_auc = 0.7527857611052287
User 85727 AUC after training: 0.752294156204306
User 85727 does not improve AUC. Reverting changes.
Training on augumented user 118711 27/50 current_auc = 0.7527857611052287
User 118711 AUC after training: 0.7523382745928502
User 118711 does not improve AUC. Reverting changes.
Training on augumented user 112378 28/50 current_auc = 0.7527857611052287
User 112378 AUC after training: 0.7520735642615843
User 112378 does not improve AUC. Reverting changes.
Training on augumented user 48337 29/50 current_auc = 0.7527857611052287
User 48337 AUC after training: 0.7529055110169919
User 48337 improves AUC. Keeping the model.
Training on augumented user 764 30/50 current_auc = 0.7529055110169919
User 764 AUC after training: 0.7525903796702467
User 764 does not improve AUC. Reverting changes.
Training on augumented user 42974 31/50 current_auc = 0.7529055110169919
User 42974 AUC after training: 0.7521870115464127
User 42974 does not improve AUC. Reverting changes.
Training on augumented user 24346 32/50 current_auc = 0.7529055110169919
User 24346 AUC after training: 0.7529937477940807
User 24346 improves AUC. Keeping the model.
Training on augumented user 64637 33/50 current_auc = 0.7529937477940807
User 64637 AUC after training: 0.7526786164473351
User 64637 does not improve AUC. Reverting changes.
Training on augumented user 52062 34/50 current_auc = 0.7529937477940807
User 52062 AUC after training: 0.7523949982352645
User 52062 does not improve AUC. Reverting changes.
Training on augumented user 4391 35/50 current_auc = 0.7529937477940807
User 4391 AUC after training: 0.7530189583018202
User 4391 improves AUC. Keeping the model.
Training on augumented user 30796 36/50 current_auc = 0.7530189583018202
User 30796 AUC after training: 0.7531828266021279
User 30796 improves AUC. Keeping the model.
Training on augumented user 100972 37/50 current_auc = 0.7531828266021279
User 100972 AUC after training: 0.7531071950789088
User 100972 does not improve AUC. Reverting changes.
Training on augumented user 88845 38/50 current_auc = 0.7531828266021279
User 88845 AUC after training: 0.7527416427166844
User 88845 does not improve AUC. Reverting changes.
Training on augumented user 44092 39/50 current_auc = 0.7531828266021279
User 44092 AUC after training: 0.7530378661826249
User 44092 does not improve AUC. Reverting changes.
Training on augumented user 124883 40/50 current_auc = 0.7531828266021279
User 124883 AUC after training: 0.7533466949024354
User 124883 improves AUC. Keeping the model.
Training on augumented user 80044 41/50 current_auc = 0.7533466949024354
User 80044 AUC after training: 0.7530567740634296
User 80044 does not improve AUC. Reverting changes.
Training on augumented user 16888 42/50 current_auc = 0.7533466949024354
User 16888 AUC after training: 0.7536366157414411
User 16888 improves AUC. Keeping the model.
Training on augumented user 43852 43/50 current_auc = 0.7536366157414411
User 43852 AUC after training: 0.7527353400897494
User 43852 does not improve AUC. Reverting changes.
Training on augumented user 71279 44/50 current_auc = 0.7536366157414411
User 71279 AUC after training: 0.7536051026067665
User 71279 does not improve AUC. Reverting changes.
Training on augumented user 91992 45/50 current_auc = 0.7536366157414411
User 91992 AUC after training: 0.7532584581253468
User 91992 does not improve AUC. Reverting changes.
Training on augumented user 106438 46/50 current_auc = 0.7536366157414411
User 106438 AUC after training: 0.7535231684566126
User 106438 does not improve AUC. Reverting changes.
Training on augumented user 14058 47/50 current_auc = 0.7536366157414411
User 14058 AUC after training: 0.7525651691625068
User 14058 does not improve AUC. Reverting changes.
Training on augumented user 12480 48/50 current_auc = 0.7536366157414411
User 12480 AUC after training: 0.7532710633792166
User 12480 does not improve AUC. Reverting changes.
Training on augumented user 17016 49/50 current_auc = 0.7536366157414411
User 17016 AUC after training: 0.7526471033126607
User 17016 does not improve AUC. Reverting changes.
[2024-12-02 18:18:25.163636] start test user 1932 72/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:18:25.571983] start test user 1932 72/568 recall augumented users by random, augumented_users = [133230, 18599, 55226, 56750, 138052, 41833, 133796, 38998, 1276, 100630, 30821, 79704, 120543, 60007, 8559, 32826, 74707, 74409, 134433, 2974, 106770, 76886, 80710, 130430, 86173, 34187, 19460, 89404, 75793, 60806, 37244, 116738, 134606, 63852, 19957, 49833, 59344, 123541, 85869, 116835, 895, 65149, 76297, 5759, 48419, 125966, 82012, 10953, 128904, 44146]
[2024-12-02 18:18:25.586339] user = 1932 Cloud 72/568
[2024-12-02 18:18:25.595562] user = 1932 Local 72/568
[2024-12-02 18:18:25.619793] user = 1932 Local+ 72/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:18:28.278982] user = 1932 MPDA- 72/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5555555555555556
Training on augumented user 133230 0/50 current_auc = 0.5555555555555556
User 133230 AUC after training: 0.5555555555555556
User 133230 does not improve AUC. Reverting changes.
Training on augumented user 18599 1/50 current_auc = 0.5555555555555556
User 18599 AUC after training: 0.5555555555555556
User 18599 does not improve AUC. Reverting changes.
Training on augumented user 55226 2/50 current_auc = 0.5555555555555556
User 55226 AUC after training: 0.5555555555555556
User 55226 does not improve AUC. Reverting changes.
Training on augumented user 56750 3/50 current_auc = 0.5555555555555556
User 56750 AUC after training: 0.5555555555555556
User 56750 does not improve AUC. Reverting changes.
Training on augumented user 138052 4/50 current_auc = 0.5555555555555556
User 138052 AUC after training: 0.5555555555555556
User 138052 does not improve AUC. Reverting changes.
Training on augumented user 41833 5/50 current_auc = 0.5555555555555556
User 41833 AUC after training: 0.5555555555555556
User 41833 does not improve AUC. Reverting changes.
Training on augumented user 133796 6/50 current_auc = 0.5555555555555556
User 133796 AUC after training: 0.5555555555555556
User 133796 does not improve AUC. Reverting changes.
Training on augumented user 38998 7/50 current_auc = 0.5555555555555556
User 38998 AUC after training: 0.5555555555555556
User 38998 does not improve AUC. Reverting changes.
Training on augumented user 1276 8/50 current_auc = 0.5555555555555556
User 1276 AUC after training: 0.5555555555555556
User 1276 does not improve AUC. Reverting changes.
Training on augumented user 100630 9/50 current_auc = 0.5555555555555556
User 100630 AUC after training: 0.5555555555555556
User 100630 does not improve AUC. Reverting changes.
Training on augumented user 30821 10/50 current_auc = 0.5555555555555556
User 30821 AUC after training: 0.5555555555555556
User 30821 does not improve AUC. Reverting changes.
Training on augumented user 79704 11/50 current_auc = 0.5555555555555556
User 79704 AUC after training: 0.5555555555555556
User 79704 does not improve AUC. Reverting changes.
Training on augumented user 120543 12/50 current_auc = 0.5555555555555556
User 120543 AUC after training: 0.5555555555555556
User 120543 does not improve AUC. Reverting changes.
Training on augumented user 60007 13/50 current_auc = 0.5555555555555556
User 60007 AUC after training: 0.5333333333333333
User 60007 does not improve AUC. Reverting changes.
Training on augumented user 8559 14/50 current_auc = 0.5555555555555556
User 8559 AUC after training: 0.5333333333333333
User 8559 does not improve AUC. Reverting changes.
Training on augumented user 32826 15/50 current_auc = 0.5555555555555556
User 32826 AUC after training: 0.5555555555555556
User 32826 does not improve AUC. Reverting changes.
Training on augumented user 74707 16/50 current_auc = 0.5555555555555556
User 74707 AUC after training: 0.5111111111111112
User 74707 does not improve AUC. Reverting changes.
Training on augumented user 74409 17/50 current_auc = 0.5555555555555556
User 74409 AUC after training: 0.5555555555555556
User 74409 does not improve AUC. Reverting changes.
Training on augumented user 134433 18/50 current_auc = 0.5555555555555556
User 134433 AUC after training: 0.5555555555555556
User 134433 does not improve AUC. Reverting changes.
Training on augumented user 2974 19/50 current_auc = 0.5555555555555556
User 2974 AUC after training: 0.5555555555555556
User 2974 does not improve AUC. Reverting changes.
Training on augumented user 106770 20/50 current_auc = 0.5555555555555556
User 106770 AUC after training: 0.5333333333333333
User 106770 does not improve AUC. Reverting changes.
Training on augumented user 76886 21/50 current_auc = 0.5555555555555556
User 76886 AUC after training: 0.5555555555555556
User 76886 does not improve AUC. Reverting changes.
Training on augumented user 80710 22/50 current_auc = 0.5555555555555556
User 80710 AUC after training: 0.5555555555555556
User 80710 does not improve AUC. Reverting changes.
Training on augumented user 130430 23/50 current_auc = 0.5555555555555556
User 130430 AUC after training: 0.5555555555555556
User 130430 does not improve AUC. Reverting changes.
Training on augumented user 86173 24/50 current_auc = 0.5555555555555556
User 86173 AUC after training: 0.5555555555555556
User 86173 does not improve AUC. Reverting changes.
Training on augumented user 34187 25/50 current_auc = 0.5555555555555556
User 34187 AUC after training: 0.5333333333333333
User 34187 does not improve AUC. Reverting changes.
Training on augumented user 19460 26/50 current_auc = 0.5555555555555556
User 19460 AUC after training: 0.5333333333333334
User 19460 does not improve AUC. Reverting changes.
Training on augumented user 89404 27/50 current_auc = 0.5555555555555556
User 89404 AUC after training: 0.5555555555555556
User 89404 does not improve AUC. Reverting changes.
Training on augumented user 75793 28/50 current_auc = 0.5555555555555556
User 75793 AUC after training: 0.5555555555555556
User 75793 does not improve AUC. Reverting changes.
Training on augumented user 60806 29/50 current_auc = 0.5555555555555556
User 60806 AUC after training: 0.5333333333333333
User 60806 does not improve AUC. Reverting changes.
Training on augumented user 37244 30/50 current_auc = 0.5555555555555556
User 37244 AUC after training: 0.5333333333333333
User 37244 does not improve AUC. Reverting changes.
Training on augumented user 116738 31/50 current_auc = 0.5555555555555556
User 116738 AUC after training: 0.5555555555555556
User 116738 does not improve AUC. Reverting changes.
Training on augumented user 134606 32/50 current_auc = 0.5555555555555556
User 134606 AUC after training: 0.5555555555555556
User 134606 does not improve AUC. Reverting changes.
Training on augumented user 63852 33/50 current_auc = 0.5555555555555556
User 63852 AUC after training: 0.5555555555555556
User 63852 does not improve AUC. Reverting changes.
Training on augumented user 19957 34/50 current_auc = 0.5555555555555556
User 19957 AUC after training: 0.5555555555555556
User 19957 does not improve AUC. Reverting changes.
Training on augumented user 49833 35/50 current_auc = 0.5555555555555556
User 49833 AUC after training: 0.5555555555555556
User 49833 does not improve AUC. Reverting changes.
Training on augumented user 59344 36/50 current_auc = 0.5555555555555556
User 59344 AUC after training: 0.5555555555555556
User 59344 does not improve AUC. Reverting changes.
Training on augumented user 123541 37/50 current_auc = 0.5555555555555556
User 123541 AUC after training: 0.5555555555555556
User 123541 does not improve AUC. Reverting changes.
Training on augumented user 85869 38/50 current_auc = 0.5555555555555556
User 85869 AUC after training: 0.5555555555555556
User 85869 does not improve AUC. Reverting changes.
Training on augumented user 116835 39/50 current_auc = 0.5555555555555556
User 116835 AUC after training: 0.5555555555555556
User 116835 does not improve AUC. Reverting changes.
Training on augumented user 895 40/50 current_auc = 0.5555555555555556
User 895 AUC after training: 0.5555555555555556
User 895 does not improve AUC. Reverting changes.
Training on augumented user 65149 41/50 current_auc = 0.5555555555555556
User 65149 AUC after training: 0.5555555555555556
User 65149 does not improve AUC. Reverting changes.
Training on augumented user 76297 42/50 current_auc = 0.5555555555555556
User 76297 AUC after training: 0.5555555555555556
User 76297 does not improve AUC. Reverting changes.
Training on augumented user 5759 43/50 current_auc = 0.5555555555555556
User 5759 AUC after training: 0.5555555555555556
User 5759 does not improve AUC. Reverting changes.
Training on augumented user 48419 44/50 current_auc = 0.5555555555555556
User 48419 AUC after training: 0.5555555555555556
User 48419 does not improve AUC. Reverting changes.
Training on augumented user 125966 45/50 current_auc = 0.5555555555555556
User 125966 AUC after training: 0.5555555555555556
User 125966 does not improve AUC. Reverting changes.
Training on augumented user 82012 46/50 current_auc = 0.5555555555555556
User 82012 AUC after training: 0.5555555555555556
User 82012 does not improve AUC. Reverting changes.
Training on augumented user 10953 47/50 current_auc = 0.5555555555555556
User 10953 AUC after training: 0.5555555555555556
User 10953 does not improve AUC. Reverting changes.
Training on augumented user 128904 48/50 current_auc = 0.5555555555555556
User 128904 AUC after training: 0.5555555555555556
User 128904 does not improve AUC. Reverting changes.
Training on augumented user 44146 49/50 current_auc = 0.5555555555555556
User 44146 AUC after training: 0.5555555555555556
User 44146 does not improve AUC. Reverting changes.
[2024-12-02 18:18:58.091568] start test user 1966 73/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:18:58.797143] start test user 1966 73/568 recall augumented users by random, augumented_users = [58367, 60358, 99130, 32008, 21531, 106939, 2030, 40, 108919, 43810, 72990, 121388, 83060, 76675, 13938, 133423, 52918, 27707, 1363, 11411, 2124, 95862, 20599, 56120, 72362, 52077, 132968, 122347, 14349, 126377, 134877, 108274, 72225, 46912, 118362, 44841, 85873, 49527, 120590, 41461, 134799, 133810, 84793, 51431, 19996, 79029, 43979, 19145, 80439, 137085]
[2024-12-02 18:18:58.847505] user = 1966 Cloud 73/568
[2024-12-02 18:18:58.879431] user = 1966 Local 73/568
[2024-12-02 18:18:59.322575] user = 1966 Local+ 73/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:19:01.850422] user = 1966 MPDA- 73/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6737451737451736
Training on augumented user 58367 0/50 current_auc = 0.6737451737451736
User 58367 AUC after training: 0.6727799227799227
User 58367 does not improve AUC. Reverting changes.
Training on augumented user 60358 1/50 current_auc = 0.6737451737451736
User 60358 AUC after training: 0.6785714285714286
User 60358 improves AUC. Keeping the model.
Training on augumented user 99130 2/50 current_auc = 0.6785714285714286
User 99130 AUC after training: 0.6785714285714286
User 99130 does not improve AUC. Reverting changes.
Training on augumented user 32008 3/50 current_auc = 0.6785714285714286
User 32008 AUC after training: 0.6785714285714286
User 32008 does not improve AUC. Reverting changes.
Training on augumented user 21531 4/50 current_auc = 0.6785714285714286
User 21531 AUC after training: 0.6776061776061776
User 21531 does not improve AUC. Reverting changes.
Training on augumented user 106939 5/50 current_auc = 0.6785714285714286
User 106939 AUC after training: 0.6785714285714286
User 106939 does not improve AUC. Reverting changes.
Training on augumented user 2030 6/50 current_auc = 0.6785714285714286
User 2030 AUC after training: 0.6766409266409266
User 2030 does not improve AUC. Reverting changes.
Training on augumented user 40 7/50 current_auc = 0.6785714285714286
User 40 AUC after training: 0.6785714285714286
User 40 does not improve AUC. Reverting changes.
Training on augumented user 108919 8/50 current_auc = 0.6785714285714286
User 108919 AUC after training: 0.6766409266409266
User 108919 does not improve AUC. Reverting changes.
Training on augumented user 43810 9/50 current_auc = 0.6785714285714286
User 43810 AUC after training: 0.6785714285714286
User 43810 does not improve AUC. Reverting changes.
Training on augumented user 72990 10/50 current_auc = 0.6785714285714286
User 72990 AUC after training: 0.6747104247104247
User 72990 does not improve AUC. Reverting changes.
Training on augumented user 121388 11/50 current_auc = 0.6785714285714286
User 121388 AUC after training: 0.6785714285714286
User 121388 does not improve AUC. Reverting changes.
Training on augumented user 83060 12/50 current_auc = 0.6785714285714286
User 83060 AUC after training: 0.6737451737451737
User 83060 does not improve AUC. Reverting changes.
Training on augumented user 76675 13/50 current_auc = 0.6785714285714286
User 76675 AUC after training: 0.6785714285714286
User 76675 does not improve AUC. Reverting changes.
Training on augumented user 13938 14/50 current_auc = 0.6785714285714286
User 13938 AUC after training: 0.6814671814671814
User 13938 improves AUC. Keeping the model.
Training on augumented user 133423 15/50 current_auc = 0.6814671814671814
User 133423 AUC after training: 0.6785714285714286
User 133423 does not improve AUC. Reverting changes.
Training on augumented user 52918 16/50 current_auc = 0.6814671814671814
User 52918 AUC after training: 0.6785714285714286
User 52918 does not improve AUC. Reverting changes.
Training on augumented user 27707 17/50 current_auc = 0.6814671814671814
User 27707 AUC after training: 0.6824324324324325
User 27707 improves AUC. Keeping the model.
Training on augumented user 1363 18/50 current_auc = 0.6824324324324325
User 1363 AUC after training: 0.6805019305019304
User 1363 does not improve AUC. Reverting changes.
Training on augumented user 11411 19/50 current_auc = 0.6824324324324325
User 11411 AUC after training: 0.6814671814671814
User 11411 does not improve AUC. Reverting changes.
Training on augumented user 2124 20/50 current_auc = 0.6824324324324325
User 2124 AUC after training: 0.6795366795366795
User 2124 does not improve AUC. Reverting changes.
Training on augumented user 95862 21/50 current_auc = 0.6824324324324325
User 95862 AUC after training: 0.6776061776061776
User 95862 does not improve AUC. Reverting changes.
Training on augumented user 20599 22/50 current_auc = 0.6824324324324325
User 20599 AUC after training: 0.6785714285714286
User 20599 does not improve AUC. Reverting changes.
Training on augumented user 56120 23/50 current_auc = 0.6824324324324325
User 56120 AUC after training: 0.6785714285714286
User 56120 does not improve AUC. Reverting changes.
Training on augumented user 72362 24/50 current_auc = 0.6824324324324325
User 72362 AUC after training: 0.6776061776061776
User 72362 does not improve AUC. Reverting changes.
Training on augumented user 52077 25/50 current_auc = 0.6824324324324325
User 52077 AUC after training: 0.6805019305019304
User 52077 does not improve AUC. Reverting changes.
Training on augumented user 132968 26/50 current_auc = 0.6824324324324325
User 132968 AUC after training: 0.6824324324324325
User 132968 does not improve AUC. Reverting changes.
Training on augumented user 122347 27/50 current_auc = 0.6824324324324325
User 122347 AUC after training: 0.6833976833976834
User 122347 improves AUC. Keeping the model.
Training on augumented user 14349 28/50 current_auc = 0.6833976833976834
User 14349 AUC after training: 0.6824324324324325
User 14349 does not improve AUC. Reverting changes.
Training on augumented user 126377 29/50 current_auc = 0.6833976833976834
User 126377 AUC after training: 0.6843629343629344
User 126377 improves AUC. Keeping the model.
Training on augumented user 134877 30/50 current_auc = 0.6843629343629344
User 134877 AUC after training: 0.6853281853281853
User 134877 improves AUC. Keeping the model.
Training on augumented user 108274 31/50 current_auc = 0.6853281853281853
User 108274 AUC after training: 0.6843629343629344
User 108274 does not improve AUC. Reverting changes.
Training on augumented user 72225 32/50 current_auc = 0.6853281853281853
User 72225 AUC after training: 0.6843629343629344
User 72225 does not improve AUC. Reverting changes.
Training on augumented user 46912 33/50 current_auc = 0.6853281853281853
User 46912 AUC after training: 0.6862934362934363
User 46912 improves AUC. Keeping the model.
Training on augumented user 118362 34/50 current_auc = 0.6862934362934363
User 118362 AUC after training: 0.6862934362934363
User 118362 does not improve AUC. Reverting changes.
Training on augumented user 44841 35/50 current_auc = 0.6862934362934363
User 44841 AUC after training: 0.6862934362934363
User 44841 does not improve AUC. Reverting changes.
Training on augumented user 85873 36/50 current_auc = 0.6862934362934363
User 85873 AUC after training: 0.6853281853281853
User 85873 does not improve AUC. Reverting changes.
Training on augumented user 49527 37/50 current_auc = 0.6862934362934363
User 49527 AUC after training: 0.6872586872586872
User 49527 improves AUC. Keeping the model.
Training on augumented user 120590 38/50 current_auc = 0.6872586872586872
User 120590 AUC after training: 0.6872586872586872
User 120590 does not improve AUC. Reverting changes.
Training on augumented user 41461 39/50 current_auc = 0.6872586872586872
User 41461 AUC after training: 0.6872586872586872
User 41461 does not improve AUC. Reverting changes.
Training on augumented user 134799 40/50 current_auc = 0.6872586872586872
User 134799 AUC after training: 0.6872586872586872
User 134799 does not improve AUC. Reverting changes.
Training on augumented user 133810 41/50 current_auc = 0.6872586872586872
User 133810 AUC after training: 0.6872586872586872
User 133810 does not improve AUC. Reverting changes.
Training on augumented user 84793 42/50 current_auc = 0.6872586872586872
User 84793 AUC after training: 0.6872586872586872
User 84793 does not improve AUC. Reverting changes.
Training on augumented user 51431 43/50 current_auc = 0.6872586872586872
User 51431 AUC after training: 0.6911196911196911
User 51431 improves AUC. Keeping the model.
Training on augumented user 19996 44/50 current_auc = 0.6911196911196911
User 19996 AUC after training: 0.6862934362934363
User 19996 does not improve AUC. Reverting changes.
Training on augumented user 79029 45/50 current_auc = 0.6911196911196911
User 79029 AUC after training: 0.6891891891891891
User 79029 does not improve AUC. Reverting changes.
Training on augumented user 43979 46/50 current_auc = 0.6911196911196911
User 43979 AUC after training: 0.6891891891891891
User 43979 does not improve AUC. Reverting changes.
Training on augumented user 19145 47/50 current_auc = 0.6911196911196911
User 19145 AUC after training: 0.6891891891891891
User 19145 does not improve AUC. Reverting changes.
Training on augumented user 80439 48/50 current_auc = 0.6911196911196911
User 80439 AUC after training: 0.6843629343629343
User 80439 does not improve AUC. Reverting changes.
Training on augumented user 137085 49/50 current_auc = 0.6911196911196911
User 137085 AUC after training: 0.6862934362934363
User 137085 does not improve AUC. Reverting changes.
[2024-12-02 18:19:35.175474] start test user 2001 74/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:19:35.747870] start test user 2001 74/568 recall augumented users by random, augumented_users = [19170, 80168, 119415, 105892, 63631, 12822, 74993, 89994, 43985, 26848, 116761, 29045, 118537, 49377, 134689, 72514, 62471, 37482, 12034, 103523, 59993, 56159, 6515, 759, 49680, 91315, 58378, 20101, 75035, 114034, 117343, 120045, 118928, 23496, 64646, 63859, 137122, 74050, 117018, 49528, 12015, 38157, 51460, 84348, 103955, 109109, 128134, 132860, 43259, 104633]
[2024-12-02 18:19:35.761196] user = 2001 Cloud 74/568
[2024-12-02 18:19:35.776204] user = 2001 Local 74/568
[2024-12-02 18:19:35.898411] user = 2001 Local+ 74/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:19:38.153650] user = 2001 MPDA- 74/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 19170 0/50 current_auc = 1.0
User 19170 AUC after training: 1.0
User 19170 does not improve AUC. Reverting changes.
Training on augumented user 80168 1/50 current_auc = 1.0
User 80168 AUC after training: 1.0
User 80168 does not improve AUC. Reverting changes.
Training on augumented user 119415 2/50 current_auc = 1.0
User 119415 AUC after training: 1.0
User 119415 does not improve AUC. Reverting changes.
Training on augumented user 105892 3/50 current_auc = 1.0
User 105892 AUC after training: 1.0
User 105892 does not improve AUC. Reverting changes.
Training on augumented user 63631 4/50 current_auc = 1.0
User 63631 AUC after training: 1.0
User 63631 does not improve AUC. Reverting changes.
Training on augumented user 12822 5/50 current_auc = 1.0
User 12822 AUC after training: 1.0
User 12822 does not improve AUC. Reverting changes.
Training on augumented user 74993 6/50 current_auc = 1.0
User 74993 AUC after training: 1.0
User 74993 does not improve AUC. Reverting changes.
Training on augumented user 89994 7/50 current_auc = 1.0
User 89994 AUC after training: 1.0
User 89994 does not improve AUC. Reverting changes.
Training on augumented user 43985 8/50 current_auc = 1.0
User 43985 AUC after training: 1.0
User 43985 does not improve AUC. Reverting changes.
Training on augumented user 26848 9/50 current_auc = 1.0
User 26848 AUC after training: 1.0
User 26848 does not improve AUC. Reverting changes.
Training on augumented user 116761 10/50 current_auc = 1.0
User 116761 AUC after training: 1.0
User 116761 does not improve AUC. Reverting changes.
Training on augumented user 29045 11/50 current_auc = 1.0
User 29045 AUC after training: 1.0
User 29045 does not improve AUC. Reverting changes.
Training on augumented user 118537 12/50 current_auc = 1.0
User 118537 AUC after training: 1.0
User 118537 does not improve AUC. Reverting changes.
Training on augumented user 49377 13/50 current_auc = 1.0
User 49377 AUC after training: 1.0
User 49377 does not improve AUC. Reverting changes.
Training on augumented user 134689 14/50 current_auc = 1.0
User 134689 AUC after training: 1.0
User 134689 does not improve AUC. Reverting changes.
Training on augumented user 72514 15/50 current_auc = 1.0
User 72514 AUC after training: 1.0
User 72514 does not improve AUC. Reverting changes.
Training on augumented user 62471 16/50 current_auc = 1.0
User 62471 AUC after training: 1.0
User 62471 does not improve AUC. Reverting changes.
Training on augumented user 37482 17/50 current_auc = 1.0
User 37482 AUC after training: 1.0
User 37482 does not improve AUC. Reverting changes.
Training on augumented user 12034 18/50 current_auc = 1.0
User 12034 AUC after training: 1.0
User 12034 does not improve AUC. Reverting changes.
Training on augumented user 103523 19/50 current_auc = 1.0
User 103523 AUC after training: 1.0
User 103523 does not improve AUC. Reverting changes.
Training on augumented user 59993 20/50 current_auc = 1.0
User 59993 AUC after training: 1.0
User 59993 does not improve AUC. Reverting changes.
Training on augumented user 56159 21/50 current_auc = 1.0
User 56159 AUC after training: 1.0
User 56159 does not improve AUC. Reverting changes.
Training on augumented user 6515 22/50 current_auc = 1.0
User 6515 AUC after training: 1.0
User 6515 does not improve AUC. Reverting changes.
Training on augumented user 759 23/50 current_auc = 1.0
User 759 AUC after training: 1.0
User 759 does not improve AUC. Reverting changes.
Training on augumented user 49680 24/50 current_auc = 1.0
User 49680 AUC after training: 1.0
User 49680 does not improve AUC. Reverting changes.
Training on augumented user 91315 25/50 current_auc = 1.0
User 91315 AUC after training: 1.0
User 91315 does not improve AUC. Reverting changes.
Training on augumented user 58378 26/50 current_auc = 1.0
User 58378 AUC after training: 1.0
User 58378 does not improve AUC. Reverting changes.
Training on augumented user 20101 27/50 current_auc = 1.0
User 20101 AUC after training: 1.0
User 20101 does not improve AUC. Reverting changes.
Training on augumented user 75035 28/50 current_auc = 1.0
User 75035 AUC after training: 1.0
User 75035 does not improve AUC. Reverting changes.
Training on augumented user 114034 29/50 current_auc = 1.0
User 114034 AUC after training: 1.0
User 114034 does not improve AUC. Reverting changes.
Training on augumented user 117343 30/50 current_auc = 1.0
User 117343 AUC after training: 1.0
User 117343 does not improve AUC. Reverting changes.
Training on augumented user 120045 31/50 current_auc = 1.0
User 120045 AUC after training: 1.0
User 120045 does not improve AUC. Reverting changes.
Training on augumented user 118928 32/50 current_auc = 1.0
User 118928 AUC after training: 1.0
User 118928 does not improve AUC. Reverting changes.
Training on augumented user 23496 33/50 current_auc = 1.0
User 23496 AUC after training: 1.0
User 23496 does not improve AUC. Reverting changes.
Training on augumented user 64646 34/50 current_auc = 1.0
User 64646 AUC after training: 1.0
User 64646 does not improve AUC. Reverting changes.
Training on augumented user 63859 35/50 current_auc = 1.0
User 63859 AUC after training: 1.0
User 63859 does not improve AUC. Reverting changes.
Training on augumented user 137122 36/50 current_auc = 1.0
User 137122 AUC after training: 1.0
User 137122 does not improve AUC. Reverting changes.
Training on augumented user 74050 37/50 current_auc = 1.0
User 74050 AUC after training: 1.0
User 74050 does not improve AUC. Reverting changes.
Training on augumented user 117018 38/50 current_auc = 1.0
User 117018 AUC after training: 1.0
User 117018 does not improve AUC. Reverting changes.
Training on augumented user 49528 39/50 current_auc = 1.0
User 49528 AUC after training: 1.0
User 49528 does not improve AUC. Reverting changes.
Training on augumented user 12015 40/50 current_auc = 1.0
User 12015 AUC after training: 1.0
User 12015 does not improve AUC. Reverting changes.
Training on augumented user 38157 41/50 current_auc = 1.0
User 38157 AUC after training: 1.0
User 38157 does not improve AUC. Reverting changes.
Training on augumented user 51460 42/50 current_auc = 1.0
User 51460 AUC after training: 1.0
User 51460 does not improve AUC. Reverting changes.
Training on augumented user 84348 43/50 current_auc = 1.0
User 84348 AUC after training: 1.0
User 84348 does not improve AUC. Reverting changes.
Training on augumented user 103955 44/50 current_auc = 1.0
User 103955 AUC after training: 1.0
User 103955 does not improve AUC. Reverting changes.
Training on augumented user 109109 45/50 current_auc = 1.0
User 109109 AUC after training: 1.0
User 109109 does not improve AUC. Reverting changes.
Training on augumented user 128134 46/50 current_auc = 1.0
User 128134 AUC after training: 1.0
User 128134 does not improve AUC. Reverting changes.
Training on augumented user 132860 47/50 current_auc = 1.0
User 132860 AUC after training: 1.0
User 132860 does not improve AUC. Reverting changes.
Training on augumented user 43259 48/50 current_auc = 1.0
User 43259 AUC after training: 1.0
User 43259 does not improve AUC. Reverting changes.
Training on augumented user 104633 49/50 current_auc = 1.0
User 104633 AUC after training: 1.0
User 104633 does not improve AUC. Reverting changes.
[2024-12-02 18:20:05.512459] start test user 2024 75/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:20:05.932201] start test user 2024 75/568 recall augumented users by random, augumented_users = [12812, 46603, 62963, 100021, 77521, 106203, 14405, 102109, 136761, 17970, 93409, 38159, 122462, 42235, 113554, 52930, 106767, 90761, 22150, 37288, 118036, 29622, 72677, 55464, 25825, 23874, 117071, 6459, 87780, 55402, 99771, 9719, 45407, 134159, 26534, 132226, 70623, 13038, 138272, 113138, 137293, 2310, 78318, 125663, 21376, 16437, 97756, 62374, 109486, 19846]
[2024-12-02 18:20:05.947620] user = 2024 Cloud 75/568
[2024-12-02 18:20:05.966003] user = 2024 Local 75/568
[2024-12-02 18:20:06.059416] user = 2024 Local+ 75/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:20:07.791358] user = 2024 MPDA- 75/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7490985576923077
Training on augumented user 12812 0/50 current_auc = 0.7490985576923077
User 12812 AUC after training: 0.7501001602564102
User 12812 improves AUC. Keeping the model.
Training on augumented user 46603 1/50 current_auc = 0.7501001602564102
User 46603 AUC after training: 0.7503004807692307
User 46603 improves AUC. Keeping the model.
Training on augumented user 62963 2/50 current_auc = 0.7503004807692307
User 62963 AUC after training: 0.7496995192307693
User 62963 does not improve AUC. Reverting changes.
Training on augumented user 100021 3/50 current_auc = 0.7503004807692307
User 100021 AUC after training: 0.7498998397435898
User 100021 does not improve AUC. Reverting changes.
Training on augumented user 77521 4/50 current_auc = 0.7503004807692307
User 77521 AUC after training: 0.7490985576923077
User 77521 does not improve AUC. Reverting changes.
Training on augumented user 106203 5/50 current_auc = 0.7503004807692307
User 106203 AUC after training: 0.7533052884615384
User 106203 improves AUC. Keeping the model.
Training on augumented user 14405 6/50 current_auc = 0.7533052884615384
User 14405 AUC after training: 0.7535056089743589
User 14405 improves AUC. Keeping the model.
Training on augumented user 102109 7/50 current_auc = 0.7535056089743589
User 102109 AUC after training: 0.7482972756410257
User 102109 does not improve AUC. Reverting changes.
Training on augumented user 136761 8/50 current_auc = 0.7535056089743589
User 136761 AUC after training: 0.7501001602564102
User 136761 does not improve AUC. Reverting changes.
Training on augumented user 17970 9/50 current_auc = 0.7535056089743589
User 17970 AUC after training: 0.7498998397435898
User 17970 does not improve AUC. Reverting changes.
Training on augumented user 93409 10/50 current_auc = 0.7535056089743589
User 93409 AUC after training: 0.7533052884615385
User 93409 does not improve AUC. Reverting changes.
Training on augumented user 38159 11/50 current_auc = 0.7535056089743589
User 38159 AUC after training: 0.7486979166666666
User 38159 does not improve AUC. Reverting changes.
Training on augumented user 122462 12/50 current_auc = 0.7535056089743589
User 122462 AUC after training: 0.7490985576923077
User 122462 does not improve AUC. Reverting changes.
Training on augumented user 42235 13/50 current_auc = 0.7535056089743589
User 42235 AUC after training: 0.7503004807692307
User 42235 does not improve AUC. Reverting changes.
Training on augumented user 113554 14/50 current_auc = 0.7535056089743589
User 113554 AUC after training: 0.7512019230769231
User 113554 does not improve AUC. Reverting changes.
Training on augumented user 52930 15/50 current_auc = 0.7535056089743589
User 52930 AUC after training: 0.7490985576923077
User 52930 does not improve AUC. Reverting changes.
Training on augumented user 106767 16/50 current_auc = 0.7535056089743589
User 106767 AUC after training: 0.7490985576923077
User 106767 does not improve AUC. Reverting changes.
Training on augumented user 90761 17/50 current_auc = 0.7535056089743589
User 90761 AUC after training: 0.7501001602564102
User 90761 does not improve AUC. Reverting changes.
Training on augumented user 22150 18/50 current_auc = 0.7535056089743589
User 22150 AUC after training: 0.7511017628205128
User 22150 does not improve AUC. Reverting changes.
Training on augumented user 37288 19/50 current_auc = 0.7535056089743589
User 37288 AUC after training: 0.7507011217948718
User 37288 does not improve AUC. Reverting changes.
Training on augumented user 118036 20/50 current_auc = 0.7535056089743589
User 118036 AUC after training: 0.753505608974359
User 118036 improves AUC. Keeping the model.
Training on augumented user 29622 21/50 current_auc = 0.753505608974359
User 29622 AUC after training: 0.7538060897435896
User 29622 improves AUC. Keeping the model.
Training on augumented user 72677 22/50 current_auc = 0.7538060897435896
User 72677 AUC after training: 0.7535056089743589
User 72677 does not improve AUC. Reverting changes.
Training on augumented user 55464 23/50 current_auc = 0.7538060897435896
User 55464 AUC after training: 0.7556089743589743
User 55464 improves AUC. Keeping the model.
Training on augumented user 25825 24/50 current_auc = 0.7556089743589743
User 25825 AUC after training: 0.75390625
User 25825 does not improve AUC. Reverting changes.
Training on augumented user 23874 25/50 current_auc = 0.7556089743589743
User 23874 AUC after training: 0.7542067307692307
User 23874 does not improve AUC. Reverting changes.
Training on augumented user 117071 26/50 current_auc = 0.7556089743589743
User 117071 AUC after training: 0.7534054487179487
User 117071 does not improve AUC. Reverting changes.
Training on augumented user 6459 27/50 current_auc = 0.7556089743589743
User 6459 AUC after training: 0.7549078525641025
User 6459 does not improve AUC. Reverting changes.
Training on augumented user 87780 28/50 current_auc = 0.7556089743589743
User 87780 AUC after training: 0.7548076923076923
User 87780 does not improve AUC. Reverting changes.
Training on augumented user 55402 29/50 current_auc = 0.7556089743589743
User 55402 AUC after training: 0.7552083333333333
User 55402 does not improve AUC. Reverting changes.
Training on augumented user 99771 30/50 current_auc = 0.7556089743589743
User 99771 AUC after training: 0.7546073717948718
User 99771 does not improve AUC. Reverting changes.
Training on augumented user 9719 31/50 current_auc = 0.7556089743589743
User 9719 AUC after training: 0.7550080128205129
User 9719 does not improve AUC. Reverting changes.
Training on augumented user 45407 32/50 current_auc = 0.7556089743589743
User 45407 AUC after training: 0.7525040064102564
User 45407 does not improve AUC. Reverting changes.
Training on augumented user 134159 33/50 current_auc = 0.7556089743589743
User 134159 AUC after training: 0.7518028846153847
User 134159 does not improve AUC. Reverting changes.
Training on augumented user 26534 34/50 current_auc = 0.7556089743589743
User 26534 AUC after training: 0.7552083333333333
User 26534 does not improve AUC. Reverting changes.
Training on augumented user 132226 35/50 current_auc = 0.7556089743589743
User 132226 AUC after training: 0.7558092948717949
User 132226 improves AUC. Keeping the model.
Training on augumented user 70623 36/50 current_auc = 0.7558092948717949
User 70623 AUC after training: 0.7546073717948718
User 70623 does not improve AUC. Reverting changes.
Training on augumented user 13038 37/50 current_auc = 0.7558092948717949
User 13038 AUC after training: 0.7548076923076923
User 13038 does not improve AUC. Reverting changes.
Training on augumented user 138272 38/50 current_auc = 0.7558092948717949
User 138272 AUC after training: 0.7556089743589743
User 138272 does not improve AUC. Reverting changes.
Training on augumented user 113138 39/50 current_auc = 0.7558092948717949
User 113138 AUC after training: 0.7550080128205128
User 113138 does not improve AUC. Reverting changes.
Training on augumented user 137293 40/50 current_auc = 0.7558092948717949
User 137293 AUC after training: 0.7552083333333334
User 137293 does not improve AUC. Reverting changes.
Training on augumented user 2310 41/50 current_auc = 0.7558092948717949
User 2310 AUC after training: 0.7526041666666666
User 2310 does not improve AUC. Reverting changes.
Training on augumented user 78318 42/50 current_auc = 0.7558092948717949
User 78318 AUC after training: 0.7548076923076924
User 78318 does not improve AUC. Reverting changes.
Training on augumented user 125663 43/50 current_auc = 0.7558092948717949
User 125663 AUC after training: 0.7558092948717949
User 125663 does not improve AUC. Reverting changes.
Training on augumented user 21376 44/50 current_auc = 0.7558092948717949
User 21376 AUC after training: 0.7552083333333334
User 21376 does not improve AUC. Reverting changes.
Training on augumented user 16437 45/50 current_auc = 0.7558092948717949
User 16437 AUC after training: 0.7548076923076924
User 16437 does not improve AUC. Reverting changes.
Training on augumented user 97756 46/50 current_auc = 0.7558092948717949
User 97756 AUC after training: 0.7539062499999999
User 97756 does not improve AUC. Reverting changes.
Training on augumented user 62374 47/50 current_auc = 0.7558092948717949
User 62374 AUC after training: 0.7554086538461539
User 62374 does not improve AUC. Reverting changes.
Training on augumented user 109486 48/50 current_auc = 0.7558092948717949
User 109486 AUC after training: 0.7560096153846154
User 109486 improves AUC. Keeping the model.
Training on augumented user 19846 49/50 current_auc = 0.7560096153846154
User 19846 AUC after training: 0.7563100961538461
User 19846 improves AUC. Keeping the model.
[2024-12-02 18:20:32.569482] start test user 2029 76/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:20:33.021836] start test user 2029 76/568 recall augumented users by random, augumented_users = [79256, 90445, 22864, 125067, 65546, 3704, 81516, 4210, 134271, 21752, 100954, 15856, 108708, 30925, 19611, 84472, 11905, 100556, 126749, 33913, 6909, 95504, 49972, 86814, 71284, 288, 20945, 94988, 74323, 4037, 123246, 76577, 21780, 78200, 31076, 11105, 117526, 61983, 80082, 104772, 90273, 21031, 72764, 28613, 72118, 91322, 50371, 35495, 85886, 73326]
[2024-12-02 18:20:33.036667] user = 2029 Cloud 76/568
[2024-12-02 18:20:33.049669] user = 2029 Local 76/568
[2024-12-02 18:20:33.121724] user = 2029 Local+ 76/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:20:35.713513] user = 2029 MPDA- 76/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6539772727272727
Training on augumented user 79256 0/50 current_auc = 0.6539772727272727
User 79256 AUC after training: 0.6534090909090909
User 79256 does not improve AUC. Reverting changes.
Training on augumented user 90445 1/50 current_auc = 0.6539772727272727
User 90445 AUC after training: 0.6539772727272727
User 90445 does not improve AUC. Reverting changes.
Training on augumented user 22864 2/50 current_auc = 0.6539772727272727
User 22864 AUC after training: 0.6545454545454545
User 22864 improves AUC. Keeping the model.
Training on augumented user 125067 3/50 current_auc = 0.6545454545454545
User 125067 AUC after training: 0.6517045454545454
User 125067 does not improve AUC. Reverting changes.
Training on augumented user 65546 4/50 current_auc = 0.6545454545454545
User 65546 AUC after training: 0.6559659090909091
User 65546 improves AUC. Keeping the model.
Training on augumented user 3704 5/50 current_auc = 0.6559659090909091
User 3704 AUC after training: 0.6576704545454546
User 3704 improves AUC. Keeping the model.
Training on augumented user 81516 6/50 current_auc = 0.6576704545454546
User 81516 AUC after training: 0.656534090909091
User 81516 does not improve AUC. Reverting changes.
Training on augumented user 4210 7/50 current_auc = 0.6576704545454546
User 4210 AUC after training: 0.6582386363636363
User 4210 improves AUC. Keeping the model.
Training on augumented user 134271 8/50 current_auc = 0.6582386363636363
User 134271 AUC after training: 0.6585227272727273
User 134271 improves AUC. Keeping the model.
Training on augumented user 21752 9/50 current_auc = 0.6585227272727273
User 21752 AUC after training: 0.6579545454545453
User 21752 does not improve AUC. Reverting changes.
Training on augumented user 100954 10/50 current_auc = 0.6585227272727273
User 100954 AUC after training: 0.6590909090909092
User 100954 improves AUC. Keeping the model.
Training on augumented user 15856 11/50 current_auc = 0.6590909090909092
User 15856 AUC after training: 0.6579545454545455
User 15856 does not improve AUC. Reverting changes.
Training on augumented user 108708 12/50 current_auc = 0.6590909090909092
User 108708 AUC after training: 0.6573863636363637
User 108708 does not improve AUC. Reverting changes.
Training on augumented user 30925 13/50 current_auc = 0.6590909090909092
User 30925 AUC after training: 0.6579545454545455
User 30925 does not improve AUC. Reverting changes.
Training on augumented user 19611 14/50 current_auc = 0.6590909090909092
User 19611 AUC after training: 0.6573863636363637
User 19611 does not improve AUC. Reverting changes.
Training on augumented user 84472 15/50 current_auc = 0.6590909090909092
User 84472 AUC after training: 0.6585227272727272
User 84472 does not improve AUC. Reverting changes.
Training on augumented user 11905 16/50 current_auc = 0.6590909090909092
User 11905 AUC after training: 0.6573863636363637
User 11905 does not improve AUC. Reverting changes.
Training on augumented user 100556 17/50 current_auc = 0.6590909090909092
User 100556 AUC after training: 0.65625
User 100556 does not improve AUC. Reverting changes.
Training on augumented user 126749 18/50 current_auc = 0.6590909090909092
User 126749 AUC after training: 0.6579545454545455
User 126749 does not improve AUC. Reverting changes.
Training on augumented user 33913 19/50 current_auc = 0.6590909090909092
User 33913 AUC after training: 0.6571022727272727
User 33913 does not improve AUC. Reverting changes.
Training on augumented user 6909 20/50 current_auc = 0.6590909090909092
User 6909 AUC after training: 0.6585227272727272
User 6909 does not improve AUC. Reverting changes.
Training on augumented user 95504 21/50 current_auc = 0.6590909090909092
User 95504 AUC after training: 0.6579545454545455
User 95504 does not improve AUC. Reverting changes.
Training on augumented user 49972 22/50 current_auc = 0.6590909090909092
User 49972 AUC after training: 0.6573863636363636
User 49972 does not improve AUC. Reverting changes.
Training on augumented user 86814 23/50 current_auc = 0.6590909090909092
User 86814 AUC after training: 0.6585227272727272
User 86814 does not improve AUC. Reverting changes.
Training on augumented user 71284 24/50 current_auc = 0.6590909090909092
User 71284 AUC after training: 0.6585227272727272
User 71284 does not improve AUC. Reverting changes.
Training on augumented user 288 25/50 current_auc = 0.6590909090909092
User 288 AUC after training: 0.6596590909090909
User 288 improves AUC. Keeping the model.
Training on augumented user 20945 26/50 current_auc = 0.6596590909090909
User 20945 AUC after training: 0.6590909090909091
User 20945 does not improve AUC. Reverting changes.
Training on augumented user 94988 27/50 current_auc = 0.6596590909090909
User 94988 AUC after training: 0.6576704545454546
User 94988 does not improve AUC. Reverting changes.
Training on augumented user 74323 28/50 current_auc = 0.6596590909090909
User 74323 AUC after training: 0.659375
User 74323 does not improve AUC. Reverting changes.
Training on augumented user 4037 29/50 current_auc = 0.6596590909090909
User 4037 AUC after training: 0.6568181818181817
User 4037 does not improve AUC. Reverting changes.
Training on augumented user 123246 30/50 current_auc = 0.6596590909090909
User 123246 AUC after training: 0.6573863636363637
User 123246 does not improve AUC. Reverting changes.
Training on augumented user 76577 31/50 current_auc = 0.6596590909090909
User 76577 AUC after training: 0.6585227272727273
User 76577 does not improve AUC. Reverting changes.
Training on augumented user 21780 32/50 current_auc = 0.6596590909090909
User 21780 AUC after training: 0.6593749999999999
User 21780 does not improve AUC. Reverting changes.
Training on augumented user 78200 33/50 current_auc = 0.6596590909090909
User 78200 AUC after training: 0.6568181818181817
User 78200 does not improve AUC. Reverting changes.
Training on augumented user 31076 34/50 current_auc = 0.6596590909090909
User 31076 AUC after training: 0.6579545454545455
User 31076 does not improve AUC. Reverting changes.
Training on augumented user 11105 35/50 current_auc = 0.6596590909090909
User 11105 AUC after training: 0.6573863636363636
User 11105 does not improve AUC. Reverting changes.
Training on augumented user 117526 36/50 current_auc = 0.6596590909090909
User 117526 AUC after training: 0.6590909090909092
User 117526 does not improve AUC. Reverting changes.
Training on augumented user 61983 37/50 current_auc = 0.6596590909090909
User 61983 AUC after training: 0.6571022727272727
User 61983 does not improve AUC. Reverting changes.
Training on augumented user 80082 38/50 current_auc = 0.6596590909090909
User 80082 AUC after training: 0.6551136363636363
User 80082 does not improve AUC. Reverting changes.
Training on augumented user 104772 39/50 current_auc = 0.6596590909090909
User 104772 AUC after training: 0.6585227272727272
User 104772 does not improve AUC. Reverting changes.
Training on augumented user 90273 40/50 current_auc = 0.6596590909090909
User 90273 AUC after training: 0.6579545454545455
User 90273 does not improve AUC. Reverting changes.
Training on augumented user 21031 41/50 current_auc = 0.6596590909090909
User 21031 AUC after training: 0.6585227272727273
User 21031 does not improve AUC. Reverting changes.
Training on augumented user 72764 42/50 current_auc = 0.6596590909090909
User 72764 AUC after training: 0.6573863636363637
User 72764 does not improve AUC. Reverting changes.
Training on augumented user 28613 43/50 current_auc = 0.6596590909090909
User 28613 AUC after training: 0.6568181818181817
User 28613 does not improve AUC. Reverting changes.
Training on augumented user 72118 44/50 current_auc = 0.6596590909090909
User 72118 AUC after training: 0.6573863636363636
User 72118 does not improve AUC. Reverting changes.
Training on augumented user 91322 45/50 current_auc = 0.6596590909090909
User 91322 AUC after training: 0.6573863636363637
User 91322 does not improve AUC. Reverting changes.
Training on augumented user 50371 46/50 current_auc = 0.6596590909090909
User 50371 AUC after training: 0.6579545454545455
User 50371 does not improve AUC. Reverting changes.
Training on augumented user 35495 47/50 current_auc = 0.6596590909090909
User 35495 AUC after training: 0.6573863636363636
User 35495 does not improve AUC. Reverting changes.
Training on augumented user 85886 48/50 current_auc = 0.6596590909090909
User 85886 AUC after training: 0.6602272727272728
User 85886 improves AUC. Keeping the model.
Training on augumented user 73326 49/50 current_auc = 0.6602272727272728
User 73326 AUC after training: 0.6579545454545455
User 73326 does not improve AUC. Reverting changes.
[2024-12-02 18:21:06.384833] start test user 2035 77/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:21:06.818063] start test user 2035 77/568 recall augumented users by random, augumented_users = [23231, 84350, 48445, 93854, 138279, 47130, 76924, 85761, 68124, 124838, 60430, 49098, 53929, 85895, 78684, 131277, 137454, 124144, 108381, 86189, 59611, 131403, 100687, 108611, 57817, 34179, 78317, 134302, 62525, 84961, 63272, 100793, 79130, 118336, 132737, 106005, 89646, 27908, 45865, 41480, 74960, 17883, 126496, 99816, 18238, 67363, 55367, 35934, 44634, 35634]
[2024-12-02 18:21:06.832987] user = 2035 Cloud 77/568
[2024-12-02 18:21:06.843257] user = 2035 Local 77/568
[2024-12-02 18:21:06.863890] user = 2035 Local+ 77/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:21:08.623991] user = 2035 MPDA- 77/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.35714285714285715
Training on augumented user 23231 0/50 current_auc = 0.35714285714285715
User 23231 AUC after training: 0.35714285714285715
User 23231 does not improve AUC. Reverting changes.
Training on augumented user 84350 1/50 current_auc = 0.35714285714285715
User 84350 AUC after training: 0.35714285714285715
User 84350 does not improve AUC. Reverting changes.
Training on augumented user 48445 2/50 current_auc = 0.35714285714285715
User 48445 AUC after training: 0.35714285714285715
User 48445 does not improve AUC. Reverting changes.
Training on augumented user 93854 3/50 current_auc = 0.35714285714285715
User 93854 AUC after training: 0.35714285714285715
User 93854 does not improve AUC. Reverting changes.
Training on augumented user 138279 4/50 current_auc = 0.35714285714285715
User 138279 AUC after training: 0.35714285714285715
User 138279 does not improve AUC. Reverting changes.
Training on augumented user 47130 5/50 current_auc = 0.35714285714285715
User 47130 AUC after training: 0.35714285714285715
User 47130 does not improve AUC. Reverting changes.
Training on augumented user 76924 6/50 current_auc = 0.35714285714285715
User 76924 AUC after training: 0.35714285714285715
User 76924 does not improve AUC. Reverting changes.
Training on augumented user 85761 7/50 current_auc = 0.35714285714285715
User 85761 AUC after training: 0.35714285714285715
User 85761 does not improve AUC. Reverting changes.
Training on augumented user 68124 8/50 current_auc = 0.35714285714285715
User 68124 AUC after training: 0.35714285714285715
User 68124 does not improve AUC. Reverting changes.
Training on augumented user 124838 9/50 current_auc = 0.35714285714285715
User 124838 AUC after training: 0.35714285714285715
User 124838 does not improve AUC. Reverting changes.
Training on augumented user 60430 10/50 current_auc = 0.35714285714285715
User 60430 AUC after training: 0.35714285714285715
User 60430 does not improve AUC. Reverting changes.
Training on augumented user 49098 11/50 current_auc = 0.35714285714285715
User 49098 AUC after training: 0.35714285714285715
User 49098 does not improve AUC. Reverting changes.
Training on augumented user 53929 12/50 current_auc = 0.35714285714285715
User 53929 AUC after training: 0.35714285714285715
User 53929 does not improve AUC. Reverting changes.
Training on augumented user 85895 13/50 current_auc = 0.35714285714285715
User 85895 AUC after training: 0.35714285714285715
User 85895 does not improve AUC. Reverting changes.
Training on augumented user 78684 14/50 current_auc = 0.35714285714285715
User 78684 AUC after training: 0.35714285714285715
User 78684 does not improve AUC. Reverting changes.
Training on augumented user 131277 15/50 current_auc = 0.35714285714285715
User 131277 AUC after training: 0.35714285714285715
User 131277 does not improve AUC. Reverting changes.
Training on augumented user 137454 16/50 current_auc = 0.35714285714285715
User 137454 AUC after training: 0.35714285714285715
User 137454 does not improve AUC. Reverting changes.
Training on augumented user 124144 17/50 current_auc = 0.35714285714285715
User 124144 AUC after training: 0.35714285714285715
User 124144 does not improve AUC. Reverting changes.
Training on augumented user 108381 18/50 current_auc = 0.35714285714285715
User 108381 AUC after training: 0.35714285714285715
User 108381 does not improve AUC. Reverting changes.
Training on augumented user 86189 19/50 current_auc = 0.35714285714285715
User 86189 AUC after training: 0.35714285714285715
User 86189 does not improve AUC. Reverting changes.
Training on augumented user 59611 20/50 current_auc = 0.35714285714285715
User 59611 AUC after training: 0.35714285714285715
User 59611 does not improve AUC. Reverting changes.
Training on augumented user 131403 21/50 current_auc = 0.35714285714285715
User 131403 AUC after training: 0.35714285714285715
User 131403 does not improve AUC. Reverting changes.
Training on augumented user 100687 22/50 current_auc = 0.35714285714285715
User 100687 AUC after training: 0.35714285714285715
User 100687 does not improve AUC. Reverting changes.
Training on augumented user 108611 23/50 current_auc = 0.35714285714285715
User 108611 AUC after training: 0.35714285714285715
User 108611 does not improve AUC. Reverting changes.
Training on augumented user 57817 24/50 current_auc = 0.35714285714285715
User 57817 AUC after training: 0.35714285714285715
User 57817 does not improve AUC. Reverting changes.
Training on augumented user 34179 25/50 current_auc = 0.35714285714285715
User 34179 AUC after training: 0.35714285714285715
User 34179 does not improve AUC. Reverting changes.
Training on augumented user 78317 26/50 current_auc = 0.35714285714285715
User 78317 AUC after training: 0.35714285714285715
User 78317 does not improve AUC. Reverting changes.
Training on augumented user 134302 27/50 current_auc = 0.35714285714285715
User 134302 AUC after training: 0.35714285714285715
User 134302 does not improve AUC. Reverting changes.
Training on augumented user 62525 28/50 current_auc = 0.35714285714285715
User 62525 AUC after training: 0.35714285714285715
User 62525 does not improve AUC. Reverting changes.
Training on augumented user 84961 29/50 current_auc = 0.35714285714285715
User 84961 AUC after training: 0.35714285714285715
User 84961 does not improve AUC. Reverting changes.
Training on augumented user 63272 30/50 current_auc = 0.35714285714285715
User 63272 AUC after training: 0.35714285714285715
User 63272 does not improve AUC. Reverting changes.
Training on augumented user 100793 31/50 current_auc = 0.35714285714285715
User 100793 AUC after training: 0.35714285714285715
User 100793 does not improve AUC. Reverting changes.
Training on augumented user 79130 32/50 current_auc = 0.35714285714285715
User 79130 AUC after training: 0.35714285714285715
User 79130 does not improve AUC. Reverting changes.
Training on augumented user 118336 33/50 current_auc = 0.35714285714285715
User 118336 AUC after training: 0.35714285714285715
User 118336 does not improve AUC. Reverting changes.
Training on augumented user 132737 34/50 current_auc = 0.35714285714285715
User 132737 AUC after training: 0.35714285714285715
User 132737 does not improve AUC. Reverting changes.
Training on augumented user 106005 35/50 current_auc = 0.35714285714285715
User 106005 AUC after training: 0.35714285714285715
User 106005 does not improve AUC. Reverting changes.
Training on augumented user 89646 36/50 current_auc = 0.35714285714285715
User 89646 AUC after training: 0.35714285714285715
User 89646 does not improve AUC. Reverting changes.
Training on augumented user 27908 37/50 current_auc = 0.35714285714285715
User 27908 AUC after training: 0.35714285714285715
User 27908 does not improve AUC. Reverting changes.
Training on augumented user 45865 38/50 current_auc = 0.35714285714285715
User 45865 AUC after training: 0.35714285714285715
User 45865 does not improve AUC. Reverting changes.
Training on augumented user 41480 39/50 current_auc = 0.35714285714285715
User 41480 AUC after training: 0.35714285714285715
User 41480 does not improve AUC. Reverting changes.
Training on augumented user 74960 40/50 current_auc = 0.35714285714285715
User 74960 AUC after training: 0.35714285714285715
User 74960 does not improve AUC. Reverting changes.
Training on augumented user 17883 41/50 current_auc = 0.35714285714285715
User 17883 AUC after training: 0.35714285714285715
User 17883 does not improve AUC. Reverting changes.
Training on augumented user 126496 42/50 current_auc = 0.35714285714285715
User 126496 AUC after training: 0.35714285714285715
User 126496 does not improve AUC. Reverting changes.
Training on augumented user 99816 43/50 current_auc = 0.35714285714285715
User 99816 AUC after training: 0.35714285714285715
User 99816 does not improve AUC. Reverting changes.
Training on augumented user 18238 44/50 current_auc = 0.35714285714285715
User 18238 AUC after training: 0.35714285714285715
User 18238 does not improve AUC. Reverting changes.
Training on augumented user 67363 45/50 current_auc = 0.35714285714285715
User 67363 AUC after training: 0.35714285714285715
User 67363 does not improve AUC. Reverting changes.
Training on augumented user 55367 46/50 current_auc = 0.35714285714285715
User 55367 AUC after training: 0.35714285714285715
User 55367 does not improve AUC. Reverting changes.
Training on augumented user 35934 47/50 current_auc = 0.35714285714285715
User 35934 AUC after training: 0.35714285714285715
User 35934 does not improve AUC. Reverting changes.
Training on augumented user 44634 48/50 current_auc = 0.35714285714285715
User 44634 AUC after training: 0.35714285714285715
User 44634 does not improve AUC. Reverting changes.
Training on augumented user 35634 49/50 current_auc = 0.35714285714285715
User 35634 AUC after training: 0.35714285714285715
User 35634 does not improve AUC. Reverting changes.
[2024-12-02 18:21:32.184222] start test user 2047 78/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:21:32.595848] start test user 2047 78/568 recall augumented users by random, augumented_users = [71420, 32767, 77831, 231, 60744, 134673, 49539, 35887, 2388, 42873, 80240, 124118, 77584, 82716, 43424, 123156, 99023, 67333, 20804, 21844, 123428, 60516, 101196, 133370, 137907, 86956, 59273, 91376, 29616, 94284, 8879, 97914, 85257, 107263, 13948, 98220, 69599, 137088, 74964, 57918, 82241, 90155, 129685, 74255, 88284, 88845, 83699, 38702, 122691, 73555]
[2024-12-02 18:21:32.611262] user = 2047 Cloud 78/568
[2024-12-02 18:21:32.625614] user = 2047 Local 78/568
[2024-12-02 18:21:32.705960] user = 2047 Local+ 78/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:21:34.891406] user = 2047 MPDA- 78/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6697429136453527
Training on augumented user 71420 0/50 current_auc = 0.6697429136453527
User 71420 AUC after training: 0.6677653263019117
User 71420 does not improve AUC. Reverting changes.
Training on augumented user 32767 1/50 current_auc = 0.6697429136453527
User 32767 AUC after training: 0.6704021094264997
User 32767 improves AUC. Keeping the model.
Training on augumented user 77831 2/50 current_auc = 0.6704021094264997
User 77831 AUC after training: 0.6697429136453528
User 77831 does not improve AUC. Reverting changes.
Training on augumented user 231 3/50 current_auc = 0.6704021094264997
User 231 AUC after training: 0.6684245220830587
User 231 does not improve AUC. Reverting changes.
Training on augumented user 60744 4/50 current_auc = 0.6704021094264997
User 60744 AUC after training: 0.6697429136453527
User 60744 does not improve AUC. Reverting changes.
Training on augumented user 134673 5/50 current_auc = 0.6704021094264997
User 134673 AUC after training: 0.6684245220830587
User 134673 does not improve AUC. Reverting changes.
Training on augumented user 49539 6/50 current_auc = 0.6704021094264997
User 49539 AUC after training: 0.6704021094264996
User 49539 does not improve AUC. Reverting changes.
Training on augumented user 35887 7/50 current_auc = 0.6704021094264997
User 35887 AUC after training: 0.6697429136453527
User 35887 does not improve AUC. Reverting changes.
Training on augumented user 2388 8/50 current_auc = 0.6704021094264997
User 2388 AUC after training: 0.6697429136453527
User 2388 does not improve AUC. Reverting changes.
Training on augumented user 42873 9/50 current_auc = 0.6704021094264997
User 42873 AUC after training: 0.6704021094264996
User 42873 does not improve AUC. Reverting changes.
Training on augumented user 80240 10/50 current_auc = 0.6704021094264997
User 80240 AUC after training: 0.6664469347396177
User 80240 does not improve AUC. Reverting changes.
Training on augumented user 124118 11/50 current_auc = 0.6704021094264997
User 124118 AUC after training: 0.6690837178642056
User 124118 does not improve AUC. Reverting changes.
Training on augumented user 77584 12/50 current_auc = 0.6704021094264997
User 77584 AUC after training: 0.6690837178642056
User 77584 does not improve AUC. Reverting changes.
Training on augumented user 82716 13/50 current_auc = 0.6704021094264997
User 82716 AUC after training: 0.6690837178642056
User 82716 does not improve AUC. Reverting changes.
Training on augumented user 43424 14/50 current_auc = 0.6704021094264997
User 43424 AUC after training: 0.6690837178642056
User 43424 does not improve AUC. Reverting changes.
Training on augumented user 123156 15/50 current_auc = 0.6704021094264997
User 123156 AUC after training: 0.6690837178642056
User 123156 does not improve AUC. Reverting changes.
Training on augumented user 99023 16/50 current_auc = 0.6704021094264997
User 99023 AUC after training: 0.6710613052076467
User 99023 improves AUC. Keeping the model.
Training on augumented user 67333 17/50 current_auc = 0.6710613052076467
User 67333 AUC after training: 0.6657877389584707
User 67333 does not improve AUC. Reverting changes.
Training on augumented user 20804 18/50 current_auc = 0.6710613052076467
User 20804 AUC after training: 0.6710613052076467
User 20804 does not improve AUC. Reverting changes.
Training on augumented user 21844 19/50 current_auc = 0.6710613052076467
User 21844 AUC after training: 0.6704021094264997
User 21844 does not improve AUC. Reverting changes.
Training on augumented user 123428 20/50 current_auc = 0.6710613052076467
User 123428 AUC after training: 0.6704021094264997
User 123428 does not improve AUC. Reverting changes.
Training on augumented user 60516 21/50 current_auc = 0.6710613052076467
User 60516 AUC after training: 0.6704021094264996
User 60516 does not improve AUC. Reverting changes.
Training on augumented user 101196 22/50 current_auc = 0.6710613052076467
User 101196 AUC after training: 0.6684245220830586
User 101196 does not improve AUC. Reverting changes.
Training on augumented user 133370 23/50 current_auc = 0.6710613052076467
User 133370 AUC after training: 0.6704021094264996
User 133370 does not improve AUC. Reverting changes.
Training on augumented user 137907 24/50 current_auc = 0.6710613052076467
User 137907 AUC after training: 0.6677653263019117
User 137907 does not improve AUC. Reverting changes.
Training on augumented user 86956 25/50 current_auc = 0.6710613052076467
User 86956 AUC after training: 0.6684245220830587
User 86956 does not improve AUC. Reverting changes.
Training on augumented user 59273 26/50 current_auc = 0.6710613052076467
User 59273 AUC after training: 0.6710613052076466
User 59273 does not improve AUC. Reverting changes.
Training on augumented user 91376 27/50 current_auc = 0.6710613052076467
User 91376 AUC after training: 0.6690837178642056
User 91376 does not improve AUC. Reverting changes.
Training on augumented user 29616 28/50 current_auc = 0.6710613052076467
User 29616 AUC after training: 0.6677653263019117
User 29616 does not improve AUC. Reverting changes.
Training on augumented user 94284 29/50 current_auc = 0.6710613052076467
User 94284 AUC after training: 0.6671061305207647
User 94284 does not improve AUC. Reverting changes.
Training on augumented user 8879 30/50 current_auc = 0.6710613052076467
User 8879 AUC after training: 0.6671061305207646
User 8879 does not improve AUC. Reverting changes.
Training on augumented user 97914 31/50 current_auc = 0.6710613052076467
User 97914 AUC after training: 0.6704021094264997
User 97914 does not improve AUC. Reverting changes.
Training on augumented user 85257 32/50 current_auc = 0.6710613052076467
User 85257 AUC after training: 0.6671061305207646
User 85257 does not improve AUC. Reverting changes.
Training on augumented user 107263 33/50 current_auc = 0.6710613052076467
User 107263 AUC after training: 0.6690837178642056
User 107263 does not improve AUC. Reverting changes.
Training on augumented user 13948 34/50 current_auc = 0.6710613052076467
User 13948 AUC after training: 0.6657877389584707
User 13948 does not improve AUC. Reverting changes.
Training on augumented user 98220 35/50 current_auc = 0.6710613052076467
User 98220 AUC after training: 0.6697429136453527
User 98220 does not improve AUC. Reverting changes.
Training on augumented user 69599 36/50 current_auc = 0.6710613052076467
User 69599 AUC after training: 0.6684245220830586
User 69599 does not improve AUC. Reverting changes.
Training on augumented user 137088 37/50 current_auc = 0.6710613052076467
User 137088 AUC after training: 0.6697429136453527
User 137088 does not improve AUC. Reverting changes.
Training on augumented user 74964 38/50 current_auc = 0.6710613052076467
User 74964 AUC after training: 0.6690837178642057
User 74964 does not improve AUC. Reverting changes.
Training on augumented user 57918 39/50 current_auc = 0.6710613052076467
User 57918 AUC after training: 0.6684245220830587
User 57918 does not improve AUC. Reverting changes.
Training on augumented user 82241 40/50 current_auc = 0.6710613052076467
User 82241 AUC after training: 0.6677653263019117
User 82241 does not improve AUC. Reverting changes.
Training on augumented user 90155 41/50 current_auc = 0.6710613052076467
User 90155 AUC after training: 0.6677653263019117
User 90155 does not improve AUC. Reverting changes.
Training on augumented user 129685 42/50 current_auc = 0.6710613052076467
User 129685 AUC after training: 0.6717205009887937
User 129685 improves AUC. Keeping the model.
Training on augumented user 74255 43/50 current_auc = 0.6717205009887937
User 74255 AUC after training: 0.6704021094264997
User 74255 does not improve AUC. Reverting changes.
Training on augumented user 88284 44/50 current_auc = 0.6717205009887937
User 88284 AUC after training: 0.6697429136453527
User 88284 does not improve AUC. Reverting changes.
Training on augumented user 88845 45/50 current_auc = 0.6717205009887937
User 88845 AUC after training: 0.6704021094264997
User 88845 does not improve AUC. Reverting changes.
Training on augumented user 83699 46/50 current_auc = 0.6717205009887937
User 83699 AUC after training: 0.6690837178642056
User 83699 does not improve AUC. Reverting changes.
Training on augumented user 38702 47/50 current_auc = 0.6717205009887937
User 38702 AUC after training: 0.6651285431773236
User 38702 does not improve AUC. Reverting changes.
Training on augumented user 122691 48/50 current_auc = 0.6717205009887937
User 122691 AUC after training: 0.6697429136453527
User 122691 does not improve AUC. Reverting changes.
Training on augumented user 73555 49/50 current_auc = 0.6717205009887937
User 73555 AUC after training: 0.6704021094264997
User 73555 does not improve AUC. Reverting changes.
[2024-12-02 18:22:03.800586] start test user 2051 79/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:22:04.221689] start test user 2051 79/568 recall augumented users by random, augumented_users = [41179, 51059, 117733, 137022, 70570, 134240, 126872, 47838, 106909, 76322, 106142, 952, 130550, 41689, 127233, 86188, 122655, 54512, 16738, 32346, 56253, 29716, 134110, 127804, 105489, 19615, 75567, 130442, 127175, 23118, 98627, 16985, 7028, 53575, 54524, 15553, 59498, 100304, 15351, 96702, 131996, 57116, 62649, 34110, 50790, 20293, 53610, 49030, 19420, 95255]
[2024-12-02 18:22:04.236571] user = 2051 Cloud 79/568
[2024-12-02 18:22:04.258272] user = 2051 Local 79/568
[2024-12-02 18:22:04.327553] user = 2051 Local+ 79/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:22:06.122246] user = 2051 MPDA- 79/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7166666666666667
Training on augumented user 41179 0/50 current_auc = 0.7166666666666667
User 41179 AUC after training: 0.7166666666666667
User 41179 does not improve AUC. Reverting changes.
Training on augumented user 51059 1/50 current_auc = 0.7166666666666667
User 51059 AUC after training: 0.7166666666666667
User 51059 does not improve AUC. Reverting changes.
Training on augumented user 117733 2/50 current_auc = 0.7166666666666667
User 117733 AUC after training: 0.7333333333333334
User 117733 improves AUC. Keeping the model.
Training on augumented user 137022 3/50 current_auc = 0.7333333333333334
User 137022 AUC after training: 0.7333333333333334
User 137022 does not improve AUC. Reverting changes.
Training on augumented user 70570 4/50 current_auc = 0.7333333333333334
User 70570 AUC after training: 0.7083333333333333
User 70570 does not improve AUC. Reverting changes.
Training on augumented user 134240 5/50 current_auc = 0.7333333333333334
User 134240 AUC after training: 0.7166666666666667
User 134240 does not improve AUC. Reverting changes.
Training on augumented user 126872 6/50 current_auc = 0.7333333333333334
User 126872 AUC after training: 0.7166666666666667
User 126872 does not improve AUC. Reverting changes.
Training on augumented user 47838 7/50 current_auc = 0.7333333333333334
User 47838 AUC after training: 0.7250000000000001
User 47838 does not improve AUC. Reverting changes.
Training on augumented user 106909 8/50 current_auc = 0.7333333333333334
User 106909 AUC after training: 0.7083333333333333
User 106909 does not improve AUC. Reverting changes.
Training on augumented user 76322 9/50 current_auc = 0.7333333333333334
User 76322 AUC after training: 0.7166666666666667
User 76322 does not improve AUC. Reverting changes.
Training on augumented user 106142 10/50 current_auc = 0.7333333333333334
User 106142 AUC after training: 0.7333333333333334
User 106142 does not improve AUC. Reverting changes.
Training on augumented user 952 11/50 current_auc = 0.7333333333333334
User 952 AUC after training: 0.7083333333333333
User 952 does not improve AUC. Reverting changes.
Training on augumented user 130550 12/50 current_auc = 0.7333333333333334
User 130550 AUC after training: 0.7166666666666667
User 130550 does not improve AUC. Reverting changes.
Training on augumented user 41689 13/50 current_auc = 0.7333333333333334
User 41689 AUC after training: 0.7166666666666667
User 41689 does not improve AUC. Reverting changes.
Training on augumented user 127233 14/50 current_auc = 0.7333333333333334
User 127233 AUC after training: 0.7166666666666667
User 127233 does not improve AUC. Reverting changes.
Training on augumented user 86188 15/50 current_auc = 0.7333333333333334
User 86188 AUC after training: 0.7166666666666667
User 86188 does not improve AUC. Reverting changes.
Training on augumented user 122655 16/50 current_auc = 0.7333333333333334
User 122655 AUC after training: 0.7166666666666667
User 122655 does not improve AUC. Reverting changes.
Training on augumented user 54512 17/50 current_auc = 0.7333333333333334
User 54512 AUC after training: 0.7166666666666667
User 54512 does not improve AUC. Reverting changes.
Training on augumented user 16738 18/50 current_auc = 0.7333333333333334
User 16738 AUC after training: 0.7083333333333333
User 16738 does not improve AUC. Reverting changes.
Training on augumented user 32346 19/50 current_auc = 0.7333333333333334
User 32346 AUC after training: 0.7333333333333334
User 32346 does not improve AUC. Reverting changes.
Training on augumented user 56253 20/50 current_auc = 0.7333333333333334
User 56253 AUC after training: 0.7166666666666667
User 56253 does not improve AUC. Reverting changes.
Training on augumented user 29716 21/50 current_auc = 0.7333333333333334
User 29716 AUC after training: 0.7333333333333334
User 29716 does not improve AUC. Reverting changes.
Training on augumented user 134110 22/50 current_auc = 0.7333333333333334
User 134110 AUC after training: 0.7083333333333333
User 134110 does not improve AUC. Reverting changes.
Training on augumented user 127804 23/50 current_auc = 0.7333333333333334
User 127804 AUC after training: 0.7166666666666667
User 127804 does not improve AUC. Reverting changes.
Training on augumented user 105489 24/50 current_auc = 0.7333333333333334
User 105489 AUC after training: 0.7166666666666667
User 105489 does not improve AUC. Reverting changes.
Training on augumented user 19615 25/50 current_auc = 0.7333333333333334
User 19615 AUC after training: 0.7083333333333333
User 19615 does not improve AUC. Reverting changes.
Training on augumented user 75567 26/50 current_auc = 0.7333333333333334
User 75567 AUC after training: 0.7083333333333333
User 75567 does not improve AUC. Reverting changes.
Training on augumented user 130442 27/50 current_auc = 0.7333333333333334
User 130442 AUC after training: 0.7083333333333333
User 130442 does not improve AUC. Reverting changes.
Training on augumented user 127175 28/50 current_auc = 0.7333333333333334
User 127175 AUC after training: 0.7333333333333334
User 127175 does not improve AUC. Reverting changes.
Training on augumented user 23118 29/50 current_auc = 0.7333333333333334
User 23118 AUC after training: 0.7333333333333334
User 23118 does not improve AUC. Reverting changes.
Training on augumented user 98627 30/50 current_auc = 0.7333333333333334
User 98627 AUC after training: 0.7166666666666667
User 98627 does not improve AUC. Reverting changes.
Training on augumented user 16985 31/50 current_auc = 0.7333333333333334
User 16985 AUC after training: 0.7166666666666667
User 16985 does not improve AUC. Reverting changes.
Training on augumented user 7028 32/50 current_auc = 0.7333333333333334
User 7028 AUC after training: 0.7083333333333333
User 7028 does not improve AUC. Reverting changes.
Training on augumented user 53575 33/50 current_auc = 0.7333333333333334
User 53575 AUC after training: 0.7333333333333334
User 53575 does not improve AUC. Reverting changes.
Training on augumented user 54524 34/50 current_auc = 0.7333333333333334
User 54524 AUC after training: 0.7333333333333334
User 54524 does not improve AUC. Reverting changes.
Training on augumented user 15553 35/50 current_auc = 0.7333333333333334
User 15553 AUC after training: 0.7083333333333333
User 15553 does not improve AUC. Reverting changes.
Training on augumented user 59498 36/50 current_auc = 0.7333333333333334
User 59498 AUC after training: 0.7166666666666667
User 59498 does not improve AUC. Reverting changes.
Training on augumented user 100304 37/50 current_auc = 0.7333333333333334
User 100304 AUC after training: 0.7083333333333333
User 100304 does not improve AUC. Reverting changes.
Training on augumented user 15351 38/50 current_auc = 0.7333333333333334
User 15351 AUC after training: 0.7333333333333334
User 15351 does not improve AUC. Reverting changes.
Training on augumented user 96702 39/50 current_auc = 0.7333333333333334
User 96702 AUC after training: 0.7333333333333334
User 96702 does not improve AUC. Reverting changes.
Training on augumented user 131996 40/50 current_auc = 0.7333333333333334
User 131996 AUC after training: 0.7333333333333334
User 131996 does not improve AUC. Reverting changes.
Training on augumented user 57116 41/50 current_auc = 0.7333333333333334
User 57116 AUC after training: 0.7250000000000001
User 57116 does not improve AUC. Reverting changes.
Training on augumented user 62649 42/50 current_auc = 0.7333333333333334
User 62649 AUC after training: 0.7083333333333333
User 62649 does not improve AUC. Reverting changes.
Training on augumented user 34110 43/50 current_auc = 0.7333333333333334
User 34110 AUC after training: 0.7333333333333334
User 34110 does not improve AUC. Reverting changes.
Training on augumented user 50790 44/50 current_auc = 0.7333333333333334
User 50790 AUC after training: 0.7333333333333334
User 50790 does not improve AUC. Reverting changes.
Training on augumented user 20293 45/50 current_auc = 0.7333333333333334
User 20293 AUC after training: 0.7083333333333333
User 20293 does not improve AUC. Reverting changes.
Training on augumented user 53610 46/50 current_auc = 0.7333333333333334
User 53610 AUC after training: 0.7083333333333333
User 53610 does not improve AUC. Reverting changes.
Training on augumented user 49030 47/50 current_auc = 0.7333333333333334
User 49030 AUC after training: 0.7250000000000001
User 49030 does not improve AUC. Reverting changes.
Training on augumented user 19420 48/50 current_auc = 0.7333333333333334
User 19420 AUC after training: 0.7333333333333334
User 19420 does not improve AUC. Reverting changes.
Training on augumented user 95255 49/50 current_auc = 0.7333333333333334
User 95255 AUC after training: 0.7333333333333334
User 95255 does not improve AUC. Reverting changes.
[2024-12-02 18:22:33.405107] start test user 2068 80/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:22:33.836038] start test user 2068 80/568 recall augumented users by random, augumented_users = [120463, 39904, 67211, 108129, 25013, 93303, 124617, 107328, 28243, 120305, 34691, 112279, 75951, 82080, 104430, 101796, 25702, 68904, 95671, 135178, 1327, 5748, 83624, 5391, 62672, 43478, 70778, 101964, 85961, 18090, 77951, 131503, 135980, 21808, 47271, 8942, 15194, 109717, 78164, 83749, 65134, 124036, 43379, 84740, 16483, 15250, 20780, 69843, 80116, 1981]
[2024-12-02 18:22:33.851027] user = 2068 Cloud 80/568
[2024-12-02 18:22:33.860149] user = 2068 Local 80/568
[2024-12-02 18:22:33.943580] user = 2068 Local+ 80/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:22:36.614777] user = 2068 MPDA- 80/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.2857142857142857
Training on augumented user 120463 0/50 current_auc = 0.2857142857142857
User 120463 AUC after training: 0.2857142857142857
User 120463 does not improve AUC. Reverting changes.
Training on augumented user 39904 1/50 current_auc = 0.2857142857142857
User 39904 AUC after training: 0.2857142857142857
User 39904 does not improve AUC. Reverting changes.
Training on augumented user 67211 2/50 current_auc = 0.2857142857142857
User 67211 AUC after training: 0.2857142857142857
User 67211 does not improve AUC. Reverting changes.
Training on augumented user 108129 3/50 current_auc = 0.2857142857142857
User 108129 AUC after training: 0.2857142857142857
User 108129 does not improve AUC. Reverting changes.
Training on augumented user 25013 4/50 current_auc = 0.2857142857142857
User 25013 AUC after training: 0.2857142857142857
User 25013 does not improve AUC. Reverting changes.
Training on augumented user 93303 5/50 current_auc = 0.2857142857142857
User 93303 AUC after training: 0.2857142857142857
User 93303 does not improve AUC. Reverting changes.
Training on augumented user 124617 6/50 current_auc = 0.2857142857142857
User 124617 AUC after training: 0.2857142857142857
User 124617 does not improve AUC. Reverting changes.
Training on augumented user 107328 7/50 current_auc = 0.2857142857142857
User 107328 AUC after training: 0.2857142857142857
User 107328 does not improve AUC. Reverting changes.
Training on augumented user 28243 8/50 current_auc = 0.2857142857142857
User 28243 AUC after training: 0.2857142857142857
User 28243 does not improve AUC. Reverting changes.
Training on augumented user 120305 9/50 current_auc = 0.2857142857142857
User 120305 AUC after training: 0.2857142857142857
User 120305 does not improve AUC. Reverting changes.
Training on augumented user 34691 10/50 current_auc = 0.2857142857142857
User 34691 AUC after training: 0.2857142857142857
User 34691 does not improve AUC. Reverting changes.
Training on augumented user 112279 11/50 current_auc = 0.2857142857142857
User 112279 AUC after training: 0.2857142857142857
User 112279 does not improve AUC. Reverting changes.
Training on augumented user 75951 12/50 current_auc = 0.2857142857142857
User 75951 AUC after training: 0.2857142857142857
User 75951 does not improve AUC. Reverting changes.
Training on augumented user 82080 13/50 current_auc = 0.2857142857142857
User 82080 AUC after training: 0.2857142857142857
User 82080 does not improve AUC. Reverting changes.
Training on augumented user 104430 14/50 current_auc = 0.2857142857142857
User 104430 AUC after training: 0.2857142857142857
User 104430 does not improve AUC. Reverting changes.
Training on augumented user 101796 15/50 current_auc = 0.2857142857142857
User 101796 AUC after training: 0.2857142857142857
User 101796 does not improve AUC. Reverting changes.
Training on augumented user 25702 16/50 current_auc = 0.2857142857142857
User 25702 AUC after training: 0.2857142857142857
User 25702 does not improve AUC. Reverting changes.
Training on augumented user 68904 17/50 current_auc = 0.2857142857142857
User 68904 AUC after training: 0.2857142857142857
User 68904 does not improve AUC. Reverting changes.
Training on augumented user 95671 18/50 current_auc = 0.2857142857142857
User 95671 AUC after training: 0.2857142857142857
User 95671 does not improve AUC. Reverting changes.
Training on augumented user 135178 19/50 current_auc = 0.2857142857142857
User 135178 AUC after training: 0.2857142857142857
User 135178 does not improve AUC. Reverting changes.
Training on augumented user 1327 20/50 current_auc = 0.2857142857142857
User 1327 AUC after training: 0.2857142857142857
User 1327 does not improve AUC. Reverting changes.
Training on augumented user 5748 21/50 current_auc = 0.2857142857142857
User 5748 AUC after training: 0.2857142857142857
User 5748 does not improve AUC. Reverting changes.
Training on augumented user 83624 22/50 current_auc = 0.2857142857142857
User 83624 AUC after training: 0.2857142857142857
User 83624 does not improve AUC. Reverting changes.
Training on augumented user 5391 23/50 current_auc = 0.2857142857142857
User 5391 AUC after training: 0.2857142857142857
User 5391 does not improve AUC. Reverting changes.
Training on augumented user 62672 24/50 current_auc = 0.2857142857142857
User 62672 AUC after training: 0.2857142857142857
User 62672 does not improve AUC. Reverting changes.
Training on augumented user 43478 25/50 current_auc = 0.2857142857142857
User 43478 AUC after training: 0.2857142857142857
User 43478 does not improve AUC. Reverting changes.
Training on augumented user 70778 26/50 current_auc = 0.2857142857142857
User 70778 AUC after training: 0.2857142857142857
User 70778 does not improve AUC. Reverting changes.
Training on augumented user 101964 27/50 current_auc = 0.2857142857142857
User 101964 AUC after training: 0.2857142857142857
User 101964 does not improve AUC. Reverting changes.
Training on augumented user 85961 28/50 current_auc = 0.2857142857142857
User 85961 AUC after training: 0.2857142857142857
User 85961 does not improve AUC. Reverting changes.
Training on augumented user 18090 29/50 current_auc = 0.2857142857142857
User 18090 AUC after training: 0.2857142857142857
User 18090 does not improve AUC. Reverting changes.
Training on augumented user 77951 30/50 current_auc = 0.2857142857142857
User 77951 AUC after training: 0.2857142857142857
User 77951 does not improve AUC. Reverting changes.
Training on augumented user 131503 31/50 current_auc = 0.2857142857142857
User 131503 AUC after training: 0.2857142857142857
User 131503 does not improve AUC. Reverting changes.
Training on augumented user 135980 32/50 current_auc = 0.2857142857142857
User 135980 AUC after training: 0.2857142857142857
User 135980 does not improve AUC. Reverting changes.
Training on augumented user 21808 33/50 current_auc = 0.2857142857142857
User 21808 AUC after training: 0.2857142857142857
User 21808 does not improve AUC. Reverting changes.
Training on augumented user 47271 34/50 current_auc = 0.2857142857142857
User 47271 AUC after training: 0.2857142857142857
User 47271 does not improve AUC. Reverting changes.
Training on augumented user 8942 35/50 current_auc = 0.2857142857142857
User 8942 AUC after training: 0.2857142857142857
User 8942 does not improve AUC. Reverting changes.
Training on augumented user 15194 36/50 current_auc = 0.2857142857142857
User 15194 AUC after training: 0.2857142857142857
User 15194 does not improve AUC. Reverting changes.
Training on augumented user 109717 37/50 current_auc = 0.2857142857142857
User 109717 AUC after training: 0.2857142857142857
User 109717 does not improve AUC. Reverting changes.
Training on augumented user 78164 38/50 current_auc = 0.2857142857142857
User 78164 AUC after training: 0.2857142857142857
User 78164 does not improve AUC. Reverting changes.
Training on augumented user 83749 39/50 current_auc = 0.2857142857142857
User 83749 AUC after training: 0.2857142857142857
User 83749 does not improve AUC. Reverting changes.
Training on augumented user 65134 40/50 current_auc = 0.2857142857142857
User 65134 AUC after training: 0.2857142857142857
User 65134 does not improve AUC. Reverting changes.
Training on augumented user 124036 41/50 current_auc = 0.2857142857142857
User 124036 AUC after training: 0.2857142857142857
User 124036 does not improve AUC. Reverting changes.
Training on augumented user 43379 42/50 current_auc = 0.2857142857142857
User 43379 AUC after training: 0.2857142857142857
User 43379 does not improve AUC. Reverting changes.
Training on augumented user 84740 43/50 current_auc = 0.2857142857142857
User 84740 AUC after training: 0.2857142857142857
User 84740 does not improve AUC. Reverting changes.
Training on augumented user 16483 44/50 current_auc = 0.2857142857142857
User 16483 AUC after training: 0.2857142857142857
User 16483 does not improve AUC. Reverting changes.
Training on augumented user 15250 45/50 current_auc = 0.2857142857142857
User 15250 AUC after training: 0.2857142857142857
User 15250 does not improve AUC. Reverting changes.
Training on augumented user 20780 46/50 current_auc = 0.2857142857142857
User 20780 AUC after training: 0.2857142857142857
User 20780 does not improve AUC. Reverting changes.
Training on augumented user 69843 47/50 current_auc = 0.2857142857142857
User 69843 AUC after training: 0.2857142857142857
User 69843 does not improve AUC. Reverting changes.
Training on augumented user 80116 48/50 current_auc = 0.2857142857142857
User 80116 AUC after training: 0.2857142857142857
User 80116 does not improve AUC. Reverting changes.
Training on augumented user 1981 49/50 current_auc = 0.2857142857142857
User 1981 AUC after training: 0.2857142857142857
User 1981 does not improve AUC. Reverting changes.
[2024-12-02 18:23:06.742691] start test user 2092 81/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:23:07.165688] start test user 2092 81/568 recall augumented users by random, augumented_users = [22457, 23967, 379, 39894, 78697, 85144, 98538, 91609, 3023, 25653, 89053, 62108, 121521, 78996, 116525, 70441, 70753, 55023, 63517, 98202, 42944, 113991, 68138, 79774, 57653, 42018, 22036, 20986, 57628, 32051, 1835, 12695, 99266, 130623, 126932, 63704, 59585, 6689, 1037, 23906, 13353, 52265, 52667, 103436, 50760, 66749, 23110, 112425, 99847, 86856]
[2024-12-02 18:23:07.180714] user = 2092 Cloud 81/568
[2024-12-02 18:23:07.190653] user = 2092 Local 81/568
[2024-12-02 18:23:07.218709] user = 2092 Local+ 81/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:23:09.425511] user = 2092 MPDA- 81/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4880382775119617
Training on augumented user 22457 0/50 current_auc = 0.4880382775119617
User 22457 AUC after training: 0.4880382775119617
User 22457 does not improve AUC. Reverting changes.
Training on augumented user 23967 1/50 current_auc = 0.4880382775119617
User 23967 AUC after training: 0.4880382775119617
User 23967 does not improve AUC. Reverting changes.
Training on augumented user 379 2/50 current_auc = 0.4880382775119617
User 379 AUC after training: 0.4880382775119617
User 379 does not improve AUC. Reverting changes.
Training on augumented user 39894 3/50 current_auc = 0.4880382775119617
User 39894 AUC after training: 0.4880382775119617
User 39894 does not improve AUC. Reverting changes.
Training on augumented user 78697 4/50 current_auc = 0.4880382775119617
User 78697 AUC after training: 0.4880382775119617
User 78697 does not improve AUC. Reverting changes.
Training on augumented user 85144 5/50 current_auc = 0.4880382775119617
User 85144 AUC after training: 0.4880382775119617
User 85144 does not improve AUC. Reverting changes.
Training on augumented user 98538 6/50 current_auc = 0.4880382775119617
User 98538 AUC after training: 0.4904306220095694
User 98538 improves AUC. Keeping the model.
Training on augumented user 91609 7/50 current_auc = 0.4904306220095694
User 91609 AUC after training: 0.4904306220095694
User 91609 does not improve AUC. Reverting changes.
Training on augumented user 3023 8/50 current_auc = 0.4904306220095694
User 3023 AUC after training: 0.4880382775119617
User 3023 does not improve AUC. Reverting changes.
Training on augumented user 25653 9/50 current_auc = 0.4904306220095694
User 25653 AUC after training: 0.4880382775119617
User 25653 does not improve AUC. Reverting changes.
Training on augumented user 89053 10/50 current_auc = 0.4904306220095694
User 89053 AUC after training: 0.4904306220095694
User 89053 does not improve AUC. Reverting changes.
Training on augumented user 62108 11/50 current_auc = 0.4904306220095694
User 62108 AUC after training: 0.4904306220095694
User 62108 does not improve AUC. Reverting changes.
Training on augumented user 121521 12/50 current_auc = 0.4904306220095694
User 121521 AUC after training: 0.4880382775119617
User 121521 does not improve AUC. Reverting changes.
Training on augumented user 78996 13/50 current_auc = 0.4904306220095694
User 78996 AUC after training: 0.4880382775119617
User 78996 does not improve AUC. Reverting changes.
Training on augumented user 116525 14/50 current_auc = 0.4904306220095694
User 116525 AUC after training: 0.4880382775119617
User 116525 does not improve AUC. Reverting changes.
Training on augumented user 70441 15/50 current_auc = 0.4904306220095694
User 70441 AUC after training: 0.4880382775119617
User 70441 does not improve AUC. Reverting changes.
Training on augumented user 70753 16/50 current_auc = 0.4904306220095694
User 70753 AUC after training: 0.4904306220095694
User 70753 does not improve AUC. Reverting changes.
Training on augumented user 55023 17/50 current_auc = 0.4904306220095694
User 55023 AUC after training: 0.4880382775119617
User 55023 does not improve AUC. Reverting changes.
Training on augumented user 63517 18/50 current_auc = 0.4904306220095694
User 63517 AUC after training: 0.4880382775119617
User 63517 does not improve AUC. Reverting changes.
Training on augumented user 98202 19/50 current_auc = 0.4904306220095694
User 98202 AUC after training: 0.4904306220095694
User 98202 does not improve AUC. Reverting changes.
Training on augumented user 42944 20/50 current_auc = 0.4904306220095694
User 42944 AUC after training: 0.4904306220095694
User 42944 does not improve AUC. Reverting changes.
Training on augumented user 113991 21/50 current_auc = 0.4904306220095694
User 113991 AUC after training: 0.4880382775119617
User 113991 does not improve AUC. Reverting changes.
Training on augumented user 68138 22/50 current_auc = 0.4904306220095694
User 68138 AUC after training: 0.48564593301435405
User 68138 does not improve AUC. Reverting changes.
Training on augumented user 79774 23/50 current_auc = 0.4904306220095694
User 79774 AUC after training: 0.4904306220095694
User 79774 does not improve AUC. Reverting changes.
Training on augumented user 57653 24/50 current_auc = 0.4904306220095694
User 57653 AUC after training: 0.4904306220095694
User 57653 does not improve AUC. Reverting changes.
Training on augumented user 42018 25/50 current_auc = 0.4904306220095694
User 42018 AUC after training: 0.4904306220095694
User 42018 does not improve AUC. Reverting changes.
Training on augumented user 22036 26/50 current_auc = 0.4904306220095694
User 22036 AUC after training: 0.4904306220095694
User 22036 does not improve AUC. Reverting changes.
Training on augumented user 20986 27/50 current_auc = 0.4904306220095694
User 20986 AUC after training: 0.48564593301435405
User 20986 does not improve AUC. Reverting changes.
Training on augumented user 57628 28/50 current_auc = 0.4904306220095694
User 57628 AUC after training: 0.4904306220095694
User 57628 does not improve AUC. Reverting changes.
Training on augumented user 32051 29/50 current_auc = 0.4904306220095694
User 32051 AUC after training: 0.4904306220095694
User 32051 does not improve AUC. Reverting changes.
Training on augumented user 1835 30/50 current_auc = 0.4904306220095694
User 1835 AUC after training: 0.4880382775119617
User 1835 does not improve AUC. Reverting changes.
Training on augumented user 12695 31/50 current_auc = 0.4904306220095694
User 12695 AUC after training: 0.4904306220095694
User 12695 does not improve AUC. Reverting changes.
Training on augumented user 99266 32/50 current_auc = 0.4904306220095694
User 99266 AUC after training: 0.4880382775119617
User 99266 does not improve AUC. Reverting changes.
Training on augumented user 130623 33/50 current_auc = 0.4904306220095694
User 130623 AUC after training: 0.4904306220095694
User 130623 does not improve AUC. Reverting changes.
Training on augumented user 126932 34/50 current_auc = 0.4904306220095694
User 126932 AUC after training: 0.4880382775119617
User 126932 does not improve AUC. Reverting changes.
Training on augumented user 63704 35/50 current_auc = 0.4904306220095694
User 63704 AUC after training: 0.48564593301435405
User 63704 does not improve AUC. Reverting changes.
Training on augumented user 59585 36/50 current_auc = 0.4904306220095694
User 59585 AUC after training: 0.4904306220095694
User 59585 does not improve AUC. Reverting changes.
Training on augumented user 6689 37/50 current_auc = 0.4904306220095694
User 6689 AUC after training: 0.4904306220095694
User 6689 does not improve AUC. Reverting changes.
Training on augumented user 1037 38/50 current_auc = 0.4904306220095694
User 1037 AUC after training: 0.4880382775119617
User 1037 does not improve AUC. Reverting changes.
Training on augumented user 23906 39/50 current_auc = 0.4904306220095694
User 23906 AUC after training: 0.4880382775119617
User 23906 does not improve AUC. Reverting changes.
Training on augumented user 13353 40/50 current_auc = 0.4904306220095694
User 13353 AUC after training: 0.4880382775119617
User 13353 does not improve AUC. Reverting changes.
Training on augumented user 52265 41/50 current_auc = 0.4904306220095694
User 52265 AUC after training: 0.4904306220095694
User 52265 does not improve AUC. Reverting changes.
Training on augumented user 52667 42/50 current_auc = 0.4904306220095694
User 52667 AUC after training: 0.4880382775119617
User 52667 does not improve AUC. Reverting changes.
Training on augumented user 103436 43/50 current_auc = 0.4904306220095694
User 103436 AUC after training: 0.4880382775119617
User 103436 does not improve AUC. Reverting changes.
Training on augumented user 50760 44/50 current_auc = 0.4904306220095694
User 50760 AUC after training: 0.4904306220095694
User 50760 does not improve AUC. Reverting changes.
Training on augumented user 66749 45/50 current_auc = 0.4904306220095694
User 66749 AUC after training: 0.48564593301435405
User 66749 does not improve AUC. Reverting changes.
Training on augumented user 23110 46/50 current_auc = 0.4904306220095694
User 23110 AUC after training: 0.4880382775119617
User 23110 does not improve AUC. Reverting changes.
Training on augumented user 112425 47/50 current_auc = 0.4904306220095694
User 112425 AUC after training: 0.4904306220095694
User 112425 does not improve AUC. Reverting changes.
Training on augumented user 99847 48/50 current_auc = 0.4904306220095694
User 99847 AUC after training: 0.4904306220095694
User 99847 does not improve AUC. Reverting changes.
Training on augumented user 86856 49/50 current_auc = 0.4904306220095694
User 86856 AUC after training: 0.4904306220095694
User 86856 does not improve AUC. Reverting changes.
[2024-12-02 18:23:39.426521] start test user 2120 82/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:23:39.878249] start test user 2120 82/568 recall augumented users by random, augumented_users = [26951, 25019, 127039, 72849, 113002, 83534, 108394, 85079, 48779, 113672, 106093, 32104, 98810, 11967, 81507, 31073, 57317, 93380, 6275, 117472, 122938, 127925, 62623, 85011, 83753, 4619, 94605, 65562, 57818, 74609, 46856, 35683, 65047, 78995, 122362, 121663, 134900, 39147, 113165, 48914, 69626, 73232, 44957, 3803, 87504, 117711, 7118, 1138, 26826, 67096]
[2024-12-02 18:23:39.892830] user = 2120 Cloud 82/568
[2024-12-02 18:23:39.902402] user = 2120 Local 82/568
[2024-12-02 18:23:39.927747] user = 2120 Local+ 82/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:23:42.029444] user = 2120 MPDA- 82/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.46923076923076923
Training on augumented user 26951 0/50 current_auc = 0.46923076923076923
User 26951 AUC after training: 0.46923076923076923
User 26951 does not improve AUC. Reverting changes.
Training on augumented user 25019 1/50 current_auc = 0.46923076923076923
User 25019 AUC after training: 0.46923076923076923
User 25019 does not improve AUC. Reverting changes.
Training on augumented user 127039 2/50 current_auc = 0.46923076923076923
User 127039 AUC after training: 0.46923076923076923
User 127039 does not improve AUC. Reverting changes.
Training on augumented user 72849 3/50 current_auc = 0.46923076923076923
User 72849 AUC after training: 0.46923076923076923
User 72849 does not improve AUC. Reverting changes.
Training on augumented user 113002 4/50 current_auc = 0.46923076923076923
User 113002 AUC after training: 0.46923076923076923
User 113002 does not improve AUC. Reverting changes.
Training on augumented user 83534 5/50 current_auc = 0.46923076923076923
User 83534 AUC after training: 0.47692307692307695
User 83534 improves AUC. Keeping the model.
Training on augumented user 108394 6/50 current_auc = 0.47692307692307695
User 108394 AUC after training: 0.47692307692307695
User 108394 does not improve AUC. Reverting changes.
Training on augumented user 85079 7/50 current_auc = 0.47692307692307695
User 85079 AUC after training: 0.47692307692307695
User 85079 does not improve AUC. Reverting changes.
Training on augumented user 48779 8/50 current_auc = 0.47692307692307695
User 48779 AUC after training: 0.47692307692307695
User 48779 does not improve AUC. Reverting changes.
Training on augumented user 113672 9/50 current_auc = 0.47692307692307695
User 113672 AUC after training: 0.47692307692307695
User 113672 does not improve AUC. Reverting changes.
Training on augumented user 106093 10/50 current_auc = 0.47692307692307695
User 106093 AUC after training: 0.47692307692307695
User 106093 does not improve AUC. Reverting changes.
Training on augumented user 32104 11/50 current_auc = 0.47692307692307695
User 32104 AUC after training: 0.47692307692307695
User 32104 does not improve AUC. Reverting changes.
Training on augumented user 98810 12/50 current_auc = 0.47692307692307695
User 98810 AUC after training: 0.47692307692307695
User 98810 does not improve AUC. Reverting changes.
Training on augumented user 11967 13/50 current_auc = 0.47692307692307695
User 11967 AUC after training: 0.46923076923076923
User 11967 does not improve AUC. Reverting changes.
Training on augumented user 81507 14/50 current_auc = 0.47692307692307695
User 81507 AUC after training: 0.47692307692307695
User 81507 does not improve AUC. Reverting changes.
Training on augumented user 31073 15/50 current_auc = 0.47692307692307695
User 31073 AUC after training: 0.47692307692307695
User 31073 does not improve AUC. Reverting changes.
Training on augumented user 57317 16/50 current_auc = 0.47692307692307695
User 57317 AUC after training: 0.47692307692307695
User 57317 does not improve AUC. Reverting changes.
Training on augumented user 93380 17/50 current_auc = 0.47692307692307695
User 93380 AUC after training: 0.47692307692307695
User 93380 does not improve AUC. Reverting changes.
Training on augumented user 6275 18/50 current_auc = 0.47692307692307695
User 6275 AUC after training: 0.46923076923076923
User 6275 does not improve AUC. Reverting changes.
Training on augumented user 117472 19/50 current_auc = 0.47692307692307695
User 117472 AUC after training: 0.47692307692307695
User 117472 does not improve AUC. Reverting changes.
Training on augumented user 122938 20/50 current_auc = 0.47692307692307695
User 122938 AUC after training: 0.46923076923076923
User 122938 does not improve AUC. Reverting changes.
Training on augumented user 127925 21/50 current_auc = 0.47692307692307695
User 127925 AUC after training: 0.46923076923076923
User 127925 does not improve AUC. Reverting changes.
Training on augumented user 62623 22/50 current_auc = 0.47692307692307695
User 62623 AUC after training: 0.4769230769230769
User 62623 does not improve AUC. Reverting changes.
Training on augumented user 85011 23/50 current_auc = 0.47692307692307695
User 85011 AUC after training: 0.47692307692307695
User 85011 does not improve AUC. Reverting changes.
Training on augumented user 83753 24/50 current_auc = 0.47692307692307695
User 83753 AUC after training: 0.47692307692307695
User 83753 does not improve AUC. Reverting changes.
Training on augumented user 4619 25/50 current_auc = 0.47692307692307695
User 4619 AUC after training: 0.46923076923076923
User 4619 does not improve AUC. Reverting changes.
Training on augumented user 94605 26/50 current_auc = 0.47692307692307695
User 94605 AUC after training: 0.46923076923076923
User 94605 does not improve AUC. Reverting changes.
Training on augumented user 65562 27/50 current_auc = 0.47692307692307695
User 65562 AUC after training: 0.47692307692307695
User 65562 does not improve AUC. Reverting changes.
Training on augumented user 57818 28/50 current_auc = 0.47692307692307695
User 57818 AUC after training: 0.46923076923076923
User 57818 does not improve AUC. Reverting changes.
Training on augumented user 74609 29/50 current_auc = 0.47692307692307695
User 74609 AUC after training: 0.47692307692307695
User 74609 does not improve AUC. Reverting changes.
Training on augumented user 46856 30/50 current_auc = 0.47692307692307695
User 46856 AUC after training: 0.47692307692307695
User 46856 does not improve AUC. Reverting changes.
Training on augumented user 35683 31/50 current_auc = 0.47692307692307695
User 35683 AUC after training: 0.47692307692307695
User 35683 does not improve AUC. Reverting changes.
Training on augumented user 65047 32/50 current_auc = 0.47692307692307695
User 65047 AUC after training: 0.46923076923076923
User 65047 does not improve AUC. Reverting changes.
Training on augumented user 78995 33/50 current_auc = 0.47692307692307695
User 78995 AUC after training: 0.47692307692307695
User 78995 does not improve AUC. Reverting changes.
Training on augumented user 122362 34/50 current_auc = 0.47692307692307695
User 122362 AUC after training: 0.47692307692307695
User 122362 does not improve AUC. Reverting changes.
Training on augumented user 121663 35/50 current_auc = 0.47692307692307695
User 121663 AUC after training: 0.47692307692307695
User 121663 does not improve AUC. Reverting changes.
Training on augumented user 134900 36/50 current_auc = 0.47692307692307695
User 134900 AUC after training: 0.47692307692307695
User 134900 does not improve AUC. Reverting changes.
Training on augumented user 39147 37/50 current_auc = 0.47692307692307695
User 39147 AUC after training: 0.46923076923076923
User 39147 does not improve AUC. Reverting changes.
Training on augumented user 113165 38/50 current_auc = 0.47692307692307695
User 113165 AUC after training: 0.48461538461538467
User 113165 improves AUC. Keeping the model.
Training on augumented user 48914 39/50 current_auc = 0.48461538461538467
User 48914 AUC after training: 0.48461538461538467
User 48914 does not improve AUC. Reverting changes.
Training on augumented user 69626 40/50 current_auc = 0.48461538461538467
User 69626 AUC after training: 0.47692307692307695
User 69626 does not improve AUC. Reverting changes.
Training on augumented user 73232 41/50 current_auc = 0.48461538461538467
User 73232 AUC after training: 0.4769230769230769
User 73232 does not improve AUC. Reverting changes.
Training on augumented user 44957 42/50 current_auc = 0.48461538461538467
User 44957 AUC after training: 0.47692307692307695
User 44957 does not improve AUC. Reverting changes.
Training on augumented user 3803 43/50 current_auc = 0.48461538461538467
User 3803 AUC after training: 0.48461538461538467
User 3803 does not improve AUC. Reverting changes.
Training on augumented user 87504 44/50 current_auc = 0.48461538461538467
User 87504 AUC after training: 0.47692307692307695
User 87504 does not improve AUC. Reverting changes.
Training on augumented user 117711 45/50 current_auc = 0.48461538461538467
User 117711 AUC after training: 0.47692307692307695
User 117711 does not improve AUC. Reverting changes.
Training on augumented user 7118 46/50 current_auc = 0.48461538461538467
User 7118 AUC after training: 0.48461538461538467
User 7118 does not improve AUC. Reverting changes.
Training on augumented user 1138 47/50 current_auc = 0.48461538461538467
User 1138 AUC after training: 0.47692307692307695
User 1138 does not improve AUC. Reverting changes.
Training on augumented user 26826 48/50 current_auc = 0.48461538461538467
User 26826 AUC after training: 0.47692307692307695
User 26826 does not improve AUC. Reverting changes.
Training on augumented user 67096 49/50 current_auc = 0.48461538461538467
User 67096 AUC after training: 0.47692307692307695
User 67096 does not improve AUC. Reverting changes.
[2024-12-02 18:24:11.668264] start test user 2138 83/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:24:12.254702] start test user 2138 83/568 recall augumented users by random, augumented_users = [53225, 118592, 116655, 87277, 130059, 17332, 41439, 77205, 93247, 38541, 625, 56371, 54610, 65999, 51046, 131047, 121195, 59997, 15880, 35184, 186, 127005, 104677, 12477, 134193, 9073, 38513, 27814, 97278, 71790, 3014, 82147, 13904, 11728, 68879, 58717, 115269, 17175, 27545, 91530, 63221, 9870, 91012, 23025, 101373, 50864, 136159, 39923, 100814, 122256]
[2024-12-02 18:24:12.270754] user = 2138 Cloud 83/568
[2024-12-02 18:24:12.283981] user = 2138 Local 83/568
[2024-12-02 18:24:12.354533] user = 2138 Local+ 83/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:24:14.403863] user = 2138 MPDA- 83/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6038461538461539
Training on augumented user 53225 0/50 current_auc = 0.6038461538461539
User 53225 AUC after training: 0.6028846153846154
User 53225 does not improve AUC. Reverting changes.
Training on augumented user 118592 1/50 current_auc = 0.6038461538461539
User 118592 AUC after training: 0.6038461538461539
User 118592 does not improve AUC. Reverting changes.
Training on augumented user 116655 2/50 current_auc = 0.6038461538461539
User 116655 AUC after training: 0.6033653846153846
User 116655 does not improve AUC. Reverting changes.
Training on augumented user 87277 3/50 current_auc = 0.6038461538461539
User 87277 AUC after training: 0.6033653846153847
User 87277 does not improve AUC. Reverting changes.
Training on augumented user 130059 4/50 current_auc = 0.6038461538461539
User 130059 AUC after training: 0.604326923076923
User 130059 improves AUC. Keeping the model.
Training on augumented user 17332 5/50 current_auc = 0.604326923076923
User 17332 AUC after training: 0.6028846153846155
User 17332 does not improve AUC. Reverting changes.
Training on augumented user 41439 6/50 current_auc = 0.604326923076923
User 41439 AUC after training: 0.5966346153846154
User 41439 does not improve AUC. Reverting changes.
Training on augumented user 77205 7/50 current_auc = 0.604326923076923
User 77205 AUC after training: 0.6048076923076923
User 77205 improves AUC. Keeping the model.
Training on augumented user 93247 8/50 current_auc = 0.6048076923076923
User 93247 AUC after training: 0.6024038461538461
User 93247 does not improve AUC. Reverting changes.
Training on augumented user 38541 9/50 current_auc = 0.6048076923076923
User 38541 AUC after training: 0.6028846153846154
User 38541 does not improve AUC. Reverting changes.
Training on augumented user 625 10/50 current_auc = 0.6048076923076923
User 625 AUC after training: 0.6052884615384616
User 625 improves AUC. Keeping the model.
Training on augumented user 56371 11/50 current_auc = 0.6052884615384616
User 56371 AUC after training: 0.6057692307692308
User 56371 improves AUC. Keeping the model.
Training on augumented user 54610 12/50 current_auc = 0.6057692307692308
User 54610 AUC after training: 0.6038461538461538
User 54610 does not improve AUC. Reverting changes.
Training on augumented user 65999 13/50 current_auc = 0.6057692307692308
User 65999 AUC after training: 0.6028846153846155
User 65999 does not improve AUC. Reverting changes.
Training on augumented user 51046 14/50 current_auc = 0.6057692307692308
User 51046 AUC after training: 0.6052884615384616
User 51046 does not improve AUC. Reverting changes.
Training on augumented user 131047 15/50 current_auc = 0.6057692307692308
User 131047 AUC after training: 0.6048076923076924
User 131047 does not improve AUC. Reverting changes.
Training on augumented user 121195 16/50 current_auc = 0.6057692307692308
User 121195 AUC after training: 0.6052884615384616
User 121195 does not improve AUC. Reverting changes.
Training on augumented user 59997 17/50 current_auc = 0.6057692307692308
User 59997 AUC after training: 0.6057692307692308
User 59997 does not improve AUC. Reverting changes.
Training on augumented user 15880 18/50 current_auc = 0.6057692307692308
User 15880 AUC after training: 0.6048076923076923
User 15880 does not improve AUC. Reverting changes.
Training on augumented user 35184 19/50 current_auc = 0.6057692307692308
User 35184 AUC after training: 0.6048076923076923
User 35184 does not improve AUC. Reverting changes.
Training on augumented user 186 20/50 current_auc = 0.6057692307692308
User 186 AUC after training: 0.6048076923076924
User 186 does not improve AUC. Reverting changes.
Training on augumented user 127005 21/50 current_auc = 0.6057692307692308
User 127005 AUC after training: 0.60625
User 127005 improves AUC. Keeping the model.
Training on augumented user 104677 22/50 current_auc = 0.60625
User 104677 AUC after training: 0.6072115384615385
User 104677 improves AUC. Keeping the model.
Training on augumented user 12477 23/50 current_auc = 0.6072115384615385
User 12477 AUC after training: 0.60625
User 12477 does not improve AUC. Reverting changes.
Training on augumented user 134193 24/50 current_auc = 0.6072115384615385
User 134193 AUC after training: 0.6072115384615385
User 134193 does not improve AUC. Reverting changes.
Training on augumented user 9073 25/50 current_auc = 0.6072115384615385
User 9073 AUC after training: 0.6067307692307693
User 9073 does not improve AUC. Reverting changes.
Training on augumented user 38513 26/50 current_auc = 0.6072115384615385
User 38513 AUC after training: 0.6072115384615385
User 38513 does not improve AUC. Reverting changes.
Training on augumented user 27814 27/50 current_auc = 0.6072115384615385
User 27814 AUC after training: 0.6076923076923076
User 27814 improves AUC. Keeping the model.
Training on augumented user 97278 28/50 current_auc = 0.6076923076923076
User 97278 AUC after training: 0.6057692307692307
User 97278 does not improve AUC. Reverting changes.
Training on augumented user 71790 29/50 current_auc = 0.6076923076923076
User 71790 AUC after training: 0.6072115384615385
User 71790 does not improve AUC. Reverting changes.
Training on augumented user 3014 30/50 current_auc = 0.6076923076923076
User 3014 AUC after training: 0.6072115384615385
User 3014 does not improve AUC. Reverting changes.
Training on augumented user 82147 31/50 current_auc = 0.6076923076923076
User 82147 AUC after training: 0.6062500000000001
User 82147 does not improve AUC. Reverting changes.
Training on augumented user 13904 32/50 current_auc = 0.6076923076923076
User 13904 AUC after training: 0.6062500000000001
User 13904 does not improve AUC. Reverting changes.
Training on augumented user 11728 33/50 current_auc = 0.6076923076923076
User 11728 AUC after training: 0.6076923076923078
User 11728 improves AUC. Keeping the model.
Training on augumented user 68879 34/50 current_auc = 0.6076923076923078
User 68879 AUC after training: 0.6072115384615384
User 68879 does not improve AUC. Reverting changes.
Training on augumented user 58717 35/50 current_auc = 0.6076923076923078
User 58717 AUC after training: 0.6072115384615384
User 58717 does not improve AUC. Reverting changes.
Training on augumented user 115269 36/50 current_auc = 0.6076923076923078
User 115269 AUC after training: 0.6072115384615385
User 115269 does not improve AUC. Reverting changes.
Training on augumented user 17175 37/50 current_auc = 0.6076923076923078
User 17175 AUC after training: 0.6067307692307692
User 17175 does not improve AUC. Reverting changes.
Training on augumented user 27545 38/50 current_auc = 0.6076923076923078
User 27545 AUC after training: 0.6072115384615385
User 27545 does not improve AUC. Reverting changes.
Training on augumented user 91530 39/50 current_auc = 0.6076923076923078
User 91530 AUC after training: 0.6076923076923076
User 91530 does not improve AUC. Reverting changes.
Training on augumented user 63221 40/50 current_auc = 0.6076923076923078
User 63221 AUC after training: 0.6067307692307692
User 63221 does not improve AUC. Reverting changes.
Training on augumented user 9870 41/50 current_auc = 0.6076923076923078
User 9870 AUC after training: 0.6076923076923076
User 9870 does not improve AUC. Reverting changes.
Training on augumented user 91012 42/50 current_auc = 0.6076923076923078
User 91012 AUC after training: 0.6038461538461539
User 91012 does not improve AUC. Reverting changes.
Training on augumented user 23025 43/50 current_auc = 0.6076923076923078
User 23025 AUC after training: 0.6067307692307692
User 23025 does not improve AUC. Reverting changes.
Training on augumented user 101373 44/50 current_auc = 0.6076923076923078
User 101373 AUC after training: 0.6120192307692308
User 101373 improves AUC. Keeping the model.
Training on augumented user 50864 45/50 current_auc = 0.6120192307692308
User 50864 AUC after training: 0.6125
User 50864 improves AUC. Keeping the model.
Training on augumented user 136159 46/50 current_auc = 0.6125
User 136159 AUC after training: 0.6115384615384616
User 136159 does not improve AUC. Reverting changes.
Training on augumented user 39923 47/50 current_auc = 0.6125
User 39923 AUC after training: 0.6125
User 39923 does not improve AUC. Reverting changes.
Training on augumented user 100814 48/50 current_auc = 0.6125
User 100814 AUC after training: 0.6120192307692308
User 100814 does not improve AUC. Reverting changes.
Training on augumented user 122256 49/50 current_auc = 0.6125
User 122256 AUC after training: 0.6115384615384616
User 122256 does not improve AUC. Reverting changes.
[2024-12-02 18:24:40.117441] start test user 2161 84/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:24:40.539226] start test user 2161 84/568 recall augumented users by random, augumented_users = [16529, 8381, 72269, 71134, 133019, 108572, 68980, 51762, 110105, 66890, 40781, 48132, 88084, 59714, 45386, 45329, 87694, 79464, 82463, 86766, 83682, 40030, 38977, 87312, 54468, 26019, 67843, 89649, 47780, 68616, 12664, 104506, 77182, 125425, 15635, 122774, 112093, 28498, 31597, 16323, 90624, 76886, 111823, 71430, 97624, 72560, 68694, 114111, 64598, 33797]
[2024-12-02 18:24:40.554781] user = 2161 Cloud 84/568
[2024-12-02 18:24:40.571974] user = 2161 Local 84/568
[2024-12-02 18:24:40.643662] user = 2161 Local+ 84/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:24:42.211092] user = 2161 MPDA- 84/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5709586466165413
Training on augumented user 16529 0/50 current_auc = 0.5709586466165413
User 16529 AUC after training: 0.5718984962406015
User 16529 improves AUC. Keeping the model.
Training on augumented user 8381 1/50 current_auc = 0.5718984962406015
User 8381 AUC after training: 0.5704887218045113
User 8381 does not improve AUC. Reverting changes.
Training on augumented user 72269 2/50 current_auc = 0.5718984962406015
User 72269 AUC after training: 0.5735432330827067
User 72269 improves AUC. Keeping the model.
Training on augumented user 71134 3/50 current_auc = 0.5735432330827067
User 71134 AUC after training: 0.5714285714285714
User 71134 does not improve AUC. Reverting changes.
Training on augumented user 133019 4/50 current_auc = 0.5735432330827067
User 133019 AUC after training: 0.5742481203007518
User 133019 improves AUC. Keeping the model.
Training on augumented user 108572 5/50 current_auc = 0.5742481203007518
User 108572 AUC after training: 0.5742481203007519
User 108572 improves AUC. Keeping the model.
Training on augumented user 68980 6/50 current_auc = 0.5742481203007519
User 68980 AUC after training: 0.5697838345864662
User 68980 does not improve AUC. Reverting changes.
Training on augumented user 51762 7/50 current_auc = 0.5742481203007519
User 51762 AUC after training: 0.5728383458646616
User 51762 does not improve AUC. Reverting changes.
Training on augumented user 110105 8/50 current_auc = 0.5742481203007519
User 110105 AUC after training: 0.5742481203007519
User 110105 does not improve AUC. Reverting changes.
Training on augumented user 66890 9/50 current_auc = 0.5742481203007519
User 66890 AUC after training: 0.5726033834586467
User 66890 does not improve AUC. Reverting changes.
Training on augumented user 40781 10/50 current_auc = 0.5742481203007519
User 40781 AUC after training: 0.5742481203007519
User 40781 does not improve AUC. Reverting changes.
Training on augumented user 48132 11/50 current_auc = 0.5742481203007519
User 48132 AUC after training: 0.5737781954887218
User 48132 does not improve AUC. Reverting changes.
Training on augumented user 88084 12/50 current_auc = 0.5742481203007519
User 88084 AUC after training: 0.5737781954887218
User 88084 does not improve AUC. Reverting changes.
Training on augumented user 59714 13/50 current_auc = 0.5742481203007519
User 59714 AUC after training: 0.5737781954887218
User 59714 does not improve AUC. Reverting changes.
Training on augumented user 45386 14/50 current_auc = 0.5742481203007519
User 45386 AUC after training: 0.5768327067669173
User 45386 improves AUC. Keeping the model.
Training on augumented user 45329 15/50 current_auc = 0.5768327067669173
User 45329 AUC after training: 0.5768327067669173
User 45329 does not improve AUC. Reverting changes.
Training on augumented user 87694 16/50 current_auc = 0.5768327067669173
User 87694 AUC after training: 0.5787124060150377
User 87694 improves AUC. Keeping the model.
Training on augumented user 79464 17/50 current_auc = 0.5787124060150377
User 79464 AUC after training: 0.5780075187969925
User 79464 does not improve AUC. Reverting changes.
Training on augumented user 82463 18/50 current_auc = 0.5787124060150377
User 82463 AUC after training: 0.5787124060150376
User 82463 does not improve AUC. Reverting changes.
Training on augumented user 86766 19/50 current_auc = 0.5787124060150377
User 86766 AUC after training: 0.5782424812030075
User 86766 does not improve AUC. Reverting changes.
Training on augumented user 83682 20/50 current_auc = 0.5787124060150377
User 83682 AUC after training: 0.5789473684210527
User 83682 improves AUC. Keeping the model.
Training on augumented user 40030 21/50 current_auc = 0.5789473684210527
User 40030 AUC after training: 0.5777725563909775
User 40030 does not improve AUC. Reverting changes.
Training on augumented user 38977 22/50 current_auc = 0.5789473684210527
User 38977 AUC after training: 0.5763627819548872
User 38977 does not improve AUC. Reverting changes.
Training on augumented user 87312 23/50 current_auc = 0.5789473684210527
User 87312 AUC after training: 0.5784774436090226
User 87312 does not improve AUC. Reverting changes.
Training on augumented user 54468 24/50 current_auc = 0.5789473684210527
User 54468 AUC after training: 0.5789473684210527
User 54468 does not improve AUC. Reverting changes.
Training on augumented user 26019 25/50 current_auc = 0.5789473684210527
User 26019 AUC after training: 0.5782424812030076
User 26019 does not improve AUC. Reverting changes.
Training on augumented user 67843 26/50 current_auc = 0.5789473684210527
User 67843 AUC after training: 0.5777725563909775
User 67843 does not improve AUC. Reverting changes.
Training on augumented user 89649 27/50 current_auc = 0.5789473684210527
User 89649 AUC after training: 0.5784774436090225
User 89649 does not improve AUC. Reverting changes.
Training on augumented user 47780 28/50 current_auc = 0.5789473684210527
User 47780 AUC after training: 0.5784774436090225
User 47780 does not improve AUC. Reverting changes.
Training on augumented user 68616 29/50 current_auc = 0.5789473684210527
User 68616 AUC after training: 0.5780075187969925
User 68616 does not improve AUC. Reverting changes.
Training on augumented user 12664 30/50 current_auc = 0.5789473684210527
User 12664 AUC after training: 0.5775375939849624
User 12664 does not improve AUC. Reverting changes.
Training on augumented user 104506 31/50 current_auc = 0.5789473684210527
User 104506 AUC after training: 0.5805921052631579
User 104506 improves AUC. Keeping the model.
Training on augumented user 77182 32/50 current_auc = 0.5805921052631579
User 77182 AUC after training: 0.5784774436090225
User 77182 does not improve AUC. Reverting changes.
Training on augumented user 125425 33/50 current_auc = 0.5805921052631579
User 125425 AUC after training: 0.5796522556390977
User 125425 does not improve AUC. Reverting changes.
Training on augumented user 15635 34/50 current_auc = 0.5805921052631579
User 15635 AUC after training: 0.5782424812030075
User 15635 does not improve AUC. Reverting changes.
Training on augumented user 122774 35/50 current_auc = 0.5805921052631579
User 122774 AUC after training: 0.5768327067669173
User 122774 does not improve AUC. Reverting changes.
Training on augumented user 112093 36/50 current_auc = 0.5805921052631579
User 112093 AUC after training: 0.5803571428571429
User 112093 does not improve AUC. Reverting changes.
Training on augumented user 28498 37/50 current_auc = 0.5805921052631579
User 28498 AUC after training: 0.5789473684210527
User 28498 does not improve AUC. Reverting changes.
Training on augumented user 31597 38/50 current_auc = 0.5805921052631579
User 31597 AUC after training: 0.5765977443609023
User 31597 does not improve AUC. Reverting changes.
Training on augumented user 16323 39/50 current_auc = 0.5805921052631579
User 16323 AUC after training: 0.5789473684210527
User 16323 does not improve AUC. Reverting changes.
Training on augumented user 90624 40/50 current_auc = 0.5805921052631579
User 90624 AUC after training: 0.5794172932330828
User 90624 does not improve AUC. Reverting changes.
Training on augumented user 76886 41/50 current_auc = 0.5805921052631579
User 76886 AUC after training: 0.5798872180451129
User 76886 does not improve AUC. Reverting changes.
Training on augumented user 111823 42/50 current_auc = 0.5805921052631579
User 111823 AUC after training: 0.5794172932330828
User 111823 does not improve AUC. Reverting changes.
Training on augumented user 71430 43/50 current_auc = 0.5805921052631579
User 71430 AUC after training: 0.5787124060150376
User 71430 does not improve AUC. Reverting changes.
Training on augumented user 97624 44/50 current_auc = 0.5805921052631579
User 97624 AUC after training: 0.5787124060150376
User 97624 does not improve AUC. Reverting changes.
Training on augumented user 72560 45/50 current_auc = 0.5805921052631579
User 72560 AUC after training: 0.5801221804511278
User 72560 does not improve AUC. Reverting changes.
Training on augumented user 68694 46/50 current_auc = 0.5805921052631579
User 68694 AUC after training: 0.5801221804511278
User 68694 does not improve AUC. Reverting changes.
Training on augumented user 114111 47/50 current_auc = 0.5805921052631579
User 114111 AUC after training: 0.5775375939849624
User 114111 does not improve AUC. Reverting changes.
Training on augumented user 64598 48/50 current_auc = 0.5805921052631579
User 64598 AUC after training: 0.5817669172932332
User 64598 improves AUC. Keeping the model.
Training on augumented user 33797 49/50 current_auc = 0.5817669172932332
User 33797 AUC after training: 0.5852913533834587
User 33797 improves AUC. Keeping the model.
[2024-12-02 18:25:11.301312] start test user 2184 85/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:25:12.067470] start test user 2184 85/568 recall augumented users by random, augumented_users = [65727, 32004, 55156, 31380, 115797, 104086, 119222, 86009, 78071, 3820, 120485, 55720, 74506, 18694, 106798, 101580, 16141, 134408, 127639, 43163, 79053, 124325, 83507, 16384, 116430, 92261, 72642, 93494, 16547, 123333, 85217, 47156, 110902, 44045, 120218, 106335, 89682, 60670, 133068, 29039, 113929, 133844, 87065, 41364, 127824, 73274, 88953, 27718, 137146, 79281]
[2024-12-02 18:25:12.085485] user = 2184 Cloud 85/568
[2024-12-02 18:25:12.099757] user = 2184 Local 85/568
[2024-12-02 18:25:12.205246] user = 2184 Local+ 85/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:25:14.771488] user = 2184 MPDA- 85/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7111801242236025
Training on augumented user 65727 0/50 current_auc = 0.7111801242236025
User 65727 AUC after training: 0.7111801242236025
User 65727 does not improve AUC. Reverting changes.
Training on augumented user 32004 1/50 current_auc = 0.7111801242236025
User 32004 AUC after training: 0.7111801242236025
User 32004 does not improve AUC. Reverting changes.
Training on augumented user 55156 2/50 current_auc = 0.7111801242236025
User 55156 AUC after training: 0.7111801242236025
User 55156 does not improve AUC. Reverting changes.
Training on augumented user 31380 3/50 current_auc = 0.7111801242236025
User 31380 AUC after training: 0.7132505175983437
User 31380 improves AUC. Keeping the model.
Training on augumented user 115797 4/50 current_auc = 0.7132505175983437
User 115797 AUC after training: 0.7111801242236025
User 115797 does not improve AUC. Reverting changes.
Training on augumented user 104086 5/50 current_auc = 0.7132505175983437
User 104086 AUC after training: 0.7132505175983437
User 104086 does not improve AUC. Reverting changes.
Training on augumented user 119222 6/50 current_auc = 0.7132505175983437
User 119222 AUC after training: 0.7132505175983437
User 119222 does not improve AUC. Reverting changes.
Training on augumented user 86009 7/50 current_auc = 0.7132505175983437
User 86009 AUC after training: 0.7111801242236025
User 86009 does not improve AUC. Reverting changes.
Training on augumented user 78071 8/50 current_auc = 0.7132505175983437
User 78071 AUC after training: 0.7101449275362319
User 78071 does not improve AUC. Reverting changes.
Training on augumented user 3820 9/50 current_auc = 0.7132505175983437
User 3820 AUC after training: 0.7132505175983437
User 3820 does not improve AUC. Reverting changes.
Training on augumented user 120485 10/50 current_auc = 0.7132505175983437
User 120485 AUC after training: 0.7080745341614908
User 120485 does not improve AUC. Reverting changes.
Training on augumented user 55720 11/50 current_auc = 0.7132505175983437
User 55720 AUC after training: 0.7132505175983437
User 55720 does not improve AUC. Reverting changes.
Training on augumented user 74506 12/50 current_auc = 0.7132505175983437
User 74506 AUC after training: 0.7111801242236025
User 74506 does not improve AUC. Reverting changes.
Training on augumented user 18694 13/50 current_auc = 0.7132505175983437
User 18694 AUC after training: 0.7101449275362318
User 18694 does not improve AUC. Reverting changes.
Training on augumented user 106798 14/50 current_auc = 0.7132505175983437
User 106798 AUC after training: 0.7132505175983437
User 106798 does not improve AUC. Reverting changes.
Training on augumented user 101580 15/50 current_auc = 0.7132505175983437
User 101580 AUC after training: 0.7132505175983437
User 101580 does not improve AUC. Reverting changes.
Training on augumented user 16141 16/50 current_auc = 0.7132505175983437
User 16141 AUC after training: 0.7122153209109731
User 16141 does not improve AUC. Reverting changes.
Training on augumented user 134408 17/50 current_auc = 0.7132505175983437
User 134408 AUC after training: 0.7111801242236025
User 134408 does not improve AUC. Reverting changes.
Training on augumented user 127639 18/50 current_auc = 0.7132505175983437
User 127639 AUC after training: 0.7122153209109732
User 127639 does not improve AUC. Reverting changes.
Training on augumented user 43163 19/50 current_auc = 0.7132505175983437
User 43163 AUC after training: 0.7122153209109732
User 43163 does not improve AUC. Reverting changes.
Training on augumented user 79053 20/50 current_auc = 0.7132505175983437
User 79053 AUC after training: 0.7122153209109732
User 79053 does not improve AUC. Reverting changes.
Training on augumented user 124325 21/50 current_auc = 0.7132505175983437
User 124325 AUC after training: 0.7122153209109732
User 124325 does not improve AUC. Reverting changes.
Training on augumented user 83507 22/50 current_auc = 0.7132505175983437
User 83507 AUC after training: 0.7132505175983437
User 83507 does not improve AUC. Reverting changes.
Training on augumented user 16384 23/50 current_auc = 0.7132505175983437
User 16384 AUC after training: 0.7142857142857143
User 16384 improves AUC. Keeping the model.
Training on augumented user 116430 24/50 current_auc = 0.7142857142857143
User 116430 AUC after training: 0.7153209109730849
User 116430 improves AUC. Keeping the model.
Training on augumented user 92261 25/50 current_auc = 0.7153209109730849
User 92261 AUC after training: 0.7153209109730849
User 92261 does not improve AUC. Reverting changes.
Training on augumented user 72642 26/50 current_auc = 0.7153209109730849
User 72642 AUC after training: 0.7153209109730849
User 72642 does not improve AUC. Reverting changes.
Training on augumented user 93494 27/50 current_auc = 0.7153209109730849
User 93494 AUC after training: 0.7153209109730849
User 93494 does not improve AUC. Reverting changes.
Training on augumented user 16547 28/50 current_auc = 0.7153209109730849
User 16547 AUC after training: 0.7153209109730849
User 16547 does not improve AUC. Reverting changes.
Training on augumented user 123333 29/50 current_auc = 0.7153209109730849
User 123333 AUC after training: 0.7153209109730849
User 123333 does not improve AUC. Reverting changes.
Training on augumented user 85217 30/50 current_auc = 0.7153209109730849
User 85217 AUC after training: 0.7132505175983437
User 85217 does not improve AUC. Reverting changes.
Training on augumented user 47156 31/50 current_auc = 0.7153209109730849
User 47156 AUC after training: 0.7153209109730849
User 47156 does not improve AUC. Reverting changes.
Training on augumented user 110902 32/50 current_auc = 0.7153209109730849
User 110902 AUC after training: 0.7132505175983437
User 110902 does not improve AUC. Reverting changes.
Training on augumented user 44045 33/50 current_auc = 0.7153209109730849
User 44045 AUC after training: 0.7153209109730849
User 44045 does not improve AUC. Reverting changes.
Training on augumented user 120218 34/50 current_auc = 0.7153209109730849
User 120218 AUC after training: 0.7132505175983437
User 120218 does not improve AUC. Reverting changes.
Training on augumented user 106335 35/50 current_auc = 0.7153209109730849
User 106335 AUC after training: 0.7132505175983437
User 106335 does not improve AUC. Reverting changes.
Training on augumented user 89682 36/50 current_auc = 0.7153209109730849
User 89682 AUC after training: 0.7173913043478262
User 89682 improves AUC. Keeping the model.
Training on augumented user 60670 37/50 current_auc = 0.7173913043478262
User 60670 AUC after training: 0.7153209109730848
User 60670 does not improve AUC. Reverting changes.
Training on augumented user 133068 38/50 current_auc = 0.7173913043478262
User 133068 AUC after training: 0.7173913043478262
User 133068 does not improve AUC. Reverting changes.
Training on augumented user 29039 39/50 current_auc = 0.7173913043478262
User 29039 AUC after training: 0.7153209109730849
User 29039 does not improve AUC. Reverting changes.
Training on augumented user 113929 40/50 current_auc = 0.7173913043478262
User 113929 AUC after training: 0.7173913043478262
User 113929 does not improve AUC. Reverting changes.
Training on augumented user 133844 41/50 current_auc = 0.7173913043478262
User 133844 AUC after training: 0.7173913043478262
User 133844 does not improve AUC. Reverting changes.
Training on augumented user 87065 42/50 current_auc = 0.7173913043478262
User 87065 AUC after training: 0.7153209109730849
User 87065 does not improve AUC. Reverting changes.
Training on augumented user 41364 43/50 current_auc = 0.7173913043478262
User 41364 AUC after training: 0.7173913043478262
User 41364 does not improve AUC. Reverting changes.
Training on augumented user 127824 44/50 current_auc = 0.7173913043478262
User 127824 AUC after training: 0.7153209109730849
User 127824 does not improve AUC. Reverting changes.
Training on augumented user 73274 45/50 current_auc = 0.7173913043478262
User 73274 AUC after training: 0.7153209109730849
User 73274 does not improve AUC. Reverting changes.
Training on augumented user 88953 46/50 current_auc = 0.7173913043478262
User 88953 AUC after training: 0.7153209109730849
User 88953 does not improve AUC. Reverting changes.
Training on augumented user 27718 47/50 current_auc = 0.7173913043478262
User 27718 AUC after training: 0.7153209109730849
User 27718 does not improve AUC. Reverting changes.
Training on augumented user 137146 48/50 current_auc = 0.7173913043478262
User 137146 AUC after training: 0.7153209109730849
User 137146 does not improve AUC. Reverting changes.
Training on augumented user 79281 49/50 current_auc = 0.7173913043478262
User 79281 AUC after training: 0.7153209109730849
User 79281 does not improve AUC. Reverting changes.
[2024-12-02 18:25:44.866615] start test user 2188 86/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:25:45.287562] start test user 2188 86/568 recall augumented users by random, augumented_users = [71900, 3740, 8234, 44211, 30941, 131641, 70793, 102350, 21031, 74727, 76504, 31951, 119730, 135971, 81745, 42480, 123109, 117975, 5665, 111142, 101550, 4167, 125486, 22492, 74833, 111299, 2304, 75886, 107732, 66729, 32845, 70472, 302, 135168, 75397, 15922, 98107, 132846, 126175, 29118, 87275, 84455, 128399, 462, 109260, 49708, 82844, 43909, 2864, 101754]
[2024-12-02 18:25:45.302482] user = 2188 Cloud 86/568
[2024-12-02 18:25:45.321372] user = 2188 Local 86/568
[2024-12-02 18:25:45.387232] user = 2188 Local+ 86/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:25:46.890967] user = 2188 MPDA- 86/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5763293310463122
Training on augumented user 71900 0/50 current_auc = 0.5763293310463122
User 71900 AUC after training: 0.5766411975674411
User 71900 improves AUC. Keeping the model.
Training on augumented user 3740 1/50 current_auc = 0.5766411975674411
User 3740 AUC after training: 0.5772649306096991
User 3740 improves AUC. Keeping the model.
Training on augumented user 8234 2/50 current_auc = 0.5772649306096991
User 8234 AUC after training: 0.5782005301730859
User 8234 improves AUC. Keeping the model.
Training on augumented user 44211 3/50 current_auc = 0.5782005301730859
User 44211 AUC after training: 0.5766411975674411
User 44211 does not improve AUC. Reverting changes.
Training on augumented user 30941 4/50 current_auc = 0.5782005301730859
User 30941 AUC after training: 0.5782005301730859
User 30941 does not improve AUC. Reverting changes.
Training on augumented user 131641 5/50 current_auc = 0.5782005301730859
User 131641 AUC after training: 0.5767971308280057
User 131641 does not improve AUC. Reverting changes.
Training on augumented user 70793 6/50 current_auc = 0.5782005301730859
User 70793 AUC after training: 0.5764852643068766
User 70793 does not improve AUC. Reverting changes.
Training on augumented user 102350 7/50 current_auc = 0.5782005301730859
User 102350 AUC after training: 0.5788242632153437
User 102350 improves AUC. Keeping the model.
Training on augumented user 21031 8/50 current_auc = 0.5788242632153437
User 21031 AUC after training: 0.5789801964759083
User 21031 improves AUC. Keeping the model.
Training on augumented user 74727 9/50 current_auc = 0.5789801964759083
User 74727 AUC after training: 0.5782005301730859
User 74727 does not improve AUC. Reverting changes.
Training on augumented user 76504 10/50 current_auc = 0.5789801964759083
User 76504 AUC after training: 0.578512396694215
User 76504 does not improve AUC. Reverting changes.
Training on augumented user 31951 11/50 current_auc = 0.5789801964759083
User 31951 AUC after training: 0.5785123966942148
User 31951 does not improve AUC. Reverting changes.
Training on augumented user 119730 12/50 current_auc = 0.5789801964759083
User 119730 AUC after training: 0.5788242632153439
User 119730 does not improve AUC. Reverting changes.
Training on augumented user 135971 13/50 current_auc = 0.5789801964759083
User 135971 AUC after training: 0.5788242632153437
User 135971 does not improve AUC. Reverting changes.
Training on augumented user 81745 14/50 current_auc = 0.5789801964759083
User 81745 AUC after training: 0.5783564634336504
User 81745 does not improve AUC. Reverting changes.
Training on augumented user 42480 15/50 current_auc = 0.5789801964759083
User 42480 AUC after training: 0.5782005301730859
User 42480 does not improve AUC. Reverting changes.
Training on augumented user 123109 16/50 current_auc = 0.5789801964759083
User 123109 AUC after training: 0.5783564634336504
User 123109 does not improve AUC. Reverting changes.
Training on augumented user 117975 17/50 current_auc = 0.5789801964759083
User 117975 AUC after training: 0.5786683299547793
User 117975 does not improve AUC. Reverting changes.
Training on augumented user 5665 18/50 current_auc = 0.5789801964759083
User 5665 AUC after training: 0.578512396694215
User 5665 does not improve AUC. Reverting changes.
Training on augumented user 111142 19/50 current_auc = 0.5789801964759083
User 111142 AUC after training: 0.577888663651957
User 111142 does not improve AUC. Reverting changes.
Training on augumented user 101550 20/50 current_auc = 0.5789801964759083
User 101550 AUC after training: 0.5780445969125214
User 101550 does not improve AUC. Reverting changes.
Training on augumented user 4167 21/50 current_auc = 0.5789801964759083
User 4167 AUC after training: 0.5789801964759083
User 4167 does not improve AUC. Reverting changes.
Training on augumented user 125486 22/50 current_auc = 0.5789801964759083
User 125486 AUC after training: 0.5782005301730859
User 125486 does not improve AUC. Reverting changes.
Training on augumented user 22492 23/50 current_auc = 0.5789801964759083
User 22492 AUC after training: 0.5791361297364728
User 22492 improves AUC. Keeping the model.
Training on augumented user 74833 24/50 current_auc = 0.5791361297364728
User 74833 AUC after training: 0.578512396694215
User 74833 does not improve AUC. Reverting changes.
Training on augumented user 111299 25/50 current_auc = 0.5791361297364728
User 111299 AUC after training: 0.5780445969125214
User 111299 does not improve AUC. Reverting changes.
Training on augumented user 2304 26/50 current_auc = 0.5791361297364728
User 2304 AUC after training: 0.5791361297364728
User 2304 does not improve AUC. Reverting changes.
Training on augumented user 75886 27/50 current_auc = 0.5791361297364728
User 75886 AUC after training: 0.5778886636519569
User 75886 does not improve AUC. Reverting changes.
Training on augumented user 107732 28/50 current_auc = 0.5791361297364728
User 107732 AUC after training: 0.5792920629970373
User 107732 improves AUC. Keeping the model.
Training on augumented user 66729 29/50 current_auc = 0.5792920629970373
User 66729 AUC after training: 0.5791361297364728
User 66729 does not improve AUC. Reverting changes.
Training on augumented user 32845 30/50 current_auc = 0.5792920629970373
User 32845 AUC after training: 0.5783564634336504
User 32845 does not improve AUC. Reverting changes.
Training on augumented user 70472 31/50 current_auc = 0.5792920629970373
User 70472 AUC after training: 0.578512396694215
User 70472 does not improve AUC. Reverting changes.
Training on augumented user 302 32/50 current_auc = 0.5792920629970373
User 302 AUC after training: 0.5789801964759083
User 302 does not improve AUC. Reverting changes.
Training on augumented user 135168 33/50 current_auc = 0.5792920629970373
User 135168 AUC after training: 0.5791361297364728
User 135168 does not improve AUC. Reverting changes.
Training on augumented user 75397 34/50 current_auc = 0.5792920629970373
User 75397 AUC after training: 0.5797598627787307
User 75397 improves AUC. Keeping the model.
Training on augumented user 15922 35/50 current_auc = 0.5797598627787307
User 15922 AUC after training: 0.5783564634336504
User 15922 does not improve AUC. Reverting changes.
Training on augumented user 98107 36/50 current_auc = 0.5797598627787307
User 98107 AUC after training: 0.5800717292998596
User 98107 improves AUC. Keeping the model.
Training on augumented user 132846 37/50 current_auc = 0.5800717292998596
User 132846 AUC after training: 0.5808513956026821
User 132846 improves AUC. Keeping the model.
Training on augumented user 126175 38/50 current_auc = 0.5808513956026821
User 126175 AUC after training: 0.5816310619055044
User 126175 improves AUC. Keeping the model.
Training on augumented user 29118 39/50 current_auc = 0.5816310619055044
User 29118 AUC after training: 0.5819429284266333
User 29118 improves AUC. Keeping the model.
Training on augumented user 87275 40/50 current_auc = 0.5819429284266333
User 87275 AUC after training: 0.5820988616871979
User 87275 improves AUC. Keeping the model.
Training on augumented user 84455 41/50 current_auc = 0.5820988616871979
User 84455 AUC after training: 0.5820988616871978
User 84455 does not improve AUC. Reverting changes.
Training on augumented user 128399 42/50 current_auc = 0.5820988616871979
User 128399 AUC after training: 0.581163262123811
User 128399 does not improve AUC. Reverting changes.
Training on augumented user 462 43/50 current_auc = 0.5820988616871979
User 462 AUC after training: 0.5810073288632465
User 462 does not improve AUC. Reverting changes.
Training on augumented user 109260 44/50 current_auc = 0.5820988616871979
User 109260 AUC after training: 0.5816310619055045
User 109260 does not improve AUC. Reverting changes.
Training on augumented user 49708 45/50 current_auc = 0.5820988616871979
User 49708 AUC after training: 0.5803835958209886
User 49708 does not improve AUC. Reverting changes.
Training on augumented user 82844 46/50 current_auc = 0.5820988616871979
User 82844 AUC after training: 0.5820988616871979
User 82844 does not improve AUC. Reverting changes.
Training on augumented user 43909 47/50 current_auc = 0.5820988616871979
User 43909 AUC after training: 0.5820988616871978
User 43909 does not improve AUC. Reverting changes.
Training on augumented user 2864 48/50 current_auc = 0.5820988616871979
User 2864 AUC after training: 0.5805395290815532
User 2864 does not improve AUC. Reverting changes.
Training on augumented user 101754 49/50 current_auc = 0.5820988616871979
User 101754 AUC after training: 0.5816310619055044
User 101754 does not improve AUC. Reverting changes.
[2024-12-02 18:26:15.134812] start test user 2232 87/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:26:15.577958] start test user 2232 87/568 recall augumented users by random, augumented_users = [119425, 40811, 98684, 94051, 16443, 80785, 126441, 22790, 17668, 127668, 101075, 56060, 69903, 119392, 108163, 61099, 86191, 106709, 48856, 18203, 101705, 55819, 116899, 63236, 12739, 131690, 64640, 45034, 73971, 2090, 49882, 110178, 125007, 5201, 65782, 29036, 53074, 54334, 36841, 36259, 3179, 868, 118785, 129710, 3464, 47793, 130598, 110446, 87855, 50566]
[2024-12-02 18:26:15.594164] user = 2232 Cloud 87/568
[2024-12-02 18:26:15.604719] user = 2232 Local 87/568
[2024-12-02 18:26:15.738024] user = 2232 Local+ 87/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:26:18.406857] user = 2232 MPDA- 87/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5192307692307692
Training on augumented user 119425 0/50 current_auc = 0.5192307692307692
User 119425 AUC after training: 0.5192307692307692
User 119425 does not improve AUC. Reverting changes.
Training on augumented user 40811 1/50 current_auc = 0.5192307692307692
User 40811 AUC after training: 0.5192307692307692
User 40811 does not improve AUC. Reverting changes.
Training on augumented user 98684 2/50 current_auc = 0.5192307692307692
User 98684 AUC after training: 0.5192307692307692
User 98684 does not improve AUC. Reverting changes.
Training on augumented user 94051 3/50 current_auc = 0.5192307692307692
User 94051 AUC after training: 0.5256410256410257
User 94051 improves AUC. Keeping the model.
Training on augumented user 16443 4/50 current_auc = 0.5256410256410257
User 16443 AUC after training: 0.5256410256410257
User 16443 does not improve AUC. Reverting changes.
Training on augumented user 80785 5/50 current_auc = 0.5256410256410257
User 80785 AUC after training: 0.5128205128205128
User 80785 does not improve AUC. Reverting changes.
Training on augumented user 126441 6/50 current_auc = 0.5256410256410257
User 126441 AUC after training: 0.516025641025641
User 126441 does not improve AUC. Reverting changes.
Training on augumented user 22790 7/50 current_auc = 0.5256410256410257
User 22790 AUC after training: 0.5192307692307692
User 22790 does not improve AUC. Reverting changes.
Training on augumented user 17668 8/50 current_auc = 0.5256410256410257
User 17668 AUC after training: 0.532051282051282
User 17668 improves AUC. Keeping the model.
Training on augumented user 127668 9/50 current_auc = 0.532051282051282
User 127668 AUC after training: 0.5256410256410257
User 127668 does not improve AUC. Reverting changes.
Training on augumented user 101075 10/50 current_auc = 0.532051282051282
User 101075 AUC after training: 0.5192307692307692
User 101075 does not improve AUC. Reverting changes.
Training on augumented user 56060 11/50 current_auc = 0.532051282051282
User 56060 AUC after training: 0.532051282051282
User 56060 does not improve AUC. Reverting changes.
Training on augumented user 69903 12/50 current_auc = 0.532051282051282
User 69903 AUC after training: 0.5256410256410257
User 69903 does not improve AUC. Reverting changes.
Training on augumented user 119392 13/50 current_auc = 0.532051282051282
User 119392 AUC after training: 0.532051282051282
User 119392 does not improve AUC. Reverting changes.
Training on augumented user 108163 14/50 current_auc = 0.532051282051282
User 108163 AUC after training: 0.532051282051282
User 108163 does not improve AUC. Reverting changes.
Training on augumented user 61099 15/50 current_auc = 0.532051282051282
User 61099 AUC after training: 0.5256410256410255
User 61099 does not improve AUC. Reverting changes.
Training on augumented user 86191 16/50 current_auc = 0.532051282051282
User 86191 AUC after training: 0.5192307692307692
User 86191 does not improve AUC. Reverting changes.
Training on augumented user 106709 17/50 current_auc = 0.532051282051282
User 106709 AUC after training: 0.5256410256410257
User 106709 does not improve AUC. Reverting changes.
Training on augumented user 48856 18/50 current_auc = 0.532051282051282
User 48856 AUC after training: 0.532051282051282
User 48856 does not improve AUC. Reverting changes.
Training on augumented user 18203 19/50 current_auc = 0.532051282051282
User 18203 AUC after training: 0.5160256410256411
User 18203 does not improve AUC. Reverting changes.
Training on augumented user 101705 20/50 current_auc = 0.532051282051282
User 101705 AUC after training: 0.532051282051282
User 101705 does not improve AUC. Reverting changes.
Training on augumented user 55819 21/50 current_auc = 0.532051282051282
User 55819 AUC after training: 0.532051282051282
User 55819 does not improve AUC. Reverting changes.
Training on augumented user 116899 22/50 current_auc = 0.532051282051282
User 116899 AUC after training: 0.532051282051282
User 116899 does not improve AUC. Reverting changes.
Training on augumented user 63236 23/50 current_auc = 0.532051282051282
User 63236 AUC after training: 0.5064102564102564
User 63236 does not improve AUC. Reverting changes.
Training on augumented user 12739 24/50 current_auc = 0.532051282051282
User 12739 AUC after training: 0.5256410256410257
User 12739 does not improve AUC. Reverting changes.
Training on augumented user 131690 25/50 current_auc = 0.532051282051282
User 131690 AUC after training: 0.5256410256410257
User 131690 does not improve AUC. Reverting changes.
Training on augumented user 64640 26/50 current_auc = 0.532051282051282
User 64640 AUC after training: 0.5256410256410257
User 64640 does not improve AUC. Reverting changes.
Training on augumented user 45034 27/50 current_auc = 0.532051282051282
User 45034 AUC after training: 0.5192307692307692
User 45034 does not improve AUC. Reverting changes.
Training on augumented user 73971 28/50 current_auc = 0.532051282051282
User 73971 AUC after training: 0.5192307692307692
User 73971 does not improve AUC. Reverting changes.
Training on augumented user 2090 29/50 current_auc = 0.532051282051282
User 2090 AUC after training: 0.5192307692307692
User 2090 does not improve AUC. Reverting changes.
Training on augumented user 49882 30/50 current_auc = 0.532051282051282
User 49882 AUC after training: 0.5096153846153846
User 49882 does not improve AUC. Reverting changes.
Training on augumented user 110178 31/50 current_auc = 0.532051282051282
User 110178 AUC after training: 0.5192307692307692
User 110178 does not improve AUC. Reverting changes.
Training on augumented user 125007 32/50 current_auc = 0.532051282051282
User 125007 AUC after training: 0.5192307692307692
User 125007 does not improve AUC. Reverting changes.
Training on augumented user 5201 33/50 current_auc = 0.532051282051282
User 5201 AUC after training: 0.5384615384615384
User 5201 improves AUC. Keeping the model.
Training on augumented user 65782 34/50 current_auc = 0.5384615384615384
User 65782 AUC after training: 0.5256410256410255
User 65782 does not improve AUC. Reverting changes.
Training on augumented user 29036 35/50 current_auc = 0.5384615384615384
User 29036 AUC after training: 0.532051282051282
User 29036 does not improve AUC. Reverting changes.
Training on augumented user 53074 36/50 current_auc = 0.5384615384615384
User 53074 AUC after training: 0.5096153846153846
User 53074 does not improve AUC. Reverting changes.
Training on augumented user 54334 37/50 current_auc = 0.5384615384615384
User 54334 AUC after training: 0.5256410256410255
User 54334 does not improve AUC. Reverting changes.
Training on augumented user 36841 38/50 current_auc = 0.5384615384615384
User 36841 AUC after training: 0.5384615384615384
User 36841 does not improve AUC. Reverting changes.
Training on augumented user 36259 39/50 current_auc = 0.5384615384615384
User 36259 AUC after training: 0.5192307692307692
User 36259 does not improve AUC. Reverting changes.
Training on augumented user 3179 40/50 current_auc = 0.5384615384615384
User 3179 AUC after training: 0.5096153846153846
User 3179 does not improve AUC. Reverting changes.
Training on augumented user 868 41/50 current_auc = 0.5384615384615384
User 868 AUC after training: 0.5256410256410257
User 868 does not improve AUC. Reverting changes.
Training on augumented user 118785 42/50 current_auc = 0.5384615384615384
User 118785 AUC after training: 0.532051282051282
User 118785 does not improve AUC. Reverting changes.
Training on augumented user 129710 43/50 current_auc = 0.5384615384615384
User 129710 AUC after training: 0.5384615384615384
User 129710 does not improve AUC. Reverting changes.
Training on augumented user 3464 44/50 current_auc = 0.5384615384615384
User 3464 AUC after training: 0.5384615384615384
User 3464 does not improve AUC. Reverting changes.
Training on augumented user 47793 45/50 current_auc = 0.5384615384615384
User 47793 AUC after training: 0.5384615384615384
User 47793 does not improve AUC. Reverting changes.
Training on augumented user 130598 46/50 current_auc = 0.5384615384615384
User 130598 AUC after training: 0.5384615384615384
User 130598 does not improve AUC. Reverting changes.
Training on augumented user 110446 47/50 current_auc = 0.5384615384615384
User 110446 AUC after training: 0.5384615384615384
User 110446 does not improve AUC. Reverting changes.
Training on augumented user 87855 48/50 current_auc = 0.5384615384615384
User 87855 AUC after training: 0.532051282051282
User 87855 does not improve AUC. Reverting changes.
Training on augumented user 50566 49/50 current_auc = 0.5384615384615384
User 50566 AUC after training: 0.5096153846153846
User 50566 does not improve AUC. Reverting changes.
[2024-12-02 18:26:50.538389] start test user 2234 88/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:26:51.072563] start test user 2234 88/568 recall augumented users by random, augumented_users = [2860, 93029, 38173, 124020, 119970, 118037, 73276, 117542, 9106, 20690, 130243, 126598, 74302, 117425, 17962, 32287, 103987, 45819, 115994, 111583, 88833, 68134, 95763, 22749, 7406, 34541, 134216, 58456, 18496, 108075, 113926, 101409, 122519, 68232, 34427, 62649, 20483, 118398, 69603, 29025, 57872, 16094, 129230, 90851, 78416, 74256, 123795, 20065, 96630, 11814]
[2024-12-02 18:26:51.087641] user = 2234 Cloud 88/568
[2024-12-02 18:26:51.107012] user = 2234 Local 88/568
[2024-12-02 18:26:51.199968] user = 2234 Local+ 88/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:26:52.861733] user = 2234 MPDA- 88/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5454545454545454
Training on augumented user 2860 0/50 current_auc = 0.5454545454545454
User 2860 AUC after training: 0.5454545454545454
User 2860 does not improve AUC. Reverting changes.
Training on augumented user 93029 1/50 current_auc = 0.5454545454545454
User 93029 AUC after training: 0.5555555555555556
User 93029 improves AUC. Keeping the model.
Training on augumented user 38173 2/50 current_auc = 0.5555555555555556
User 38173 AUC after training: 0.5454545454545454
User 38173 does not improve AUC. Reverting changes.
Training on augumented user 124020 3/50 current_auc = 0.5555555555555556
User 124020 AUC after training: 0.5555555555555556
User 124020 does not improve AUC. Reverting changes.
Training on augumented user 119970 4/50 current_auc = 0.5555555555555556
User 119970 AUC after training: 0.5555555555555556
User 119970 does not improve AUC. Reverting changes.
Training on augumented user 118037 5/50 current_auc = 0.5555555555555556
User 118037 AUC after training: 0.5555555555555556
User 118037 does not improve AUC. Reverting changes.
Training on augumented user 73276 6/50 current_auc = 0.5555555555555556
User 73276 AUC after training: 0.5454545454545454
User 73276 does not improve AUC. Reverting changes.
Training on augumented user 117542 7/50 current_auc = 0.5555555555555556
User 117542 AUC after training: 0.5555555555555556
User 117542 does not improve AUC. Reverting changes.
Training on augumented user 9106 8/50 current_auc = 0.5555555555555556
User 9106 AUC after training: 0.5555555555555556
User 9106 does not improve AUC. Reverting changes.
Training on augumented user 20690 9/50 current_auc = 0.5555555555555556
User 20690 AUC after training: 0.5454545454545454
User 20690 does not improve AUC. Reverting changes.
Training on augumented user 130243 10/50 current_auc = 0.5555555555555556
User 130243 AUC after training: 0.5454545454545454
User 130243 does not improve AUC. Reverting changes.
Training on augumented user 126598 11/50 current_auc = 0.5555555555555556
User 126598 AUC after training: 0.5555555555555556
User 126598 does not improve AUC. Reverting changes.
Training on augumented user 74302 12/50 current_auc = 0.5555555555555556
User 74302 AUC after training: 0.5454545454545454
User 74302 does not improve AUC. Reverting changes.
Training on augumented user 117425 13/50 current_auc = 0.5555555555555556
User 117425 AUC after training: 0.5555555555555556
User 117425 does not improve AUC. Reverting changes.
Training on augumented user 17962 14/50 current_auc = 0.5555555555555556
User 17962 AUC after training: 0.5555555555555556
User 17962 does not improve AUC. Reverting changes.
Training on augumented user 32287 15/50 current_auc = 0.5555555555555556
User 32287 AUC after training: 0.5454545454545454
User 32287 does not improve AUC. Reverting changes.
Training on augumented user 103987 16/50 current_auc = 0.5555555555555556
User 103987 AUC after training: 0.5454545454545454
User 103987 does not improve AUC. Reverting changes.
Training on augumented user 45819 17/50 current_auc = 0.5555555555555556
User 45819 AUC after training: 0.5454545454545454
User 45819 does not improve AUC. Reverting changes.
Training on augumented user 115994 18/50 current_auc = 0.5555555555555556
User 115994 AUC after training: 0.5555555555555556
User 115994 does not improve AUC. Reverting changes.
Training on augumented user 111583 19/50 current_auc = 0.5555555555555556
User 111583 AUC after training: 0.5555555555555556
User 111583 does not improve AUC. Reverting changes.
Training on augumented user 88833 20/50 current_auc = 0.5555555555555556
User 88833 AUC after training: 0.5454545454545454
User 88833 does not improve AUC. Reverting changes.
Training on augumented user 68134 21/50 current_auc = 0.5555555555555556
User 68134 AUC after training: 0.5454545454545454
User 68134 does not improve AUC. Reverting changes.
Training on augumented user 95763 22/50 current_auc = 0.5555555555555556
User 95763 AUC after training: 0.5454545454545454
User 95763 does not improve AUC. Reverting changes.
Training on augumented user 22749 23/50 current_auc = 0.5555555555555556
User 22749 AUC after training: 0.5454545454545454
User 22749 does not improve AUC. Reverting changes.
Training on augumented user 7406 24/50 current_auc = 0.5555555555555556
User 7406 AUC after training: 0.5555555555555556
User 7406 does not improve AUC. Reverting changes.
Training on augumented user 34541 25/50 current_auc = 0.5555555555555556
User 34541 AUC after training: 0.5555555555555556
User 34541 does not improve AUC. Reverting changes.
Training on augumented user 134216 26/50 current_auc = 0.5555555555555556
User 134216 AUC after training: 0.5555555555555556
User 134216 does not improve AUC. Reverting changes.
Training on augumented user 58456 27/50 current_auc = 0.5555555555555556
User 58456 AUC after training: 0.5555555555555556
User 58456 does not improve AUC. Reverting changes.
Training on augumented user 18496 28/50 current_auc = 0.5555555555555556
User 18496 AUC after training: 0.5454545454545454
User 18496 does not improve AUC. Reverting changes.
Training on augumented user 108075 29/50 current_auc = 0.5555555555555556
User 108075 AUC after training: 0.5454545454545454
User 108075 does not improve AUC. Reverting changes.
Training on augumented user 113926 30/50 current_auc = 0.5555555555555556
User 113926 AUC after training: 0.5555555555555556
User 113926 does not improve AUC. Reverting changes.
Training on augumented user 101409 31/50 current_auc = 0.5555555555555556
User 101409 AUC after training: 0.5555555555555556
User 101409 does not improve AUC. Reverting changes.
Training on augumented user 122519 32/50 current_auc = 0.5555555555555556
User 122519 AUC after training: 0.5555555555555556
User 122519 does not improve AUC. Reverting changes.
Training on augumented user 68232 33/50 current_auc = 0.5555555555555556
User 68232 AUC after training: 0.5454545454545454
User 68232 does not improve AUC. Reverting changes.
Training on augumented user 34427 34/50 current_auc = 0.5555555555555556
User 34427 AUC after training: 0.5555555555555556
User 34427 does not improve AUC. Reverting changes.
Training on augumented user 62649 35/50 current_auc = 0.5555555555555556
User 62649 AUC after training: 0.5555555555555556
User 62649 does not improve AUC. Reverting changes.
Training on augumented user 20483 36/50 current_auc = 0.5555555555555556
User 20483 AUC after training: 0.5555555555555556
User 20483 does not improve AUC. Reverting changes.
Training on augumented user 118398 37/50 current_auc = 0.5555555555555556
User 118398 AUC after training: 0.5454545454545454
User 118398 does not improve AUC. Reverting changes.
Training on augumented user 69603 38/50 current_auc = 0.5555555555555556
User 69603 AUC after training: 0.5454545454545454
User 69603 does not improve AUC. Reverting changes.
Training on augumented user 29025 39/50 current_auc = 0.5555555555555556
User 29025 AUC after training: 0.5555555555555556
User 29025 does not improve AUC. Reverting changes.
Training on augumented user 57872 40/50 current_auc = 0.5555555555555556
User 57872 AUC after training: 0.5555555555555556
User 57872 does not improve AUC. Reverting changes.
Training on augumented user 16094 41/50 current_auc = 0.5555555555555556
User 16094 AUC after training: 0.5555555555555556
User 16094 does not improve AUC. Reverting changes.
Training on augumented user 129230 42/50 current_auc = 0.5555555555555556
User 129230 AUC after training: 0.5555555555555556
User 129230 does not improve AUC. Reverting changes.
Training on augumented user 90851 43/50 current_auc = 0.5555555555555556
User 90851 AUC after training: 0.5454545454545454
User 90851 does not improve AUC. Reverting changes.
Training on augumented user 78416 44/50 current_auc = 0.5555555555555556
User 78416 AUC after training: 0.5454545454545454
User 78416 does not improve AUC. Reverting changes.
Training on augumented user 74256 45/50 current_auc = 0.5555555555555556
User 74256 AUC after training: 0.5555555555555556
User 74256 does not improve AUC. Reverting changes.
Training on augumented user 123795 46/50 current_auc = 0.5555555555555556
User 123795 AUC after training: 0.5454545454545454
User 123795 does not improve AUC. Reverting changes.
Training on augumented user 20065 47/50 current_auc = 0.5555555555555556
User 20065 AUC after training: 0.5555555555555556
User 20065 does not improve AUC. Reverting changes.
Training on augumented user 96630 48/50 current_auc = 0.5555555555555556
User 96630 AUC after training: 0.5555555555555556
User 96630 does not improve AUC. Reverting changes.
Training on augumented user 11814 49/50 current_auc = 0.5555555555555556
User 11814 AUC after training: 0.5555555555555556
User 11814 does not improve AUC. Reverting changes.
[2024-12-02 18:27:18.790166] start test user 2248 89/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:27:19.194581] start test user 2248 89/568 recall augumented users by random, augumented_users = [43596, 82077, 67045, 55187, 41674, 88015, 94788, 52566, 79925, 65857, 58278, 21737, 87890, 3180, 1467, 116634, 125933, 102548, 58027, 32420, 16011, 88771, 34044, 65569, 138228, 42551, 128376, 257, 90345, 91333, 15438, 110067, 41973, 137064, 117345, 105769, 120532, 41176, 31264, 100421, 87686, 131151, 22204, 130299, 18228, 109368, 65423, 86149, 77628, 57726]
[2024-12-02 18:27:19.209413] user = 2248 Cloud 89/568
[2024-12-02 18:27:19.221077] user = 2248 Local 89/568
[2024-12-02 18:27:19.351065] user = 2248 Local+ 89/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:27:21.722306] user = 2248 MPDA- 89/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6166666666666666
Training on augumented user 43596 0/50 current_auc = 0.6166666666666666
User 43596 AUC after training: 0.6240740740740741
User 43596 improves AUC. Keeping the model.
Training on augumented user 82077 1/50 current_auc = 0.6240740740740741
User 82077 AUC after training: 0.6222222222222222
User 82077 does not improve AUC. Reverting changes.
Training on augumented user 67045 2/50 current_auc = 0.6240740740740741
User 67045 AUC after training: 0.6259259259259259
User 67045 improves AUC. Keeping the model.
Training on augumented user 55187 3/50 current_auc = 0.6259259259259259
User 55187 AUC after training: 0.6296296296296297
User 55187 improves AUC. Keeping the model.
Training on augumented user 41674 4/50 current_auc = 0.6296296296296297
User 41674 AUC after training: 0.6277777777777778
User 41674 does not improve AUC. Reverting changes.
Training on augumented user 88015 5/50 current_auc = 0.6296296296296297
User 88015 AUC after training: 0.6277777777777778
User 88015 does not improve AUC. Reverting changes.
Training on augumented user 94788 6/50 current_auc = 0.6296296296296297
User 94788 AUC after training: 0.6333333333333334
User 94788 improves AUC. Keeping the model.
Training on augumented user 52566 7/50 current_auc = 0.6333333333333334
User 52566 AUC after training: 0.6296296296296297
User 52566 does not improve AUC. Reverting changes.
Training on augumented user 79925 8/50 current_auc = 0.6333333333333334
User 79925 AUC after training: 0.6333333333333334
User 79925 does not improve AUC. Reverting changes.
Training on augumented user 65857 9/50 current_auc = 0.6333333333333334
User 65857 AUC after training: 0.6333333333333334
User 65857 does not improve AUC. Reverting changes.
Training on augumented user 58278 10/50 current_auc = 0.6333333333333334
User 58278 AUC after training: 0.6333333333333334
User 58278 does not improve AUC. Reverting changes.
Training on augumented user 21737 11/50 current_auc = 0.6333333333333334
User 21737 AUC after training: 0.6314814814814815
User 21737 does not improve AUC. Reverting changes.
Training on augumented user 87890 12/50 current_auc = 0.6333333333333334
User 87890 AUC after training: 0.6314814814814815
User 87890 does not improve AUC. Reverting changes.
Training on augumented user 3180 13/50 current_auc = 0.6333333333333334
User 3180 AUC after training: 0.6314814814814815
User 3180 does not improve AUC. Reverting changes.
Training on augumented user 1467 14/50 current_auc = 0.6333333333333334
User 1467 AUC after training: 0.6314814814814815
User 1467 does not improve AUC. Reverting changes.
Training on augumented user 116634 15/50 current_auc = 0.6333333333333334
User 116634 AUC after training: 0.6277777777777778
User 116634 does not improve AUC. Reverting changes.
Training on augumented user 125933 16/50 current_auc = 0.6333333333333334
User 125933 AUC after training: 0.6351851851851852
User 125933 improves AUC. Keeping the model.
Training on augumented user 102548 17/50 current_auc = 0.6351851851851852
User 102548 AUC after training: 0.6351851851851852
User 102548 does not improve AUC. Reverting changes.
Training on augumented user 58027 18/50 current_auc = 0.6351851851851852
User 58027 AUC after training: 0.6259259259259259
User 58027 does not improve AUC. Reverting changes.
Training on augumented user 32420 19/50 current_auc = 0.6351851851851852
User 32420 AUC after training: 0.6333333333333334
User 32420 does not improve AUC. Reverting changes.
Training on augumented user 16011 20/50 current_auc = 0.6351851851851852
User 16011 AUC after training: 0.6333333333333334
User 16011 does not improve AUC. Reverting changes.
Training on augumented user 88771 21/50 current_auc = 0.6351851851851852
User 88771 AUC after training: 0.6333333333333334
User 88771 does not improve AUC. Reverting changes.
Training on augumented user 34044 22/50 current_auc = 0.6351851851851852
User 34044 AUC after training: 0.6351851851851852
User 34044 does not improve AUC. Reverting changes.
Training on augumented user 65569 23/50 current_auc = 0.6351851851851852
User 65569 AUC after training: 0.6296296296296297
User 65569 does not improve AUC. Reverting changes.
Training on augumented user 138228 24/50 current_auc = 0.6351851851851852
User 138228 AUC after training: 0.6333333333333334
User 138228 does not improve AUC. Reverting changes.
Training on augumented user 42551 25/50 current_auc = 0.6351851851851852
User 42551 AUC after training: 0.6351851851851852
User 42551 does not improve AUC. Reverting changes.
Training on augumented user 128376 26/50 current_auc = 0.6351851851851852
User 128376 AUC after training: 0.6351851851851852
User 128376 does not improve AUC. Reverting changes.
Training on augumented user 257 27/50 current_auc = 0.6351851851851852
User 257 AUC after training: 0.6351851851851852
User 257 does not improve AUC. Reverting changes.
Training on augumented user 90345 28/50 current_auc = 0.6351851851851852
User 90345 AUC after training: 0.6333333333333334
User 90345 does not improve AUC. Reverting changes.
Training on augumented user 91333 29/50 current_auc = 0.6351851851851852
User 91333 AUC after training: 0.6333333333333334
User 91333 does not improve AUC. Reverting changes.
Training on augumented user 15438 30/50 current_auc = 0.6351851851851852
User 15438 AUC after training: 0.6333333333333334
User 15438 does not improve AUC. Reverting changes.
Training on augumented user 110067 31/50 current_auc = 0.6351851851851852
User 110067 AUC after training: 0.6333333333333334
User 110067 does not improve AUC. Reverting changes.
Training on augumented user 41973 32/50 current_auc = 0.6351851851851852
User 41973 AUC after training: 0.6333333333333334
User 41973 does not improve AUC. Reverting changes.
Training on augumented user 137064 33/50 current_auc = 0.6351851851851852
User 137064 AUC after training: 0.6296296296296297
User 137064 does not improve AUC. Reverting changes.
Training on augumented user 117345 34/50 current_auc = 0.6351851851851852
User 117345 AUC after training: 0.6333333333333334
User 117345 does not improve AUC. Reverting changes.
Training on augumented user 105769 35/50 current_auc = 0.6351851851851852
User 105769 AUC after training: 0.6296296296296297
User 105769 does not improve AUC. Reverting changes.
Training on augumented user 120532 36/50 current_auc = 0.6351851851851852
User 120532 AUC after training: 0.6351851851851852
User 120532 does not improve AUC. Reverting changes.
Training on augumented user 41176 37/50 current_auc = 0.6351851851851852
User 41176 AUC after training: 0.6333333333333334
User 41176 does not improve AUC. Reverting changes.
Training on augumented user 31264 38/50 current_auc = 0.6351851851851852
User 31264 AUC after training: 0.6351851851851852
User 31264 does not improve AUC. Reverting changes.
Training on augumented user 100421 39/50 current_auc = 0.6351851851851852
User 100421 AUC after training: 0.6333333333333334
User 100421 does not improve AUC. Reverting changes.
Training on augumented user 87686 40/50 current_auc = 0.6351851851851852
User 87686 AUC after training: 0.637037037037037
User 87686 improves AUC. Keeping the model.
Training on augumented user 131151 41/50 current_auc = 0.637037037037037
User 131151 AUC after training: 0.6351851851851852
User 131151 does not improve AUC. Reverting changes.
Training on augumented user 22204 42/50 current_auc = 0.637037037037037
User 22204 AUC after training: 0.6351851851851852
User 22204 does not improve AUC. Reverting changes.
Training on augumented user 130299 43/50 current_auc = 0.637037037037037
User 130299 AUC after training: 0.6351851851851852
User 130299 does not improve AUC. Reverting changes.
Training on augumented user 18228 44/50 current_auc = 0.637037037037037
User 18228 AUC after training: 0.6351851851851852
User 18228 does not improve AUC. Reverting changes.
Training on augumented user 109368 45/50 current_auc = 0.637037037037037
User 109368 AUC after training: 0.6314814814814815
User 109368 does not improve AUC. Reverting changes.
Training on augumented user 65423 46/50 current_auc = 0.637037037037037
User 65423 AUC after training: 0.6351851851851852
User 65423 does not improve AUC. Reverting changes.
Training on augumented user 86149 47/50 current_auc = 0.637037037037037
User 86149 AUC after training: 0.6351851851851852
User 86149 does not improve AUC. Reverting changes.
Training on augumented user 77628 48/50 current_auc = 0.637037037037037
User 77628 AUC after training: 0.637037037037037
User 77628 does not improve AUC. Reverting changes.
Training on augumented user 57726 49/50 current_auc = 0.637037037037037
User 57726 AUC after training: 0.6351851851851852
User 57726 does not improve AUC. Reverting changes.
[2024-12-02 18:27:46.561914] start test user 2264 90/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:27:46.998571] start test user 2264 90/568 recall augumented users by random, augumented_users = [57735, 42232, 8625, 44338, 12287, 19722, 41639, 3859, 1533, 45658, 100296, 56236, 55161, 7411, 137579, 137697, 113982, 42639, 6388, 91547, 136098, 119280, 39891, 135565, 117330, 20507, 10719, 21773, 5190, 104839, 59380, 87024, 9, 136636, 26018, 28576, 127518, 72562, 49161, 9428, 4331, 81277, 119386, 129342, 30742, 128922, 128815, 84814, 132786, 122296]
[2024-12-02 18:27:47.011022] user = 2264 Cloud 90/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:27:47.016988] user = 2264 Local 90/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:27:47.040579] user = 2264 Local+ 90/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:27:49.732538] user = 2264 MPDA- 90/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 57735 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57735 AUC after training: 0.5
User 57735 does not improve AUC. Reverting changes.
Training on augumented user 42232 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42232 AUC after training: 0.5
User 42232 does not improve AUC. Reverting changes.
Training on augumented user 8625 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8625 AUC after training: 0.5
User 8625 does not improve AUC. Reverting changes.
Training on augumented user 44338 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44338 AUC after training: 0.5
User 44338 does not improve AUC. Reverting changes.
Training on augumented user 12287 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12287 AUC after training: 0.5
User 12287 does not improve AUC. Reverting changes.
Training on augumented user 19722 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19722 AUC after training: 0.5
User 19722 does not improve AUC. Reverting changes.
Training on augumented user 41639 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41639 AUC after training: 0.5
User 41639 does not improve AUC. Reverting changes.
Training on augumented user 3859 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3859 AUC after training: 0.5
User 3859 does not improve AUC. Reverting changes.
Training on augumented user 1533 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1533 AUC after training: 0.5
User 1533 does not improve AUC. Reverting changes.
Training on augumented user 45658 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45658 AUC after training: 0.5
User 45658 does not improve AUC. Reverting changes.
Training on augumented user 100296 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100296 AUC after training: 0.5
User 100296 does not improve AUC. Reverting changes.
Training on augumented user 56236 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56236 AUC after training: 0.5
User 56236 does not improve AUC. Reverting changes.
Training on augumented user 55161 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55161 AUC after training: 0.5
User 55161 does not improve AUC. Reverting changes.
Training on augumented user 7411 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7411 AUC after training: 0.5
User 7411 does not improve AUC. Reverting changes.
Training on augumented user 137579 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137579 AUC after training: 0.5
User 137579 does not improve AUC. Reverting changes.
Training on augumented user 137697 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137697 AUC after training: 0.5
User 137697 does not improve AUC. Reverting changes.
Training on augumented user 113982 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113982 AUC after training: 0.5
User 113982 does not improve AUC. Reverting changes.
Training on augumented user 42639 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42639 AUC after training: 0.5
User 42639 does not improve AUC. Reverting changes.
Training on augumented user 6388 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6388 AUC after training: 0.5
User 6388 does not improve AUC. Reverting changes.
Training on augumented user 91547 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91547 AUC after training: 0.5
User 91547 does not improve AUC. Reverting changes.
Training on augumented user 136098 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136098 AUC after training: 0.5
User 136098 does not improve AUC. Reverting changes.
Training on augumented user 119280 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119280 AUC after training: 0.5
User 119280 does not improve AUC. Reverting changes.
Training on augumented user 39891 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39891 AUC after training: 0.5
User 39891 does not improve AUC. Reverting changes.
Training on augumented user 135565 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135565 AUC after training: 0.5
User 135565 does not improve AUC. Reverting changes.
Training on augumented user 117330 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117330 AUC after training: 0.5
User 117330 does not improve AUC. Reverting changes.
Training on augumented user 20507 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20507 AUC after training: 0.5
User 20507 does not improve AUC. Reverting changes.
Training on augumented user 10719 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10719 AUC after training: 0.5
User 10719 does not improve AUC. Reverting changes.
Training on augumented user 21773 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21773 AUC after training: 0.5
User 21773 does not improve AUC. Reverting changes.
Training on augumented user 5190 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5190 AUC after training: 0.5
User 5190 does not improve AUC. Reverting changes.
Training on augumented user 104839 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104839 AUC after training: 0.5
User 104839 does not improve AUC. Reverting changes.
Training on augumented user 59380 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59380 AUC after training: 0.5
User 59380 does not improve AUC. Reverting changes.
Training on augumented user 87024 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87024 AUC after training: 0.5
User 87024 does not improve AUC. Reverting changes.
Training on augumented user 9 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9 AUC after training: 0.5
User 9 does not improve AUC. Reverting changes.
Training on augumented user 136636 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136636 AUC after training: 0.5
User 136636 does not improve AUC. Reverting changes.
Training on augumented user 26018 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26018 AUC after training: 0.5
User 26018 does not improve AUC. Reverting changes.
Training on augumented user 28576 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28576 AUC after training: 0.5
User 28576 does not improve AUC. Reverting changes.
Training on augumented user 127518 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127518 AUC after training: 0.5
User 127518 does not improve AUC. Reverting changes.
Training on augumented user 72562 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72562 AUC after training: 0.5
User 72562 does not improve AUC. Reverting changes.
Training on augumented user 49161 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49161 AUC after training: 0.5
User 49161 does not improve AUC. Reverting changes.
Training on augumented user 9428 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9428 AUC after training: 0.5
User 9428 does not improve AUC. Reverting changes.
Training on augumented user 4331 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4331 AUC after training: 0.5
User 4331 does not improve AUC. Reverting changes.
Training on augumented user 81277 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81277 AUC after training: 0.5
User 81277 does not improve AUC. Reverting changes.
Training on augumented user 119386 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119386 AUC after training: 0.5
User 119386 does not improve AUC. Reverting changes.
Training on augumented user 129342 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129342 AUC after training: 0.5
User 129342 does not improve AUC. Reverting changes.
Training on augumented user 30742 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30742 AUC after training: 0.5
User 30742 does not improve AUC. Reverting changes.
Training on augumented user 128922 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128922 AUC after training: 0.5
User 128922 does not improve AUC. Reverting changes.
Training on augumented user 128815 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128815 AUC after training: 0.5
User 128815 does not improve AUC. Reverting changes.
Training on augumented user 84814 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84814 AUC after training: 0.5
User 84814 does not improve AUC. Reverting changes.
Training on augumented user 132786 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132786 AUC after training: 0.5
User 132786 does not improve AUC. Reverting changes.
Training on augumented user 122296 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122296 AUC after training: 0.5
User 122296 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:28:12.969950] start test user 2269 91/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:28:13.376277] start test user 2269 91/568 recall augumented users by random, augumented_users = [48791, 88072, 9876, 71307, 58068, 46005, 80662, 17718, 73004, 117600, 16866, 98079, 950, 63458, 41771, 134267, 30895, 51820, 70056, 81595, 133786, 12105, 123599, 30523, 63983, 81353, 64190, 86118, 80692, 116904, 9939, 32800, 79393, 75211, 123718, 117570, 37746, 14311, 133484, 37888, 54021, 80070, 5715, 100261, 26509, 47365, 5140, 133139, 81048, 113999]
[2024-12-02 18:28:13.389989] user = 2269 Cloud 91/568
[2024-12-02 18:28:13.407436] user = 2269 Local 91/568
[2024-12-02 18:28:13.480397] user = 2269 Local+ 91/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:28:15.879664] user = 2269 MPDA- 91/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6554016101853586
Training on augumented user 48791 0/50 current_auc = 0.6554016101853586
User 48791 AUC after training: 0.6552611870436249
User 48791 does not improve AUC. Reverting changes.
Training on augumented user 88072 1/50 current_auc = 0.6554016101853586
User 88072 AUC after training: 0.6544654559071335
User 88072 does not improve AUC. Reverting changes.
Training on augumented user 9876 2/50 current_auc = 0.6554016101853586
User 9876 AUC after training: 0.6552143793297135
User 9876 does not improve AUC. Reverting changes.
Training on augumented user 71307 3/50 current_auc = 0.6554016101853586
User 71307 AUC after training: 0.6553079947575361
User 71307 does not improve AUC. Reverting changes.
Training on augumented user 58068 4/50 current_auc = 0.6554016101853586
User 58068 AUC after training: 0.655120763901891
User 58068 does not improve AUC. Reverting changes.
Training on augumented user 46005 5/50 current_auc = 0.6554016101853586
User 46005 AUC after training: 0.6553079947575361
User 46005 does not improve AUC. Reverting changes.
Training on augumented user 80662 6/50 current_auc = 0.6554016101853586
User 80662 AUC after training: 0.6548399176184235
User 80662 does not improve AUC. Reverting changes.
Training on augumented user 17718 7/50 current_auc = 0.6554016101853586
User 17718 AUC after training: 0.6546526867627784
User 17718 does not improve AUC. Reverting changes.
Training on augumented user 73004 8/50 current_auc = 0.6554016101853586
User 73004 AUC after training: 0.6559164950383822
User 73004 improves AUC. Keeping the model.
Training on augumented user 117600 9/50 current_auc = 0.6559164950383822
User 117600 AUC after training: 0.655869687324471
User 117600 does not improve AUC. Reverting changes.
Training on augumented user 16866 10/50 current_auc = 0.6559164950383822
User 16866 AUC after training: 0.6558696873244712
User 16866 does not improve AUC. Reverting changes.
Training on augumented user 98079 11/50 current_auc = 0.6559164950383822
User 98079 AUC after training: 0.6559633027522935
User 98079 improves AUC. Keeping the model.
Training on augumented user 950 12/50 current_auc = 0.6559633027522935
User 950 AUC after training: 0.656244149035761
User 950 improves AUC. Keeping the model.
Training on augumented user 63458 13/50 current_auc = 0.656244149035761
User 63458 AUC after training: 0.6566186107470511
User 63458 improves AUC. Keeping the model.
Training on augumented user 41771 14/50 current_auc = 0.6566186107470511
User 41771 AUC after training: 0.6569930724583412
User 41771 improves AUC. Keeping the model.
Training on augumented user 134267 15/50 current_auc = 0.6569930724583412
User 134267 AUC after training: 0.6565249953192286
User 134267 does not improve AUC. Reverting changes.
Training on augumented user 30895 16/50 current_auc = 0.6569930724583412
User 30895 AUC after training: 0.6569930724583412
User 30895 does not improve AUC. Reverting changes.
Training on augumented user 51820 17/50 current_auc = 0.6569930724583412
User 51820 AUC after training: 0.6565249953192286
User 51820 does not improve AUC. Reverting changes.
Training on augumented user 70056 18/50 current_auc = 0.6569930724583412
User 70056 AUC after training: 0.6563377644635836
User 70056 does not improve AUC. Reverting changes.
Training on augumented user 81595 19/50 current_auc = 0.6569930724583412
User 81595 AUC after training: 0.6561973413218498
User 81595 does not improve AUC. Reverting changes.
Training on augumented user 133786 20/50 current_auc = 0.6569930724583412
User 133786 AUC after training: 0.6560569181801161
User 133786 does not improve AUC. Reverting changes.
Training on augumented user 12105 21/50 current_auc = 0.6569930724583412
User 12105 AUC after training: 0.6567122261748737
User 12105 does not improve AUC. Reverting changes.
Training on augumented user 123599 22/50 current_auc = 0.6569930724583412
User 123599 AUC after training: 0.6565249953192286
User 123599 does not improve AUC. Reverting changes.
Training on augumented user 30523 23/50 current_auc = 0.6569930724583412
User 30523 AUC after training: 0.6566186107470512
User 30523 does not improve AUC. Reverting changes.
Training on augumented user 63983 24/50 current_auc = 0.6569930724583412
User 63983 AUC after training: 0.6568058416026962
User 63983 does not improve AUC. Reverting changes.
Training on augumented user 81353 25/50 current_auc = 0.6569930724583412
User 81353 AUC after training: 0.6564313798914061
User 81353 does not improve AUC. Reverting changes.
Training on augumented user 64190 26/50 current_auc = 0.6569930724583412
User 64190 AUC after training: 0.6568058416026962
User 64190 does not improve AUC. Reverting changes.
Training on augumented user 86118 27/50 current_auc = 0.6569930724583412
User 86118 AUC after training: 0.6568058416026962
User 86118 does not improve AUC. Reverting changes.
Training on augumented user 80692 28/50 current_auc = 0.6569930724583412
User 80692 AUC after training: 0.6569930724583412
User 80692 does not improve AUC. Reverting changes.
Training on augumented user 116904 29/50 current_auc = 0.6569930724583412
User 116904 AUC after training: 0.6563377644635836
User 116904 does not improve AUC. Reverting changes.
Training on augumented user 9939 30/50 current_auc = 0.6569930724583412
User 9939 AUC after training: 0.6563377644635836
User 9939 does not improve AUC. Reverting changes.
Training on augumented user 32800 31/50 current_auc = 0.6569930724583412
User 32800 AUC after training: 0.656244149035761
User 32800 does not improve AUC. Reverting changes.
Training on augumented user 79393 32/50 current_auc = 0.6569930724583412
User 79393 AUC after training: 0.6581164575922112
User 79393 improves AUC. Keeping the model.
Training on augumented user 75211 33/50 current_auc = 0.6581164575922112
User 75211 AUC after training: 0.6582100730200338
User 75211 improves AUC. Keeping the model.
Training on augumented user 123718 34/50 current_auc = 0.6582100730200338
User 123718 AUC after training: 0.6580228421643887
User 123718 does not improve AUC. Reverting changes.
Training on augumented user 117570 35/50 current_auc = 0.6582100730200338
User 117570 AUC after training: 0.6580228421643888
User 117570 does not improve AUC. Reverting changes.
Training on augumented user 37746 36/50 current_auc = 0.6582100730200338
User 37746 AUC after training: 0.6574611495974537
User 37746 does not improve AUC. Reverting changes.
Training on augumented user 14311 37/50 current_auc = 0.6582100730200338
User 14311 AUC after training: 0.6581164575922112
User 14311 does not improve AUC. Reverting changes.
Training on augumented user 133484 38/50 current_auc = 0.6582100730200338
User 133484 AUC after training: 0.6581164575922112
User 133484 does not improve AUC. Reverting changes.
Training on augumented user 37888 39/50 current_auc = 0.6582100730200338
User 37888 AUC after training: 0.6583036884478563
User 37888 improves AUC. Keeping the model.
Training on augumented user 54021 40/50 current_auc = 0.6583036884478563
User 54021 AUC after training: 0.6577419958809211
User 54021 does not improve AUC. Reverting changes.
Training on augumented user 80070 41/50 current_auc = 0.6583036884478563
User 80070 AUC after training: 0.6586781501591462
User 80070 improves AUC. Keeping the model.
Training on augumented user 5715 42/50 current_auc = 0.6586781501591462
User 5715 AUC after training: 0.6581164575922112
User 5715 does not improve AUC. Reverting changes.
Training on augumented user 100261 43/50 current_auc = 0.6586781501591462
User 100261 AUC after training: 0.6585845347313237
User 100261 does not improve AUC. Reverting changes.
Training on augumented user 26509 44/50 current_auc = 0.6586781501591462
User 26509 AUC after training: 0.6587717655869687
User 26509 improves AUC. Keeping the model.
Training on augumented user 47365 45/50 current_auc = 0.6587717655869687
User 47365 AUC after training: 0.6585845347313237
User 47365 does not improve AUC. Reverting changes.
Training on augumented user 5140 46/50 current_auc = 0.6587717655869687
User 5140 AUC after training: 0.6588653810147912
User 5140 improves AUC. Keeping the model.
Training on augumented user 133139 47/50 current_auc = 0.6588653810147912
User 133139 AUC after training: 0.6580228421643886
User 133139 does not improve AUC. Reverting changes.
Training on augumented user 81048 48/50 current_auc = 0.6588653810147912
User 81048 AUC after training: 0.6588653810147912
User 81048 does not improve AUC. Reverting changes.
Training on augumented user 113999 49/50 current_auc = 0.6588653810147912
User 113999 AUC after training: 0.6584909193035012
User 113999 does not improve AUC. Reverting changes.
[2024-12-02 18:28:42.927521] start test user 2274 92/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:28:43.579496] start test user 2274 92/568 recall augumented users by random, augumented_users = [83979, 109094, 124830, 15377, 62085, 84162, 75491, 134375, 124481, 32702, 58251, 6900, 102044, 102866, 68622, 114001, 106370, 71883, 52237, 66536, 36915, 895, 71148, 51837, 62934, 89625, 2283, 39491, 121420, 95772, 123444, 117086, 35021, 21823, 24724, 51022, 90551, 136006, 29489, 41705, 29978, 123653, 40601, 117281, 3761, 50475, 57236, 106420, 63611, 43402]
[2024-12-02 18:28:43.601623] user = 2274 Cloud 92/568
[2024-12-02 18:28:43.636445] user = 2274 Local 92/568
[2024-12-02 18:28:43.714079] user = 2274 Local+ 92/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:28:45.770988] user = 2274 MPDA- 92/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6261398176291794
Training on augumented user 83979 0/50 current_auc = 0.6261398176291794
User 83979 AUC after training: 0.625531914893617
User 83979 does not improve AUC. Reverting changes.
Training on augumented user 109094 1/50 current_auc = 0.6261398176291794
User 109094 AUC after training: 0.6256838905775076
User 109094 does not improve AUC. Reverting changes.
Training on augumented user 124830 2/50 current_auc = 0.6261398176291794
User 124830 AUC after training: 0.6256838905775076
User 124830 does not improve AUC. Reverting changes.
Training on augumented user 15377 3/50 current_auc = 0.6261398176291794
User 15377 AUC after training: 0.6250759878419453
User 15377 does not improve AUC. Reverting changes.
Training on augumented user 62085 4/50 current_auc = 0.6261398176291794
User 62085 AUC after training: 0.627355623100304
User 62085 improves AUC. Keeping the model.
Training on augumented user 84162 5/50 current_auc = 0.627355623100304
User 84162 AUC after training: 0.627355623100304
User 84162 does not improve AUC. Reverting changes.
Training on augumented user 75491 6/50 current_auc = 0.627355623100304
User 75491 AUC after training: 0.6272036474164133
User 75491 does not improve AUC. Reverting changes.
Training on augumented user 134375 7/50 current_auc = 0.627355623100304
User 134375 AUC after training: 0.6268996960486322
User 134375 does not improve AUC. Reverting changes.
Training on augumented user 124481 8/50 current_auc = 0.627355623100304
User 124481 AUC after training: 0.6278115501519757
User 124481 improves AUC. Keeping the model.
Training on augumented user 32702 9/50 current_auc = 0.6278115501519757
User 32702 AUC after training: 0.6272036474164133
User 32702 does not improve AUC. Reverting changes.
Training on augumented user 58251 10/50 current_auc = 0.6278115501519757
User 58251 AUC after training: 0.6287234042553191
User 58251 improves AUC. Keeping the model.
Training on augumented user 6900 11/50 current_auc = 0.6287234042553191
User 6900 AUC after training: 0.628723404255319
User 6900 does not improve AUC. Reverting changes.
Training on augumented user 102044 12/50 current_auc = 0.6287234042553191
User 102044 AUC after training: 0.6276595744680851
User 102044 does not improve AUC. Reverting changes.
Training on augumented user 102866 13/50 current_auc = 0.6287234042553191
User 102866 AUC after training: 0.6302431610942248
User 102866 improves AUC. Keeping the model.
Training on augumented user 68622 14/50 current_auc = 0.6302431610942248
User 68622 AUC after training: 0.629483282674772
User 68622 does not improve AUC. Reverting changes.
Training on augumented user 114001 15/50 current_auc = 0.6302431610942248
User 114001 AUC after training: 0.6308510638297873
User 114001 improves AUC. Keeping the model.
Training on augumented user 106370 16/50 current_auc = 0.6308510638297873
User 106370 AUC after training: 0.629483282674772
User 106370 does not improve AUC. Reverting changes.
Training on augumented user 71883 17/50 current_auc = 0.6308510638297873
User 71883 AUC after training: 0.6300911854103343
User 71883 does not improve AUC. Reverting changes.
Training on augumented user 52237 18/50 current_auc = 0.6308510638297873
User 52237 AUC after training: 0.629483282674772
User 52237 does not improve AUC. Reverting changes.
Training on augumented user 66536 19/50 current_auc = 0.6308510638297873
User 66536 AUC after training: 0.6306990881458966
User 66536 does not improve AUC. Reverting changes.
Training on augumented user 36915 20/50 current_auc = 0.6308510638297873
User 36915 AUC after training: 0.6313069908814589
User 36915 improves AUC. Keeping the model.
Training on augumented user 895 21/50 current_auc = 0.6313069908814589
User 895 AUC after training: 0.6310030395136778
User 895 does not improve AUC. Reverting changes.
Training on augumented user 71148 22/50 current_auc = 0.6313069908814589
User 71148 AUC after training: 0.6310030395136778
User 71148 does not improve AUC. Reverting changes.
Training on augumented user 51837 23/50 current_auc = 0.6313069908814589
User 51837 AUC after training: 0.6302431610942248
User 51837 does not improve AUC. Reverting changes.
Training on augumented user 62934 24/50 current_auc = 0.6313069908814589
User 62934 AUC after training: 0.6293313069908815
User 62934 does not improve AUC. Reverting changes.
Training on augumented user 89625 25/50 current_auc = 0.6313069908814589
User 89625 AUC after training: 0.6308510638297872
User 89625 does not improve AUC. Reverting changes.
Training on augumented user 2283 26/50 current_auc = 0.6313069908814589
User 2283 AUC after training: 0.6313069908814589
User 2283 does not improve AUC. Reverting changes.
Training on augumented user 39491 27/50 current_auc = 0.6313069908814589
User 39491 AUC after training: 0.6311550151975683
User 39491 does not improve AUC. Reverting changes.
Training on augumented user 121420 28/50 current_auc = 0.6313069908814589
User 121420 AUC after training: 0.6303951367781154
User 121420 does not improve AUC. Reverting changes.
Training on augumented user 95772 29/50 current_auc = 0.6313069908814589
User 95772 AUC after training: 0.6299392097264437
User 95772 does not improve AUC. Reverting changes.
Training on augumented user 123444 30/50 current_auc = 0.6313069908814589
User 123444 AUC after training: 0.6299392097264438
User 123444 does not improve AUC. Reverting changes.
Training on augumented user 117086 31/50 current_auc = 0.6313069908814589
User 117086 AUC after training: 0.630243161094225
User 117086 does not improve AUC. Reverting changes.
Training on augumented user 35021 32/50 current_auc = 0.6313069908814589
User 35021 AUC after training: 0.6300911854103344
User 35021 does not improve AUC. Reverting changes.
Training on augumented user 21823 33/50 current_auc = 0.6313069908814589
User 21823 AUC after training: 0.6311550151975683
User 21823 does not improve AUC. Reverting changes.
Training on augumented user 24724 34/50 current_auc = 0.6313069908814589
User 24724 AUC after training: 0.6287234042553191
User 24724 does not improve AUC. Reverting changes.
Training on augumented user 51022 35/50 current_auc = 0.6313069908814589
User 51022 AUC after training: 0.6313069908814588
User 51022 does not improve AUC. Reverting changes.
Training on augumented user 90551 36/50 current_auc = 0.6313069908814589
User 90551 AUC after training: 0.6303951367781155
User 90551 does not improve AUC. Reverting changes.
Training on augumented user 136006 37/50 current_auc = 0.6313069908814589
User 136006 AUC after training: 0.6300911854103344
User 136006 does not improve AUC. Reverting changes.
Training on augumented user 29489 38/50 current_auc = 0.6313069908814589
User 29489 AUC after training: 0.6282674772036474
User 29489 does not improve AUC. Reverting changes.
Training on augumented user 41705 39/50 current_auc = 0.6313069908814589
User 41705 AUC after training: 0.6299392097264438
User 41705 does not improve AUC. Reverting changes.
Training on augumented user 29978 40/50 current_auc = 0.6313069908814589
User 29978 AUC after training: 0.6300911854103344
User 29978 does not improve AUC. Reverting changes.
Training on augumented user 123653 41/50 current_auc = 0.6313069908814589
User 123653 AUC after training: 0.6287234042553191
User 123653 does not improve AUC. Reverting changes.
Training on augumented user 40601 42/50 current_auc = 0.6313069908814589
User 40601 AUC after training: 0.630547112462006
User 40601 does not improve AUC. Reverting changes.
Training on augumented user 117281 43/50 current_auc = 0.6313069908814589
User 117281 AUC after training: 0.6310030395136778
User 117281 does not improve AUC. Reverting changes.
Training on augumented user 3761 44/50 current_auc = 0.6313069908814589
User 3761 AUC after training: 0.6299392097264437
User 3761 does not improve AUC. Reverting changes.
Training on augumented user 50475 45/50 current_auc = 0.6313069908814589
User 50475 AUC after training: 0.6305471124620061
User 50475 does not improve AUC. Reverting changes.
Training on augumented user 57236 46/50 current_auc = 0.6313069908814589
User 57236 AUC after training: 0.6310030395136778
User 57236 does not improve AUC. Reverting changes.
Training on augumented user 106420 47/50 current_auc = 0.6313069908814589
User 106420 AUC after training: 0.6306990881458967
User 106420 does not improve AUC. Reverting changes.
Training on augumented user 63611 48/50 current_auc = 0.6313069908814589
User 63611 AUC after training: 0.6299392097264438
User 63611 does not improve AUC. Reverting changes.
Training on augumented user 43402 49/50 current_auc = 0.6313069908814589
User 43402 AUC after training: 0.6300911854103344
User 43402 does not improve AUC. Reverting changes.
[2024-12-02 18:29:13.908036] start test user 2276 93/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:29:14.412272] start test user 2276 93/568 recall augumented users by random, augumented_users = [14847, 640, 59983, 48080, 29459, 52868, 90092, 114147, 115061, 56017, 105727, 113574, 4164, 30271, 100046, 75190, 126192, 30760, 120878, 46990, 40449, 120429, 35974, 24278, 14377, 59672, 47508, 64940, 22548, 24169, 112226, 115141, 59641, 106770, 112691, 16303, 103430, 136017, 98143, 19098, 16843, 94831, 25192, 93205, 86598, 25460, 73539, 90340, 102685, 35692]
[2024-12-02 18:29:14.427436] user = 2276 Cloud 93/568
[2024-12-02 18:29:14.452699] user = 2276 Local 93/568
[2024-12-02 18:29:14.499485] user = 2276 Local+ 93/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:29:17.188243] user = 2276 MPDA- 93/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7075757575757576
Training on augumented user 14847 0/50 current_auc = 0.7075757575757576
User 14847 AUC after training: 0.7090909090909091
User 14847 improves AUC. Keeping the model.
Training on augumented user 640 1/50 current_auc = 0.7090909090909091
User 640 AUC after training: 0.7090909090909091
User 640 does not improve AUC. Reverting changes.
Training on augumented user 59983 2/50 current_auc = 0.7090909090909091
User 59983 AUC after training: 0.7090909090909092
User 59983 improves AUC. Keeping the model.
Training on augumented user 48080 3/50 current_auc = 0.7090909090909092
User 48080 AUC after training: 0.7090909090909092
User 48080 does not improve AUC. Reverting changes.
Training on augumented user 29459 4/50 current_auc = 0.7090909090909092
User 29459 AUC after training: 0.7090909090909092
User 29459 does not improve AUC. Reverting changes.
Training on augumented user 52868 5/50 current_auc = 0.7090909090909092
User 52868 AUC after training: 0.7090909090909091
User 52868 does not improve AUC. Reverting changes.
Training on augumented user 90092 6/50 current_auc = 0.7090909090909092
User 90092 AUC after training: 0.7090909090909091
User 90092 does not improve AUC. Reverting changes.
Training on augumented user 114147 7/50 current_auc = 0.7090909090909092
User 114147 AUC after training: 0.7090909090909092
User 114147 does not improve AUC. Reverting changes.
Training on augumented user 115061 8/50 current_auc = 0.7090909090909092
User 115061 AUC after training: 0.7090909090909092
User 115061 does not improve AUC. Reverting changes.
Training on augumented user 56017 9/50 current_auc = 0.7090909090909092
User 56017 AUC after training: 0.7090909090909092
User 56017 does not improve AUC. Reverting changes.
Training on augumented user 105727 10/50 current_auc = 0.7090909090909092
User 105727 AUC after training: 0.7090909090909092
User 105727 does not improve AUC. Reverting changes.
Training on augumented user 113574 11/50 current_auc = 0.7090909090909092
User 113574 AUC after training: 0.7090909090909091
User 113574 does not improve AUC. Reverting changes.
Training on augumented user 4164 12/50 current_auc = 0.7090909090909092
User 4164 AUC after training: 0.7090909090909092
User 4164 does not improve AUC. Reverting changes.
Training on augumented user 30271 13/50 current_auc = 0.7090909090909092
User 30271 AUC after training: 0.7090909090909092
User 30271 does not improve AUC. Reverting changes.
Training on augumented user 100046 14/50 current_auc = 0.7090909090909092
User 100046 AUC after training: 0.7090909090909092
User 100046 does not improve AUC. Reverting changes.
Training on augumented user 75190 15/50 current_auc = 0.7090909090909092
User 75190 AUC after training: 0.7090909090909092
User 75190 does not improve AUC. Reverting changes.
Training on augumented user 126192 16/50 current_auc = 0.7090909090909092
User 126192 AUC after training: 0.7083333333333334
User 126192 does not improve AUC. Reverting changes.
Training on augumented user 30760 17/50 current_auc = 0.7090909090909092
User 30760 AUC after training: 0.7090909090909092
User 30760 does not improve AUC. Reverting changes.
Training on augumented user 120878 18/50 current_auc = 0.7090909090909092
User 120878 AUC after training: 0.7090909090909092
User 120878 does not improve AUC. Reverting changes.
Training on augumented user 46990 19/50 current_auc = 0.7090909090909092
User 46990 AUC after training: 0.7090909090909092
User 46990 does not improve AUC. Reverting changes.
Training on augumented user 40449 20/50 current_auc = 0.7090909090909092
User 40449 AUC after training: 0.7090909090909092
User 40449 does not improve AUC. Reverting changes.
Training on augumented user 120429 21/50 current_auc = 0.7090909090909092
User 120429 AUC after training: 0.7106060606060607
User 120429 improves AUC. Keeping the model.
Training on augumented user 35974 22/50 current_auc = 0.7106060606060607
User 35974 AUC after training: 0.7090909090909092
User 35974 does not improve AUC. Reverting changes.
Training on augumented user 24278 23/50 current_auc = 0.7106060606060607
User 24278 AUC after training: 0.7106060606060607
User 24278 does not improve AUC. Reverting changes.
Training on augumented user 14377 24/50 current_auc = 0.7106060606060607
User 14377 AUC after training: 0.7113636363636364
User 14377 improves AUC. Keeping the model.
Training on augumented user 59672 25/50 current_auc = 0.7113636363636364
User 59672 AUC after training: 0.7113636363636364
User 59672 does not improve AUC. Reverting changes.
Training on augumented user 47508 26/50 current_auc = 0.7113636363636364
User 47508 AUC after training: 0.7113636363636364
User 47508 does not improve AUC. Reverting changes.
Training on augumented user 64940 27/50 current_auc = 0.7113636363636364
User 64940 AUC after training: 0.7113636363636364
User 64940 does not improve AUC. Reverting changes.
Training on augumented user 22548 28/50 current_auc = 0.7113636363636364
User 22548 AUC after training: 0.7113636363636364
User 22548 does not improve AUC. Reverting changes.
Training on augumented user 24169 29/50 current_auc = 0.7113636363636364
User 24169 AUC after training: 0.7121212121212122
User 24169 improves AUC. Keeping the model.
Training on augumented user 112226 30/50 current_auc = 0.7121212121212122
User 112226 AUC after training: 0.7113636363636364
User 112226 does not improve AUC. Reverting changes.
Training on augumented user 115141 31/50 current_auc = 0.7121212121212122
User 115141 AUC after training: 0.7113636363636364
User 115141 does not improve AUC. Reverting changes.
Training on augumented user 59641 32/50 current_auc = 0.7121212121212122
User 59641 AUC after training: 0.7113636363636364
User 59641 does not improve AUC. Reverting changes.
Training on augumented user 106770 33/50 current_auc = 0.7121212121212122
User 106770 AUC after training: 0.7106060606060607
User 106770 does not improve AUC. Reverting changes.
Training on augumented user 112691 34/50 current_auc = 0.7121212121212122
User 112691 AUC after training: 0.709848484848485
User 112691 does not improve AUC. Reverting changes.
Training on augumented user 16303 35/50 current_auc = 0.7121212121212122
User 16303 AUC after training: 0.7106060606060607
User 16303 does not improve AUC. Reverting changes.
Training on augumented user 103430 36/50 current_auc = 0.7121212121212122
User 103430 AUC after training: 0.7113636363636364
User 103430 does not improve AUC. Reverting changes.
Training on augumented user 136017 37/50 current_auc = 0.7121212121212122
User 136017 AUC after training: 0.7106060606060607
User 136017 does not improve AUC. Reverting changes.
Training on augumented user 98143 38/50 current_auc = 0.7121212121212122
User 98143 AUC after training: 0.7121212121212122
User 98143 does not improve AUC. Reverting changes.
Training on augumented user 19098 39/50 current_auc = 0.7121212121212122
User 19098 AUC after training: 0.7121212121212122
User 19098 does not improve AUC. Reverting changes.
Training on augumented user 16843 40/50 current_auc = 0.7121212121212122
User 16843 AUC after training: 0.7113636363636364
User 16843 does not improve AUC. Reverting changes.
Training on augumented user 94831 41/50 current_auc = 0.7121212121212122
User 94831 AUC after training: 0.7113636363636364
User 94831 does not improve AUC. Reverting changes.
Training on augumented user 25192 42/50 current_auc = 0.7121212121212122
User 25192 AUC after training: 0.709848484848485
User 25192 does not improve AUC. Reverting changes.
Training on augumented user 93205 43/50 current_auc = 0.7121212121212122
User 93205 AUC after training: 0.7113636363636364
User 93205 does not improve AUC. Reverting changes.
Training on augumented user 86598 44/50 current_auc = 0.7121212121212122
User 86598 AUC after training: 0.7113636363636364
User 86598 does not improve AUC. Reverting changes.
Training on augumented user 25460 45/50 current_auc = 0.7121212121212122
User 25460 AUC after training: 0.7106060606060607
User 25460 does not improve AUC. Reverting changes.
Training on augumented user 73539 46/50 current_auc = 0.7121212121212122
User 73539 AUC after training: 0.7113636363636364
User 73539 does not improve AUC. Reverting changes.
Training on augumented user 90340 47/50 current_auc = 0.7121212121212122
User 90340 AUC after training: 0.7106060606060607
User 90340 does not improve AUC. Reverting changes.
Training on augumented user 102685 48/50 current_auc = 0.7121212121212122
User 102685 AUC after training: 0.7106060606060607
User 102685 does not improve AUC. Reverting changes.
Training on augumented user 35692 49/50 current_auc = 0.7121212121212122
User 35692 AUC after training: 0.7121212121212122
User 35692 does not improve AUC. Reverting changes.
[2024-12-02 18:29:47.264292] start test user 2301 94/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:29:47.670447] start test user 2301 94/568 recall augumented users by random, augumented_users = [32018, 45075, 125103, 108435, 110785, 59992, 84731, 28537, 38407, 125105, 72900, 49397, 125325, 56318, 112329, 121623, 114044, 137617, 39765, 41910, 86544, 44466, 80326, 8855, 7725, 49410, 128344, 73245, 70108, 132531, 117408, 74070, 88936, 3132, 113250, 136521, 128520, 113018, 37110, 78402, 10413, 69310, 107272, 77835, 27179, 34612, 40219, 41766, 114844, 28613]
[2024-12-02 18:29:47.684771] user = 2301 Cloud 94/568
[2024-12-02 18:29:47.702860] user = 2301 Local 94/568
[2024-12-02 18:29:47.729196] user = 2301 Local+ 94/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:29:49.682434] user = 2301 MPDA- 94/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.48164062500000004
Training on augumented user 32018 0/50 current_auc = 0.48164062500000004
User 32018 AUC after training: 0.48007812499999997
User 32018 does not improve AUC. Reverting changes.
Training on augumented user 45075 1/50 current_auc = 0.48164062500000004
User 45075 AUC after training: 0.4826171875
User 45075 improves AUC. Keeping the model.
Training on augumented user 125103 2/50 current_auc = 0.4826171875
User 125103 AUC after training: 0.48232421875000003
User 125103 does not improve AUC. Reverting changes.
Training on augumented user 108435 3/50 current_auc = 0.4826171875
User 108435 AUC after training: 0.48183593750000003
User 108435 does not improve AUC. Reverting changes.
Training on augumented user 110785 4/50 current_auc = 0.4826171875
User 110785 AUC after training: 0.48369140625
User 110785 improves AUC. Keeping the model.
Training on augumented user 59992 5/50 current_auc = 0.48369140625
User 59992 AUC after training: 0.4845703125
User 59992 improves AUC. Keeping the model.
Training on augumented user 84731 6/50 current_auc = 0.4845703125
User 84731 AUC after training: 0.48164062500000004
User 84731 does not improve AUC. Reverting changes.
Training on augumented user 28537 7/50 current_auc = 0.4845703125
User 28537 AUC after training: 0.4853515625
User 28537 improves AUC. Keeping the model.
Training on augumented user 38407 8/50 current_auc = 0.4853515625
User 38407 AUC after training: 0.48535156250000006
User 38407 improves AUC. Keeping the model.
Training on augumented user 125105 9/50 current_auc = 0.48535156250000006
User 125105 AUC after training: 0.4861328125
User 125105 improves AUC. Keeping the model.
Training on augumented user 72900 10/50 current_auc = 0.4861328125
User 72900 AUC after training: 0.48925781249999994
User 72900 improves AUC. Keeping the model.
Training on augumented user 49397 11/50 current_auc = 0.48925781249999994
User 49397 AUC after training: 0.4869140625
User 49397 does not improve AUC. Reverting changes.
Training on augumented user 125325 12/50 current_auc = 0.48925781249999994
User 125325 AUC after training: 0.488671875
User 125325 does not improve AUC. Reverting changes.
Training on augumented user 56318 13/50 current_auc = 0.48925781249999994
User 56318 AUC after training: 0.48984375
User 56318 improves AUC. Keeping the model.
Training on augumented user 112329 14/50 current_auc = 0.48984375
User 112329 AUC after training: 0.4880859375
User 112329 does not improve AUC. Reverting changes.
Training on augumented user 121623 15/50 current_auc = 0.48984375
User 121623 AUC after training: 0.48769531250000003
User 121623 does not improve AUC. Reverting changes.
Training on augumented user 114044 16/50 current_auc = 0.48984375
User 114044 AUC after training: 0.4923828125
User 114044 improves AUC. Keeping the model.
Training on augumented user 137617 17/50 current_auc = 0.4923828125
User 137617 AUC after training: 0.48574218750000003
User 137617 does not improve AUC. Reverting changes.
Training on augumented user 39765 18/50 current_auc = 0.4923828125
User 39765 AUC after training: 0.49082031249999997
User 39765 does not improve AUC. Reverting changes.
Training on augumented user 41910 19/50 current_auc = 0.4923828125
User 41910 AUC after training: 0.49296875
User 41910 improves AUC. Keeping the model.
Training on augumented user 86544 20/50 current_auc = 0.49296875
User 86544 AUC after training: 0.4890625
User 86544 does not improve AUC. Reverting changes.
Training on augumented user 44466 21/50 current_auc = 0.49296875
User 44466 AUC after training: 0.4908203125
User 44466 does not improve AUC. Reverting changes.
Training on augumented user 80326 22/50 current_auc = 0.49296875
User 80326 AUC after training: 0.49121093750000006
User 80326 does not improve AUC. Reverting changes.
Training on augumented user 8855 23/50 current_auc = 0.49296875
User 8855 AUC after training: 0.49101562499999996
User 8855 does not improve AUC. Reverting changes.
Training on augumented user 7725 24/50 current_auc = 0.49296875
User 7725 AUC after training: 0.4912109375
User 7725 does not improve AUC. Reverting changes.
Training on augumented user 49410 25/50 current_auc = 0.49296875
User 49410 AUC after training: 0.49277343749999997
User 49410 does not improve AUC. Reverting changes.
Training on augumented user 128344 26/50 current_auc = 0.49296875
User 128344 AUC after training: 0.49335937500000004
User 128344 improves AUC. Keeping the model.
Training on augumented user 73245 27/50 current_auc = 0.49335937500000004
User 73245 AUC after training: 0.4900390625
User 73245 does not improve AUC. Reverting changes.
Training on augumented user 70108 28/50 current_auc = 0.49335937500000004
User 70108 AUC after training: 0.4896484375
User 70108 does not improve AUC. Reverting changes.
Training on augumented user 132531 29/50 current_auc = 0.49335937500000004
User 132531 AUC after training: 0.49375
User 132531 improves AUC. Keeping the model.
Training on augumented user 117408 30/50 current_auc = 0.49375
User 117408 AUC after training: 0.4921875
User 117408 does not improve AUC. Reverting changes.
Training on augumented user 74070 31/50 current_auc = 0.49375
User 74070 AUC after training: 0.4921875
User 74070 does not improve AUC. Reverting changes.
Training on augumented user 88936 32/50 current_auc = 0.49375
User 88936 AUC after training: 0.49296875
User 88936 does not improve AUC. Reverting changes.
Training on augumented user 3132 33/50 current_auc = 0.49375
User 3132 AUC after training: 0.4919921875
User 3132 does not improve AUC. Reverting changes.
Training on augumented user 113250 34/50 current_auc = 0.49375
User 113250 AUC after training: 0.493359375
User 113250 does not improve AUC. Reverting changes.
Training on augumented user 136521 35/50 current_auc = 0.49375
User 136521 AUC after training: 0.4888671875
User 136521 does not improve AUC. Reverting changes.
Training on augumented user 128520 36/50 current_auc = 0.49375
User 128520 AUC after training: 0.4931640625
User 128520 does not improve AUC. Reverting changes.
Training on augumented user 113018 37/50 current_auc = 0.49375
User 113018 AUC after training: 0.49277343749999997
User 113018 does not improve AUC. Reverting changes.
Training on augumented user 37110 38/50 current_auc = 0.49375
User 37110 AUC after training: 0.490625
User 37110 does not improve AUC. Reverting changes.
Training on augumented user 78402 39/50 current_auc = 0.49375
User 78402 AUC after training: 0.496484375
User 78402 improves AUC. Keeping the model.
Training on augumented user 10413 40/50 current_auc = 0.496484375
User 10413 AUC after training: 0.49375
User 10413 does not improve AUC. Reverting changes.
Training on augumented user 69310 41/50 current_auc = 0.496484375
User 69310 AUC after training: 0.4962890625
User 69310 does not improve AUC. Reverting changes.
Training on augumented user 107272 42/50 current_auc = 0.496484375
User 107272 AUC after training: 0.493359375
User 107272 does not improve AUC. Reverting changes.
Training on augumented user 77835 43/50 current_auc = 0.496484375
User 77835 AUC after training: 0.49179687499999997
User 77835 does not improve AUC. Reverting changes.
Training on augumented user 27179 44/50 current_auc = 0.496484375
User 27179 AUC after training: 0.496484375
User 27179 does not improve AUC. Reverting changes.
Training on augumented user 34612 45/50 current_auc = 0.496484375
User 34612 AUC after training: 0.4923828125
User 34612 does not improve AUC. Reverting changes.
Training on augumented user 40219 46/50 current_auc = 0.496484375
User 40219 AUC after training: 0.49687499999999996
User 40219 improves AUC. Keeping the model.
Training on augumented user 41766 47/50 current_auc = 0.49687499999999996
User 41766 AUC after training: 0.4978515625
User 41766 improves AUC. Keeping the model.
Training on augumented user 114844 48/50 current_auc = 0.4978515625
User 114844 AUC after training: 0.49765624999999997
User 114844 does not improve AUC. Reverting changes.
Training on augumented user 28613 49/50 current_auc = 0.4978515625
User 28613 AUC after training: 0.495703125
User 28613 does not improve AUC. Reverting changes.
[2024-12-02 18:30:19.815907] start test user 2310 95/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:30:20.660229] start test user 2310 95/568 recall augumented users by random, augumented_users = [54181, 73169, 129397, 92450, 81482, 88919, 68748, 25532, 78906, 136917, 116143, 20708, 43371, 19965, 77123, 71450, 33162, 105891, 19394, 109078, 123097, 101321, 21222, 70428, 59652, 56103, 134714, 117640, 130146, 38126, 113446, 110973, 123541, 33732, 55783, 118326, 2319, 104377, 11792, 12572, 27196, 94375, 66935, 103361, 72972, 24291, 6138, 99491, 34615, 72677]
[2024-12-02 18:30:20.714818] user = 2310 Cloud 95/568
[2024-12-02 18:30:20.776837] user = 2310 Local 95/568
[2024-12-02 18:30:20.910532] user = 2310 Local+ 95/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:30:23.168971] user = 2310 MPDA- 95/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5727777777777778
Training on augumented user 54181 0/50 current_auc = 0.5727777777777778
User 54181 AUC after training: 0.5733333333333334
User 54181 improves AUC. Keeping the model.
Training on augumented user 73169 1/50 current_auc = 0.5733333333333334
User 73169 AUC after training: 0.5738888888888889
User 73169 improves AUC. Keeping the model.
Training on augumented user 129397 2/50 current_auc = 0.5738888888888889
User 129397 AUC after training: 0.5700000000000001
User 129397 does not improve AUC. Reverting changes.
Training on augumented user 92450 3/50 current_auc = 0.5738888888888889
User 92450 AUC after training: 0.5722222222222223
User 92450 does not improve AUC. Reverting changes.
Training on augumented user 81482 4/50 current_auc = 0.5738888888888889
User 81482 AUC after training: 0.5744444444444444
User 81482 improves AUC. Keeping the model.
Training on augumented user 88919 5/50 current_auc = 0.5744444444444444
User 88919 AUC after training: 0.5716666666666667
User 88919 does not improve AUC. Reverting changes.
Training on augumented user 68748 6/50 current_auc = 0.5744444444444444
User 68748 AUC after training: 0.5722222222222223
User 68748 does not improve AUC. Reverting changes.
Training on augumented user 25532 7/50 current_auc = 0.5744444444444444
User 25532 AUC after training: 0.5733333333333334
User 25532 does not improve AUC. Reverting changes.
Training on augumented user 78906 8/50 current_auc = 0.5744444444444444
User 78906 AUC after training: 0.5716666666666667
User 78906 does not improve AUC. Reverting changes.
Training on augumented user 136917 9/50 current_auc = 0.5744444444444444
User 136917 AUC after training: 0.5733333333333334
User 136917 does not improve AUC. Reverting changes.
Training on augumented user 116143 10/50 current_auc = 0.5744444444444444
User 116143 AUC after training: 0.5733333333333334
User 116143 does not improve AUC. Reverting changes.
Training on augumented user 20708 11/50 current_auc = 0.5744444444444444
User 20708 AUC after training: 0.5727777777777778
User 20708 does not improve AUC. Reverting changes.
Training on augumented user 43371 12/50 current_auc = 0.5744444444444444
User 43371 AUC after training: 0.5738888888888889
User 43371 does not improve AUC. Reverting changes.
Training on augumented user 19965 13/50 current_auc = 0.5744444444444444
User 19965 AUC after training: 0.5738888888888889
User 19965 does not improve AUC. Reverting changes.
Training on augumented user 77123 14/50 current_auc = 0.5744444444444444
User 77123 AUC after training: 0.5733333333333334
User 77123 does not improve AUC. Reverting changes.
Training on augumented user 71450 15/50 current_auc = 0.5744444444444444
User 71450 AUC after training: 0.5700000000000001
User 71450 does not improve AUC. Reverting changes.
Training on augumented user 33162 16/50 current_auc = 0.5744444444444444
User 33162 AUC after training: 0.5722222222222222
User 33162 does not improve AUC. Reverting changes.
Training on augumented user 105891 17/50 current_auc = 0.5744444444444444
User 105891 AUC after training: 0.5727777777777778
User 105891 does not improve AUC. Reverting changes.
Training on augumented user 19394 18/50 current_auc = 0.5744444444444444
User 19394 AUC after training: 0.5738888888888889
User 19394 does not improve AUC. Reverting changes.
Training on augumented user 109078 19/50 current_auc = 0.5744444444444444
User 109078 AUC after training: 0.5733333333333334
User 109078 does not improve AUC. Reverting changes.
Training on augumented user 123097 20/50 current_auc = 0.5744444444444444
User 123097 AUC after training: 0.5727777777777778
User 123097 does not improve AUC. Reverting changes.
Training on augumented user 101321 21/50 current_auc = 0.5744444444444444
User 101321 AUC after training: 0.5722222222222222
User 101321 does not improve AUC. Reverting changes.
Training on augumented user 21222 22/50 current_auc = 0.5744444444444444
User 21222 AUC after training: 0.5722222222222222
User 21222 does not improve AUC. Reverting changes.
Training on augumented user 70428 23/50 current_auc = 0.5744444444444444
User 70428 AUC after training: 0.5738888888888889
User 70428 does not improve AUC. Reverting changes.
Training on augumented user 59652 24/50 current_auc = 0.5744444444444444
User 59652 AUC after training: 0.5716666666666667
User 59652 does not improve AUC. Reverting changes.
Training on augumented user 56103 25/50 current_auc = 0.5744444444444444
User 56103 AUC after training: 0.5722222222222223
User 56103 does not improve AUC. Reverting changes.
Training on augumented user 134714 26/50 current_auc = 0.5744444444444444
User 134714 AUC after training: 0.5727777777777778
User 134714 does not improve AUC. Reverting changes.
Training on augumented user 117640 27/50 current_auc = 0.5744444444444444
User 117640 AUC after training: 0.5705555555555556
User 117640 does not improve AUC. Reverting changes.
Training on augumented user 130146 28/50 current_auc = 0.5744444444444444
User 130146 AUC after training: 0.5744444444444444
User 130146 does not improve AUC. Reverting changes.
Training on augumented user 38126 29/50 current_auc = 0.5744444444444444
User 38126 AUC after training: 0.5722222222222222
User 38126 does not improve AUC. Reverting changes.
Training on augumented user 113446 30/50 current_auc = 0.5744444444444444
User 113446 AUC after training: 0.5722222222222222
User 113446 does not improve AUC. Reverting changes.
Training on augumented user 110973 31/50 current_auc = 0.5744444444444444
User 110973 AUC after training: 0.5733333333333333
User 110973 does not improve AUC. Reverting changes.
Training on augumented user 123541 32/50 current_auc = 0.5744444444444444
User 123541 AUC after training: 0.5722222222222222
User 123541 does not improve AUC. Reverting changes.
Training on augumented user 33732 33/50 current_auc = 0.5744444444444444
User 33732 AUC after training: 0.5705555555555556
User 33732 does not improve AUC. Reverting changes.
Training on augumented user 55783 34/50 current_auc = 0.5744444444444444
User 55783 AUC after training: 0.5711111111111111
User 55783 does not improve AUC. Reverting changes.
Training on augumented user 118326 35/50 current_auc = 0.5744444444444444
User 118326 AUC after training: 0.5738888888888889
User 118326 does not improve AUC. Reverting changes.
Training on augumented user 2319 36/50 current_auc = 0.5744444444444444
User 2319 AUC after training: 0.5716666666666667
User 2319 does not improve AUC. Reverting changes.
Training on augumented user 104377 37/50 current_auc = 0.5744444444444444
User 104377 AUC after training: 0.5738888888888889
User 104377 does not improve AUC. Reverting changes.
Training on augumented user 11792 38/50 current_auc = 0.5744444444444444
User 11792 AUC after training: 0.5716666666666667
User 11792 does not improve AUC. Reverting changes.
Training on augumented user 12572 39/50 current_auc = 0.5744444444444444
User 12572 AUC after training: 0.5716666666666667
User 12572 does not improve AUC. Reverting changes.
Training on augumented user 27196 40/50 current_auc = 0.5744444444444444
User 27196 AUC after training: 0.5727777777777777
User 27196 does not improve AUC. Reverting changes.
Training on augumented user 94375 41/50 current_auc = 0.5744444444444444
User 94375 AUC after training: 0.5722222222222222
User 94375 does not improve AUC. Reverting changes.
Training on augumented user 66935 42/50 current_auc = 0.5744444444444444
User 66935 AUC after training: 0.5727777777777778
User 66935 does not improve AUC. Reverting changes.
Training on augumented user 103361 43/50 current_auc = 0.5744444444444444
User 103361 AUC after training: 0.5738888888888889
User 103361 does not improve AUC. Reverting changes.
Training on augumented user 72972 44/50 current_auc = 0.5744444444444444
User 72972 AUC after training: 0.5722222222222222
User 72972 does not improve AUC. Reverting changes.
Training on augumented user 24291 45/50 current_auc = 0.5744444444444444
User 24291 AUC after training: 0.5722222222222222
User 24291 does not improve AUC. Reverting changes.
Training on augumented user 6138 46/50 current_auc = 0.5744444444444444
User 6138 AUC after training: 0.5711111111111111
User 6138 does not improve AUC. Reverting changes.
Training on augumented user 99491 47/50 current_auc = 0.5744444444444444
User 99491 AUC after training: 0.5727777777777778
User 99491 does not improve AUC. Reverting changes.
Training on augumented user 34615 48/50 current_auc = 0.5744444444444444
User 34615 AUC after training: 0.5744444444444444
User 34615 does not improve AUC. Reverting changes.
Training on augumented user 72677 49/50 current_auc = 0.5744444444444444
User 72677 AUC after training: 0.5727777777777778
User 72677 does not improve AUC. Reverting changes.
[2024-12-02 18:30:56.942403] start test user 2335 96/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:30:57.602776] start test user 2335 96/568 recall augumented users by random, augumented_users = [51780, 69845, 117577, 4906, 102504, 62428, 53143, 32288, 66914, 112680, 33, 112563, 60716, 46311, 4918, 41995, 32402, 137059, 69306, 21022, 121187, 114744, 43894, 47347, 35251, 125287, 98891, 17431, 102885, 102501, 32282, 59418, 32848, 18659, 106089, 103069, 102356, 12766, 23135, 91442, 86711, 27948, 98082, 29853, 93331, 126970, 14935, 94131, 83018, 5280]
[2024-12-02 18:30:57.623884] user = 2335 Cloud 96/568
[2024-12-02 18:30:57.640129] user = 2335 Local 96/568
[2024-12-02 18:30:57.694546] user = 2335 Local+ 96/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:30:59.492610] user = 2335 MPDA- 96/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5699884792626728
Training on augumented user 51780 0/50 current_auc = 0.5699884792626728
User 51780 AUC after training: 0.5702764976958525
User 51780 improves AUC. Keeping the model.
Training on augumented user 69845 1/50 current_auc = 0.5702764976958525
User 69845 AUC after training: 0.5697004608294931
User 69845 does not improve AUC. Reverting changes.
Training on augumented user 117577 2/50 current_auc = 0.5702764976958525
User 117577 AUC after training: 0.5725806451612904
User 117577 improves AUC. Keeping the model.
Training on augumented user 4906 3/50 current_auc = 0.5725806451612904
User 4906 AUC after training: 0.5691244239631337
User 4906 does not improve AUC. Reverting changes.
Training on augumented user 102504 4/50 current_auc = 0.5725806451612904
User 102504 AUC after training: 0.570852534562212
User 102504 does not improve AUC. Reverting changes.
Training on augumented user 62428 5/50 current_auc = 0.5725806451612904
User 62428 AUC after training: 0.5722926267281107
User 62428 does not improve AUC. Reverting changes.
Training on augumented user 53143 6/50 current_auc = 0.5725806451612904
User 53143 AUC after training: 0.570852534562212
User 53143 does not improve AUC. Reverting changes.
Training on augumented user 32288 7/50 current_auc = 0.5725806451612904
User 32288 AUC after training: 0.569700460829493
User 32288 does not improve AUC. Reverting changes.
Training on augumented user 66914 8/50 current_auc = 0.5725806451612904
User 66914 AUC after training: 0.5714285714285714
User 66914 does not improve AUC. Reverting changes.
Training on augumented user 112680 9/50 current_auc = 0.5725806451612904
User 112680 AUC after training: 0.5691244239631337
User 112680 does not improve AUC. Reverting changes.
Training on augumented user 33 10/50 current_auc = 0.5725806451612904
User 33 AUC after training: 0.5699884792626728
User 33 does not improve AUC. Reverting changes.
Training on augumented user 112563 11/50 current_auc = 0.5725806451612904
User 112563 AUC after training: 0.5714285714285714
User 112563 does not improve AUC. Reverting changes.
Training on augumented user 60716 12/50 current_auc = 0.5725806451612904
User 60716 AUC after training: 0.5720046082949308
User 60716 does not improve AUC. Reverting changes.
Training on augumented user 46311 13/50 current_auc = 0.5725806451612904
User 46311 AUC after training: 0.5717165898617512
User 46311 does not improve AUC. Reverting changes.
Training on augumented user 4918 14/50 current_auc = 0.5725806451612904
User 4918 AUC after training: 0.5722926267281105
User 4918 does not improve AUC. Reverting changes.
Training on augumented user 41995 15/50 current_auc = 0.5725806451612904
User 41995 AUC after training: 0.5697004608294931
User 41995 does not improve AUC. Reverting changes.
Training on augumented user 32402 16/50 current_auc = 0.5725806451612904
User 32402 AUC after training: 0.5714285714285714
User 32402 does not improve AUC. Reverting changes.
Training on augumented user 137059 17/50 current_auc = 0.5725806451612904
User 137059 AUC after training: 0.5717165898617512
User 137059 does not improve AUC. Reverting changes.
Training on augumented user 69306 18/50 current_auc = 0.5725806451612904
User 69306 AUC after training: 0.5717165898617511
User 69306 does not improve AUC. Reverting changes.
Training on augumented user 21022 19/50 current_auc = 0.5725806451612904
User 21022 AUC after training: 0.574020737327189
User 21022 improves AUC. Keeping the model.
Training on augumented user 121187 20/50 current_auc = 0.574020737327189
User 121187 AUC after training: 0.5717165898617511
User 121187 does not improve AUC. Reverting changes.
Training on augumented user 114744 21/50 current_auc = 0.574020737327189
User 114744 AUC after training: 0.5725806451612903
User 114744 does not improve AUC. Reverting changes.
Training on augumented user 43894 22/50 current_auc = 0.574020737327189
User 43894 AUC after training: 0.5734447004608295
User 43894 does not improve AUC. Reverting changes.
Training on augumented user 47347 23/50 current_auc = 0.574020737327189
User 47347 AUC after training: 0.5737327188940092
User 47347 does not improve AUC. Reverting changes.
Training on augumented user 35251 24/50 current_auc = 0.574020737327189
User 35251 AUC after training: 0.5702764976958525
User 35251 does not improve AUC. Reverting changes.
Training on augumented user 125287 25/50 current_auc = 0.574020737327189
User 125287 AUC after training: 0.5717165898617511
User 125287 does not improve AUC. Reverting changes.
Training on augumented user 98891 26/50 current_auc = 0.574020737327189
User 98891 AUC after training: 0.5722926267281105
User 98891 does not improve AUC. Reverting changes.
Training on augumented user 17431 27/50 current_auc = 0.574020737327189
User 17431 AUC after training: 0.5722926267281105
User 17431 does not improve AUC. Reverting changes.
Training on augumented user 102885 28/50 current_auc = 0.574020737327189
User 102885 AUC after training: 0.5751728110599079
User 102885 improves AUC. Keeping the model.
Training on augumented user 102501 29/50 current_auc = 0.5751728110599079
User 102501 AUC after training: 0.5743087557603687
User 102501 does not improve AUC. Reverting changes.
Training on augumented user 32282 30/50 current_auc = 0.5751728110599079
User 32282 AUC after training: 0.5705645161290323
User 32282 does not improve AUC. Reverting changes.
Training on augumented user 59418 31/50 current_auc = 0.5751728110599079
User 59418 AUC after training: 0.5717165898617512
User 59418 does not improve AUC. Reverting changes.
Training on augumented user 32848 32/50 current_auc = 0.5751728110599079
User 32848 AUC after training: 0.5708525345622121
User 32848 does not improve AUC. Reverting changes.
Training on augumented user 18659 33/50 current_auc = 0.5751728110599079
User 18659 AUC after training: 0.5737327188940092
User 18659 does not improve AUC. Reverting changes.
Training on augumented user 106089 34/50 current_auc = 0.5751728110599079
User 106089 AUC after training: 0.5722926267281105
User 106089 does not improve AUC. Reverting changes.
Training on augumented user 103069 35/50 current_auc = 0.5751728110599079
User 103069 AUC after training: 0.5734447004608295
User 103069 does not improve AUC. Reverting changes.
Training on augumented user 102356 36/50 current_auc = 0.5751728110599079
User 102356 AUC after training: 0.5737327188940092
User 102356 does not improve AUC. Reverting changes.
Training on augumented user 12766 37/50 current_auc = 0.5751728110599079
User 12766 AUC after training: 0.574020737327189
User 12766 does not improve AUC. Reverting changes.
Training on augumented user 23135 38/50 current_auc = 0.5751728110599079
User 23135 AUC after training: 0.5743087557603687
User 23135 does not improve AUC. Reverting changes.
Training on augumented user 91442 39/50 current_auc = 0.5751728110599079
User 91442 AUC after training: 0.5731566820276498
User 91442 does not improve AUC. Reverting changes.
Training on augumented user 86711 40/50 current_auc = 0.5751728110599079
User 86711 AUC after training: 0.5731566820276498
User 86711 does not improve AUC. Reverting changes.
Training on augumented user 27948 41/50 current_auc = 0.5751728110599079
User 27948 AUC after training: 0.5728686635944701
User 27948 does not improve AUC. Reverting changes.
Training on augumented user 98082 42/50 current_auc = 0.5751728110599079
User 98082 AUC after training: 0.5745967741935484
User 98082 does not improve AUC. Reverting changes.
Training on augumented user 29853 43/50 current_auc = 0.5751728110599079
User 29853 AUC after training: 0.5743087557603687
User 29853 does not improve AUC. Reverting changes.
Training on augumented user 93331 44/50 current_auc = 0.5751728110599079
User 93331 AUC after training: 0.5711405529953917
User 93331 does not improve AUC. Reverting changes.
Training on augumented user 126970 45/50 current_auc = 0.5751728110599079
User 126970 AUC after training: 0.5731566820276497
User 126970 does not improve AUC. Reverting changes.
Training on augumented user 14935 46/50 current_auc = 0.5751728110599079
User 14935 AUC after training: 0.5754608294930875
User 14935 improves AUC. Keeping the model.
Training on augumented user 94131 47/50 current_auc = 0.5754608294930875
User 94131 AUC after training: 0.5725806451612903
User 94131 does not improve AUC. Reverting changes.
Training on augumented user 83018 48/50 current_auc = 0.5754608294930875
User 83018 AUC after training: 0.5728686635944701
User 83018 does not improve AUC. Reverting changes.
Training on augumented user 5280 49/50 current_auc = 0.5754608294930875
User 5280 AUC after training: 0.5751728110599078
User 5280 does not improve AUC. Reverting changes.
[2024-12-02 18:31:30.666712] start test user 2349 97/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:31:31.230648] start test user 2349 97/568 recall augumented users by random, augumented_users = [129098, 39716, 14075, 102131, 22149, 24616, 137037, 87781, 118663, 119223, 27287, 96146, 85143, 45898, 90749, 117829, 61143, 61403, 68185, 121474, 104283, 13221, 77871, 10952, 20273, 88674, 21203, 51392, 120760, 65965, 96745, 60366, 108066, 5240, 117885, 65484, 97135, 39803, 23926, 88451, 91115, 70399, 21708, 76850, 104479, 107746, 105457, 119, 7985, 121250]
[2024-12-02 18:31:31.246264] user = 2349 Cloud 97/568
[2024-12-02 18:31:31.255512] user = 2349 Local 97/568
[2024-12-02 18:31:31.479361] user = 2349 Local+ 97/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:31:34.697452] user = 2349 MPDA- 97/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7333333333333334
Training on augumented user 129098 0/50 current_auc = 0.7333333333333334
User 129098 AUC after training: 0.7333333333333334
User 129098 does not improve AUC. Reverting changes.
Training on augumented user 39716 1/50 current_auc = 0.7333333333333334
User 39716 AUC after training: 0.7333333333333334
User 39716 does not improve AUC. Reverting changes.
Training on augumented user 14075 2/50 current_auc = 0.7333333333333334
User 14075 AUC after training: 0.7333333333333334
User 14075 does not improve AUC. Reverting changes.
Training on augumented user 102131 3/50 current_auc = 0.7333333333333334
User 102131 AUC after training: 0.7333333333333334
User 102131 does not improve AUC. Reverting changes.
Training on augumented user 22149 4/50 current_auc = 0.7333333333333334
User 22149 AUC after training: 0.7333333333333334
User 22149 does not improve AUC. Reverting changes.
Training on augumented user 24616 5/50 current_auc = 0.7333333333333334
User 24616 AUC after training: 0.7333333333333334
User 24616 does not improve AUC. Reverting changes.
Training on augumented user 137037 6/50 current_auc = 0.7333333333333334
User 137037 AUC after training: 0.7333333333333334
User 137037 does not improve AUC. Reverting changes.
Training on augumented user 87781 7/50 current_auc = 0.7333333333333334
User 87781 AUC after training: 0.7333333333333334
User 87781 does not improve AUC. Reverting changes.
Training on augumented user 118663 8/50 current_auc = 0.7333333333333334
User 118663 AUC after training: 0.7333333333333334
User 118663 does not improve AUC. Reverting changes.
Training on augumented user 119223 9/50 current_auc = 0.7333333333333334
User 119223 AUC after training: 0.7333333333333334
User 119223 does not improve AUC. Reverting changes.
Training on augumented user 27287 10/50 current_auc = 0.7333333333333334
User 27287 AUC after training: 0.7333333333333334
User 27287 does not improve AUC. Reverting changes.
Training on augumented user 96146 11/50 current_auc = 0.7333333333333334
User 96146 AUC after training: 0.7333333333333334
User 96146 does not improve AUC. Reverting changes.
Training on augumented user 85143 12/50 current_auc = 0.7333333333333334
User 85143 AUC after training: 0.7333333333333334
User 85143 does not improve AUC. Reverting changes.
Training on augumented user 45898 13/50 current_auc = 0.7333333333333334
User 45898 AUC after training: 0.7333333333333334
User 45898 does not improve AUC. Reverting changes.
Training on augumented user 90749 14/50 current_auc = 0.7333333333333334
User 90749 AUC after training: 0.7333333333333334
User 90749 does not improve AUC. Reverting changes.
Training on augumented user 117829 15/50 current_auc = 0.7333333333333334
User 117829 AUC after training: 0.7333333333333334
User 117829 does not improve AUC. Reverting changes.
Training on augumented user 61143 16/50 current_auc = 0.7333333333333334
User 61143 AUC after training: 0.7333333333333334
User 61143 does not improve AUC. Reverting changes.
Training on augumented user 61403 17/50 current_auc = 0.7333333333333334
User 61403 AUC after training: 0.7333333333333334
User 61403 does not improve AUC. Reverting changes.
Training on augumented user 68185 18/50 current_auc = 0.7333333333333334
User 68185 AUC after training: 0.7333333333333334
User 68185 does not improve AUC. Reverting changes.
Training on augumented user 121474 19/50 current_auc = 0.7333333333333334
User 121474 AUC after training: 0.7333333333333334
User 121474 does not improve AUC. Reverting changes.
Training on augumented user 104283 20/50 current_auc = 0.7333333333333334
User 104283 AUC after training: 0.7333333333333334
User 104283 does not improve AUC. Reverting changes.
Training on augumented user 13221 21/50 current_auc = 0.7333333333333334
User 13221 AUC after training: 0.7333333333333334
User 13221 does not improve AUC. Reverting changes.
Training on augumented user 77871 22/50 current_auc = 0.7333333333333334
User 77871 AUC after training: 0.7333333333333334
User 77871 does not improve AUC. Reverting changes.
Training on augumented user 10952 23/50 current_auc = 0.7333333333333334
User 10952 AUC after training: 0.7333333333333334
User 10952 does not improve AUC. Reverting changes.
Training on augumented user 20273 24/50 current_auc = 0.7333333333333334
User 20273 AUC after training: 0.7333333333333334
User 20273 does not improve AUC. Reverting changes.
Training on augumented user 88674 25/50 current_auc = 0.7333333333333334
User 88674 AUC after training: 0.7333333333333334
User 88674 does not improve AUC. Reverting changes.
Training on augumented user 21203 26/50 current_auc = 0.7333333333333334
User 21203 AUC after training: 0.7333333333333334
User 21203 does not improve AUC. Reverting changes.
Training on augumented user 51392 27/50 current_auc = 0.7333333333333334
User 51392 AUC after training: 0.7333333333333334
User 51392 does not improve AUC. Reverting changes.
Training on augumented user 120760 28/50 current_auc = 0.7333333333333334
User 120760 AUC after training: 0.7333333333333334
User 120760 does not improve AUC. Reverting changes.
Training on augumented user 65965 29/50 current_auc = 0.7333333333333334
User 65965 AUC after training: 0.7333333333333334
User 65965 does not improve AUC. Reverting changes.
Training on augumented user 96745 30/50 current_auc = 0.7333333333333334
User 96745 AUC after training: 0.7333333333333334
User 96745 does not improve AUC. Reverting changes.
Training on augumented user 60366 31/50 current_auc = 0.7333333333333334
User 60366 AUC after training: 0.7333333333333334
User 60366 does not improve AUC. Reverting changes.
Training on augumented user 108066 32/50 current_auc = 0.7333333333333334
User 108066 AUC after training: 0.7333333333333334
User 108066 does not improve AUC. Reverting changes.
Training on augumented user 5240 33/50 current_auc = 0.7333333333333334
User 5240 AUC after training: 0.7333333333333334
User 5240 does not improve AUC. Reverting changes.
Training on augumented user 117885 34/50 current_auc = 0.7333333333333334
User 117885 AUC after training: 0.7333333333333334
User 117885 does not improve AUC. Reverting changes.
Training on augumented user 65484 35/50 current_auc = 0.7333333333333334
User 65484 AUC after training: 0.7333333333333334
User 65484 does not improve AUC. Reverting changes.
Training on augumented user 97135 36/50 current_auc = 0.7333333333333334
User 97135 AUC after training: 0.7333333333333334
User 97135 does not improve AUC. Reverting changes.
Training on augumented user 39803 37/50 current_auc = 0.7333333333333334
User 39803 AUC after training: 0.7333333333333334
User 39803 does not improve AUC. Reverting changes.
Training on augumented user 23926 38/50 current_auc = 0.7333333333333334
User 23926 AUC after training: 0.7333333333333334
User 23926 does not improve AUC. Reverting changes.
Training on augumented user 88451 39/50 current_auc = 0.7333333333333334
User 88451 AUC after training: 0.7333333333333334
User 88451 does not improve AUC. Reverting changes.
Training on augumented user 91115 40/50 current_auc = 0.7333333333333334
User 91115 AUC after training: 0.7333333333333334
User 91115 does not improve AUC. Reverting changes.
Training on augumented user 70399 41/50 current_auc = 0.7333333333333334
User 70399 AUC after training: 0.7333333333333334
User 70399 does not improve AUC. Reverting changes.
Training on augumented user 21708 42/50 current_auc = 0.7333333333333334
User 21708 AUC after training: 0.7333333333333334
User 21708 does not improve AUC. Reverting changes.
Training on augumented user 76850 43/50 current_auc = 0.7333333333333334
User 76850 AUC after training: 0.7333333333333334
User 76850 does not improve AUC. Reverting changes.
Training on augumented user 104479 44/50 current_auc = 0.7333333333333334
User 104479 AUC after training: 0.7333333333333334
User 104479 does not improve AUC. Reverting changes.
Training on augumented user 107746 45/50 current_auc = 0.7333333333333334
User 107746 AUC after training: 0.7333333333333334
User 107746 does not improve AUC. Reverting changes.
Training on augumented user 105457 46/50 current_auc = 0.7333333333333334
User 105457 AUC after training: 0.7333333333333334
User 105457 does not improve AUC. Reverting changes.
Training on augumented user 119 47/50 current_auc = 0.7333333333333334
User 119 AUC after training: 0.7333333333333334
User 119 does not improve AUC. Reverting changes.
Training on augumented user 7985 48/50 current_auc = 0.7333333333333334
User 7985 AUC after training: 0.7333333333333334
User 7985 does not improve AUC. Reverting changes.
Training on augumented user 121250 49/50 current_auc = 0.7333333333333334
User 121250 AUC after training: 0.7333333333333334
User 121250 does not improve AUC. Reverting changes.
[2024-12-02 18:32:02.423073] start test user 2352 98/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:32:02.928238] start test user 2352 98/568 recall augumented users by random, augumented_users = [2516, 72035, 106260, 74552, 4251, 23348, 32260, 37477, 52587, 26496, 47362, 11869, 97397, 103532, 135029, 42534, 129883, 4917, 44973, 37020, 35940, 79248, 51612, 99800, 114439, 125099, 29106, 111320, 24921, 121079, 121853, 116298, 10351, 64384, 78459, 81340, 105560, 41928, 74801, 9136, 81017, 114598, 18465, 71883, 21226, 76533, 116391, 94409, 113858, 99164]
[2024-12-02 18:32:02.943511] user = 2352 Cloud 98/568
[2024-12-02 18:32:02.961271] user = 2352 Local 98/568
[2024-12-02 18:32:03.104457] user = 2352 Local+ 98/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:32:05.362803] user = 2352 MPDA- 98/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6190476190476191
Training on augumented user 2516 0/50 current_auc = 0.6190476190476191
User 2516 AUC after training: 0.6190476190476191
User 2516 does not improve AUC. Reverting changes.
Training on augumented user 72035 1/50 current_auc = 0.6190476190476191
User 72035 AUC after training: 0.6233766233766234
User 72035 improves AUC. Keeping the model.
Training on augumented user 106260 2/50 current_auc = 0.6233766233766234
User 106260 AUC after training: 0.6233766233766234
User 106260 does not improve AUC. Reverting changes.
Training on augumented user 74552 3/50 current_auc = 0.6233766233766234
User 74552 AUC after training: 0.6233766233766234
User 74552 does not improve AUC. Reverting changes.
Training on augumented user 4251 4/50 current_auc = 0.6233766233766234
User 4251 AUC after training: 0.6190476190476191
User 4251 does not improve AUC. Reverting changes.
Training on augumented user 23348 5/50 current_auc = 0.6233766233766234
User 23348 AUC after training: 0.6233766233766234
User 23348 does not improve AUC. Reverting changes.
Training on augumented user 32260 6/50 current_auc = 0.6233766233766234
User 32260 AUC after training: 0.6190476190476191
User 32260 does not improve AUC. Reverting changes.
Training on augumented user 37477 7/50 current_auc = 0.6233766233766234
User 37477 AUC after training: 0.6233766233766234
User 37477 does not improve AUC. Reverting changes.
Training on augumented user 52587 8/50 current_auc = 0.6233766233766234
User 52587 AUC after training: 0.6233766233766234
User 52587 does not improve AUC. Reverting changes.
Training on augumented user 26496 9/50 current_auc = 0.6233766233766234
User 26496 AUC after training: 0.6233766233766234
User 26496 does not improve AUC. Reverting changes.
Training on augumented user 47362 10/50 current_auc = 0.6233766233766234
User 47362 AUC after training: 0.6190476190476191
User 47362 does not improve AUC. Reverting changes.
Training on augumented user 11869 11/50 current_auc = 0.6233766233766234
User 11869 AUC after training: 0.6233766233766234
User 11869 does not improve AUC. Reverting changes.
Training on augumented user 97397 12/50 current_auc = 0.6233766233766234
User 97397 AUC after training: 0.6190476190476191
User 97397 does not improve AUC. Reverting changes.
Training on augumented user 103532 13/50 current_auc = 0.6233766233766234
User 103532 AUC after training: 0.6233766233766234
User 103532 does not improve AUC. Reverting changes.
Training on augumented user 135029 14/50 current_auc = 0.6233766233766234
User 135029 AUC after training: 0.6190476190476191
User 135029 does not improve AUC. Reverting changes.
Training on augumented user 42534 15/50 current_auc = 0.6233766233766234
User 42534 AUC after training: 0.6190476190476191
User 42534 does not improve AUC. Reverting changes.
Training on augumented user 129883 16/50 current_auc = 0.6233766233766234
User 129883 AUC after training: 0.6233766233766234
User 129883 does not improve AUC. Reverting changes.
Training on augumented user 4917 17/50 current_auc = 0.6233766233766234
User 4917 AUC after training: 0.6190476190476191
User 4917 does not improve AUC. Reverting changes.
Training on augumented user 44973 18/50 current_auc = 0.6233766233766234
User 44973 AUC after training: 0.6233766233766234
User 44973 does not improve AUC. Reverting changes.
Training on augumented user 37020 19/50 current_auc = 0.6233766233766234
User 37020 AUC after training: 0.6233766233766234
User 37020 does not improve AUC. Reverting changes.
Training on augumented user 35940 20/50 current_auc = 0.6233766233766234
User 35940 AUC after training: 0.6233766233766234
User 35940 does not improve AUC. Reverting changes.
Training on augumented user 79248 21/50 current_auc = 0.6233766233766234
User 79248 AUC after training: 0.6233766233766234
User 79248 does not improve AUC. Reverting changes.
Training on augumented user 51612 22/50 current_auc = 0.6233766233766234
User 51612 AUC after training: 0.6190476190476191
User 51612 does not improve AUC. Reverting changes.
Training on augumented user 99800 23/50 current_auc = 0.6233766233766234
User 99800 AUC after training: 0.6233766233766234
User 99800 does not improve AUC. Reverting changes.
Training on augumented user 114439 24/50 current_auc = 0.6233766233766234
User 114439 AUC after training: 0.6190476190476191
User 114439 does not improve AUC. Reverting changes.
Training on augumented user 125099 25/50 current_auc = 0.6233766233766234
User 125099 AUC after training: 0.6190476190476191
User 125099 does not improve AUC. Reverting changes.
Training on augumented user 29106 26/50 current_auc = 0.6233766233766234
User 29106 AUC after training: 0.6233766233766234
User 29106 does not improve AUC. Reverting changes.
Training on augumented user 111320 27/50 current_auc = 0.6233766233766234
User 111320 AUC after training: 0.6190476190476191
User 111320 does not improve AUC. Reverting changes.
Training on augumented user 24921 28/50 current_auc = 0.6233766233766234
User 24921 AUC after training: 0.6190476190476191
User 24921 does not improve AUC. Reverting changes.
Training on augumented user 121079 29/50 current_auc = 0.6233766233766234
User 121079 AUC after training: 0.6190476190476191
User 121079 does not improve AUC. Reverting changes.
Training on augumented user 121853 30/50 current_auc = 0.6233766233766234
User 121853 AUC after training: 0.6233766233766234
User 121853 does not improve AUC. Reverting changes.
Training on augumented user 116298 31/50 current_auc = 0.6233766233766234
User 116298 AUC after training: 0.6233766233766234
User 116298 does not improve AUC. Reverting changes.
Training on augumented user 10351 32/50 current_auc = 0.6233766233766234
User 10351 AUC after training: 0.6233766233766234
User 10351 does not improve AUC. Reverting changes.
Training on augumented user 64384 33/50 current_auc = 0.6233766233766234
User 64384 AUC after training: 0.6233766233766234
User 64384 does not improve AUC. Reverting changes.
Training on augumented user 78459 34/50 current_auc = 0.6233766233766234
User 78459 AUC after training: 0.6233766233766234
User 78459 does not improve AUC. Reverting changes.
Training on augumented user 81340 35/50 current_auc = 0.6233766233766234
User 81340 AUC after training: 0.6233766233766234
User 81340 does not improve AUC. Reverting changes.
Training on augumented user 105560 36/50 current_auc = 0.6233766233766234
User 105560 AUC after training: 0.6190476190476191
User 105560 does not improve AUC. Reverting changes.
Training on augumented user 41928 37/50 current_auc = 0.6233766233766234
User 41928 AUC after training: 0.6233766233766234
User 41928 does not improve AUC. Reverting changes.
Training on augumented user 74801 38/50 current_auc = 0.6233766233766234
User 74801 AUC after training: 0.6190476190476191
User 74801 does not improve AUC. Reverting changes.
Training on augumented user 9136 39/50 current_auc = 0.6233766233766234
User 9136 AUC after training: 0.6190476190476191
User 9136 does not improve AUC. Reverting changes.
Training on augumented user 81017 40/50 current_auc = 0.6233766233766234
User 81017 AUC after training: 0.6233766233766234
User 81017 does not improve AUC. Reverting changes.
Training on augumented user 114598 41/50 current_auc = 0.6233766233766234
User 114598 AUC after training: 0.6190476190476191
User 114598 does not improve AUC. Reverting changes.
Training on augumented user 18465 42/50 current_auc = 0.6233766233766234
User 18465 AUC after training: 0.6233766233766234
User 18465 does not improve AUC. Reverting changes.
Training on augumented user 71883 43/50 current_auc = 0.6233766233766234
User 71883 AUC after training: 0.6190476190476191
User 71883 does not improve AUC. Reverting changes.
Training on augumented user 21226 44/50 current_auc = 0.6233766233766234
User 21226 AUC after training: 0.6190476190476191
User 21226 does not improve AUC. Reverting changes.
Training on augumented user 76533 45/50 current_auc = 0.6233766233766234
User 76533 AUC after training: 0.6190476190476191
User 76533 does not improve AUC. Reverting changes.
Training on augumented user 116391 46/50 current_auc = 0.6233766233766234
User 116391 AUC after training: 0.6190476190476191
User 116391 does not improve AUC. Reverting changes.
Training on augumented user 94409 47/50 current_auc = 0.6233766233766234
User 94409 AUC after training: 0.6233766233766234
User 94409 does not improve AUC. Reverting changes.
Training on augumented user 113858 48/50 current_auc = 0.6233766233766234
User 113858 AUC after training: 0.6233766233766234
User 113858 does not improve AUC. Reverting changes.
Training on augumented user 99164 49/50 current_auc = 0.6233766233766234
User 99164 AUC after training: 0.6277056277056277
User 99164 improves AUC. Keeping the model.
[2024-12-02 18:32:35.600432] start test user 2367 99/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:32:36.072757] start test user 2367 99/568 recall augumented users by random, augumented_users = [27589, 74330, 49652, 22499, 96018, 35846, 138281, 27802, 40316, 37266, 73333, 29202, 58422, 26582, 129054, 78828, 126492, 37255, 75309, 14625, 115878, 94649, 73437, 72232, 132952, 50128, 13886, 106189, 75316, 131844, 69233, 131047, 78530, 98951, 70956, 100802, 107698, 51835, 77732, 81305, 40050, 68808, 68023, 5636, 116785, 105008, 109184, 52456, 76084, 25861]
[2024-12-02 18:32:36.087889] user = 2367 Cloud 99/568
[2024-12-02 18:32:36.112994] user = 2367 Local 99/568
[2024-12-02 18:32:36.189380] user = 2367 Local+ 99/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:32:38.569291] user = 2367 MPDA- 99/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6311368744824322
Training on augumented user 27589 0/50 current_auc = 0.6311368744824322
User 27589 AUC after training: 0.629805986040459
User 27589 does not improve AUC. Reverting changes.
Training on augumented user 74330 1/50 current_auc = 0.6311368744824322
User 74330 AUC after training: 0.6312551756772744
User 74330 improves AUC. Keeping the model.
Training on augumented user 49652 2/50 current_auc = 0.6312551756772744
User 49652 AUC after training: 0.6303087661185378
User 49652 does not improve AUC. Reverting changes.
Training on augumented user 22499 3/50 current_auc = 0.6312551756772744
User 22499 AUC after training: 0.6310185732875903
User 22499 does not improve AUC. Reverting changes.
Training on augumented user 96018 4/50 current_auc = 0.6312551756772744
User 96018 AUC after training: 0.6317283804566426
User 96018 improves AUC. Keeping the model.
Training on augumented user 35846 5/50 current_auc = 0.6317283804566426
User 35846 AUC after training: 0.6318466816514847
User 35846 improves AUC. Keeping the model.
Training on augumented user 138281 6/50 current_auc = 0.6318466816514847
User 138281 AUC after training: 0.6320832840411689
User 138281 improves AUC. Keeping the model.
Training on augumented user 27802 7/50 current_auc = 0.6320832840411689
User 27802 AUC after training: 0.6314326274695374
User 27802 does not improve AUC. Reverting changes.
Training on augumented user 40316 8/50 current_auc = 0.6320832840411689
User 40316 AUC after training: 0.6295398083520644
User 40316 does not improve AUC. Reverting changes.
Training on augumented user 37266 9/50 current_auc = 0.6320832840411689
User 37266 AUC after training: 0.6322607358334319
User 37266 improves AUC. Keeping the model.
Training on augumented user 73333 10/50 current_auc = 0.6322607358334319
User 73333 AUC after training: 0.6322607358334319
User 73333 does not improve AUC. Reverting changes.
Training on augumented user 29202 11/50 current_auc = 0.6322607358334319
User 29202 AUC after training: 0.632260735833432
User 29202 improves AUC. Keeping the model.
Training on augumented user 58422 12/50 current_auc = 0.632260735833432
User 58422 AUC after training: 0.632556488820537
User 58422 improves AUC. Keeping the model.
Training on augumented user 26582 13/50 current_auc = 0.632556488820537
User 26582 AUC after training: 0.6313734768721164
User 26582 does not improve AUC. Reverting changes.
Training on augumented user 129054 14/50 current_auc = 0.632556488820537
User 129054 AUC after training: 0.6320832840411688
User 129054 does not improve AUC. Reverting changes.
Training on augumented user 78828 15/50 current_auc = 0.632556488820537
User 78828 AUC after training: 0.632319886430853
User 78828 does not improve AUC. Reverting changes.
Training on augumented user 126492 16/50 current_auc = 0.632556488820537
User 126492 AUC after training: 0.632319886430853
User 126492 does not improve AUC. Reverting changes.
Training on augumented user 37255 17/50 current_auc = 0.632556488820537
User 37255 AUC after training: 0.6321424346385899
User 37255 does not improve AUC. Reverting changes.
Training on augumented user 75309 18/50 current_auc = 0.632556488820537
User 75309 AUC after training: 0.6321424346385899
User 75309 does not improve AUC. Reverting changes.
Training on augumented user 14625 19/50 current_auc = 0.632556488820537
User 14625 AUC after training: 0.6320241334437477
User 14625 does not improve AUC. Reverting changes.
Training on augumented user 115878 20/50 current_auc = 0.632556488820537
User 115878 AUC after training: 0.6326156394179582
User 115878 improves AUC. Keeping the model.
Training on augumented user 94649 21/50 current_auc = 0.6326156394179582
User 94649 AUC after training: 0.6326747900153792
User 94649 improves AUC. Keeping the model.
Training on augumented user 73437 22/50 current_auc = 0.6326747900153792
User 73437 AUC after training: 0.6321424346385899
User 73437 does not improve AUC. Reverting changes.
Training on augumented user 72232 23/50 current_auc = 0.6326747900153792
User 72232 AUC after training: 0.6316100792618006
User 72232 does not improve AUC. Reverting changes.
Training on augumented user 132952 24/50 current_auc = 0.6326747900153792
User 132952 AUC after training: 0.6322607358334319
User 132952 does not improve AUC. Reverting changes.
Training on augumented user 50128 25/50 current_auc = 0.6326747900153792
User 50128 AUC after training: 0.632319886430853
User 50128 does not improve AUC. Reverting changes.
Training on augumented user 13886 26/50 current_auc = 0.6326747900153792
User 13886 AUC after training: 0.6306932450017745
User 13886 does not improve AUC. Reverting changes.
Training on augumented user 106189 27/50 current_auc = 0.6326747900153792
User 106189 AUC after training: 0.6319649828463267
User 106189 does not improve AUC. Reverting changes.
Training on augumented user 75316 28/50 current_auc = 0.6326747900153792
User 75316 AUC after training: 0.632497338223116
User 75316 does not improve AUC. Reverting changes.
Training on augumented user 131844 29/50 current_auc = 0.6326747900153792
User 131844 AUC after training: 0.6317875310540637
User 131844 does not improve AUC. Reverting changes.
Training on augumented user 69233 30/50 current_auc = 0.6326747900153792
User 69233 AUC after training: 0.6319649828463267
User 69233 does not improve AUC. Reverting changes.
Training on augumented user 131047 31/50 current_auc = 0.6326747900153792
User 131047 AUC after training: 0.6321424346385899
User 131047 does not improve AUC. Reverting changes.
Training on augumented user 78530 32/50 current_auc = 0.6326747900153792
User 78530 AUC after training: 0.6309889979888796
User 78530 does not improve AUC. Reverting changes.
Training on augumented user 98951 33/50 current_auc = 0.6326747900153792
User 98951 AUC after training: 0.6317875310540637
User 98951 does not improve AUC. Reverting changes.
Training on augumented user 70956 34/50 current_auc = 0.6326747900153792
User 70956 AUC after training: 0.6313734768721164
User 70956 does not improve AUC. Reverting changes.
Training on augumented user 100802 35/50 current_auc = 0.6326747900153792
User 100802 AUC after training: 0.6317875310540636
User 100802 does not improve AUC. Reverting changes.
Training on augumented user 107698 36/50 current_auc = 0.6326747900153792
User 107698 AUC after training: 0.6321424346385899
User 107698 does not improve AUC. Reverting changes.
Training on augumented user 51835 37/50 current_auc = 0.6326747900153792
User 51835 AUC after training: 0.632438187625695
User 51835 does not improve AUC. Reverting changes.
Training on augumented user 77732 38/50 current_auc = 0.6326747900153792
User 77732 AUC after training: 0.6317579557553532
User 77732 does not improve AUC. Reverting changes.
Training on augumented user 81305 39/50 current_auc = 0.6326747900153792
User 81305 AUC after training: 0.6322015852360109
User 81305 does not improve AUC. Reverting changes.
Training on augumented user 40050 40/50 current_auc = 0.6326747900153792
User 40050 AUC after training: 0.6319649828463267
User 40050 does not improve AUC. Reverting changes.
Training on augumented user 68808 41/50 current_auc = 0.6326747900153792
User 68808 AUC after training: 0.6320241334437477
User 68808 does not improve AUC. Reverting changes.
Training on augumented user 68023 42/50 current_auc = 0.6326747900153792
User 68023 AUC after training: 0.6315509286643795
User 68023 does not improve AUC. Reverting changes.
Training on augumented user 5636 43/50 current_auc = 0.6326747900153792
User 5636 AUC after training: 0.6312551756772743
User 5636 does not improve AUC. Reverting changes.
Training on augumented user 116785 44/50 current_auc = 0.6326747900153792
User 116785 AUC after training: 0.632260735833432
User 116785 does not improve AUC. Reverting changes.
Training on augumented user 105008 45/50 current_auc = 0.6326747900153792
User 105008 AUC after training: 0.6321424346385899
User 105008 does not improve AUC. Reverting changes.
Training on augumented user 109184 46/50 current_auc = 0.6326747900153792
User 109184 AUC after training: 0.6311368744824323
User 109184 does not improve AUC. Reverting changes.
Training on augumented user 52456 47/50 current_auc = 0.6326747900153792
User 52456 AUC after training: 0.632438187625695
User 52456 does not improve AUC. Reverting changes.
Training on augumented user 76084 48/50 current_auc = 0.6326747900153792
User 76084 AUC after training: 0.6311072991837218
User 76084 does not improve AUC. Reverting changes.
Training on augumented user 25861 49/50 current_auc = 0.6326747900153792
User 25861 AUC after training: 0.6317875310540637
User 25861 does not improve AUC. Reverting changes.
[2024-12-02 18:33:07.982142] start test user 2397 100/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:33:08.368276] start test user 2397 100/568 recall augumented users by random, augumented_users = [65720, 127502, 83410, 120416, 20525, 131626, 78146, 753, 101304, 137589, 55732, 115065, 36044, 69626, 135368, 91649, 32283, 11503, 92605, 50790, 6868, 66509, 37373, 81950, 82715, 97406, 17462, 97562, 107387, 95800, 11840, 50901, 93489, 24130, 99279, 27208, 73785, 91779, 75689, 119301, 44051, 10942, 67687, 109877, 28262, 78351, 104878, 27749, 59925, 26066]
[2024-12-02 18:33:08.383014] user = 2397 Cloud 100/568
[2024-12-02 18:33:08.437929] user = 2397 Local 100/568
[2024-12-02 18:33:08.587098] user = 2397 Local+ 100/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:33:10.552846] user = 2397 MPDA- 100/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6876711328538571
Training on augumented user 65720 0/50 current_auc = 0.6876711328538571
User 65720 AUC after training: 0.6876419261801322
User 65720 does not improve AUC. Reverting changes.
Training on augumented user 127502 1/50 current_auc = 0.6876711328538571
User 127502 AUC after training: 0.6875652586616041
User 127502 does not improve AUC. Reverting changes.
Training on augumented user 83410 2/50 current_auc = 0.6876711328538571
User 83410 AUC after training: 0.6879887554306159
User 83410 improves AUC. Keeping the model.
Training on augumented user 120416 3/50 current_auc = 0.6879887554306159
User 120416 AUC after training: 0.6879266912489503
User 120416 does not improve AUC. Reverting changes.
Training on augumented user 20525 4/50 current_auc = 0.6879887554306159
User 20525 AUC after training: 0.68756890949582
User 20525 does not improve AUC. Reverting changes.
Training on augumented user 131626 5/50 current_auc = 0.6879887554306159
User 131626 AUC after training: 0.6868569968237742
User 131626 does not improve AUC. Reverting changes.
Training on augumented user 78146 6/50 current_auc = 0.6879887554306159
User 78146 AUC after training: 0.6879924062648315
User 78146 improves AUC. Keeping the model.
Training on augumented user 753 7/50 current_auc = 0.6879924062648315
User 753 AUC after training: 0.6877843087145413
User 753 does not improve AUC. Reverting changes.
Training on augumented user 101304 8/50 current_auc = 0.6879924062648315
User 101304 AUC after training: 0.6876492278485634
User 101304 does not improve AUC. Reverting changes.
Training on augumented user 137589 9/50 current_auc = 0.6879924062648315
User 137589 AUC after training: 0.6879339929173818
User 137589 does not improve AUC. Reverting changes.
Training on augumented user 55732 10/50 current_auc = 0.6879924062648315
User 55732 AUC after training: 0.687700339527582
User 55732 does not improve AUC. Reverting changes.
Training on augumented user 115065 11/50 current_auc = 0.6879924062648315
User 115065 AUC after training: 0.688036216275419
User 115065 improves AUC. Keeping the model.
Training on augumented user 36044 12/50 current_auc = 0.688036216275419
User 36044 AUC after training: 0.6879193895805191
User 36044 does not improve AUC. Reverting changes.
Training on augumented user 69626 13/50 current_auc = 0.688036216275419
User 69626 AUC after training: 0.6876857361907196
User 69626 does not improve AUC. Reverting changes.
Training on augumented user 135368 14/50 current_auc = 0.688036216275419
User 135368 AUC after training: 0.6879011354094411
User 135368 does not improve AUC. Reverting changes.
Training on augumented user 91649 15/50 current_auc = 0.688036216275419
User 91649 AUC after training: 0.6877843087145413
User 91649 does not improve AUC. Reverting changes.
Training on augumented user 32283 16/50 current_auc = 0.688036216275419
User 32283 AUC after training: 0.6885692380708993
User 32283 improves AUC. Keeping the model.
Training on augumented user 11503 17/50 current_auc = 0.6885692380708993
User 11503 AUC after training: 0.6878208170566975
User 11503 does not improve AUC. Reverting changes.
Training on augumented user 92605 18/50 current_auc = 0.6885692380708993
User 92605 AUC after training: 0.6877222445328758
User 92605 does not improve AUC. Reverting changes.
Training on augumented user 50790 19/50 current_auc = 0.6885692380708993
User 50790 AUC after training: 0.6863787375415282
User 50790 does not improve AUC. Reverting changes.
Training on augumented user 6868 20/50 current_auc = 0.6885692380708993
User 6868 AUC after training: 0.6878828812383629
User 6868 does not improve AUC. Reverting changes.
Training on augumented user 66509 21/50 current_auc = 0.6885692380708993
User 66509 AUC after training: 0.6878098645540505
User 66509 does not improve AUC. Reverting changes.
Training on augumented user 37373 22/50 current_auc = 0.6885692380708993
User 37373 AUC after training: 0.6880362162754189
User 37373 does not improve AUC. Reverting changes.
Training on augumented user 81950 23/50 current_auc = 0.6885692380708993
User 81950 AUC after training: 0.6883428863495309
User 81950 does not improve AUC. Reverting changes.
Training on augumented user 82715 24/50 current_auc = 0.6885692380708993
User 82715 AUC after training: 0.6878974845752253
User 82715 does not improve AUC. Reverting changes.
Training on augumented user 97406 25/50 current_auc = 0.6885692380708993
User 97406 AUC after training: 0.6876127195064072
User 97406 does not improve AUC. Reverting changes.
Training on augumented user 17462 26/50 current_auc = 0.6885692380708993
User 17462 AUC after training: 0.68848526888394
User 17462 does not improve AUC. Reverting changes.
Training on augumented user 97562 27/50 current_auc = 0.6885692380708993
User 97562 AUC after training: 0.6883428863495309
User 97562 does not improve AUC. Reverting changes.
Training on augumented user 107387 28/50 current_auc = 0.6885692380708993
User 107387 AUC after training: 0.6880435179438502
User 107387 does not improve AUC. Reverting changes.
Training on augumented user 95800 29/50 current_auc = 0.6885692380708993
User 95800 AUC after training: 0.6882406629914937
User 95800 does not improve AUC. Reverting changes.
Training on augumented user 11840 30/50 current_auc = 0.6885692380708993
User 11840 AUC after training: 0.6883355846810996
User 11840 does not improve AUC. Reverting changes.
Training on augumented user 50901 31/50 current_auc = 0.6885692380708993
User 50901 AUC after training: 0.6876236720090542
User 50901 does not improve AUC. Reverting changes.
Training on augumented user 93489 32/50 current_auc = 0.6885692380708993
User 93489 AUC after training: 0.6880033587674783
User 93489 does not improve AUC. Reverting changes.
Training on augumented user 24130 33/50 current_auc = 0.6885692380708993
User 24130 AUC after training: 0.6883319338468841
User 24130 does not improve AUC. Reverting changes.
Training on augumented user 99279 34/50 current_auc = 0.6885692380708993
User 99279 AUC after training: 0.6884597130444307
User 99279 does not improve AUC. Reverting changes.
Training on augumented user 27208 35/50 current_auc = 0.6885692380708993
User 27208 AUC after training: 0.6876090686721916
User 27208 does not improve AUC. Reverting changes.
Training on augumented user 73785 36/50 current_auc = 0.6885692380708993
User 73785 AUC after training: 0.688284473002081
User 73785 does not improve AUC. Reverting changes.
Training on augumented user 91779 37/50 current_auc = 0.6885692380708993
User 91779 AUC after training: 0.6877368478697382
User 91779 does not improve AUC. Reverting changes.
Training on augumented user 75689 38/50 current_auc = 0.6885692380708993
User 75689 AUC after training: 0.6881822496440437
User 75689 does not improve AUC. Reverting changes.
Training on augumented user 119301 39/50 current_auc = 0.6885692380708993
User 119301 AUC after training: 0.6881968529809063
User 119301 does not improve AUC. Reverting changes.
Training on augumented user 44051 40/50 current_auc = 0.6885692380708993
User 44051 AUC after training: 0.6882187579861998
User 44051 does not improve AUC. Reverting changes.
Training on augumented user 10942 41/50 current_auc = 0.6885692380708993
User 10942 AUC after training: 0.6876565295169947
User 10942 does not improve AUC. Reverting changes.
Training on augumented user 67687 42/50 current_auc = 0.6885692380708993
User 67687 AUC after training: 0.6879339929173816
User 67687 does not improve AUC. Reverting changes.
Training on augumented user 109877 43/50 current_auc = 0.6885692380708993
User 109877 AUC after training: 0.687145412726808
User 109877 does not improve AUC. Reverting changes.
Training on augumented user 28262 44/50 current_auc = 0.6885692380708993
User 28262 AUC after training: 0.6880362162754189
User 28262 does not improve AUC. Reverting changes.
Training on augumented user 78351 45/50 current_auc = 0.6885692380708993
User 78351 AUC after training: 0.688284473002081
User 78351 does not improve AUC. Reverting changes.
Training on augumented user 104878 46/50 current_auc = 0.6885692380708993
User 104878 AUC after training: 0.6879339929173817
User 104878 does not improve AUC. Reverting changes.
Training on augumented user 27749 47/50 current_auc = 0.6885692380708993
User 27749 AUC after training: 0.6873206527691578
User 27749 does not improve AUC. Reverting changes.
Training on augumented user 59925 48/50 current_auc = 0.6885692380708993
User 59925 AUC after training: 0.6878244678909131
User 59925 does not improve AUC. Reverting changes.
Training on augumented user 26066 49/50 current_auc = 0.6885692380708993
User 26066 AUC after training: 0.687988755430616
User 26066 does not improve AUC. Reverting changes.
[2024-12-02 18:33:39.074454] start test user 2484 101/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:33:39.504722] start test user 2484 101/568 recall augumented users by random, augumented_users = [33373, 91931, 8161, 33581, 62170, 27299, 38748, 101206, 21422, 131086, 6164, 135022, 66724, 92770, 125451, 15841, 68593, 46045, 55310, 49148, 116169, 107675, 29521, 13045, 57935, 79689, 35544, 57745, 54553, 2152, 76711, 76799, 7674, 90096, 118935, 19191, 98494, 105171, 2446, 23303, 130212, 66146, 94851, 13016, 31604, 7147, 102331, 106434, 122939, 122601]
[2024-12-02 18:33:39.519896] user = 2484 Cloud 101/568
[2024-12-02 18:33:39.529456] user = 2484 Local 101/568
[2024-12-02 18:33:39.802211] user = 2484 Local+ 101/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:33:42.818614] user = 2484 MPDA- 101/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 33373 0/50 current_auc = 1.0
User 33373 AUC after training: 1.0
User 33373 does not improve AUC. Reverting changes.
Training on augumented user 91931 1/50 current_auc = 1.0
User 91931 AUC after training: 1.0
User 91931 does not improve AUC. Reverting changes.
Training on augumented user 8161 2/50 current_auc = 1.0
User 8161 AUC after training: 1.0
User 8161 does not improve AUC. Reverting changes.
Training on augumented user 33581 3/50 current_auc = 1.0
User 33581 AUC after training: 1.0
User 33581 does not improve AUC. Reverting changes.
Training on augumented user 62170 4/50 current_auc = 1.0
User 62170 AUC after training: 1.0
User 62170 does not improve AUC. Reverting changes.
Training on augumented user 27299 5/50 current_auc = 1.0
User 27299 AUC after training: 1.0
User 27299 does not improve AUC. Reverting changes.
Training on augumented user 38748 6/50 current_auc = 1.0
User 38748 AUC after training: 1.0
User 38748 does not improve AUC. Reverting changes.
Training on augumented user 101206 7/50 current_auc = 1.0
User 101206 AUC after training: 1.0
User 101206 does not improve AUC. Reverting changes.
Training on augumented user 21422 8/50 current_auc = 1.0
User 21422 AUC after training: 1.0
User 21422 does not improve AUC. Reverting changes.
Training on augumented user 131086 9/50 current_auc = 1.0
User 131086 AUC after training: 1.0
User 131086 does not improve AUC. Reverting changes.
Training on augumented user 6164 10/50 current_auc = 1.0
User 6164 AUC after training: 1.0
User 6164 does not improve AUC. Reverting changes.
Training on augumented user 135022 11/50 current_auc = 1.0
User 135022 AUC after training: 1.0
User 135022 does not improve AUC. Reverting changes.
Training on augumented user 66724 12/50 current_auc = 1.0
User 66724 AUC after training: 1.0
User 66724 does not improve AUC. Reverting changes.
Training on augumented user 92770 13/50 current_auc = 1.0
User 92770 AUC after training: 1.0
User 92770 does not improve AUC. Reverting changes.
Training on augumented user 125451 14/50 current_auc = 1.0
User 125451 AUC after training: 1.0
User 125451 does not improve AUC. Reverting changes.
Training on augumented user 15841 15/50 current_auc = 1.0
User 15841 AUC after training: 1.0
User 15841 does not improve AUC. Reverting changes.
Training on augumented user 68593 16/50 current_auc = 1.0
User 68593 AUC after training: 1.0
User 68593 does not improve AUC. Reverting changes.
Training on augumented user 46045 17/50 current_auc = 1.0
User 46045 AUC after training: 1.0
User 46045 does not improve AUC. Reverting changes.
Training on augumented user 55310 18/50 current_auc = 1.0
User 55310 AUC after training: 1.0
User 55310 does not improve AUC. Reverting changes.
Training on augumented user 49148 19/50 current_auc = 1.0
User 49148 AUC after training: 1.0
User 49148 does not improve AUC. Reverting changes.
Training on augumented user 116169 20/50 current_auc = 1.0
User 116169 AUC after training: 1.0
User 116169 does not improve AUC. Reverting changes.
Training on augumented user 107675 21/50 current_auc = 1.0
User 107675 AUC after training: 1.0
User 107675 does not improve AUC. Reverting changes.
Training on augumented user 29521 22/50 current_auc = 1.0
User 29521 AUC after training: 1.0
User 29521 does not improve AUC. Reverting changes.
Training on augumented user 13045 23/50 current_auc = 1.0
User 13045 AUC after training: 1.0
User 13045 does not improve AUC. Reverting changes.
Training on augumented user 57935 24/50 current_auc = 1.0
User 57935 AUC after training: 1.0
User 57935 does not improve AUC. Reverting changes.
Training on augumented user 79689 25/50 current_auc = 1.0
User 79689 AUC after training: 1.0
User 79689 does not improve AUC. Reverting changes.
Training on augumented user 35544 26/50 current_auc = 1.0
User 35544 AUC after training: 1.0
User 35544 does not improve AUC. Reverting changes.
Training on augumented user 57745 27/50 current_auc = 1.0
User 57745 AUC after training: 1.0
User 57745 does not improve AUC. Reverting changes.
Training on augumented user 54553 28/50 current_auc = 1.0
User 54553 AUC after training: 1.0
User 54553 does not improve AUC. Reverting changes.
Training on augumented user 2152 29/50 current_auc = 1.0
User 2152 AUC after training: 1.0
User 2152 does not improve AUC. Reverting changes.
Training on augumented user 76711 30/50 current_auc = 1.0
User 76711 AUC after training: 1.0
User 76711 does not improve AUC. Reverting changes.
Training on augumented user 76799 31/50 current_auc = 1.0
User 76799 AUC after training: 1.0
User 76799 does not improve AUC. Reverting changes.
Training on augumented user 7674 32/50 current_auc = 1.0
User 7674 AUC after training: 1.0
User 7674 does not improve AUC. Reverting changes.
Training on augumented user 90096 33/50 current_auc = 1.0
User 90096 AUC after training: 1.0
User 90096 does not improve AUC. Reverting changes.
Training on augumented user 118935 34/50 current_auc = 1.0
User 118935 AUC after training: 1.0
User 118935 does not improve AUC. Reverting changes.
Training on augumented user 19191 35/50 current_auc = 1.0
User 19191 AUC after training: 1.0
User 19191 does not improve AUC. Reverting changes.
Training on augumented user 98494 36/50 current_auc = 1.0
User 98494 AUC after training: 1.0
User 98494 does not improve AUC. Reverting changes.
Training on augumented user 105171 37/50 current_auc = 1.0
User 105171 AUC after training: 1.0
User 105171 does not improve AUC. Reverting changes.
Training on augumented user 2446 38/50 current_auc = 1.0
User 2446 AUC after training: 1.0
User 2446 does not improve AUC. Reverting changes.
Training on augumented user 23303 39/50 current_auc = 1.0
User 23303 AUC after training: 1.0
User 23303 does not improve AUC. Reverting changes.
Training on augumented user 130212 40/50 current_auc = 1.0
User 130212 AUC after training: 1.0
User 130212 does not improve AUC. Reverting changes.
Training on augumented user 66146 41/50 current_auc = 1.0
User 66146 AUC after training: 1.0
User 66146 does not improve AUC. Reverting changes.
Training on augumented user 94851 42/50 current_auc = 1.0
User 94851 AUC after training: 1.0
User 94851 does not improve AUC. Reverting changes.
Training on augumented user 13016 43/50 current_auc = 1.0
User 13016 AUC after training: 1.0
User 13016 does not improve AUC. Reverting changes.
Training on augumented user 31604 44/50 current_auc = 1.0
User 31604 AUC after training: 1.0
User 31604 does not improve AUC. Reverting changes.
Training on augumented user 7147 45/50 current_auc = 1.0
User 7147 AUC after training: 1.0
User 7147 does not improve AUC. Reverting changes.
Training on augumented user 102331 46/50 current_auc = 1.0
User 102331 AUC after training: 1.0
User 102331 does not improve AUC. Reverting changes.
Training on augumented user 106434 47/50 current_auc = 1.0
User 106434 AUC after training: 1.0
User 106434 does not improve AUC. Reverting changes.
Training on augumented user 122939 48/50 current_auc = 1.0
User 122939 AUC after training: 1.0
User 122939 does not improve AUC. Reverting changes.
Training on augumented user 122601 49/50 current_auc = 1.0
User 122601 AUC after training: 1.0
User 122601 does not improve AUC. Reverting changes.
[2024-12-02 18:34:12.673961] start test user 2515 102/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:34:13.364137] start test user 2515 102/568 recall augumented users by random, augumented_users = [73424, 18542, 134530, 98193, 50807, 124829, 121959, 107677, 88774, 28329, 29368, 127954, 55257, 61132, 112501, 768, 75829, 9271, 106570, 12237, 128509, 133766, 104359, 125851, 74704, 97114, 90755, 98865, 49640, 132048, 129878, 57211, 39709, 87943, 61178, 62591, 41962, 91978, 132824, 5250, 119690, 1406, 64161, 131242, 120039, 86635, 71564, 91026, 39175, 76897]
[2024-12-02 18:34:13.385413] user = 2515 Cloud 102/568
[2024-12-02 18:34:13.424723] user = 2515 Local 102/568
[2024-12-02 18:34:13.497801] user = 2515 Local+ 102/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:34:16.301373] user = 2515 MPDA- 102/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6915920659996488
Training on augumented user 73424 0/50 current_auc = 0.6915920659996488
User 73424 AUC after training: 0.6901878181499035
User 73424 does not improve AUC. Reverting changes.
Training on augumented user 18542 1/50 current_auc = 0.6915920659996488
User 18542 AUC after training: 0.6915335556725761
User 18542 does not improve AUC. Reverting changes.
Training on augumented user 134530 2/50 current_auc = 0.6915920659996488
User 134530 AUC after training: 0.6909484524018489
User 134530 does not improve AUC. Reverting changes.
Training on augumented user 98193 3/50 current_auc = 0.6915920659996488
User 98193 AUC after training: 0.6904218594581943
User 98193 does not improve AUC. Reverting changes.
Training on augumented user 50807 4/50 current_auc = 0.6915920659996488
User 50807 AUC after training: 0.6921186589433035
User 50807 improves AUC. Keeping the model.
Training on augumented user 124829 5/50 current_auc = 0.6921186589433035
User 124829 AUC after training: 0.6931718448306126
User 124829 improves AUC. Keeping the model.
Training on augumented user 121959 6/50 current_auc = 0.6931718448306126
User 121959 AUC after training: 0.6958633198759581
User 121959 improves AUC. Keeping the model.
Training on augumented user 107677 7/50 current_auc = 0.6958633198759581
User 107677 AUC after training: 0.6963899128196126
User 107677 improves AUC. Keeping the model.
Training on augumented user 88774 8/50 current_auc = 0.6963899128196126
User 88774 AUC after training: 0.6947516236615762
User 88774 does not improve AUC. Reverting changes.
Training on augumented user 28329 9/50 current_auc = 0.6963899128196126
User 28329 AUC after training: 0.6962143818383943
User 28329 does not improve AUC. Reverting changes.
Training on augumented user 29368 10/50 current_auc = 0.6963899128196126
User 29368 AUC after training: 0.6966824644549763
User 29368 improves AUC. Keeping the model.
Training on augumented user 127954 11/50 current_auc = 0.6966824644549763
User 127954 AUC after training: 0.6975601193610672
User 127954 improves AUC. Keeping the model.
Training on augumented user 55257 12/50 current_auc = 0.6975601193610672
User 55257 AUC after training: 0.6976771400152127
User 55257 improves AUC. Keeping the model.
Training on augumented user 61132 13/50 current_auc = 0.6976771400152127
User 61132 AUC after training: 0.6940494997367035
User 61132 does not improve AUC. Reverting changes.
Training on augumented user 112501 14/50 current_auc = 0.6976771400152127
User 112501 AUC after training: 0.6976771400152126
User 112501 does not improve AUC. Reverting changes.
Training on augumented user 768 15/50 current_auc = 0.6976771400152127
User 768 AUC after training: 0.6912995143642854
User 768 does not improve AUC. Reverting changes.
Training on augumented user 75829 16/50 current_auc = 0.6976771400152127
User 75829 AUC after training: 0.6978526709964309
User 75829 improves AUC. Keeping the model.
Training on augumented user 9271 17/50 current_auc = 0.6978526709964309
User 9271 AUC after training: 0.6972675677257035
User 9271 does not improve AUC. Reverting changes.
Training on augumented user 106570 18/50 current_auc = 0.6978526709964309
User 106570 AUC after training: 0.6974430987069218
User 106570 does not improve AUC. Reverting changes.
Training on augumented user 12237 19/50 current_auc = 0.6978526709964309
User 12237 AUC after training: 0.6980282019776491
User 12237 improves AUC. Keeping the model.
Training on augumented user 128509 20/50 current_auc = 0.6980282019776491
User 128509 AUC after training: 0.6968579954361944
User 128509 does not improve AUC. Reverting changes.
Training on augumented user 133766 21/50 current_auc = 0.6980282019776491
User 133766 AUC after training: 0.6970920367444854
User 133766 does not improve AUC. Reverting changes.
Training on augumented user 104359 22/50 current_auc = 0.6980282019776491
User 104359 AUC after training: 0.6986718155754491
User 104359 improves AUC. Keeping the model.
Training on augumented user 125851 23/50 current_auc = 0.6986718155754491
User 125851 AUC after training: 0.6987303259025218
User 125851 improves AUC. Keeping the model.
Training on augumented user 74704 24/50 current_auc = 0.6987303259025218
User 74704 AUC after training: 0.6977941606693581
User 74704 does not improve AUC. Reverting changes.
Training on augumented user 97114 25/50 current_auc = 0.6987303259025218
User 97114 AUC after training: 0.6977941606693581
User 97114 does not improve AUC. Reverting changes.
Training on augumented user 90755 26/50 current_auc = 0.6987303259025218
User 90755 AUC after training: 0.6975016090339945
User 90755 does not improve AUC. Reverting changes.
Training on augumented user 98865 27/50 current_auc = 0.6987303259025218
User 98865 AUC after training: 0.6969165057632672
User 98865 does not improve AUC. Reverting changes.
Training on augumented user 49640 28/50 current_auc = 0.6987303259025218
User 49640 AUC after training: 0.6987888362295945
User 49640 improves AUC. Keeping the model.
Training on augumented user 132048 29/50 current_auc = 0.6987888362295945
User 132048 AUC after training: 0.698671815575449
User 132048 does not improve AUC. Reverting changes.
Training on augumented user 129878 30/50 current_auc = 0.6987888362295945
User 129878 AUC after training: 0.698671815575449
User 129878 does not improve AUC. Reverting changes.
Training on augumented user 57211 31/50 current_auc = 0.6987888362295945
User 57211 AUC after training: 0.6981452226317945
User 57211 does not improve AUC. Reverting changes.
Training on augumented user 39709 32/50 current_auc = 0.6987888362295945
User 39709 AUC after training: 0.69826224328594
User 39709 does not improve AUC. Reverting changes.
Training on augumented user 87943 33/50 current_auc = 0.6987888362295945
User 87943 AUC after training: 0.6962143818383945
User 87943 does not improve AUC. Reverting changes.
Training on augumented user 61178 34/50 current_auc = 0.6987888362295945
User 61178 AUC after training: 0.6988473465566672
User 61178 improves AUC. Keeping the model.
Training on augumented user 62591 35/50 current_auc = 0.6988473465566672
User 62591 AUC after training: 0.6985547949213036
User 62591 does not improve AUC. Reverting changes.
Training on augumented user 41962 36/50 current_auc = 0.6988473465566672
User 41962 AUC after training: 0.6981452226317945
User 41962 does not improve AUC. Reverting changes.
Training on augumented user 91978 37/50 current_auc = 0.6988473465566672
User 91978 AUC after training: 0.6984962845942309
User 91978 does not improve AUC. Reverting changes.
Training on augumented user 132824 38/50 current_auc = 0.6988473465566672
User 132824 AUC after training: 0.6979696916505763
User 132824 does not improve AUC. Reverting changes.
Training on augumented user 5250 39/50 current_auc = 0.6988473465566672
User 5250 AUC after training: 0.6984962845942309
User 5250 does not improve AUC. Reverting changes.
Training on augumented user 119690 40/50 current_auc = 0.6988473465566672
User 119690 AUC after training: 0.6983207536130126
User 119690 does not improve AUC. Reverting changes.
Training on augumented user 1406 41/50 current_auc = 0.6988473465566672
User 1406 AUC after training: 0.6990228775378855
User 1406 improves AUC. Keeping the model.
Training on augumented user 64161 42/50 current_auc = 0.6990228775378855
User 64161 AUC after training: 0.6987303259025218
User 64161 does not improve AUC. Reverting changes.
Training on augumented user 131242 43/50 current_auc = 0.6990228775378855
User 131242 AUC after training: 0.6990813878649581
User 131242 improves AUC. Keeping the model.
Training on augumented user 120039 44/50 current_auc = 0.6990813878649581
User 120039 AUC after training: 0.6993154291732491
User 120039 improves AUC. Keeping the model.
Training on augumented user 86635 45/50 current_auc = 0.6993154291732491
User 86635 AUC after training: 0.6991398981920309
User 86635 does not improve AUC. Reverting changes.
Training on augumented user 71564 46/50 current_auc = 0.6993154291732491
User 71564 AUC after training: 0.6994324498273945
User 71564 improves AUC. Keeping the model.
Training on augumented user 91026 47/50 current_auc = 0.6994324498273945
User 91026 AUC after training: 0.6988473465566672
User 91026 does not improve AUC. Reverting changes.
Training on augumented user 39175 48/50 current_auc = 0.6994324498273945
User 39175 AUC after training: 0.7000175530981219
User 39175 improves AUC. Keeping the model.
Training on augumented user 76897 49/50 current_auc = 0.7000175530981219
User 76897 AUC after training: 0.6994324498273945
User 76897 does not improve AUC. Reverting changes.
[2024-12-02 18:34:48.414646] start test user 2517 103/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:34:48.821338] start test user 2517 103/568 recall augumented users by random, augumented_users = [2673, 81113, 53866, 112539, 30799, 122068, 43399, 57838, 23716, 6518, 116704, 54971, 106547, 84664, 2947, 42234, 14915, 27714, 89502, 15329, 110105, 6207, 20517, 36197, 76320, 65986, 60586, 96602, 81917, 3103, 34885, 43184, 114974, 128524, 119202, 118875, 5587, 12803, 76139, 127851, 116290, 40243, 41110, 123551, 77096, 19416, 79157, 64708, 35701, 113318]
[2024-12-02 18:34:48.837405] user = 2517 Cloud 103/568
[2024-12-02 18:34:48.863342] user = 2517 Local 103/568
[2024-12-02 18:34:48.936907] user = 2517 Local+ 103/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:34:51.441651] user = 2517 MPDA- 103/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6123283191628515
Training on augumented user 2673 0/50 current_auc = 0.6123283191628515
User 2673 AUC after training: 0.6127098321342925
User 2673 improves AUC. Keeping the model.
Training on augumented user 81113 1/50 current_auc = 0.6127098321342925
User 81113 AUC after training: 0.6127643339873555
User 81113 improves AUC. Keeping the model.
Training on augumented user 53866 2/50 current_auc = 0.6127643339873555
User 53866 AUC after training: 0.6126008284281667
User 53866 does not improve AUC. Reverting changes.
Training on augumented user 112539 3/50 current_auc = 0.6127643339873555
User 112539 AUC after training: 0.6117833006322214
User 112539 does not improve AUC. Reverting changes.
Training on augumented user 30799 4/50 current_auc = 0.6127643339873555
User 30799 AUC after training: 0.611647045999564
User 30799 does not improve AUC. Reverting changes.
Training on augumented user 122068 5/50 current_auc = 0.6127643339873555
User 122068 AUC after training: 0.6126553302812295
User 122068 does not improve AUC. Reverting changes.
Training on augumented user 43399 6/50 current_auc = 0.6127643339873555
User 43399 AUC after training: 0.6132003488118596
User 43399 improves AUC. Keeping the model.
Training on augumented user 57838 7/50 current_auc = 0.6132003488118596
User 57838 AUC after training: 0.6128188358404185
User 57838 does not improve AUC. Reverting changes.
Training on augumented user 23716 8/50 current_auc = 0.6132003488118596
User 23716 AUC after training: 0.6130368432526706
User 23716 does not improve AUC. Reverting changes.
Training on augumented user 6518 9/50 current_auc = 0.6132003488118596
User 6518 AUC after training: 0.6127643339873555
User 6518 does not improve AUC. Reverting changes.
Training on augumented user 116704 10/50 current_auc = 0.6132003488118596
User 116704 AUC after training: 0.6127098321342925
User 116704 does not improve AUC. Reverting changes.
Training on augumented user 54971 11/50 current_auc = 0.6132003488118596
User 54971 AUC after training: 0.6120558098975365
User 54971 does not improve AUC. Reverting changes.
Training on augumented user 106547 12/50 current_auc = 0.6132003488118596
User 106547 AUC after training: 0.612900588620013
User 106547 does not improve AUC. Reverting changes.
Training on augumented user 84664 13/50 current_auc = 0.6132003488118596
User 84664 AUC after training: 0.6127098321342925
User 84664 does not improve AUC. Reverting changes.
Training on augumented user 2947 14/50 current_auc = 0.6132003488118596
User 2947 AUC after training: 0.6117833006322216
User 2947 does not improve AUC. Reverting changes.
Training on augumented user 42234 15/50 current_auc = 0.6132003488118596
User 42234 AUC after training: 0.6128188358404187
User 42234 does not improve AUC. Reverting changes.
Training on augumented user 14915 16/50 current_auc = 0.6132003488118596
User 14915 AUC after training: 0.6129823413996076
User 14915 does not improve AUC. Reverting changes.
Training on augumented user 27714 17/50 current_auc = 0.6132003488118596
User 27714 AUC after training: 0.6127098321342925
User 27714 does not improve AUC. Reverting changes.
Training on augumented user 89502 18/50 current_auc = 0.6132003488118596
User 89502 AUC after training: 0.6128188358404185
User 89502 does not improve AUC. Reverting changes.
Training on augumented user 15329 19/50 current_auc = 0.6132003488118596
User 15329 AUC after training: 0.6132003488118597
User 15329 improves AUC. Keeping the model.
Training on augumented user 110105 20/50 current_auc = 0.6132003488118597
User 110105 AUC after training: 0.6126553302812296
User 110105 does not improve AUC. Reverting changes.
Training on augumented user 6207 21/50 current_auc = 0.6132003488118597
User 6207 AUC after training: 0.6121103117505996
User 6207 does not improve AUC. Reverting changes.
Training on augumented user 20517 22/50 current_auc = 0.6132003488118597
User 20517 AUC after training: 0.6127098321342925
User 20517 does not improve AUC. Reverting changes.
Training on augumented user 36197 23/50 current_auc = 0.6132003488118597
User 36197 AUC after training: 0.6129278395465446
User 36197 does not improve AUC. Reverting changes.
Training on augumented user 76320 24/50 current_auc = 0.6132003488118597
User 76320 AUC after training: 0.6127098321342925
User 76320 does not improve AUC. Reverting changes.
Training on augumented user 65986 25/50 current_auc = 0.6132003488118597
User 65986 AUC after training: 0.6129278395465446
User 65986 does not improve AUC. Reverting changes.
Training on augumented user 60586 26/50 current_auc = 0.6132003488118597
User 60586 AUC after training: 0.6126008284281665
User 60586 does not improve AUC. Reverting changes.
Training on augumented user 96602 27/50 current_auc = 0.6132003488118597
User 96602 AUC after training: 0.6131458469587966
User 96602 does not improve AUC. Reverting changes.
Training on augumented user 81917 28/50 current_auc = 0.6132003488118597
User 81917 AUC after training: 0.6132003488118596
User 81917 does not improve AUC. Reverting changes.
Training on augumented user 3103 29/50 current_auc = 0.6132003488118597
User 3103 AUC after training: 0.6135273599302377
User 3103 improves AUC. Keeping the model.
Training on augumented user 34885 30/50 current_auc = 0.6135273599302377
User 34885 AUC after training: 0.6134728580771747
User 34885 does not improve AUC. Reverting changes.
Training on augumented user 43184 31/50 current_auc = 0.6135273599302377
User 43184 AUC after training: 0.6130368432526706
User 43184 does not improve AUC. Reverting changes.
Training on augumented user 114974 32/50 current_auc = 0.6135273599302377
User 114974 AUC after training: 0.6134728580771746
User 114974 does not improve AUC. Reverting changes.
Training on augumented user 128524 33/50 current_auc = 0.6135273599302377
User 128524 AUC after training: 0.6137453673424897
User 128524 improves AUC. Keeping the model.
Training on augumented user 119202 34/50 current_auc = 0.6137453673424897
User 119202 AUC after training: 0.6136363636363638
User 119202 does not improve AUC. Reverting changes.
Training on augumented user 118875 35/50 current_auc = 0.6137453673424897
User 118875 AUC after training: 0.6132548506649227
User 118875 does not improve AUC. Reverting changes.
Training on augumented user 5587 36/50 current_auc = 0.6137453673424897
User 5587 AUC after training: 0.6135273599302377
User 5587 does not improve AUC. Reverting changes.
Training on augumented user 12803 37/50 current_auc = 0.6137453673424897
User 12803 AUC after training: 0.6133638543710486
User 12803 does not improve AUC. Reverting changes.
Training on augumented user 76139 38/50 current_auc = 0.6137453673424897
User 76139 AUC after training: 0.6135818617833007
User 76139 does not improve AUC. Reverting changes.
Training on augumented user 127851 39/50 current_auc = 0.6137453673424897
User 127851 AUC after training: 0.6133638543710487
User 127851 does not improve AUC. Reverting changes.
Training on augumented user 116290 40/50 current_auc = 0.6137453673424897
User 116290 AUC after training: 0.6136363636363638
User 116290 does not improve AUC. Reverting changes.
Training on augumented user 40243 41/50 current_auc = 0.6137453673424897
User 40243 AUC after training: 0.6125463265751037
User 40243 does not improve AUC. Reverting changes.
Training on augumented user 41110 42/50 current_auc = 0.6137453673424897
User 41110 AUC after training: 0.6137998691955527
User 41110 improves AUC. Keeping the model.
Training on augumented user 123551 43/50 current_auc = 0.6137998691955527
User 123551 AUC after training: 0.6136363636363636
User 123551 does not improve AUC. Reverting changes.
Training on augumented user 77096 44/50 current_auc = 0.6137998691955527
User 77096 AUC after training: 0.6142903858731197
User 77096 improves AUC. Keeping the model.
Training on augumented user 19416 45/50 current_auc = 0.6142903858731197
User 19416 AUC after training: 0.6143448877261827
User 19416 improves AUC. Keeping the model.
Training on augumented user 79157 46/50 current_auc = 0.6143448877261827
User 79157 AUC after training: 0.6144538914323088
User 79157 improves AUC. Keeping the model.
Training on augumented user 64708 47/50 current_auc = 0.6144538914323088
User 64708 AUC after training: 0.6143993895792458
User 64708 does not improve AUC. Reverting changes.
Training on augumented user 35701 48/50 current_auc = 0.6144538914323088
User 35701 AUC after training: 0.6157074340527577
User 35701 improves AUC. Keeping the model.
Training on augumented user 113318 49/50 current_auc = 0.6157074340527577
User 113318 AUC after training: 0.6151624155221278
User 113318 does not improve AUC. Reverting changes.
[2024-12-02 18:35:19.826333] start test user 2529 104/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:35:20.226897] start test user 2529 104/568 recall augumented users by random, augumented_users = [116463, 64851, 60062, 101728, 48830, 78279, 56748, 25787, 40639, 16058, 58130, 31825, 71238, 102211, 75442, 135317, 48730, 55294, 104170, 119329, 10654, 128208, 32585, 22340, 73788, 9319, 31437, 1641, 136836, 54935, 108064, 77152, 37025, 83062, 61079, 5985, 23002, 117986, 75669, 119951, 37612, 66597, 6566, 101119, 93406, 20045, 94752, 129360, 107646, 19044]
[2024-12-02 18:35:20.241842] user = 2529 Cloud 104/568
[2024-12-02 18:35:20.255688] user = 2529 Local 104/568
[2024-12-02 18:35:20.305518] user = 2529 Local+ 104/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:35:22.405639] user = 2529 MPDA- 104/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8122222222222222
Training on augumented user 116463 0/50 current_auc = 0.8122222222222222
User 116463 AUC after training: 0.8138888888888889
User 116463 improves AUC. Keeping the model.
Training on augumented user 64851 1/50 current_auc = 0.8138888888888889
User 64851 AUC after training: 0.8138888888888889
User 64851 does not improve AUC. Reverting changes.
Training on augumented user 60062 2/50 current_auc = 0.8138888888888889
User 60062 AUC after training: 0.8138888888888889
User 60062 does not improve AUC. Reverting changes.
Training on augumented user 101728 3/50 current_auc = 0.8138888888888889
User 101728 AUC after training: 0.8144444444444444
User 101728 improves AUC. Keeping the model.
Training on augumented user 48830 4/50 current_auc = 0.8144444444444444
User 48830 AUC after training: 0.8144444444444444
User 48830 does not improve AUC. Reverting changes.
Training on augumented user 78279 5/50 current_auc = 0.8144444444444444
User 78279 AUC after training: 0.8144444444444444
User 78279 does not improve AUC. Reverting changes.
Training on augumented user 56748 6/50 current_auc = 0.8144444444444444
User 56748 AUC after training: 0.8144444444444444
User 56748 does not improve AUC. Reverting changes.
Training on augumented user 25787 7/50 current_auc = 0.8144444444444444
User 25787 AUC after training: 0.815
User 25787 improves AUC. Keeping the model.
Training on augumented user 40639 8/50 current_auc = 0.815
User 40639 AUC after training: 0.8144444444444444
User 40639 does not improve AUC. Reverting changes.
Training on augumented user 16058 9/50 current_auc = 0.815
User 16058 AUC after training: 0.8138888888888888
User 16058 does not improve AUC. Reverting changes.
Training on augumented user 58130 10/50 current_auc = 0.815
User 58130 AUC after training: 0.8138888888888889
User 58130 does not improve AUC. Reverting changes.
Training on augumented user 31825 11/50 current_auc = 0.815
User 31825 AUC after training: 0.815
User 31825 does not improve AUC. Reverting changes.
Training on augumented user 71238 12/50 current_auc = 0.815
User 71238 AUC after training: 0.8138888888888888
User 71238 does not improve AUC. Reverting changes.
Training on augumented user 102211 13/50 current_auc = 0.815
User 102211 AUC after training: 0.8122222222222223
User 102211 does not improve AUC. Reverting changes.
Training on augumented user 75442 14/50 current_auc = 0.815
User 75442 AUC after training: 0.8138888888888889
User 75442 does not improve AUC. Reverting changes.
Training on augumented user 135317 15/50 current_auc = 0.815
User 135317 AUC after training: 0.8138888888888888
User 135317 does not improve AUC. Reverting changes.
Training on augumented user 48730 16/50 current_auc = 0.815
User 48730 AUC after training: 0.815
User 48730 does not improve AUC. Reverting changes.
Training on augumented user 55294 17/50 current_auc = 0.815
User 55294 AUC after training: 0.815
User 55294 does not improve AUC. Reverting changes.
Training on augumented user 104170 18/50 current_auc = 0.815
User 104170 AUC after training: 0.8138888888888888
User 104170 does not improve AUC. Reverting changes.
Training on augumented user 119329 19/50 current_auc = 0.815
User 119329 AUC after training: 0.8144444444444444
User 119329 does not improve AUC. Reverting changes.
Training on augumented user 10654 20/50 current_auc = 0.815
User 10654 AUC after training: 0.815
User 10654 does not improve AUC. Reverting changes.
Training on augumented user 128208 21/50 current_auc = 0.815
User 128208 AUC after training: 0.8144444444444444
User 128208 does not improve AUC. Reverting changes.
Training on augumented user 32585 22/50 current_auc = 0.815
User 32585 AUC after training: 0.8138888888888889
User 32585 does not improve AUC. Reverting changes.
Training on augumented user 22340 23/50 current_auc = 0.815
User 22340 AUC after training: 0.815
User 22340 does not improve AUC. Reverting changes.
Training on augumented user 73788 24/50 current_auc = 0.815
User 73788 AUC after training: 0.8144444444444444
User 73788 does not improve AUC. Reverting changes.
Training on augumented user 9319 25/50 current_auc = 0.815
User 9319 AUC after training: 0.8155555555555556
User 9319 improves AUC. Keeping the model.
Training on augumented user 31437 26/50 current_auc = 0.8155555555555556
User 31437 AUC after training: 0.8144444444444444
User 31437 does not improve AUC. Reverting changes.
Training on augumented user 1641 27/50 current_auc = 0.8155555555555556
User 1641 AUC after training: 0.815
User 1641 does not improve AUC. Reverting changes.
Training on augumented user 136836 28/50 current_auc = 0.8155555555555556
User 136836 AUC after training: 0.815
User 136836 does not improve AUC. Reverting changes.
Training on augumented user 54935 29/50 current_auc = 0.8155555555555556
User 54935 AUC after training: 0.8138888888888888
User 54935 does not improve AUC. Reverting changes.
Training on augumented user 108064 30/50 current_auc = 0.8155555555555556
User 108064 AUC after training: 0.8155555555555556
User 108064 does not improve AUC. Reverting changes.
Training on augumented user 77152 31/50 current_auc = 0.8155555555555556
User 77152 AUC after training: 0.8155555555555556
User 77152 does not improve AUC. Reverting changes.
Training on augumented user 37025 32/50 current_auc = 0.8155555555555556
User 37025 AUC after training: 0.8177777777777778
User 37025 improves AUC. Keeping the model.
Training on augumented user 83062 33/50 current_auc = 0.8177777777777778
User 83062 AUC after training: 0.8166666666666665
User 83062 does not improve AUC. Reverting changes.
Training on augumented user 61079 34/50 current_auc = 0.8177777777777778
User 61079 AUC after training: 0.8155555555555555
User 61079 does not improve AUC. Reverting changes.
Training on augumented user 5985 35/50 current_auc = 0.8177777777777778
User 5985 AUC after training: 0.8166666666666667
User 5985 does not improve AUC. Reverting changes.
Training on augumented user 23002 36/50 current_auc = 0.8177777777777778
User 23002 AUC after training: 0.8177777777777777
User 23002 does not improve AUC. Reverting changes.
Training on augumented user 117986 37/50 current_auc = 0.8177777777777778
User 117986 AUC after training: 0.8172222222222222
User 117986 does not improve AUC. Reverting changes.
Training on augumented user 75669 38/50 current_auc = 0.8177777777777778
User 75669 AUC after training: 0.8177777777777777
User 75669 does not improve AUC. Reverting changes.
Training on augumented user 119951 39/50 current_auc = 0.8177777777777778
User 119951 AUC after training: 0.8177777777777777
User 119951 does not improve AUC. Reverting changes.
Training on augumented user 37612 40/50 current_auc = 0.8177777777777778
User 37612 AUC after training: 0.8166666666666667
User 37612 does not improve AUC. Reverting changes.
Training on augumented user 66597 41/50 current_auc = 0.8177777777777778
User 66597 AUC after training: 0.8155555555555556
User 66597 does not improve AUC. Reverting changes.
Training on augumented user 6566 42/50 current_auc = 0.8177777777777778
User 6566 AUC after training: 0.8155555555555555
User 6566 does not improve AUC. Reverting changes.
Training on augumented user 101119 43/50 current_auc = 0.8177777777777778
User 101119 AUC after training: 0.8144444444444443
User 101119 does not improve AUC. Reverting changes.
Training on augumented user 93406 44/50 current_auc = 0.8177777777777778
User 93406 AUC after training: 0.8166666666666667
User 93406 does not improve AUC. Reverting changes.
Training on augumented user 20045 45/50 current_auc = 0.8177777777777778
User 20045 AUC after training: 0.8172222222222222
User 20045 does not improve AUC. Reverting changes.
Training on augumented user 94752 46/50 current_auc = 0.8177777777777778
User 94752 AUC after training: 0.8172222222222223
User 94752 does not improve AUC. Reverting changes.
Training on augumented user 129360 47/50 current_auc = 0.8177777777777778
User 129360 AUC after training: 0.8155555555555556
User 129360 does not improve AUC. Reverting changes.
Training on augumented user 107646 48/50 current_auc = 0.8177777777777778
User 107646 AUC after training: 0.8172222222222222
User 107646 does not improve AUC. Reverting changes.
Training on augumented user 19044 49/50 current_auc = 0.8177777777777778
User 19044 AUC after training: 0.8166666666666667
User 19044 does not improve AUC. Reverting changes.
[2024-12-02 18:35:51.597542] start test user 2544 105/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:35:52.011425] start test user 2544 105/568 recall augumented users by random, augumented_users = [25892, 68637, 6926, 58411, 10509, 125855, 30204, 105054, 120727, 129002, 81348, 22627, 106081, 19895, 26326, 28022, 7919, 49661, 75490, 8610, 125345, 99395, 8377, 9697, 58755, 88328, 9097, 121618, 2399, 80557, 104233, 39396, 96916, 127544, 40215, 63158, 12378, 96038, 28462, 35528, 122762, 54917, 4884, 80309, 99138, 38154, 120405, 120724, 105895, 23335]
[2024-12-02 18:35:52.026723] user = 2544 Cloud 105/568
[2024-12-02 18:35:52.090224] user = 2544 Local 105/568
[2024-12-02 18:35:52.201992] user = 2544 Local+ 105/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:35:54.495415] user = 2544 MPDA- 105/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6279855410290193
Training on augumented user 25892 0/50 current_auc = 0.6279855410290193
User 25892 AUC after training: 0.6283824870781393
User 25892 improves AUC. Keeping the model.
Training on augumented user 68637 1/50 current_auc = 0.6283824870781393
User 68637 AUC after training: 0.6275125840343232
User 68637 does not improve AUC. Reverting changes.
Training on augumented user 6926 2/50 current_auc = 0.6283824870781393
User 6926 AUC after training: 0.6289652376608899
User 6926 improves AUC. Keeping the model.
Training on augumented user 58411 3/50 current_auc = 0.6289652376608899
User 58411 AUC after training: 0.6287118678423026
User 58411 does not improve AUC. Reverting changes.
Training on augumented user 10509 4/50 current_auc = 0.6289652376608899
User 10509 AUC after training: 0.6287456504847809
User 10509 does not improve AUC. Reverting changes.
Training on augumented user 125855 5/50 current_auc = 0.6289652376608899
User 125855 AUC after training: 0.6287287591635418
User 125855 does not improve AUC. Reverting changes.
Training on augumented user 30204 6/50 current_auc = 0.6289652376608899
User 30204 AUC after training: 0.628939900679031
User 30204 does not improve AUC. Reverting changes.
Training on augumented user 105054 7/50 current_auc = 0.6289652376608899
User 105054 AUC after training: 0.6288554440728354
User 105054 does not improve AUC. Reverting changes.
Training on augumented user 120727 8/50 current_auc = 0.6289652376608899
User 120727 AUC after training: 0.6280615519745955
User 120727 does not improve AUC. Reverting changes.
Training on augumented user 129002 9/50 current_auc = 0.6289652376608899
User 129002 AUC after training: 0.627613931961758
User 129002 does not improve AUC. Reverting changes.
Training on augumented user 81348 10/50 current_auc = 0.6289652376608899
User 81348 AUC after training: 0.6282558021688456
User 81348 does not improve AUC. Reverting changes.
Training on augumented user 22627 11/50 current_auc = 0.6289652376608899
User 22627 AUC after training: 0.6284584980237153
User 22627 does not improve AUC. Reverting changes.
Training on augumented user 106081 12/50 current_auc = 0.6289652376608899
User 106081 AUC after training: 0.6292861727644337
User 106081 improves AUC. Keeping the model.
Training on augumented user 19895 13/50 current_auc = 0.6292861727644337
User 19895 AUC after training: 0.629615553528597
User 19895 improves AUC. Keeping the model.
Training on augumented user 26326 14/50 current_auc = 0.629615553528597
User 26326 AUC after training: 0.6295648795648796
User 26326 does not improve AUC. Reverting changes.
Training on augumented user 28022 15/50 current_auc = 0.629615553528597
User 28022 AUC after training: 0.6291932704976184
User 28022 does not improve AUC. Reverting changes.
Training on augumented user 7919 16/50 current_auc = 0.629615553528597
User 7919 AUC after training: 0.6294888686193034
User 7919 does not improve AUC. Reverting changes.
Training on augumented user 49661 17/50 current_auc = 0.629615553528597
User 49661 AUC after training: 0.6294719772980643
User 49661 does not improve AUC. Reverting changes.
Training on augumented user 75490 18/50 current_auc = 0.629615553528597
User 75490 AUC after training: 0.6288132157697376
User 75490 does not improve AUC. Reverting changes.
Training on augumented user 8610 19/50 current_auc = 0.629615553528597
User 8610 AUC after training: 0.6291848248369988
User 8610 does not improve AUC. Reverting changes.
Training on augumented user 125345 20/50 current_auc = 0.629615553528597
User 125345 AUC after training: 0.6293875206918685
User 125345 does not improve AUC. Reverting changes.
Training on augumented user 99395 21/50 current_auc = 0.629615553528597
User 99395 AUC after training: 0.6294719772980643
User 99395 does not improve AUC. Reverting changes.
Training on augumented user 8377 22/50 current_auc = 0.629615553528597
User 8377 AUC after training: 0.6292101618188575
User 8377 does not improve AUC. Reverting changes.
Training on augumented user 9697 23/50 current_auc = 0.629615553528597
User 9697 AUC after training: 0.6295395425830208
User 9697 does not improve AUC. Reverting changes.
Training on augumented user 58755 24/50 current_auc = 0.629615553528597
User 58755 AUC after training: 0.6295310969224013
User 58755 does not improve AUC. Reverting changes.
Training on augumented user 88328 25/50 current_auc = 0.629615553528597
User 88328 AUC after training: 0.629218607479477
User 88328 does not improve AUC. Reverting changes.
Training on augumented user 9097 26/50 current_auc = 0.629615553528597
User 9097 AUC after training: 0.6298013580622277
User 9097 improves AUC. Keeping the model.
Training on augumented user 121618 27/50 current_auc = 0.6298013580622277
User 121618 AUC after training: 0.629733792777271
User 121618 does not improve AUC. Reverting changes.
Training on augumented user 2399 28/50 current_auc = 0.6298013580622277
User 2399 AUC after training: 0.6298773690078038
User 2399 improves AUC. Keeping the model.
Training on augumented user 80557 29/50 current_auc = 0.6298773690078038
User 80557 AUC after training: 0.6295733252254991
User 80557 does not improve AUC. Reverting changes.
Training on augumented user 104233 30/50 current_auc = 0.6298773690078038
User 104233 AUC after training: 0.6301054018445322
User 104233 improves AUC. Keeping the model.
Training on augumented user 39396 31/50 current_auc = 0.6301054018445322
User 39396 AUC after training: 0.629674673152934
User 39396 does not improve AUC. Reverting changes.
Training on augumented user 96916 32/50 current_auc = 0.6301054018445322
User 96916 AUC after training: 0.6299871625958582
User 96916 does not improve AUC. Reverting changes.
Training on augumented user 127544 33/50 current_auc = 0.6301054018445322
User 127544 AUC after training: 0.6299195973109016
User 127544 does not improve AUC. Reverting changes.
Training on augumented user 40215 34/50 current_auc = 0.6301054018445322
User 40215 AUC after training: 0.6295226512617818
User 40215 does not improve AUC. Reverting changes.
Training on augumented user 63158 35/50 current_auc = 0.6301054018445322
User 63158 AUC after training: 0.6295395425830208
User 63158 does not improve AUC. Reverting changes.
Training on augumented user 12378 36/50 current_auc = 0.6301054018445322
User 12378 AUC after training: 0.6301222931657714
User 12378 improves AUC. Keeping the model.
Training on augumented user 96038 37/50 current_auc = 0.6301222931657714
User 96038 AUC after training: 0.6300969561839127
User 96038 does not improve AUC. Reverting changes.
Training on augumented user 28462 38/50 current_auc = 0.6301222931657714
User 28462 AUC after training: 0.6293621837100098
User 28462 does not improve AUC. Reverting changes.
Training on augumented user 35528 39/50 current_auc = 0.6301222931657714
User 35528 AUC after training: 0.6303756629843587
User 35528 improves AUC. Keeping the model.
Training on augumented user 122762 40/50 current_auc = 0.6303756629843587
User 122762 AUC after training: 0.6302151954325868
User 122762 does not improve AUC. Reverting changes.
Training on augumented user 54917 41/50 current_auc = 0.6303756629843587
User 54917 AUC after training: 0.6300631735414344
User 54917 does not improve AUC. Reverting changes.
Training on augumented user 4884 42/50 current_auc = 0.6303756629843587
User 4884 AUC after training: 0.6301138475051519
User 4884 does not improve AUC. Reverting changes.
Training on augumented user 80309 43/50 current_auc = 0.6303756629843587
User 80309 AUC after training: 0.6299027059896625
User 80309 does not improve AUC. Reverting changes.
Training on augumented user 99138 44/50 current_auc = 0.6303756629843587
User 99138 AUC after training: 0.6295310969224013
User 99138 does not improve AUC. Reverting changes.
Training on augumented user 38154 45/50 current_auc = 0.6303756629843587
User 38154 AUC after training: 0.6302658693963041
User 38154 does not improve AUC. Reverting changes.
Training on augumented user 120405 46/50 current_auc = 0.6303756629843587
User 120405 AUC after training: 0.6299702712746191
User 120405 does not improve AUC. Reverting changes.
Training on augumented user 120724 47/50 current_auc = 0.6303756629843587
User 120724 AUC after training: 0.6304432282693153
User 120724 improves AUC. Keeping the model.
Training on augumented user 105895 48/50 current_auc = 0.6304432282693153
User 105895 AUC after training: 0.6301814127901084
User 105895 does not improve AUC. Reverting changes.
Training on augumented user 23335 49/50 current_auc = 0.6304432282693153
User 23335 AUC after training: 0.6303418803418803
User 23335 does not improve AUC. Reverting changes.
[2024-12-02 18:36:24.847348] start test user 2551 106/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:36:25.284521] start test user 2551 106/568 recall augumented users by random, augumented_users = [52511, 82851, 28177, 131896, 26619, 28808, 75745, 7860, 54277, 53243, 129264, 47271, 7648, 42773, 75154, 112804, 6265, 42150, 102523, 93566, 94927, 52704, 70090, 82803, 60690, 122653, 48233, 59560, 104135, 94154, 27604, 76073, 3006, 74397, 105376, 58182, 74513, 61716, 54726, 122296, 75621, 28022, 44041, 132570, 43642, 22417, 59189, 42876, 113529, 4014]
[2024-12-02 18:36:25.299015] user = 2551 Cloud 106/568
[2024-12-02 18:36:25.308822] user = 2551 Local 106/568
[2024-12-02 18:36:25.331164] user = 2551 Local+ 106/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:36:27.400312] user = 2551 MPDA- 106/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6048387096774194
Training on augumented user 52511 0/50 current_auc = 0.6048387096774194
User 52511 AUC after training: 0.6048387096774194
User 52511 does not improve AUC. Reverting changes.
Training on augumented user 82851 1/50 current_auc = 0.6048387096774194
User 82851 AUC after training: 0.6048387096774194
User 82851 does not improve AUC. Reverting changes.
Training on augumented user 28177 2/50 current_auc = 0.6048387096774194
User 28177 AUC after training: 0.6048387096774194
User 28177 does not improve AUC. Reverting changes.
Training on augumented user 131896 3/50 current_auc = 0.6048387096774194
User 131896 AUC after training: 0.5994623655913979
User 131896 does not improve AUC. Reverting changes.
Training on augumented user 26619 4/50 current_auc = 0.6048387096774194
User 26619 AUC after training: 0.6048387096774194
User 26619 does not improve AUC. Reverting changes.
Training on augumented user 28808 5/50 current_auc = 0.6048387096774194
User 28808 AUC after training: 0.6075268817204301
User 28808 improves AUC. Keeping the model.
Training on augumented user 75745 6/50 current_auc = 0.6075268817204301
User 75745 AUC after training: 0.6075268817204301
User 75745 does not improve AUC. Reverting changes.
Training on augumented user 7860 7/50 current_auc = 0.6075268817204301
User 7860 AUC after training: 0.6075268817204301
User 7860 does not improve AUC. Reverting changes.
Training on augumented user 54277 8/50 current_auc = 0.6075268817204301
User 54277 AUC after training: 0.6048387096774194
User 54277 does not improve AUC. Reverting changes.
Training on augumented user 53243 9/50 current_auc = 0.6075268817204301
User 53243 AUC after training: 0.6048387096774194
User 53243 does not improve AUC. Reverting changes.
Training on augumented user 129264 10/50 current_auc = 0.6075268817204301
User 129264 AUC after training: 0.6048387096774194
User 129264 does not improve AUC. Reverting changes.
Training on augumented user 47271 11/50 current_auc = 0.6075268817204301
User 47271 AUC after training: 0.6021505376344086
User 47271 does not improve AUC. Reverting changes.
Training on augumented user 7648 12/50 current_auc = 0.6075268817204301
User 7648 AUC after training: 0.6021505376344086
User 7648 does not improve AUC. Reverting changes.
Training on augumented user 42773 13/50 current_auc = 0.6075268817204301
User 42773 AUC after training: 0.6102150537634409
User 42773 improves AUC. Keeping the model.
Training on augumented user 75154 14/50 current_auc = 0.6102150537634409
User 75154 AUC after training: 0.6102150537634409
User 75154 does not improve AUC. Reverting changes.
Training on augumented user 112804 15/50 current_auc = 0.6102150537634409
User 112804 AUC after training: 0.6075268817204301
User 112804 does not improve AUC. Reverting changes.
Training on augumented user 6265 16/50 current_auc = 0.6102150537634409
User 6265 AUC after training: 0.6102150537634409
User 6265 does not improve AUC. Reverting changes.
Training on augumented user 42150 17/50 current_auc = 0.6102150537634409
User 42150 AUC after training: 0.6102150537634409
User 42150 does not improve AUC. Reverting changes.
Training on augumented user 102523 18/50 current_auc = 0.6102150537634409
User 102523 AUC after training: 0.5994623655913979
User 102523 does not improve AUC. Reverting changes.
Training on augumented user 93566 19/50 current_auc = 0.6102150537634409
User 93566 AUC after training: 0.6075268817204301
User 93566 does not improve AUC. Reverting changes.
Training on augumented user 94927 20/50 current_auc = 0.6102150537634409
User 94927 AUC after training: 0.6075268817204301
User 94927 does not improve AUC. Reverting changes.
Training on augumented user 52704 21/50 current_auc = 0.6102150537634409
User 52704 AUC after training: 0.6021505376344086
User 52704 does not improve AUC. Reverting changes.
Training on augumented user 70090 22/50 current_auc = 0.6102150537634409
User 70090 AUC after training: 0.6075268817204301
User 70090 does not improve AUC. Reverting changes.
Training on augumented user 82803 23/50 current_auc = 0.6102150537634409
User 82803 AUC after training: 0.6021505376344086
User 82803 does not improve AUC. Reverting changes.
Training on augumented user 60690 24/50 current_auc = 0.6102150537634409
User 60690 AUC after training: 0.6075268817204301
User 60690 does not improve AUC. Reverting changes.
Training on augumented user 122653 25/50 current_auc = 0.6102150537634409
User 122653 AUC after training: 0.6075268817204301
User 122653 does not improve AUC. Reverting changes.
Training on augumented user 48233 26/50 current_auc = 0.6102150537634409
User 48233 AUC after training: 0.6075268817204301
User 48233 does not improve AUC. Reverting changes.
Training on augumented user 59560 27/50 current_auc = 0.6102150537634409
User 59560 AUC after training: 0.6102150537634409
User 59560 does not improve AUC. Reverting changes.
Training on augumented user 104135 28/50 current_auc = 0.6102150537634409
User 104135 AUC after training: 0.6102150537634409
User 104135 does not improve AUC. Reverting changes.
Training on augumented user 94154 29/50 current_auc = 0.6102150537634409
User 94154 AUC after training: 0.6102150537634409
User 94154 does not improve AUC. Reverting changes.
Training on augumented user 27604 30/50 current_auc = 0.6102150537634409
User 27604 AUC after training: 0.6075268817204301
User 27604 does not improve AUC. Reverting changes.
Training on augumented user 76073 31/50 current_auc = 0.6102150537634409
User 76073 AUC after training: 0.6048387096774194
User 76073 does not improve AUC. Reverting changes.
Training on augumented user 3006 32/50 current_auc = 0.6102150537634409
User 3006 AUC after training: 0.6102150537634409
User 3006 does not improve AUC. Reverting changes.
Training on augumented user 74397 33/50 current_auc = 0.6102150537634409
User 74397 AUC after training: 0.6075268817204301
User 74397 does not improve AUC. Reverting changes.
Training on augumented user 105376 34/50 current_auc = 0.6102150537634409
User 105376 AUC after training: 0.6075268817204301
User 105376 does not improve AUC. Reverting changes.
Training on augumented user 58182 35/50 current_auc = 0.6102150537634409
User 58182 AUC after training: 0.6048387096774194
User 58182 does not improve AUC. Reverting changes.
Training on augumented user 74513 36/50 current_auc = 0.6102150537634409
User 74513 AUC after training: 0.6129032258064516
User 74513 improves AUC. Keeping the model.
Training on augumented user 61716 37/50 current_auc = 0.6129032258064516
User 61716 AUC after training: 0.6075268817204301
User 61716 does not improve AUC. Reverting changes.
Training on augumented user 54726 38/50 current_auc = 0.6129032258064516
User 54726 AUC after training: 0.6102150537634409
User 54726 does not improve AUC. Reverting changes.
Training on augumented user 122296 39/50 current_auc = 0.6129032258064516
User 122296 AUC after training: 0.6129032258064516
User 122296 does not improve AUC. Reverting changes.
Training on augumented user 75621 40/50 current_auc = 0.6129032258064516
User 75621 AUC after training: 0.6102150537634409
User 75621 does not improve AUC. Reverting changes.
Training on augumented user 28022 41/50 current_auc = 0.6129032258064516
User 28022 AUC after training: 0.6129032258064516
User 28022 does not improve AUC. Reverting changes.
Training on augumented user 44041 42/50 current_auc = 0.6129032258064516
User 44041 AUC after training: 0.6129032258064516
User 44041 does not improve AUC. Reverting changes.
Training on augumented user 132570 43/50 current_auc = 0.6129032258064516
User 132570 AUC after training: 0.6102150537634409
User 132570 does not improve AUC. Reverting changes.
Training on augumented user 43642 44/50 current_auc = 0.6129032258064516
User 43642 AUC after training: 0.6102150537634409
User 43642 does not improve AUC. Reverting changes.
Training on augumented user 22417 45/50 current_auc = 0.6129032258064516
User 22417 AUC after training: 0.6102150537634409
User 22417 does not improve AUC. Reverting changes.
Training on augumented user 59189 46/50 current_auc = 0.6129032258064516
User 59189 AUC after training: 0.6102150537634409
User 59189 does not improve AUC. Reverting changes.
Training on augumented user 42876 47/50 current_auc = 0.6129032258064516
User 42876 AUC after training: 0.6075268817204301
User 42876 does not improve AUC. Reverting changes.
Training on augumented user 113529 48/50 current_auc = 0.6129032258064516
User 113529 AUC after training: 0.6129032258064516
User 113529 does not improve AUC. Reverting changes.
Training on augumented user 4014 49/50 current_auc = 0.6129032258064516
User 4014 AUC after training: 0.6129032258064516
User 4014 does not improve AUC. Reverting changes.
[2024-12-02 18:36:58.088935] start test user 2606 107/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:36:58.833125] start test user 2606 107/568 recall augumented users by random, augumented_users = [8031, 5268, 118019, 77440, 123009, 116354, 115507, 28862, 1726, 77962, 42538, 125016, 131368, 23187, 84030, 23009, 132935, 49447, 11419, 58530, 79592, 78664, 19556, 78104, 102405, 125008, 80155, 79444, 90252, 126077, 24342, 113213, 105642, 87674, 4023, 129535, 42930, 134920, 74325, 132434, 71109, 45909, 38895, 9509, 26991, 124045, 67660, 86618, 25071, 135993]
[2024-12-02 18:36:58.848278] user = 2606 Cloud 107/568
[2024-12-02 18:36:58.862731] user = 2606 Local 107/568
[2024-12-02 18:36:58.978337] user = 2606 Local+ 107/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:37:01.695594] user = 2606 MPDA- 107/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6116225546605294
Training on augumented user 8031 0/50 current_auc = 0.6116225546605294
User 8031 AUC after training: 0.6125815113156885
User 8031 improves AUC. Keeping the model.
Training on augumented user 5268 1/50 current_auc = 0.6125815113156885
User 5268 AUC after training: 0.6110471806674338
User 5268 does not improve AUC. Reverting changes.
Training on augumented user 118019 2/50 current_auc = 0.6125815113156885
User 118019 AUC after training: 0.6106635980053702
User 118019 does not improve AUC. Reverting changes.
Training on augumented user 77440 3/50 current_auc = 0.6125815113156885
User 77440 AUC after training: 0.6106635980053702
User 77440 does not improve AUC. Reverting changes.
Training on augumented user 123009 4/50 current_auc = 0.6125815113156885
User 123009 AUC after training: 0.6125815113156886
User 123009 improves AUC. Keeping the model.
Training on augumented user 116354 5/50 current_auc = 0.6125815113156886
User 116354 AUC after training: 0.6118143459915611
User 116354 does not improve AUC. Reverting changes.
Training on augumented user 115507 6/50 current_auc = 0.6125815113156886
User 115507 AUC after training: 0.6121979286536249
User 115507 does not improve AUC. Reverting changes.
Training on augumented user 28862 7/50 current_auc = 0.6125815113156886
User 28862 AUC after training: 0.6129650939777522
User 28862 improves AUC. Keeping the model.
Training on augumented user 1726 8/50 current_auc = 0.6129650939777522
User 1726 AUC after training: 0.6106635980053702
User 1726 does not improve AUC. Reverting changes.
Training on augumented user 77962 9/50 current_auc = 0.6129650939777522
User 77962 AUC after training: 0.6125815113156885
User 77962 does not improve AUC. Reverting changes.
Training on augumented user 42538 10/50 current_auc = 0.6129650939777522
User 42538 AUC after training: 0.6114307633294974
User 42538 does not improve AUC. Reverting changes.
Training on augumented user 125016 11/50 current_auc = 0.6129650939777522
User 125016 AUC after training: 0.6114307633294975
User 125016 does not improve AUC. Reverting changes.
Training on augumented user 131368 12/50 current_auc = 0.6129650939777522
User 131368 AUC after training: 0.6118143459915611
User 131368 does not improve AUC. Reverting changes.
Training on augumented user 23187 13/50 current_auc = 0.6129650939777522
User 23187 AUC after training: 0.6118143459915613
User 23187 does not improve AUC. Reverting changes.
Training on augumented user 84030 14/50 current_auc = 0.6129650939777522
User 84030 AUC after training: 0.6114307633294974
User 84030 does not improve AUC. Reverting changes.
Training on augumented user 23009 15/50 current_auc = 0.6129650939777522
User 23009 AUC after training: 0.6125815113156885
User 23009 does not improve AUC. Reverting changes.
Training on augumented user 132935 16/50 current_auc = 0.6129650939777522
User 132935 AUC after training: 0.6121979286536249
User 132935 does not improve AUC. Reverting changes.
Training on augumented user 49447 17/50 current_auc = 0.6129650939777522
User 49447 AUC after training: 0.6133486766398158
User 49447 improves AUC. Keeping the model.
Training on augumented user 11419 18/50 current_auc = 0.6133486766398158
User 11419 AUC after training: 0.6137322593018796
User 11419 improves AUC. Keeping the model.
Training on augumented user 58530 19/50 current_auc = 0.6137322593018796
User 58530 AUC after training: 0.6144994246260069
User 58530 improves AUC. Keeping the model.
Training on augumented user 79592 20/50 current_auc = 0.6144994246260069
User 79592 AUC after training: 0.6152665899501343
User 79592 improves AUC. Keeping the model.
Training on augumented user 78664 21/50 current_auc = 0.6152665899501343
User 78664 AUC after training: 0.6171845032604526
User 78664 improves AUC. Keeping the model.
Training on augumented user 19556 22/50 current_auc = 0.6171845032604526
User 19556 AUC after training: 0.6152665899501343
User 19556 does not improve AUC. Reverting changes.
Training on augumented user 78104 23/50 current_auc = 0.6171845032604526
User 78104 AUC after training: 0.6144994246260069
User 78104 does not improve AUC. Reverting changes.
Training on augumented user 102405 24/50 current_auc = 0.6171845032604526
User 102405 AUC after training: 0.6171845032604527
User 102405 improves AUC. Keeping the model.
Training on augumented user 125008 25/50 current_auc = 0.6171845032604527
User 125008 AUC after training: 0.6164173379363254
User 125008 does not improve AUC. Reverting changes.
Training on augumented user 80155 26/50 current_auc = 0.6171845032604527
User 80155 AUC after training: 0.6148830072880705
User 80155 does not improve AUC. Reverting changes.
Training on augumented user 79444 27/50 current_auc = 0.6171845032604527
User 79444 AUC after training: 0.6171845032604526
User 79444 does not improve AUC. Reverting changes.
Training on augumented user 90252 28/50 current_auc = 0.6171845032604527
User 90252 AUC after training: 0.6160337552742616
User 90252 does not improve AUC. Reverting changes.
Training on augumented user 126077 29/50 current_auc = 0.6171845032604527
User 126077 AUC after training: 0.61795166858458
User 126077 improves AUC. Keeping the model.
Training on augumented user 24342 30/50 current_auc = 0.61795166858458
User 24342 AUC after training: 0.616800920598389
User 24342 does not improve AUC. Reverting changes.
Training on augumented user 113213 31/50 current_auc = 0.61795166858458
User 113213 AUC after training: 0.6160337552742616
User 113213 does not improve AUC. Reverting changes.
Training on augumented user 105642 32/50 current_auc = 0.61795166858458
User 105642 AUC after training: 0.61795166858458
User 105642 does not improve AUC. Reverting changes.
Training on augumented user 87674 33/50 current_auc = 0.61795166858458
User 87674 AUC after training: 0.6175680859225163
User 87674 does not improve AUC. Reverting changes.
Training on augumented user 4023 34/50 current_auc = 0.61795166858458
User 4023 AUC after training: 0.6191024165707709
User 4023 improves AUC. Keeping the model.
Training on augumented user 129535 35/50 current_auc = 0.6191024165707709
User 129535 AUC after training: 0.619102416570771
User 129535 improves AUC. Keeping the model.
Training on augumented user 42930 36/50 current_auc = 0.619102416570771
User 42930 AUC after training: 0.6194859992328348
User 42930 improves AUC. Keeping the model.
Training on augumented user 134920 37/50 current_auc = 0.6194859992328348
User 134920 AUC after training: 0.6194859992328346
User 134920 does not improve AUC. Reverting changes.
Training on augumented user 74325 38/50 current_auc = 0.6194859992328348
User 74325 AUC after training: 0.6196777905638665
User 74325 improves AUC. Keeping the model.
Training on augumented user 132434 39/50 current_auc = 0.6196777905638665
User 132434 AUC after training: 0.6200613732259302
User 132434 improves AUC. Keeping the model.
Training on augumented user 71109 40/50 current_auc = 0.6200613732259302
User 71109 AUC after training: 0.6187188339087073
User 71109 does not improve AUC. Reverting changes.
Training on augumented user 45909 41/50 current_auc = 0.6200613732259302
User 45909 AUC after training: 0.6208285385500576
User 45909 improves AUC. Keeping the model.
Training on augumented user 38895 42/50 current_auc = 0.6208285385500576
User 38895 AUC after training: 0.6200613732259302
User 38895 does not improve AUC. Reverting changes.
Training on augumented user 9509 43/50 current_auc = 0.6208285385500576
User 9509 AUC after training: 0.6198695818948984
User 9509 does not improve AUC. Reverting changes.
Training on augumented user 26991 44/50 current_auc = 0.6208285385500576
User 26991 AUC after training: 0.6192942079018029
User 26991 does not improve AUC. Reverting changes.
Training on augumented user 124045 45/50 current_auc = 0.6208285385500576
User 124045 AUC after training: 0.6187188339087073
User 124045 does not improve AUC. Reverting changes.
Training on augumented user 67660 46/50 current_auc = 0.6208285385500576
User 67660 AUC after training: 0.6200613732259302
User 67660 does not improve AUC. Reverting changes.
Training on augumented user 86618 47/50 current_auc = 0.6208285385500576
User 86618 AUC after training: 0.6214039125431531
User 86618 improves AUC. Keeping the model.
Training on augumented user 25071 48/50 current_auc = 0.6214039125431531
User 25071 AUC after training: 0.6187188339087074
User 25071 does not improve AUC. Reverting changes.
Training on augumented user 135993 49/50 current_auc = 0.6214039125431531
User 135993 AUC after training: 0.6214039125431531
User 135993 does not improve AUC. Reverting changes.
[2024-12-02 18:37:27.027793] start test user 2657 108/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:37:27.769768] start test user 2657 108/568 recall augumented users by random, augumented_users = [78147, 114281, 64070, 94530, 122707, 62135, 107751, 2042, 14279, 106311, 134148, 132167, 12336, 35599, 63753, 15387, 118809, 40638, 120518, 45840, 135458, 15718, 66415, 136515, 65715, 79871, 43291, 87823, 98074, 95004, 112942, 77455, 5267, 107244, 6, 108938, 114421, 14342, 89651, 88826, 96512, 122919, 126099, 13780, 73359, 77107, 6994, 59617, 122633, 68911]
[2024-12-02 18:37:27.791159] user = 2657 Cloud 108/568
[2024-12-02 18:37:27.822939] user = 2657 Local 108/568
[2024-12-02 18:37:28.059015] user = 2657 Local+ 108/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:37:30.621717] user = 2657 MPDA- 108/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6230808112718772
Training on augumented user 78147 0/50 current_auc = 0.6230808112718772
User 78147 AUC after training: 0.6233335439438934
User 78147 improves AUC. Keeping the model.
Training on augumented user 114281 1/50 current_auc = 0.6233335439438934
User 114281 AUC after training: 0.622954444935869
User 114281 does not improve AUC. Reverting changes.
Training on augumented user 64070 2/50 current_auc = 0.6233335439438934
User 64070 AUC after training: 0.6231439944398812
User 64070 does not improve AUC. Reverting changes.
Training on augumented user 94530 3/50 current_auc = 0.6233335439438934
User 94530 AUC after training: 0.6230808112718773
User 94530 does not improve AUC. Reverting changes.
Training on augumented user 122707 4/50 current_auc = 0.6233335439438934
User 122707 AUC after training: 0.6235862766159095
User 122707 improves AUC. Keeping the model.
Training on augumented user 62135 5/50 current_auc = 0.6235862766159095
User 62135 AUC after training: 0.6227964870158591
User 62135 does not improve AUC. Reverting changes.
Training on augumented user 107751 6/50 current_auc = 0.6235862766159095
User 107751 AUC after training: 0.622670120679851
User 107751 does not improve AUC. Reverting changes.
Training on augumented user 2042 7/50 current_auc = 0.6235862766159095
User 2042 AUC after training: 0.6239021924559297
User 2042 improves AUC. Keeping the model.
Training on augumented user 14279 8/50 current_auc = 0.6239021924559297
User 14279 AUC after training: 0.6244708409679662
User 14279 improves AUC. Keeping the model.
Training on augumented user 106311 9/50 current_auc = 0.6244708409679662
User 106311 AUC after training: 0.6239653756239338
User 106311 does not improve AUC. Reverting changes.
Training on augumented user 134148 10/50 current_auc = 0.6244708409679662
User 134148 AUC after training: 0.6236494597839135
User 134148 does not improve AUC. Reverting changes.
Training on augumented user 132167 11/50 current_auc = 0.6244708409679662
User 132167 AUC after training: 0.6239337840399318
User 132167 does not improve AUC. Reverting changes.
Training on augumented user 12336 12/50 current_auc = 0.6244708409679662
User 12336 AUC after training: 0.6239653756239338
User 12336 does not improve AUC. Reverting changes.
Training on augumented user 35599 13/50 current_auc = 0.6244708409679662
User 35599 AUC after training: 0.6239653756239338
User 35599 does not improve AUC. Reverting changes.
Training on augumented user 63753 14/50 current_auc = 0.6244708409679662
User 63753 AUC after training: 0.6239021924559298
User 63753 does not improve AUC. Reverting changes.
Training on augumented user 15387 15/50 current_auc = 0.6244708409679662
User 15387 AUC after training: 0.6244708409679661
User 15387 does not improve AUC. Reverting changes.
Training on augumented user 118809 16/50 current_auc = 0.6244708409679662
User 118809 AUC after training: 0.6237758261199216
User 118809 does not improve AUC. Reverting changes.
Training on augumented user 40638 17/50 current_auc = 0.6244708409679662
User 40638 AUC after training: 0.6247235736399823
User 40638 improves AUC. Keeping the model.
Training on augumented user 120518 18/50 current_auc = 0.6247235736399823
User 120518 AUC after training: 0.6230808112718772
User 120518 does not improve AUC. Reverting changes.
Training on augumented user 45840 19/50 current_auc = 0.6247235736399823
User 45840 AUC after training: 0.6231439944398811
User 45840 does not improve AUC. Reverting changes.
Training on augumented user 135458 20/50 current_auc = 0.6247235736399823
User 135458 AUC after training: 0.6248183483919885
User 135458 improves AUC. Keeping the model.
Training on augumented user 15718 21/50 current_auc = 0.6248183483919885
User 15718 AUC after training: 0.6249447147279965
User 15718 improves AUC. Keeping the model.
Training on augumented user 66415 22/50 current_auc = 0.6249447147279965
User 66415 AUC after training: 0.6240601503759399
User 66415 does not improve AUC. Reverting changes.
Training on augumented user 136515 23/50 current_auc = 0.6249447147279965
User 136515 AUC after training: 0.6237442345359197
User 136515 does not improve AUC. Reverting changes.
Training on augumented user 65715 24/50 current_auc = 0.6249447147279965
User 65715 AUC after training: 0.6235546850319076
User 65715 does not improve AUC. Reverting changes.
Training on augumented user 79871 25/50 current_auc = 0.6249447147279965
User 79871 AUC after training: 0.6269981676881279
User 79871 improves AUC. Keeping the model.
Training on augumented user 43291 26/50 current_auc = 0.6269981676881279
User 43291 AUC after training: 0.6261136033360714
User 43291 does not improve AUC. Reverting changes.
Training on augumented user 87823 27/50 current_auc = 0.6269981676881279
User 87823 AUC after training: 0.6273772666961521
User 87823 improves AUC. Keeping the model.
Training on augumented user 98074 28/50 current_auc = 0.6273772666961521
User 98074 AUC after training: 0.6275352246161623
User 98074 improves AUC. Keeping the model.
Training on augumented user 95004 29/50 current_auc = 0.6275352246161623
User 95004 AUC after training: 0.6275352246161623
User 95004 does not improve AUC. Reverting changes.
Training on augumented user 112942 30/50 current_auc = 0.6275352246161623
User 112942 AUC after training: 0.6273772666961521
User 112942 does not improve AUC. Reverting changes.
Training on augumented user 77455 31/50 current_auc = 0.6275352246161623
User 77455 AUC after training: 0.6272509003601441
User 77455 does not improve AUC. Reverting changes.
Training on augumented user 5267 32/50 current_auc = 0.6275352246161623
User 5267 AUC after training: 0.6277247741201744
User 5267 improves AUC. Keeping the model.
Training on augumented user 107244 33/50 current_auc = 0.6277247741201744
User 107244 AUC after training: 0.627092942440134
User 107244 does not improve AUC. Reverting changes.
Training on augumented user 6 34/50 current_auc = 0.6277247741201744
User 6 AUC after training: 0.6272193087761421
User 6 does not improve AUC. Reverting changes.
Training on augumented user 108938 35/50 current_auc = 0.6277247741201744
User 108938 AUC after training: 0.626998167688128
User 108938 does not improve AUC. Reverting changes.
Training on augumented user 114421 36/50 current_auc = 0.6277247741201744
User 114421 AUC after training: 0.6280090983761926
User 114421 improves AUC. Keeping the model.
Training on augumented user 14342 37/50 current_auc = 0.6280090983761926
User 14342 AUC after training: 0.6271877171921401
User 14342 does not improve AUC. Reverting changes.
Training on augumented user 89651 38/50 current_auc = 0.6280090983761926
User 89651 AUC after training: 0.6275668162001643
User 89651 does not improve AUC. Reverting changes.
Training on augumented user 88826 39/50 current_auc = 0.6280090983761926
User 88826 AUC after training: 0.6271877171921401
User 88826 does not improve AUC. Reverting changes.
Training on augumented user 96512 40/50 current_auc = 0.6280090983761926
User 96512 AUC after training: 0.6277879572881784
User 96512 does not improve AUC. Reverting changes.
Training on augumented user 122919 41/50 current_auc = 0.6280090983761926
User 122919 AUC after training: 0.6279143236241864
User 122919 does not improve AUC. Reverting changes.
Training on augumented user 126099 42/50 current_auc = 0.6280090983761926
User 126099 AUC after training: 0.6269349845201239
User 126099 does not improve AUC. Reverting changes.
Training on augumented user 13780 43/50 current_auc = 0.6280090983761926
User 13780 AUC after training: 0.6268718013521198
User 13780 does not improve AUC. Reverting changes.
Training on augumented user 73359 44/50 current_auc = 0.6280090983761926
User 73359 AUC after training: 0.6277247741201744
User 73359 does not improve AUC. Reverting changes.
Training on augumented user 77107 45/50 current_auc = 0.6280090983761926
User 77107 AUC after training: 0.6278511404561824
User 77107 does not improve AUC. Reverting changes.
Training on augumented user 6994 46/50 current_auc = 0.6280090983761926
User 6994 AUC after training: 0.6281038731281988
User 6994 improves AUC. Keeping the model.
Training on augumented user 59617 47/50 current_auc = 0.6281038731281988
User 59617 AUC after training: 0.6270929424401339
User 59617 does not improve AUC. Reverting changes.
Training on augumented user 122633 48/50 current_auc = 0.6281038731281988
User 122633 AUC after training: 0.6278511404561824
User 122633 does not improve AUC. Reverting changes.
Training on augumented user 68911 49/50 current_auc = 0.6281038731281988
User 68911 AUC after training: 0.6282618310482088
User 68911 improves AUC. Keeping the model.
[2024-12-02 18:38:01.441886] start test user 2669 109/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:38:01.995144] start test user 2669 109/568 recall augumented users by random, augumented_users = [80887, 29594, 21289, 33795, 39099, 132646, 20555, 119594, 65020, 52710, 38300, 131032, 130645, 51970, 73858, 15545, 33297, 25261, 83563, 35300, 133366, 59345, 39123, 93935, 89792, 57110, 121396, 129206, 128870, 86188, 26174, 136591, 34230, 7575, 46766, 124581, 4238, 30571, 41260, 121471, 3583, 61729, 78135, 11895, 65373, 6560, 101507, 14310, 118893, 66722]
[2024-12-02 18:38:02.011583] user = 2669 Cloud 109/568
[2024-12-02 18:38:02.045567] user = 2669 Local 109/568
[2024-12-02 18:38:02.240990] user = 2669 Local+ 109/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:38:04.662377] user = 2669 MPDA- 109/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6704497688104246
Training on augumented user 80887 0/50 current_auc = 0.6704497688104246
User 80887 AUC after training: 0.6705548549810845
User 80887 improves AUC. Keeping the model.
Training on augumented user 29594 1/50 current_auc = 0.6705548549810845
User 29594 AUC after training: 0.6703972257250946
User 29594 does not improve AUC. Reverting changes.
Training on augumented user 21289 2/50 current_auc = 0.6705548549810845
User 21289 AUC after training: 0.671658259773014
User 21289 improves AUC. Keeping the model.
Training on augumented user 33795 3/50 current_auc = 0.671658259773014
User 33795 AUC after training: 0.671553173602354
User 33795 does not improve AUC. Reverting changes.
Training on augumented user 39099 4/50 current_auc = 0.671658259773014
User 39099 AUC after training: 0.6711853720050441
User 39099 does not improve AUC. Reverting changes.
Training on augumented user 132646 5/50 current_auc = 0.671658259773014
User 132646 AUC after training: 0.6713430012610341
User 132646 does not improve AUC. Reverting changes.
Training on augumented user 20555 6/50 current_auc = 0.671658259773014
User 20555 AUC after training: 0.6714480874316939
User 20555 does not improve AUC. Reverting changes.
Training on augumented user 119594 7/50 current_auc = 0.671658259773014
User 119594 AUC after training: 0.671658259773014
User 119594 does not improve AUC. Reverting changes.
Training on augumented user 65020 8/50 current_auc = 0.671658259773014
User 65020 AUC after training: 0.6721836906263136
User 65020 improves AUC. Keeping the model.
Training on augumented user 52710 9/50 current_auc = 0.6721836906263136
User 52710 AUC after training: 0.6718158890290038
User 52710 does not improve AUC. Reverting changes.
Training on augumented user 38300 10/50 current_auc = 0.6721836906263136
User 38300 AUC after training: 0.6726565783942833
User 38300 improves AUC. Keeping the model.
Training on augumented user 131032 11/50 current_auc = 0.6726565783942833
User 131032 AUC after training: 0.6720260613703236
User 131032 does not improve AUC. Reverting changes.
Training on augumented user 130645 12/50 current_auc = 0.6726565783942833
User 130645 AUC after training: 0.6727091214796133
User 130645 improves AUC. Keeping the model.
Training on augumented user 51970 13/50 current_auc = 0.6727091214796133
User 51970 AUC after training: 0.6723413198823035
User 51970 does not improve AUC. Reverting changes.
Training on augumented user 73858 14/50 current_auc = 0.6727091214796133
User 73858 AUC after training: 0.6726565783942833
User 73858 does not improve AUC. Reverting changes.
Training on augumented user 15545 15/50 current_auc = 0.6727091214796133
User 15545 AUC after training: 0.6725514922236233
User 15545 does not improve AUC. Reverting changes.
Training on augumented user 33297 16/50 current_auc = 0.6727091214796133
User 33297 AUC after training: 0.6727091214796133
User 33297 does not improve AUC. Reverting changes.
Training on augumented user 25261 17/50 current_auc = 0.6727091214796133
User 25261 AUC after training: 0.6727616645649432
User 25261 improves AUC. Keeping the model.
Training on augumented user 83563 18/50 current_auc = 0.6727616645649432
User 83563 AUC after training: 0.6724989491382934
User 83563 does not improve AUC. Reverting changes.
Training on augumented user 35300 19/50 current_auc = 0.6727616645649432
User 35300 AUC after training: 0.6727091214796134
User 35300 does not improve AUC. Reverting changes.
Training on augumented user 133366 20/50 current_auc = 0.6727616645649432
User 133366 AUC after training: 0.6729718369062632
User 133366 improves AUC. Keeping the model.
Training on augumented user 59345 21/50 current_auc = 0.6729718369062632
User 59345 AUC after training: 0.6727616645649432
User 59345 does not improve AUC. Reverting changes.
Training on augumented user 39123 22/50 current_auc = 0.6729718369062632
User 39123 AUC after training: 0.6724989491382934
User 39123 does not improve AUC. Reverting changes.
Training on augumented user 93935 23/50 current_auc = 0.6729718369062632
User 93935 AUC after training: 0.6727616645649434
User 93935 does not improve AUC. Reverting changes.
Training on augumented user 89792 24/50 current_auc = 0.6729718369062632
User 89792 AUC after training: 0.6722362337116435
User 89792 does not improve AUC. Reverting changes.
Training on augumented user 57110 25/50 current_auc = 0.6729718369062632
User 57110 AUC after training: 0.6728142076502732
User 57110 does not improve AUC. Reverting changes.
Training on augumented user 121396 26/50 current_auc = 0.6729718369062632
User 121396 AUC after training: 0.6729718369062632
User 121396 does not improve AUC. Reverting changes.
Training on augumented user 129206 27/50 current_auc = 0.6729718369062632
User 129206 AUC after training: 0.6738125262715426
User 129206 improves AUC. Keeping the model.
Training on augumented user 128870 28/50 current_auc = 0.6738125262715426
User 128870 AUC after training: 0.674863387978142
User 128870 improves AUC. Keeping the model.
Training on augumented user 86188 29/50 current_auc = 0.674863387978142
User 86188 AUC after training: 0.674863387978142
User 86188 does not improve AUC. Reverting changes.
Training on augumented user 26174 30/50 current_auc = 0.674863387978142
User 26174 AUC after training: 0.6762295081967213
User 26174 improves AUC. Keeping the model.
Training on augumented user 136591 31/50 current_auc = 0.6762295081967213
User 136591 AUC after training: 0.6760718789407313
User 136591 does not improve AUC. Reverting changes.
Training on augumented user 34230 32/50 current_auc = 0.6762295081967213
User 34230 AUC after training: 0.6759667927700715
User 34230 does not improve AUC. Reverting changes.
Training on augumented user 7575 33/50 current_auc = 0.6762295081967213
User 7575 AUC after training: 0.6743379571248423
User 7575 does not improve AUC. Reverting changes.
Training on augumented user 46766 34/50 current_auc = 0.6762295081967213
User 46766 AUC after training: 0.6754939050021017
User 46766 does not improve AUC. Reverting changes.
Training on augumented user 124581 35/50 current_auc = 0.6762295081967213
User 124581 AUC after training: 0.6762820512820513
User 124581 improves AUC. Keeping the model.
Training on augumented user 4238 36/50 current_auc = 0.6762820512820513
User 4238 AUC after training: 0.6740752416981926
User 4238 does not improve AUC. Reverting changes.
Training on augumented user 30571 37/50 current_auc = 0.6762820512820513
User 30571 AUC after training: 0.6768074821353509
User 30571 improves AUC. Keeping the model.
Training on augumented user 41260 38/50 current_auc = 0.6768074821353509
User 41260 AUC after training: 0.6764922236233711
User 41260 does not improve AUC. Reverting changes.
Training on augumented user 121471 39/50 current_auc = 0.6768074821353509
User 121471 AUC after training: 0.6765447667087011
User 121471 does not improve AUC. Reverting changes.
Training on augumented user 3583 40/50 current_auc = 0.6768074821353509
User 3583 AUC after training: 0.6739701555275326
User 3583 does not improve AUC. Reverting changes.
Training on augumented user 61729 41/50 current_auc = 0.6768074821353509
User 61729 AUC after training: 0.6723413198823035
User 61729 does not improve AUC. Reverting changes.
Training on augumented user 78135 42/50 current_auc = 0.6768074821353509
User 78135 AUC after training: 0.6733921815889029
User 78135 does not improve AUC. Reverting changes.
Training on augumented user 11895 43/50 current_auc = 0.6768074821353509
User 11895 AUC after training: 0.6765447667087012
User 11895 does not improve AUC. Reverting changes.
Training on augumented user 65373 44/50 current_auc = 0.6768074821353509
User 65373 AUC after training: 0.6768600252206809
User 65373 improves AUC. Keeping the model.
Training on augumented user 6560 45/50 current_auc = 0.6768600252206809
User 6560 AUC after training: 0.6763345943673812
User 6560 does not improve AUC. Reverting changes.
Training on augumented user 101507 46/50 current_auc = 0.6768600252206809
User 101507 AUC after training: 0.6770176544766707
User 101507 improves AUC. Keeping the model.
Training on augumented user 14310 47/50 current_auc = 0.6770176544766707
User 14310 AUC after training: 0.6763345943673812
User 14310 does not improve AUC. Reverting changes.
Training on augumented user 118893 48/50 current_auc = 0.6770176544766707
User 118893 AUC after training: 0.6763345943673813
User 118893 does not improve AUC. Reverting changes.
Training on augumented user 66722 49/50 current_auc = 0.6770176544766707
User 66722 AUC after training: 0.6768074821353509
User 66722 does not improve AUC. Reverting changes.
[2024-12-02 18:38:31.656781] start test user 2681 110/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:38:32.174832] start test user 2681 110/568 recall augumented users by random, augumented_users = [6877, 74577, 130355, 43615, 11258, 47408, 132493, 52859, 31910, 5620, 20432, 120575, 48988, 108406, 39034, 61268, 136723, 8660, 122481, 56483, 127628, 100929, 54916, 35104, 4974, 121978, 66552, 41587, 45886, 26818, 2360, 51493, 131510, 124077, 85665, 50733, 54602, 18390, 43486, 66788, 58239, 37142, 41256, 33503, 50614, 35594, 55620, 83113, 50372, 61029]
[2024-12-02 18:38:32.217174] user = 2681 Cloud 110/568
[2024-12-02 18:38:32.253596] user = 2681 Local 110/568
[2024-12-02 18:38:32.287166] user = 2681 Local+ 110/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:38:35.074762] user = 2681 MPDA- 110/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8208333333333333
Training on augumented user 6877 0/50 current_auc = 0.8208333333333333
User 6877 AUC after training: 0.8208333333333333
User 6877 does not improve AUC. Reverting changes.
Training on augumented user 74577 1/50 current_auc = 0.8208333333333333
User 74577 AUC after training: 0.8208333333333333
User 74577 does not improve AUC. Reverting changes.
Training on augumented user 130355 2/50 current_auc = 0.8208333333333333
User 130355 AUC after training: 0.8208333333333333
User 130355 does not improve AUC. Reverting changes.
Training on augumented user 43615 3/50 current_auc = 0.8208333333333333
User 43615 AUC after training: 0.8208333333333333
User 43615 does not improve AUC. Reverting changes.
Training on augumented user 11258 4/50 current_auc = 0.8208333333333333
User 11258 AUC after training: 0.8208333333333333
User 11258 does not improve AUC. Reverting changes.
Training on augumented user 47408 5/50 current_auc = 0.8208333333333333
User 47408 AUC after training: 0.8208333333333333
User 47408 does not improve AUC. Reverting changes.
Training on augumented user 132493 6/50 current_auc = 0.8208333333333333
User 132493 AUC after training: 0.8208333333333333
User 132493 does not improve AUC. Reverting changes.
Training on augumented user 52859 7/50 current_auc = 0.8208333333333333
User 52859 AUC after training: 0.8208333333333333
User 52859 does not improve AUC. Reverting changes.
Training on augumented user 31910 8/50 current_auc = 0.8208333333333333
User 31910 AUC after training: 0.8208333333333333
User 31910 does not improve AUC. Reverting changes.
Training on augumented user 5620 9/50 current_auc = 0.8208333333333333
User 5620 AUC after training: 0.8208333333333333
User 5620 does not improve AUC. Reverting changes.
Training on augumented user 20432 10/50 current_auc = 0.8208333333333333
User 20432 AUC after training: 0.8208333333333333
User 20432 does not improve AUC. Reverting changes.
Training on augumented user 120575 11/50 current_auc = 0.8208333333333333
User 120575 AUC after training: 0.8166666666666667
User 120575 does not improve AUC. Reverting changes.
Training on augumented user 48988 12/50 current_auc = 0.8208333333333333
User 48988 AUC after training: 0.8208333333333333
User 48988 does not improve AUC. Reverting changes.
Training on augumented user 108406 13/50 current_auc = 0.8208333333333333
User 108406 AUC after training: 0.8208333333333333
User 108406 does not improve AUC. Reverting changes.
Training on augumented user 39034 14/50 current_auc = 0.8208333333333333
User 39034 AUC after training: 0.8208333333333333
User 39034 does not improve AUC. Reverting changes.
Training on augumented user 61268 15/50 current_auc = 0.8208333333333333
User 61268 AUC after training: 0.8208333333333333
User 61268 does not improve AUC. Reverting changes.
Training on augumented user 136723 16/50 current_auc = 0.8208333333333333
User 136723 AUC after training: 0.8208333333333333
User 136723 does not improve AUC. Reverting changes.
Training on augumented user 8660 17/50 current_auc = 0.8208333333333333
User 8660 AUC after training: 0.8166666666666667
User 8660 does not improve AUC. Reverting changes.
Training on augumented user 122481 18/50 current_auc = 0.8208333333333333
User 122481 AUC after training: 0.8208333333333333
User 122481 does not improve AUC. Reverting changes.
Training on augumented user 56483 19/50 current_auc = 0.8208333333333333
User 56483 AUC after training: 0.8208333333333333
User 56483 does not improve AUC. Reverting changes.
Training on augumented user 127628 20/50 current_auc = 0.8208333333333333
User 127628 AUC after training: 0.8208333333333333
User 127628 does not improve AUC. Reverting changes.
Training on augumented user 100929 21/50 current_auc = 0.8208333333333333
User 100929 AUC after training: 0.8208333333333333
User 100929 does not improve AUC. Reverting changes.
Training on augumented user 54916 22/50 current_auc = 0.8208333333333333
User 54916 AUC after training: 0.8208333333333333
User 54916 does not improve AUC. Reverting changes.
Training on augumented user 35104 23/50 current_auc = 0.8208333333333333
User 35104 AUC after training: 0.8208333333333333
User 35104 does not improve AUC. Reverting changes.
Training on augumented user 4974 24/50 current_auc = 0.8208333333333333
User 4974 AUC after training: 0.8208333333333333
User 4974 does not improve AUC. Reverting changes.
Training on augumented user 121978 25/50 current_auc = 0.8208333333333333
User 121978 AUC after training: 0.8208333333333333
User 121978 does not improve AUC. Reverting changes.
Training on augumented user 66552 26/50 current_auc = 0.8208333333333333
User 66552 AUC after training: 0.8208333333333333
User 66552 does not improve AUC. Reverting changes.
Training on augumented user 41587 27/50 current_auc = 0.8208333333333333
User 41587 AUC after training: 0.8208333333333333
User 41587 does not improve AUC. Reverting changes.
Training on augumented user 45886 28/50 current_auc = 0.8208333333333333
User 45886 AUC after training: 0.8208333333333333
User 45886 does not improve AUC. Reverting changes.
Training on augumented user 26818 29/50 current_auc = 0.8208333333333333
User 26818 AUC after training: 0.8208333333333333
User 26818 does not improve AUC. Reverting changes.
Training on augumented user 2360 30/50 current_auc = 0.8208333333333333
User 2360 AUC after training: 0.8166666666666667
User 2360 does not improve AUC. Reverting changes.
Training on augumented user 51493 31/50 current_auc = 0.8208333333333333
User 51493 AUC after training: 0.8208333333333333
User 51493 does not improve AUC. Reverting changes.
Training on augumented user 131510 32/50 current_auc = 0.8208333333333333
User 131510 AUC after training: 0.8208333333333333
User 131510 does not improve AUC. Reverting changes.
Training on augumented user 124077 33/50 current_auc = 0.8208333333333333
User 124077 AUC after training: 0.8208333333333333
User 124077 does not improve AUC. Reverting changes.
Training on augumented user 85665 34/50 current_auc = 0.8208333333333333
User 85665 AUC after training: 0.8208333333333333
User 85665 does not improve AUC. Reverting changes.
Training on augumented user 50733 35/50 current_auc = 0.8208333333333333
User 50733 AUC after training: 0.8208333333333333
User 50733 does not improve AUC. Reverting changes.
Training on augumented user 54602 36/50 current_auc = 0.8208333333333333
User 54602 AUC after training: 0.8208333333333333
User 54602 does not improve AUC. Reverting changes.
Training on augumented user 18390 37/50 current_auc = 0.8208333333333333
User 18390 AUC after training: 0.8166666666666667
User 18390 does not improve AUC. Reverting changes.
Training on augumented user 43486 38/50 current_auc = 0.8208333333333333
User 43486 AUC after training: 0.8208333333333333
User 43486 does not improve AUC. Reverting changes.
Training on augumented user 66788 39/50 current_auc = 0.8208333333333333
User 66788 AUC after training: 0.8208333333333333
User 66788 does not improve AUC. Reverting changes.
Training on augumented user 58239 40/50 current_auc = 0.8208333333333333
User 58239 AUC after training: 0.8208333333333333
User 58239 does not improve AUC. Reverting changes.
Training on augumented user 37142 41/50 current_auc = 0.8208333333333333
User 37142 AUC after training: 0.8208333333333333
User 37142 does not improve AUC. Reverting changes.
Training on augumented user 41256 42/50 current_auc = 0.8208333333333333
User 41256 AUC after training: 0.8208333333333333
User 41256 does not improve AUC. Reverting changes.
Training on augumented user 33503 43/50 current_auc = 0.8208333333333333
User 33503 AUC after training: 0.8208333333333333
User 33503 does not improve AUC. Reverting changes.
Training on augumented user 50614 44/50 current_auc = 0.8208333333333333
User 50614 AUC after training: 0.8208333333333333
User 50614 does not improve AUC. Reverting changes.
Training on augumented user 35594 45/50 current_auc = 0.8208333333333333
User 35594 AUC after training: 0.8208333333333333
User 35594 does not improve AUC. Reverting changes.
Training on augumented user 55620 46/50 current_auc = 0.8208333333333333
User 55620 AUC after training: 0.8208333333333333
User 55620 does not improve AUC. Reverting changes.
Training on augumented user 83113 47/50 current_auc = 0.8208333333333333
User 83113 AUC after training: 0.8208333333333333
User 83113 does not improve AUC. Reverting changes.
Training on augumented user 50372 48/50 current_auc = 0.8208333333333333
User 50372 AUC after training: 0.8208333333333333
User 50372 does not improve AUC. Reverting changes.
Training on augumented user 61029 49/50 current_auc = 0.8208333333333333
User 61029 AUC after training: 0.8208333333333333
User 61029 does not improve AUC. Reverting changes.
[2024-12-02 18:39:01.493358] start test user 2728 111/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:39:01.902151] start test user 2728 111/568 recall augumented users by random, augumented_users = [48622, 33624, 93845, 79155, 9018, 28423, 124153, 120321, 75840, 55178, 129491, 12982, 13690, 132543, 11980, 42559, 49186, 109003, 68611, 100820, 18113, 2150, 58851, 108165, 32248, 24431, 23968, 107532, 48814, 8616, 137810, 99887, 133538, 33829, 30677, 91049, 116846, 10054, 61206, 82787, 426, 136461, 106000, 85675, 100048, 38366, 100567, 72209, 12115, 69489]
[2024-12-02 18:39:01.916819] user = 2728 Cloud 111/568
[2024-12-02 18:39:01.927044] user = 2728 Local 111/568
[2024-12-02 18:39:01.970250] user = 2728 Local+ 111/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:39:04.455628] user = 2728 MPDA- 111/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4155844155844156
Training on augumented user 48622 0/50 current_auc = 0.4155844155844156
User 48622 AUC after training: 0.4155844155844156
User 48622 does not improve AUC. Reverting changes.
Training on augumented user 33624 1/50 current_auc = 0.4155844155844156
User 33624 AUC after training: 0.4155844155844156
User 33624 does not improve AUC. Reverting changes.
Training on augumented user 93845 2/50 current_auc = 0.4155844155844156
User 93845 AUC after training: 0.4155844155844156
User 93845 does not improve AUC. Reverting changes.
Training on augumented user 79155 3/50 current_auc = 0.4155844155844156
User 79155 AUC after training: 0.4285714285714286
User 79155 improves AUC. Keeping the model.
Training on augumented user 9018 4/50 current_auc = 0.4285714285714286
User 9018 AUC after training: 0.4155844155844156
User 9018 does not improve AUC. Reverting changes.
Training on augumented user 28423 5/50 current_auc = 0.4285714285714286
User 28423 AUC after training: 0.4285714285714286
User 28423 does not improve AUC. Reverting changes.
Training on augumented user 124153 6/50 current_auc = 0.4285714285714286
User 124153 AUC after training: 0.4155844155844156
User 124153 does not improve AUC. Reverting changes.
Training on augumented user 120321 7/50 current_auc = 0.4285714285714286
User 120321 AUC after training: 0.4285714285714286
User 120321 does not improve AUC. Reverting changes.
Training on augumented user 75840 8/50 current_auc = 0.4285714285714286
User 75840 AUC after training: 0.4155844155844156
User 75840 does not improve AUC. Reverting changes.
Training on augumented user 55178 9/50 current_auc = 0.4285714285714286
User 55178 AUC after training: 0.4285714285714286
User 55178 does not improve AUC. Reverting changes.
Training on augumented user 129491 10/50 current_auc = 0.4285714285714286
User 129491 AUC after training: 0.4285714285714286
User 129491 does not improve AUC. Reverting changes.
Training on augumented user 12982 11/50 current_auc = 0.4285714285714286
User 12982 AUC after training: 0.4155844155844156
User 12982 does not improve AUC. Reverting changes.
Training on augumented user 13690 12/50 current_auc = 0.4285714285714286
User 13690 AUC after training: 0.4415584415584416
User 13690 improves AUC. Keeping the model.
Training on augumented user 132543 13/50 current_auc = 0.4415584415584416
User 132543 AUC after training: 0.4415584415584416
User 132543 does not improve AUC. Reverting changes.
Training on augumented user 11980 14/50 current_auc = 0.4415584415584416
User 11980 AUC after training: 0.4415584415584416
User 11980 does not improve AUC. Reverting changes.
Training on augumented user 42559 15/50 current_auc = 0.4415584415584416
User 42559 AUC after training: 0.4415584415584416
User 42559 does not improve AUC. Reverting changes.
Training on augumented user 49186 16/50 current_auc = 0.4415584415584416
User 49186 AUC after training: 0.4415584415584416
User 49186 does not improve AUC. Reverting changes.
Training on augumented user 109003 17/50 current_auc = 0.4415584415584416
User 109003 AUC after training: 0.4415584415584416
User 109003 does not improve AUC. Reverting changes.
Training on augumented user 68611 18/50 current_auc = 0.4415584415584416
User 68611 AUC after training: 0.4415584415584416
User 68611 does not improve AUC. Reverting changes.
Training on augumented user 100820 19/50 current_auc = 0.4415584415584416
User 100820 AUC after training: 0.4415584415584416
User 100820 does not improve AUC. Reverting changes.
Training on augumented user 18113 20/50 current_auc = 0.4415584415584416
User 18113 AUC after training: 0.4415584415584416
User 18113 does not improve AUC. Reverting changes.
Training on augumented user 2150 21/50 current_auc = 0.4415584415584416
User 2150 AUC after training: 0.4415584415584416
User 2150 does not improve AUC. Reverting changes.
Training on augumented user 58851 22/50 current_auc = 0.4415584415584416
User 58851 AUC after training: 0.4415584415584416
User 58851 does not improve AUC. Reverting changes.
Training on augumented user 108165 23/50 current_auc = 0.4415584415584416
User 108165 AUC after training: 0.4415584415584416
User 108165 does not improve AUC. Reverting changes.
Training on augumented user 32248 24/50 current_auc = 0.4415584415584416
User 32248 AUC after training: 0.4415584415584416
User 32248 does not improve AUC. Reverting changes.
Training on augumented user 24431 25/50 current_auc = 0.4415584415584416
User 24431 AUC after training: 0.4415584415584416
User 24431 does not improve AUC. Reverting changes.
Training on augumented user 23968 26/50 current_auc = 0.4415584415584416
User 23968 AUC after training: 0.4415584415584416
User 23968 does not improve AUC. Reverting changes.
Training on augumented user 107532 27/50 current_auc = 0.4415584415584416
User 107532 AUC after training: 0.4415584415584416
User 107532 does not improve AUC. Reverting changes.
Training on augumented user 48814 28/50 current_auc = 0.4415584415584416
User 48814 AUC after training: 0.4415584415584416
User 48814 does not improve AUC. Reverting changes.
Training on augumented user 8616 29/50 current_auc = 0.4415584415584416
User 8616 AUC after training: 0.4415584415584416
User 8616 does not improve AUC. Reverting changes.
Training on augumented user 137810 30/50 current_auc = 0.4415584415584416
User 137810 AUC after training: 0.4415584415584416
User 137810 does not improve AUC. Reverting changes.
Training on augumented user 99887 31/50 current_auc = 0.4415584415584416
User 99887 AUC after training: 0.4415584415584416
User 99887 does not improve AUC. Reverting changes.
Training on augumented user 133538 32/50 current_auc = 0.4415584415584416
User 133538 AUC after training: 0.4415584415584416
User 133538 does not improve AUC. Reverting changes.
Training on augumented user 33829 33/50 current_auc = 0.4415584415584416
User 33829 AUC after training: 0.4415584415584416
User 33829 does not improve AUC. Reverting changes.
Training on augumented user 30677 34/50 current_auc = 0.4415584415584416
User 30677 AUC after training: 0.4415584415584416
User 30677 does not improve AUC. Reverting changes.
Training on augumented user 91049 35/50 current_auc = 0.4415584415584416
User 91049 AUC after training: 0.4415584415584416
User 91049 does not improve AUC. Reverting changes.
Training on augumented user 116846 36/50 current_auc = 0.4415584415584416
User 116846 AUC after training: 0.4415584415584416
User 116846 does not improve AUC. Reverting changes.
Training on augumented user 10054 37/50 current_auc = 0.4415584415584416
User 10054 AUC after training: 0.4285714285714286
User 10054 does not improve AUC. Reverting changes.
Training on augumented user 61206 38/50 current_auc = 0.4415584415584416
User 61206 AUC after training: 0.4415584415584416
User 61206 does not improve AUC. Reverting changes.
Training on augumented user 82787 39/50 current_auc = 0.4415584415584416
User 82787 AUC after training: 0.4415584415584416
User 82787 does not improve AUC. Reverting changes.
Training on augumented user 426 40/50 current_auc = 0.4415584415584416
User 426 AUC after training: 0.4415584415584416
User 426 does not improve AUC. Reverting changes.
Training on augumented user 136461 41/50 current_auc = 0.4415584415584416
User 136461 AUC after training: 0.4415584415584416
User 136461 does not improve AUC. Reverting changes.
Training on augumented user 106000 42/50 current_auc = 0.4415584415584416
User 106000 AUC after training: 0.4415584415584416
User 106000 does not improve AUC. Reverting changes.
Training on augumented user 85675 43/50 current_auc = 0.4415584415584416
User 85675 AUC after training: 0.4415584415584416
User 85675 does not improve AUC. Reverting changes.
Training on augumented user 100048 44/50 current_auc = 0.4415584415584416
User 100048 AUC after training: 0.4415584415584416
User 100048 does not improve AUC. Reverting changes.
Training on augumented user 38366 45/50 current_auc = 0.4415584415584416
User 38366 AUC after training: 0.4415584415584416
User 38366 does not improve AUC. Reverting changes.
Training on augumented user 100567 46/50 current_auc = 0.4415584415584416
User 100567 AUC after training: 0.4415584415584416
User 100567 does not improve AUC. Reverting changes.
Training on augumented user 72209 47/50 current_auc = 0.4415584415584416
User 72209 AUC after training: 0.4415584415584416
User 72209 does not improve AUC. Reverting changes.
Training on augumented user 12115 48/50 current_auc = 0.4415584415584416
User 12115 AUC after training: 0.4415584415584416
User 12115 does not improve AUC. Reverting changes.
Training on augumented user 69489 49/50 current_auc = 0.4415584415584416
User 69489 AUC after training: 0.4415584415584416
User 69489 does not improve AUC. Reverting changes.
[2024-12-02 18:39:34.099149] start test user 2756 112/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:39:34.903794] start test user 2756 112/568 recall augumented users by random, augumented_users = [62573, 41533, 65541, 73704, 9203, 121946, 27392, 59030, 121349, 126484, 82826, 51794, 97434, 10659, 18651, 56228, 24464, 94496, 12415, 17558, 108848, 50765, 48733, 89799, 43143, 29594, 20480, 7850, 112373, 28914, 116124, 96781, 91624, 10180, 11955, 137610, 79349, 100700, 42921, 58755, 127484, 84525, 79898, 45766, 91681, 23048, 36646, 2678, 59804, 97007]
[2024-12-02 18:39:34.919114] user = 2756 Cloud 112/568
[2024-12-02 18:39:34.928824] user = 2756 Local 112/568
[2024-12-02 18:39:34.999281] user = 2756 Local+ 112/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:39:37.067622] user = 2756 MPDA- 112/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.2
Training on augumented user 62573 0/50 current_auc = 0.2
User 62573 AUC after training: 0.2
User 62573 does not improve AUC. Reverting changes.
Training on augumented user 41533 1/50 current_auc = 0.2
User 41533 AUC after training: 0.2
User 41533 does not improve AUC. Reverting changes.
Training on augumented user 65541 2/50 current_auc = 0.2
User 65541 AUC after training: 0.2
User 65541 does not improve AUC. Reverting changes.
Training on augumented user 73704 3/50 current_auc = 0.2
User 73704 AUC after training: 0.2
User 73704 does not improve AUC. Reverting changes.
Training on augumented user 9203 4/50 current_auc = 0.2
User 9203 AUC after training: 0.2
User 9203 does not improve AUC. Reverting changes.
Training on augumented user 121946 5/50 current_auc = 0.2
User 121946 AUC after training: 0.2
User 121946 does not improve AUC. Reverting changes.
Training on augumented user 27392 6/50 current_auc = 0.2
User 27392 AUC after training: 0.2
User 27392 does not improve AUC. Reverting changes.
Training on augumented user 59030 7/50 current_auc = 0.2
User 59030 AUC after training: 0.2
User 59030 does not improve AUC. Reverting changes.
Training on augumented user 121349 8/50 current_auc = 0.2
User 121349 AUC after training: 0.2
User 121349 does not improve AUC. Reverting changes.
Training on augumented user 126484 9/50 current_auc = 0.2
User 126484 AUC after training: 0.2
User 126484 does not improve AUC. Reverting changes.
Training on augumented user 82826 10/50 current_auc = 0.2
User 82826 AUC after training: 0.2
User 82826 does not improve AUC. Reverting changes.
Training on augumented user 51794 11/50 current_auc = 0.2
User 51794 AUC after training: 0.2
User 51794 does not improve AUC. Reverting changes.
Training on augumented user 97434 12/50 current_auc = 0.2
User 97434 AUC after training: 0.2
User 97434 does not improve AUC. Reverting changes.
Training on augumented user 10659 13/50 current_auc = 0.2
User 10659 AUC after training: 0.2
User 10659 does not improve AUC. Reverting changes.
Training on augumented user 18651 14/50 current_auc = 0.2
User 18651 AUC after training: 0.2
User 18651 does not improve AUC. Reverting changes.
Training on augumented user 56228 15/50 current_auc = 0.2
User 56228 AUC after training: 0.2
User 56228 does not improve AUC. Reverting changes.
Training on augumented user 24464 16/50 current_auc = 0.2
User 24464 AUC after training: 0.2
User 24464 does not improve AUC. Reverting changes.
Training on augumented user 94496 17/50 current_auc = 0.2
User 94496 AUC after training: 0.2
User 94496 does not improve AUC. Reverting changes.
Training on augumented user 12415 18/50 current_auc = 0.2
User 12415 AUC after training: 0.2
User 12415 does not improve AUC. Reverting changes.
Training on augumented user 17558 19/50 current_auc = 0.2
User 17558 AUC after training: 0.2
User 17558 does not improve AUC. Reverting changes.
Training on augumented user 108848 20/50 current_auc = 0.2
User 108848 AUC after training: 0.2
User 108848 does not improve AUC. Reverting changes.
Training on augumented user 50765 21/50 current_auc = 0.2
User 50765 AUC after training: 0.2
User 50765 does not improve AUC. Reverting changes.
Training on augumented user 48733 22/50 current_auc = 0.2
User 48733 AUC after training: 0.2
User 48733 does not improve AUC. Reverting changes.
Training on augumented user 89799 23/50 current_auc = 0.2
User 89799 AUC after training: 0.2
User 89799 does not improve AUC. Reverting changes.
Training on augumented user 43143 24/50 current_auc = 0.2
User 43143 AUC after training: 0.2
User 43143 does not improve AUC. Reverting changes.
Training on augumented user 29594 25/50 current_auc = 0.2
User 29594 AUC after training: 0.2
User 29594 does not improve AUC. Reverting changes.
Training on augumented user 20480 26/50 current_auc = 0.2
User 20480 AUC after training: 0.2
User 20480 does not improve AUC. Reverting changes.
Training on augumented user 7850 27/50 current_auc = 0.2
User 7850 AUC after training: 0.2
User 7850 does not improve AUC. Reverting changes.
Training on augumented user 112373 28/50 current_auc = 0.2
User 112373 AUC after training: 0.2
User 112373 does not improve AUC. Reverting changes.
Training on augumented user 28914 29/50 current_auc = 0.2
User 28914 AUC after training: 0.2
User 28914 does not improve AUC. Reverting changes.
Training on augumented user 116124 30/50 current_auc = 0.2
User 116124 AUC after training: 0.2
User 116124 does not improve AUC. Reverting changes.
Training on augumented user 96781 31/50 current_auc = 0.2
User 96781 AUC after training: 0.2
User 96781 does not improve AUC. Reverting changes.
Training on augumented user 91624 32/50 current_auc = 0.2
User 91624 AUC after training: 0.2
User 91624 does not improve AUC. Reverting changes.
Training on augumented user 10180 33/50 current_auc = 0.2
User 10180 AUC after training: 0.2
User 10180 does not improve AUC. Reverting changes.
Training on augumented user 11955 34/50 current_auc = 0.2
User 11955 AUC after training: 0.2
User 11955 does not improve AUC. Reverting changes.
Training on augumented user 137610 35/50 current_auc = 0.2
User 137610 AUC after training: 0.2
User 137610 does not improve AUC. Reverting changes.
Training on augumented user 79349 36/50 current_auc = 0.2
User 79349 AUC after training: 0.2
User 79349 does not improve AUC. Reverting changes.
Training on augumented user 100700 37/50 current_auc = 0.2
User 100700 AUC after training: 0.2
User 100700 does not improve AUC. Reverting changes.
Training on augumented user 42921 38/50 current_auc = 0.2
User 42921 AUC after training: 0.2
User 42921 does not improve AUC. Reverting changes.
Training on augumented user 58755 39/50 current_auc = 0.2
User 58755 AUC after training: 0.2
User 58755 does not improve AUC. Reverting changes.
Training on augumented user 127484 40/50 current_auc = 0.2
User 127484 AUC after training: 0.2
User 127484 does not improve AUC. Reverting changes.
Training on augumented user 84525 41/50 current_auc = 0.2
User 84525 AUC after training: 0.2
User 84525 does not improve AUC. Reverting changes.
Training on augumented user 79898 42/50 current_auc = 0.2
User 79898 AUC after training: 0.2
User 79898 does not improve AUC. Reverting changes.
Training on augumented user 45766 43/50 current_auc = 0.2
User 45766 AUC after training: 0.2
User 45766 does not improve AUC. Reverting changes.
Training on augumented user 91681 44/50 current_auc = 0.2
User 91681 AUC after training: 0.2
User 91681 does not improve AUC. Reverting changes.
Training on augumented user 23048 45/50 current_auc = 0.2
User 23048 AUC after training: 0.2
User 23048 does not improve AUC. Reverting changes.
Training on augumented user 36646 46/50 current_auc = 0.2
User 36646 AUC after training: 0.2
User 36646 does not improve AUC. Reverting changes.
Training on augumented user 2678 47/50 current_auc = 0.2
User 2678 AUC after training: 0.2
User 2678 does not improve AUC. Reverting changes.
Training on augumented user 59804 48/50 current_auc = 0.2
User 59804 AUC after training: 0.2
User 59804 does not improve AUC. Reverting changes.
Training on augumented user 97007 49/50 current_auc = 0.2
User 97007 AUC after training: 0.2
User 97007 does not improve AUC. Reverting changes.
[2024-12-02 18:40:04.979670] start test user 2772 113/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:40:05.514919] start test user 2772 113/568 recall augumented users by random, augumented_users = [14300, 82964, 114286, 137220, 110652, 97406, 3135, 56650, 114417, 106223, 61261, 10814, 122240, 79526, 117800, 98074, 102368, 29547, 85130, 27408, 44619, 128769, 8871, 71913, 122611, 132880, 42300, 111420, 94928, 16966, 9897, 65960, 77100, 15353, 95322, 30384, 109304, 24334, 104930, 126967, 39807, 39233, 79528, 58231, 119552, 67463, 29984, 42448, 93579, 92170]
[2024-12-02 18:40:05.530570] user = 2772 Cloud 113/568
[2024-12-02 18:40:05.547435] user = 2772 Local 113/568
[2024-12-02 18:40:05.736339] user = 2772 Local+ 113/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:40:07.227784] user = 2772 MPDA- 113/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4993814432989691
Training on augumented user 14300 0/50 current_auc = 0.4993814432989691
User 14300 AUC after training: 0.5002061855670104
User 14300 improves AUC. Keeping the model.
Training on augumented user 82964 1/50 current_auc = 0.5002061855670104
User 82964 AUC after training: 0.5014432989690721
User 82964 improves AUC. Keeping the model.
Training on augumented user 114286 2/50 current_auc = 0.5014432989690721
User 114286 AUC after training: 0.5018556701030927
User 114286 improves AUC. Keeping the model.
Training on augumented user 137220 3/50 current_auc = 0.5018556701030927
User 137220 AUC after training: 0.5010309278350515
User 137220 does not improve AUC. Reverting changes.
Training on augumented user 110652 4/50 current_auc = 0.5018556701030927
User 110652 AUC after training: 0.500618556701031
User 110652 does not improve AUC. Reverting changes.
Training on augumented user 97406 5/50 current_auc = 0.5018556701030927
User 97406 AUC after training: 0.49896907216494846
User 97406 does not improve AUC. Reverting changes.
Training on augumented user 3135 6/50 current_auc = 0.5018556701030927
User 3135 AUC after training: 0.500618556701031
User 3135 does not improve AUC. Reverting changes.
Training on augumented user 56650 7/50 current_auc = 0.5018556701030927
User 56650 AUC after training: 0.4993814432989691
User 56650 does not improve AUC. Reverting changes.
Training on augumented user 114417 8/50 current_auc = 0.5018556701030927
User 114417 AUC after training: 0.5010309278350515
User 114417 does not improve AUC. Reverting changes.
Training on augumented user 106223 9/50 current_auc = 0.5018556701030927
User 106223 AUC after training: 0.500618556701031
User 106223 does not improve AUC. Reverting changes.
Training on augumented user 61261 10/50 current_auc = 0.5018556701030927
User 61261 AUC after training: 0.5010309278350515
User 61261 does not improve AUC. Reverting changes.
Training on augumented user 10814 11/50 current_auc = 0.5018556701030927
User 10814 AUC after training: 0.5002061855670104
User 10814 does not improve AUC. Reverting changes.
Training on augumented user 122240 12/50 current_auc = 0.5018556701030927
User 122240 AUC after training: 0.5022680412371134
User 122240 improves AUC. Keeping the model.
Training on augumented user 79526 13/50 current_auc = 0.5022680412371134
User 79526 AUC after training: 0.5010309278350515
User 79526 does not improve AUC. Reverting changes.
Training on augumented user 117800 14/50 current_auc = 0.5022680412371134
User 117800 AUC after training: 0.5014432989690722
User 117800 does not improve AUC. Reverting changes.
Training on augumented user 98074 15/50 current_auc = 0.5022680412371134
User 98074 AUC after training: 0.5022680412371134
User 98074 does not improve AUC. Reverting changes.
Training on augumented user 102368 16/50 current_auc = 0.5022680412371134
User 102368 AUC after training: 0.5018556701030927
User 102368 does not improve AUC. Reverting changes.
Training on augumented user 29547 17/50 current_auc = 0.5022680412371134
User 29547 AUC after training: 0.5002061855670104
User 29547 does not improve AUC. Reverting changes.
Training on augumented user 85130 18/50 current_auc = 0.5022680412371134
User 85130 AUC after training: 0.5010309278350515
User 85130 does not improve AUC. Reverting changes.
Training on augumented user 27408 19/50 current_auc = 0.5022680412371134
User 27408 AUC after training: 0.5014432989690722
User 27408 does not improve AUC. Reverting changes.
Training on augumented user 44619 20/50 current_auc = 0.5022680412371134
User 44619 AUC after training: 0.5010309278350515
User 44619 does not improve AUC. Reverting changes.
Training on augumented user 128769 21/50 current_auc = 0.5022680412371134
User 128769 AUC after training: 0.5014432989690722
User 128769 does not improve AUC. Reverting changes.
Training on augumented user 8871 22/50 current_auc = 0.5022680412371134
User 8871 AUC after training: 0.5010309278350515
User 8871 does not improve AUC. Reverting changes.
Training on augumented user 71913 23/50 current_auc = 0.5022680412371134
User 71913 AUC after training: 0.4993814432989691
User 71913 does not improve AUC. Reverting changes.
Training on augumented user 122611 24/50 current_auc = 0.5022680412371134
User 122611 AUC after training: 0.5010309278350515
User 122611 does not improve AUC. Reverting changes.
Training on augumented user 132880 25/50 current_auc = 0.5022680412371134
User 132880 AUC after training: 0.5014432989690722
User 132880 does not improve AUC. Reverting changes.
Training on augumented user 42300 26/50 current_auc = 0.5022680412371134
User 42300 AUC after training: 0.5002061855670104
User 42300 does not improve AUC. Reverting changes.
Training on augumented user 111420 27/50 current_auc = 0.5022680412371134
User 111420 AUC after training: 0.5018556701030927
User 111420 does not improve AUC. Reverting changes.
Training on augumented user 94928 28/50 current_auc = 0.5022680412371134
User 94928 AUC after training: 0.5018556701030927
User 94928 does not improve AUC. Reverting changes.
Training on augumented user 16966 29/50 current_auc = 0.5022680412371134
User 16966 AUC after training: 0.5018556701030927
User 16966 does not improve AUC. Reverting changes.
Training on augumented user 9897 30/50 current_auc = 0.5022680412371134
User 9897 AUC after training: 0.5022680412371134
User 9897 does not improve AUC. Reverting changes.
Training on augumented user 65960 31/50 current_auc = 0.5022680412371134
User 65960 AUC after training: 0.500618556701031
User 65960 does not improve AUC. Reverting changes.
Training on augumented user 77100 32/50 current_auc = 0.5022680412371134
User 77100 AUC after training: 0.5018556701030927
User 77100 does not improve AUC. Reverting changes.
Training on augumented user 15353 33/50 current_auc = 0.5022680412371134
User 15353 AUC after training: 0.5010309278350515
User 15353 does not improve AUC. Reverting changes.
Training on augumented user 95322 34/50 current_auc = 0.5022680412371134
User 95322 AUC after training: 0.5014432989690722
User 95322 does not improve AUC. Reverting changes.
Training on augumented user 30384 35/50 current_auc = 0.5022680412371134
User 30384 AUC after training: 0.5010309278350515
User 30384 does not improve AUC. Reverting changes.
Training on augumented user 109304 36/50 current_auc = 0.5022680412371134
User 109304 AUC after training: 0.5014432989690722
User 109304 does not improve AUC. Reverting changes.
Training on augumented user 24334 37/50 current_auc = 0.5022680412371134
User 24334 AUC after training: 0.5002061855670104
User 24334 does not improve AUC. Reverting changes.
Training on augumented user 104930 38/50 current_auc = 0.5022680412371134
User 104930 AUC after training: 0.5010309278350515
User 104930 does not improve AUC. Reverting changes.
Training on augumented user 126967 39/50 current_auc = 0.5022680412371134
User 126967 AUC after training: 0.5014432989690722
User 126967 does not improve AUC. Reverting changes.
Training on augumented user 39807 40/50 current_auc = 0.5022680412371134
User 39807 AUC after training: 0.500618556701031
User 39807 does not improve AUC. Reverting changes.
Training on augumented user 39233 41/50 current_auc = 0.5022680412371134
User 39233 AUC after training: 0.5018556701030927
User 39233 does not improve AUC. Reverting changes.
Training on augumented user 79528 42/50 current_auc = 0.5022680412371134
User 79528 AUC after training: 0.5014432989690721
User 79528 does not improve AUC. Reverting changes.
Training on augumented user 58231 43/50 current_auc = 0.5022680412371134
User 58231 AUC after training: 0.4997938144329897
User 58231 does not improve AUC. Reverting changes.
Training on augumented user 119552 44/50 current_auc = 0.5022680412371134
User 119552 AUC after training: 0.5014432989690722
User 119552 does not improve AUC. Reverting changes.
Training on augumented user 67463 45/50 current_auc = 0.5022680412371134
User 67463 AUC after training: 0.5014432989690722
User 67463 does not improve AUC. Reverting changes.
Training on augumented user 29984 46/50 current_auc = 0.5022680412371134
User 29984 AUC after training: 0.5014432989690722
User 29984 does not improve AUC. Reverting changes.
Training on augumented user 42448 47/50 current_auc = 0.5022680412371134
User 42448 AUC after training: 0.5014432989690722
User 42448 does not improve AUC. Reverting changes.
Training on augumented user 93579 48/50 current_auc = 0.5022680412371134
User 93579 AUC after training: 0.5014432989690722
User 93579 does not improve AUC. Reverting changes.
Training on augumented user 92170 49/50 current_auc = 0.5022680412371134
User 92170 AUC after training: 0.5014432989690722
User 92170 does not improve AUC. Reverting changes.
[2024-12-02 18:40:32.465300] start test user 2783 114/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:40:32.981046] start test user 2783 114/568 recall augumented users by random, augumented_users = [120428, 84919, 133119, 86481, 115830, 94905, 29064, 136850, 103586, 128317, 90503, 85308, 42509, 54411, 14377, 65813, 16098, 107694, 104260, 32954, 35364, 49605, 61233, 45166, 105319, 114807, 25083, 31939, 99316, 105398, 113551, 13118, 103804, 92936, 30310, 50141, 89670, 28061, 17889, 119920, 121587, 102196, 76518, 50693, 54459, 69970, 117537, 3180, 15033, 86345]
[2024-12-02 18:40:32.996232] user = 2783 Cloud 114/568
[2024-12-02 18:40:33.019912] user = 2783 Local 114/568
[2024-12-02 18:40:33.062241] user = 2783 Local+ 114/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:40:35.729129] user = 2783 MPDA- 114/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.64
Training on augumented user 120428 0/50 current_auc = 0.64
User 120428 AUC after training: 0.64
User 120428 does not improve AUC. Reverting changes.
Training on augumented user 84919 1/50 current_auc = 0.64
User 84919 AUC after training: 0.6466666666666667
User 84919 improves AUC. Keeping the model.
Training on augumented user 133119 2/50 current_auc = 0.6466666666666667
User 133119 AUC after training: 0.6466666666666667
User 133119 does not improve AUC. Reverting changes.
Training on augumented user 86481 3/50 current_auc = 0.6466666666666667
User 86481 AUC after training: 0.6466666666666667
User 86481 does not improve AUC. Reverting changes.
Training on augumented user 115830 4/50 current_auc = 0.6466666666666667
User 115830 AUC after training: 0.64
User 115830 does not improve AUC. Reverting changes.
Training on augumented user 94905 5/50 current_auc = 0.6466666666666667
User 94905 AUC after training: 0.6533333333333333
User 94905 improves AUC. Keeping the model.
Training on augumented user 29064 6/50 current_auc = 0.6533333333333333
User 29064 AUC after training: 0.6533333333333333
User 29064 does not improve AUC. Reverting changes.
Training on augumented user 136850 7/50 current_auc = 0.6533333333333333
User 136850 AUC after training: 0.6533333333333333
User 136850 does not improve AUC. Reverting changes.
Training on augumented user 103586 8/50 current_auc = 0.6533333333333333
User 103586 AUC after training: 0.6533333333333333
User 103586 does not improve AUC. Reverting changes.
Training on augumented user 128317 9/50 current_auc = 0.6533333333333333
User 128317 AUC after training: 0.6533333333333333
User 128317 does not improve AUC. Reverting changes.
Training on augumented user 90503 10/50 current_auc = 0.6533333333333333
User 90503 AUC after training: 0.6533333333333333
User 90503 does not improve AUC. Reverting changes.
Training on augumented user 85308 11/50 current_auc = 0.6533333333333333
User 85308 AUC after training: 0.6533333333333333
User 85308 does not improve AUC. Reverting changes.
Training on augumented user 42509 12/50 current_auc = 0.6533333333333333
User 42509 AUC after training: 0.6533333333333333
User 42509 does not improve AUC. Reverting changes.
Training on augumented user 54411 13/50 current_auc = 0.6533333333333333
User 54411 AUC after training: 0.6533333333333333
User 54411 does not improve AUC. Reverting changes.
Training on augumented user 14377 14/50 current_auc = 0.6533333333333333
User 14377 AUC after training: 0.6533333333333333
User 14377 does not improve AUC. Reverting changes.
Training on augumented user 65813 15/50 current_auc = 0.6533333333333333
User 65813 AUC after training: 0.6533333333333333
User 65813 does not improve AUC. Reverting changes.
Training on augumented user 16098 16/50 current_auc = 0.6533333333333333
User 16098 AUC after training: 0.6533333333333333
User 16098 does not improve AUC. Reverting changes.
Training on augumented user 107694 17/50 current_auc = 0.6533333333333333
User 107694 AUC after training: 0.6533333333333333
User 107694 does not improve AUC. Reverting changes.
Training on augumented user 104260 18/50 current_auc = 0.6533333333333333
User 104260 AUC after training: 0.6533333333333333
User 104260 does not improve AUC. Reverting changes.
Training on augumented user 32954 19/50 current_auc = 0.6533333333333333
User 32954 AUC after training: 0.6533333333333333
User 32954 does not improve AUC. Reverting changes.
Training on augumented user 35364 20/50 current_auc = 0.6533333333333333
User 35364 AUC after training: 0.6599999999999999
User 35364 improves AUC. Keeping the model.
Training on augumented user 49605 21/50 current_auc = 0.6599999999999999
User 49605 AUC after training: 0.6599999999999999
User 49605 does not improve AUC. Reverting changes.
Training on augumented user 61233 22/50 current_auc = 0.6599999999999999
User 61233 AUC after training: 0.6599999999999999
User 61233 does not improve AUC. Reverting changes.
Training on augumented user 45166 23/50 current_auc = 0.6599999999999999
User 45166 AUC after training: 0.6599999999999999
User 45166 does not improve AUC. Reverting changes.
Training on augumented user 105319 24/50 current_auc = 0.6599999999999999
User 105319 AUC after training: 0.6599999999999999
User 105319 does not improve AUC. Reverting changes.
Training on augumented user 114807 25/50 current_auc = 0.6599999999999999
User 114807 AUC after training: 0.6599999999999999
User 114807 does not improve AUC. Reverting changes.
Training on augumented user 25083 26/50 current_auc = 0.6599999999999999
User 25083 AUC after training: 0.6599999999999999
User 25083 does not improve AUC. Reverting changes.
Training on augumented user 31939 27/50 current_auc = 0.6599999999999999
User 31939 AUC after training: 0.6599999999999999
User 31939 does not improve AUC. Reverting changes.
Training on augumented user 99316 28/50 current_auc = 0.6599999999999999
User 99316 AUC after training: 0.6599999999999999
User 99316 does not improve AUC. Reverting changes.
Training on augumented user 105398 29/50 current_auc = 0.6599999999999999
User 105398 AUC after training: 0.6533333333333333
User 105398 does not improve AUC. Reverting changes.
Training on augumented user 113551 30/50 current_auc = 0.6599999999999999
User 113551 AUC after training: 0.6599999999999999
User 113551 does not improve AUC. Reverting changes.
Training on augumented user 13118 31/50 current_auc = 0.6599999999999999
User 13118 AUC after training: 0.6599999999999999
User 13118 does not improve AUC. Reverting changes.
Training on augumented user 103804 32/50 current_auc = 0.6599999999999999
User 103804 AUC after training: 0.6599999999999999
User 103804 does not improve AUC. Reverting changes.
Training on augumented user 92936 33/50 current_auc = 0.6599999999999999
User 92936 AUC after training: 0.6599999999999999
User 92936 does not improve AUC. Reverting changes.
Training on augumented user 30310 34/50 current_auc = 0.6599999999999999
User 30310 AUC after training: 0.6599999999999999
User 30310 does not improve AUC. Reverting changes.
Training on augumented user 50141 35/50 current_auc = 0.6599999999999999
User 50141 AUC after training: 0.6533333333333333
User 50141 does not improve AUC. Reverting changes.
Training on augumented user 89670 36/50 current_auc = 0.6599999999999999
User 89670 AUC after training: 0.6599999999999999
User 89670 does not improve AUC. Reverting changes.
Training on augumented user 28061 37/50 current_auc = 0.6599999999999999
User 28061 AUC after training: 0.6666666666666666
User 28061 improves AUC. Keeping the model.
Training on augumented user 17889 38/50 current_auc = 0.6666666666666666
User 17889 AUC after training: 0.6666666666666666
User 17889 does not improve AUC. Reverting changes.
Training on augumented user 119920 39/50 current_auc = 0.6666666666666666
User 119920 AUC after training: 0.6599999999999999
User 119920 does not improve AUC. Reverting changes.
Training on augumented user 121587 40/50 current_auc = 0.6666666666666666
User 121587 AUC after training: 0.6666666666666666
User 121587 does not improve AUC. Reverting changes.
Training on augumented user 102196 41/50 current_auc = 0.6666666666666666
User 102196 AUC after training: 0.6599999999999999
User 102196 does not improve AUC. Reverting changes.
Training on augumented user 76518 42/50 current_auc = 0.6666666666666666
User 76518 AUC after training: 0.6599999999999999
User 76518 does not improve AUC. Reverting changes.
Training on augumented user 50693 43/50 current_auc = 0.6666666666666666
User 50693 AUC after training: 0.6599999999999999
User 50693 does not improve AUC. Reverting changes.
Training on augumented user 54459 44/50 current_auc = 0.6666666666666666
User 54459 AUC after training: 0.6533333333333333
User 54459 does not improve AUC. Reverting changes.
Training on augumented user 69970 45/50 current_auc = 0.6666666666666666
User 69970 AUC after training: 0.6666666666666666
User 69970 does not improve AUC. Reverting changes.
Training on augumented user 117537 46/50 current_auc = 0.6666666666666666
User 117537 AUC after training: 0.6599999999999999
User 117537 does not improve AUC. Reverting changes.
Training on augumented user 3180 47/50 current_auc = 0.6666666666666666
User 3180 AUC after training: 0.6666666666666666
User 3180 does not improve AUC. Reverting changes.
Training on augumented user 15033 48/50 current_auc = 0.6666666666666666
User 15033 AUC after training: 0.6599999999999999
User 15033 does not improve AUC. Reverting changes.
Training on augumented user 86345 49/50 current_auc = 0.6666666666666666
User 86345 AUC after training: 0.6666666666666666
User 86345 does not improve AUC. Reverting changes.
[2024-12-02 18:41:00.868519] start test user 2813 115/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:41:01.303004] start test user 2813 115/568 recall augumented users by random, augumented_users = [45889, 2644, 31939, 131669, 3185, 73956, 78359, 45713, 34681, 136923, 116208, 40212, 89014, 74363, 2945, 52335, 72363, 8362, 24252, 137784, 1035, 86890, 38078, 105917, 60908, 127774, 136983, 77710, 91196, 70575, 42117, 17864, 20771, 91726, 52887, 102360, 49195, 121614, 35059, 134662, 17044, 76897, 135941, 101244, 120509, 15090, 126503, 82043, 77453, 87384]
[2024-12-02 18:41:01.318526] user = 2813 Cloud 115/568
[2024-12-02 18:41:01.336159] user = 2813 Local 115/568
[2024-12-02 18:41:01.377324] user = 2813 Local+ 115/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:41:03.039935] user = 2813 MPDA- 115/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6594202898550725
Training on augumented user 45889 0/50 current_auc = 0.6594202898550725
User 45889 AUC after training: 0.6594202898550725
User 45889 does not improve AUC. Reverting changes.
Training on augumented user 2644 1/50 current_auc = 0.6594202898550725
User 2644 AUC after training: 0.6625258799171843
User 2644 improves AUC. Keeping the model.
Training on augumented user 31939 2/50 current_auc = 0.6625258799171843
User 31939 AUC after training: 0.6609730848861283
User 31939 does not improve AUC. Reverting changes.
Training on augumented user 131669 3/50 current_auc = 0.6625258799171843
User 131669 AUC after training: 0.660455486542443
User 131669 does not improve AUC. Reverting changes.
Training on augumented user 3185 4/50 current_auc = 0.6625258799171843
User 3185 AUC after training: 0.6599378881987579
User 3185 does not improve AUC. Reverting changes.
Training on augumented user 73956 5/50 current_auc = 0.6625258799171843
User 73956 AUC after training: 0.6609730848861284
User 73956 does not improve AUC. Reverting changes.
Training on augumented user 78359 6/50 current_auc = 0.6625258799171843
User 78359 AUC after training: 0.6609730848861284
User 78359 does not improve AUC. Reverting changes.
Training on augumented user 45713 7/50 current_auc = 0.6625258799171843
User 45713 AUC after training: 0.662008281573499
User 45713 does not improve AUC. Reverting changes.
Training on augumented user 34681 8/50 current_auc = 0.6625258799171843
User 34681 AUC after training: 0.6630434782608695
User 34681 improves AUC. Keeping the model.
Training on augumented user 136923 9/50 current_auc = 0.6630434782608695
User 136923 AUC after training: 0.662008281573499
User 136923 does not improve AUC. Reverting changes.
Training on augumented user 116208 10/50 current_auc = 0.6630434782608695
User 116208 AUC after training: 0.6625258799171843
User 116208 does not improve AUC. Reverting changes.
Training on augumented user 40212 11/50 current_auc = 0.6630434782608695
User 40212 AUC after training: 0.6635610766045548
User 40212 improves AUC. Keeping the model.
Training on augumented user 89014 12/50 current_auc = 0.6635610766045548
User 89014 AUC after training: 0.6625258799171843
User 89014 does not improve AUC. Reverting changes.
Training on augumented user 74363 13/50 current_auc = 0.6635610766045548
User 74363 AUC after training: 0.6625258799171843
User 74363 does not improve AUC. Reverting changes.
Training on augumented user 2945 14/50 current_auc = 0.6635610766045548
User 2945 AUC after training: 0.660455486542443
User 2945 does not improve AUC. Reverting changes.
Training on augumented user 52335 15/50 current_auc = 0.6635610766045548
User 52335 AUC after training: 0.6599378881987576
User 52335 does not improve AUC. Reverting changes.
Training on augumented user 72363 16/50 current_auc = 0.6635610766045548
User 72363 AUC after training: 0.6630434782608696
User 72363 does not improve AUC. Reverting changes.
Training on augumented user 8362 17/50 current_auc = 0.6635610766045548
User 8362 AUC after training: 0.6640786749482401
User 8362 improves AUC. Keeping the model.
Training on augumented user 24252 18/50 current_auc = 0.6640786749482401
User 24252 AUC after training: 0.6630434782608696
User 24252 does not improve AUC. Reverting changes.
Training on augumented user 137784 19/50 current_auc = 0.6640786749482401
User 137784 AUC after training: 0.6635610766045549
User 137784 does not improve AUC. Reverting changes.
Training on augumented user 1035 20/50 current_auc = 0.6640786749482401
User 1035 AUC after training: 0.6635610766045549
User 1035 does not improve AUC. Reverting changes.
Training on augumented user 86890 21/50 current_auc = 0.6640786749482401
User 86890 AUC after training: 0.660455486542443
User 86890 does not improve AUC. Reverting changes.
Training on augumented user 38078 22/50 current_auc = 0.6640786749482401
User 38078 AUC after training: 0.6609730848861284
User 38078 does not improve AUC. Reverting changes.
Training on augumented user 105917 23/50 current_auc = 0.6640786749482401
User 105917 AUC after training: 0.6620082815734989
User 105917 does not improve AUC. Reverting changes.
Training on augumented user 60908 24/50 current_auc = 0.6640786749482401
User 60908 AUC after training: 0.6640786749482401
User 60908 does not improve AUC. Reverting changes.
Training on augumented user 127774 25/50 current_auc = 0.6640786749482401
User 127774 AUC after training: 0.6625258799171843
User 127774 does not improve AUC. Reverting changes.
Training on augumented user 136983 26/50 current_auc = 0.6640786749482401
User 136983 AUC after training: 0.6630434782608696
User 136983 does not improve AUC. Reverting changes.
Training on augumented user 77710 27/50 current_auc = 0.6640786749482401
User 77710 AUC after training: 0.6635610766045549
User 77710 does not improve AUC. Reverting changes.
Training on augumented user 91196 28/50 current_auc = 0.6640786749482401
User 91196 AUC after training: 0.6625258799171843
User 91196 does not improve AUC. Reverting changes.
Training on augumented user 70575 29/50 current_auc = 0.6640786749482401
User 70575 AUC after training: 0.6620082815734989
User 70575 does not improve AUC. Reverting changes.
Training on augumented user 42117 30/50 current_auc = 0.6640786749482401
User 42117 AUC after training: 0.6620082815734989
User 42117 does not improve AUC. Reverting changes.
Training on augumented user 17864 31/50 current_auc = 0.6640786749482401
User 17864 AUC after training: 0.6620082815734989
User 17864 does not improve AUC. Reverting changes.
Training on augumented user 20771 32/50 current_auc = 0.6640786749482401
User 20771 AUC after training: 0.6630434782608695
User 20771 does not improve AUC. Reverting changes.
Training on augumented user 91726 33/50 current_auc = 0.6640786749482401
User 91726 AUC after training: 0.6620082815734989
User 91726 does not improve AUC. Reverting changes.
Training on augumented user 52887 34/50 current_auc = 0.6640786749482401
User 52887 AUC after training: 0.6609730848861284
User 52887 does not improve AUC. Reverting changes.
Training on augumented user 102360 35/50 current_auc = 0.6640786749482401
User 102360 AUC after training: 0.6599378881987578
User 102360 does not improve AUC. Reverting changes.
Training on augumented user 49195 36/50 current_auc = 0.6640786749482401
User 49195 AUC after training: 0.6625258799171843
User 49195 does not improve AUC. Reverting changes.
Training on augumented user 121614 37/50 current_auc = 0.6640786749482401
User 121614 AUC after training: 0.6614906832298136
User 121614 does not improve AUC. Reverting changes.
Training on augumented user 35059 38/50 current_auc = 0.6640786749482401
User 35059 AUC after training: 0.6625258799171843
User 35059 does not improve AUC. Reverting changes.
Training on augumented user 134662 39/50 current_auc = 0.6640786749482401
User 134662 AUC after training: 0.6625258799171841
User 134662 does not improve AUC. Reverting changes.
Training on augumented user 17044 40/50 current_auc = 0.6640786749482401
User 17044 AUC after training: 0.6666666666666666
User 17044 improves AUC. Keeping the model.
Training on augumented user 76897 41/50 current_auc = 0.6666666666666666
User 76897 AUC after training: 0.6645962732919255
User 76897 does not improve AUC. Reverting changes.
Training on augumented user 135941 42/50 current_auc = 0.6666666666666666
User 135941 AUC after training: 0.665631469979296
User 135941 does not improve AUC. Reverting changes.
Training on augumented user 101244 43/50 current_auc = 0.6666666666666666
User 101244 AUC after training: 0.6666666666666666
User 101244 does not improve AUC. Reverting changes.
Training on augumented user 120509 44/50 current_auc = 0.6666666666666666
User 120509 AUC after training: 0.6661490683229814
User 120509 does not improve AUC. Reverting changes.
Training on augumented user 15090 45/50 current_auc = 0.6666666666666666
User 15090 AUC after training: 0.6656314699792961
User 15090 does not improve AUC. Reverting changes.
Training on augumented user 126503 46/50 current_auc = 0.6666666666666666
User 126503 AUC after training: 0.6661490683229814
User 126503 does not improve AUC. Reverting changes.
Training on augumented user 82043 47/50 current_auc = 0.6666666666666666
User 82043 AUC after training: 0.6635610766045549
User 82043 does not improve AUC. Reverting changes.
Training on augumented user 77453 48/50 current_auc = 0.6666666666666666
User 77453 AUC after training: 0.6645962732919255
User 77453 does not improve AUC. Reverting changes.
Training on augumented user 87384 49/50 current_auc = 0.6666666666666666
User 87384 AUC after training: 0.6656314699792961
User 87384 does not improve AUC. Reverting changes.
[2024-12-02 18:41:30.225761] start test user 2847 116/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:41:30.681712] start test user 2847 116/568 recall augumented users by random, augumented_users = [16433, 37852, 68156, 48543, 100839, 39760, 7991, 105721, 117135, 90872, 67554, 58382, 10409, 854, 56402, 61657, 101901, 66197, 78313, 30372, 124050, 135969, 133876, 4006, 124873, 133989, 27769, 81910, 84227, 106076, 28944, 79014, 72031, 31665, 71078, 25858, 104517, 24593, 7436, 135068, 97463, 125427, 129965, 96713, 19815, 134101, 119392, 37449, 123402, 128161]
[2024-12-02 18:41:30.696533] user = 2847 Cloud 116/568
[2024-12-02 18:41:30.713321] user = 2847 Local 116/568
[2024-12-02 18:41:30.790796] user = 2847 Local+ 116/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:41:32.604764] user = 2847 MPDA- 116/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7954545454545454
Training on augumented user 16433 0/50 current_auc = 0.7954545454545454
User 16433 AUC after training: 0.7954545454545454
User 16433 does not improve AUC. Reverting changes.
Training on augumented user 37852 1/50 current_auc = 0.7954545454545454
User 37852 AUC after training: 0.7954545454545454
User 37852 does not improve AUC. Reverting changes.
Training on augumented user 68156 2/50 current_auc = 0.7954545454545454
User 68156 AUC after training: 0.7954545454545454
User 68156 does not improve AUC. Reverting changes.
Training on augumented user 48543 3/50 current_auc = 0.7954545454545454
User 48543 AUC after training: 0.7954545454545454
User 48543 does not improve AUC. Reverting changes.
Training on augumented user 100839 4/50 current_auc = 0.7954545454545454
User 100839 AUC after training: 0.7954545454545454
User 100839 does not improve AUC. Reverting changes.
Training on augumented user 39760 5/50 current_auc = 0.7954545454545454
User 39760 AUC after training: 0.7954545454545454
User 39760 does not improve AUC. Reverting changes.
Training on augumented user 7991 6/50 current_auc = 0.7954545454545454
User 7991 AUC after training: 0.7954545454545454
User 7991 does not improve AUC. Reverting changes.
Training on augumented user 105721 7/50 current_auc = 0.7954545454545454
User 105721 AUC after training: 0.7954545454545454
User 105721 does not improve AUC. Reverting changes.
Training on augumented user 117135 8/50 current_auc = 0.7954545454545454
User 117135 AUC after training: 0.7954545454545454
User 117135 does not improve AUC. Reverting changes.
Training on augumented user 90872 9/50 current_auc = 0.7954545454545454
User 90872 AUC after training: 0.7954545454545454
User 90872 does not improve AUC. Reverting changes.
Training on augumented user 67554 10/50 current_auc = 0.7954545454545454
User 67554 AUC after training: 0.7954545454545454
User 67554 does not improve AUC. Reverting changes.
Training on augumented user 58382 11/50 current_auc = 0.7954545454545454
User 58382 AUC after training: 0.7954545454545454
User 58382 does not improve AUC. Reverting changes.
Training on augumented user 10409 12/50 current_auc = 0.7954545454545454
User 10409 AUC after training: 0.8068181818181818
User 10409 improves AUC. Keeping the model.
Training on augumented user 854 13/50 current_auc = 0.8068181818181818
User 854 AUC after training: 0.8068181818181818
User 854 does not improve AUC. Reverting changes.
Training on augumented user 56402 14/50 current_auc = 0.8068181818181818
User 56402 AUC after training: 0.7840909090909091
User 56402 does not improve AUC. Reverting changes.
Training on augumented user 61657 15/50 current_auc = 0.8068181818181818
User 61657 AUC after training: 0.7840909090909091
User 61657 does not improve AUC. Reverting changes.
Training on augumented user 101901 16/50 current_auc = 0.8068181818181818
User 101901 AUC after training: 0.8068181818181818
User 101901 does not improve AUC. Reverting changes.
Training on augumented user 66197 17/50 current_auc = 0.8068181818181818
User 66197 AUC after training: 0.7954545454545454
User 66197 does not improve AUC. Reverting changes.
Training on augumented user 78313 18/50 current_auc = 0.8068181818181818
User 78313 AUC after training: 0.8068181818181818
User 78313 does not improve AUC. Reverting changes.
Training on augumented user 30372 19/50 current_auc = 0.8068181818181818
User 30372 AUC after training: 0.8068181818181818
User 30372 does not improve AUC. Reverting changes.
Training on augumented user 124050 20/50 current_auc = 0.8068181818181818
User 124050 AUC after training: 0.8068181818181818
User 124050 does not improve AUC. Reverting changes.
Training on augumented user 135969 21/50 current_auc = 0.8068181818181818
User 135969 AUC after training: 0.8068181818181818
User 135969 does not improve AUC. Reverting changes.
Training on augumented user 133876 22/50 current_auc = 0.8068181818181818
User 133876 AUC after training: 0.8068181818181818
User 133876 does not improve AUC. Reverting changes.
Training on augumented user 4006 23/50 current_auc = 0.8068181818181818
User 4006 AUC after training: 0.8068181818181818
User 4006 does not improve AUC. Reverting changes.
Training on augumented user 124873 24/50 current_auc = 0.8068181818181818
User 124873 AUC after training: 0.8068181818181818
User 124873 does not improve AUC. Reverting changes.
Training on augumented user 133989 25/50 current_auc = 0.8068181818181818
User 133989 AUC after training: 0.8068181818181818
User 133989 does not improve AUC. Reverting changes.
Training on augumented user 27769 26/50 current_auc = 0.8068181818181818
User 27769 AUC after training: 0.8068181818181818
User 27769 does not improve AUC. Reverting changes.
Training on augumented user 81910 27/50 current_auc = 0.8068181818181818
User 81910 AUC after training: 0.7954545454545454
User 81910 does not improve AUC. Reverting changes.
Training on augumented user 84227 28/50 current_auc = 0.8068181818181818
User 84227 AUC after training: 0.8068181818181818
User 84227 does not improve AUC. Reverting changes.
Training on augumented user 106076 29/50 current_auc = 0.8068181818181818
User 106076 AUC after training: 0.8068181818181818
User 106076 does not improve AUC. Reverting changes.
Training on augumented user 28944 30/50 current_auc = 0.8068181818181818
User 28944 AUC after training: 0.7954545454545454
User 28944 does not improve AUC. Reverting changes.
Training on augumented user 79014 31/50 current_auc = 0.8068181818181818
User 79014 AUC after training: 0.8068181818181818
User 79014 does not improve AUC. Reverting changes.
Training on augumented user 72031 32/50 current_auc = 0.8068181818181818
User 72031 AUC after training: 0.8068181818181818
User 72031 does not improve AUC. Reverting changes.
Training on augumented user 31665 33/50 current_auc = 0.8068181818181818
User 31665 AUC after training: 0.8068181818181818
User 31665 does not improve AUC. Reverting changes.
Training on augumented user 71078 34/50 current_auc = 0.8068181818181818
User 71078 AUC after training: 0.7954545454545454
User 71078 does not improve AUC. Reverting changes.
Training on augumented user 25858 35/50 current_auc = 0.8068181818181818
User 25858 AUC after training: 0.8068181818181818
User 25858 does not improve AUC. Reverting changes.
Training on augumented user 104517 36/50 current_auc = 0.8068181818181818
User 104517 AUC after training: 0.8068181818181818
User 104517 does not improve AUC. Reverting changes.
Training on augumented user 24593 37/50 current_auc = 0.8068181818181818
User 24593 AUC after training: 0.8068181818181818
User 24593 does not improve AUC. Reverting changes.
Training on augumented user 7436 38/50 current_auc = 0.8068181818181818
User 7436 AUC after training: 0.8068181818181818
User 7436 does not improve AUC. Reverting changes.
Training on augumented user 135068 39/50 current_auc = 0.8068181818181818
User 135068 AUC after training: 0.8068181818181818
User 135068 does not improve AUC. Reverting changes.
Training on augumented user 97463 40/50 current_auc = 0.8068181818181818
User 97463 AUC after training: 0.7954545454545454
User 97463 does not improve AUC. Reverting changes.
Training on augumented user 125427 41/50 current_auc = 0.8068181818181818
User 125427 AUC after training: 0.8068181818181818
User 125427 does not improve AUC. Reverting changes.
Training on augumented user 129965 42/50 current_auc = 0.8068181818181818
User 129965 AUC after training: 0.8068181818181818
User 129965 does not improve AUC. Reverting changes.
Training on augumented user 96713 43/50 current_auc = 0.8068181818181818
User 96713 AUC after training: 0.8068181818181818
User 96713 does not improve AUC. Reverting changes.
Training on augumented user 19815 44/50 current_auc = 0.8068181818181818
User 19815 AUC after training: 0.7954545454545454
User 19815 does not improve AUC. Reverting changes.
Training on augumented user 134101 45/50 current_auc = 0.8068181818181818
User 134101 AUC after training: 0.8068181818181818
User 134101 does not improve AUC. Reverting changes.
Training on augumented user 119392 46/50 current_auc = 0.8068181818181818
User 119392 AUC after training: 0.8068181818181818
User 119392 does not improve AUC. Reverting changes.
Training on augumented user 37449 47/50 current_auc = 0.8068181818181818
User 37449 AUC after training: 0.8068181818181818
User 37449 does not improve AUC. Reverting changes.
Training on augumented user 123402 48/50 current_auc = 0.8068181818181818
User 123402 AUC after training: 0.8068181818181818
User 123402 does not improve AUC. Reverting changes.
Training on augumented user 128161 49/50 current_auc = 0.8068181818181818
User 128161 AUC after training: 0.8068181818181818
User 128161 does not improve AUC. Reverting changes.
[2024-12-02 18:41:55.277773] start test user 2851 117/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:41:55.797763] start test user 2851 117/568 recall augumented users by random, augumented_users = [106894, 118136, 117458, 91115, 79983, 99986, 71471, 64268, 50260, 4138, 94008, 128011, 28703, 126302, 122120, 114804, 105655, 7102, 55554, 24688, 13218, 80383, 70292, 51912, 101205, 120963, 119170, 61048, 86779, 86870, 50167, 82212, 57552, 61956, 15804, 13978, 28, 66776, 81576, 67603, 80924, 44649, 73324, 114866, 98245, 31922, 35267, 75734, 60929, 87393]
[2024-12-02 18:41:55.812871] user = 2851 Cloud 117/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:41:55.819686] user = 2851 Local 117/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:41:55.862397] user = 2851 Local+ 117/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:41:59.112873] user = 2851 MPDA- 117/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 106894 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106894 AUC after training: 0.5
User 106894 does not improve AUC. Reverting changes.
Training on augumented user 118136 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118136 AUC after training: 0.5
User 118136 does not improve AUC. Reverting changes.
Training on augumented user 117458 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117458 AUC after training: 0.5
User 117458 does not improve AUC. Reverting changes.
Training on augumented user 91115 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91115 AUC after training: 0.5
User 91115 does not improve AUC. Reverting changes.
Training on augumented user 79983 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79983 AUC after training: 0.5
User 79983 does not improve AUC. Reverting changes.
Training on augumented user 99986 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99986 AUC after training: 0.5
User 99986 does not improve AUC. Reverting changes.
Training on augumented user 71471 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71471 AUC after training: 0.5
User 71471 does not improve AUC. Reverting changes.
Training on augumented user 64268 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64268 AUC after training: 0.5
User 64268 does not improve AUC. Reverting changes.
Training on augumented user 50260 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50260 AUC after training: 0.5
User 50260 does not improve AUC. Reverting changes.
Training on augumented user 4138 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4138 AUC after training: 0.5
User 4138 does not improve AUC. Reverting changes.
Training on augumented user 94008 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94008 AUC after training: 0.5
User 94008 does not improve AUC. Reverting changes.
Training on augumented user 128011 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128011 AUC after training: 0.5
User 128011 does not improve AUC. Reverting changes.
Training on augumented user 28703 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28703 AUC after training: 0.5
User 28703 does not improve AUC. Reverting changes.
Training on augumented user 126302 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126302 AUC after training: 0.5
User 126302 does not improve AUC. Reverting changes.
Training on augumented user 122120 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122120 AUC after training: 0.5
User 122120 does not improve AUC. Reverting changes.
Training on augumented user 114804 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114804 AUC after training: 0.5
User 114804 does not improve AUC. Reverting changes.
Training on augumented user 105655 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105655 AUC after training: 0.5
User 105655 does not improve AUC. Reverting changes.
Training on augumented user 7102 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7102 AUC after training: 0.5
User 7102 does not improve AUC. Reverting changes.
Training on augumented user 55554 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55554 AUC after training: 0.5
User 55554 does not improve AUC. Reverting changes.
Training on augumented user 24688 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24688 AUC after training: 0.5
User 24688 does not improve AUC. Reverting changes.
Training on augumented user 13218 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13218 AUC after training: 0.5
User 13218 does not improve AUC. Reverting changes.
Training on augumented user 80383 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80383 AUC after training: 0.5
User 80383 does not improve AUC. Reverting changes.
Training on augumented user 70292 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70292 AUC after training: 0.5
User 70292 does not improve AUC. Reverting changes.
Training on augumented user 51912 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51912 AUC after training: 0.5
User 51912 does not improve AUC. Reverting changes.
Training on augumented user 101205 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101205 AUC after training: 0.5
User 101205 does not improve AUC. Reverting changes.
Training on augumented user 120963 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120963 AUC after training: 0.5
User 120963 does not improve AUC. Reverting changes.
Training on augumented user 119170 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119170 AUC after training: 0.5
User 119170 does not improve AUC. Reverting changes.
Training on augumented user 61048 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61048 AUC after training: 0.5
User 61048 does not improve AUC. Reverting changes.
Training on augumented user 86779 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86779 AUC after training: 0.5
User 86779 does not improve AUC. Reverting changes.
Training on augumented user 86870 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86870 AUC after training: 0.5
User 86870 does not improve AUC. Reverting changes.
Training on augumented user 50167 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50167 AUC after training: 0.5
User 50167 does not improve AUC. Reverting changes.
Training on augumented user 82212 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82212 AUC after training: 0.5
User 82212 does not improve AUC. Reverting changes.
Training on augumented user 57552 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57552 AUC after training: 0.5
User 57552 does not improve AUC. Reverting changes.
Training on augumented user 61956 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61956 AUC after training: 0.5
User 61956 does not improve AUC. Reverting changes.
Training on augumented user 15804 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15804 AUC after training: 0.5
User 15804 does not improve AUC. Reverting changes.
Training on augumented user 13978 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13978 AUC after training: 0.5
User 13978 does not improve AUC. Reverting changes.
Training on augumented user 28 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28 AUC after training: 0.5
User 28 does not improve AUC. Reverting changes.
Training on augumented user 66776 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66776 AUC after training: 0.5
User 66776 does not improve AUC. Reverting changes.
Training on augumented user 81576 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81576 AUC after training: 0.5
User 81576 does not improve AUC. Reverting changes.
Training on augumented user 67603 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67603 AUC after training: 0.5
User 67603 does not improve AUC. Reverting changes.
Training on augumented user 80924 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80924 AUC after training: 0.5
User 80924 does not improve AUC. Reverting changes.
Training on augumented user 44649 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44649 AUC after training: 0.5
User 44649 does not improve AUC. Reverting changes.
Training on augumented user 73324 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73324 AUC after training: 0.5
User 73324 does not improve AUC. Reverting changes.
Training on augumented user 114866 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114866 AUC after training: 0.5
User 114866 does not improve AUC. Reverting changes.
Training on augumented user 98245 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98245 AUC after training: 0.5
User 98245 does not improve AUC. Reverting changes.
Training on augumented user 31922 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31922 AUC after training: 0.5
User 31922 does not improve AUC. Reverting changes.
Training on augumented user 35267 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35267 AUC after training: 0.5
User 35267 does not improve AUC. Reverting changes.
Training on augumented user 75734 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75734 AUC after training: 0.5
User 75734 does not improve AUC. Reverting changes.
Training on augumented user 60929 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60929 AUC after training: 0.5
User 60929 does not improve AUC. Reverting changes.
Training on augumented user 87393 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87393 AUC after training: 0.5
User 87393 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:42:31.306016] start test user 2856 118/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:42:31.901924] start test user 2856 118/568 recall augumented users by random, augumented_users = [38196, 65288, 80902, 137299, 51585, 112596, 5072, 52526, 16767, 127161, 100172, 103530, 24274, 51552, 131570, 84558, 123741, 86155, 132905, 79249, 8494, 121398, 40634, 14839, 19266, 115214, 86704, 66424, 113308, 80254, 56158, 31118, 67090, 14125, 116829, 137137, 111745, 133193, 21281, 54316, 7107, 118655, 100264, 114581, 78183, 99147, 26841, 114121, 124974, 6565]
[2024-12-02 18:42:31.925706] user = 2856 Cloud 118/568
[2024-12-02 18:42:31.943306] user = 2856 Local 118/568
[2024-12-02 18:42:31.988382] user = 2856 Local+ 118/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:42:34.546280] user = 2856 MPDA- 118/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.25
Training on augumented user 38196 0/50 current_auc = 0.25
User 38196 AUC after training: 0.25
User 38196 does not improve AUC. Reverting changes.
Training on augumented user 65288 1/50 current_auc = 0.25
User 65288 AUC after training: 0.25
User 65288 does not improve AUC. Reverting changes.
Training on augumented user 80902 2/50 current_auc = 0.25
User 80902 AUC after training: 0.25
User 80902 does not improve AUC. Reverting changes.
Training on augumented user 137299 3/50 current_auc = 0.25
User 137299 AUC after training: 0.25
User 137299 does not improve AUC. Reverting changes.
Training on augumented user 51585 4/50 current_auc = 0.25
User 51585 AUC after training: 0.25
User 51585 does not improve AUC. Reverting changes.
Training on augumented user 112596 5/50 current_auc = 0.25
User 112596 AUC after training: 0.25
User 112596 does not improve AUC. Reverting changes.
Training on augumented user 5072 6/50 current_auc = 0.25
User 5072 AUC after training: 0.25
User 5072 does not improve AUC. Reverting changes.
Training on augumented user 52526 7/50 current_auc = 0.25
User 52526 AUC after training: 0.25
User 52526 does not improve AUC. Reverting changes.
Training on augumented user 16767 8/50 current_auc = 0.25
User 16767 AUC after training: 0.25
User 16767 does not improve AUC. Reverting changes.
Training on augumented user 127161 9/50 current_auc = 0.25
User 127161 AUC after training: 0.25
User 127161 does not improve AUC. Reverting changes.
Training on augumented user 100172 10/50 current_auc = 0.25
User 100172 AUC after training: 0.25
User 100172 does not improve AUC. Reverting changes.
Training on augumented user 103530 11/50 current_auc = 0.25
User 103530 AUC after training: 0.25
User 103530 does not improve AUC. Reverting changes.
Training on augumented user 24274 12/50 current_auc = 0.25
User 24274 AUC after training: 0.25
User 24274 does not improve AUC. Reverting changes.
Training on augumented user 51552 13/50 current_auc = 0.25
User 51552 AUC after training: 0.25
User 51552 does not improve AUC. Reverting changes.
Training on augumented user 131570 14/50 current_auc = 0.25
User 131570 AUC after training: 0.25
User 131570 does not improve AUC. Reverting changes.
Training on augumented user 84558 15/50 current_auc = 0.25
User 84558 AUC after training: 0.25
User 84558 does not improve AUC. Reverting changes.
Training on augumented user 123741 16/50 current_auc = 0.25
User 123741 AUC after training: 0.25
User 123741 does not improve AUC. Reverting changes.
Training on augumented user 86155 17/50 current_auc = 0.25
User 86155 AUC after training: 0.25
User 86155 does not improve AUC. Reverting changes.
Training on augumented user 132905 18/50 current_auc = 0.25
User 132905 AUC after training: 0.25
User 132905 does not improve AUC. Reverting changes.
Training on augumented user 79249 19/50 current_auc = 0.25
User 79249 AUC after training: 0.25
User 79249 does not improve AUC. Reverting changes.
Training on augumented user 8494 20/50 current_auc = 0.25
User 8494 AUC after training: 0.25
User 8494 does not improve AUC. Reverting changes.
Training on augumented user 121398 21/50 current_auc = 0.25
User 121398 AUC after training: 0.25
User 121398 does not improve AUC. Reverting changes.
Training on augumented user 40634 22/50 current_auc = 0.25
User 40634 AUC after training: 0.25
User 40634 does not improve AUC. Reverting changes.
Training on augumented user 14839 23/50 current_auc = 0.25
User 14839 AUC after training: 0.25
User 14839 does not improve AUC. Reverting changes.
Training on augumented user 19266 24/50 current_auc = 0.25
User 19266 AUC after training: 0.25
User 19266 does not improve AUC. Reverting changes.
Training on augumented user 115214 25/50 current_auc = 0.25
User 115214 AUC after training: 0.25
User 115214 does not improve AUC. Reverting changes.
Training on augumented user 86704 26/50 current_auc = 0.25
User 86704 AUC after training: 0.25
User 86704 does not improve AUC. Reverting changes.
Training on augumented user 66424 27/50 current_auc = 0.25
User 66424 AUC after training: 0.25
User 66424 does not improve AUC. Reverting changes.
Training on augumented user 113308 28/50 current_auc = 0.25
User 113308 AUC after training: 0.25
User 113308 does not improve AUC. Reverting changes.
Training on augumented user 80254 29/50 current_auc = 0.25
User 80254 AUC after training: 0.25
User 80254 does not improve AUC. Reverting changes.
Training on augumented user 56158 30/50 current_auc = 0.25
User 56158 AUC after training: 0.25
User 56158 does not improve AUC. Reverting changes.
Training on augumented user 31118 31/50 current_auc = 0.25
User 31118 AUC after training: 0.25
User 31118 does not improve AUC. Reverting changes.
Training on augumented user 67090 32/50 current_auc = 0.25
User 67090 AUC after training: 0.25
User 67090 does not improve AUC. Reverting changes.
Training on augumented user 14125 33/50 current_auc = 0.25
User 14125 AUC after training: 0.25
User 14125 does not improve AUC. Reverting changes.
Training on augumented user 116829 34/50 current_auc = 0.25
User 116829 AUC after training: 0.25
User 116829 does not improve AUC. Reverting changes.
Training on augumented user 137137 35/50 current_auc = 0.25
User 137137 AUC after training: 0.25
User 137137 does not improve AUC. Reverting changes.
Training on augumented user 111745 36/50 current_auc = 0.25
User 111745 AUC after training: 0.25
User 111745 does not improve AUC. Reverting changes.
Training on augumented user 133193 37/50 current_auc = 0.25
User 133193 AUC after training: 0.25
User 133193 does not improve AUC. Reverting changes.
Training on augumented user 21281 38/50 current_auc = 0.25
User 21281 AUC after training: 0.25
User 21281 does not improve AUC. Reverting changes.
Training on augumented user 54316 39/50 current_auc = 0.25
User 54316 AUC after training: 0.25
User 54316 does not improve AUC. Reverting changes.
Training on augumented user 7107 40/50 current_auc = 0.25
User 7107 AUC after training: 0.25
User 7107 does not improve AUC. Reverting changes.
Training on augumented user 118655 41/50 current_auc = 0.25
User 118655 AUC after training: 0.25
User 118655 does not improve AUC. Reverting changes.
Training on augumented user 100264 42/50 current_auc = 0.25
User 100264 AUC after training: 0.25
User 100264 does not improve AUC. Reverting changes.
Training on augumented user 114581 43/50 current_auc = 0.25
User 114581 AUC after training: 0.25
User 114581 does not improve AUC. Reverting changes.
Training on augumented user 78183 44/50 current_auc = 0.25
User 78183 AUC after training: 0.25
User 78183 does not improve AUC. Reverting changes.
Training on augumented user 99147 45/50 current_auc = 0.25
User 99147 AUC after training: 0.25
User 99147 does not improve AUC. Reverting changes.
Training on augumented user 26841 46/50 current_auc = 0.25
User 26841 AUC after training: 0.25
User 26841 does not improve AUC. Reverting changes.
Training on augumented user 114121 47/50 current_auc = 0.25
User 114121 AUC after training: 0.25
User 114121 does not improve AUC. Reverting changes.
Training on augumented user 124974 48/50 current_auc = 0.25
User 124974 AUC after training: 0.25
User 124974 does not improve AUC. Reverting changes.
Training on augumented user 6565 49/50 current_auc = 0.25
User 6565 AUC after training: 0.25
User 6565 does not improve AUC. Reverting changes.
[2024-12-02 18:43:00.819809] start test user 2903 119/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:43:01.410213] start test user 2903 119/568 recall augumented users by random, augumented_users = [2897, 122025, 117252, 3756, 122097, 103534, 107743, 100678, 12513, 106812, 36816, 58655, 135091, 37570, 80713, 67767, 29665, 107072, 58062, 123598, 85891, 118548, 78422, 133927, 48708, 14078, 127011, 101660, 95191, 87865, 37683, 45206, 72937, 92979, 14075, 109839, 135655, 30264, 80887, 107185, 8658, 91333, 126332, 91154, 125445, 18767, 127476, 84002, 8797, 137350]
[2024-12-02 18:43:01.425496] user = 2903 Cloud 119/568
[2024-12-02 18:43:01.438440] user = 2903 Local 119/568
[2024-12-02 18:43:01.560335] user = 2903 Local+ 119/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:43:03.488143] user = 2903 MPDA- 119/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7463768115942029
Training on augumented user 2897 0/50 current_auc = 0.7463768115942029
User 2897 AUC after training: 0.7451690821256038
User 2897 does not improve AUC. Reverting changes.
Training on augumented user 122025 1/50 current_auc = 0.7463768115942029
User 122025 AUC after training: 0.7451690821256038
User 122025 does not improve AUC. Reverting changes.
Training on augumented user 117252 2/50 current_auc = 0.7463768115942029
User 117252 AUC after training: 0.7451690821256038
User 117252 does not improve AUC. Reverting changes.
Training on augumented user 3756 3/50 current_auc = 0.7463768115942029
User 3756 AUC after training: 0.7475845410628019
User 3756 improves AUC. Keeping the model.
Training on augumented user 122097 4/50 current_auc = 0.7475845410628019
User 122097 AUC after training: 0.7427536231884058
User 122097 does not improve AUC. Reverting changes.
Training on augumented user 103534 5/50 current_auc = 0.7475845410628019
User 103534 AUC after training: 0.7427536231884058
User 103534 does not improve AUC. Reverting changes.
Training on augumented user 107743 6/50 current_auc = 0.7475845410628019
User 107743 AUC after training: 0.7439613526570048
User 107743 does not improve AUC. Reverting changes.
Training on augumented user 100678 7/50 current_auc = 0.7475845410628019
User 100678 AUC after training: 0.7451690821256038
User 100678 does not improve AUC. Reverting changes.
Training on augumented user 12513 8/50 current_auc = 0.7475845410628019
User 12513 AUC after training: 0.7439613526570049
User 12513 does not improve AUC. Reverting changes.
Training on augumented user 106812 9/50 current_auc = 0.7475845410628019
User 106812 AUC after training: 0.7463768115942029
User 106812 does not improve AUC. Reverting changes.
Training on augumented user 36816 10/50 current_auc = 0.7475845410628019
User 36816 AUC after training: 0.745169082125604
User 36816 does not improve AUC. Reverting changes.
Training on augumented user 58655 11/50 current_auc = 0.7475845410628019
User 58655 AUC after training: 0.7463768115942029
User 58655 does not improve AUC. Reverting changes.
Training on augumented user 135091 12/50 current_auc = 0.7475845410628019
User 135091 AUC after training: 0.7463768115942029
User 135091 does not improve AUC. Reverting changes.
Training on augumented user 37570 13/50 current_auc = 0.7475845410628019
User 37570 AUC after training: 0.7451690821256038
User 37570 does not improve AUC. Reverting changes.
Training on augumented user 80713 14/50 current_auc = 0.7475845410628019
User 80713 AUC after training: 0.7451690821256038
User 80713 does not improve AUC. Reverting changes.
Training on augumented user 67767 15/50 current_auc = 0.7475845410628019
User 67767 AUC after training: 0.7463768115942029
User 67767 does not improve AUC. Reverting changes.
Training on augumented user 29665 16/50 current_auc = 0.7475845410628019
User 29665 AUC after training: 0.7451690821256038
User 29665 does not improve AUC. Reverting changes.
Training on augumented user 107072 17/50 current_auc = 0.7475845410628019
User 107072 AUC after training: 0.7451690821256038
User 107072 does not improve AUC. Reverting changes.
Training on augumented user 58062 18/50 current_auc = 0.7475845410628019
User 58062 AUC after training: 0.7451690821256038
User 58062 does not improve AUC. Reverting changes.
Training on augumented user 123598 19/50 current_auc = 0.7475845410628019
User 123598 AUC after training: 0.7451690821256038
User 123598 does not improve AUC. Reverting changes.
Training on augumented user 85891 20/50 current_auc = 0.7475845410628019
User 85891 AUC after training: 0.7451690821256038
User 85891 does not improve AUC. Reverting changes.
Training on augumented user 118548 21/50 current_auc = 0.7475845410628019
User 118548 AUC after training: 0.7451690821256038
User 118548 does not improve AUC. Reverting changes.
Training on augumented user 78422 22/50 current_auc = 0.7475845410628019
User 78422 AUC after training: 0.7463768115942029
User 78422 does not improve AUC. Reverting changes.
Training on augumented user 133927 23/50 current_auc = 0.7475845410628019
User 133927 AUC after training: 0.7451690821256038
User 133927 does not improve AUC. Reverting changes.
Training on augumented user 48708 24/50 current_auc = 0.7475845410628019
User 48708 AUC after training: 0.7463768115942029
User 48708 does not improve AUC. Reverting changes.
Training on augumented user 14078 25/50 current_auc = 0.7475845410628019
User 14078 AUC after training: 0.7475845410628019
User 14078 does not improve AUC. Reverting changes.
Training on augumented user 127011 26/50 current_auc = 0.7475845410628019
User 127011 AUC after training: 0.7463768115942029
User 127011 does not improve AUC. Reverting changes.
Training on augumented user 101660 27/50 current_auc = 0.7475845410628019
User 101660 AUC after training: 0.7475845410628019
User 101660 does not improve AUC. Reverting changes.
Training on augumented user 95191 28/50 current_auc = 0.7475845410628019
User 95191 AUC after training: 0.7463768115942029
User 95191 does not improve AUC. Reverting changes.
Training on augumented user 87865 29/50 current_auc = 0.7475845410628019
User 87865 AUC after training: 0.7463768115942029
User 87865 does not improve AUC. Reverting changes.
Training on augumented user 37683 30/50 current_auc = 0.7475845410628019
User 37683 AUC after training: 0.7439613526570049
User 37683 does not improve AUC. Reverting changes.
Training on augumented user 45206 31/50 current_auc = 0.7475845410628019
User 45206 AUC after training: 0.7463768115942029
User 45206 does not improve AUC. Reverting changes.
Training on augumented user 72937 32/50 current_auc = 0.7475845410628019
User 72937 AUC after training: 0.7451690821256038
User 72937 does not improve AUC. Reverting changes.
Training on augumented user 92979 33/50 current_auc = 0.7475845410628019
User 92979 AUC after training: 0.7451690821256038
User 92979 does not improve AUC. Reverting changes.
Training on augumented user 14075 34/50 current_auc = 0.7475845410628019
User 14075 AUC after training: 0.746376811594203
User 14075 does not improve AUC. Reverting changes.
Training on augumented user 109839 35/50 current_auc = 0.7475845410628019
User 109839 AUC after training: 0.746376811594203
User 109839 does not improve AUC. Reverting changes.
Training on augumented user 135655 36/50 current_auc = 0.7475845410628019
User 135655 AUC after training: 0.745169082125604
User 135655 does not improve AUC. Reverting changes.
Training on augumented user 30264 37/50 current_auc = 0.7475845410628019
User 30264 AUC after training: 0.7451690821256038
User 30264 does not improve AUC. Reverting changes.
Training on augumented user 80887 38/50 current_auc = 0.7475845410628019
User 80887 AUC after training: 0.7475845410628019
User 80887 does not improve AUC. Reverting changes.
Training on augumented user 107185 39/50 current_auc = 0.7475845410628019
User 107185 AUC after training: 0.746376811594203
User 107185 does not improve AUC. Reverting changes.
Training on augumented user 8658 40/50 current_auc = 0.7475845410628019
User 8658 AUC after training: 0.7439613526570048
User 8658 does not improve AUC. Reverting changes.
Training on augumented user 91333 41/50 current_auc = 0.7475845410628019
User 91333 AUC after training: 0.7451690821256038
User 91333 does not improve AUC. Reverting changes.
Training on augumented user 126332 42/50 current_auc = 0.7475845410628019
User 126332 AUC after training: 0.7451690821256038
User 126332 does not improve AUC. Reverting changes.
Training on augumented user 91154 43/50 current_auc = 0.7475845410628019
User 91154 AUC after training: 0.7439613526570049
User 91154 does not improve AUC. Reverting changes.
Training on augumented user 125445 44/50 current_auc = 0.7475845410628019
User 125445 AUC after training: 0.7463768115942029
User 125445 does not improve AUC. Reverting changes.
Training on augumented user 18767 45/50 current_auc = 0.7475845410628019
User 18767 AUC after training: 0.7439613526570048
User 18767 does not improve AUC. Reverting changes.
Training on augumented user 127476 46/50 current_auc = 0.7475845410628019
User 127476 AUC after training: 0.746376811594203
User 127476 does not improve AUC. Reverting changes.
Training on augumented user 84002 47/50 current_auc = 0.7475845410628019
User 84002 AUC after training: 0.7475845410628019
User 84002 does not improve AUC. Reverting changes.
Training on augumented user 8797 48/50 current_auc = 0.7475845410628019
User 8797 AUC after training: 0.745169082125604
User 8797 does not improve AUC. Reverting changes.
Training on augumented user 137350 49/50 current_auc = 0.7475845410628019
User 137350 AUC after training: 0.745169082125604
User 137350 does not improve AUC. Reverting changes.
[2024-12-02 18:43:31.020012] start test user 2909 120/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:43:31.467544] start test user 2909 120/568 recall augumented users by random, augumented_users = [17302, 45436, 24907, 104748, 23549, 79177, 130595, 37992, 6566, 48227, 69243, 68463, 105752, 5969, 70703, 132873, 31316, 114803, 17018, 8897, 36970, 65915, 96832, 122369, 112717, 3647, 117543, 71275, 10595, 61245, 79153, 123059, 46608, 35669, 67732, 64977, 27019, 28682, 60628, 31251, 92350, 137602, 41568, 114289, 46957, 134625, 32216, 43996, 119071, 38478]
[2024-12-02 18:43:31.482656] user = 2909 Cloud 120/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:43:31.493413] user = 2909 Local 120/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:43:31.574839] user = 2909 Local+ 120/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:43:33.460719] user = 2909 MPDA- 120/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 17302 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17302 AUC after training: 0.5
User 17302 does not improve AUC. Reverting changes.
Training on augumented user 45436 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45436 AUC after training: 0.5
User 45436 does not improve AUC. Reverting changes.
Training on augumented user 24907 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24907 AUC after training: 0.5
User 24907 does not improve AUC. Reverting changes.
Training on augumented user 104748 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104748 AUC after training: 0.5
User 104748 does not improve AUC. Reverting changes.
Training on augumented user 23549 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23549 AUC after training: 0.5
User 23549 does not improve AUC. Reverting changes.
Training on augumented user 79177 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79177 AUC after training: 0.5
User 79177 does not improve AUC. Reverting changes.
Training on augumented user 130595 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130595 AUC after training: 0.5
User 130595 does not improve AUC. Reverting changes.
Training on augumented user 37992 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37992 AUC after training: 0.5
User 37992 does not improve AUC. Reverting changes.
Training on augumented user 6566 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6566 AUC after training: 0.5
User 6566 does not improve AUC. Reverting changes.
Training on augumented user 48227 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48227 AUC after training: 0.5
User 48227 does not improve AUC. Reverting changes.
Training on augumented user 69243 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69243 AUC after training: 0.5
User 69243 does not improve AUC. Reverting changes.
Training on augumented user 68463 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68463 AUC after training: 0.5
User 68463 does not improve AUC. Reverting changes.
Training on augumented user 105752 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105752 AUC after training: 0.5
User 105752 does not improve AUC. Reverting changes.
Training on augumented user 5969 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5969 AUC after training: 0.5
User 5969 does not improve AUC. Reverting changes.
Training on augumented user 70703 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70703 AUC after training: 0.5
User 70703 does not improve AUC. Reverting changes.
Training on augumented user 132873 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132873 AUC after training: 0.5
User 132873 does not improve AUC. Reverting changes.
Training on augumented user 31316 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31316 AUC after training: 0.5
User 31316 does not improve AUC. Reverting changes.
Training on augumented user 114803 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114803 AUC after training: 0.5
User 114803 does not improve AUC. Reverting changes.
Training on augumented user 17018 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17018 AUC after training: 0.5
User 17018 does not improve AUC. Reverting changes.
Training on augumented user 8897 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8897 AUC after training: 0.5
User 8897 does not improve AUC. Reverting changes.
Training on augumented user 36970 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36970 AUC after training: 0.5
User 36970 does not improve AUC. Reverting changes.
Training on augumented user 65915 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65915 AUC after training: 0.5
User 65915 does not improve AUC. Reverting changes.
Training on augumented user 96832 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96832 AUC after training: 0.5
User 96832 does not improve AUC. Reverting changes.
Training on augumented user 122369 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122369 AUC after training: 0.5
User 122369 does not improve AUC. Reverting changes.
Training on augumented user 112717 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112717 AUC after training: 0.5
User 112717 does not improve AUC. Reverting changes.
Training on augumented user 3647 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3647 AUC after training: 0.5
User 3647 does not improve AUC. Reverting changes.
Training on augumented user 117543 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117543 AUC after training: 0.5
User 117543 does not improve AUC. Reverting changes.
Training on augumented user 71275 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71275 AUC after training: 0.5
User 71275 does not improve AUC. Reverting changes.
Training on augumented user 10595 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10595 AUC after training: 0.5
User 10595 does not improve AUC. Reverting changes.
Training on augumented user 61245 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61245 AUC after training: 0.5
User 61245 does not improve AUC. Reverting changes.
Training on augumented user 79153 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79153 AUC after training: 0.5
User 79153 does not improve AUC. Reverting changes.
Training on augumented user 123059 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123059 AUC after training: 0.5
User 123059 does not improve AUC. Reverting changes.
Training on augumented user 46608 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46608 AUC after training: 0.5
User 46608 does not improve AUC. Reverting changes.
Training on augumented user 35669 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35669 AUC after training: 0.5
User 35669 does not improve AUC. Reverting changes.
Training on augumented user 67732 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67732 AUC after training: 0.5
User 67732 does not improve AUC. Reverting changes.
Training on augumented user 64977 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64977 AUC after training: 0.5
User 64977 does not improve AUC. Reverting changes.
Training on augumented user 27019 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27019 AUC after training: 0.5
User 27019 does not improve AUC. Reverting changes.
Training on augumented user 28682 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28682 AUC after training: 0.5
User 28682 does not improve AUC. Reverting changes.
Training on augumented user 60628 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60628 AUC after training: 0.5
User 60628 does not improve AUC. Reverting changes.
Training on augumented user 31251 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31251 AUC after training: 0.5
User 31251 does not improve AUC. Reverting changes.
Training on augumented user 92350 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92350 AUC after training: 0.5
User 92350 does not improve AUC. Reverting changes.
Training on augumented user 137602 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137602 AUC after training: 0.5
User 137602 does not improve AUC. Reverting changes.
Training on augumented user 41568 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41568 AUC after training: 0.5
User 41568 does not improve AUC. Reverting changes.
Training on augumented user 114289 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114289 AUC after training: 0.5
User 114289 does not improve AUC. Reverting changes.
Training on augumented user 46957 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46957 AUC after training: 0.5
User 46957 does not improve AUC. Reverting changes.
Training on augumented user 134625 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134625 AUC after training: 0.5
User 134625 does not improve AUC. Reverting changes.
Training on augumented user 32216 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32216 AUC after training: 0.5
User 32216 does not improve AUC. Reverting changes.
Training on augumented user 43996 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43996 AUC after training: 0.5
User 43996 does not improve AUC. Reverting changes.
Training on augumented user 119071 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119071 AUC after training: 0.5
User 119071 does not improve AUC. Reverting changes.
Training on augumented user 38478 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38478 AUC after training: 0.5
User 38478 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:44:02.838802] start test user 2915 121/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:44:03.380418] start test user 2915 121/568 recall augumented users by random, augumented_users = [34352, 123208, 58078, 21952, 123697, 55605, 135871, 103492, 1548, 42652, 129661, 95197, 81681, 107988, 85166, 137700, 31441, 81581, 53249, 96248, 135249, 83209, 53955, 111282, 76922, 56332, 117026, 3570, 22336, 29151, 13306, 14322, 138086, 7707, 136362, 62467, 49730, 65380, 35351, 129101, 123391, 136179, 32917, 133112, 104316, 7252, 23218, 5681, 86053, 67944]
[2024-12-02 18:44:03.395713] user = 2915 Cloud 121/568
[2024-12-02 18:44:03.415962] user = 2915 Local 121/568
[2024-12-02 18:44:03.564510] user = 2915 Local+ 121/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:44:05.640707] user = 2915 MPDA- 121/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6295546558704452
Training on augumented user 34352 0/50 current_auc = 0.6295546558704452
User 34352 AUC after training: 0.6295546558704453
User 34352 improves AUC. Keeping the model.
Training on augumented user 123208 1/50 current_auc = 0.6295546558704453
User 123208 AUC after training: 0.6299595141700405
User 123208 improves AUC. Keeping the model.
Training on augumented user 58078 2/50 current_auc = 0.6299595141700405
User 58078 AUC after training: 0.631174089068826
User 58078 improves AUC. Keeping the model.
Training on augumented user 21952 3/50 current_auc = 0.631174089068826
User 21952 AUC after training: 0.6325910931174089
User 21952 improves AUC. Keeping the model.
Training on augumented user 123697 4/50 current_auc = 0.6325910931174089
User 123697 AUC after training: 0.6325910931174089
User 123697 does not improve AUC. Reverting changes.
Training on augumented user 55605 5/50 current_auc = 0.6325910931174089
User 55605 AUC after training: 0.632995951417004
User 55605 improves AUC. Keeping the model.
Training on augumented user 135871 6/50 current_auc = 0.632995951417004
User 135871 AUC after training: 0.6303643724696356
User 135871 does not improve AUC. Reverting changes.
Training on augumented user 103492 7/50 current_auc = 0.632995951417004
User 103492 AUC after training: 0.6244939271255061
User 103492 does not improve AUC. Reverting changes.
Training on augumented user 1548 8/50 current_auc = 0.632995951417004
User 1548 AUC after training: 0.6299595141700405
User 1548 does not improve AUC. Reverting changes.
Training on augumented user 42652 9/50 current_auc = 0.632995951417004
User 42652 AUC after training: 0.6322874493927126
User 42652 does not improve AUC. Reverting changes.
Training on augumented user 129661 10/50 current_auc = 0.632995951417004
User 129661 AUC after training: 0.63248987854251
User 129661 does not improve AUC. Reverting changes.
Training on augumented user 95197 11/50 current_auc = 0.632995951417004
User 95197 AUC after training: 0.6308704453441295
User 95197 does not improve AUC. Reverting changes.
Training on augumented user 81681 12/50 current_auc = 0.632995951417004
User 81681 AUC after training: 0.6313765182186235
User 81681 does not improve AUC. Reverting changes.
Training on augumented user 107988 13/50 current_auc = 0.632995951417004
User 107988 AUC after training: 0.6311740890688259
User 107988 does not improve AUC. Reverting changes.
Training on augumented user 85166 14/50 current_auc = 0.632995951417004
User 85166 AUC after training: 0.6314777327935223
User 85166 does not improve AUC. Reverting changes.
Training on augumented user 137700 15/50 current_auc = 0.632995951417004
User 137700 AUC after training: 0.6326923076923077
User 137700 does not improve AUC. Reverting changes.
Training on augumented user 31441 16/50 current_auc = 0.632995951417004
User 31441 AUC after training: 0.6340080971659919
User 31441 improves AUC. Keeping the model.
Training on augumented user 81581 17/50 current_auc = 0.6340080971659919
User 81581 AUC after training: 0.6319838056680163
User 81581 does not improve AUC. Reverting changes.
Training on augumented user 53249 18/50 current_auc = 0.6340080971659919
User 53249 AUC after training: 0.6331983805668016
User 53249 does not improve AUC. Reverting changes.
Training on augumented user 96248 19/50 current_auc = 0.6340080971659919
User 96248 AUC after training: 0.6322874493927125
User 96248 does not improve AUC. Reverting changes.
Training on augumented user 135249 20/50 current_auc = 0.6340080971659919
User 135249 AUC after training: 0.6321862348178138
User 135249 does not improve AUC. Reverting changes.
Training on augumented user 83209 21/50 current_auc = 0.6340080971659919
User 83209 AUC after training: 0.6334008097165991
User 83209 does not improve AUC. Reverting changes.
Training on augumented user 53955 22/50 current_auc = 0.6340080971659919
User 53955 AUC after training: 0.6321862348178138
User 53955 does not improve AUC. Reverting changes.
Training on augumented user 111282 23/50 current_auc = 0.6340080971659919
User 111282 AUC after training: 0.6336032388663968
User 111282 does not improve AUC. Reverting changes.
Training on augumented user 76922 24/50 current_auc = 0.6340080971659919
User 76922 AUC after training: 0.6324898785425102
User 76922 does not improve AUC. Reverting changes.
Training on augumented user 56332 25/50 current_auc = 0.6340080971659919
User 56332 AUC after training: 0.6304655870445344
User 56332 does not improve AUC. Reverting changes.
Training on augumented user 117026 26/50 current_auc = 0.6340080971659919
User 117026 AUC after training: 0.6319838056680162
User 117026 does not improve AUC. Reverting changes.
Training on augumented user 3570 27/50 current_auc = 0.6340080971659919
User 3570 AUC after training: 0.631578947368421
User 3570 does not improve AUC. Reverting changes.
Training on augumented user 22336 28/50 current_auc = 0.6340080971659919
User 22336 AUC after training: 0.6325910931174089
User 22336 does not improve AUC. Reverting changes.
Training on augumented user 29151 29/50 current_auc = 0.6340080971659919
User 29151 AUC after training: 0.632085020242915
User 29151 does not improve AUC. Reverting changes.
Training on augumented user 13306 30/50 current_auc = 0.6340080971659919
User 13306 AUC after training: 0.6314777327935223
User 13306 does not improve AUC. Reverting changes.
Training on augumented user 14322 31/50 current_auc = 0.6340080971659919
User 14322 AUC after training: 0.6317813765182186
User 14322 does not improve AUC. Reverting changes.
Training on augumented user 138086 32/50 current_auc = 0.6340080971659919
User 138086 AUC after training: 0.6317813765182186
User 138086 does not improve AUC. Reverting changes.
Training on augumented user 7707 33/50 current_auc = 0.6340080971659919
User 7707 AUC after training: 0.630668016194332
User 7707 does not improve AUC. Reverting changes.
Training on augumented user 136362 34/50 current_auc = 0.6340080971659919
User 136362 AUC after training: 0.6342105263157894
User 136362 improves AUC. Keeping the model.
Training on augumented user 62467 35/50 current_auc = 0.6342105263157894
User 62467 AUC after training: 0.6328947368421053
User 62467 does not improve AUC. Reverting changes.
Training on augumented user 49730 36/50 current_auc = 0.6342105263157894
User 49730 AUC after training: 0.6334008097165992
User 49730 does not improve AUC. Reverting changes.
Training on augumented user 65380 37/50 current_auc = 0.6342105263157894
User 65380 AUC after training: 0.6315789473684211
User 65380 does not improve AUC. Reverting changes.
Training on augumented user 35351 38/50 current_auc = 0.6342105263157894
User 35351 AUC after training: 0.6323886639676114
User 35351 does not improve AUC. Reverting changes.
Training on augumented user 129101 39/50 current_auc = 0.6342105263157894
User 129101 AUC after training: 0.632995951417004
User 129101 does not improve AUC. Reverting changes.
Training on augumented user 123391 40/50 current_auc = 0.6342105263157894
User 123391 AUC after training: 0.632995951417004
User 123391 does not improve AUC. Reverting changes.
Training on augumented user 136179 41/50 current_auc = 0.6342105263157894
User 136179 AUC after training: 0.6317813765182186
User 136179 does not improve AUC. Reverting changes.
Training on augumented user 32917 42/50 current_auc = 0.6342105263157894
User 32917 AUC after training: 0.6324898785425102
User 32917 does not improve AUC. Reverting changes.
Training on augumented user 133112 43/50 current_auc = 0.6342105263157894
User 133112 AUC after training: 0.6319838056680163
User 133112 does not improve AUC. Reverting changes.
Training on augumented user 104316 44/50 current_auc = 0.6342105263157894
User 104316 AUC after training: 0.632995951417004
User 104316 does not improve AUC. Reverting changes.
Training on augumented user 7252 45/50 current_auc = 0.6342105263157894
User 7252 AUC after training: 0.6321862348178138
User 7252 does not improve AUC. Reverting changes.
Training on augumented user 23218 46/50 current_auc = 0.6342105263157894
User 23218 AUC after training: 0.6340080971659919
User 23218 does not improve AUC. Reverting changes.
Training on augumented user 5681 47/50 current_auc = 0.6342105263157894
User 5681 AUC after training: 0.6350202429149798
User 5681 improves AUC. Keeping the model.
Training on augumented user 86053 48/50 current_auc = 0.6350202429149798
User 86053 AUC after training: 0.6354251012145749
User 86053 improves AUC. Keeping the model.
Training on augumented user 67944 49/50 current_auc = 0.6354251012145749
User 67944 AUC after training: 0.6359311740890687
User 67944 improves AUC. Keeping the model.
[2024-12-02 18:44:36.429347] start test user 2916 122/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:44:37.444356] start test user 2916 122/568 recall augumented users by random, augumented_users = [93042, 22994, 127268, 114650, 118935, 80260, 51782, 59485, 76231, 109174, 22232, 22515, 24103, 97601, 73969, 68315, 29011, 89693, 62009, 118818, 63208, 113539, 72407, 134254, 115364, 19633, 101139, 138259, 114566, 103351, 123158, 8073, 78029, 92347, 130380, 19485, 47438, 19377, 112056, 20093, 103504, 119375, 123659, 94240, 58303, 101337, 20804, 79212, 97212, 54119]
[2024-12-02 18:44:37.461281] user = 2916 Cloud 122/568
[2024-12-02 18:44:37.471935] user = 2916 Local 122/568
[2024-12-02 18:44:37.521327] user = 2916 Local+ 122/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:44:40.601769] user = 2916 MPDA- 122/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 93042 0/50 current_auc = 1.0
User 93042 AUC after training: 1.0
User 93042 does not improve AUC. Reverting changes.
Training on augumented user 22994 1/50 current_auc = 1.0
User 22994 AUC after training: 1.0
User 22994 does not improve AUC. Reverting changes.
Training on augumented user 127268 2/50 current_auc = 1.0
User 127268 AUC after training: 1.0
User 127268 does not improve AUC. Reverting changes.
Training on augumented user 114650 3/50 current_auc = 1.0
User 114650 AUC after training: 1.0
User 114650 does not improve AUC. Reverting changes.
Training on augumented user 118935 4/50 current_auc = 1.0
User 118935 AUC after training: 1.0
User 118935 does not improve AUC. Reverting changes.
Training on augumented user 80260 5/50 current_auc = 1.0
User 80260 AUC after training: 1.0
User 80260 does not improve AUC. Reverting changes.
Training on augumented user 51782 6/50 current_auc = 1.0
User 51782 AUC after training: 1.0
User 51782 does not improve AUC. Reverting changes.
Training on augumented user 59485 7/50 current_auc = 1.0
User 59485 AUC after training: 1.0
User 59485 does not improve AUC. Reverting changes.
Training on augumented user 76231 8/50 current_auc = 1.0
User 76231 AUC after training: 1.0
User 76231 does not improve AUC. Reverting changes.
Training on augumented user 109174 9/50 current_auc = 1.0
User 109174 AUC after training: 1.0
User 109174 does not improve AUC. Reverting changes.
Training on augumented user 22232 10/50 current_auc = 1.0
User 22232 AUC after training: 1.0
User 22232 does not improve AUC. Reverting changes.
Training on augumented user 22515 11/50 current_auc = 1.0
User 22515 AUC after training: 1.0
User 22515 does not improve AUC. Reverting changes.
Training on augumented user 24103 12/50 current_auc = 1.0
User 24103 AUC after training: 1.0
User 24103 does not improve AUC. Reverting changes.
Training on augumented user 97601 13/50 current_auc = 1.0
User 97601 AUC after training: 1.0
User 97601 does not improve AUC. Reverting changes.
Training on augumented user 73969 14/50 current_auc = 1.0
User 73969 AUC after training: 1.0
User 73969 does not improve AUC. Reverting changes.
Training on augumented user 68315 15/50 current_auc = 1.0
User 68315 AUC after training: 1.0
User 68315 does not improve AUC. Reverting changes.
Training on augumented user 29011 16/50 current_auc = 1.0
User 29011 AUC after training: 1.0
User 29011 does not improve AUC. Reverting changes.
Training on augumented user 89693 17/50 current_auc = 1.0
User 89693 AUC after training: 1.0
User 89693 does not improve AUC. Reverting changes.
Training on augumented user 62009 18/50 current_auc = 1.0
User 62009 AUC after training: 1.0
User 62009 does not improve AUC. Reverting changes.
Training on augumented user 118818 19/50 current_auc = 1.0
User 118818 AUC after training: 1.0
User 118818 does not improve AUC. Reverting changes.
Training on augumented user 63208 20/50 current_auc = 1.0
User 63208 AUC after training: 1.0
User 63208 does not improve AUC. Reverting changes.
Training on augumented user 113539 21/50 current_auc = 1.0
User 113539 AUC after training: 1.0
User 113539 does not improve AUC. Reverting changes.
Training on augumented user 72407 22/50 current_auc = 1.0
User 72407 AUC after training: 1.0
User 72407 does not improve AUC. Reverting changes.
Training on augumented user 134254 23/50 current_auc = 1.0
User 134254 AUC after training: 1.0
User 134254 does not improve AUC. Reverting changes.
Training on augumented user 115364 24/50 current_auc = 1.0
User 115364 AUC after training: 1.0
User 115364 does not improve AUC. Reverting changes.
Training on augumented user 19633 25/50 current_auc = 1.0
User 19633 AUC after training: 1.0
User 19633 does not improve AUC. Reverting changes.
Training on augumented user 101139 26/50 current_auc = 1.0
User 101139 AUC after training: 1.0
User 101139 does not improve AUC. Reverting changes.
Training on augumented user 138259 27/50 current_auc = 1.0
User 138259 AUC after training: 1.0
User 138259 does not improve AUC. Reverting changes.
Training on augumented user 114566 28/50 current_auc = 1.0
User 114566 AUC after training: 1.0
User 114566 does not improve AUC. Reverting changes.
Training on augumented user 103351 29/50 current_auc = 1.0
User 103351 AUC after training: 1.0
User 103351 does not improve AUC. Reverting changes.
Training on augumented user 123158 30/50 current_auc = 1.0
User 123158 AUC after training: 1.0
User 123158 does not improve AUC. Reverting changes.
Training on augumented user 8073 31/50 current_auc = 1.0
User 8073 AUC after training: 1.0
User 8073 does not improve AUC. Reverting changes.
Training on augumented user 78029 32/50 current_auc = 1.0
User 78029 AUC after training: 1.0
User 78029 does not improve AUC. Reverting changes.
Training on augumented user 92347 33/50 current_auc = 1.0
User 92347 AUC after training: 1.0
User 92347 does not improve AUC. Reverting changes.
Training on augumented user 130380 34/50 current_auc = 1.0
User 130380 AUC after training: 1.0
User 130380 does not improve AUC. Reverting changes.
Training on augumented user 19485 35/50 current_auc = 1.0
User 19485 AUC after training: 1.0
User 19485 does not improve AUC. Reverting changes.
Training on augumented user 47438 36/50 current_auc = 1.0
User 47438 AUC after training: 1.0
User 47438 does not improve AUC. Reverting changes.
Training on augumented user 19377 37/50 current_auc = 1.0
User 19377 AUC after training: 1.0
User 19377 does not improve AUC. Reverting changes.
Training on augumented user 112056 38/50 current_auc = 1.0
User 112056 AUC after training: 1.0
User 112056 does not improve AUC. Reverting changes.
Training on augumented user 20093 39/50 current_auc = 1.0
User 20093 AUC after training: 1.0
User 20093 does not improve AUC. Reverting changes.
Training on augumented user 103504 40/50 current_auc = 1.0
User 103504 AUC after training: 1.0
User 103504 does not improve AUC. Reverting changes.
Training on augumented user 119375 41/50 current_auc = 1.0
User 119375 AUC after training: 1.0
User 119375 does not improve AUC. Reverting changes.
Training on augumented user 123659 42/50 current_auc = 1.0
User 123659 AUC after training: 1.0
User 123659 does not improve AUC. Reverting changes.
Training on augumented user 94240 43/50 current_auc = 1.0
User 94240 AUC after training: 1.0
User 94240 does not improve AUC. Reverting changes.
Training on augumented user 58303 44/50 current_auc = 1.0
User 58303 AUC after training: 1.0
User 58303 does not improve AUC. Reverting changes.
Training on augumented user 101337 45/50 current_auc = 1.0
User 101337 AUC after training: 1.0
User 101337 does not improve AUC. Reverting changes.
Training on augumented user 20804 46/50 current_auc = 1.0
User 20804 AUC after training: 1.0
User 20804 does not improve AUC. Reverting changes.
Training on augumented user 79212 47/50 current_auc = 1.0
User 79212 AUC after training: 1.0
User 79212 does not improve AUC. Reverting changes.
Training on augumented user 97212 48/50 current_auc = 1.0
User 97212 AUC after training: 1.0
User 97212 does not improve AUC. Reverting changes.
Training on augumented user 54119 49/50 current_auc = 1.0
User 54119 AUC after training: 1.0
User 54119 does not improve AUC. Reverting changes.
[2024-12-02 18:45:08.900268] start test user 2930 123/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:45:09.531777] start test user 2930 123/568 recall augumented users by random, augumented_users = [35941, 86514, 114497, 35414, 914, 127832, 47238, 30047, 45911, 114825, 61069, 13103, 42378, 103143, 17930, 90884, 25404, 69108, 31753, 61481, 109764, 87159, 128880, 128514, 54625, 45035, 125467, 80434, 137415, 101475, 5593, 63963, 121315, 104526, 25691, 16145, 89044, 99301, 47673, 54922, 135363, 15433, 48665, 61919, 2003, 120486, 29781, 25249, 10381, 85963]
[2024-12-02 18:45:09.569630] user = 2930 Cloud 123/568
[2024-12-02 18:45:09.660756] user = 2930 Local 123/568
[2024-12-02 18:45:09.975829] user = 2930 Local+ 123/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:45:12.504808] user = 2930 MPDA- 123/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.529447968942335
Training on augumented user 35941 0/50 current_auc = 0.529447968942335
User 35941 AUC after training: 0.5301265662973835
User 35941 improves AUC. Keeping the model.
Training on augumented user 86514 1/50 current_auc = 0.5301265662973835
User 86514 AUC after training: 0.5311523529968754
User 86514 improves AUC. Keeping the model.
Training on augumented user 114497 2/50 current_auc = 0.5311523529968754
User 114497 AUC after training: 0.531610011678187
User 114497 improves AUC. Keeping the model.
Training on augumented user 35414 3/50 current_auc = 0.531610011678187
User 35414 AUC after training: 0.5304737556418269
User 35414 does not improve AUC. Reverting changes.
Training on augumented user 914 4/50 current_auc = 0.531610011678187
User 914 AUC after training: 0.5308367263201086
User 914 does not improve AUC. Reverting changes.
Training on augumented user 127832 5/50 current_auc = 0.531610011678187
User 127832 AUC after training: 0.5308367263201086
User 127832 does not improve AUC. Reverting changes.
Training on augumented user 47238 6/50 current_auc = 0.531610011678187
User 47238 AUC after training: 0.5310261023261686
User 47238 does not improve AUC. Reverting changes.
Training on augumented user 30047 7/50 current_auc = 0.531610011678187
User 30047 AUC after training: 0.5309156329893002
User 30047 does not improve AUC. Reverting changes.
Training on augumented user 45911 8/50 current_auc = 0.531610011678187
User 45911 AUC after training: 0.5312154783322287
User 45911 does not improve AUC. Reverting changes.
Training on augumented user 114825 9/50 current_auc = 0.531610011678187
User 114825 AUC after training: 0.5312154783322286
User 114825 does not improve AUC. Reverting changes.
Training on augumented user 61069 10/50 current_auc = 0.531610011678187
User 61069 AUC after training: 0.5315942303443486
User 61069 does not improve AUC. Reverting changes.
Training on augumented user 13103 11/50 current_auc = 0.531610011678187
User 13103 AUC after training: 0.531136571663037
User 13103 does not improve AUC. Reverting changes.
Training on augumented user 42378 12/50 current_auc = 0.531610011678187
User 42378 AUC after training: 0.5322254836978821
User 42378 improves AUC. Keeping the model.
Training on augumented user 103143 13/50 current_auc = 0.5322254836978821
User 103143 AUC after training: 0.5319729823564687
User 103143 does not improve AUC. Reverting changes.
Training on augumented user 17930 14/50 current_auc = 0.5322254836978821
User 17930 AUC after training: 0.5327147050468706
User 17930 improves AUC. Keeping the model.
Training on augumented user 90884 15/50 current_auc = 0.5327147050468706
User 90884 AUC after training: 0.532967206388284
User 90884 improves AUC. Keeping the model.
Training on augumented user 25404 16/50 current_auc = 0.532967206388284
User 25404 AUC after training: 0.5328567370514157
User 25404 does not improve AUC. Reverting changes.
Training on augumented user 69108 17/50 current_auc = 0.532967206388284
User 69108 AUC after training: 0.5337878357478774
User 69108 improves AUC. Keeping the model.
Training on augumented user 31753 18/50 current_auc = 0.5337878357478774
User 31753 AUC after training: 0.5344190891014109
User 31753 improves AUC. Keeping the model.
Training on augumented user 61481 19/50 current_auc = 0.5344190891014109
User 61481 AUC after training: 0.5344190891014109
User 61481 does not improve AUC. Reverting changes.
Training on augumented user 109764 20/50 current_auc = 0.5344190891014109
User 109764 AUC after training: 0.5346715904428242
User 109764 improves AUC. Keeping the model.
Training on augumented user 87159 21/50 current_auc = 0.5346715904428242
User 87159 AUC after training: 0.5344190891014109
User 87159 does not improve AUC. Reverting changes.
Training on augumented user 128880 22/50 current_auc = 0.5346715904428242
User 128880 AUC after training: 0.5342297130953508
User 128880 does not improve AUC. Reverting changes.
Training on augumented user 128514 23/50 current_auc = 0.5346715904428242
User 128514 AUC after training: 0.5343559637660574
User 128514 does not improve AUC. Reverting changes.
Training on augumented user 54625 24/50 current_auc = 0.5346715904428242
User 54625 AUC after training: 0.5345769024397942
User 54625 does not improve AUC. Reverting changes.
Training on augumented user 45035 25/50 current_auc = 0.5346715904428242
User 45035 AUC after training: 0.5345137771044409
User 45035 does not improve AUC. Reverting changes.
Training on augumented user 125467 26/50 current_auc = 0.5346715904428242
User 125467 AUC after training: 0.5343875264337342
User 125467 does not improve AUC. Reverting changes.
Training on augumented user 80434 27/50 current_auc = 0.5346715904428242
User 80434 AUC after training: 0.533819398415554
User 80434 does not improve AUC. Reverting changes.
Training on augumented user 137415 28/50 current_auc = 0.5346715904428242
User 137415 AUC after training: 0.5337247104125241
User 137415 does not improve AUC. Reverting changes.
Training on augumented user 101475 29/50 current_auc = 0.5346715904428242
User 101475 AUC after training: 0.5340245557554524
User 101475 does not improve AUC. Reverting changes.
Training on augumented user 5593 30/50 current_auc = 0.5346715904428242
User 5593 AUC after training: 0.535555345137771
User 5593 improves AUC. Keeping the model.
Training on augumented user 63963 31/50 current_auc = 0.535555345137771
User 63963 AUC after training: 0.5354290944670643
User 63963 does not improve AUC. Reverting changes.
Training on augumented user 121315 32/50 current_auc = 0.535555345137771
User 121315 AUC after training: 0.5354922198024177
User 121315 does not improve AUC. Reverting changes.
Training on augumented user 104526 33/50 current_auc = 0.535555345137771
User 104526 AUC after training: 0.5349083104503993
User 104526 does not improve AUC. Reverting changes.
Training on augumented user 25691 34/50 current_auc = 0.535555345137771
User 25691 AUC after training: 0.5350503424549443
User 25691 does not improve AUC. Reverting changes.
Training on augumented user 16145 35/50 current_auc = 0.535555345137771
User 16145 AUC after training: 0.535271281128681
User 16145 does not improve AUC. Reverting changes.
Training on augumented user 89044 36/50 current_auc = 0.535555345137771
User 89044 AUC after training: 0.5348294037812076
User 89044 does not improve AUC. Reverting changes.
Training on augumented user 99301 37/50 current_auc = 0.535555345137771
User 99301 AUC after training: 0.535081905122621
User 99301 does not improve AUC. Reverting changes.
Training on augumented user 47673 38/50 current_auc = 0.535555345137771
User 47673 AUC after training: 0.5346715904428243
User 47673 does not improve AUC. Reverting changes.
Training on augumented user 54922 39/50 current_auc = 0.535555345137771
User 54922 AUC after training: 0.5341665877599975
User 54922 does not improve AUC. Reverting changes.
Training on augumented user 135363 40/50 current_auc = 0.535555345137771
User 135363 AUC after training: 0.5351450304579742
User 135363 does not improve AUC. Reverting changes.
Training on augumented user 15433 41/50 current_auc = 0.535555345137771
User 15433 AUC after training: 0.5349556544519143
User 15433 does not improve AUC. Reverting changes.
Training on augumented user 48665 42/50 current_auc = 0.535555345137771
User 48665 AUC after training: 0.5346715904428243
User 48665 does not improve AUC. Reverting changes.
Training on augumented user 61919 43/50 current_auc = 0.535555345137771
User 61919 AUC after training: 0.5349240917842376
User 61919 does not improve AUC. Reverting changes.
Training on augumented user 2003 44/50 current_auc = 0.535555345137771
User 2003 AUC after training: 0.534987217119591
User 2003 does not improve AUC. Reverting changes.
Training on augumented user 120486 45/50 current_auc = 0.535555345137771
User 120486 AUC after training: 0.5347031531105009
User 120486 does not improve AUC. Reverting changes.
Training on augumented user 29781 46/50 current_auc = 0.535555345137771
User 29781 AUC after training: 0.5346400277751476
User 29781 does not improve AUC. Reverting changes.
Training on augumented user 25249 47/50 current_auc = 0.535555345137771
User 25249 AUC after training: 0.5357131584761544
User 25249 improves AUC. Keeping the model.
Training on augumented user 10381 48/50 current_auc = 0.5357131584761544
User 10381 AUC after training: 0.5329829877221223
User 10381 does not improve AUC. Reverting changes.
Training on augumented user 85963 49/50 current_auc = 0.5357131584761544
User 85963 AUC after training: 0.535555345137771
User 85963 does not improve AUC. Reverting changes.
[2024-12-02 18:45:44.034469] start test user 2945 124/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:45:44.478477] start test user 2945 124/568 recall augumented users by random, augumented_users = [43780, 8808, 92217, 130946, 58055, 234, 116813, 70026, 133209, 55865, 133771, 134434, 88654, 89792, 120746, 99541, 29594, 136090, 15614, 93181, 57018, 115329, 48081, 99194, 34162, 2232, 103553, 43050, 7970, 97068, 97254, 72594, 52675, 131603, 1931, 122417, 72356, 51089, 34814, 107438, 27013, 24694, 121946, 50221, 78772, 37684, 114407, 132681, 109124, 103081]
[2024-12-02 18:45:44.494087] user = 2945 Cloud 124/568
[2024-12-02 18:45:44.505468] user = 2945 Local 124/568
[2024-12-02 18:45:44.607959] user = 2945 Local+ 124/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:45:46.986396] user = 2945 MPDA- 124/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6607142857142857
Training on augumented user 43780 0/50 current_auc = 0.6607142857142857
User 43780 AUC after training: 0.6607142857142857
User 43780 does not improve AUC. Reverting changes.
Training on augumented user 8808 1/50 current_auc = 0.6607142857142857
User 8808 AUC after training: 0.6577380952380952
User 8808 does not improve AUC. Reverting changes.
Training on augumented user 92217 2/50 current_auc = 0.6607142857142857
User 92217 AUC after training: 0.6547619047619048
User 92217 does not improve AUC. Reverting changes.
Training on augumented user 130946 3/50 current_auc = 0.6607142857142857
User 130946 AUC after training: 0.6577380952380952
User 130946 does not improve AUC. Reverting changes.
Training on augumented user 58055 4/50 current_auc = 0.6607142857142857
User 58055 AUC after training: 0.6607142857142857
User 58055 does not improve AUC. Reverting changes.
Training on augumented user 234 5/50 current_auc = 0.6607142857142857
User 234 AUC after training: 0.6577380952380952
User 234 does not improve AUC. Reverting changes.
Training on augumented user 116813 6/50 current_auc = 0.6607142857142857
User 116813 AUC after training: 0.6607142857142857
User 116813 does not improve AUC. Reverting changes.
Training on augumented user 70026 7/50 current_auc = 0.6607142857142857
User 70026 AUC after training: 0.6517857142857143
User 70026 does not improve AUC. Reverting changes.
Training on augumented user 133209 8/50 current_auc = 0.6607142857142857
User 133209 AUC after training: 0.6517857142857143
User 133209 does not improve AUC. Reverting changes.
Training on augumented user 55865 9/50 current_auc = 0.6607142857142857
User 55865 AUC after training: 0.6636904761904762
User 55865 improves AUC. Keeping the model.
Training on augumented user 133771 10/50 current_auc = 0.6636904761904762
User 133771 AUC after training: 0.6636904761904762
User 133771 does not improve AUC. Reverting changes.
Training on augumented user 134434 11/50 current_auc = 0.6636904761904762
User 134434 AUC after training: 0.6488095238095237
User 134434 does not improve AUC. Reverting changes.
Training on augumented user 88654 12/50 current_auc = 0.6636904761904762
User 88654 AUC after training: 0.6726190476190477
User 88654 improves AUC. Keeping the model.
Training on augumented user 89792 13/50 current_auc = 0.6726190476190477
User 89792 AUC after training: 0.6696428571428572
User 89792 does not improve AUC. Reverting changes.
Training on augumented user 120746 14/50 current_auc = 0.6726190476190477
User 120746 AUC after training: 0.6636904761904762
User 120746 does not improve AUC. Reverting changes.
Training on augumented user 99541 15/50 current_auc = 0.6726190476190477
User 99541 AUC after training: 0.6696428571428572
User 99541 does not improve AUC. Reverting changes.
Training on augumented user 29594 16/50 current_auc = 0.6726190476190477
User 29594 AUC after training: 0.6666666666666667
User 29594 does not improve AUC. Reverting changes.
Training on augumented user 136090 17/50 current_auc = 0.6726190476190477
User 136090 AUC after training: 0.6726190476190477
User 136090 does not improve AUC. Reverting changes.
Training on augumented user 15614 18/50 current_auc = 0.6726190476190477
User 15614 AUC after training: 0.6696428571428572
User 15614 does not improve AUC. Reverting changes.
Training on augumented user 93181 19/50 current_auc = 0.6726190476190477
User 93181 AUC after training: 0.6696428571428572
User 93181 does not improve AUC. Reverting changes.
Training on augumented user 57018 20/50 current_auc = 0.6726190476190477
User 57018 AUC after training: 0.6696428571428572
User 57018 does not improve AUC. Reverting changes.
Training on augumented user 115329 21/50 current_auc = 0.6726190476190477
User 115329 AUC after training: 0.6726190476190477
User 115329 does not improve AUC. Reverting changes.
Training on augumented user 48081 22/50 current_auc = 0.6726190476190477
User 48081 AUC after training: 0.6726190476190477
User 48081 does not improve AUC. Reverting changes.
Training on augumented user 99194 23/50 current_auc = 0.6726190476190477
User 99194 AUC after training: 0.6696428571428572
User 99194 does not improve AUC. Reverting changes.
Training on augumented user 34162 24/50 current_auc = 0.6726190476190477
User 34162 AUC after training: 0.6696428571428572
User 34162 does not improve AUC. Reverting changes.
Training on augumented user 2232 25/50 current_auc = 0.6726190476190477
User 2232 AUC after training: 0.6636904761904763
User 2232 does not improve AUC. Reverting changes.
Training on augumented user 103553 26/50 current_auc = 0.6726190476190477
User 103553 AUC after training: 0.6696428571428572
User 103553 does not improve AUC. Reverting changes.
Training on augumented user 43050 27/50 current_auc = 0.6726190476190477
User 43050 AUC after training: 0.6636904761904763
User 43050 does not improve AUC. Reverting changes.
Training on augumented user 7970 28/50 current_auc = 0.6726190476190477
User 7970 AUC after training: 0.6726190476190477
User 7970 does not improve AUC. Reverting changes.
Training on augumented user 97068 29/50 current_auc = 0.6726190476190477
User 97068 AUC after training: 0.6666666666666667
User 97068 does not improve AUC. Reverting changes.
Training on augumented user 97254 30/50 current_auc = 0.6726190476190477
User 97254 AUC after training: 0.6726190476190477
User 97254 does not improve AUC. Reverting changes.
Training on augumented user 72594 31/50 current_auc = 0.6726190476190477
User 72594 AUC after training: 0.6726190476190477
User 72594 does not improve AUC. Reverting changes.
Training on augumented user 52675 32/50 current_auc = 0.6726190476190477
User 52675 AUC after training: 0.6726190476190477
User 52675 does not improve AUC. Reverting changes.
Training on augumented user 131603 33/50 current_auc = 0.6726190476190477
User 131603 AUC after training: 0.6666666666666667
User 131603 does not improve AUC. Reverting changes.
Training on augumented user 1931 34/50 current_auc = 0.6726190476190477
User 1931 AUC after training: 0.6726190476190477
User 1931 does not improve AUC. Reverting changes.
Training on augumented user 122417 35/50 current_auc = 0.6726190476190477
User 122417 AUC after training: 0.6696428571428572
User 122417 does not improve AUC. Reverting changes.
Training on augumented user 72356 36/50 current_auc = 0.6726190476190477
User 72356 AUC after training: 0.6696428571428572
User 72356 does not improve AUC. Reverting changes.
Training on augumented user 51089 37/50 current_auc = 0.6726190476190477
User 51089 AUC after training: 0.6666666666666666
User 51089 does not improve AUC. Reverting changes.
Training on augumented user 34814 38/50 current_auc = 0.6726190476190477
User 34814 AUC after training: 0.6726190476190477
User 34814 does not improve AUC. Reverting changes.
Training on augumented user 107438 39/50 current_auc = 0.6726190476190477
User 107438 AUC after training: 0.6696428571428572
User 107438 does not improve AUC. Reverting changes.
Training on augumented user 27013 40/50 current_auc = 0.6726190476190477
User 27013 AUC after training: 0.6726190476190477
User 27013 does not improve AUC. Reverting changes.
Training on augumented user 24694 41/50 current_auc = 0.6726190476190477
User 24694 AUC after training: 0.6636904761904762
User 24694 does not improve AUC. Reverting changes.
Training on augumented user 121946 42/50 current_auc = 0.6726190476190477
User 121946 AUC after training: 0.6666666666666667
User 121946 does not improve AUC. Reverting changes.
Training on augumented user 50221 43/50 current_auc = 0.6726190476190477
User 50221 AUC after training: 0.6636904761904762
User 50221 does not improve AUC. Reverting changes.
Training on augumented user 78772 44/50 current_auc = 0.6726190476190477
User 78772 AUC after training: 0.6696428571428572
User 78772 does not improve AUC. Reverting changes.
Training on augumented user 37684 45/50 current_auc = 0.6726190476190477
User 37684 AUC after training: 0.6726190476190477
User 37684 does not improve AUC. Reverting changes.
Training on augumented user 114407 46/50 current_auc = 0.6726190476190477
User 114407 AUC after training: 0.6726190476190477
User 114407 does not improve AUC. Reverting changes.
Training on augumented user 132681 47/50 current_auc = 0.6726190476190477
User 132681 AUC after training: 0.6696428571428572
User 132681 does not improve AUC. Reverting changes.
Training on augumented user 109124 48/50 current_auc = 0.6726190476190477
User 109124 AUC after training: 0.6696428571428571
User 109124 does not improve AUC. Reverting changes.
Training on augumented user 103081 49/50 current_auc = 0.6726190476190477
User 103081 AUC after training: 0.6726190476190477
User 103081 does not improve AUC. Reverting changes.
[2024-12-02 18:46:13.474239] start test user 2955 125/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:46:13.906592] start test user 2955 125/568 recall augumented users by random, augumented_users = [59899, 22900, 9942, 129511, 110035, 1, 15233, 94179, 126068, 96361, 67000, 65222, 49047, 108600, 1124, 13719, 53560, 72555, 33267, 14432, 73547, 129319, 112508, 55759, 50348, 81792, 98732, 116492, 118543, 104057, 55599, 75249, 31461, 18588, 93473, 6146, 76612, 61597, 120313, 77562, 85564, 8139, 26474, 96024, 125048, 50625, 89214, 35224, 94458, 9550]
[2024-12-02 18:46:13.921041] user = 2955 Cloud 125/568
[2024-12-02 18:46:13.934246] user = 2955 Local 125/568
[2024-12-02 18:46:14.005426] user = 2955 Local+ 125/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:46:16.553147] user = 2955 MPDA- 125/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5885750962772786
Training on augumented user 59899 0/50 current_auc = 0.5885750962772786
User 59899 AUC after training: 0.5879332477535302
User 59899 does not improve AUC. Reverting changes.
Training on augumented user 22900 1/50 current_auc = 0.5885750962772786
User 22900 AUC after training: 0.5898587933247753
User 22900 improves AUC. Keeping the model.
Training on augumented user 9942 2/50 current_auc = 0.5898587933247753
User 9942 AUC after training: 0.5879332477535302
User 9942 does not improve AUC. Reverting changes.
Training on augumented user 129511 3/50 current_auc = 0.5898587933247753
User 129511 AUC after training: 0.5898587933247754
User 129511 improves AUC. Keeping the model.
Training on augumented user 110035 4/50 current_auc = 0.5898587933247754
User 110035 AUC after training: 0.5885750962772787
User 110035 does not improve AUC. Reverting changes.
Training on augumented user 1 5/50 current_auc = 0.5898587933247754
User 1 AUC after training: 0.5866495507060334
User 1 does not improve AUC. Reverting changes.
Training on augumented user 15233 6/50 current_auc = 0.5898587933247754
User 15233 AUC after training: 0.5866495507060334
User 15233 does not improve AUC. Reverting changes.
Training on augumented user 94179 7/50 current_auc = 0.5898587933247754
User 94179 AUC after training: 0.5885750962772786
User 94179 does not improve AUC. Reverting changes.
Training on augumented user 126068 8/50 current_auc = 0.5898587933247754
User 126068 AUC after training: 0.5885750962772784
User 126068 does not improve AUC. Reverting changes.
Training on augumented user 96361 9/50 current_auc = 0.5898587933247754
User 96361 AUC after training: 0.5892169448010269
User 96361 does not improve AUC. Reverting changes.
Training on augumented user 67000 10/50 current_auc = 0.5898587933247754
User 67000 AUC after training: 0.5872913992297817
User 67000 does not improve AUC. Reverting changes.
Training on augumented user 65222 11/50 current_auc = 0.5898587933247754
User 65222 AUC after training: 0.5892169448010269
User 65222 does not improve AUC. Reverting changes.
Training on augumented user 49047 12/50 current_auc = 0.5898587933247754
User 49047 AUC after training: 0.5879332477535302
User 49047 does not improve AUC. Reverting changes.
Training on augumented user 108600 13/50 current_auc = 0.5898587933247754
User 108600 AUC after training: 0.5898587933247754
User 108600 does not improve AUC. Reverting changes.
Training on augumented user 1124 14/50 current_auc = 0.5898587933247754
User 1124 AUC after training: 0.5892169448010269
User 1124 does not improve AUC. Reverting changes.
Training on augumented user 13719 15/50 current_auc = 0.5898587933247754
User 13719 AUC after training: 0.5905006418485237
User 13719 improves AUC. Keeping the model.
Training on augumented user 53560 16/50 current_auc = 0.5905006418485237
User 53560 AUC after training: 0.5885750962772786
User 53560 does not improve AUC. Reverting changes.
Training on augumented user 72555 17/50 current_auc = 0.5905006418485237
User 72555 AUC after training: 0.5911424903722722
User 72555 improves AUC. Keeping the model.
Training on augumented user 33267 18/50 current_auc = 0.5911424903722722
User 33267 AUC after training: 0.5905006418485237
User 33267 does not improve AUC. Reverting changes.
Training on augumented user 14432 19/50 current_auc = 0.5911424903722722
User 14432 AUC after training: 0.5917843388960206
User 14432 improves AUC. Keeping the model.
Training on augumented user 73547 20/50 current_auc = 0.5917843388960206
User 73547 AUC after training: 0.5917843388960206
User 73547 does not improve AUC. Reverting changes.
Training on augumented user 129319 21/50 current_auc = 0.5917843388960206
User 129319 AUC after training: 0.5911424903722722
User 129319 does not improve AUC. Reverting changes.
Training on augumented user 112508 22/50 current_auc = 0.5917843388960206
User 112508 AUC after training: 0.5911424903722722
User 112508 does not improve AUC. Reverting changes.
Training on augumented user 55759 23/50 current_auc = 0.5917843388960206
User 55759 AUC after training: 0.5872913992297818
User 55759 does not improve AUC. Reverting changes.
Training on augumented user 50348 24/50 current_auc = 0.5917843388960206
User 50348 AUC after training: 0.5917843388960206
User 50348 does not improve AUC. Reverting changes.
Training on augumented user 81792 25/50 current_auc = 0.5917843388960206
User 81792 AUC after training: 0.5917843388960206
User 81792 does not improve AUC. Reverting changes.
Training on augumented user 98732 26/50 current_auc = 0.5917843388960206
User 98732 AUC after training: 0.5911424903722722
User 98732 does not improve AUC. Reverting changes.
Training on augumented user 116492 27/50 current_auc = 0.5917843388960206
User 116492 AUC after training: 0.5895378690629012
User 116492 does not improve AUC. Reverting changes.
Training on augumented user 118543 28/50 current_auc = 0.5917843388960206
User 118543 AUC after training: 0.5892169448010269
User 118543 does not improve AUC. Reverting changes.
Training on augumented user 104057 29/50 current_auc = 0.5917843388960206
User 104057 AUC after training: 0.5917843388960204
User 104057 does not improve AUC. Reverting changes.
Training on augumented user 55599 30/50 current_auc = 0.5917843388960206
User 55599 AUC after training: 0.5911424903722722
User 55599 does not improve AUC. Reverting changes.
Training on augumented user 75249 31/50 current_auc = 0.5917843388960206
User 75249 AUC after training: 0.5911424903722722
User 75249 does not improve AUC. Reverting changes.
Training on augumented user 31461 32/50 current_auc = 0.5917843388960206
User 31461 AUC after training: 0.5905006418485238
User 31461 does not improve AUC. Reverting changes.
Training on augumented user 18588 33/50 current_auc = 0.5917843388960206
User 18588 AUC after training: 0.5860077021822849
User 18588 does not improve AUC. Reverting changes.
Training on augumented user 93473 34/50 current_auc = 0.5917843388960206
User 93473 AUC after training: 0.5898587933247754
User 93473 does not improve AUC. Reverting changes.
Training on augumented user 6146 35/50 current_auc = 0.5917843388960206
User 6146 AUC after training: 0.5911424903722722
User 6146 does not improve AUC. Reverting changes.
Training on augumented user 76612 36/50 current_auc = 0.5917843388960206
User 76612 AUC after training: 0.5911424903722722
User 76612 does not improve AUC. Reverting changes.
Training on augumented user 61597 37/50 current_auc = 0.5917843388960206
User 61597 AUC after training: 0.5911424903722722
User 61597 does not improve AUC. Reverting changes.
Training on augumented user 120313 38/50 current_auc = 0.5917843388960206
User 120313 AUC after training: 0.5905006418485237
User 120313 does not improve AUC. Reverting changes.
Training on augumented user 77562 39/50 current_auc = 0.5917843388960206
User 77562 AUC after training: 0.5917843388960206
User 77562 does not improve AUC. Reverting changes.
Training on augumented user 85564 40/50 current_auc = 0.5917843388960206
User 85564 AUC after training: 0.5911424903722722
User 85564 does not improve AUC. Reverting changes.
Training on augumented user 8139 41/50 current_auc = 0.5917843388960206
User 8139 AUC after training: 0.5905006418485237
User 8139 does not improve AUC. Reverting changes.
Training on augumented user 26474 42/50 current_auc = 0.5917843388960206
User 26474 AUC after training: 0.5917843388960206
User 26474 does not improve AUC. Reverting changes.
Training on augumented user 96024 43/50 current_auc = 0.5917843388960206
User 96024 AUC after training: 0.5937098844672657
User 96024 improves AUC. Keeping the model.
Training on augumented user 125048 44/50 current_auc = 0.5937098844672657
User 125048 AUC after training: 0.5921052631578948
User 125048 does not improve AUC. Reverting changes.
Training on augumented user 50625 45/50 current_auc = 0.5937098844672657
User 50625 AUC after training: 0.5937098844672657
User 50625 does not improve AUC. Reverting changes.
Training on augumented user 89214 46/50 current_auc = 0.5937098844672657
User 89214 AUC after training: 0.5930680359435173
User 89214 does not improve AUC. Reverting changes.
Training on augumented user 35224 47/50 current_auc = 0.5937098844672657
User 35224 AUC after training: 0.5905006418485237
User 35224 does not improve AUC. Reverting changes.
Training on augumented user 94458 48/50 current_auc = 0.5937098844672657
User 94458 AUC after training: 0.5937098844672657
User 94458 does not improve AUC. Reverting changes.
Training on augumented user 9550 49/50 current_auc = 0.5937098844672657
User 9550 AUC after training: 0.5930680359435174
User 9550 does not improve AUC. Reverting changes.
[2024-12-02 18:46:45.857845] start test user 2970 126/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:46:46.328466] start test user 2970 126/568 recall augumented users by random, augumented_users = [137255, 41650, 68598, 80604, 134210, 23901, 75159, 100324, 90357, 82988, 12647, 74191, 50935, 6631, 108065, 85026, 92080, 78953, 65824, 71170, 3089, 47507, 55107, 5073, 122753, 107436, 110226, 76291, 74872, 93918, 106179, 80515, 70930, 21320, 60265, 48690, 108995, 26982, 27365, 78449, 132331, 130038, 57664, 129539, 54470, 111119, 123887, 88489, 13577, 48429]
[2024-12-02 18:46:46.343471] user = 2970 Cloud 126/568
[2024-12-02 18:46:46.353003] user = 2970 Local 126/568
[2024-12-02 18:46:46.423293] user = 2970 Local+ 126/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:46:49.496678] user = 2970 MPDA- 126/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7083333333333333
Training on augumented user 137255 0/50 current_auc = 0.7083333333333333
User 137255 AUC after training: 0.7083333333333333
User 137255 does not improve AUC. Reverting changes.
Training on augumented user 41650 1/50 current_auc = 0.7083333333333333
User 41650 AUC after training: 0.7083333333333333
User 41650 does not improve AUC. Reverting changes.
Training on augumented user 68598 2/50 current_auc = 0.7083333333333333
User 68598 AUC after training: 0.7083333333333333
User 68598 does not improve AUC. Reverting changes.
Training on augumented user 80604 3/50 current_auc = 0.7083333333333333
User 80604 AUC after training: 0.7083333333333333
User 80604 does not improve AUC. Reverting changes.
Training on augumented user 134210 4/50 current_auc = 0.7083333333333333
User 134210 AUC after training: 0.7083333333333333
User 134210 does not improve AUC. Reverting changes.
Training on augumented user 23901 5/50 current_auc = 0.7083333333333333
User 23901 AUC after training: 0.7083333333333333
User 23901 does not improve AUC. Reverting changes.
Training on augumented user 75159 6/50 current_auc = 0.7083333333333333
User 75159 AUC after training: 0.7083333333333333
User 75159 does not improve AUC. Reverting changes.
Training on augumented user 100324 7/50 current_auc = 0.7083333333333333
User 100324 AUC after training: 0.7083333333333333
User 100324 does not improve AUC. Reverting changes.
Training on augumented user 90357 8/50 current_auc = 0.7083333333333333
User 90357 AUC after training: 0.7083333333333333
User 90357 does not improve AUC. Reverting changes.
Training on augumented user 82988 9/50 current_auc = 0.7083333333333333
User 82988 AUC after training: 0.7083333333333333
User 82988 does not improve AUC. Reverting changes.
Training on augumented user 12647 10/50 current_auc = 0.7083333333333333
User 12647 AUC after training: 0.7083333333333333
User 12647 does not improve AUC. Reverting changes.
Training on augumented user 74191 11/50 current_auc = 0.7083333333333333
User 74191 AUC after training: 0.7083333333333333
User 74191 does not improve AUC. Reverting changes.
Training on augumented user 50935 12/50 current_auc = 0.7083333333333333
User 50935 AUC after training: 0.7083333333333333
User 50935 does not improve AUC. Reverting changes.
Training on augumented user 6631 13/50 current_auc = 0.7083333333333333
User 6631 AUC after training: 0.7083333333333333
User 6631 does not improve AUC. Reverting changes.
Training on augumented user 108065 14/50 current_auc = 0.7083333333333333
User 108065 AUC after training: 0.7083333333333333
User 108065 does not improve AUC. Reverting changes.
Training on augumented user 85026 15/50 current_auc = 0.7083333333333333
User 85026 AUC after training: 0.7083333333333333
User 85026 does not improve AUC. Reverting changes.
Training on augumented user 92080 16/50 current_auc = 0.7083333333333333
User 92080 AUC after training: 0.7083333333333333
User 92080 does not improve AUC. Reverting changes.
Training on augumented user 78953 17/50 current_auc = 0.7083333333333333
User 78953 AUC after training: 0.7083333333333333
User 78953 does not improve AUC. Reverting changes.
Training on augumented user 65824 18/50 current_auc = 0.7083333333333333
User 65824 AUC after training: 0.7083333333333333
User 65824 does not improve AUC. Reverting changes.
Training on augumented user 71170 19/50 current_auc = 0.7083333333333333
User 71170 AUC after training: 0.75
User 71170 improves AUC. Keeping the model.
Training on augumented user 3089 20/50 current_auc = 0.75
User 3089 AUC after training: 0.75
User 3089 does not improve AUC. Reverting changes.
Training on augumented user 47507 21/50 current_auc = 0.75
User 47507 AUC after training: 0.75
User 47507 does not improve AUC. Reverting changes.
Training on augumented user 55107 22/50 current_auc = 0.75
User 55107 AUC after training: 0.75
User 55107 does not improve AUC. Reverting changes.
Training on augumented user 5073 23/50 current_auc = 0.75
User 5073 AUC after training: 0.75
User 5073 does not improve AUC. Reverting changes.
Training on augumented user 122753 24/50 current_auc = 0.75
User 122753 AUC after training: 0.75
User 122753 does not improve AUC. Reverting changes.
Training on augumented user 107436 25/50 current_auc = 0.75
User 107436 AUC after training: 0.75
User 107436 does not improve AUC. Reverting changes.
Training on augumented user 110226 26/50 current_auc = 0.75
User 110226 AUC after training: 0.75
User 110226 does not improve AUC. Reverting changes.
Training on augumented user 76291 27/50 current_auc = 0.75
User 76291 AUC after training: 0.75
User 76291 does not improve AUC. Reverting changes.
Training on augumented user 74872 28/50 current_auc = 0.75
User 74872 AUC after training: 0.75
User 74872 does not improve AUC. Reverting changes.
Training on augumented user 93918 29/50 current_auc = 0.75
User 93918 AUC after training: 0.75
User 93918 does not improve AUC. Reverting changes.
Training on augumented user 106179 30/50 current_auc = 0.75
User 106179 AUC after training: 0.75
User 106179 does not improve AUC. Reverting changes.
Training on augumented user 80515 31/50 current_auc = 0.75
User 80515 AUC after training: 0.75
User 80515 does not improve AUC. Reverting changes.
Training on augumented user 70930 32/50 current_auc = 0.75
User 70930 AUC after training: 0.75
User 70930 does not improve AUC. Reverting changes.
Training on augumented user 21320 33/50 current_auc = 0.75
User 21320 AUC after training: 0.75
User 21320 does not improve AUC. Reverting changes.
Training on augumented user 60265 34/50 current_auc = 0.75
User 60265 AUC after training: 0.75
User 60265 does not improve AUC. Reverting changes.
Training on augumented user 48690 35/50 current_auc = 0.75
User 48690 AUC after training: 0.75
User 48690 does not improve AUC. Reverting changes.
Training on augumented user 108995 36/50 current_auc = 0.75
User 108995 AUC after training: 0.75
User 108995 does not improve AUC. Reverting changes.
Training on augumented user 26982 37/50 current_auc = 0.75
User 26982 AUC after training: 0.75
User 26982 does not improve AUC. Reverting changes.
Training on augumented user 27365 38/50 current_auc = 0.75
User 27365 AUC after training: 0.75
User 27365 does not improve AUC. Reverting changes.
Training on augumented user 78449 39/50 current_auc = 0.75
User 78449 AUC after training: 0.75
User 78449 does not improve AUC. Reverting changes.
Training on augumented user 132331 40/50 current_auc = 0.75
User 132331 AUC after training: 0.75
User 132331 does not improve AUC. Reverting changes.
Training on augumented user 130038 41/50 current_auc = 0.75
User 130038 AUC after training: 0.75
User 130038 does not improve AUC. Reverting changes.
Training on augumented user 57664 42/50 current_auc = 0.75
User 57664 AUC after training: 0.75
User 57664 does not improve AUC. Reverting changes.
Training on augumented user 129539 43/50 current_auc = 0.75
User 129539 AUC after training: 0.75
User 129539 does not improve AUC. Reverting changes.
Training on augumented user 54470 44/50 current_auc = 0.75
User 54470 AUC after training: 0.75
User 54470 does not improve AUC. Reverting changes.
Training on augumented user 111119 45/50 current_auc = 0.75
User 111119 AUC after training: 0.75
User 111119 does not improve AUC. Reverting changes.
Training on augumented user 123887 46/50 current_auc = 0.75
User 123887 AUC after training: 0.75
User 123887 does not improve AUC. Reverting changes.
Training on augumented user 88489 47/50 current_auc = 0.75
User 88489 AUC after training: 0.75
User 88489 does not improve AUC. Reverting changes.
Training on augumented user 13577 48/50 current_auc = 0.75
User 13577 AUC after training: 0.75
User 13577 does not improve AUC. Reverting changes.
Training on augumented user 48429 49/50 current_auc = 0.75
User 48429 AUC after training: 0.75
User 48429 does not improve AUC. Reverting changes.
[2024-12-02 18:47:23.441967] start test user 2974 127/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:47:23.903368] start test user 2974 127/568 recall augumented users by random, augumented_users = [73316, 41865, 35886, 113852, 20083, 23829, 108022, 95393, 104139, 35409, 73393, 19198, 63495, 111453, 50001, 90025, 7421, 27993, 125314, 121006, 46506, 5240, 89423, 85737, 62786, 102495, 39568, 52033, 104891, 60472, 90397, 111997, 15667, 13313, 67722, 51233, 114167, 78778, 557, 41840, 116630, 83279, 98936, 60094, 38996, 95513, 109339, 10943, 117304, 111406]
[2024-12-02 18:47:23.918453] user = 2974 Cloud 127/568
[2024-12-02 18:47:23.941650] user = 2974 Local 127/568
[2024-12-02 18:47:23.994478] user = 2974 Local+ 127/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:47:26.812556] user = 2974 MPDA- 127/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7732017732017732
Training on augumented user 73316 0/50 current_auc = 0.7732017732017732
User 73316 AUC after training: 0.773058773058773
User 73316 does not improve AUC. Reverting changes.
Training on augumented user 41865 1/50 current_auc = 0.7732017732017732
User 41865 AUC after training: 0.7723795223795225
User 41865 does not improve AUC. Reverting changes.
Training on augumented user 35886 2/50 current_auc = 0.7732017732017732
User 35886 AUC after training: 0.7724867724867726
User 35886 does not improve AUC. Reverting changes.
Training on augumented user 113852 3/50 current_auc = 0.7732017732017732
User 113852 AUC after training: 0.7728442728442729
User 113852 does not improve AUC. Reverting changes.
Training on augumented user 20083 4/50 current_auc = 0.7732017732017732
User 20083 AUC after training: 0.7726297726297727
User 20083 does not improve AUC. Reverting changes.
Training on augumented user 23829 5/50 current_auc = 0.7732017732017732
User 23829 AUC after training: 0.7733447733447734
User 23829 improves AUC. Keeping the model.
Training on augumented user 108022 6/50 current_auc = 0.7733447733447734
User 108022 AUC after training: 0.7730230230230231
User 108022 does not improve AUC. Reverting changes.
Training on augumented user 95393 7/50 current_auc = 0.7733447733447734
User 95393 AUC after training: 0.7734162734162734
User 95393 improves AUC. Keeping the model.
Training on augumented user 104139 8/50 current_auc = 0.7734162734162734
User 104139 AUC after training: 0.7736665236665237
User 104139 improves AUC. Keeping the model.
Training on augumented user 35409 9/50 current_auc = 0.7736665236665237
User 35409 AUC after training: 0.7734162734162734
User 35409 does not improve AUC. Reverting changes.
Training on augumented user 73393 10/50 current_auc = 0.7736665236665237
User 73393 AUC after training: 0.7728442728442729
User 73393 does not improve AUC. Reverting changes.
Training on augumented user 19198 11/50 current_auc = 0.7736665236665237
User 19198 AUC after training: 0.7735235235235236
User 19198 does not improve AUC. Reverting changes.
Training on augumented user 63495 12/50 current_auc = 0.7736665236665237
User 63495 AUC after training: 0.772987272987273
User 63495 does not improve AUC. Reverting changes.
Training on augumented user 111453 13/50 current_auc = 0.7736665236665237
User 111453 AUC after training: 0.7734520234520236
User 111453 does not improve AUC. Reverting changes.
Training on augumented user 50001 14/50 current_auc = 0.7736665236665237
User 50001 AUC after training: 0.7713785213785215
User 50001 does not improve AUC. Reverting changes.
Training on augumented user 90025 15/50 current_auc = 0.7736665236665237
User 90025 AUC after training: 0.7737380237380238
User 90025 improves AUC. Keeping the model.
Training on augumented user 7421 16/50 current_auc = 0.7737380237380238
User 7421 AUC after training: 0.7737380237380238
User 7421 does not improve AUC. Reverting changes.
Training on augumented user 27993 17/50 current_auc = 0.7737380237380238
User 27993 AUC after training: 0.772057772057772
User 27993 does not improve AUC. Reverting changes.
Training on augumented user 125314 18/50 current_auc = 0.7737380237380238
User 125314 AUC after training: 0.7732732732732732
User 125314 does not improve AUC. Reverting changes.
Training on augumented user 121006 19/50 current_auc = 0.7737380237380238
User 121006 AUC after training: 0.7734520234520235
User 121006 does not improve AUC. Reverting changes.
Training on augumented user 46506 20/50 current_auc = 0.7737380237380238
User 46506 AUC after training: 0.773988273988274
User 46506 improves AUC. Keeping the model.
Training on augumented user 5240 21/50 current_auc = 0.773988273988274
User 5240 AUC after training: 0.7735592735592736
User 5240 does not improve AUC. Reverting changes.
Training on augumented user 89423 22/50 current_auc = 0.773988273988274
User 89423 AUC after training: 0.7734877734877735
User 89423 does not improve AUC. Reverting changes.
Training on augumented user 85737 23/50 current_auc = 0.773988273988274
User 85737 AUC after training: 0.7734162734162735
User 85737 does not improve AUC. Reverting changes.
Training on augumented user 62786 24/50 current_auc = 0.773988273988274
User 62786 AUC after training: 0.7737737737737738
User 62786 does not improve AUC. Reverting changes.
Training on augumented user 102495 25/50 current_auc = 0.773988273988274
User 102495 AUC after training: 0.7732732732732732
User 102495 does not improve AUC. Reverting changes.
Training on augumented user 39568 26/50 current_auc = 0.773988273988274
User 39568 AUC after training: 0.7736307736307737
User 39568 does not improve AUC. Reverting changes.
Training on augumented user 52033 27/50 current_auc = 0.773988273988274
User 52033 AUC after training: 0.7738452738452739
User 52033 does not improve AUC. Reverting changes.
Training on augumented user 104891 28/50 current_auc = 0.773988273988274
User 104891 AUC after training: 0.7734162734162734
User 104891 does not improve AUC. Reverting changes.
Training on augumented user 60472 29/50 current_auc = 0.773988273988274
User 60472 AUC after training: 0.7744172744172745
User 60472 improves AUC. Keeping the model.
Training on augumented user 90397 30/50 current_auc = 0.7744172744172745
User 90397 AUC after training: 0.7749177749177749
User 90397 improves AUC. Keeping the model.
Training on augumented user 111997 31/50 current_auc = 0.7749177749177749
User 111997 AUC after training: 0.7754540254540254
User 111997 improves AUC. Keeping the model.
Training on augumented user 15667 32/50 current_auc = 0.7754540254540254
User 15667 AUC after training: 0.7755255255255256
User 15667 improves AUC. Keeping the model.
Training on augumented user 13313 33/50 current_auc = 0.7755255255255256
User 13313 AUC after training: 0.7748462748462749
User 13313 does not improve AUC. Reverting changes.
Training on augumented user 67722 34/50 current_auc = 0.7755255255255256
User 67722 AUC after training: 0.771986271986272
User 67722 does not improve AUC. Reverting changes.
Training on augumented user 51233 35/50 current_auc = 0.7755255255255256
User 51233 AUC after training: 0.7747390247390247
User 51233 does not improve AUC. Reverting changes.
Training on augumented user 114167 36/50 current_auc = 0.7755255255255256
User 114167 AUC after training: 0.7755255255255256
User 114167 does not improve AUC. Reverting changes.
Training on augumented user 78778 37/50 current_auc = 0.7755255255255256
User 78778 AUC after training: 0.7755970255970256
User 78778 improves AUC. Keeping the model.
Training on augumented user 557 38/50 current_auc = 0.7755970255970256
User 557 AUC after training: 0.774989274989275
User 557 does not improve AUC. Reverting changes.
Training on augumented user 41840 39/50 current_auc = 0.7755970255970256
User 41840 AUC after training: 0.7744172744172745
User 41840 does not improve AUC. Reverting changes.
Training on augumented user 116630 40/50 current_auc = 0.7755970255970256
User 116630 AUC after training: 0.7753110253110252
User 116630 does not improve AUC. Reverting changes.
Training on augumented user 83279 41/50 current_auc = 0.7755970255970256
User 83279 AUC after training: 0.7748820248820248
User 83279 does not improve AUC. Reverting changes.
Training on augumented user 98936 42/50 current_auc = 0.7755970255970256
User 98936 AUC after training: 0.7753467753467753
User 98936 does not improve AUC. Reverting changes.
Training on augumented user 60094 43/50 current_auc = 0.7755970255970256
User 60094 AUC after training: 0.774989274989275
User 60094 does not improve AUC. Reverting changes.
Training on augumented user 38996 44/50 current_auc = 0.7755970255970256
User 38996 AUC after training: 0.7747390247390247
User 38996 does not improve AUC. Reverting changes.
Training on augumented user 95513 45/50 current_auc = 0.7755970255970256
User 95513 AUC after training: 0.7743457743457743
User 95513 does not improve AUC. Reverting changes.
Training on augumented user 109339 46/50 current_auc = 0.7755970255970256
User 109339 AUC after training: 0.7724867724867724
User 109339 does not improve AUC. Reverting changes.
Training on augumented user 10943 47/50 current_auc = 0.7755970255970256
User 10943 AUC after training: 0.7738452738452738
User 10943 does not improve AUC. Reverting changes.
Training on augumented user 117304 48/50 current_auc = 0.7755970255970256
User 117304 AUC after training: 0.7758115258115258
User 117304 improves AUC. Keeping the model.
Training on augumented user 111406 49/50 current_auc = 0.7758115258115258
User 111406 AUC after training: 0.774882024882025
User 111406 does not improve AUC. Reverting changes.
[2024-12-02 18:48:00.511410] start test user 2988 128/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:48:01.159145] start test user 2988 128/568 recall augumented users by random, augumented_users = [85857, 19544, 133145, 36573, 90319, 134017, 98828, 124913, 25662, 68370, 133440, 77076, 93142, 11866, 81807, 138125, 96416, 49534, 18770, 91371, 118740, 107108, 83752, 79152, 80110, 27496, 36031, 12503, 42267, 30810, 830, 88554, 91418, 51756, 108473, 17973, 90056, 134511, 74325, 1932, 117084, 87319, 64994, 74536, 22806, 136243, 69739, 112321, 80028, 99856]
[2024-12-02 18:48:01.181147] user = 2988 Cloud 128/568
[2024-12-02 18:48:01.209445] user = 2988 Local 128/568
[2024-12-02 18:48:01.498912] user = 2988 Local+ 128/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:48:03.684487] user = 2988 MPDA- 128/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5214634146341464
Training on augumented user 85857 0/50 current_auc = 0.5214634146341464
User 85857 AUC after training: 0.5213414634146342
User 85857 does not improve AUC. Reverting changes.
Training on augumented user 19544 1/50 current_auc = 0.5214634146341464
User 19544 AUC after training: 0.5217073170731708
User 19544 improves AUC. Keeping the model.
Training on augumented user 133145 2/50 current_auc = 0.5217073170731708
User 133145 AUC after training: 0.5219512195121951
User 133145 improves AUC. Keeping the model.
Training on augumented user 36573 3/50 current_auc = 0.5219512195121951
User 36573 AUC after training: 0.5224390243902439
User 36573 improves AUC. Keeping the model.
Training on augumented user 90319 4/50 current_auc = 0.5224390243902439
User 90319 AUC after training: 0.5220731707317072
User 90319 does not improve AUC. Reverting changes.
Training on augumented user 134017 5/50 current_auc = 0.5224390243902439
User 134017 AUC after training: 0.5223170731707316
User 134017 does not improve AUC. Reverting changes.
Training on augumented user 98828 6/50 current_auc = 0.5224390243902439
User 98828 AUC after training: 0.5220731707317073
User 98828 does not improve AUC. Reverting changes.
Training on augumented user 124913 7/50 current_auc = 0.5224390243902439
User 124913 AUC after training: 0.5219512195121951
User 124913 does not improve AUC. Reverting changes.
Training on augumented user 25662 8/50 current_auc = 0.5224390243902439
User 25662 AUC after training: 0.5221951219512195
User 25662 does not improve AUC. Reverting changes.
Training on augumented user 68370 9/50 current_auc = 0.5224390243902439
User 68370 AUC after training: 0.5231707317073171
User 68370 improves AUC. Keeping the model.
Training on augumented user 133440 10/50 current_auc = 0.5231707317073171
User 133440 AUC after training: 0.521829268292683
User 133440 does not improve AUC. Reverting changes.
Training on augumented user 77076 11/50 current_auc = 0.5231707317073171
User 77076 AUC after training: 0.5223170731707317
User 77076 does not improve AUC. Reverting changes.
Training on augumented user 93142 12/50 current_auc = 0.5231707317073171
User 93142 AUC after training: 0.5236585365853659
User 93142 improves AUC. Keeping the model.
Training on augumented user 11866 13/50 current_auc = 0.5236585365853659
User 11866 AUC after training: 0.5210975609756098
User 11866 does not improve AUC. Reverting changes.
Training on augumented user 81807 14/50 current_auc = 0.5236585365853659
User 81807 AUC after training: 0.5229268292682927
User 81807 does not improve AUC. Reverting changes.
Training on augumented user 138125 15/50 current_auc = 0.5236585365853659
User 138125 AUC after training: 0.5221341463414635
User 138125 does not improve AUC. Reverting changes.
Training on augumented user 96416 16/50 current_auc = 0.5236585365853659
User 96416 AUC after training: 0.5226219512195122
User 96416 does not improve AUC. Reverting changes.
Training on augumented user 49534 17/50 current_auc = 0.5236585365853659
User 49534 AUC after training: 0.5217073170731708
User 49534 does not improve AUC. Reverting changes.
Training on augumented user 18770 18/50 current_auc = 0.5236585365853659
User 18770 AUC after training: 0.5216463414634147
User 18770 does not improve AUC. Reverting changes.
Training on augumented user 91371 19/50 current_auc = 0.5236585365853659
User 91371 AUC after training: 0.5247560975609756
User 91371 improves AUC. Keeping the model.
Training on augumented user 118740 20/50 current_auc = 0.5247560975609756
User 118740 AUC after training: 0.5235365853658537
User 118740 does not improve AUC. Reverting changes.
Training on augumented user 107108 21/50 current_auc = 0.5247560975609756
User 107108 AUC after training: 0.5237195121951219
User 107108 does not improve AUC. Reverting changes.
Training on augumented user 83752 22/50 current_auc = 0.5247560975609756
User 83752 AUC after training: 0.522560975609756
User 83752 does not improve AUC. Reverting changes.
Training on augumented user 79152 23/50 current_auc = 0.5247560975609756
User 79152 AUC after training: 0.5231707317073171
User 79152 does not improve AUC. Reverting changes.
Training on augumented user 80110 24/50 current_auc = 0.5247560975609756
User 80110 AUC after training: 0.5235365853658537
User 80110 does not improve AUC. Reverting changes.
Training on augumented user 27496 25/50 current_auc = 0.5247560975609756
User 27496 AUC after training: 0.5230487804878048
User 27496 does not improve AUC. Reverting changes.
Training on augumented user 36031 26/50 current_auc = 0.5247560975609756
User 36031 AUC after training: 0.5223780487804879
User 36031 does not improve AUC. Reverting changes.
Training on augumented user 12503 27/50 current_auc = 0.5247560975609756
User 12503 AUC after training: 0.5236585365853659
User 12503 does not improve AUC. Reverting changes.
Training on augumented user 42267 28/50 current_auc = 0.5247560975609756
User 42267 AUC after training: 0.5229268292682927
User 42267 does not improve AUC. Reverting changes.
Training on augumented user 30810 29/50 current_auc = 0.5247560975609756
User 30810 AUC after training: 0.5230487804878049
User 30810 does not improve AUC. Reverting changes.
Training on augumented user 830 30/50 current_auc = 0.5247560975609756
User 830 AUC after training: 0.5231707317073171
User 830 does not improve AUC. Reverting changes.
Training on augumented user 88554 31/50 current_auc = 0.5247560975609756
User 88554 AUC after training: 0.5231707317073171
User 88554 does not improve AUC. Reverting changes.
Training on augumented user 91418 32/50 current_auc = 0.5247560975609756
User 91418 AUC after training: 0.5223170731707317
User 91418 does not improve AUC. Reverting changes.
Training on augumented user 51756 33/50 current_auc = 0.5247560975609756
User 51756 AUC after training: 0.5220731707317073
User 51756 does not improve AUC. Reverting changes.
Training on augumented user 108473 34/50 current_auc = 0.5247560975609756
User 108473 AUC after training: 0.5229268292682927
User 108473 does not improve AUC. Reverting changes.
Training on augumented user 17973 35/50 current_auc = 0.5247560975609756
User 17973 AUC after training: 0.524390243902439
User 17973 does not improve AUC. Reverting changes.
Training on augumented user 90056 36/50 current_auc = 0.5247560975609756
User 90056 AUC after training: 0.524390243902439
User 90056 does not improve AUC. Reverting changes.
Training on augumented user 134511 37/50 current_auc = 0.5247560975609756
User 134511 AUC after training: 0.524329268292683
User 134511 does not improve AUC. Reverting changes.
Training on augumented user 74325 38/50 current_auc = 0.5247560975609756
User 74325 AUC after training: 0.5237804878048781
User 74325 does not improve AUC. Reverting changes.
Training on augumented user 1932 39/50 current_auc = 0.5247560975609756
User 1932 AUC after training: 0.5242682926829269
User 1932 does not improve AUC. Reverting changes.
Training on augumented user 117084 40/50 current_auc = 0.5247560975609756
User 117084 AUC after training: 0.5245121951219512
User 117084 does not improve AUC. Reverting changes.
Training on augumented user 87319 41/50 current_auc = 0.5247560975609756
User 87319 AUC after training: 0.5224390243902439
User 87319 does not improve AUC. Reverting changes.
Training on augumented user 64994 42/50 current_auc = 0.5247560975609756
User 64994 AUC after training: 0.524390243902439
User 64994 does not improve AUC. Reverting changes.
Training on augumented user 74536 43/50 current_auc = 0.5247560975609756
User 74536 AUC after training: 0.5235975609756098
User 74536 does not improve AUC. Reverting changes.
Training on augumented user 22806 44/50 current_auc = 0.5247560975609756
User 22806 AUC after training: 0.5238414634146341
User 22806 does not improve AUC. Reverting changes.
Training on augumented user 136243 45/50 current_auc = 0.5247560975609756
User 136243 AUC after training: 0.5237804878048781
User 136243 does not improve AUC. Reverting changes.
Training on augumented user 69739 46/50 current_auc = 0.5247560975609756
User 69739 AUC after training: 0.5234756097560975
User 69739 does not improve AUC. Reverting changes.
Training on augumented user 112321 47/50 current_auc = 0.5247560975609756
User 112321 AUC after training: 0.5230487804878049
User 112321 does not improve AUC. Reverting changes.
Training on augumented user 80028 48/50 current_auc = 0.5247560975609756
User 80028 AUC after training: 0.5238414634146342
User 80028 does not improve AUC. Reverting changes.
Training on augumented user 99856 49/50 current_auc = 0.5247560975609756
User 99856 AUC after training: 0.5230487804878049
User 99856 does not improve AUC. Reverting changes.
[2024-12-02 18:48:35.558099] start test user 2992 129/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:48:36.086851] start test user 2992 129/568 recall augumented users by random, augumented_users = [65248, 129280, 109850, 122883, 33363, 86604, 57738, 76143, 44425, 90800, 105978, 107281, 9067, 47066, 88705, 12972, 36146, 72527, 56445, 712, 81241, 133736, 72150, 49430, 109155, 70475, 66544, 97579, 78292, 93825, 132674, 17411, 77835, 3589, 40997, 105646, 54665, 88313, 71214, 5218, 26977, 52272, 104687, 122686, 30730, 107574, 16989, 61171, 106197, 69112]
[2024-12-02 18:48:36.130797] user = 2992 Cloud 129/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:48:36.156457] user = 2992 Local 129/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:48:36.244217] user = 2992 Local+ 129/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:48:38.877472] user = 2992 MPDA- 129/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 65248 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65248 AUC after training: 0.5
User 65248 does not improve AUC. Reverting changes.
Training on augumented user 129280 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129280 AUC after training: 0.5
User 129280 does not improve AUC. Reverting changes.
Training on augumented user 109850 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109850 AUC after training: 0.5
User 109850 does not improve AUC. Reverting changes.
Training on augumented user 122883 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122883 AUC after training: 0.5
User 122883 does not improve AUC. Reverting changes.
Training on augumented user 33363 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33363 AUC after training: 0.5
User 33363 does not improve AUC. Reverting changes.
Training on augumented user 86604 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86604 AUC after training: 0.5
User 86604 does not improve AUC. Reverting changes.
Training on augumented user 57738 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57738 AUC after training: 0.5
User 57738 does not improve AUC. Reverting changes.
Training on augumented user 76143 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76143 AUC after training: 0.5
User 76143 does not improve AUC. Reverting changes.
Training on augumented user 44425 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44425 AUC after training: 0.5
User 44425 does not improve AUC. Reverting changes.
Training on augumented user 90800 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90800 AUC after training: 0.5
User 90800 does not improve AUC. Reverting changes.
Training on augumented user 105978 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105978 AUC after training: 0.5
User 105978 does not improve AUC. Reverting changes.
Training on augumented user 107281 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107281 AUC after training: 0.5
User 107281 does not improve AUC. Reverting changes.
Training on augumented user 9067 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9067 AUC after training: 0.5
User 9067 does not improve AUC. Reverting changes.
Training on augumented user 47066 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47066 AUC after training: 0.5
User 47066 does not improve AUC. Reverting changes.
Training on augumented user 88705 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88705 AUC after training: 0.5
User 88705 does not improve AUC. Reverting changes.
Training on augumented user 12972 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12972 AUC after training: 0.5
User 12972 does not improve AUC. Reverting changes.
Training on augumented user 36146 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36146 AUC after training: 0.5
User 36146 does not improve AUC. Reverting changes.
Training on augumented user 72527 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72527 AUC after training: 0.5
User 72527 does not improve AUC. Reverting changes.
Training on augumented user 56445 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56445 AUC after training: 0.5
User 56445 does not improve AUC. Reverting changes.
Training on augumented user 712 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 712 AUC after training: 0.5
User 712 does not improve AUC. Reverting changes.
Training on augumented user 81241 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81241 AUC after training: 0.5
User 81241 does not improve AUC. Reverting changes.
Training on augumented user 133736 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133736 AUC after training: 0.5
User 133736 does not improve AUC. Reverting changes.
Training on augumented user 72150 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72150 AUC after training: 0.5
User 72150 does not improve AUC. Reverting changes.
Training on augumented user 49430 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49430 AUC after training: 0.5
User 49430 does not improve AUC. Reverting changes.
Training on augumented user 109155 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109155 AUC after training: 0.5
User 109155 does not improve AUC. Reverting changes.
Training on augumented user 70475 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70475 AUC after training: 0.5
User 70475 does not improve AUC. Reverting changes.
Training on augumented user 66544 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66544 AUC after training: 0.5
User 66544 does not improve AUC. Reverting changes.
Training on augumented user 97579 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97579 AUC after training: 0.5
User 97579 does not improve AUC. Reverting changes.
Training on augumented user 78292 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78292 AUC after training: 0.5
User 78292 does not improve AUC. Reverting changes.
Training on augumented user 93825 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93825 AUC after training: 0.5
User 93825 does not improve AUC. Reverting changes.
Training on augumented user 132674 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132674 AUC after training: 0.5
User 132674 does not improve AUC. Reverting changes.
Training on augumented user 17411 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17411 AUC after training: 0.5
User 17411 does not improve AUC. Reverting changes.
Training on augumented user 77835 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77835 AUC after training: 0.5
User 77835 does not improve AUC. Reverting changes.
Training on augumented user 3589 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3589 AUC after training: 0.5
User 3589 does not improve AUC. Reverting changes.
Training on augumented user 40997 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40997 AUC after training: 0.5
User 40997 does not improve AUC. Reverting changes.
Training on augumented user 105646 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105646 AUC after training: 0.5
User 105646 does not improve AUC. Reverting changes.
Training on augumented user 54665 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54665 AUC after training: 0.5
User 54665 does not improve AUC. Reverting changes.
Training on augumented user 88313 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88313 AUC after training: 0.5
User 88313 does not improve AUC. Reverting changes.
Training on augumented user 71214 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71214 AUC after training: 0.5
User 71214 does not improve AUC. Reverting changes.
Training on augumented user 5218 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5218 AUC after training: 0.5
User 5218 does not improve AUC. Reverting changes.
Training on augumented user 26977 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26977 AUC after training: 0.5
User 26977 does not improve AUC. Reverting changes.
Training on augumented user 52272 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52272 AUC after training: 0.5
User 52272 does not improve AUC. Reverting changes.
Training on augumented user 104687 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104687 AUC after training: 0.5
User 104687 does not improve AUC. Reverting changes.
Training on augumented user 122686 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122686 AUC after training: 0.5
User 122686 does not improve AUC. Reverting changes.
Training on augumented user 30730 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30730 AUC after training: 0.5
User 30730 does not improve AUC. Reverting changes.
Training on augumented user 107574 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107574 AUC after training: 0.5
User 107574 does not improve AUC. Reverting changes.
Training on augumented user 16989 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16989 AUC after training: 0.5
User 16989 does not improve AUC. Reverting changes.
Training on augumented user 61171 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61171 AUC after training: 0.5
User 61171 does not improve AUC. Reverting changes.
Training on augumented user 106197 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106197 AUC after training: 0.5
User 106197 does not improve AUC. Reverting changes.
Training on augumented user 69112 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69112 AUC after training: 0.5
User 69112 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:49:08.425468] start test user 3020 130/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:49:08.904495] start test user 3020 130/568 recall augumented users by random, augumented_users = [2633, 38838, 27191, 58318, 79284, 89788, 47994, 47834, 72147, 70243, 13703, 79347, 37035, 25913, 46749, 89937, 67125, 128047, 6486, 97007, 81999, 132348, 86252, 93079, 80256, 71397, 21665, 121839, 4413, 41991, 40503, 107298, 39159, 121193, 92628, 107352, 102514, 36232, 123980, 16770, 35882, 32720, 104671, 46894, 137536, 130227, 90992, 106515, 8698, 7425]
[2024-12-02 18:49:08.920347] user = 3020 Cloud 130/568
[2024-12-02 18:49:08.932696] user = 3020 Local 130/568
[2024-12-02 18:49:08.996720] user = 3020 Local+ 130/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:49:12.407128] user = 3020 MPDA- 130/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6354515050167224
Training on augumented user 2633 0/50 current_auc = 0.6354515050167224
User 2633 AUC after training: 0.6354515050167224
User 2633 does not improve AUC. Reverting changes.
Training on augumented user 38838 1/50 current_auc = 0.6354515050167224
User 38838 AUC after training: 0.6387959866220736
User 38838 improves AUC. Keeping the model.
Training on augumented user 27191 2/50 current_auc = 0.6387959866220736
User 27191 AUC after training: 0.6354515050167224
User 27191 does not improve AUC. Reverting changes.
Training on augumented user 58318 3/50 current_auc = 0.6387959866220736
User 58318 AUC after training: 0.6387959866220736
User 58318 does not improve AUC. Reverting changes.
Training on augumented user 79284 4/50 current_auc = 0.6387959866220736
User 79284 AUC after training: 0.6421404682274248
User 79284 improves AUC. Keeping the model.
Training on augumented user 89788 5/50 current_auc = 0.6421404682274248
User 89788 AUC after training: 0.6421404682274248
User 89788 does not improve AUC. Reverting changes.
Training on augumented user 47994 6/50 current_auc = 0.6421404682274248
User 47994 AUC after training: 0.6421404682274248
User 47994 does not improve AUC. Reverting changes.
Training on augumented user 47834 7/50 current_auc = 0.6421404682274248
User 47834 AUC after training: 0.6387959866220736
User 47834 does not improve AUC. Reverting changes.
Training on augumented user 72147 8/50 current_auc = 0.6421404682274248
User 72147 AUC after training: 0.6387959866220736
User 72147 does not improve AUC. Reverting changes.
Training on augumented user 70243 9/50 current_auc = 0.6421404682274248
User 70243 AUC after training: 0.6421404682274248
User 70243 does not improve AUC. Reverting changes.
Training on augumented user 13703 10/50 current_auc = 0.6421404682274248
User 13703 AUC after training: 0.6421404682274248
User 13703 does not improve AUC. Reverting changes.
Training on augumented user 79347 11/50 current_auc = 0.6421404682274248
User 79347 AUC after training: 0.6321070234113713
User 79347 does not improve AUC. Reverting changes.
Training on augumented user 37035 12/50 current_auc = 0.6421404682274248
User 37035 AUC after training: 0.6387959866220736
User 37035 does not improve AUC. Reverting changes.
Training on augumented user 25913 13/50 current_auc = 0.6421404682274248
User 25913 AUC after training: 0.6354515050167224
User 25913 does not improve AUC. Reverting changes.
Training on augumented user 46749 14/50 current_auc = 0.6421404682274248
User 46749 AUC after training: 0.6421404682274248
User 46749 does not improve AUC. Reverting changes.
Training on augumented user 89937 15/50 current_auc = 0.6421404682274248
User 89937 AUC after training: 0.6438127090301003
User 89937 improves AUC. Keeping the model.
Training on augumented user 67125 16/50 current_auc = 0.6438127090301003
User 67125 AUC after training: 0.6421404682274248
User 67125 does not improve AUC. Reverting changes.
Training on augumented user 128047 17/50 current_auc = 0.6438127090301003
User 128047 AUC after training: 0.6421404682274248
User 128047 does not improve AUC. Reverting changes.
Training on augumented user 6486 18/50 current_auc = 0.6438127090301003
User 6486 AUC after training: 0.6438127090301003
User 6486 does not improve AUC. Reverting changes.
Training on augumented user 97007 19/50 current_auc = 0.6438127090301003
User 97007 AUC after training: 0.6421404682274248
User 97007 does not improve AUC. Reverting changes.
Training on augumented user 81999 20/50 current_auc = 0.6438127090301003
User 81999 AUC after training: 0.6421404682274248
User 81999 does not improve AUC. Reverting changes.
Training on augumented user 132348 21/50 current_auc = 0.6438127090301003
User 132348 AUC after training: 0.6421404682274248
User 132348 does not improve AUC. Reverting changes.
Training on augumented user 86252 22/50 current_auc = 0.6438127090301003
User 86252 AUC after training: 0.6421404682274248
User 86252 does not improve AUC. Reverting changes.
Training on augumented user 93079 23/50 current_auc = 0.6438127090301003
User 93079 AUC after training: 0.6421404682274248
User 93079 does not improve AUC. Reverting changes.
Training on augumented user 80256 24/50 current_auc = 0.6438127090301003
User 80256 AUC after training: 0.6438127090301003
User 80256 does not improve AUC. Reverting changes.
Training on augumented user 71397 25/50 current_auc = 0.6438127090301003
User 71397 AUC after training: 0.6421404682274248
User 71397 does not improve AUC. Reverting changes.
Training on augumented user 21665 26/50 current_auc = 0.6438127090301003
User 21665 AUC after training: 0.6438127090301003
User 21665 does not improve AUC. Reverting changes.
Training on augumented user 121839 27/50 current_auc = 0.6438127090301003
User 121839 AUC after training: 0.6421404682274248
User 121839 does not improve AUC. Reverting changes.
Training on augumented user 4413 28/50 current_auc = 0.6438127090301003
User 4413 AUC after training: 0.6421404682274248
User 4413 does not improve AUC. Reverting changes.
Training on augumented user 41991 29/50 current_auc = 0.6438127090301003
User 41991 AUC after training: 0.6421404682274248
User 41991 does not improve AUC. Reverting changes.
Training on augumented user 40503 30/50 current_auc = 0.6438127090301003
User 40503 AUC after training: 0.6387959866220736
User 40503 does not improve AUC. Reverting changes.
Training on augumented user 107298 31/50 current_auc = 0.6438127090301003
User 107298 AUC after training: 0.6438127090301003
User 107298 does not improve AUC. Reverting changes.
Training on augumented user 39159 32/50 current_auc = 0.6438127090301003
User 39159 AUC after training: 0.6421404682274248
User 39159 does not improve AUC. Reverting changes.
Training on augumented user 121193 33/50 current_auc = 0.6438127090301003
User 121193 AUC after training: 0.6421404682274248
User 121193 does not improve AUC. Reverting changes.
Training on augumented user 92628 34/50 current_auc = 0.6438127090301003
User 92628 AUC after training: 0.6438127090301003
User 92628 does not improve AUC. Reverting changes.
Training on augumented user 107352 35/50 current_auc = 0.6438127090301003
User 107352 AUC after training: 0.6421404682274248
User 107352 does not improve AUC. Reverting changes.
Training on augumented user 102514 36/50 current_auc = 0.6438127090301003
User 102514 AUC after training: 0.6387959866220736
User 102514 does not improve AUC. Reverting changes.
Training on augumented user 36232 37/50 current_auc = 0.6438127090301003
User 36232 AUC after training: 0.6421404682274248
User 36232 does not improve AUC. Reverting changes.
Training on augumented user 123980 38/50 current_auc = 0.6438127090301003
User 123980 AUC after training: 0.6438127090301003
User 123980 does not improve AUC. Reverting changes.
Training on augumented user 16770 39/50 current_auc = 0.6438127090301003
User 16770 AUC after training: 0.6438127090301003
User 16770 does not improve AUC. Reverting changes.
Training on augumented user 35882 40/50 current_auc = 0.6438127090301003
User 35882 AUC after training: 0.6421404682274248
User 35882 does not improve AUC. Reverting changes.
Training on augumented user 32720 41/50 current_auc = 0.6438127090301003
User 32720 AUC after training: 0.6438127090301003
User 32720 does not improve AUC. Reverting changes.
Training on augumented user 104671 42/50 current_auc = 0.6438127090301003
User 104671 AUC after training: 0.6421404682274248
User 104671 does not improve AUC. Reverting changes.
Training on augumented user 46894 43/50 current_auc = 0.6438127090301003
User 46894 AUC after training: 0.6438127090301003
User 46894 does not improve AUC. Reverting changes.
Training on augumented user 137536 44/50 current_auc = 0.6438127090301003
User 137536 AUC after training: 0.6421404682274248
User 137536 does not improve AUC. Reverting changes.
Training on augumented user 130227 45/50 current_auc = 0.6438127090301003
User 130227 AUC after training: 0.6421404682274248
User 130227 does not improve AUC. Reverting changes.
Training on augumented user 90992 46/50 current_auc = 0.6438127090301003
User 90992 AUC after training: 0.6438127090301003
User 90992 does not improve AUC. Reverting changes.
Training on augumented user 106515 47/50 current_auc = 0.6438127090301003
User 106515 AUC after training: 0.6387959866220736
User 106515 does not improve AUC. Reverting changes.
Training on augumented user 8698 48/50 current_auc = 0.6438127090301003
User 8698 AUC after training: 0.6438127090301003
User 8698 does not improve AUC. Reverting changes.
Training on augumented user 7425 49/50 current_auc = 0.6438127090301003
User 7425 AUC after training: 0.6438127090301003
User 7425 does not improve AUC. Reverting changes.
[2024-12-02 18:49:43.790636] start test user 3031 131/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:49:44.208297] start test user 3031 131/568 recall augumented users by random, augumented_users = [37119, 113015, 98784, 50536, 85649, 7322, 7651, 23703, 118231, 10506, 52736, 95100, 7029, 73349, 31403, 96407, 58507, 92939, 117655, 62374, 125521, 9516, 26650, 28433, 120651, 128644, 85572, 84071, 111259, 55310, 106866, 86760, 23098, 117711, 30701, 122181, 123043, 113335, 39537, 33916, 61296, 11383, 110442, 117476, 136439, 48555, 129800, 55671, 93959, 60580]
[2024-12-02 18:49:44.224194] user = 3031 Cloud 131/568
[2024-12-02 18:49:44.243661] user = 3031 Local 131/568
[2024-12-02 18:49:44.310422] user = 3031 Local+ 131/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:49:46.413342] user = 3031 MPDA- 131/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6020942408376964
Training on augumented user 37119 0/50 current_auc = 0.6020942408376964
User 37119 AUC after training: 0.6020942408376964
User 37119 does not improve AUC. Reverting changes.
Training on augumented user 113015 1/50 current_auc = 0.6020942408376964
User 113015 AUC after training: 0.6016579406631763
User 113015 does not improve AUC. Reverting changes.
Training on augumented user 98784 2/50 current_auc = 0.6020942408376964
User 98784 AUC after training: 0.6016579406631763
User 98784 does not improve AUC. Reverting changes.
Training on augumented user 50536 3/50 current_auc = 0.6020942408376964
User 50536 AUC after training: 0.6016579406631762
User 50536 does not improve AUC. Reverting changes.
Training on augumented user 85649 4/50 current_auc = 0.6020942408376964
User 85649 AUC after training: 0.6020942408376964
User 85649 does not improve AUC. Reverting changes.
Training on augumented user 7322 5/50 current_auc = 0.6020942408376964
User 7322 AUC after training: 0.6007853403141361
User 7322 does not improve AUC. Reverting changes.
Training on augumented user 7651 6/50 current_auc = 0.6020942408376964
User 7651 AUC after training: 0.6029668411867365
User 7651 improves AUC. Keeping the model.
Training on augumented user 23703 7/50 current_auc = 0.6029668411867365
User 23703 AUC after training: 0.6034031413612566
User 23703 improves AUC. Keeping the model.
Training on augumented user 118231 8/50 current_auc = 0.6034031413612566
User 118231 AUC after training: 0.6016579406631762
User 118231 does not improve AUC. Reverting changes.
Training on augumented user 10506 9/50 current_auc = 0.6034031413612566
User 10506 AUC after training: 0.6012216404886562
User 10506 does not improve AUC. Reverting changes.
Training on augumented user 52736 10/50 current_auc = 0.6034031413612566
User 52736 AUC after training: 0.6025305410122164
User 52736 does not improve AUC. Reverting changes.
Training on augumented user 95100 11/50 current_auc = 0.6034031413612566
User 95100 AUC after training: 0.6020942408376964
User 95100 does not improve AUC. Reverting changes.
Training on augumented user 7029 12/50 current_auc = 0.6034031413612566
User 7029 AUC after training: 0.6016579406631762
User 7029 does not improve AUC. Reverting changes.
Training on augumented user 73349 13/50 current_auc = 0.6034031413612566
User 73349 AUC after training: 0.6016579406631762
User 73349 does not improve AUC. Reverting changes.
Training on augumented user 31403 14/50 current_auc = 0.6034031413612566
User 31403 AUC after training: 0.6020942408376964
User 31403 does not improve AUC. Reverting changes.
Training on augumented user 96407 15/50 current_auc = 0.6034031413612566
User 96407 AUC after training: 0.6029668411867365
User 96407 does not improve AUC. Reverting changes.
Training on augumented user 58507 16/50 current_auc = 0.6034031413612566
User 58507 AUC after training: 0.6029668411867365
User 58507 does not improve AUC. Reverting changes.
Training on augumented user 92939 17/50 current_auc = 0.6034031413612566
User 92939 AUC after training: 0.6034031413612565
User 92939 does not improve AUC. Reverting changes.
Training on augumented user 117655 18/50 current_auc = 0.6034031413612566
User 117655 AUC after training: 0.6020942408376962
User 117655 does not improve AUC. Reverting changes.
Training on augumented user 62374 19/50 current_auc = 0.6034031413612566
User 62374 AUC after training: 0.6012216404886562
User 62374 does not improve AUC. Reverting changes.
Training on augumented user 125521 20/50 current_auc = 0.6034031413612566
User 125521 AUC after training: 0.6025305410122164
User 125521 does not improve AUC. Reverting changes.
Training on augumented user 9516 21/50 current_auc = 0.6034031413612566
User 9516 AUC after training: 0.6038394415357766
User 9516 improves AUC. Keeping the model.
Training on augumented user 26650 22/50 current_auc = 0.6038394415357766
User 26650 AUC after training: 0.6038394415357766
User 26650 does not improve AUC. Reverting changes.
Training on augumented user 28433 23/50 current_auc = 0.6038394415357766
User 28433 AUC after training: 0.6034031413612566
User 28433 does not improve AUC. Reverting changes.
Training on augumented user 120651 24/50 current_auc = 0.6038394415357766
User 120651 AUC after training: 0.6034031413612566
User 120651 does not improve AUC. Reverting changes.
Training on augumented user 128644 25/50 current_auc = 0.6038394415357766
User 128644 AUC after training: 0.6042757417102967
User 128644 improves AUC. Keeping the model.
Training on augumented user 85572 26/50 current_auc = 0.6042757417102967
User 85572 AUC after training: 0.6020942408376964
User 85572 does not improve AUC. Reverting changes.
Training on augumented user 84071 27/50 current_auc = 0.6042757417102967
User 84071 AUC after training: 0.6020942408376964
User 84071 does not improve AUC. Reverting changes.
Training on augumented user 111259 28/50 current_auc = 0.6042757417102967
User 111259 AUC after training: 0.6029668411867364
User 111259 does not improve AUC. Reverting changes.
Training on augumented user 55310 29/50 current_auc = 0.6042757417102967
User 55310 AUC after training: 0.6038394415357766
User 55310 does not improve AUC. Reverting changes.
Training on augumented user 106866 30/50 current_auc = 0.6042757417102967
User 106866 AUC after training: 0.6038394415357766
User 106866 does not improve AUC. Reverting changes.
Training on augumented user 86760 31/50 current_auc = 0.6042757417102967
User 86760 AUC after training: 0.6038394415357766
User 86760 does not improve AUC. Reverting changes.
Training on augumented user 23098 32/50 current_auc = 0.6042757417102967
User 23098 AUC after training: 0.6042757417102967
User 23098 does not improve AUC. Reverting changes.
Training on augumented user 117711 33/50 current_auc = 0.6042757417102967
User 117711 AUC after training: 0.6042757417102967
User 117711 does not improve AUC. Reverting changes.
Training on augumented user 30701 34/50 current_auc = 0.6042757417102967
User 30701 AUC after training: 0.606457242582897
User 30701 improves AUC. Keeping the model.
Training on augumented user 122181 35/50 current_auc = 0.606457242582897
User 122181 AUC after training: 0.6055846422338569
User 122181 does not improve AUC. Reverting changes.
Training on augumented user 123043 36/50 current_auc = 0.606457242582897
User 123043 AUC after training: 0.6055846422338568
User 123043 does not improve AUC. Reverting changes.
Training on augumented user 113335 37/50 current_auc = 0.606457242582897
User 113335 AUC after training: 0.6051483420593369
User 113335 does not improve AUC. Reverting changes.
Training on augumented user 39537 38/50 current_auc = 0.606457242582897
User 39537 AUC after training: 0.6055846422338569
User 39537 does not improve AUC. Reverting changes.
Training on augumented user 33916 39/50 current_auc = 0.606457242582897
User 33916 AUC after training: 0.6047120418848166
User 33916 does not improve AUC. Reverting changes.
Training on augumented user 61296 40/50 current_auc = 0.606457242582897
User 61296 AUC after training: 0.6055846422338569
User 61296 does not improve AUC. Reverting changes.
Training on augumented user 11383 41/50 current_auc = 0.606457242582897
User 11383 AUC after training: 0.6068935427574171
User 11383 improves AUC. Keeping the model.
Training on augumented user 110442 42/50 current_auc = 0.6068935427574171
User 110442 AUC after training: 0.606020942408377
User 110442 does not improve AUC. Reverting changes.
Training on augumented user 117476 43/50 current_auc = 0.6068935427574171
User 117476 AUC after training: 0.6060209424083769
User 117476 does not improve AUC. Reverting changes.
Training on augumented user 136439 44/50 current_auc = 0.6068935427574171
User 136439 AUC after training: 0.6055846422338569
User 136439 does not improve AUC. Reverting changes.
Training on augumented user 48555 45/50 current_auc = 0.6068935427574171
User 48555 AUC after training: 0.6060209424083769
User 48555 does not improve AUC. Reverting changes.
Training on augumented user 129800 46/50 current_auc = 0.6068935427574171
User 129800 AUC after training: 0.6055846422338569
User 129800 does not improve AUC. Reverting changes.
Training on augumented user 55671 47/50 current_auc = 0.6068935427574171
User 55671 AUC after training: 0.6060209424083769
User 55671 does not improve AUC. Reverting changes.
Training on augumented user 93959 48/50 current_auc = 0.6068935427574171
User 93959 AUC after training: 0.606020942408377
User 93959 does not improve AUC. Reverting changes.
Training on augumented user 60580 49/50 current_auc = 0.6068935427574171
User 60580 AUC after training: 0.606457242582897
User 60580 does not improve AUC. Reverting changes.
[2024-12-02 18:50:12.372932] start test user 3033 132/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:50:12.807910] start test user 3033 132/568 recall augumented users by random, augumented_users = [48596, 69312, 63657, 38625, 84280, 31758, 74169, 25091, 115771, 28045, 70559, 55635, 125480, 80632, 22202, 22366, 80104, 58128, 23357, 134750, 100379, 53669, 106865, 113216, 95520, 83494, 10241, 63608, 78455, 120176, 9165, 40984, 97606, 88736, 11661, 90908, 127242, 79388, 12069, 36267, 71175, 35111, 45315, 122068, 87137, 56066, 90409, 129621, 73010, 87266]
[2024-12-02 18:50:12.823389] user = 3033 Cloud 132/568
[2024-12-02 18:50:12.840656] user = 3033 Local 132/568
[2024-12-02 18:50:12.919345] user = 3033 Local+ 132/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:50:14.814628] user = 3033 MPDA- 132/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7142857142857142
Training on augumented user 48596 0/50 current_auc = 0.7142857142857142
User 48596 AUC after training: 0.7125220458553793
User 48596 does not improve AUC. Reverting changes.
Training on augumented user 69312 1/50 current_auc = 0.7142857142857142
User 69312 AUC after training: 0.7140337616528093
User 69312 does not improve AUC. Reverting changes.
Training on augumented user 63657 2/50 current_auc = 0.7142857142857142
User 63657 AUC after training: 0.7132779037540942
User 63657 does not improve AUC. Reverting changes.
Training on augumented user 38625 3/50 current_auc = 0.7142857142857142
User 38625 AUC after training: 0.7142857142857143
User 38625 improves AUC. Keeping the model.
Training on augumented user 84280 4/50 current_auc = 0.7142857142857143
User 84280 AUC after training: 0.7137818090199043
User 84280 does not improve AUC. Reverting changes.
Training on augumented user 31758 5/50 current_auc = 0.7142857142857143
User 31758 AUC after training: 0.7135298563869992
User 31758 does not improve AUC. Reverting changes.
Training on augumented user 74169 6/50 current_auc = 0.7142857142857143
User 74169 AUC after training: 0.7140337616528093
User 74169 does not improve AUC. Reverting changes.
Training on augumented user 25091 7/50 current_auc = 0.7142857142857143
User 25091 AUC after training: 0.7122700932224741
User 25091 does not improve AUC. Reverting changes.
Training on augumented user 115771 8/50 current_auc = 0.7142857142857143
User 115771 AUC after training: 0.7130259511211893
User 115771 does not improve AUC. Reverting changes.
Training on augumented user 28045 9/50 current_auc = 0.7142857142857143
User 28045 AUC after training: 0.7142857142857143
User 28045 does not improve AUC. Reverting changes.
Training on augumented user 70559 10/50 current_auc = 0.7142857142857143
User 70559 AUC after training: 0.7145376669186194
User 70559 improves AUC. Keeping the model.
Training on augumented user 55635 11/50 current_auc = 0.7145376669186194
User 55635 AUC after training: 0.7149155958679768
User 55635 improves AUC. Keeping the model.
Training on augumented user 125480 12/50 current_auc = 0.7149155958679768
User 125480 AUC after training: 0.7151675485008819
User 125480 improves AUC. Keeping the model.
Training on augumented user 80632 13/50 current_auc = 0.7151675485008819
User 80632 AUC after training: 0.716931216931217
User 80632 improves AUC. Keeping the model.
Training on augumented user 22202 14/50 current_auc = 0.716931216931217
User 22202 AUC after training: 0.716679264298312
User 22202 does not improve AUC. Reverting changes.
Training on augumented user 22366 15/50 current_auc = 0.716931216931217
User 22366 AUC after training: 0.716175359032502
User 22366 does not improve AUC. Reverting changes.
Training on augumented user 80104 16/50 current_auc = 0.716931216931217
User 80104 AUC after training: 0.717183169564122
User 80104 improves AUC. Keeping the model.
Training on augumented user 58128 17/50 current_auc = 0.717183169564122
User 58128 AUC after training: 0.7155454774502393
User 58128 does not improve AUC. Reverting changes.
Training on augumented user 23357 18/50 current_auc = 0.717183169564122
User 23357 AUC after training: 0.7163013353489545
User 23357 does not improve AUC. Reverting changes.
Training on augumented user 134750 19/50 current_auc = 0.717183169564122
User 134750 AUC after training: 0.7163013353489543
User 134750 does not improve AUC. Reverting changes.
Training on augumented user 100379 20/50 current_auc = 0.717183169564122
User 100379 AUC after training: 0.716679264298312
User 100379 does not improve AUC. Reverting changes.
Training on augumented user 53669 21/50 current_auc = 0.717183169564122
User 53669 AUC after training: 0.716931216931217
User 53669 does not improve AUC. Reverting changes.
Training on augumented user 106865 22/50 current_auc = 0.717183169564122
User 106865 AUC after training: 0.716679264298312
User 106865 does not improve AUC. Reverting changes.
Training on augumented user 113216 23/50 current_auc = 0.717183169564122
User 113216 AUC after training: 0.716679264298312
User 113216 does not improve AUC. Reverting changes.
Training on augumented user 95520 24/50 current_auc = 0.717183169564122
User 95520 AUC after training: 0.715923406399597
User 95520 does not improve AUC. Reverting changes.
Training on augumented user 83494 25/50 current_auc = 0.717183169564122
User 83494 AUC after training: 0.717183169564122
User 83494 does not improve AUC. Reverting changes.
Training on augumented user 10241 26/50 current_auc = 0.717183169564122
User 10241 AUC after training: 0.716679264298312
User 10241 does not improve AUC. Reverting changes.
Training on augumented user 63608 27/50 current_auc = 0.717183169564122
User 63608 AUC after training: 0.717183169564122
User 63608 does not improve AUC. Reverting changes.
Training on augumented user 78455 28/50 current_auc = 0.717183169564122
User 78455 AUC after training: 0.716931216931217
User 78455 does not improve AUC. Reverting changes.
Training on augumented user 120176 29/50 current_auc = 0.717183169564122
User 120176 AUC after training: 0.715923406399597
User 120176 does not improve AUC. Reverting changes.
Training on augumented user 9165 30/50 current_auc = 0.717183169564122
User 9165 AUC after training: 0.7165532879818595
User 9165 does not improve AUC. Reverting changes.
Training on augumented user 40984 31/50 current_auc = 0.717183169564122
User 40984 AUC after training: 0.7150415721844294
User 40984 does not improve AUC. Reverting changes.
Training on augumented user 97606 32/50 current_auc = 0.717183169564122
User 97606 AUC after training: 0.7165532879818595
User 97606 does not improve AUC. Reverting changes.
Training on augumented user 88736 33/50 current_auc = 0.717183169564122
User 88736 AUC after training: 0.717435122197027
User 88736 improves AUC. Keeping the model.
Training on augumented user 11661 34/50 current_auc = 0.717435122197027
User 11661 AUC after training: 0.717435122197027
User 11661 does not improve AUC. Reverting changes.
Training on augumented user 90908 35/50 current_auc = 0.717435122197027
User 90908 AUC after training: 0.717687074829932
User 90908 improves AUC. Keeping the model.
Training on augumented user 127242 36/50 current_auc = 0.717687074829932
User 127242 AUC after training: 0.716175359032502
User 127242 does not improve AUC. Reverting changes.
Training on augumented user 79388 37/50 current_auc = 0.717687074829932
User 79388 AUC after training: 0.715923406399597
User 79388 does not improve AUC. Reverting changes.
Training on augumented user 12069 38/50 current_auc = 0.717687074829932
User 12069 AUC after training: 0.7145376669186193
User 12069 does not improve AUC. Reverting changes.
Training on augumented user 36267 39/50 current_auc = 0.717687074829932
User 36267 AUC after training: 0.717435122197027
User 36267 does not improve AUC. Reverting changes.
Training on augumented user 71175 40/50 current_auc = 0.717687074829932
User 71175 AUC after training: 0.717435122197027
User 71175 does not improve AUC. Reverting changes.
Training on augumented user 35111 41/50 current_auc = 0.717687074829932
User 35111 AUC after training: 0.717939027462837
User 35111 improves AUC. Keeping the model.
Training on augumented user 45315 42/50 current_auc = 0.717939027462837
User 45315 AUC after training: 0.717939027462837
User 45315 does not improve AUC. Reverting changes.
Training on augumented user 122068 43/50 current_auc = 0.717939027462837
User 122068 AUC after training: 0.717939027462837
User 122068 does not improve AUC. Reverting changes.
Training on augumented user 87137 44/50 current_auc = 0.717939027462837
User 87137 AUC after training: 0.717435122197027
User 87137 does not improve AUC. Reverting changes.
Training on augumented user 56066 45/50 current_auc = 0.717939027462837
User 56066 AUC after training: 0.717435122197027
User 56066 does not improve AUC. Reverting changes.
Training on augumented user 90409 46/50 current_auc = 0.717939027462837
User 90409 AUC after training: 0.716175359032502
User 90409 does not improve AUC. Reverting changes.
Training on augumented user 129621 47/50 current_auc = 0.717939027462837
User 129621 AUC after training: 0.718190980095742
User 129621 improves AUC. Keeping the model.
Training on augumented user 73010 48/50 current_auc = 0.718190980095742
User 73010 AUC after training: 0.717435122197027
User 73010 does not improve AUC. Reverting changes.
Training on augumented user 87266 49/50 current_auc = 0.718190980095742
User 87266 AUC after training: 0.716679264298312
User 87266 does not improve AUC. Reverting changes.
[2024-12-02 18:50:40.474748] start test user 3061 133/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:50:40.955087] start test user 3061 133/568 recall augumented users by random, augumented_users = [16498, 53346, 90569, 131101, 96710, 58029, 9677, 93742, 113587, 18833, 9223, 78472, 1115, 128613, 63429, 43658, 127269, 34946, 52118, 24082, 128476, 37990, 80486, 112560, 12752, 110021, 18634, 107604, 87876, 5997, 81691, 87204, 81831, 29669, 99253, 4732, 48785, 134738, 9572, 19087, 37493, 28283, 89526, 112200, 62360, 68514, 13755, 80169, 29829, 75308]
[2024-12-02 18:50:40.970328] user = 3061 Cloud 133/568
[2024-12-02 18:50:40.986632] user = 3061 Local 133/568
[2024-12-02 18:50:41.014152] user = 3061 Local+ 133/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:50:44.423917] user = 3061 MPDA- 133/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6499999999999999
Training on augumented user 16498 0/50 current_auc = 0.6499999999999999
User 16498 AUC after training: 0.6499999999999999
User 16498 does not improve AUC. Reverting changes.
Training on augumented user 53346 1/50 current_auc = 0.6499999999999999
User 53346 AUC after training: 0.6625
User 53346 improves AUC. Keeping the model.
Training on augumented user 90569 2/50 current_auc = 0.6625
User 90569 AUC after training: 0.6749999999999999
User 90569 improves AUC. Keeping the model.
Training on augumented user 131101 3/50 current_auc = 0.6749999999999999
User 131101 AUC after training: 0.6625
User 131101 does not improve AUC. Reverting changes.
Training on augumented user 96710 4/50 current_auc = 0.6749999999999999
User 96710 AUC after training: 0.6625
User 96710 does not improve AUC. Reverting changes.
Training on augumented user 58029 5/50 current_auc = 0.6749999999999999
User 58029 AUC after training: 0.6749999999999999
User 58029 does not improve AUC. Reverting changes.
Training on augumented user 9677 6/50 current_auc = 0.6749999999999999
User 9677 AUC after training: 0.6625
User 9677 does not improve AUC. Reverting changes.
Training on augumented user 93742 7/50 current_auc = 0.6749999999999999
User 93742 AUC after training: 0.6625
User 93742 does not improve AUC. Reverting changes.
Training on augumented user 113587 8/50 current_auc = 0.6749999999999999
User 113587 AUC after training: 0.6749999999999999
User 113587 does not improve AUC. Reverting changes.
Training on augumented user 18833 9/50 current_auc = 0.6749999999999999
User 18833 AUC after training: 0.6874999999999999
User 18833 improves AUC. Keeping the model.
Training on augumented user 9223 10/50 current_auc = 0.6874999999999999
User 9223 AUC after training: 0.6874999999999999
User 9223 does not improve AUC. Reverting changes.
Training on augumented user 78472 11/50 current_auc = 0.6874999999999999
User 78472 AUC after training: 0.6749999999999999
User 78472 does not improve AUC. Reverting changes.
Training on augumented user 1115 12/50 current_auc = 0.6874999999999999
User 1115 AUC after training: 0.6874999999999999
User 1115 does not improve AUC. Reverting changes.
Training on augumented user 128613 13/50 current_auc = 0.6874999999999999
User 128613 AUC after training: 0.6874999999999999
User 128613 does not improve AUC. Reverting changes.
Training on augumented user 63429 14/50 current_auc = 0.6874999999999999
User 63429 AUC after training: 0.6874999999999999
User 63429 does not improve AUC. Reverting changes.
Training on augumented user 43658 15/50 current_auc = 0.6874999999999999
User 43658 AUC after training: 0.6625
User 43658 does not improve AUC. Reverting changes.
Training on augumented user 127269 16/50 current_auc = 0.6874999999999999
User 127269 AUC after training: 0.6749999999999999
User 127269 does not improve AUC. Reverting changes.
Training on augumented user 34946 17/50 current_auc = 0.6874999999999999
User 34946 AUC after training: 0.6749999999999999
User 34946 does not improve AUC. Reverting changes.
Training on augumented user 52118 18/50 current_auc = 0.6874999999999999
User 52118 AUC after training: 0.6874999999999999
User 52118 does not improve AUC. Reverting changes.
Training on augumented user 24082 19/50 current_auc = 0.6874999999999999
User 24082 AUC after training: 0.6874999999999999
User 24082 does not improve AUC. Reverting changes.
Training on augumented user 128476 20/50 current_auc = 0.6874999999999999
User 128476 AUC after training: 0.6874999999999999
User 128476 does not improve AUC. Reverting changes.
Training on augumented user 37990 21/50 current_auc = 0.6874999999999999
User 37990 AUC after training: 0.6874999999999999
User 37990 does not improve AUC. Reverting changes.
Training on augumented user 80486 22/50 current_auc = 0.6874999999999999
User 80486 AUC after training: 0.6874999999999999
User 80486 does not improve AUC. Reverting changes.
Training on augumented user 112560 23/50 current_auc = 0.6874999999999999
User 112560 AUC after training: 0.6874999999999999
User 112560 does not improve AUC. Reverting changes.
Training on augumented user 12752 24/50 current_auc = 0.6874999999999999
User 12752 AUC after training: 0.6874999999999999
User 12752 does not improve AUC. Reverting changes.
Training on augumented user 110021 25/50 current_auc = 0.6874999999999999
User 110021 AUC after training: 0.6749999999999999
User 110021 does not improve AUC. Reverting changes.
Training on augumented user 18634 26/50 current_auc = 0.6874999999999999
User 18634 AUC after training: 0.6874999999999999
User 18634 does not improve AUC. Reverting changes.
Training on augumented user 107604 27/50 current_auc = 0.6874999999999999
User 107604 AUC after training: 0.6874999999999999
User 107604 does not improve AUC. Reverting changes.
Training on augumented user 87876 28/50 current_auc = 0.6874999999999999
User 87876 AUC after training: 0.6874999999999999
User 87876 does not improve AUC. Reverting changes.
Training on augumented user 5997 29/50 current_auc = 0.6874999999999999
User 5997 AUC after training: 0.6874999999999999
User 5997 does not improve AUC. Reverting changes.
Training on augumented user 81691 30/50 current_auc = 0.6874999999999999
User 81691 AUC after training: 0.6874999999999999
User 81691 does not improve AUC. Reverting changes.
Training on augumented user 87204 31/50 current_auc = 0.6874999999999999
User 87204 AUC after training: 0.6749999999999999
User 87204 does not improve AUC. Reverting changes.
Training on augumented user 81831 32/50 current_auc = 0.6874999999999999
User 81831 AUC after training: 0.6874999999999999
User 81831 does not improve AUC. Reverting changes.
Training on augumented user 29669 33/50 current_auc = 0.6874999999999999
User 29669 AUC after training: 0.6874999999999999
User 29669 does not improve AUC. Reverting changes.
Training on augumented user 99253 34/50 current_auc = 0.6874999999999999
User 99253 AUC after training: 0.6874999999999999
User 99253 does not improve AUC. Reverting changes.
Training on augumented user 4732 35/50 current_auc = 0.6874999999999999
User 4732 AUC after training: 0.6874999999999999
User 4732 does not improve AUC. Reverting changes.
Training on augumented user 48785 36/50 current_auc = 0.6874999999999999
User 48785 AUC after training: 0.6874999999999999
User 48785 does not improve AUC. Reverting changes.
Training on augumented user 134738 37/50 current_auc = 0.6874999999999999
User 134738 AUC after training: 0.6749999999999999
User 134738 does not improve AUC. Reverting changes.
Training on augumented user 9572 38/50 current_auc = 0.6874999999999999
User 9572 AUC after training: 0.6749999999999999
User 9572 does not improve AUC. Reverting changes.
Training on augumented user 19087 39/50 current_auc = 0.6874999999999999
User 19087 AUC after training: 0.6874999999999999
User 19087 does not improve AUC. Reverting changes.
Training on augumented user 37493 40/50 current_auc = 0.6874999999999999
User 37493 AUC after training: 0.6874999999999999
User 37493 does not improve AUC. Reverting changes.
Training on augumented user 28283 41/50 current_auc = 0.6874999999999999
User 28283 AUC after training: 0.7
User 28283 improves AUC. Keeping the model.
Training on augumented user 89526 42/50 current_auc = 0.7
User 89526 AUC after training: 0.7
User 89526 does not improve AUC. Reverting changes.
Training on augumented user 112200 43/50 current_auc = 0.7
User 112200 AUC after training: 0.7
User 112200 does not improve AUC. Reverting changes.
Training on augumented user 62360 44/50 current_auc = 0.7
User 62360 AUC after training: 0.7
User 62360 does not improve AUC. Reverting changes.
Training on augumented user 68514 45/50 current_auc = 0.7
User 68514 AUC after training: 0.7
User 68514 does not improve AUC. Reverting changes.
Training on augumented user 13755 46/50 current_auc = 0.7
User 13755 AUC after training: 0.7
User 13755 does not improve AUC. Reverting changes.
Training on augumented user 80169 47/50 current_auc = 0.7
User 80169 AUC after training: 0.7
User 80169 does not improve AUC. Reverting changes.
Training on augumented user 29829 48/50 current_auc = 0.7
User 29829 AUC after training: 0.7
User 29829 does not improve AUC. Reverting changes.
Training on augumented user 75308 49/50 current_auc = 0.7
User 75308 AUC after training: 0.7
User 75308 does not improve AUC. Reverting changes.
[2024-12-02 18:51:12.612492] start test user 3079 134/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:51:13.100126] start test user 3079 134/568 recall augumented users by random, augumented_users = [38640, 93507, 70149, 127917, 48863, 106998, 96307, 78949, 62387, 133736, 70261, 25445, 18193, 49580, 136370, 17783, 105095, 17933, 52970, 89072, 88748, 81887, 101209, 20595, 91601, 64964, 58348, 74779, 38192, 77793, 61776, 44968, 104973, 51462, 105216, 41456, 89888, 100794, 47633, 48364, 97065, 67607, 32402, 16386, 129067, 55774, 62265, 58701, 53587, 34674]
[2024-12-02 18:51:13.118557] user = 3079 Cloud 134/568
[2024-12-02 18:51:13.133014] user = 3079 Local 134/568
[2024-12-02 18:51:13.165220] user = 3079 Local+ 134/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:51:16.046670] user = 3079 MPDA- 134/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7663414634146342
Training on augumented user 38640 0/50 current_auc = 0.7663414634146342
User 38640 AUC after training: 0.7668292682926829
User 38640 improves AUC. Keeping the model.
Training on augumented user 93507 1/50 current_auc = 0.7668292682926829
User 93507 AUC after training: 0.7663414634146342
User 93507 does not improve AUC. Reverting changes.
Training on augumented user 70149 2/50 current_auc = 0.7668292682926829
User 70149 AUC after training: 0.7668292682926829
User 70149 does not improve AUC. Reverting changes.
Training on augumented user 127917 3/50 current_auc = 0.7668292682926829
User 127917 AUC after training: 0.7663414634146342
User 127917 does not improve AUC. Reverting changes.
Training on augumented user 48863 4/50 current_auc = 0.7668292682926829
User 48863 AUC after training: 0.7663414634146342
User 48863 does not improve AUC. Reverting changes.
Training on augumented user 106998 5/50 current_auc = 0.7668292682926829
User 106998 AUC after training: 0.7658536585365854
User 106998 does not improve AUC. Reverting changes.
Training on augumented user 96307 6/50 current_auc = 0.7668292682926829
User 96307 AUC after training: 0.7668292682926829
User 96307 does not improve AUC. Reverting changes.
Training on augumented user 78949 7/50 current_auc = 0.7668292682926829
User 78949 AUC after training: 0.7668292682926829
User 78949 does not improve AUC. Reverting changes.
Training on augumented user 62387 8/50 current_auc = 0.7668292682926829
User 62387 AUC after training: 0.7678048780487805
User 62387 improves AUC. Keeping the model.
Training on augumented user 133736 9/50 current_auc = 0.7678048780487805
User 133736 AUC after training: 0.7663414634146342
User 133736 does not improve AUC. Reverting changes.
Training on augumented user 70261 10/50 current_auc = 0.7678048780487805
User 70261 AUC after training: 0.7673170731707317
User 70261 does not improve AUC. Reverting changes.
Training on augumented user 25445 11/50 current_auc = 0.7678048780487805
User 25445 AUC after training: 0.7678048780487805
User 25445 does not improve AUC. Reverting changes.
Training on augumented user 18193 12/50 current_auc = 0.7678048780487805
User 18193 AUC after training: 0.7658536585365854
User 18193 does not improve AUC. Reverting changes.
Training on augumented user 49580 13/50 current_auc = 0.7678048780487805
User 49580 AUC after training: 0.7668292682926829
User 49580 does not improve AUC. Reverting changes.
Training on augumented user 136370 14/50 current_auc = 0.7678048780487805
User 136370 AUC after training: 0.7678048780487805
User 136370 does not improve AUC. Reverting changes.
Training on augumented user 17783 15/50 current_auc = 0.7678048780487805
User 17783 AUC after training: 0.7678048780487805
User 17783 does not improve AUC. Reverting changes.
Training on augumented user 105095 16/50 current_auc = 0.7678048780487805
User 105095 AUC after training: 0.7678048780487805
User 105095 does not improve AUC. Reverting changes.
Training on augumented user 17933 17/50 current_auc = 0.7678048780487805
User 17933 AUC after training: 0.7668292682926829
User 17933 does not improve AUC. Reverting changes.
Training on augumented user 52970 18/50 current_auc = 0.7678048780487805
User 52970 AUC after training: 0.7668292682926829
User 52970 does not improve AUC. Reverting changes.
Training on augumented user 89072 19/50 current_auc = 0.7678048780487805
User 89072 AUC after training: 0.7673170731707317
User 89072 does not improve AUC. Reverting changes.
Training on augumented user 88748 20/50 current_auc = 0.7678048780487805
User 88748 AUC after training: 0.7668292682926829
User 88748 does not improve AUC. Reverting changes.
Training on augumented user 81887 21/50 current_auc = 0.7678048780487805
User 81887 AUC after training: 0.7678048780487805
User 81887 does not improve AUC. Reverting changes.
Training on augumented user 101209 22/50 current_auc = 0.7678048780487805
User 101209 AUC after training: 0.7678048780487805
User 101209 does not improve AUC. Reverting changes.
Training on augumented user 20595 23/50 current_auc = 0.7678048780487805
User 20595 AUC after training: 0.7668292682926829
User 20595 does not improve AUC. Reverting changes.
Training on augumented user 91601 24/50 current_auc = 0.7678048780487805
User 91601 AUC after training: 0.7668292682926829
User 91601 does not improve AUC. Reverting changes.
Training on augumented user 64964 25/50 current_auc = 0.7678048780487805
User 64964 AUC after training: 0.7668292682926829
User 64964 does not improve AUC. Reverting changes.
Training on augumented user 58348 26/50 current_auc = 0.7678048780487805
User 58348 AUC after training: 0.7663414634146342
User 58348 does not improve AUC. Reverting changes.
Training on augumented user 74779 27/50 current_auc = 0.7678048780487805
User 74779 AUC after training: 0.7658536585365854
User 74779 does not improve AUC. Reverting changes.
Training on augumented user 38192 28/50 current_auc = 0.7678048780487805
User 38192 AUC after training: 0.7668292682926829
User 38192 does not improve AUC. Reverting changes.
Training on augumented user 77793 29/50 current_auc = 0.7678048780487805
User 77793 AUC after training: 0.7663414634146342
User 77793 does not improve AUC. Reverting changes.
Training on augumented user 61776 30/50 current_auc = 0.7678048780487805
User 61776 AUC after training: 0.7678048780487805
User 61776 does not improve AUC. Reverting changes.
Training on augumented user 44968 31/50 current_auc = 0.7678048780487805
User 44968 AUC after training: 0.7678048780487805
User 44968 does not improve AUC. Reverting changes.
Training on augumented user 104973 32/50 current_auc = 0.7678048780487805
User 104973 AUC after training: 0.7668292682926829
User 104973 does not improve AUC. Reverting changes.
Training on augumented user 51462 33/50 current_auc = 0.7678048780487805
User 51462 AUC after training: 0.7663414634146342
User 51462 does not improve AUC. Reverting changes.
Training on augumented user 105216 34/50 current_auc = 0.7678048780487805
User 105216 AUC after training: 0.7653658536585366
User 105216 does not improve AUC. Reverting changes.
Training on augumented user 41456 35/50 current_auc = 0.7678048780487805
User 41456 AUC after training: 0.7673170731707317
User 41456 does not improve AUC. Reverting changes.
Training on augumented user 89888 36/50 current_auc = 0.7678048780487805
User 89888 AUC after training: 0.7658536585365854
User 89888 does not improve AUC. Reverting changes.
Training on augumented user 100794 37/50 current_auc = 0.7678048780487805
User 100794 AUC after training: 0.7678048780487805
User 100794 does not improve AUC. Reverting changes.
Training on augumented user 47633 38/50 current_auc = 0.7678048780487805
User 47633 AUC after training: 0.7678048780487805
User 47633 does not improve AUC. Reverting changes.
Training on augumented user 48364 39/50 current_auc = 0.7678048780487805
User 48364 AUC after training: 0.7673170731707317
User 48364 does not improve AUC. Reverting changes.
Training on augumented user 97065 40/50 current_auc = 0.7678048780487805
User 97065 AUC after training: 0.7668292682926829
User 97065 does not improve AUC. Reverting changes.
Training on augumented user 67607 41/50 current_auc = 0.7678048780487805
User 67607 AUC after training: 0.7668292682926829
User 67607 does not improve AUC. Reverting changes.
Training on augumented user 32402 42/50 current_auc = 0.7678048780487805
User 32402 AUC after training: 0.7668292682926829
User 32402 does not improve AUC. Reverting changes.
Training on augumented user 16386 43/50 current_auc = 0.7678048780487805
User 16386 AUC after training: 0.7673170731707317
User 16386 does not improve AUC. Reverting changes.
Training on augumented user 129067 44/50 current_auc = 0.7678048780487805
User 129067 AUC after training: 0.7668292682926829
User 129067 does not improve AUC. Reverting changes.
Training on augumented user 55774 45/50 current_auc = 0.7678048780487805
User 55774 AUC after training: 0.7663414634146342
User 55774 does not improve AUC. Reverting changes.
Training on augumented user 62265 46/50 current_auc = 0.7678048780487805
User 62265 AUC after training: 0.7668292682926829
User 62265 does not improve AUC. Reverting changes.
Training on augumented user 58701 47/50 current_auc = 0.7678048780487805
User 58701 AUC after training: 0.7668292682926829
User 58701 does not improve AUC. Reverting changes.
Training on augumented user 53587 48/50 current_auc = 0.7678048780487805
User 53587 AUC after training: 0.7678048780487805
User 53587 does not improve AUC. Reverting changes.
Training on augumented user 34674 49/50 current_auc = 0.7678048780487805
User 34674 AUC after training: 0.7663414634146342
User 34674 does not improve AUC. Reverting changes.
[2024-12-02 18:51:49.130979] start test user 3127 135/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:51:49.604589] start test user 3127 135/568 recall augumented users by random, augumented_users = [54967, 132187, 122200, 38884, 67360, 26389, 43987, 128767, 131698, 102921, 133228, 117995, 75699, 16816, 106795, 122651, 123702, 21732, 732, 11762, 122090, 21689, 74963, 37588, 67597, 24478, 117059, 132307, 119619, 85285, 67475, 85767, 70675, 120651, 48057, 113862, 124887, 15020, 129454, 99372, 87635, 34462, 114105, 59667, 56225, 3043, 76443, 21346, 31689, 74322]
[2024-12-02 18:51:49.619019] user = 3127 Cloud 135/568
[2024-12-02 18:51:49.651268] user = 3127 Local 135/568
[2024-12-02 18:51:49.695582] user = 3127 Local+ 135/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:51:52.242509] user = 3127 MPDA- 135/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6194727891156462
Training on augumented user 54967 0/50 current_auc = 0.6194727891156462
User 54967 AUC after training: 0.6186224489795918
User 54967 does not improve AUC. Reverting changes.
Training on augumented user 132187 1/50 current_auc = 0.6194727891156462
User 132187 AUC after training: 0.6209403116085144
User 132187 improves AUC. Keeping the model.
Training on augumented user 122200 2/50 current_auc = 0.6209403116085144
User 122200 AUC after training: 0.619705946894887
User 122200 does not improve AUC. Reverting changes.
Training on augumented user 38884 3/50 current_auc = 0.6209403116085144
User 38884 AUC after training: 0.6214066271669958
User 38884 improves AUC. Keeping the model.
Training on augumented user 67360 4/50 current_auc = 0.6214066271669958
User 67360 AUC after training: 0.619815668202765
User 67360 does not improve AUC. Reverting changes.
Training on augumented user 26389 5/50 current_auc = 0.6214066271669958
User 26389 AUC after training: 0.620419135396094
User 26389 does not improve AUC. Reverting changes.
Training on augumented user 43987 6/50 current_auc = 0.6214066271669958
User 43987 AUC after training: 0.6202271231073075
User 43987 does not improve AUC. Reverting changes.
Training on augumented user 128767 7/50 current_auc = 0.6214066271669958
User 128767 AUC after training: 0.6217357910906298
User 128767 improves AUC. Keeping the model.
Training on augumented user 131698 8/50 current_auc = 0.6217357910906298
User 131698 AUC after training: 0.6232718894009217
User 131698 improves AUC. Keeping the model.
Training on augumented user 102921 9/50 current_auc = 0.6232718894009217
User 102921 AUC after training: 0.6260423524248409
User 102921 improves AUC. Keeping the model.
Training on augumented user 133228 10/50 current_auc = 0.6260423524248409
User 133228 AUC after training: 0.6260423524248409
User 133228 does not improve AUC. Reverting changes.
Training on augumented user 117995 11/50 current_auc = 0.6260423524248409
User 117995 AUC after training: 0.6286893789773973
User 117995 improves AUC. Keeping the model.
Training on augumented user 75699 12/50 current_auc = 0.6286893789773973
User 75699 AUC after training: 0.6256446126837831
User 75699 does not improve AUC. Reverting changes.
Training on augumented user 16816 13/50 current_auc = 0.6286893789773973
User 16816 AUC after training: 0.6287579547948212
User 16816 improves AUC. Keeping the model.
Training on augumented user 106795 14/50 current_auc = 0.6287579547948212
User 106795 AUC after training: 0.6283602150537635
User 106795 does not improve AUC. Reverting changes.
Training on augumented user 122651 15/50 current_auc = 0.6287579547948212
User 122651 AUC after training: 0.6261932192231732
User 122651 does not improve AUC. Reverting changes.
Training on augumented user 123702 16/50 current_auc = 0.6287579547948212
User 123702 AUC after training: 0.6275510204081631
User 123702 does not improve AUC. Reverting changes.
Training on augumented user 21732 17/50 current_auc = 0.6287579547948212
User 21732 AUC after training: 0.6278664691683125
User 21732 does not improve AUC. Reverting changes.
Training on augumented user 732 18/50 current_auc = 0.6287579547948212
User 732 AUC after training: 0.6283876453807329
User 732 does not improve AUC. Reverting changes.
Training on augumented user 11762 19/50 current_auc = 0.6287579547948212
User 11762 AUC after training: 0.6285385121790652
User 11762 does not improve AUC. Reverting changes.
Training on augumented user 122090 20/50 current_auc = 0.6287579547948212
User 122090 AUC after training: 0.6279076146587668
User 122090 does not improve AUC. Reverting changes.
Training on augumented user 21689 21/50 current_auc = 0.6287579547948212
User 21689 AUC after training: 0.6284973666886109
User 21689 does not improve AUC. Reverting changes.
Training on augumented user 74963 22/50 current_auc = 0.6287579547948212
User 74963 AUC after training: 0.6283464998902788
User 74963 does not improve AUC. Reverting changes.
Training on augumented user 37588 23/50 current_auc = 0.6287579547948212
User 37588 AUC after training: 0.6279624753127057
User 37588 does not improve AUC. Reverting changes.
Training on augumented user 67597 24/50 current_auc = 0.6287579547948212
User 67597 AUC after training: 0.627180710994075
User 67597 does not improve AUC. Reverting changes.
Training on augumented user 24478 25/50 current_auc = 0.6287579547948212
User 24478 AUC after training: 0.6284287908711872
User 24478 does not improve AUC. Reverting changes.
Training on augumented user 117059 26/50 current_auc = 0.6287579547948212
User 117059 AUC after training: 0.6291008338819399
User 117059 improves AUC. Keeping the model.
Training on augumented user 132307 27/50 current_auc = 0.6291008338819399
User 132307 AUC after training: 0.6291145490454246
User 132307 improves AUC. Keeping the model.
Training on augumented user 119619 28/50 current_auc = 0.6291145490454246
User 119619 AUC after training: 0.6295534342769366
User 119619 improves AUC. Keeping the model.
Training on augumented user 85285 29/50 current_auc = 0.6295534342769366
User 85285 AUC after training: 0.6277704630239194
User 85285 does not improve AUC. Reverting changes.
Training on augumented user 67475 30/50 current_auc = 0.6295534342769366
User 67475 AUC after training: 0.6289499670836076
User 67475 does not improve AUC. Reverting changes.
Training on augumented user 85767 31/50 current_auc = 0.6295534342769366
User 85767 AUC after training: 0.6272767171384683
User 85767 does not improve AUC. Reverting changes.
Training on augumented user 70675 32/50 current_auc = 0.6295534342769366
User 70675 AUC after training: 0.6284150757077025
User 70675 does not improve AUC. Reverting changes.
Training on augumented user 120651 33/50 current_auc = 0.6295534342769366
User 120651 AUC after training: 0.6284013605442176
User 120651 does not improve AUC. Reverting changes.
Training on augumented user 48057 34/50 current_auc = 0.6295534342769366
User 48057 AUC after training: 0.6296631555848146
User 48057 improves AUC. Keeping the model.
Training on augumented user 113862 35/50 current_auc = 0.6296631555848146
User 113862 AUC after training: 0.6291694096993636
User 113862 does not improve AUC. Reverting changes.
Training on augumented user 124887 36/50 current_auc = 0.6296631555848146
User 124887 AUC after training: 0.6289225367566382
User 124887 does not improve AUC. Reverting changes.
Training on augumented user 15020 37/50 current_auc = 0.6296631555848146
User 15020 AUC after training: 0.6294437129690585
User 15020 does not improve AUC. Reverting changes.
Training on augumented user 129454 38/50 current_auc = 0.6296631555848146
User 129454 AUC after training: 0.6292791310072416
User 129454 does not improve AUC. Reverting changes.
Training on augumented user 99372 39/50 current_auc = 0.6296631555848146
User 99372 AUC after training: 0.6300197498354181
User 99372 improves AUC. Keeping the model.
Training on augumented user 87635 40/50 current_auc = 0.6300197498354181
User 87635 AUC after training: 0.629580864603906
User 87635 does not improve AUC. Reverting changes.
Training on augumented user 34462 41/50 current_auc = 0.6300197498354181
User 34462 AUC after training: 0.6298551678736011
User 34462 does not improve AUC. Reverting changes.
Training on augumented user 114105 42/50 current_auc = 0.6300197498354181
User 114105 AUC after training: 0.6286208031599736
User 114105 does not improve AUC. Reverting changes.
Training on augumented user 59667 43/50 current_auc = 0.6300197498354181
User 59667 AUC after training: 0.6292242703533026
User 59667 does not improve AUC. Reverting changes.
Training on augumented user 56225 44/50 current_auc = 0.6300197498354181
User 56225 AUC after training: 0.6296905859117841
User 56225 does not improve AUC. Reverting changes.
Training on augumented user 3043 45/50 current_auc = 0.6300197498354181
User 3043 AUC after training: 0.6296357252578451
User 3043 does not improve AUC. Reverting changes.
Training on augumented user 76443 46/50 current_auc = 0.6300197498354181
User 76443 AUC after training: 0.6293339916611806
User 76443 does not improve AUC. Reverting changes.
Training on augumented user 21346 47/50 current_auc = 0.6300197498354181
User 21346 AUC after training: 0.6294574281325434
User 21346 does not improve AUC. Reverting changes.
Training on augumented user 31689 48/50 current_auc = 0.6300197498354181
User 31689 AUC after training: 0.6299100285275401
User 31689 does not improve AUC. Reverting changes.
Training on augumented user 74322 49/50 current_auc = 0.6300197498354181
User 74322 AUC after training: 0.6296905859117841
User 74322 does not improve AUC. Reverting changes.
[2024-12-02 18:52:23.559269] start test user 3128 136/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:52:23.952827] start test user 3128 136/568 recall augumented users by random, augumented_users = [14007, 7302, 31659, 63983, 18602, 121527, 12002, 115809, 105607, 71142, 72873, 50494, 87237, 83341, 7763, 79955, 43377, 74125, 92094, 68499, 49910, 113846, 108021, 134569, 79751, 99208, 44964, 30229, 101594, 108221, 2306, 33055, 7865, 1343, 76582, 120525, 11213, 65968, 59496, 73897, 54604, 35845, 82632, 132127, 130786, 124884, 137935, 73895, 25073, 85787]
[2024-12-02 18:52:23.967601] user = 3128 Cloud 136/568
[2024-12-02 18:52:23.978380] user = 3128 Local 136/568
[2024-12-02 18:52:24.012360] user = 3128 Local+ 136/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:52:27.173402] user = 3128 MPDA- 136/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6898148148148148
Training on augumented user 14007 0/50 current_auc = 0.6898148148148148
User 14007 AUC after training: 0.6990740740740741
User 14007 improves AUC. Keeping the model.
Training on augumented user 7302 1/50 current_auc = 0.6990740740740741
User 7302 AUC after training: 0.6990740740740741
User 7302 does not improve AUC. Reverting changes.
Training on augumented user 31659 2/50 current_auc = 0.6990740740740741
User 31659 AUC after training: 0.6990740740740741
User 31659 does not improve AUC. Reverting changes.
Training on augumented user 63983 3/50 current_auc = 0.6990740740740741
User 63983 AUC after training: 0.6990740740740741
User 63983 does not improve AUC. Reverting changes.
Training on augumented user 18602 4/50 current_auc = 0.6990740740740741
User 18602 AUC after training: 0.6944444444444444
User 18602 does not improve AUC. Reverting changes.
Training on augumented user 121527 5/50 current_auc = 0.6990740740740741
User 121527 AUC after training: 0.6990740740740741
User 121527 does not improve AUC. Reverting changes.
Training on augumented user 12002 6/50 current_auc = 0.6990740740740741
User 12002 AUC after training: 0.6990740740740741
User 12002 does not improve AUC. Reverting changes.
Training on augumented user 115809 7/50 current_auc = 0.6990740740740741
User 115809 AUC after training: 0.6944444444444444
User 115809 does not improve AUC. Reverting changes.
Training on augumented user 105607 8/50 current_auc = 0.6990740740740741
User 105607 AUC after training: 0.6944444444444444
User 105607 does not improve AUC. Reverting changes.
Training on augumented user 71142 9/50 current_auc = 0.6990740740740741
User 71142 AUC after training: 0.6990740740740741
User 71142 does not improve AUC. Reverting changes.
Training on augumented user 72873 10/50 current_auc = 0.6990740740740741
User 72873 AUC after training: 0.6944444444444444
User 72873 does not improve AUC. Reverting changes.
Training on augumented user 50494 11/50 current_auc = 0.6990740740740741
User 50494 AUC after training: 0.7037037037037037
User 50494 improves AUC. Keeping the model.
Training on augumented user 87237 12/50 current_auc = 0.7037037037037037
User 87237 AUC after training: 0.7037037037037037
User 87237 does not improve AUC. Reverting changes.
Training on augumented user 83341 13/50 current_auc = 0.7037037037037037
User 83341 AUC after training: 0.6944444444444444
User 83341 does not improve AUC. Reverting changes.
Training on augumented user 7763 14/50 current_auc = 0.7037037037037037
User 7763 AUC after training: 0.6851851851851851
User 7763 does not improve AUC. Reverting changes.
Training on augumented user 79955 15/50 current_auc = 0.7037037037037037
User 79955 AUC after training: 0.6898148148148148
User 79955 does not improve AUC. Reverting changes.
Training on augumented user 43377 16/50 current_auc = 0.7037037037037037
User 43377 AUC after training: 0.6990740740740741
User 43377 does not improve AUC. Reverting changes.
Training on augumented user 74125 17/50 current_auc = 0.7037037037037037
User 74125 AUC after training: 0.7083333333333333
User 74125 improves AUC. Keeping the model.
Training on augumented user 92094 18/50 current_auc = 0.7083333333333333
User 92094 AUC after training: 0.7083333333333333
User 92094 does not improve AUC. Reverting changes.
Training on augumented user 68499 19/50 current_auc = 0.7083333333333333
User 68499 AUC after training: 0.7083333333333333
User 68499 does not improve AUC. Reverting changes.
Training on augumented user 49910 20/50 current_auc = 0.7083333333333333
User 49910 AUC after training: 0.7037037037037037
User 49910 does not improve AUC. Reverting changes.
Training on augumented user 113846 21/50 current_auc = 0.7083333333333333
User 113846 AUC after training: 0.6805555555555556
User 113846 does not improve AUC. Reverting changes.
Training on augumented user 108021 22/50 current_auc = 0.7083333333333333
User 108021 AUC after training: 0.7037037037037037
User 108021 does not improve AUC. Reverting changes.
Training on augumented user 134569 23/50 current_auc = 0.7083333333333333
User 134569 AUC after training: 0.7037037037037037
User 134569 does not improve AUC. Reverting changes.
Training on augumented user 79751 24/50 current_auc = 0.7083333333333333
User 79751 AUC after training: 0.7083333333333333
User 79751 does not improve AUC. Reverting changes.
Training on augumented user 99208 25/50 current_auc = 0.7083333333333333
User 99208 AUC after training: 0.7083333333333334
User 99208 improves AUC. Keeping the model.
Training on augumented user 44964 26/50 current_auc = 0.7083333333333334
User 44964 AUC after training: 0.7083333333333334
User 44964 does not improve AUC. Reverting changes.
Training on augumented user 30229 27/50 current_auc = 0.7083333333333334
User 30229 AUC after training: 0.7037037037037037
User 30229 does not improve AUC. Reverting changes.
Training on augumented user 101594 28/50 current_auc = 0.7083333333333334
User 101594 AUC after training: 0.7083333333333334
User 101594 does not improve AUC. Reverting changes.
Training on augumented user 108221 29/50 current_auc = 0.7083333333333334
User 108221 AUC after training: 0.7083333333333334
User 108221 does not improve AUC. Reverting changes.
Training on augumented user 2306 30/50 current_auc = 0.7083333333333334
User 2306 AUC after training: 0.712962962962963
User 2306 improves AUC. Keeping the model.
Training on augumented user 33055 31/50 current_auc = 0.712962962962963
User 33055 AUC after training: 0.712962962962963
User 33055 does not improve AUC. Reverting changes.
Training on augumented user 7865 32/50 current_auc = 0.712962962962963
User 7865 AUC after training: 0.712962962962963
User 7865 does not improve AUC. Reverting changes.
Training on augumented user 1343 33/50 current_auc = 0.712962962962963
User 1343 AUC after training: 0.7083333333333334
User 1343 does not improve AUC. Reverting changes.
Training on augumented user 76582 34/50 current_auc = 0.712962962962963
User 76582 AUC after training: 0.712962962962963
User 76582 does not improve AUC. Reverting changes.
Training on augumented user 120525 35/50 current_auc = 0.712962962962963
User 120525 AUC after training: 0.712962962962963
User 120525 does not improve AUC. Reverting changes.
Training on augumented user 11213 36/50 current_auc = 0.712962962962963
User 11213 AUC after training: 0.712962962962963
User 11213 does not improve AUC. Reverting changes.
Training on augumented user 65968 37/50 current_auc = 0.712962962962963
User 65968 AUC after training: 0.7083333333333334
User 65968 does not improve AUC. Reverting changes.
Training on augumented user 59496 38/50 current_auc = 0.712962962962963
User 59496 AUC after training: 0.7037037037037037
User 59496 does not improve AUC. Reverting changes.
Training on augumented user 73897 39/50 current_auc = 0.712962962962963
User 73897 AUC after training: 0.7083333333333334
User 73897 does not improve AUC. Reverting changes.
Training on augumented user 54604 40/50 current_auc = 0.712962962962963
User 54604 AUC after training: 0.7083333333333334
User 54604 does not improve AUC. Reverting changes.
Training on augumented user 35845 41/50 current_auc = 0.712962962962963
User 35845 AUC after training: 0.7083333333333334
User 35845 does not improve AUC. Reverting changes.
Training on augumented user 82632 42/50 current_auc = 0.712962962962963
User 82632 AUC after training: 0.712962962962963
User 82632 does not improve AUC. Reverting changes.
Training on augumented user 132127 43/50 current_auc = 0.712962962962963
User 132127 AUC after training: 0.712962962962963
User 132127 does not improve AUC. Reverting changes.
Training on augumented user 130786 44/50 current_auc = 0.712962962962963
User 130786 AUC after training: 0.7083333333333334
User 130786 does not improve AUC. Reverting changes.
Training on augumented user 124884 45/50 current_auc = 0.712962962962963
User 124884 AUC after training: 0.712962962962963
User 124884 does not improve AUC. Reverting changes.
Training on augumented user 137935 46/50 current_auc = 0.712962962962963
User 137935 AUC after training: 0.712962962962963
User 137935 does not improve AUC. Reverting changes.
Training on augumented user 73895 47/50 current_auc = 0.712962962962963
User 73895 AUC after training: 0.712962962962963
User 73895 does not improve AUC. Reverting changes.
Training on augumented user 25073 48/50 current_auc = 0.712962962962963
User 25073 AUC after training: 0.712962962962963
User 25073 does not improve AUC. Reverting changes.
Training on augumented user 85787 49/50 current_auc = 0.712962962962963
User 85787 AUC after training: 0.712962962962963
User 85787 does not improve AUC. Reverting changes.
[2024-12-02 18:52:56.573811] start test user 3146 137/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:52:56.992127] start test user 3146 137/568 recall augumented users by random, augumented_users = [122824, 47293, 107504, 34962, 28576, 5169, 133774, 46097, 13031, 123507, 19271, 56001, 68448, 1913, 117362, 130582, 30130, 134182, 80542, 97680, 103218, 127960, 127275, 94302, 62813, 15450, 129485, 44649, 99717, 58944, 84756, 124391, 72598, 44595, 120369, 36216, 4604, 34858, 24063, 58741, 66615, 55857, 48893, 36050, 118896, 13721, 26972, 115177, 73326, 11126]
[2024-12-02 18:52:57.007578] user = 3146 Cloud 137/568
[2024-12-02 18:52:57.023027] user = 3146 Local 137/568
[2024-12-02 18:52:57.068041] user = 3146 Local+ 137/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:52:59.048317] user = 3146 MPDA- 137/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6662337662337662
Training on augumented user 122824 0/50 current_auc = 0.6662337662337662
User 122824 AUC after training: 0.6653679653679654
User 122824 does not improve AUC. Reverting changes.
Training on augumented user 47293 1/50 current_auc = 0.6662337662337662
User 47293 AUC after training: 0.6649350649350648
User 47293 does not improve AUC. Reverting changes.
Training on augumented user 107504 2/50 current_auc = 0.6662337662337662
User 107504 AUC after training: 0.6675324675324675
User 107504 improves AUC. Keeping the model.
Training on augumented user 34962 3/50 current_auc = 0.6675324675324675
User 34962 AUC after training: 0.6666666666666667
User 34962 does not improve AUC. Reverting changes.
Training on augumented user 28576 4/50 current_auc = 0.6675324675324675
User 28576 AUC after training: 0.6675324675324675
User 28576 does not improve AUC. Reverting changes.
Training on augumented user 5169 5/50 current_auc = 0.6675324675324675
User 5169 AUC after training: 0.6662337662337663
User 5169 does not improve AUC. Reverting changes.
Training on augumented user 133774 6/50 current_auc = 0.6675324675324675
User 133774 AUC after training: 0.6649350649350649
User 133774 does not improve AUC. Reverting changes.
Training on augumented user 46097 7/50 current_auc = 0.6675324675324675
User 46097 AUC after training: 0.6649350649350649
User 46097 does not improve AUC. Reverting changes.
Training on augumented user 13031 8/50 current_auc = 0.6675324675324675
User 13031 AUC after training: 0.6675324675324675
User 13031 does not improve AUC. Reverting changes.
Training on augumented user 123507 9/50 current_auc = 0.6675324675324675
User 123507 AUC after training: 0.670995670995671
User 123507 improves AUC. Keeping the model.
Training on augumented user 19271 10/50 current_auc = 0.670995670995671
User 19271 AUC after training: 0.6692640692640692
User 19271 does not improve AUC. Reverting changes.
Training on augumented user 56001 11/50 current_auc = 0.670995670995671
User 56001 AUC after training: 0.6696969696969697
User 56001 does not improve AUC. Reverting changes.
Training on augumented user 68448 12/50 current_auc = 0.670995670995671
User 68448 AUC after training: 0.664069264069264
User 68448 does not improve AUC. Reverting changes.
Training on augumented user 1913 13/50 current_auc = 0.670995670995671
User 1913 AUC after training: 0.6714285714285714
User 1913 improves AUC. Keeping the model.
Training on augumented user 117362 14/50 current_auc = 0.6714285714285714
User 117362 AUC after training: 0.6670995670995671
User 117362 does not improve AUC. Reverting changes.
Training on augumented user 130582 15/50 current_auc = 0.6714285714285714
User 130582 AUC after training: 0.6705627705627706
User 130582 does not improve AUC. Reverting changes.
Training on augumented user 30130 16/50 current_auc = 0.6714285714285714
User 30130 AUC after training: 0.6714285714285714
User 30130 does not improve AUC. Reverting changes.
Training on augumented user 134182 17/50 current_auc = 0.6714285714285714
User 134182 AUC after training: 0.6705627705627706
User 134182 does not improve AUC. Reverting changes.
Training on augumented user 80542 18/50 current_auc = 0.6714285714285714
User 80542 AUC after training: 0.6692640692640692
User 80542 does not improve AUC. Reverting changes.
Training on augumented user 97680 19/50 current_auc = 0.6714285714285714
User 97680 AUC after training: 0.67012987012987
User 97680 does not improve AUC. Reverting changes.
Training on augumented user 103218 20/50 current_auc = 0.6714285714285714
User 103218 AUC after training: 0.6683982683982684
User 103218 does not improve AUC. Reverting changes.
Training on augumented user 127960 21/50 current_auc = 0.6714285714285714
User 127960 AUC after training: 0.6696969696969697
User 127960 does not improve AUC. Reverting changes.
Training on augumented user 127275 22/50 current_auc = 0.6714285714285714
User 127275 AUC after training: 0.6705627705627705
User 127275 does not improve AUC. Reverting changes.
Training on augumented user 94302 23/50 current_auc = 0.6714285714285714
User 94302 AUC after training: 0.6683982683982682
User 94302 does not improve AUC. Reverting changes.
Training on augumented user 62813 24/50 current_auc = 0.6714285714285714
User 62813 AUC after training: 0.6692640692640692
User 62813 does not improve AUC. Reverting changes.
Training on augumented user 15450 25/50 current_auc = 0.6714285714285714
User 15450 AUC after training: 0.667965367965368
User 15450 does not improve AUC. Reverting changes.
Training on augumented user 129485 26/50 current_auc = 0.6714285714285714
User 129485 AUC after training: 0.6705627705627706
User 129485 does not improve AUC. Reverting changes.
Training on augumented user 44649 27/50 current_auc = 0.6714285714285714
User 44649 AUC after training: 0.6696969696969697
User 44649 does not improve AUC. Reverting changes.
Training on augumented user 99717 28/50 current_auc = 0.6714285714285714
User 99717 AUC after training: 0.6701298701298701
User 99717 does not improve AUC. Reverting changes.
Training on augumented user 58944 29/50 current_auc = 0.6714285714285714
User 58944 AUC after training: 0.6675324675324674
User 58944 does not improve AUC. Reverting changes.
Training on augumented user 84756 30/50 current_auc = 0.6714285714285714
User 84756 AUC after training: 0.6692640692640692
User 84756 does not improve AUC. Reverting changes.
Training on augumented user 124391 31/50 current_auc = 0.6714285714285714
User 124391 AUC after training: 0.67012987012987
User 124391 does not improve AUC. Reverting changes.
Training on augumented user 72598 32/50 current_auc = 0.6714285714285714
User 72598 AUC after training: 0.6653679653679654
User 72598 does not improve AUC. Reverting changes.
Training on augumented user 44595 33/50 current_auc = 0.6714285714285714
User 44595 AUC after training: 0.6666666666666666
User 44595 does not improve AUC. Reverting changes.
Training on augumented user 120369 34/50 current_auc = 0.6714285714285714
User 120369 AUC after training: 0.6683982683982683
User 120369 does not improve AUC. Reverting changes.
Training on augumented user 36216 35/50 current_auc = 0.6714285714285714
User 36216 AUC after training: 0.6709956709956709
User 36216 does not improve AUC. Reverting changes.
Training on augumented user 4604 36/50 current_auc = 0.6714285714285714
User 4604 AUC after training: 0.6714285714285714
User 4604 does not improve AUC. Reverting changes.
Training on augumented user 34858 37/50 current_auc = 0.6714285714285714
User 34858 AUC after training: 0.667965367965368
User 34858 does not improve AUC. Reverting changes.
Training on augumented user 24063 38/50 current_auc = 0.6714285714285714
User 24063 AUC after training: 0.6709956709956709
User 24063 does not improve AUC. Reverting changes.
Training on augumented user 58741 39/50 current_auc = 0.6714285714285714
User 58741 AUC after training: 0.6705627705627706
User 58741 does not improve AUC. Reverting changes.
Training on augumented user 66615 40/50 current_auc = 0.6714285714285714
User 66615 AUC after training: 0.6679653679653679
User 66615 does not improve AUC. Reverting changes.
Training on augumented user 55857 41/50 current_auc = 0.6714285714285714
User 55857 AUC after training: 0.670995670995671
User 55857 does not improve AUC. Reverting changes.
Training on augumented user 48893 42/50 current_auc = 0.6714285714285714
User 48893 AUC after training: 0.6696969696969697
User 48893 does not improve AUC. Reverting changes.
Training on augumented user 36050 43/50 current_auc = 0.6714285714285714
User 36050 AUC after training: 0.6653679653679653
User 36050 does not improve AUC. Reverting changes.
Training on augumented user 118896 44/50 current_auc = 0.6714285714285714
User 118896 AUC after training: 0.6701298701298701
User 118896 does not improve AUC. Reverting changes.
Training on augumented user 13721 45/50 current_auc = 0.6714285714285714
User 13721 AUC after training: 0.6683982683982683
User 13721 does not improve AUC. Reverting changes.
Training on augumented user 26972 46/50 current_auc = 0.6714285714285714
User 26972 AUC after training: 0.6705627705627706
User 26972 does not improve AUC. Reverting changes.
Training on augumented user 115177 47/50 current_auc = 0.6714285714285714
User 115177 AUC after training: 0.6705627705627706
User 115177 does not improve AUC. Reverting changes.
Training on augumented user 73326 48/50 current_auc = 0.6714285714285714
User 73326 AUC after training: 0.6675324675324675
User 73326 does not improve AUC. Reverting changes.
Training on augumented user 11126 49/50 current_auc = 0.6714285714285714
User 11126 AUC after training: 0.670995670995671
User 11126 does not improve AUC. Reverting changes.
[2024-12-02 18:53:23.610216] start test user 3149 138/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:53:24.327692] start test user 3149 138/568 recall augumented users by random, augumented_users = [32011, 12140, 119009, 122302, 136329, 27652, 16091, 58724, 60868, 135998, 8738, 71936, 28136, 39344, 106578, 76244, 99460, 132994, 6354, 126920, 126488, 91840, 115881, 66137, 65344, 133767, 14950, 100547, 66112, 129577, 24294, 102858, 3842, 82748, 57198, 80942, 14859, 67559, 119296, 115100, 75615, 58986, 53633, 15327, 125184, 60742, 65576, 128106, 121225, 109630]
[2024-12-02 18:53:24.348361] user = 3149 Cloud 138/568
[2024-12-02 18:53:24.364216] user = 3149 Local 138/568
[2024-12-02 18:53:24.495257] user = 3149 Local+ 138/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:53:27.021735] user = 3149 MPDA- 138/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.75
Training on augumented user 32011 0/50 current_auc = 0.75
User 32011 AUC after training: 0.75
User 32011 does not improve AUC. Reverting changes.
Training on augumented user 12140 1/50 current_auc = 0.75
User 12140 AUC after training: 0.75
User 12140 does not improve AUC. Reverting changes.
Training on augumented user 119009 2/50 current_auc = 0.75
User 119009 AUC after training: 0.75
User 119009 does not improve AUC. Reverting changes.
Training on augumented user 122302 3/50 current_auc = 0.75
User 122302 AUC after training: 0.75
User 122302 does not improve AUC. Reverting changes.
Training on augumented user 136329 4/50 current_auc = 0.75
User 136329 AUC after training: 0.75
User 136329 does not improve AUC. Reverting changes.
Training on augumented user 27652 5/50 current_auc = 0.75
User 27652 AUC after training: 0.75
User 27652 does not improve AUC. Reverting changes.
Training on augumented user 16091 6/50 current_auc = 0.75
User 16091 AUC after training: 0.75
User 16091 does not improve AUC. Reverting changes.
Training on augumented user 58724 7/50 current_auc = 0.75
User 58724 AUC after training: 0.75
User 58724 does not improve AUC. Reverting changes.
Training on augumented user 60868 8/50 current_auc = 0.75
User 60868 AUC after training: 0.75
User 60868 does not improve AUC. Reverting changes.
Training on augumented user 135998 9/50 current_auc = 0.75
User 135998 AUC after training: 0.75
User 135998 does not improve AUC. Reverting changes.
Training on augumented user 8738 10/50 current_auc = 0.75
User 8738 AUC after training: 0.75
User 8738 does not improve AUC. Reverting changes.
Training on augumented user 71936 11/50 current_auc = 0.75
User 71936 AUC after training: 0.75
User 71936 does not improve AUC. Reverting changes.
Training on augumented user 28136 12/50 current_auc = 0.75
User 28136 AUC after training: 0.75
User 28136 does not improve AUC. Reverting changes.
Training on augumented user 39344 13/50 current_auc = 0.75
User 39344 AUC after training: 0.75
User 39344 does not improve AUC. Reverting changes.
Training on augumented user 106578 14/50 current_auc = 0.75
User 106578 AUC after training: 0.75
User 106578 does not improve AUC. Reverting changes.
Training on augumented user 76244 15/50 current_auc = 0.75
User 76244 AUC after training: 0.75
User 76244 does not improve AUC. Reverting changes.
Training on augumented user 99460 16/50 current_auc = 0.75
User 99460 AUC after training: 0.75
User 99460 does not improve AUC. Reverting changes.
Training on augumented user 132994 17/50 current_auc = 0.75
User 132994 AUC after training: 0.75
User 132994 does not improve AUC. Reverting changes.
Training on augumented user 6354 18/50 current_auc = 0.75
User 6354 AUC after training: 0.75
User 6354 does not improve AUC. Reverting changes.
Training on augumented user 126920 19/50 current_auc = 0.75
User 126920 AUC after training: 0.75
User 126920 does not improve AUC. Reverting changes.
Training on augumented user 126488 20/50 current_auc = 0.75
User 126488 AUC after training: 0.75
User 126488 does not improve AUC. Reverting changes.
Training on augumented user 91840 21/50 current_auc = 0.75
User 91840 AUC after training: 0.75
User 91840 does not improve AUC. Reverting changes.
Training on augumented user 115881 22/50 current_auc = 0.75
User 115881 AUC after training: 0.75
User 115881 does not improve AUC. Reverting changes.
Training on augumented user 66137 23/50 current_auc = 0.75
User 66137 AUC after training: 0.75
User 66137 does not improve AUC. Reverting changes.
Training on augumented user 65344 24/50 current_auc = 0.75
User 65344 AUC after training: 0.75
User 65344 does not improve AUC. Reverting changes.
Training on augumented user 133767 25/50 current_auc = 0.75
User 133767 AUC after training: 0.75
User 133767 does not improve AUC. Reverting changes.
Training on augumented user 14950 26/50 current_auc = 0.75
User 14950 AUC after training: 0.75
User 14950 does not improve AUC. Reverting changes.
Training on augumented user 100547 27/50 current_auc = 0.75
User 100547 AUC after training: 0.75
User 100547 does not improve AUC. Reverting changes.
Training on augumented user 66112 28/50 current_auc = 0.75
User 66112 AUC after training: 0.75
User 66112 does not improve AUC. Reverting changes.
Training on augumented user 129577 29/50 current_auc = 0.75
User 129577 AUC after training: 0.75
User 129577 does not improve AUC. Reverting changes.
Training on augumented user 24294 30/50 current_auc = 0.75
User 24294 AUC after training: 0.75
User 24294 does not improve AUC. Reverting changes.
Training on augumented user 102858 31/50 current_auc = 0.75
User 102858 AUC after training: 0.75
User 102858 does not improve AUC. Reverting changes.
Training on augumented user 3842 32/50 current_auc = 0.75
User 3842 AUC after training: 0.75
User 3842 does not improve AUC. Reverting changes.
Training on augumented user 82748 33/50 current_auc = 0.75
User 82748 AUC after training: 0.75
User 82748 does not improve AUC. Reverting changes.
Training on augumented user 57198 34/50 current_auc = 0.75
User 57198 AUC after training: 0.75
User 57198 does not improve AUC. Reverting changes.
Training on augumented user 80942 35/50 current_auc = 0.75
User 80942 AUC after training: 0.75
User 80942 does not improve AUC. Reverting changes.
Training on augumented user 14859 36/50 current_auc = 0.75
User 14859 AUC after training: 0.75
User 14859 does not improve AUC. Reverting changes.
Training on augumented user 67559 37/50 current_auc = 0.75
User 67559 AUC after training: 0.75
User 67559 does not improve AUC. Reverting changes.
Training on augumented user 119296 38/50 current_auc = 0.75
User 119296 AUC after training: 0.75
User 119296 does not improve AUC. Reverting changes.
Training on augumented user 115100 39/50 current_auc = 0.75
User 115100 AUC after training: 0.75
User 115100 does not improve AUC. Reverting changes.
Training on augumented user 75615 40/50 current_auc = 0.75
User 75615 AUC after training: 0.75
User 75615 does not improve AUC. Reverting changes.
Training on augumented user 58986 41/50 current_auc = 0.75
User 58986 AUC after training: 0.75
User 58986 does not improve AUC. Reverting changes.
Training on augumented user 53633 42/50 current_auc = 0.75
User 53633 AUC after training: 0.75
User 53633 does not improve AUC. Reverting changes.
Training on augumented user 15327 43/50 current_auc = 0.75
User 15327 AUC after training: 0.75
User 15327 does not improve AUC. Reverting changes.
Training on augumented user 125184 44/50 current_auc = 0.75
User 125184 AUC after training: 0.75
User 125184 does not improve AUC. Reverting changes.
Training on augumented user 60742 45/50 current_auc = 0.75
User 60742 AUC after training: 0.75
User 60742 does not improve AUC. Reverting changes.
Training on augumented user 65576 46/50 current_auc = 0.75
User 65576 AUC after training: 0.75
User 65576 does not improve AUC. Reverting changes.
Training on augumented user 128106 47/50 current_auc = 0.75
User 128106 AUC after training: 0.75
User 128106 does not improve AUC. Reverting changes.
Training on augumented user 121225 48/50 current_auc = 0.75
User 121225 AUC after training: 0.75
User 121225 does not improve AUC. Reverting changes.
Training on augumented user 109630 49/50 current_auc = 0.75
User 109630 AUC after training: 0.75
User 109630 does not improve AUC. Reverting changes.
[2024-12-02 18:53:52.254217] start test user 3157 139/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:53:52.748724] start test user 3157 139/568 recall augumented users by random, augumented_users = [27292, 57969, 112850, 1131, 19470, 26623, 45881, 103215, 25084, 122876, 95523, 43351, 104241, 22849, 9074, 110473, 1415, 33206, 53538, 72892, 15157, 60769, 27312, 7585, 80310, 136777, 41687, 62440, 72567, 30231, 3783, 47884, 99361, 57888, 64102, 66465, 36433, 45297, 57115, 94538, 70933, 125841, 105288, 46148, 27017, 18074, 66373, 36499, 39187, 95831]
[2024-12-02 18:53:52.763359] user = 3157 Cloud 139/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:53:52.769713] user = 3157 Local 139/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:53:52.858152] user = 3157 Local+ 139/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:53:55.060429] user = 3157 MPDA- 139/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 27292 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27292 AUC after training: 0.5
User 27292 does not improve AUC. Reverting changes.
Training on augumented user 57969 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57969 AUC after training: 0.5
User 57969 does not improve AUC. Reverting changes.
Training on augumented user 112850 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112850 AUC after training: 0.5
User 112850 does not improve AUC. Reverting changes.
Training on augumented user 1131 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1131 AUC after training: 0.5
User 1131 does not improve AUC. Reverting changes.
Training on augumented user 19470 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19470 AUC after training: 0.5
User 19470 does not improve AUC. Reverting changes.
Training on augumented user 26623 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26623 AUC after training: 0.5
User 26623 does not improve AUC. Reverting changes.
Training on augumented user 45881 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45881 AUC after training: 0.5
User 45881 does not improve AUC. Reverting changes.
Training on augumented user 103215 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103215 AUC after training: 0.5
User 103215 does not improve AUC. Reverting changes.
Training on augumented user 25084 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25084 AUC after training: 0.5
User 25084 does not improve AUC. Reverting changes.
Training on augumented user 122876 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122876 AUC after training: 0.5
User 122876 does not improve AUC. Reverting changes.
Training on augumented user 95523 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95523 AUC after training: 0.5
User 95523 does not improve AUC. Reverting changes.
Training on augumented user 43351 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43351 AUC after training: 0.5
User 43351 does not improve AUC. Reverting changes.
Training on augumented user 104241 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104241 AUC after training: 0.5
User 104241 does not improve AUC. Reverting changes.
Training on augumented user 22849 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22849 AUC after training: 0.5
User 22849 does not improve AUC. Reverting changes.
Training on augumented user 9074 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9074 AUC after training: 0.5
User 9074 does not improve AUC. Reverting changes.
Training on augumented user 110473 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110473 AUC after training: 0.5
User 110473 does not improve AUC. Reverting changes.
Training on augumented user 1415 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1415 AUC after training: 0.5
User 1415 does not improve AUC. Reverting changes.
Training on augumented user 33206 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33206 AUC after training: 0.5
User 33206 does not improve AUC. Reverting changes.
Training on augumented user 53538 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53538 AUC after training: 0.5
User 53538 does not improve AUC. Reverting changes.
Training on augumented user 72892 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72892 AUC after training: 0.5
User 72892 does not improve AUC. Reverting changes.
Training on augumented user 15157 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15157 AUC after training: 0.5
User 15157 does not improve AUC. Reverting changes.
Training on augumented user 60769 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60769 AUC after training: 0.5
User 60769 does not improve AUC. Reverting changes.
Training on augumented user 27312 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27312 AUC after training: 0.5
User 27312 does not improve AUC. Reverting changes.
Training on augumented user 7585 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7585 AUC after training: 0.5
User 7585 does not improve AUC. Reverting changes.
Training on augumented user 80310 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80310 AUC after training: 0.5
User 80310 does not improve AUC. Reverting changes.
Training on augumented user 136777 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136777 AUC after training: 0.5
User 136777 does not improve AUC. Reverting changes.
Training on augumented user 41687 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41687 AUC after training: 0.5
User 41687 does not improve AUC. Reverting changes.
Training on augumented user 62440 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62440 AUC after training: 0.5
User 62440 does not improve AUC. Reverting changes.
Training on augumented user 72567 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72567 AUC after training: 0.5
User 72567 does not improve AUC. Reverting changes.
Training on augumented user 30231 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30231 AUC after training: 0.5
User 30231 does not improve AUC. Reverting changes.
Training on augumented user 3783 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3783 AUC after training: 0.5
User 3783 does not improve AUC. Reverting changes.
Training on augumented user 47884 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47884 AUC after training: 0.5
User 47884 does not improve AUC. Reverting changes.
Training on augumented user 99361 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99361 AUC after training: 0.5
User 99361 does not improve AUC. Reverting changes.
Training on augumented user 57888 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57888 AUC after training: 0.5
User 57888 does not improve AUC. Reverting changes.
Training on augumented user 64102 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64102 AUC after training: 0.5
User 64102 does not improve AUC. Reverting changes.
Training on augumented user 66465 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66465 AUC after training: 0.5
User 66465 does not improve AUC. Reverting changes.
Training on augumented user 36433 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36433 AUC after training: 0.5
User 36433 does not improve AUC. Reverting changes.
Training on augumented user 45297 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45297 AUC after training: 0.5
User 45297 does not improve AUC. Reverting changes.
Training on augumented user 57115 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57115 AUC after training: 0.5
User 57115 does not improve AUC. Reverting changes.
Training on augumented user 94538 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94538 AUC after training: 0.5
User 94538 does not improve AUC. Reverting changes.
Training on augumented user 70933 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70933 AUC after training: 0.5
User 70933 does not improve AUC. Reverting changes.
Training on augumented user 125841 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125841 AUC after training: 0.5
User 125841 does not improve AUC. Reverting changes.
Training on augumented user 105288 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105288 AUC after training: 0.5
User 105288 does not improve AUC. Reverting changes.
Training on augumented user 46148 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46148 AUC after training: 0.5
User 46148 does not improve AUC. Reverting changes.
Training on augumented user 27017 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27017 AUC after training: 0.5
User 27017 does not improve AUC. Reverting changes.
Training on augumented user 18074 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18074 AUC after training: 0.5
User 18074 does not improve AUC. Reverting changes.
Training on augumented user 66373 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66373 AUC after training: 0.5
User 66373 does not improve AUC. Reverting changes.
Training on augumented user 36499 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36499 AUC after training: 0.5
User 36499 does not improve AUC. Reverting changes.
Training on augumented user 39187 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39187 AUC after training: 0.5
User 39187 does not improve AUC. Reverting changes.
Training on augumented user 95831 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95831 AUC after training: 0.5
User 95831 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:54:20.365213] start test user 3171 140/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:54:20.801469] start test user 3171 140/568 recall augumented users by random, augumented_users = [78948, 115959, 80434, 44465, 9793, 27262, 96051, 30105, 123588, 52789, 26834, 20684, 15457, 135545, 134992, 104466, 46465, 132531, 94233, 121267, 16955, 93185, 34194, 60706, 114346, 16935, 126467, 43619, 116263, 78110, 121771, 101189, 113619, 4548, 49455, 134941, 67941, 28833, 65544, 128569, 13078, 127646, 56123, 44779, 102103, 6373, 88707, 79727, 58868, 88072]
[2024-12-02 18:54:20.817546] user = 3171 Cloud 140/568
[2024-12-02 18:54:20.827416] user = 3171 Local 140/568
[2024-12-02 18:54:20.958554] user = 3171 Local+ 140/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:54:23.305427] user = 3171 MPDA- 140/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7380952380952381
Training on augumented user 78948 0/50 current_auc = 0.7380952380952381
User 78948 AUC after training: 0.7380952380952381
User 78948 does not improve AUC. Reverting changes.
Training on augumented user 115959 1/50 current_auc = 0.7380952380952381
User 115959 AUC after training: 0.7380952380952381
User 115959 does not improve AUC. Reverting changes.
Training on augumented user 80434 2/50 current_auc = 0.7380952380952381
User 80434 AUC after training: 0.7380952380952381
User 80434 does not improve AUC. Reverting changes.
Training on augumented user 44465 3/50 current_auc = 0.7380952380952381
User 44465 AUC after training: 0.7380952380952381
User 44465 does not improve AUC. Reverting changes.
Training on augumented user 9793 4/50 current_auc = 0.7380952380952381
User 9793 AUC after training: 0.7380952380952381
User 9793 does not improve AUC. Reverting changes.
Training on augumented user 27262 5/50 current_auc = 0.7380952380952381
User 27262 AUC after training: 0.7380952380952381
User 27262 does not improve AUC. Reverting changes.
Training on augumented user 96051 6/50 current_auc = 0.7380952380952381
User 96051 AUC after training: 0.7380952380952381
User 96051 does not improve AUC. Reverting changes.
Training on augumented user 30105 7/50 current_auc = 0.7380952380952381
User 30105 AUC after training: 0.7380952380952381
User 30105 does not improve AUC. Reverting changes.
Training on augumented user 123588 8/50 current_auc = 0.7380952380952381
User 123588 AUC after training: 0.7380952380952381
User 123588 does not improve AUC. Reverting changes.
Training on augumented user 52789 9/50 current_auc = 0.7380952380952381
User 52789 AUC after training: 0.7380952380952381
User 52789 does not improve AUC. Reverting changes.
Training on augumented user 26834 10/50 current_auc = 0.7380952380952381
User 26834 AUC after training: 0.7380952380952381
User 26834 does not improve AUC. Reverting changes.
Training on augumented user 20684 11/50 current_auc = 0.7380952380952381
User 20684 AUC after training: 0.7380952380952381
User 20684 does not improve AUC. Reverting changes.
Training on augumented user 15457 12/50 current_auc = 0.7380952380952381
User 15457 AUC after training: 0.7380952380952381
User 15457 does not improve AUC. Reverting changes.
Training on augumented user 135545 13/50 current_auc = 0.7380952380952381
User 135545 AUC after training: 0.7380952380952381
User 135545 does not improve AUC. Reverting changes.
Training on augumented user 134992 14/50 current_auc = 0.7380952380952381
User 134992 AUC after training: 0.7380952380952381
User 134992 does not improve AUC. Reverting changes.
Training on augumented user 104466 15/50 current_auc = 0.7380952380952381
User 104466 AUC after training: 0.7380952380952381
User 104466 does not improve AUC. Reverting changes.
Training on augumented user 46465 16/50 current_auc = 0.7380952380952381
User 46465 AUC after training: 0.7380952380952381
User 46465 does not improve AUC. Reverting changes.
Training on augumented user 132531 17/50 current_auc = 0.7380952380952381
User 132531 AUC after training: 0.7380952380952381
User 132531 does not improve AUC. Reverting changes.
Training on augumented user 94233 18/50 current_auc = 0.7380952380952381
User 94233 AUC after training: 0.7380952380952381
User 94233 does not improve AUC. Reverting changes.
Training on augumented user 121267 19/50 current_auc = 0.7380952380952381
User 121267 AUC after training: 0.7380952380952381
User 121267 does not improve AUC. Reverting changes.
Training on augumented user 16955 20/50 current_auc = 0.7380952380952381
User 16955 AUC after training: 0.7380952380952381
User 16955 does not improve AUC. Reverting changes.
Training on augumented user 93185 21/50 current_auc = 0.7380952380952381
User 93185 AUC after training: 0.7380952380952381
User 93185 does not improve AUC. Reverting changes.
Training on augumented user 34194 22/50 current_auc = 0.7380952380952381
User 34194 AUC after training: 0.7380952380952381
User 34194 does not improve AUC. Reverting changes.
Training on augumented user 60706 23/50 current_auc = 0.7380952380952381
User 60706 AUC after training: 0.7380952380952381
User 60706 does not improve AUC. Reverting changes.
Training on augumented user 114346 24/50 current_auc = 0.7380952380952381
User 114346 AUC after training: 0.7380952380952381
User 114346 does not improve AUC. Reverting changes.
Training on augumented user 16935 25/50 current_auc = 0.7380952380952381
User 16935 AUC after training: 0.7380952380952381
User 16935 does not improve AUC. Reverting changes.
Training on augumented user 126467 26/50 current_auc = 0.7380952380952381
User 126467 AUC after training: 0.7380952380952381
User 126467 does not improve AUC. Reverting changes.
Training on augumented user 43619 27/50 current_auc = 0.7380952380952381
User 43619 AUC after training: 0.7380952380952381
User 43619 does not improve AUC. Reverting changes.
Training on augumented user 116263 28/50 current_auc = 0.7380952380952381
User 116263 AUC after training: 0.7380952380952381
User 116263 does not improve AUC. Reverting changes.
Training on augumented user 78110 29/50 current_auc = 0.7380952380952381
User 78110 AUC after training: 0.7380952380952381
User 78110 does not improve AUC. Reverting changes.
Training on augumented user 121771 30/50 current_auc = 0.7380952380952381
User 121771 AUC after training: 0.7380952380952381
User 121771 does not improve AUC. Reverting changes.
Training on augumented user 101189 31/50 current_auc = 0.7380952380952381
User 101189 AUC after training: 0.7380952380952381
User 101189 does not improve AUC. Reverting changes.
Training on augumented user 113619 32/50 current_auc = 0.7380952380952381
User 113619 AUC after training: 0.7380952380952381
User 113619 does not improve AUC. Reverting changes.
Training on augumented user 4548 33/50 current_auc = 0.7380952380952381
User 4548 AUC after training: 0.7380952380952381
User 4548 does not improve AUC. Reverting changes.
Training on augumented user 49455 34/50 current_auc = 0.7380952380952381
User 49455 AUC after training: 0.7380952380952381
User 49455 does not improve AUC. Reverting changes.
Training on augumented user 134941 35/50 current_auc = 0.7380952380952381
User 134941 AUC after training: 0.7380952380952381
User 134941 does not improve AUC. Reverting changes.
Training on augumented user 67941 36/50 current_auc = 0.7380952380952381
User 67941 AUC after training: 0.7380952380952381
User 67941 does not improve AUC. Reverting changes.
Training on augumented user 28833 37/50 current_auc = 0.7380952380952381
User 28833 AUC after training: 0.7380952380952381
User 28833 does not improve AUC. Reverting changes.
Training on augumented user 65544 38/50 current_auc = 0.7380952380952381
User 65544 AUC after training: 0.7380952380952381
User 65544 does not improve AUC. Reverting changes.
Training on augumented user 128569 39/50 current_auc = 0.7380952380952381
User 128569 AUC after training: 0.7380952380952381
User 128569 does not improve AUC. Reverting changes.
Training on augumented user 13078 40/50 current_auc = 0.7380952380952381
User 13078 AUC after training: 0.7380952380952381
User 13078 does not improve AUC. Reverting changes.
Training on augumented user 127646 41/50 current_auc = 0.7380952380952381
User 127646 AUC after training: 0.7380952380952381
User 127646 does not improve AUC. Reverting changes.
Training on augumented user 56123 42/50 current_auc = 0.7380952380952381
User 56123 AUC after training: 0.7380952380952381
User 56123 does not improve AUC. Reverting changes.
Training on augumented user 44779 43/50 current_auc = 0.7380952380952381
User 44779 AUC after training: 0.7380952380952381
User 44779 does not improve AUC. Reverting changes.
Training on augumented user 102103 44/50 current_auc = 0.7380952380952381
User 102103 AUC after training: 0.7380952380952381
User 102103 does not improve AUC. Reverting changes.
Training on augumented user 6373 45/50 current_auc = 0.7380952380952381
User 6373 AUC after training: 0.7380952380952381
User 6373 does not improve AUC. Reverting changes.
Training on augumented user 88707 46/50 current_auc = 0.7380952380952381
User 88707 AUC after training: 0.7380952380952381
User 88707 does not improve AUC. Reverting changes.
Training on augumented user 79727 47/50 current_auc = 0.7380952380952381
User 79727 AUC after training: 0.7380952380952381
User 79727 does not improve AUC. Reverting changes.
Training on augumented user 58868 48/50 current_auc = 0.7380952380952381
User 58868 AUC after training: 0.7380952380952381
User 58868 does not improve AUC. Reverting changes.
Training on augumented user 88072 49/50 current_auc = 0.7380952380952381
User 88072 AUC after training: 0.7380952380952381
User 88072 does not improve AUC. Reverting changes.
[2024-12-02 18:54:49.818922] start test user 3226 141/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:54:50.527427] start test user 3226 141/568 recall augumented users by random, augumented_users = [38767, 107340, 44363, 134995, 102640, 73632, 67799, 53501, 129639, 56019, 25469, 109476, 13318, 117938, 65195, 43135, 135190, 114628, 58060, 28202, 2382, 3452, 29373, 110923, 110434, 78624, 84940, 45646, 54159, 110862, 99915, 16624, 111068, 125946, 128378, 77938, 121695, 63235, 100741, 93422, 54802, 35251, 103033, 125268, 98588, 120542, 134103, 105433, 125659, 137001]
[2024-12-02 18:54:50.540554] user = 3226 Cloud 141/568
[2024-12-02 18:54:50.574156] user = 3226 Local 141/568
[2024-12-02 18:54:50.635804] user = 3226 Local+ 141/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:54:53.385130] user = 3226 MPDA- 141/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5126050420168067
Training on augumented user 38767 0/50 current_auc = 0.5126050420168067
User 38767 AUC after training: 0.5084033613445378
User 38767 does not improve AUC. Reverting changes.
Training on augumented user 107340 1/50 current_auc = 0.5126050420168067
User 107340 AUC after training: 0.5126050420168067
User 107340 does not improve AUC. Reverting changes.
Training on augumented user 44363 2/50 current_auc = 0.5126050420168067
User 44363 AUC after training: 0.5084033613445378
User 44363 does not improve AUC. Reverting changes.
Training on augumented user 134995 3/50 current_auc = 0.5126050420168067
User 134995 AUC after training: 0.5168067226890756
User 134995 improves AUC. Keeping the model.
Training on augumented user 102640 4/50 current_auc = 0.5168067226890756
User 102640 AUC after training: 0.5126050420168067
User 102640 does not improve AUC. Reverting changes.
Training on augumented user 73632 5/50 current_auc = 0.5168067226890756
User 73632 AUC after training: 0.5126050420168067
User 73632 does not improve AUC. Reverting changes.
Training on augumented user 67799 6/50 current_auc = 0.5168067226890756
User 67799 AUC after training: 0.5168067226890756
User 67799 does not improve AUC. Reverting changes.
Training on augumented user 53501 7/50 current_auc = 0.5168067226890756
User 53501 AUC after training: 0.5126050420168067
User 53501 does not improve AUC. Reverting changes.
Training on augumented user 129639 8/50 current_auc = 0.5168067226890756
User 129639 AUC after training: 0.5168067226890756
User 129639 does not improve AUC. Reverting changes.
Training on augumented user 56019 9/50 current_auc = 0.5168067226890756
User 56019 AUC after training: 0.5168067226890756
User 56019 does not improve AUC. Reverting changes.
Training on augumented user 25469 10/50 current_auc = 0.5168067226890756
User 25469 AUC after training: 0.5252100840336135
User 25469 improves AUC. Keeping the model.
Training on augumented user 109476 11/50 current_auc = 0.5252100840336135
User 109476 AUC after training: 0.5252100840336135
User 109476 does not improve AUC. Reverting changes.
Training on augumented user 13318 12/50 current_auc = 0.5252100840336135
User 13318 AUC after training: 0.5378151260504201
User 13318 improves AUC. Keeping the model.
Training on augumented user 117938 13/50 current_auc = 0.5378151260504201
User 117938 AUC after training: 0.5294117647058824
User 117938 does not improve AUC. Reverting changes.
Training on augumented user 65195 14/50 current_auc = 0.5378151260504201
User 65195 AUC after training: 0.5336134453781513
User 65195 does not improve AUC. Reverting changes.
Training on augumented user 43135 15/50 current_auc = 0.5378151260504201
User 43135 AUC after training: 0.5378151260504201
User 43135 does not improve AUC. Reverting changes.
Training on augumented user 135190 16/50 current_auc = 0.5378151260504201
User 135190 AUC after training: 0.5378151260504201
User 135190 does not improve AUC. Reverting changes.
Training on augumented user 114628 17/50 current_auc = 0.5378151260504201
User 114628 AUC after training: 0.5420168067226891
User 114628 improves AUC. Keeping the model.
Training on augumented user 58060 18/50 current_auc = 0.5420168067226891
User 58060 AUC after training: 0.5336134453781513
User 58060 does not improve AUC. Reverting changes.
Training on augumented user 28202 19/50 current_auc = 0.5420168067226891
User 28202 AUC after training: 0.5420168067226891
User 28202 does not improve AUC. Reverting changes.
Training on augumented user 2382 20/50 current_auc = 0.5420168067226891
User 2382 AUC after training: 0.5168067226890756
User 2382 does not improve AUC. Reverting changes.
Training on augumented user 3452 21/50 current_auc = 0.5420168067226891
User 3452 AUC after training: 0.5294117647058824
User 3452 does not improve AUC. Reverting changes.
Training on augumented user 29373 22/50 current_auc = 0.5420168067226891
User 29373 AUC after training: 0.5336134453781514
User 29373 does not improve AUC. Reverting changes.
Training on augumented user 110923 23/50 current_auc = 0.5420168067226891
User 110923 AUC after training: 0.5378151260504201
User 110923 does not improve AUC. Reverting changes.
Training on augumented user 110434 24/50 current_auc = 0.5420168067226891
User 110434 AUC after training: 0.5294117647058824
User 110434 does not improve AUC. Reverting changes.
Training on augumented user 78624 25/50 current_auc = 0.5420168067226891
User 78624 AUC after training: 0.5336134453781513
User 78624 does not improve AUC. Reverting changes.
Training on augumented user 84940 26/50 current_auc = 0.5420168067226891
User 84940 AUC after training: 0.5378151260504201
User 84940 does not improve AUC. Reverting changes.
Training on augumented user 45646 27/50 current_auc = 0.5420168067226891
User 45646 AUC after training: 0.5420168067226891
User 45646 does not improve AUC. Reverting changes.
Training on augumented user 54159 28/50 current_auc = 0.5420168067226891
User 54159 AUC after training: 0.5378151260504201
User 54159 does not improve AUC. Reverting changes.
Training on augumented user 110862 29/50 current_auc = 0.5420168067226891
User 110862 AUC after training: 0.5336134453781513
User 110862 does not improve AUC. Reverting changes.
Training on augumented user 99915 30/50 current_auc = 0.5420168067226891
User 99915 AUC after training: 0.5420168067226891
User 99915 does not improve AUC. Reverting changes.
Training on augumented user 16624 31/50 current_auc = 0.5420168067226891
User 16624 AUC after training: 0.5420168067226891
User 16624 does not improve AUC. Reverting changes.
Training on augumented user 111068 32/50 current_auc = 0.5420168067226891
User 111068 AUC after training: 0.5336134453781513
User 111068 does not improve AUC. Reverting changes.
Training on augumented user 125946 33/50 current_auc = 0.5420168067226891
User 125946 AUC after training: 0.5294117647058824
User 125946 does not improve AUC. Reverting changes.
Training on augumented user 128378 34/50 current_auc = 0.5420168067226891
User 128378 AUC after training: 0.5294117647058824
User 128378 does not improve AUC. Reverting changes.
Training on augumented user 77938 35/50 current_auc = 0.5420168067226891
User 77938 AUC after training: 0.5378151260504201
User 77938 does not improve AUC. Reverting changes.
Training on augumented user 121695 36/50 current_auc = 0.5420168067226891
User 121695 AUC after training: 0.5378151260504201
User 121695 does not improve AUC. Reverting changes.
Training on augumented user 63235 37/50 current_auc = 0.5420168067226891
User 63235 AUC after training: 0.5294117647058824
User 63235 does not improve AUC. Reverting changes.
Training on augumented user 100741 38/50 current_auc = 0.5420168067226891
User 100741 AUC after training: 0.5294117647058824
User 100741 does not improve AUC. Reverting changes.
Training on augumented user 93422 39/50 current_auc = 0.5420168067226891
User 93422 AUC after training: 0.5336134453781513
User 93422 does not improve AUC. Reverting changes.
Training on augumented user 54802 40/50 current_auc = 0.5420168067226891
User 54802 AUC after training: 0.5420168067226891
User 54802 does not improve AUC. Reverting changes.
Training on augumented user 35251 41/50 current_auc = 0.5420168067226891
User 35251 AUC after training: 0.5252100840336135
User 35251 does not improve AUC. Reverting changes.
Training on augumented user 103033 42/50 current_auc = 0.5420168067226891
User 103033 AUC after training: 0.5336134453781513
User 103033 does not improve AUC. Reverting changes.
Training on augumented user 125268 43/50 current_auc = 0.5420168067226891
User 125268 AUC after training: 0.5336134453781513
User 125268 does not improve AUC. Reverting changes.
Training on augumented user 98588 44/50 current_auc = 0.5420168067226891
User 98588 AUC after training: 0.5378151260504201
User 98588 does not improve AUC. Reverting changes.
Training on augumented user 120542 45/50 current_auc = 0.5420168067226891
User 120542 AUC after training: 0.5294117647058824
User 120542 does not improve AUC. Reverting changes.
Training on augumented user 134103 46/50 current_auc = 0.5420168067226891
User 134103 AUC after training: 0.5378151260504201
User 134103 does not improve AUC. Reverting changes.
Training on augumented user 105433 47/50 current_auc = 0.5420168067226891
User 105433 AUC after training: 0.5294117647058824
User 105433 does not improve AUC. Reverting changes.
Training on augumented user 125659 48/50 current_auc = 0.5420168067226891
User 125659 AUC after training: 0.5126050420168067
User 125659 does not improve AUC. Reverting changes.
Training on augumented user 137001 49/50 current_auc = 0.5420168067226891
User 137001 AUC after training: 0.5420168067226891
User 137001 does not improve AUC. Reverting changes.
[2024-12-02 18:55:25.306058] start test user 3263 142/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:55:25.889198] start test user 3263 142/568 recall augumented users by random, augumented_users = [23238, 48422, 93691, 105752, 97707, 69523, 99433, 136747, 98292, 21580, 107056, 88372, 72228, 77944, 137871, 19410, 23833, 54163, 64361, 34848, 133513, 131734, 29750, 36436, 9743, 129587, 126186, 27542, 77027, 4554, 96463, 48259, 115178, 50221, 73772, 129334, 126570, 58844, 102791, 90172, 65488, 120734, 63187, 17445, 88975, 48540, 20096, 77866, 106716, 107954]
[2024-12-02 18:55:25.907498] user = 3263 Cloud 142/568
[2024-12-02 18:55:25.928693] user = 3263 Local 142/568
[2024-12-02 18:55:26.041536] user = 3263 Local+ 142/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:55:28.406170] user = 3263 MPDA- 142/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6335470085470085
Training on augumented user 23238 0/50 current_auc = 0.6335470085470085
User 23238 AUC after training: 0.6338141025641025
User 23238 improves AUC. Keeping the model.
Training on augumented user 48422 1/50 current_auc = 0.6338141025641025
User 48422 AUC after training: 0.6338141025641026
User 48422 improves AUC. Keeping the model.
Training on augumented user 93691 2/50 current_auc = 0.6338141025641026
User 93691 AUC after training: 0.6324786324786325
User 93691 does not improve AUC. Reverting changes.
Training on augumented user 105752 3/50 current_auc = 0.6338141025641026
User 105752 AUC after training: 0.6348824786324787
User 105752 improves AUC. Keeping the model.
Training on augumented user 97707 4/50 current_auc = 0.6348824786324787
User 97707 AUC after training: 0.6344818376068375
User 97707 does not improve AUC. Reverting changes.
Training on augumented user 69523 5/50 current_auc = 0.6348824786324787
User 69523 AUC after training: 0.6338141025641026
User 69523 does not improve AUC. Reverting changes.
Training on augumented user 99433 6/50 current_auc = 0.6348824786324787
User 99433 AUC after training: 0.6348824786324786
User 99433 does not improve AUC. Reverting changes.
Training on augumented user 136747 7/50 current_auc = 0.6348824786324787
User 136747 AUC after training: 0.6339476495726495
User 136747 does not improve AUC. Reverting changes.
Training on augumented user 98292 8/50 current_auc = 0.6348824786324787
User 98292 AUC after training: 0.6332799145299146
User 98292 does not improve AUC. Reverting changes.
Training on augumented user 21580 9/50 current_auc = 0.6348824786324787
User 21580 AUC after training: 0.6350160256410255
User 21580 improves AUC. Keeping the model.
Training on augumented user 107056 10/50 current_auc = 0.6350160256410255
User 107056 AUC after training: 0.6378205128205128
User 107056 improves AUC. Keeping the model.
Training on augumented user 88372 11/50 current_auc = 0.6378205128205128
User 88372 AUC after training: 0.6371527777777779
User 88372 does not improve AUC. Reverting changes.
Training on augumented user 72228 12/50 current_auc = 0.6378205128205128
User 72228 AUC after training: 0.6390224358974359
User 72228 improves AUC. Keeping the model.
Training on augumented user 77944 13/50 current_auc = 0.6390224358974359
User 77944 AUC after training: 0.6386217948717949
User 77944 does not improve AUC. Reverting changes.
Training on augumented user 137871 14/50 current_auc = 0.6390224358974359
User 137871 AUC after training: 0.6392895299145298
User 137871 improves AUC. Keeping the model.
Training on augumented user 19410 15/50 current_auc = 0.6392895299145298
User 19410 AUC after training: 0.640090811965812
User 19410 improves AUC. Keeping the model.
Training on augumented user 23833 16/50 current_auc = 0.640090811965812
User 23833 AUC after training: 0.6394230769230769
User 23833 does not improve AUC. Reverting changes.
Training on augumented user 54163 17/50 current_auc = 0.640090811965812
User 54163 AUC after training: 0.6392895299145299
User 54163 does not improve AUC. Reverting changes.
Training on augumented user 64361 18/50 current_auc = 0.640090811965812
User 64361 AUC after training: 0.640090811965812
User 64361 does not improve AUC. Reverting changes.
Training on augumented user 34848 19/50 current_auc = 0.640090811965812
User 34848 AUC after training: 0.6387553418803419
User 34848 does not improve AUC. Reverting changes.
Training on augumented user 133513 20/50 current_auc = 0.640090811965812
User 133513 AUC after training: 0.6392895299145298
User 133513 does not improve AUC. Reverting changes.
Training on augumented user 131734 21/50 current_auc = 0.640090811965812
User 131734 AUC after training: 0.640090811965812
User 131734 does not improve AUC. Reverting changes.
Training on augumented user 29750 22/50 current_auc = 0.640090811965812
User 29750 AUC after training: 0.640357905982906
User 29750 improves AUC. Keeping the model.
Training on augumented user 36436 23/50 current_auc = 0.640357905982906
User 36436 AUC after training: 0.640224358974359
User 36436 does not improve AUC. Reverting changes.
Training on augumented user 9743 24/50 current_auc = 0.640357905982906
User 9743 AUC after training: 0.640090811965812
User 9743 does not improve AUC. Reverting changes.
Training on augumented user 129587 25/50 current_auc = 0.640357905982906
User 129587 AUC after training: 0.63928952991453
User 129587 does not improve AUC. Reverting changes.
Training on augumented user 126186 26/50 current_auc = 0.640357905982906
User 126186 AUC after training: 0.640491452991453
User 126186 improves AUC. Keeping the model.
Training on augumented user 27542 27/50 current_auc = 0.640491452991453
User 27542 AUC after training: 0.6403579059829061
User 27542 does not improve AUC. Reverting changes.
Training on augumented user 77027 28/50 current_auc = 0.640491452991453
User 77027 AUC after training: 0.640625
User 77027 improves AUC. Keeping the model.
Training on augumented user 4554 29/50 current_auc = 0.640625
User 4554 AUC after training: 0.6403579059829059
User 4554 does not improve AUC. Reverting changes.
Training on augumented user 96463 30/50 current_auc = 0.640625
User 96463 AUC after training: 0.640625
User 96463 does not improve AUC. Reverting changes.
Training on augumented user 48259 31/50 current_auc = 0.640625
User 48259 AUC after training: 0.6403579059829059
User 48259 does not improve AUC. Reverting changes.
Training on augumented user 115178 32/50 current_auc = 0.640625
User 115178 AUC after training: 0.640224358974359
User 115178 does not improve AUC. Reverting changes.
Training on augumented user 50221 33/50 current_auc = 0.640625
User 50221 AUC after training: 0.640625
User 50221 does not improve AUC. Reverting changes.
Training on augumented user 73772 34/50 current_auc = 0.640625
User 73772 AUC after training: 0.640625
User 73772 does not improve AUC. Reverting changes.
Training on augumented user 129334 35/50 current_auc = 0.640625
User 129334 AUC after training: 0.6395566239316239
User 129334 does not improve AUC. Reverting changes.
Training on augumented user 126570 36/50 current_auc = 0.640625
User 126570 AUC after training: 0.640224358974359
User 126570 does not improve AUC. Reverting changes.
Training on augumented user 58844 37/50 current_auc = 0.640625
User 58844 AUC after training: 0.641025641025641
User 58844 improves AUC. Keeping the model.
Training on augumented user 102791 38/50 current_auc = 0.641025641025641
User 102791 AUC after training: 0.640625
User 102791 does not improve AUC. Reverting changes.
Training on augumented user 90172 39/50 current_auc = 0.641025641025641
User 90172 AUC after training: 0.6404914529914529
User 90172 does not improve AUC. Reverting changes.
Training on augumented user 65488 40/50 current_auc = 0.641025641025641
User 65488 AUC after training: 0.640625
User 65488 does not improve AUC. Reverting changes.
Training on augumented user 120734 41/50 current_auc = 0.641025641025641
User 120734 AUC after training: 0.6415598290598291
User 120734 improves AUC. Keeping the model.
Training on augumented user 63187 42/50 current_auc = 0.6415598290598291
User 63187 AUC after training: 0.641025641025641
User 63187 does not improve AUC. Reverting changes.
Training on augumented user 17445 43/50 current_auc = 0.6415598290598291
User 17445 AUC after training: 0.6404914529914529
User 17445 does not improve AUC. Reverting changes.
Training on augumented user 88975 44/50 current_auc = 0.6415598290598291
User 88975 AUC after training: 0.6402243589743589
User 88975 does not improve AUC. Reverting changes.
Training on augumented user 48540 45/50 current_auc = 0.6415598290598291
User 48540 AUC after training: 0.6436965811965812
User 48540 improves AUC. Keeping the model.
Training on augumented user 20096 46/50 current_auc = 0.6436965811965812
User 20096 AUC after training: 0.6424946581196581
User 20096 does not improve AUC. Reverting changes.
Training on augumented user 77866 47/50 current_auc = 0.6436965811965812
User 77866 AUC after training: 0.6431623931623931
User 77866 does not improve AUC. Reverting changes.
Training on augumented user 106716 48/50 current_auc = 0.6436965811965812
User 106716 AUC after training: 0.6428952991452992
User 106716 does not improve AUC. Reverting changes.
Training on augumented user 107954 49/50 current_auc = 0.6436965811965812
User 107954 AUC after training: 0.6422275641025641
User 107954 does not improve AUC. Reverting changes.
[2024-12-02 18:55:54.861021] start test user 3268 143/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:55:55.426078] start test user 3268 143/568 recall augumented users by random, augumented_users = [117928, 15235, 39407, 98062, 99043, 117986, 63250, 24706, 9411, 63435, 45556, 10582, 46781, 136466, 34985, 60467, 43593, 56650, 44511, 81797, 2385, 16751, 6467, 28454, 35288, 23736, 11960, 18285, 107845, 33375, 100636, 33985, 8512, 6077, 79100, 119575, 83243, 10679, 75733, 3698, 6549, 26947, 11348, 120859, 22661, 106612, 43920, 28169, 67048, 83271]
[2024-12-02 18:55:55.440427] user = 3268 Cloud 143/568
[2024-12-02 18:55:55.465307] user = 3268 Local 143/568
[2024-12-02 18:55:55.553980] user = 3268 Local+ 143/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:55:57.188813] user = 3268 MPDA- 143/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5802885592359276
Training on augumented user 117928 0/50 current_auc = 0.5802885592359276
User 117928 AUC after training: 0.5804511278195488
User 117928 improves AUC. Keeping the model.
Training on augumented user 15235 1/50 current_auc = 0.5804511278195488
User 15235 AUC after training: 0.581081081081081
User 15235 improves AUC. Keeping the model.
Training on augumented user 39407 2/50 current_auc = 0.581081081081081
User 39407 AUC after training: 0.5808575492786019
User 39407 does not improve AUC. Reverting changes.
Training on augumented user 98062 3/50 current_auc = 0.581081081081081
User 98062 AUC after training: 0.5814671814671815
User 98062 improves AUC. Keeping the model.
Training on augumented user 99043 4/50 current_auc = 0.5814671814671815
User 99043 AUC after training: 0.5809388335704124
User 99043 does not improve AUC. Reverting changes.
Training on augumented user 117986 5/50 current_auc = 0.5814671814671815
User 117986 AUC after training: 0.5818736029262345
User 117986 improves AUC. Keeping the model.
Training on augumented user 63250 6/50 current_auc = 0.5818736029262345
User 63250 AUC after training: 0.5812639707376549
User 63250 does not improve AUC. Reverting changes.
Training on augumented user 24706 7/50 current_auc = 0.5818736029262345
User 24706 AUC after training: 0.5811014021540337
User 24706 does not improve AUC. Reverting changes.
Training on augumented user 9411 8/50 current_auc = 0.5818736029262345
User 9411 AUC after training: 0.5821987400934769
User 9411 improves AUC. Keeping the model.
Training on augumented user 63435 9/50 current_auc = 0.5821987400934769
User 63435 AUC after training: 0.5815891079048974
User 63435 does not improve AUC. Reverting changes.
Training on augumented user 45556 10/50 current_auc = 0.5821987400934769
User 45556 AUC after training: 0.5811217232269864
User 45556 does not improve AUC. Reverting changes.
Training on augumented user 10582 11/50 current_auc = 0.5821987400934769
User 10582 AUC after training: 0.5818736029262345
User 10582 does not improve AUC. Reverting changes.
Training on augumented user 46781 12/50 current_auc = 0.5821987400934769
User 46781 AUC after training: 0.5815687868319447
User 46781 does not improve AUC. Reverting changes.
Training on augumented user 136466 13/50 current_auc = 0.5821987400934769
User 136466 AUC after training: 0.5832554358870148
User 136466 improves AUC. Keeping the model.
Training on augumented user 34985 14/50 current_auc = 0.5832554358870148
User 34985 AUC after training: 0.5857752489331436
User 34985 improves AUC. Keeping the model.
Training on augumented user 60467 15/50 current_auc = 0.5857752489331436
User 60467 AUC after training: 0.5854501117659012
User 60467 does not improve AUC. Reverting changes.
Training on augumented user 43593 16/50 current_auc = 0.5857752489331436
User 43593 AUC after training: 0.5853281853281853
User 43593 does not improve AUC. Reverting changes.
Training on augumented user 56650 17/50 current_auc = 0.5857752489331436
User 56650 AUC after training: 0.5861410282462913
User 56650 improves AUC. Keeping the model.
Training on augumented user 44511 18/50 current_auc = 0.5861410282462913
User 44511 AUC after training: 0.586344238975818
User 44511 improves AUC. Keeping the model.
Training on augumented user 81797 19/50 current_auc = 0.586344238975818
User 81797 AUC after training: 0.586344238975818
User 81797 does not improve AUC. Reverting changes.
Training on augumented user 2385 20/50 current_auc = 0.586344238975818
User 2385 AUC after training: 0.5862629546840074
User 2385 does not improve AUC. Reverting changes.
Training on augumented user 16751 21/50 current_auc = 0.586344238975818
User 16751 AUC after training: 0.5855720382036171
User 16751 does not improve AUC. Reverting changes.
Training on augumented user 6467 22/50 current_auc = 0.586344238975818
User 6467 AUC after training: 0.587624466571835
User 6467 improves AUC. Keeping the model.
Training on augumented user 28454 23/50 current_auc = 0.587624466571835
User 28454 AUC after training: 0.5877057508636456
User 28454 improves AUC. Keeping the model.
Training on augumented user 35288 24/50 current_auc = 0.5877057508636456
User 35288 AUC after training: 0.5876651087177402
User 35288 does not improve AUC. Reverting changes.
Training on augumented user 23736 25/50 current_auc = 0.5877057508636456
User 23736 AUC after training: 0.5856736435683804
User 23736 does not improve AUC. Reverting changes.
Training on augumented user 11960 26/50 current_auc = 0.5877057508636456
User 11960 AUC after training: 0.5878683194472668
User 11960 improves AUC. Keeping the model.
Training on augumented user 18285 27/50 current_auc = 0.5878683194472668
User 18285 AUC after training: 0.5881121723226986
User 18285 improves AUC. Keeping the model.
Training on augumented user 107845 28/50 current_auc = 0.5881121723226986
User 107845 AUC after training: 0.5873196504775452
User 107845 does not improve AUC. Reverting changes.
Training on augumented user 33375 29/50 current_auc = 0.5881121723226986
User 33375 AUC after training: 0.588030888030888
User 33375 does not improve AUC. Reverting changes.
Training on augumented user 100636 30/50 current_auc = 0.5881121723226986
User 100636 AUC after training: 0.5884779516358463
User 100636 improves AUC. Keeping the model.
Training on augumented user 33985 31/50 current_auc = 0.5884779516358463
User 33985 AUC after training: 0.5890875838244258
User 33985 improves AUC. Keeping the model.
Training on augumented user 8512 32/50 current_auc = 0.5890875838244258
User 8512 AUC after training: 0.5892907945539524
User 8512 improves AUC. Keeping the model.
Training on augumented user 6077 33/50 current_auc = 0.5892907945539524
User 6077 AUC after training: 0.5886201991465149
User 6077 does not improve AUC. Reverting changes.
Training on augumented user 79100 34/50 current_auc = 0.5892907945539524
User 79100 AUC after training: 0.5883763462710832
User 79100 does not improve AUC. Reverting changes.
Training on augumented user 119575 35/50 current_auc = 0.5892907945539524
User 119575 AUC after training: 0.5856939646413332
User 119575 does not improve AUC. Reverting changes.
Training on augumented user 83243 36/50 current_auc = 0.5892907945539524
User 83243 AUC after training: 0.5884779516358464
User 83243 does not improve AUC. Reverting changes.
Training on augumented user 10679 37/50 current_auc = 0.5892907945539524
User 10679 AUC after training: 0.5883966673440357
User 10679 does not improve AUC. Reverting changes.
Training on augumented user 75733 38/50 current_auc = 0.5892907945539524
User 75733 AUC after training: 0.589433042064621
User 75733 improves AUC. Keeping the model.
Training on augumented user 3698 39/50 current_auc = 0.589433042064621
User 3698 AUC after training: 0.5890672627514733
User 3698 does not improve AUC. Reverting changes.
Training on augumented user 6549 40/50 current_auc = 0.589433042064621
User 6549 AUC after training: 0.5891282259703312
User 6549 does not improve AUC. Reverting changes.
Training on augumented user 26947 41/50 current_auc = 0.589433042064621
User 26947 AUC after training: 0.5897988213777687
User 26947 improves AUC. Keeping the model.
Training on augumented user 11348 42/50 current_auc = 0.5897988213777687
User 11348 AUC after training: 0.584007315586263
User 11348 does not improve AUC. Reverting changes.
Training on augumented user 120859 43/50 current_auc = 0.5897988213777687
User 120859 AUC after training: 0.5878886405202195
User 120859 does not improve AUC. Reverting changes.
Training on augumented user 22661 44/50 current_auc = 0.5897988213777687
User 22661 AUC after training: 0.5904287746393009
User 22661 improves AUC. Keeping the model.
Training on augumented user 106612 45/50 current_auc = 0.5904287746393009
User 106612 AUC after training: 0.5906319853688274
User 106612 improves AUC. Keeping the model.
Training on augumented user 43920 46/50 current_auc = 0.5906319853688274
User 43920 AUC after training: 0.5901646006909165
User 43920 does not improve AUC. Reverting changes.
Training on augumented user 28169 47/50 current_auc = 0.5906319853688274
User 28169 AUC after training: 0.5905507010770168
User 28169 does not improve AUC. Reverting changes.
Training on augumented user 67048 48/50 current_auc = 0.5906319853688274
User 67048 AUC after training: 0.5898597845966267
User 67048 does not improve AUC. Reverting changes.
Training on augumented user 83271 49/50 current_auc = 0.5906319853688274
User 83271 AUC after training: 0.5901442796179638
User 83271 does not improve AUC. Reverting changes.
[2024-12-02 18:56:23.851636] start test user 3289 144/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:56:24.581930] start test user 3289 144/568 recall augumented users by random, augumented_users = [18592, 85184, 40159, 80779, 135725, 36147, 4730, 85083, 42934, 29924, 132975, 3462, 130876, 72033, 102595, 109194, 15764, 103723, 10725, 60021, 94966, 10447, 108374, 98460, 107550, 118988, 14351, 49844, 119112, 62776, 18189, 81487, 870, 99034, 15135, 105509, 18838, 134229, 64769, 73847, 46969, 40490, 119603, 16505, 14328, 58737, 41449, 83072, 53622, 118783]
[2024-12-02 18:56:24.611886] user = 3289 Cloud 144/568
[2024-12-02 18:56:24.644158] user = 3289 Local 144/568
[2024-12-02 18:56:24.960759] user = 3289 Local+ 144/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:56:27.103430] user = 3289 MPDA- 144/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.599647266313933
Training on augumented user 18592 0/50 current_auc = 0.599647266313933
User 18592 AUC after training: 0.6024691358024691
User 18592 improves AUC. Keeping the model.
Training on augumented user 85184 1/50 current_auc = 0.6024691358024691
User 85184 AUC after training: 0.6022927689594356
User 85184 does not improve AUC. Reverting changes.
Training on augumented user 40159 2/50 current_auc = 0.6024691358024691
User 40159 AUC after training: 0.6024691358024692
User 40159 improves AUC. Keeping the model.
Training on augumented user 80779 3/50 current_auc = 0.6024691358024692
User 80779 AUC after training: 0.6008818342151675
User 80779 does not improve AUC. Reverting changes.
Training on augumented user 135725 4/50 current_auc = 0.6024691358024692
User 135725 AUC after training: 0.6029982363315697
User 135725 improves AUC. Keeping the model.
Training on augumented user 36147 5/50 current_auc = 0.6029982363315697
User 36147 AUC after training: 0.6012345679012345
User 36147 does not improve AUC. Reverting changes.
Training on augumented user 4730 6/50 current_auc = 0.6029982363315697
User 4730 AUC after training: 0.6031746031746031
User 4730 improves AUC. Keeping the model.
Training on augumented user 85083 7/50 current_auc = 0.6031746031746031
User 85083 AUC after training: 0.6022927689594356
User 85083 does not improve AUC. Reverting changes.
Training on augumented user 42934 8/50 current_auc = 0.6031746031746031
User 42934 AUC after training: 0.6026455026455027
User 42934 does not improve AUC. Reverting changes.
Training on augumented user 29924 9/50 current_auc = 0.6031746031746031
User 29924 AUC after training: 0.600705467372134
User 29924 does not improve AUC. Reverting changes.
Training on augumented user 132975 10/50 current_auc = 0.6031746031746031
User 132975 AUC after training: 0.6019400352733686
User 132975 does not improve AUC. Reverting changes.
Training on augumented user 3462 11/50 current_auc = 0.6031746031746031
User 3462 AUC after training: 0.6017636684303351
User 3462 does not improve AUC. Reverting changes.
Training on augumented user 130876 12/50 current_auc = 0.6031746031746031
User 130876 AUC after training: 0.6008818342151675
User 130876 does not improve AUC. Reverting changes.
Training on augumented user 72033 13/50 current_auc = 0.6031746031746031
User 72033 AUC after training: 0.602116402116402
User 72033 does not improve AUC. Reverting changes.
Training on augumented user 102595 14/50 current_auc = 0.6031746031746031
User 102595 AUC after training: 0.5975308641975309
User 102595 does not improve AUC. Reverting changes.
Training on augumented user 109194 15/50 current_auc = 0.6031746031746031
User 109194 AUC after training: 0.6012345679012345
User 109194 does not improve AUC. Reverting changes.
Training on augumented user 15764 16/50 current_auc = 0.6031746031746031
User 15764 AUC after training: 0.6028218694885362
User 15764 does not improve AUC. Reverting changes.
Training on augumented user 103723 17/50 current_auc = 0.6031746031746031
User 103723 AUC after training: 0.6024691358024691
User 103723 does not improve AUC. Reverting changes.
Training on augumented user 10725 18/50 current_auc = 0.6031746031746031
User 10725 AUC after training: 0.602116402116402
User 10725 does not improve AUC. Reverting changes.
Training on augumented user 60021 19/50 current_auc = 0.6031746031746031
User 60021 AUC after training: 0.6033509700176367
User 60021 improves AUC. Keeping the model.
Training on augumented user 94966 20/50 current_auc = 0.6033509700176367
User 94966 AUC after training: 0.602116402116402
User 94966 does not improve AUC. Reverting changes.
Training on augumented user 10447 21/50 current_auc = 0.6033509700176367
User 10447 AUC after training: 0.6040564373897708
User 10447 improves AUC. Keeping the model.
Training on augumented user 108374 22/50 current_auc = 0.6040564373897708
User 108374 AUC after training: 0.6040564373897708
User 108374 does not improve AUC. Reverting changes.
Training on augumented user 98460 23/50 current_auc = 0.6040564373897708
User 98460 AUC after training: 0.6031746031746031
User 98460 does not improve AUC. Reverting changes.
Training on augumented user 107550 24/50 current_auc = 0.6040564373897708
User 107550 AUC after training: 0.6024691358024692
User 107550 does not improve AUC. Reverting changes.
Training on augumented user 118988 25/50 current_auc = 0.6040564373897708
User 118988 AUC after training: 0.6031746031746031
User 118988 does not improve AUC. Reverting changes.
Training on augumented user 14351 26/50 current_auc = 0.6040564373897708
User 14351 AUC after training: 0.6031746031746031
User 14351 does not improve AUC. Reverting changes.
Training on augumented user 49844 27/50 current_auc = 0.6040564373897708
User 49844 AUC after training: 0.6040564373897708
User 49844 does not improve AUC. Reverting changes.
Training on augumented user 119112 28/50 current_auc = 0.6040564373897708
User 119112 AUC after training: 0.6031746031746033
User 119112 does not improve AUC. Reverting changes.
Training on augumented user 62776 29/50 current_auc = 0.6040564373897708
User 62776 AUC after training: 0.6037037037037037
User 62776 does not improve AUC. Reverting changes.
Training on augumented user 18189 30/50 current_auc = 0.6040564373897708
User 18189 AUC after training: 0.6047619047619048
User 18189 improves AUC. Keeping the model.
Training on augumented user 81487 31/50 current_auc = 0.6047619047619048
User 81487 AUC after training: 0.5973544973544973
User 81487 does not improve AUC. Reverting changes.
Training on augumented user 870 32/50 current_auc = 0.6047619047619048
User 870 AUC after training: 0.6049382716049383
User 870 improves AUC. Keeping the model.
Training on augumented user 99034 33/50 current_auc = 0.6049382716049383
User 99034 AUC after training: 0.6042328042328042
User 99034 does not improve AUC. Reverting changes.
Training on augumented user 15135 34/50 current_auc = 0.6049382716049383
User 15135 AUC after training: 0.6038800705467372
User 15135 does not improve AUC. Reverting changes.
Training on augumented user 105509 35/50 current_auc = 0.6049382716049383
User 105509 AUC after training: 0.6051146384479718
User 105509 improves AUC. Keeping the model.
Training on augumented user 18838 36/50 current_auc = 0.6051146384479718
User 18838 AUC after training: 0.6047619047619047
User 18838 does not improve AUC. Reverting changes.
Training on augumented user 134229 37/50 current_auc = 0.6051146384479718
User 134229 AUC after training: 0.6031746031746031
User 134229 does not improve AUC. Reverting changes.
Training on augumented user 64769 38/50 current_auc = 0.6051146384479718
User 64769 AUC after training: 0.6038800705467372
User 64769 does not improve AUC. Reverting changes.
Training on augumented user 73847 39/50 current_auc = 0.6051146384479718
User 73847 AUC after training: 0.6042328042328042
User 73847 does not improve AUC. Reverting changes.
Training on augumented user 46969 40/50 current_auc = 0.6051146384479718
User 46969 AUC after training: 0.6038800705467372
User 46969 does not improve AUC. Reverting changes.
Training on augumented user 40490 41/50 current_auc = 0.6051146384479718
User 40490 AUC after training: 0.6031746031746031
User 40490 does not improve AUC. Reverting changes.
Training on augumented user 119603 42/50 current_auc = 0.6051146384479718
User 119603 AUC after training: 0.6045855379188713
User 119603 does not improve AUC. Reverting changes.
Training on augumented user 16505 43/50 current_auc = 0.6051146384479718
User 16505 AUC after training: 0.6044091710758377
User 16505 does not improve AUC. Reverting changes.
Training on augumented user 14328 44/50 current_auc = 0.6051146384479718
User 14328 AUC after training: 0.6056437389770722
User 14328 improves AUC. Keeping the model.
Training on augumented user 58737 45/50 current_auc = 0.6056437389770722
User 58737 AUC after training: 0.6068783068783068
User 58737 improves AUC. Keeping the model.
Training on augumented user 41449 46/50 current_auc = 0.6068783068783068
User 41449 AUC after training: 0.6081128747795415
User 41449 improves AUC. Keeping the model.
Training on augumented user 83072 47/50 current_auc = 0.6081128747795415
User 83072 AUC after training: 0.6056437389770724
User 83072 does not improve AUC. Reverting changes.
Training on augumented user 53622 48/50 current_auc = 0.6081128747795415
User 53622 AUC after training: 0.6072310405643738
User 53622 does not improve AUC. Reverting changes.
Training on augumented user 118783 49/50 current_auc = 0.6081128747795415
User 118783 AUC after training: 0.6058201058201058
User 118783 does not improve AUC. Reverting changes.
[2024-12-02 18:56:57.773516] start test user 3334 145/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:56:58.531655] start test user 3334 145/568 recall augumented users by random, augumented_users = [67426, 8477, 107108, 117920, 18286, 53414, 126606, 8734, 103679, 37447, 86766, 88313, 19158, 132101, 30245, 134539, 42128, 48247, 79462, 61230, 27639, 125986, 36752, 25227, 119192, 124111, 37719, 752, 135708, 73168, 84007, 63669, 98082, 33821, 82162, 23622, 47073, 45562, 18200, 138058, 23267, 75771, 95413, 12643, 80108, 83090, 52706, 62642, 96849, 57211]
[2024-12-02 18:56:58.560360] user = 3334 Cloud 145/568
[2024-12-02 18:56:58.569750] user = 3334 Local 145/568
[2024-12-02 18:56:58.589080] user = 3334 Local+ 145/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:57:01.314420] user = 3334 MPDA- 145/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5357142857142857
Training on augumented user 67426 0/50 current_auc = 0.5357142857142857
User 67426 AUC after training: 0.5357142857142857
User 67426 does not improve AUC. Reverting changes.
Training on augumented user 8477 1/50 current_auc = 0.5357142857142857
User 8477 AUC after training: 0.5357142857142857
User 8477 does not improve AUC. Reverting changes.
Training on augumented user 107108 2/50 current_auc = 0.5357142857142857
User 107108 AUC after training: 0.5357142857142857
User 107108 does not improve AUC. Reverting changes.
Training on augumented user 117920 3/50 current_auc = 0.5357142857142857
User 117920 AUC after training: 0.5357142857142857
User 117920 does not improve AUC. Reverting changes.
Training on augumented user 18286 4/50 current_auc = 0.5357142857142857
User 18286 AUC after training: 0.5357142857142857
User 18286 does not improve AUC. Reverting changes.
Training on augumented user 53414 5/50 current_auc = 0.5357142857142857
User 53414 AUC after training: 0.5357142857142857
User 53414 does not improve AUC. Reverting changes.
Training on augumented user 126606 6/50 current_auc = 0.5357142857142857
User 126606 AUC after training: 0.5357142857142857
User 126606 does not improve AUC. Reverting changes.
Training on augumented user 8734 7/50 current_auc = 0.5357142857142857
User 8734 AUC after training: 0.5357142857142857
User 8734 does not improve AUC. Reverting changes.
Training on augumented user 103679 8/50 current_auc = 0.5357142857142857
User 103679 AUC after training: 0.5357142857142857
User 103679 does not improve AUC. Reverting changes.
Training on augumented user 37447 9/50 current_auc = 0.5357142857142857
User 37447 AUC after training: 0.5357142857142857
User 37447 does not improve AUC. Reverting changes.
Training on augumented user 86766 10/50 current_auc = 0.5357142857142857
User 86766 AUC after training: 0.5357142857142857
User 86766 does not improve AUC. Reverting changes.
Training on augumented user 88313 11/50 current_auc = 0.5357142857142857
User 88313 AUC after training: 0.5357142857142857
User 88313 does not improve AUC. Reverting changes.
Training on augumented user 19158 12/50 current_auc = 0.5357142857142857
User 19158 AUC after training: 0.5357142857142857
User 19158 does not improve AUC. Reverting changes.
Training on augumented user 132101 13/50 current_auc = 0.5357142857142857
User 132101 AUC after training: 0.5357142857142857
User 132101 does not improve AUC. Reverting changes.
Training on augumented user 30245 14/50 current_auc = 0.5357142857142857
User 30245 AUC after training: 0.5357142857142857
User 30245 does not improve AUC. Reverting changes.
Training on augumented user 134539 15/50 current_auc = 0.5357142857142857
User 134539 AUC after training: 0.5357142857142857
User 134539 does not improve AUC. Reverting changes.
Training on augumented user 42128 16/50 current_auc = 0.5357142857142857
User 42128 AUC after training: 0.5357142857142857
User 42128 does not improve AUC. Reverting changes.
Training on augumented user 48247 17/50 current_auc = 0.5357142857142857
User 48247 AUC after training: 0.5357142857142857
User 48247 does not improve AUC. Reverting changes.
Training on augumented user 79462 18/50 current_auc = 0.5357142857142857
User 79462 AUC after training: 0.5357142857142857
User 79462 does not improve AUC. Reverting changes.
Training on augumented user 61230 19/50 current_auc = 0.5357142857142857
User 61230 AUC after training: 0.5357142857142857
User 61230 does not improve AUC. Reverting changes.
Training on augumented user 27639 20/50 current_auc = 0.5357142857142857
User 27639 AUC after training: 0.5357142857142857
User 27639 does not improve AUC. Reverting changes.
Training on augumented user 125986 21/50 current_auc = 0.5357142857142857
User 125986 AUC after training: 0.5357142857142857
User 125986 does not improve AUC. Reverting changes.
Training on augumented user 36752 22/50 current_auc = 0.5357142857142857
User 36752 AUC after training: 0.5357142857142857
User 36752 does not improve AUC. Reverting changes.
Training on augumented user 25227 23/50 current_auc = 0.5357142857142857
User 25227 AUC after training: 0.5357142857142857
User 25227 does not improve AUC. Reverting changes.
Training on augumented user 119192 24/50 current_auc = 0.5357142857142857
User 119192 AUC after training: 0.5357142857142857
User 119192 does not improve AUC. Reverting changes.
Training on augumented user 124111 25/50 current_auc = 0.5357142857142857
User 124111 AUC after training: 0.5357142857142857
User 124111 does not improve AUC. Reverting changes.
Training on augumented user 37719 26/50 current_auc = 0.5357142857142857
User 37719 AUC after training: 0.5357142857142857
User 37719 does not improve AUC. Reverting changes.
Training on augumented user 752 27/50 current_auc = 0.5357142857142857
User 752 AUC after training: 0.5357142857142857
User 752 does not improve AUC. Reverting changes.
Training on augumented user 135708 28/50 current_auc = 0.5357142857142857
User 135708 AUC after training: 0.5357142857142857
User 135708 does not improve AUC. Reverting changes.
Training on augumented user 73168 29/50 current_auc = 0.5357142857142857
User 73168 AUC after training: 0.5357142857142857
User 73168 does not improve AUC. Reverting changes.
Training on augumented user 84007 30/50 current_auc = 0.5357142857142857
User 84007 AUC after training: 0.5357142857142857
User 84007 does not improve AUC. Reverting changes.
Training on augumented user 63669 31/50 current_auc = 0.5357142857142857
User 63669 AUC after training: 0.5357142857142857
User 63669 does not improve AUC. Reverting changes.
Training on augumented user 98082 32/50 current_auc = 0.5357142857142857
User 98082 AUC after training: 0.5357142857142857
User 98082 does not improve AUC. Reverting changes.
Training on augumented user 33821 33/50 current_auc = 0.5357142857142857
User 33821 AUC after training: 0.5357142857142857
User 33821 does not improve AUC. Reverting changes.
Training on augumented user 82162 34/50 current_auc = 0.5357142857142857
User 82162 AUC after training: 0.5357142857142857
User 82162 does not improve AUC. Reverting changes.
Training on augumented user 23622 35/50 current_auc = 0.5357142857142857
User 23622 AUC after training: 0.5357142857142857
User 23622 does not improve AUC. Reverting changes.
Training on augumented user 47073 36/50 current_auc = 0.5357142857142857
User 47073 AUC after training: 0.5357142857142857
User 47073 does not improve AUC. Reverting changes.
Training on augumented user 45562 37/50 current_auc = 0.5357142857142857
User 45562 AUC after training: 0.5357142857142857
User 45562 does not improve AUC. Reverting changes.
Training on augumented user 18200 38/50 current_auc = 0.5357142857142857
User 18200 AUC after training: 0.5357142857142857
User 18200 does not improve AUC. Reverting changes.
Training on augumented user 138058 39/50 current_auc = 0.5357142857142857
User 138058 AUC after training: 0.5357142857142857
User 138058 does not improve AUC. Reverting changes.
Training on augumented user 23267 40/50 current_auc = 0.5357142857142857
User 23267 AUC after training: 0.5357142857142857
User 23267 does not improve AUC. Reverting changes.
Training on augumented user 75771 41/50 current_auc = 0.5357142857142857
User 75771 AUC after training: 0.5357142857142857
User 75771 does not improve AUC. Reverting changes.
Training on augumented user 95413 42/50 current_auc = 0.5357142857142857
User 95413 AUC after training: 0.5357142857142857
User 95413 does not improve AUC. Reverting changes.
Training on augumented user 12643 43/50 current_auc = 0.5357142857142857
User 12643 AUC after training: 0.5357142857142857
User 12643 does not improve AUC. Reverting changes.
Training on augumented user 80108 44/50 current_auc = 0.5357142857142857
User 80108 AUC after training: 0.5357142857142857
User 80108 does not improve AUC. Reverting changes.
Training on augumented user 83090 45/50 current_auc = 0.5357142857142857
User 83090 AUC after training: 0.5357142857142857
User 83090 does not improve AUC. Reverting changes.
Training on augumented user 52706 46/50 current_auc = 0.5357142857142857
User 52706 AUC after training: 0.5357142857142857
User 52706 does not improve AUC. Reverting changes.
Training on augumented user 62642 47/50 current_auc = 0.5357142857142857
User 62642 AUC after training: 0.5357142857142857
User 62642 does not improve AUC. Reverting changes.
Training on augumented user 96849 48/50 current_auc = 0.5357142857142857
User 96849 AUC after training: 0.5357142857142857
User 96849 does not improve AUC. Reverting changes.
Training on augumented user 57211 49/50 current_auc = 0.5357142857142857
User 57211 AUC after training: 0.5357142857142857
User 57211 does not improve AUC. Reverting changes.
[2024-12-02 18:57:31.867149] start test user 3364 146/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:57:32.771272] start test user 3364 146/568 recall augumented users by random, augumented_users = [12738, 95269, 58475, 84744, 135372, 36642, 115051, 118328, 81282, 65555, 123167, 111172, 77242, 99054, 47037, 1130, 93845, 77787, 44773, 7956, 7301, 65963, 25242, 49512, 136929, 64210, 100023, 39689, 70892, 64884, 20870, 96881, 40796, 93383, 64148, 58764, 120707, 26438, 4710, 59365, 67564, 26310, 3236, 125774, 20454, 107074, 63642, 116709, 6389, 51412]
[2024-12-02 18:57:32.789021] user = 3364 Cloud 146/568
[2024-12-02 18:57:32.823492] user = 3364 Local 146/568
[2024-12-02 18:57:32.931709] user = 3364 Local+ 146/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:57:35.592667] user = 3364 MPDA- 146/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7085678549093184
Training on augumented user 12738 0/50 current_auc = 0.7085678549093184
User 12738 AUC after training: 0.7077340004169272
User 12738 does not improve AUC. Reverting changes.
Training on augumented user 95269 1/50 current_auc = 0.7085678549093184
User 95269 AUC after training: 0.7082551594746717
User 95269 does not improve AUC. Reverting changes.
Training on augumented user 58475 2/50 current_auc = 0.7085678549093184
User 58475 AUC after training: 0.7082204155374887
User 58475 does not improve AUC. Reverting changes.
Training on augumented user 84744 3/50 current_auc = 0.7085678549093184
User 84744 AUC after training: 0.7078729761656591
User 84744 does not improve AUC. Reverting changes.
Training on augumented user 135372 4/50 current_auc = 0.7085678549093184
User 135372 AUC after training: 0.7078034882912931
User 135372 does not improve AUC. Reverting changes.
Training on augumented user 36642 5/50 current_auc = 0.7085678549093184
User 36642 AUC after training: 0.7078034882912931
User 36642 does not improve AUC. Reverting changes.
Training on augumented user 115051 6/50 current_auc = 0.7085678549093184
User 115051 AUC after training: 0.7072475852963658
User 115051 does not improve AUC. Reverting changes.
Training on augumented user 118328 7/50 current_auc = 0.7085678549093184
User 118328 AUC after training: 0.708011951914391
User 118328 does not improve AUC. Reverting changes.
Training on augumented user 81282 8/50 current_auc = 0.7085678549093184
User 81282 AUC after training: 0.7066221944270724
User 81282 does not improve AUC. Reverting changes.
Training on augumented user 65555 9/50 current_auc = 0.7085678549093184
User 65555 AUC after training: 0.7078729761656591
User 65555 does not improve AUC. Reverting changes.
Training on augumented user 123167 10/50 current_auc = 0.7085678549093184
User 123167 AUC after training: 0.7073170731707317
User 123167 does not improve AUC. Reverting changes.
Training on augumented user 111172 11/50 current_auc = 0.7085678549093184
User 111172 AUC after training: 0.7081509276631228
User 111172 does not improve AUC. Reverting changes.
Training on augumented user 77242 12/50 current_auc = 0.7085678549093184
User 77242 AUC after training: 0.7073865610450976
User 77242 does not improve AUC. Reverting changes.
Training on augumented user 99054 13/50 current_auc = 0.7085678549093184
User 99054 AUC after training: 0.7075950246681952
User 99054 does not improve AUC. Reverting changes.
Training on augumented user 47037 14/50 current_auc = 0.7085678549093184
User 47037 AUC after training: 0.7077340004169272
User 47037 does not improve AUC. Reverting changes.
Training on augumented user 1130 15/50 current_auc = 0.7085678549093184
User 1130 AUC after training: 0.7083593912862205
User 1130 does not improve AUC. Reverting changes.
Training on augumented user 93845 16/50 current_auc = 0.7085678549093184
User 93845 AUC after training: 0.7077340004169271
User 93845 does not improve AUC. Reverting changes.
Training on augumented user 77787 17/50 current_auc = 0.7085678549093184
User 77787 AUC after training: 0.7069696337989022
User 77787 does not improve AUC. Reverting changes.
Training on augumented user 44773 18/50 current_auc = 0.7085678549093184
User 44773 AUC after training: 0.7075950246681955
User 44773 does not improve AUC. Reverting changes.
Training on augumented user 7956 19/50 current_auc = 0.7085678549093184
User 7956 AUC after training: 0.7066221944270725
User 7956 does not improve AUC. Reverting changes.
Training on augumented user 7301 20/50 current_auc = 0.7085678549093184
User 7301 AUC after training: 0.7084983670349524
User 7301 does not improve AUC. Reverting changes.
Training on augumented user 65963 21/50 current_auc = 0.7085678549093184
User 65963 AUC after training: 0.7083593912862205
User 65963 does not improve AUC. Reverting changes.
Training on augumented user 25242 22/50 current_auc = 0.7085678549093184
User 25242 AUC after training: 0.7080814397887569
User 25242 does not improve AUC. Reverting changes.
Training on augumented user 49512 23/50 current_auc = 0.7085678549093184
User 49512 AUC after training: 0.7068306580501703
User 49512 does not improve AUC. Reverting changes.
Training on augumented user 136929 24/50 current_auc = 0.7085678549093184
User 136929 AUC after training: 0.707108609547634
User 136929 does not improve AUC. Reverting changes.
Training on augumented user 64210 25/50 current_auc = 0.7085678549093184
User 64210 AUC after training: 0.7083593912862205
User 64210 does not improve AUC. Reverting changes.
Training on augumented user 100023 26/50 current_auc = 0.7085678549093184
User 100023 AUC after training: 0.7067264262386214
User 100023 does not improve AUC. Reverting changes.
Training on augumented user 39689 27/50 current_auc = 0.7085678549093184
User 39689 AUC after training: 0.7073170731707317
User 39689 does not improve AUC. Reverting changes.
Training on augumented user 70892 28/50 current_auc = 0.7085678549093184
User 70892 AUC after training: 0.7076645125425612
User 70892 does not improve AUC. Reverting changes.
Training on augumented user 64884 29/50 current_auc = 0.7085678549093184
User 64884 AUC after training: 0.7084983670349525
User 64884 does not improve AUC. Reverting changes.
Training on augumented user 20870 30/50 current_auc = 0.7085678549093184
User 20870 AUC after training: 0.7069696337989022
User 20870 does not improve AUC. Reverting changes.
Training on augumented user 96881 31/50 current_auc = 0.7085678549093184
User 96881 AUC after training: 0.7075950246681955
User 96881 does not improve AUC. Reverting changes.
Training on augumented user 40796 32/50 current_auc = 0.7085678549093184
User 40796 AUC after training: 0.7081509276631227
User 40796 does not improve AUC. Reverting changes.
Training on augumented user 93383 33/50 current_auc = 0.7085678549093184
User 93383 AUC after training: 0.707942464040025
User 93383 does not improve AUC. Reverting changes.
Training on augumented user 64148 34/50 current_auc = 0.7085678549093184
User 64148 AUC after training: 0.7077340004169272
User 64148 does not improve AUC. Reverting changes.
Training on augumented user 58764 35/50 current_auc = 0.7085678549093184
User 58764 AUC after training: 0.7082204155374887
User 58764 does not improve AUC. Reverting changes.
Training on augumented user 120707 36/50 current_auc = 0.7085678549093184
User 120707 AUC after training: 0.7094711972760753
User 120707 improves AUC. Keeping the model.
Training on augumented user 26438 37/50 current_auc = 0.7094711972760753
User 26438 AUC after training: 0.7094711972760753
User 26438 does not improve AUC. Reverting changes.
Training on augumented user 4710 38/50 current_auc = 0.7094711972760753
User 4710 AUC after training: 0.7103745396428323
User 4710 improves AUC. Keeping the model.
Training on augumented user 59365 39/50 current_auc = 0.7103745396428323
User 59365 AUC after training: 0.7100271002710027
User 59365 does not improve AUC. Reverting changes.
Training on augumented user 67564 40/50 current_auc = 0.7103745396428323
User 67564 AUC after training: 0.7091585018414287
User 67564 does not improve AUC. Reverting changes.
Training on augumented user 26310 41/50 current_auc = 0.7103745396428323
User 26310 AUC after training: 0.7100271002710027
User 26310 does not improve AUC. Reverting changes.
Training on augumented user 3236 42/50 current_auc = 0.7103745396428323
User 3236 AUC after training: 0.7077340004169271
User 3236 does not improve AUC. Reverting changes.
Training on augumented user 125774 43/50 current_auc = 0.7103745396428323
User 125774 AUC after training: 0.7093669654645265
User 125774 does not improve AUC. Reverting changes.
Training on augumented user 20454 44/50 current_auc = 0.7103745396428323
User 20454 AUC after training: 0.7094711972760754
User 20454 does not improve AUC. Reverting changes.
Training on augumented user 107074 45/50 current_auc = 0.7103745396428323
User 107074 AUC after training: 0.7098186366479049
User 107074 does not improve AUC. Reverting changes.
Training on augumented user 63642 46/50 current_auc = 0.7103745396428323
User 63642 AUC after training: 0.7082204155374887
User 63642 does not improve AUC. Reverting changes.
Training on augumented user 116709 47/50 current_auc = 0.7103745396428323
User 116709 AUC after training: 0.708915294281148
User 116709 does not improve AUC. Reverting changes.
Training on augumented user 6389 48/50 current_auc = 0.7103745396428323
User 6389 AUC after training: 0.7095754290876242
User 6389 does not improve AUC. Reverting changes.
Training on augumented user 51412 49/50 current_auc = 0.7103745396428323
User 51412 AUC after training: 0.7094017094017093
User 51412 does not improve AUC. Reverting changes.
[2024-12-02 18:58:08.762402] start test user 3365 147/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:58:09.341644] start test user 3365 147/568 recall augumented users by random, augumented_users = [82647, 92685, 80761, 64227, 86416, 76547, 91681, 134059, 121023, 106677, 114037, 120790, 95257, 74577, 98924, 118697, 106082, 61388, 56701, 44306, 81610, 136499, 61968, 55820, 136673, 57196, 13858, 125907, 10778, 127867, 95593, 18137, 75901, 4441, 12919, 63970, 12516, 73187, 130048, 78662, 83208, 81133, 52071, 130681, 91252, 117233, 121574, 118278, 118863, 17456]
[2024-12-02 18:58:09.361685] user = 3365 Cloud 147/568
[2024-12-02 18:58:09.378663] user = 3365 Local 147/568
[2024-12-02 18:58:09.404305] user = 3365 Local+ 147/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:58:11.591917] user = 3365 MPDA- 147/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6989247311827957
Training on augumented user 82647 0/50 current_auc = 0.6989247311827957
User 82647 AUC after training: 0.6978218913702784
User 82647 does not improve AUC. Reverting changes.
Training on augumented user 92685 1/50 current_auc = 0.6989247311827957
User 92685 AUC after training: 0.6997518610421836
User 92685 improves AUC. Keeping the model.
Training on augumented user 80761 2/50 current_auc = 0.6997518610421836
User 80761 AUC after training: 0.7008547008547008
User 80761 improves AUC. Keeping the model.
Training on augumented user 64227 3/50 current_auc = 0.7008547008547008
User 64227 AUC after training: 0.6992004411359249
User 64227 does not improve AUC. Reverting changes.
Training on augumented user 86416 4/50 current_auc = 0.7008547008547008
User 86416 AUC after training: 0.7003032809484422
User 86416 does not improve AUC. Reverting changes.
Training on augumented user 76547 5/50 current_auc = 0.7008547008547008
User 76547 AUC after training: 0.7014061207609594
User 76547 improves AUC. Keeping the model.
Training on augumented user 91681 6/50 current_auc = 0.7014061207609594
User 91681 AUC after training: 0.702784670526606
User 91681 improves AUC. Keeping the model.
Training on augumented user 134059 7/50 current_auc = 0.702784670526606
User 134059 AUC after training: 0.7025089605734768
User 134059 does not improve AUC. Reverting changes.
Training on augumented user 121023 8/50 current_auc = 0.702784670526606
User 121023 AUC after training: 0.7022332506203474
User 121023 does not improve AUC. Reverting changes.
Training on augumented user 106677 9/50 current_auc = 0.702784670526606
User 106677 AUC after training: 0.7060931899641576
User 106677 improves AUC. Keeping the model.
Training on augumented user 114037 10/50 current_auc = 0.7060931899641576
User 114037 AUC after training: 0.7058174800110283
User 114037 does not improve AUC. Reverting changes.
Training on augumented user 120790 11/50 current_auc = 0.7060931899641576
User 120790 AUC after training: 0.7052660601047697
User 120790 does not improve AUC. Reverting changes.
Training on augumented user 95257 12/50 current_auc = 0.7060931899641576
User 95257 AUC after training: 0.7058174800110283
User 95257 does not improve AUC. Reverting changes.
Training on augumented user 74577 13/50 current_auc = 0.7060931899641576
User 74577 AUC after training: 0.7080231596360629
User 74577 improves AUC. Keeping the model.
Training on augumented user 98924 14/50 current_auc = 0.7080231596360629
User 98924 AUC after training: 0.7055417700578991
User 98924 does not improve AUC. Reverting changes.
Training on augumented user 118697 15/50 current_auc = 0.7080231596360629
User 118697 AUC after training: 0.7069203198235456
User 118697 does not improve AUC. Reverting changes.
Training on augumented user 106082 16/50 current_auc = 0.7080231596360629
User 106082 AUC after training: 0.7066446098704162
User 106082 does not improve AUC. Reverting changes.
Training on augumented user 61388 17/50 current_auc = 0.7080231596360629
User 61388 AUC after training: 0.7082988695891921
User 61388 improves AUC. Keeping the model.
Training on augumented user 56701 18/50 current_auc = 0.7082988695891921
User 56701 AUC after training: 0.7074717397298043
User 56701 does not improve AUC. Reverting changes.
Training on augumented user 44306 19/50 current_auc = 0.7082988695891921
User 44306 AUC after training: 0.7088502894954508
User 44306 improves AUC. Keeping the model.
Training on augumented user 81610 20/50 current_auc = 0.7088502894954508
User 81610 AUC after training: 0.7085745795423215
User 81610 does not improve AUC. Reverting changes.
Training on augumented user 136499 21/50 current_auc = 0.7088502894954508
User 136499 AUC after training: 0.7088502894954507
User 136499 does not improve AUC. Reverting changes.
Training on augumented user 61968 22/50 current_auc = 0.7088502894954508
User 61968 AUC after training: 0.7085745795423215
User 61968 does not improve AUC. Reverting changes.
Training on augumented user 55820 23/50 current_auc = 0.7088502894954508
User 55820 AUC after training: 0.7091259994485801
User 55820 improves AUC. Keeping the model.
Training on augumented user 136673 24/50 current_auc = 0.7091259994485801
User 136673 AUC after training: 0.709953129307968
User 136673 improves AUC. Keeping the model.
Training on augumented user 57196 25/50 current_auc = 0.709953129307968
User 57196 AUC after training: 0.709953129307968
User 57196 does not improve AUC. Reverting changes.
Training on augumented user 13858 26/50 current_auc = 0.709953129307968
User 13858 AUC after training: 0.7094017094017094
User 13858 does not improve AUC. Reverting changes.
Training on augumented user 125907 27/50 current_auc = 0.709953129307968
User 125907 AUC after training: 0.7124345188861319
User 125907 improves AUC. Keeping the model.
Training on augumented user 10778 28/50 current_auc = 0.7124345188861319
User 10778 AUC after training: 0.7107802591673559
User 10778 does not improve AUC. Reverting changes.
Training on augumented user 127867 29/50 current_auc = 0.7124345188861319
User 127867 AUC after training: 0.7102288392610973
User 127867 does not improve AUC. Reverting changes.
Training on augumented user 95593 30/50 current_auc = 0.7124345188861319
User 95593 AUC after training: 0.7132616487455197
User 95593 improves AUC. Keeping the model.
Training on augumented user 18137 31/50 current_auc = 0.7132616487455197
User 18137 AUC after training: 0.7140887786049076
User 18137 improves AUC. Keeping the model.
Training on augumented user 75901 32/50 current_auc = 0.7140887786049076
User 75901 AUC after training: 0.7135373586986491
User 75901 does not improve AUC. Reverting changes.
Training on augumented user 4441 33/50 current_auc = 0.7140887786049076
User 4441 AUC after training: 0.7140887786049076
User 4441 does not improve AUC. Reverting changes.
Training on augumented user 12919 34/50 current_auc = 0.7140887786049076
User 12919 AUC after training: 0.7135373586986491
User 12919 does not improve AUC. Reverting changes.
Training on augumented user 63970 35/50 current_auc = 0.7140887786049076
User 63970 AUC after training: 0.7118830989798732
User 63970 does not improve AUC. Reverting changes.
Training on augumented user 12516 36/50 current_auc = 0.7140887786049076
User 12516 AUC after training: 0.7146401985111662
User 12516 improves AUC. Keeping the model.
Training on augumented user 73187 37/50 current_auc = 0.7146401985111662
User 73187 AUC after training: 0.7146401985111661
User 73187 does not improve AUC. Reverting changes.
Training on augumented user 130048 38/50 current_auc = 0.7146401985111662
User 130048 AUC after training: 0.7140887786049076
User 130048 does not improve AUC. Reverting changes.
Training on augumented user 78662 39/50 current_auc = 0.7146401985111662
User 78662 AUC after training: 0.7149159084642956
User 78662 improves AUC. Keeping the model.
Training on augumented user 83208 40/50 current_auc = 0.7149159084642956
User 83208 AUC after training: 0.714364488558037
User 83208 does not improve AUC. Reverting changes.
Training on augumented user 81133 41/50 current_auc = 0.7149159084642956
User 81133 AUC after training: 0.7138130686517783
User 81133 does not improve AUC. Reverting changes.
Training on augumented user 52071 42/50 current_auc = 0.7149159084642956
User 52071 AUC after training: 0.713537358698649
User 52071 does not improve AUC. Reverting changes.
Training on augumented user 130681 43/50 current_auc = 0.7149159084642956
User 130681 AUC after training: 0.7146401985111662
User 130681 does not improve AUC. Reverting changes.
Training on augumented user 91252 44/50 current_auc = 0.7149159084642956
User 91252 AUC after training: 0.7140887786049077
User 91252 does not improve AUC. Reverting changes.
Training on augumented user 117233 45/50 current_auc = 0.7149159084642956
User 117233 AUC after training: 0.714364488558037
User 117233 does not improve AUC. Reverting changes.
Training on augumented user 121574 46/50 current_auc = 0.7149159084642956
User 121574 AUC after training: 0.7140887786049076
User 121574 does not improve AUC. Reverting changes.
Training on augumented user 118278 47/50 current_auc = 0.7149159084642956
User 118278 AUC after training: 0.7149159084642955
User 118278 does not improve AUC. Reverting changes.
Training on augumented user 118863 48/50 current_auc = 0.7149159084642956
User 118863 AUC after training: 0.7146401985111662
User 118863 does not improve AUC. Reverting changes.
Training on augumented user 17456 49/50 current_auc = 0.7149159084642956
User 17456 AUC after training: 0.714364488558037
User 17456 does not improve AUC. Reverting changes.
[2024-12-02 18:58:43.056630] start test user 3415 148/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:58:43.721575] start test user 3415 148/568 recall augumented users by random, augumented_users = [105156, 53833, 27530, 108118, 37220, 73884, 67366, 38360, 2533, 14202, 11549, 47946, 53432, 56700, 79838, 111359, 51909, 116990, 36285, 128048, 132496, 6126, 52457, 137828, 31599, 67302, 100776, 108433, 18343, 120315, 4109, 68837, 26913, 117440, 44133, 72144, 124904, 124298, 21093, 95047, 90137, 39338, 22689, 69196, 85669, 3419, 84792, 54170, 68358, 10510]
[2024-12-02 18:58:43.743160] user = 3415 Cloud 148/568
[2024-12-02 18:58:43.778973] user = 3415 Local 148/568
[2024-12-02 18:58:43.823370] user = 3415 Local+ 148/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:58:47.231832] user = 3415 MPDA- 148/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5823529411764705
Training on augumented user 105156 0/50 current_auc = 0.5823529411764705
User 105156 AUC after training: 0.5764705882352941
User 105156 does not improve AUC. Reverting changes.
Training on augumented user 53833 1/50 current_auc = 0.5823529411764705
User 53833 AUC after training: 0.5764705882352941
User 53833 does not improve AUC. Reverting changes.
Training on augumented user 27530 2/50 current_auc = 0.5823529411764705
User 27530 AUC after training: 0.5882352941176471
User 27530 improves AUC. Keeping the model.
Training on augumented user 108118 3/50 current_auc = 0.5882352941176471
User 108118 AUC after training: 0.5882352941176471
User 108118 does not improve AUC. Reverting changes.
Training on augumented user 37220 4/50 current_auc = 0.5882352941176471
User 37220 AUC after training: 0.5882352941176471
User 37220 does not improve AUC. Reverting changes.
Training on augumented user 73884 5/50 current_auc = 0.5882352941176471
User 73884 AUC after training: 0.5823529411764705
User 73884 does not improve AUC. Reverting changes.
Training on augumented user 67366 6/50 current_auc = 0.5882352941176471
User 67366 AUC after training: 0.5882352941176471
User 67366 does not improve AUC. Reverting changes.
Training on augumented user 38360 7/50 current_auc = 0.5882352941176471
User 38360 AUC after training: 0.5882352941176471
User 38360 does not improve AUC. Reverting changes.
Training on augumented user 2533 8/50 current_auc = 0.5882352941176471
User 2533 AUC after training: 0.5882352941176471
User 2533 does not improve AUC. Reverting changes.
Training on augumented user 14202 9/50 current_auc = 0.5882352941176471
User 14202 AUC after training: 0.5823529411764705
User 14202 does not improve AUC. Reverting changes.
Training on augumented user 11549 10/50 current_auc = 0.5882352941176471
User 11549 AUC after training: 0.5823529411764705
User 11549 does not improve AUC. Reverting changes.
Training on augumented user 47946 11/50 current_auc = 0.5882352941176471
User 47946 AUC after training: 0.5764705882352941
User 47946 does not improve AUC. Reverting changes.
Training on augumented user 53432 12/50 current_auc = 0.5882352941176471
User 53432 AUC after training: 0.5882352941176471
User 53432 does not improve AUC. Reverting changes.
Training on augumented user 56700 13/50 current_auc = 0.5882352941176471
User 56700 AUC after training: 0.5882352941176471
User 56700 does not improve AUC. Reverting changes.
Training on augumented user 79838 14/50 current_auc = 0.5882352941176471
User 79838 AUC after training: 0.5882352941176471
User 79838 does not improve AUC. Reverting changes.
Training on augumented user 111359 15/50 current_auc = 0.5882352941176471
User 111359 AUC after training: 0.5823529411764705
User 111359 does not improve AUC. Reverting changes.
Training on augumented user 51909 16/50 current_auc = 0.5882352941176471
User 51909 AUC after training: 0.5882352941176471
User 51909 does not improve AUC. Reverting changes.
Training on augumented user 116990 17/50 current_auc = 0.5882352941176471
User 116990 AUC after training: 0.5882352941176471
User 116990 does not improve AUC. Reverting changes.
Training on augumented user 36285 18/50 current_auc = 0.5882352941176471
User 36285 AUC after training: 0.5882352941176471
User 36285 does not improve AUC. Reverting changes.
Training on augumented user 128048 19/50 current_auc = 0.5882352941176471
User 128048 AUC after training: 0.5882352941176471
User 128048 does not improve AUC. Reverting changes.
Training on augumented user 132496 20/50 current_auc = 0.5882352941176471
User 132496 AUC after training: 0.5882352941176471
User 132496 does not improve AUC. Reverting changes.
Training on augumented user 6126 21/50 current_auc = 0.5882352941176471
User 6126 AUC after training: 0.5882352941176471
User 6126 does not improve AUC. Reverting changes.
Training on augumented user 52457 22/50 current_auc = 0.5882352941176471
User 52457 AUC after training: 0.5764705882352941
User 52457 does not improve AUC. Reverting changes.
Training on augumented user 137828 23/50 current_auc = 0.5882352941176471
User 137828 AUC after training: 0.5823529411764705
User 137828 does not improve AUC. Reverting changes.
Training on augumented user 31599 24/50 current_auc = 0.5882352941176471
User 31599 AUC after training: 0.5882352941176471
User 31599 does not improve AUC. Reverting changes.
Training on augumented user 67302 25/50 current_auc = 0.5882352941176471
User 67302 AUC after training: 0.5882352941176471
User 67302 does not improve AUC. Reverting changes.
Training on augumented user 100776 26/50 current_auc = 0.5882352941176471
User 100776 AUC after training: 0.5882352941176471
User 100776 does not improve AUC. Reverting changes.
Training on augumented user 108433 27/50 current_auc = 0.5882352941176471
User 108433 AUC after training: 0.5882352941176471
User 108433 does not improve AUC. Reverting changes.
Training on augumented user 18343 28/50 current_auc = 0.5882352941176471
User 18343 AUC after training: 0.5882352941176471
User 18343 does not improve AUC. Reverting changes.
Training on augumented user 120315 29/50 current_auc = 0.5882352941176471
User 120315 AUC after training: 0.5823529411764705
User 120315 does not improve AUC. Reverting changes.
Training on augumented user 4109 30/50 current_auc = 0.5882352941176471
User 4109 AUC after training: 0.5882352941176471
User 4109 does not improve AUC. Reverting changes.
Training on augumented user 68837 31/50 current_auc = 0.5882352941176471
User 68837 AUC after training: 0.5764705882352941
User 68837 does not improve AUC. Reverting changes.
Training on augumented user 26913 32/50 current_auc = 0.5882352941176471
User 26913 AUC after training: 0.5764705882352941
User 26913 does not improve AUC. Reverting changes.
Training on augumented user 117440 33/50 current_auc = 0.5882352941176471
User 117440 AUC after training: 0.5882352941176471
User 117440 does not improve AUC. Reverting changes.
Training on augumented user 44133 34/50 current_auc = 0.5882352941176471
User 44133 AUC after training: 0.5823529411764705
User 44133 does not improve AUC. Reverting changes.
Training on augumented user 72144 35/50 current_auc = 0.5882352941176471
User 72144 AUC after training: 0.5882352941176471
User 72144 does not improve AUC. Reverting changes.
Training on augumented user 124904 36/50 current_auc = 0.5882352941176471
User 124904 AUC after training: 0.5823529411764705
User 124904 does not improve AUC. Reverting changes.
Training on augumented user 124298 37/50 current_auc = 0.5882352941176471
User 124298 AUC after training: 0.5764705882352941
User 124298 does not improve AUC. Reverting changes.
Training on augumented user 21093 38/50 current_auc = 0.5882352941176471
User 21093 AUC after training: 0.5882352941176471
User 21093 does not improve AUC. Reverting changes.
Training on augumented user 95047 39/50 current_auc = 0.5882352941176471
User 95047 AUC after training: 0.5882352941176471
User 95047 does not improve AUC. Reverting changes.
Training on augumented user 90137 40/50 current_auc = 0.5882352941176471
User 90137 AUC after training: 0.5882352941176471
User 90137 does not improve AUC. Reverting changes.
Training on augumented user 39338 41/50 current_auc = 0.5882352941176471
User 39338 AUC after training: 0.5882352941176471
User 39338 does not improve AUC. Reverting changes.
Training on augumented user 22689 42/50 current_auc = 0.5882352941176471
User 22689 AUC after training: 0.5882352941176471
User 22689 does not improve AUC. Reverting changes.
Training on augumented user 69196 43/50 current_auc = 0.5882352941176471
User 69196 AUC after training: 0.5823529411764705
User 69196 does not improve AUC. Reverting changes.
Training on augumented user 85669 44/50 current_auc = 0.5882352941176471
User 85669 AUC after training: 0.5764705882352941
User 85669 does not improve AUC. Reverting changes.
Training on augumented user 3419 45/50 current_auc = 0.5882352941176471
User 3419 AUC after training: 0.5882352941176471
User 3419 does not improve AUC. Reverting changes.
Training on augumented user 84792 46/50 current_auc = 0.5882352941176471
User 84792 AUC after training: 0.5882352941176471
User 84792 does not improve AUC. Reverting changes.
Training on augumented user 54170 47/50 current_auc = 0.5882352941176471
User 54170 AUC after training: 0.5823529411764705
User 54170 does not improve AUC. Reverting changes.
Training on augumented user 68358 48/50 current_auc = 0.5882352941176471
User 68358 AUC after training: 0.5823529411764705
User 68358 does not improve AUC. Reverting changes.
Training on augumented user 10510 49/50 current_auc = 0.5882352941176471
User 10510 AUC after training: 0.5764705882352941
User 10510 does not improve AUC. Reverting changes.
[2024-12-02 18:59:19.276609] start test user 3419 149/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:59:19.914843] start test user 3419 149/568 recall augumented users by random, augumented_users = [109577, 43282, 74030, 84128, 95408, 43940, 38022, 8432, 2398, 24428, 46237, 101548, 120390, 19268, 11759, 41256, 33161, 5745, 104835, 135912, 43411, 112995, 65711, 121782, 118924, 49234, 61518, 76657, 3105, 107660, 43256, 36704, 60619, 138047, 51615, 52728, 71785, 57845, 67582, 77954, 83437, 131880, 93565, 18593, 56597, 127694, 45883, 110186, 102967, 25741]
[2024-12-02 18:59:19.932056] user = 3419 Cloud 149/568
[2024-12-02 18:59:19.960715] user = 3419 Local 149/568
[2024-12-02 18:59:20.055249] user = 3419 Local+ 149/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:59:23.106268] user = 3419 MPDA- 149/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5286561264822134
Training on augumented user 109577 0/50 current_auc = 0.5286561264822134
User 109577 AUC after training: 0.5286561264822134
User 109577 does not improve AUC. Reverting changes.
Training on augumented user 43282 1/50 current_auc = 0.5286561264822134
User 43282 AUC after training: 0.5286561264822134
User 43282 does not improve AUC. Reverting changes.
Training on augumented user 74030 2/50 current_auc = 0.5286561264822134
User 74030 AUC after training: 0.5306324110671936
User 74030 improves AUC. Keeping the model.
Training on augumented user 84128 3/50 current_auc = 0.5306324110671936
User 84128 AUC after training: 0.5296442687747036
User 84128 does not improve AUC. Reverting changes.
Training on augumented user 95408 4/50 current_auc = 0.5306324110671936
User 95408 AUC after training: 0.5276679841897233
User 95408 does not improve AUC. Reverting changes.
Training on augumented user 43940 5/50 current_auc = 0.5306324110671936
User 43940 AUC after training: 0.5286561264822134
User 43940 does not improve AUC. Reverting changes.
Training on augumented user 38022 6/50 current_auc = 0.5306324110671936
User 38022 AUC after training: 0.5296442687747036
User 38022 does not improve AUC. Reverting changes.
Training on augumented user 8432 7/50 current_auc = 0.5306324110671936
User 8432 AUC after training: 0.5276679841897234
User 8432 does not improve AUC. Reverting changes.
Training on augumented user 2398 8/50 current_auc = 0.5306324110671936
User 2398 AUC after training: 0.5276679841897234
User 2398 does not improve AUC. Reverting changes.
Training on augumented user 24428 9/50 current_auc = 0.5306324110671936
User 24428 AUC after training: 0.5306324110671936
User 24428 does not improve AUC. Reverting changes.
Training on augumented user 46237 10/50 current_auc = 0.5306324110671936
User 46237 AUC after training: 0.5286561264822134
User 46237 does not improve AUC. Reverting changes.
Training on augumented user 101548 11/50 current_auc = 0.5306324110671936
User 101548 AUC after training: 0.532608695652174
User 101548 improves AUC. Keeping the model.
Training on augumented user 120390 12/50 current_auc = 0.532608695652174
User 120390 AUC after training: 0.5345849802371541
User 120390 improves AUC. Keeping the model.
Training on augumented user 19268 13/50 current_auc = 0.5345849802371541
User 19268 AUC after training: 0.5345849802371541
User 19268 does not improve AUC. Reverting changes.
Training on augumented user 11759 14/50 current_auc = 0.5345849802371541
User 11759 AUC after training: 0.5345849802371541
User 11759 does not improve AUC. Reverting changes.
Training on augumented user 41256 15/50 current_auc = 0.5345849802371541
User 41256 AUC after training: 0.532608695652174
User 41256 does not improve AUC. Reverting changes.
Training on augumented user 33161 16/50 current_auc = 0.5345849802371541
User 33161 AUC after training: 0.5296442687747036
User 33161 does not improve AUC. Reverting changes.
Training on augumented user 5745 17/50 current_auc = 0.5345849802371541
User 5745 AUC after training: 0.5345849802371541
User 5745 does not improve AUC. Reverting changes.
Training on augumented user 104835 18/50 current_auc = 0.5345849802371541
User 104835 AUC after training: 0.5326086956521738
User 104835 does not improve AUC. Reverting changes.
Training on augumented user 135912 19/50 current_auc = 0.5345849802371541
User 135912 AUC after training: 0.5355731225296443
User 135912 improves AUC. Keeping the model.
Training on augumented user 43411 20/50 current_auc = 0.5355731225296443
User 43411 AUC after training: 0.5355731225296443
User 43411 does not improve AUC. Reverting changes.
Training on augumented user 112995 21/50 current_auc = 0.5355731225296443
User 112995 AUC after training: 0.5355731225296443
User 112995 does not improve AUC. Reverting changes.
Training on augumented user 65711 22/50 current_auc = 0.5355731225296443
User 65711 AUC after training: 0.5395256916996047
User 65711 improves AUC. Keeping the model.
Training on augumented user 121782 23/50 current_auc = 0.5395256916996047
User 121782 AUC after training: 0.5395256916996047
User 121782 does not improve AUC. Reverting changes.
Training on augumented user 118924 24/50 current_auc = 0.5395256916996047
User 118924 AUC after training: 0.5385375494071146
User 118924 does not improve AUC. Reverting changes.
Training on augumented user 49234 25/50 current_auc = 0.5395256916996047
User 49234 AUC after training: 0.5365612648221344
User 49234 does not improve AUC. Reverting changes.
Training on augumented user 61518 26/50 current_auc = 0.5395256916996047
User 61518 AUC after training: 0.5395256916996047
User 61518 does not improve AUC. Reverting changes.
Training on augumented user 76657 27/50 current_auc = 0.5395256916996047
User 76657 AUC after training: 0.5405138339920948
User 76657 improves AUC. Keeping the model.
Training on augumented user 3105 28/50 current_auc = 0.5405138339920948
User 3105 AUC after training: 0.5395256916996047
User 3105 does not improve AUC. Reverting changes.
Training on augumented user 107660 29/50 current_auc = 0.5405138339920948
User 107660 AUC after training: 0.5405138339920948
User 107660 does not improve AUC. Reverting changes.
Training on augumented user 43256 30/50 current_auc = 0.5405138339920948
User 43256 AUC after training: 0.5385375494071146
User 43256 does not improve AUC. Reverting changes.
Training on augumented user 36704 31/50 current_auc = 0.5405138339920948
User 36704 AUC after training: 0.5395256916996047
User 36704 does not improve AUC. Reverting changes.
Training on augumented user 60619 32/50 current_auc = 0.5405138339920948
User 60619 AUC after training: 0.5395256916996047
User 60619 does not improve AUC. Reverting changes.
Training on augumented user 138047 33/50 current_auc = 0.5405138339920948
User 138047 AUC after training: 0.5395256916996047
User 138047 does not improve AUC. Reverting changes.
Training on augumented user 51615 34/50 current_auc = 0.5405138339920948
User 51615 AUC after training: 0.541501976284585
User 51615 improves AUC. Keeping the model.
Training on augumented user 52728 35/50 current_auc = 0.541501976284585
User 52728 AUC after training: 0.5395256916996047
User 52728 does not improve AUC. Reverting changes.
Training on augumented user 71785 36/50 current_auc = 0.541501976284585
User 71785 AUC after training: 0.5405138339920948
User 71785 does not improve AUC. Reverting changes.
Training on augumented user 57845 37/50 current_auc = 0.541501976284585
User 57845 AUC after training: 0.5405138339920948
User 57845 does not improve AUC. Reverting changes.
Training on augumented user 67582 38/50 current_auc = 0.541501976284585
User 67582 AUC after training: 0.5375494071146245
User 67582 does not improve AUC. Reverting changes.
Training on augumented user 77954 39/50 current_auc = 0.541501976284585
User 77954 AUC after training: 0.5395256916996047
User 77954 does not improve AUC. Reverting changes.
Training on augumented user 83437 40/50 current_auc = 0.541501976284585
User 83437 AUC after training: 0.541501976284585
User 83437 does not improve AUC. Reverting changes.
Training on augumented user 131880 41/50 current_auc = 0.541501976284585
User 131880 AUC after training: 0.541501976284585
User 131880 does not improve AUC. Reverting changes.
Training on augumented user 93565 42/50 current_auc = 0.541501976284585
User 93565 AUC after training: 0.5395256916996047
User 93565 does not improve AUC. Reverting changes.
Training on augumented user 18593 43/50 current_auc = 0.541501976284585
User 18593 AUC after training: 0.5424901185770751
User 18593 improves AUC. Keeping the model.
Training on augumented user 56597 44/50 current_auc = 0.5424901185770751
User 56597 AUC after training: 0.5405138339920948
User 56597 does not improve AUC. Reverting changes.
Training on augumented user 127694 45/50 current_auc = 0.5424901185770751
User 127694 AUC after training: 0.5385375494071145
User 127694 does not improve AUC. Reverting changes.
Training on augumented user 45883 46/50 current_auc = 0.5424901185770751
User 45883 AUC after training: 0.5395256916996047
User 45883 does not improve AUC. Reverting changes.
Training on augumented user 110186 47/50 current_auc = 0.5424901185770751
User 110186 AUC after training: 0.5395256916996047
User 110186 does not improve AUC. Reverting changes.
Training on augumented user 102967 48/50 current_auc = 0.5424901185770751
User 102967 AUC after training: 0.5385375494071146
User 102967 does not improve AUC. Reverting changes.
Training on augumented user 25741 49/50 current_auc = 0.5424901185770751
User 25741 AUC after training: 0.541501976284585
User 25741 does not improve AUC. Reverting changes.
[2024-12-02 18:59:52.044703] start test user 3424 150/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:59:52.698901] start test user 3424 150/568 recall augumented users by random, augumented_users = [71922, 64055, 67387, 55267, 105663, 40692, 135449, 99282, 132425, 57963, 3381, 112540, 71901, 18980, 72638, 15366, 128870, 54004, 13481, 58805, 28128, 104295, 49969, 88995, 3521, 114316, 119086, 103330, 106767, 17658, 48046, 33749, 78349, 80309, 88469, 12169, 135409, 58098, 12171, 46791, 60388, 92862, 39595, 81353, 66896, 16344, 71764, 9832, 73663, 15748]
[2024-12-02 18:59:52.727735] user = 3424 Cloud 150/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:59:52.758968] user = 3424 Local 150/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:59:52.965036] user = 3424 Local+ 150/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:59:55.576371] user = 3424 MPDA- 150/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 71922 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71922 AUC after training: 0.5
User 71922 does not improve AUC. Reverting changes.
Training on augumented user 64055 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64055 AUC after training: 0.5
User 64055 does not improve AUC. Reverting changes.
Training on augumented user 67387 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67387 AUC after training: 0.5
User 67387 does not improve AUC. Reverting changes.
Training on augumented user 55267 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55267 AUC after training: 0.5
User 55267 does not improve AUC. Reverting changes.
Training on augumented user 105663 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105663 AUC after training: 0.5
User 105663 does not improve AUC. Reverting changes.
Training on augumented user 40692 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40692 AUC after training: 0.5
User 40692 does not improve AUC. Reverting changes.
Training on augumented user 135449 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135449 AUC after training: 0.5
User 135449 does not improve AUC. Reverting changes.
Training on augumented user 99282 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99282 AUC after training: 0.5
User 99282 does not improve AUC. Reverting changes.
Training on augumented user 132425 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132425 AUC after training: 0.5
User 132425 does not improve AUC. Reverting changes.
Training on augumented user 57963 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57963 AUC after training: 0.5
User 57963 does not improve AUC. Reverting changes.
Training on augumented user 3381 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3381 AUC after training: 0.5
User 3381 does not improve AUC. Reverting changes.
Training on augumented user 112540 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112540 AUC after training: 0.5
User 112540 does not improve AUC. Reverting changes.
Training on augumented user 71901 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71901 AUC after training: 0.5
User 71901 does not improve AUC. Reverting changes.
Training on augumented user 18980 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18980 AUC after training: 0.5
User 18980 does not improve AUC. Reverting changes.
Training on augumented user 72638 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72638 AUC after training: 0.5
User 72638 does not improve AUC. Reverting changes.
Training on augumented user 15366 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15366 AUC after training: 0.5
User 15366 does not improve AUC. Reverting changes.
Training on augumented user 128870 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128870 AUC after training: 0.5
User 128870 does not improve AUC. Reverting changes.
Training on augumented user 54004 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54004 AUC after training: 0.5
User 54004 does not improve AUC. Reverting changes.
Training on augumented user 13481 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13481 AUC after training: 0.5
User 13481 does not improve AUC. Reverting changes.
Training on augumented user 58805 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58805 AUC after training: 0.5
User 58805 does not improve AUC. Reverting changes.
Training on augumented user 28128 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28128 AUC after training: 0.5
User 28128 does not improve AUC. Reverting changes.
Training on augumented user 104295 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104295 AUC after training: 0.5
User 104295 does not improve AUC. Reverting changes.
Training on augumented user 49969 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49969 AUC after training: 0.5
User 49969 does not improve AUC. Reverting changes.
Training on augumented user 88995 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88995 AUC after training: 0.5
User 88995 does not improve AUC. Reverting changes.
Training on augumented user 3521 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3521 AUC after training: 0.5
User 3521 does not improve AUC. Reverting changes.
Training on augumented user 114316 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114316 AUC after training: 0.5
User 114316 does not improve AUC. Reverting changes.
Training on augumented user 119086 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119086 AUC after training: 0.5
User 119086 does not improve AUC. Reverting changes.
Training on augumented user 103330 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103330 AUC after training: 0.5
User 103330 does not improve AUC. Reverting changes.
Training on augumented user 106767 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106767 AUC after training: 0.5
User 106767 does not improve AUC. Reverting changes.
Training on augumented user 17658 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17658 AUC after training: 0.5
User 17658 does not improve AUC. Reverting changes.
Training on augumented user 48046 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48046 AUC after training: 0.5
User 48046 does not improve AUC. Reverting changes.
Training on augumented user 33749 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33749 AUC after training: 0.5
User 33749 does not improve AUC. Reverting changes.
Training on augumented user 78349 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78349 AUC after training: 0.5
User 78349 does not improve AUC. Reverting changes.
Training on augumented user 80309 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80309 AUC after training: 0.5
User 80309 does not improve AUC. Reverting changes.
Training on augumented user 88469 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88469 AUC after training: 0.5
User 88469 does not improve AUC. Reverting changes.
Training on augumented user 12169 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12169 AUC after training: 0.5
User 12169 does not improve AUC. Reverting changes.
Training on augumented user 135409 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135409 AUC after training: 0.5
User 135409 does not improve AUC. Reverting changes.
Training on augumented user 58098 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58098 AUC after training: 0.5
User 58098 does not improve AUC. Reverting changes.
Training on augumented user 12171 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12171 AUC after training: 0.5
User 12171 does not improve AUC. Reverting changes.
Training on augumented user 46791 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46791 AUC after training: 0.5
User 46791 does not improve AUC. Reverting changes.
Training on augumented user 60388 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60388 AUC after training: 0.5
User 60388 does not improve AUC. Reverting changes.
Training on augumented user 92862 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92862 AUC after training: 0.5
User 92862 does not improve AUC. Reverting changes.
Training on augumented user 39595 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39595 AUC after training: 0.5
User 39595 does not improve AUC. Reverting changes.
Training on augumented user 81353 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81353 AUC after training: 0.5
User 81353 does not improve AUC. Reverting changes.
Training on augumented user 66896 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66896 AUC after training: 0.5
User 66896 does not improve AUC. Reverting changes.
Training on augumented user 16344 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16344 AUC after training: 0.5
User 16344 does not improve AUC. Reverting changes.
Training on augumented user 71764 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71764 AUC after training: 0.5
User 71764 does not improve AUC. Reverting changes.
Training on augumented user 9832 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9832 AUC after training: 0.5
User 9832 does not improve AUC. Reverting changes.
Training on augumented user 73663 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73663 AUC after training: 0.5
User 73663 does not improve AUC. Reverting changes.
Training on augumented user 15748 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15748 AUC after training: 0.5
User 15748 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:00:26.863845] start test user 3451 151/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:00:27.371225] start test user 3451 151/568 recall augumented users by random, augumented_users = [123938, 16112, 34369, 19100, 28827, 112915, 43660, 5598, 87643, 90760, 19917, 17445, 83179, 44384, 75251, 81049, 102305, 71252, 58046, 101647, 81026, 117755, 60142, 75268, 111927, 60099, 54618, 94632, 114340, 82755, 77901, 2911, 22623, 120033, 62251, 59413, 111656, 31045, 137768, 27019, 108324, 5473, 99619, 126427, 112543, 64598, 12038, 123631, 125663, 81637]
[2024-12-02 19:00:27.386153] user = 3451 Cloud 151/568
[2024-12-02 19:00:27.400378] user = 3451 Local 151/568
[2024-12-02 19:00:27.429552] user = 3451 Local+ 151/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:00:29.966389] user = 3451 MPDA- 151/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4695945945945946
Training on augumented user 123938 0/50 current_auc = 0.4695945945945946
User 123938 AUC after training: 0.4704391891891892
User 123938 improves AUC. Keeping the model.
Training on augumented user 16112 1/50 current_auc = 0.4704391891891892
User 16112 AUC after training: 0.47043918918918926
User 16112 improves AUC. Keeping the model.
Training on augumented user 34369 2/50 current_auc = 0.47043918918918926
User 34369 AUC after training: 0.4695945945945946
User 34369 does not improve AUC. Reverting changes.
Training on augumented user 19100 3/50 current_auc = 0.47043918918918926
User 19100 AUC after training: 0.4721283783783784
User 19100 improves AUC. Keeping the model.
Training on augumented user 28827 4/50 current_auc = 0.4721283783783784
User 28827 AUC after training: 0.4712837837837838
User 28827 does not improve AUC. Reverting changes.
Training on augumented user 112915 5/50 current_auc = 0.4721283783783784
User 112915 AUC after training: 0.4738175675675676
User 112915 improves AUC. Keeping the model.
Training on augumented user 43660 6/50 current_auc = 0.4738175675675676
User 43660 AUC after training: 0.4695945945945946
User 43660 does not improve AUC. Reverting changes.
Training on augumented user 5598 7/50 current_auc = 0.4738175675675676
User 5598 AUC after training: 0.4721283783783784
User 5598 does not improve AUC. Reverting changes.
Training on augumented user 87643 8/50 current_auc = 0.4738175675675676
User 87643 AUC after training: 0.472972972972973
User 87643 does not improve AUC. Reverting changes.
Training on augumented user 90760 9/50 current_auc = 0.4738175675675676
User 90760 AUC after training: 0.4712837837837838
User 90760 does not improve AUC. Reverting changes.
Training on augumented user 19917 10/50 current_auc = 0.4738175675675676
User 19917 AUC after training: 0.47466216216216217
User 19917 improves AUC. Keeping the model.
Training on augumented user 17445 11/50 current_auc = 0.47466216216216217
User 17445 AUC after training: 0.472972972972973
User 17445 does not improve AUC. Reverting changes.
Training on augumented user 83179 12/50 current_auc = 0.47466216216216217
User 83179 AUC after training: 0.4755067567567568
User 83179 improves AUC. Keeping the model.
Training on augumented user 44384 13/50 current_auc = 0.4755067567567568
User 44384 AUC after training: 0.47635135135135137
User 44384 improves AUC. Keeping the model.
Training on augumented user 75251 14/50 current_auc = 0.47635135135135137
User 75251 AUC after training: 0.47635135135135137
User 75251 does not improve AUC. Reverting changes.
Training on augumented user 81049 15/50 current_auc = 0.47635135135135137
User 81049 AUC after training: 0.477195945945946
User 81049 improves AUC. Keeping the model.
Training on augumented user 102305 16/50 current_auc = 0.477195945945946
User 102305 AUC after training: 0.477195945945946
User 102305 does not improve AUC. Reverting changes.
Training on augumented user 71252 17/50 current_auc = 0.477195945945946
User 71252 AUC after training: 0.4755067567567568
User 71252 does not improve AUC. Reverting changes.
Training on augumented user 58046 18/50 current_auc = 0.477195945945946
User 58046 AUC after training: 0.4746621621621622
User 58046 does not improve AUC. Reverting changes.
Training on augumented user 101647 19/50 current_auc = 0.477195945945946
User 101647 AUC after training: 0.477195945945946
User 101647 does not improve AUC. Reverting changes.
Training on augumented user 81026 20/50 current_auc = 0.477195945945946
User 81026 AUC after training: 0.4721283783783784
User 81026 does not improve AUC. Reverting changes.
Training on augumented user 117755 21/50 current_auc = 0.477195945945946
User 117755 AUC after training: 0.47635135135135137
User 117755 does not improve AUC. Reverting changes.
Training on augumented user 60142 22/50 current_auc = 0.477195945945946
User 60142 AUC after training: 0.477195945945946
User 60142 does not improve AUC. Reverting changes.
Training on augumented user 75268 23/50 current_auc = 0.477195945945946
User 75268 AUC after training: 0.4763513513513514
User 75268 does not improve AUC. Reverting changes.
Training on augumented user 111927 24/50 current_auc = 0.477195945945946
User 111927 AUC after training: 0.477195945945946
User 111927 does not improve AUC. Reverting changes.
Training on augumented user 60099 25/50 current_auc = 0.477195945945946
User 60099 AUC after training: 0.47719594594594594
User 60099 does not improve AUC. Reverting changes.
Training on augumented user 54618 26/50 current_auc = 0.477195945945946
User 54618 AUC after training: 0.4763513513513513
User 54618 does not improve AUC. Reverting changes.
Training on augumented user 94632 27/50 current_auc = 0.477195945945946
User 94632 AUC after training: 0.4755067567567568
User 94632 does not improve AUC. Reverting changes.
Training on augumented user 114340 28/50 current_auc = 0.477195945945946
User 114340 AUC after training: 0.4755067567567568
User 114340 does not improve AUC. Reverting changes.
Training on augumented user 82755 29/50 current_auc = 0.477195945945946
User 82755 AUC after training: 0.47719594594594594
User 82755 does not improve AUC. Reverting changes.
Training on augumented user 77901 30/50 current_auc = 0.477195945945946
User 77901 AUC after training: 0.47804054054054057
User 77901 improves AUC. Keeping the model.
Training on augumented user 2911 31/50 current_auc = 0.47804054054054057
User 2911 AUC after training: 0.47719594594594594
User 2911 does not improve AUC. Reverting changes.
Training on augumented user 22623 32/50 current_auc = 0.47804054054054057
User 22623 AUC after training: 0.47635135135135137
User 22623 does not improve AUC. Reverting changes.
Training on augumented user 120033 33/50 current_auc = 0.47804054054054057
User 120033 AUC after training: 0.47804054054054057
User 120033 does not improve AUC. Reverting changes.
Training on augumented user 62251 34/50 current_auc = 0.47804054054054057
User 62251 AUC after training: 0.47635135135135137
User 62251 does not improve AUC. Reverting changes.
Training on augumented user 59413 35/50 current_auc = 0.47804054054054057
User 59413 AUC after training: 0.47635135135135137
User 59413 does not improve AUC. Reverting changes.
Training on augumented user 111656 36/50 current_auc = 0.47804054054054057
User 111656 AUC after training: 0.47719594594594594
User 111656 does not improve AUC. Reverting changes.
Training on augumented user 31045 37/50 current_auc = 0.47804054054054057
User 31045 AUC after training: 0.4746621621621622
User 31045 does not improve AUC. Reverting changes.
Training on augumented user 137768 38/50 current_auc = 0.47804054054054057
User 137768 AUC after training: 0.477195945945946
User 137768 does not improve AUC. Reverting changes.
Training on augumented user 27019 39/50 current_auc = 0.47804054054054057
User 27019 AUC after training: 0.47550675675675674
User 27019 does not improve AUC. Reverting changes.
Training on augumented user 108324 40/50 current_auc = 0.47804054054054057
User 108324 AUC after training: 0.47550675675675674
User 108324 does not improve AUC. Reverting changes.
Training on augumented user 5473 41/50 current_auc = 0.47804054054054057
User 5473 AUC after training: 0.47635135135135137
User 5473 does not improve AUC. Reverting changes.
Training on augumented user 99619 42/50 current_auc = 0.47804054054054057
User 99619 AUC after training: 0.47719594594594594
User 99619 does not improve AUC. Reverting changes.
Training on augumented user 126427 43/50 current_auc = 0.47804054054054057
User 126427 AUC after training: 0.47804054054054057
User 126427 does not improve AUC. Reverting changes.
Training on augumented user 112543 44/50 current_auc = 0.47804054054054057
User 112543 AUC after training: 0.47804054054054057
User 112543 does not improve AUC. Reverting changes.
Training on augumented user 64598 45/50 current_auc = 0.47804054054054057
User 64598 AUC after training: 0.47635135135135137
User 64598 does not improve AUC. Reverting changes.
Training on augumented user 12038 46/50 current_auc = 0.47804054054054057
User 12038 AUC after training: 0.477195945945946
User 12038 does not improve AUC. Reverting changes.
Training on augumented user 123631 47/50 current_auc = 0.47804054054054057
User 123631 AUC after training: 0.47635135135135137
User 123631 does not improve AUC. Reverting changes.
Training on augumented user 125663 48/50 current_auc = 0.47804054054054057
User 125663 AUC after training: 0.477195945945946
User 125663 does not improve AUC. Reverting changes.
Training on augumented user 81637 49/50 current_auc = 0.47804054054054057
User 81637 AUC after training: 0.4763513513513514
User 81637 does not improve AUC. Reverting changes.
[2024-12-02 19:01:01.694118] start test user 3487 152/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:01:02.147531] start test user 3487 152/568 recall augumented users by random, augumented_users = [135585, 15322, 51198, 84753, 43194, 123584, 84877, 88303, 57923, 120322, 126984, 7278, 119556, 61999, 110876, 28831, 37360, 8135, 52281, 10788, 119948, 50728, 64800, 24997, 73215, 65554, 36679, 52112, 69962, 126161, 110009, 75560, 113081, 112332, 74536, 75299, 60088, 13508, 17479, 115831, 84940, 18559, 43745, 65803, 39417, 101353, 116331, 90809, 26871, 90214]
[2024-12-02 19:01:02.162651] user = 3487 Cloud 152/568
[2024-12-02 19:01:02.248114] user = 3487 Local 152/568
[2024-12-02 19:01:02.534171] user = 3487 Local+ 152/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:01:08.674720] user = 3487 MPDA- 152/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6479094076655052
Training on augumented user 135585 0/50 current_auc = 0.6479094076655052
User 135585 AUC after training: 0.6481416957026713
User 135585 improves AUC. Keeping the model.
Training on augumented user 15322 1/50 current_auc = 0.6481416957026713
User 15322 AUC after training: 0.6474157955865273
User 15322 does not improve AUC. Reverting changes.
Training on augumented user 51198 2/50 current_auc = 0.6481416957026713
User 51198 AUC after training: 0.6473577235772358
User 51198 does not improve AUC. Reverting changes.
Training on augumented user 84753 3/50 current_auc = 0.6481416957026713
User 84753 AUC after training: 0.6477351916376307
User 84753 does not improve AUC. Reverting changes.
Training on augumented user 43194 4/50 current_auc = 0.6481416957026713
User 43194 AUC after training: 0.6488385598141695
User 43194 improves AUC. Keeping the model.
Training on augumented user 123584 5/50 current_auc = 0.6488385598141695
User 123584 AUC after training: 0.6494192799070848
User 123584 improves AUC. Keeping the model.
Training on augumented user 84877 6/50 current_auc = 0.6494192799070848
User 84877 AUC after training: 0.6492450638792102
User 84877 does not improve AUC. Reverting changes.
Training on augumented user 88303 7/50 current_auc = 0.6494192799070848
User 88303 AUC after training: 0.6498257839721254
User 88303 improves AUC. Keeping the model.
Training on augumented user 57923 8/50 current_auc = 0.6498257839721254
User 57923 AUC after training: 0.649883855981417
User 57923 improves AUC. Keeping the model.
Training on augumented user 120322 9/50 current_auc = 0.649883855981417
User 120322 AUC after training: 0.649883855981417
User 120322 does not improve AUC. Reverting changes.
Training on augumented user 126984 10/50 current_auc = 0.649883855981417
User 126984 AUC after training: 0.6496515679442508
User 126984 does not improve AUC. Reverting changes.
Training on augumented user 7278 11/50 current_auc = 0.649883855981417
User 7278 AUC after training: 0.6499419279907085
User 7278 improves AUC. Keeping the model.
Training on augumented user 119556 12/50 current_auc = 0.6499419279907085
User 119556 AUC after training: 0.6491289198606272
User 119556 does not improve AUC. Reverting changes.
Training on augumented user 61999 13/50 current_auc = 0.6499419279907085
User 61999 AUC after training: 0.6491869918699187
User 61999 does not improve AUC. Reverting changes.
Training on augumented user 110876 14/50 current_auc = 0.6499419279907085
User 110876 AUC after training: 0.651074332171893
User 110876 improves AUC. Keeping the model.
Training on augumented user 28831 15/50 current_auc = 0.651074332171893
User 28831 AUC after training: 0.6511904761904762
User 28831 improves AUC. Keeping the model.
Training on augumented user 37360 16/50 current_auc = 0.6511904761904762
User 37360 AUC after training: 0.6487804878048781
User 37360 does not improve AUC. Reverting changes.
Training on augumented user 8135 17/50 current_auc = 0.6511904761904762
User 8135 AUC after training: 0.6501742160278745
User 8135 does not improve AUC. Reverting changes.
Training on augumented user 52281 18/50 current_auc = 0.6511904761904762
User 52281 AUC after training: 0.6501451800232287
User 52281 does not improve AUC. Reverting changes.
Training on augumented user 10788 19/50 current_auc = 0.6511904761904762
User 10788 AUC after training: 0.6516840882694542
User 10788 improves AUC. Keeping the model.
Training on augumented user 119948 20/50 current_auc = 0.6516840882694542
User 119948 AUC after training: 0.6496515679442509
User 119948 does not improve AUC. Reverting changes.
Training on augumented user 50728 21/50 current_auc = 0.6516840882694542
User 50728 AUC after training: 0.6517421602787455
User 50728 improves AUC. Keeping the model.
Training on augumented user 64800 22/50 current_auc = 0.6517421602787455
User 64800 AUC after training: 0.6520325203252032
User 64800 improves AUC. Keeping the model.
Training on augumented user 24997 23/50 current_auc = 0.6520325203252032
User 24997 AUC after training: 0.6518583042973287
User 24997 does not improve AUC. Reverting changes.
Training on augumented user 73215 24/50 current_auc = 0.6520325203252032
User 73215 AUC after training: 0.6521486643437864
User 73215 improves AUC. Keeping the model.
Training on augumented user 65554 25/50 current_auc = 0.6521486643437864
User 65554 AUC after training: 0.6523809523809524
User 65554 improves AUC. Keeping the model.
Training on augumented user 36679 26/50 current_auc = 0.6523809523809524
User 36679 AUC after training: 0.652555168408827
User 36679 improves AUC. Keeping the model.
Training on augumented user 52112 27/50 current_auc = 0.652555168408827
User 52112 AUC after training: 0.6514518002322881
User 52112 does not improve AUC. Reverting changes.
Training on augumented user 69962 28/50 current_auc = 0.652555168408827
User 69962 AUC after training: 0.6488385598141696
User 69962 does not improve AUC. Reverting changes.
Training on augumented user 126161 29/50 current_auc = 0.652555168408827
User 126161 AUC after training: 0.651451800232288
User 126161 does not improve AUC. Reverting changes.
Training on augumented user 110009 30/50 current_auc = 0.652555168408827
User 110009 AUC after training: 0.651219512195122
User 110009 does not improve AUC. Reverting changes.
Training on augumented user 75560 31/50 current_auc = 0.652555168408827
User 75560 AUC after training: 0.6527293844367016
User 75560 improves AUC. Keeping the model.
Training on augumented user 113081 32/50 current_auc = 0.6527293844367016
User 113081 AUC after training: 0.6503484320557491
User 113081 does not improve AUC. Reverting changes.
Training on augumented user 112332 33/50 current_auc = 0.6527293844367016
User 112332 AUC after training: 0.6520905923344947
User 112332 does not improve AUC. Reverting changes.
Training on augumented user 74536 34/50 current_auc = 0.6527293844367016
User 74536 AUC after training: 0.6522648083623694
User 74536 does not improve AUC. Reverting changes.
Training on augumented user 75299 35/50 current_auc = 0.6527293844367016
User 75299 AUC after training: 0.6484030197444832
User 75299 does not improve AUC. Reverting changes.
Training on augumented user 60088 36/50 current_auc = 0.6527293844367016
User 60088 AUC after training: 0.6529616724738676
User 60088 improves AUC. Keeping the model.
Training on augumented user 13508 37/50 current_auc = 0.6529616724738676
User 13508 AUC after training: 0.6522067363530779
User 13508 does not improve AUC. Reverting changes.
Training on augumented user 17479 38/50 current_auc = 0.6529616724738676
User 17479 AUC after training: 0.6515679442508712
User 17479 does not improve AUC. Reverting changes.
Training on augumented user 115831 39/50 current_auc = 0.6529616724738676
User 115831 AUC after training: 0.6529036004645761
User 115831 does not improve AUC. Reverting changes.
Training on augumented user 84940 40/50 current_auc = 0.6529616724738676
User 84940 AUC after training: 0.651335656213705
User 84940 does not improve AUC. Reverting changes.
Training on augumented user 18559 41/50 current_auc = 0.6529616724738676
User 18559 AUC after training: 0.6529036004645761
User 18559 does not improve AUC. Reverting changes.
Training on augumented user 43745 42/50 current_auc = 0.6529616724738676
User 43745 AUC after training: 0.6527293844367016
User 43745 does not improve AUC. Reverting changes.
Training on augumented user 65803 43/50 current_auc = 0.6529616724738676
User 65803 AUC after training: 0.6531358885017422
User 65803 improves AUC. Keeping the model.
Training on augumented user 39417 44/50 current_auc = 0.6531358885017422
User 39417 AUC after training: 0.6518583042973287
User 39417 does not improve AUC. Reverting changes.
Training on augumented user 101353 45/50 current_auc = 0.6531358885017422
User 101353 AUC after training: 0.652555168408827
User 101353 does not improve AUC. Reverting changes.
Training on augumented user 116331 46/50 current_auc = 0.6531358885017422
User 116331 AUC after training: 0.65267131242741
User 116331 does not improve AUC. Reverting changes.
Training on augumented user 90809 47/50 current_auc = 0.6531358885017422
User 90809 AUC after training: 0.6524390243902439
User 90809 does not improve AUC. Reverting changes.
Training on augumented user 26871 48/50 current_auc = 0.6531358885017422
User 26871 AUC after training: 0.6522067363530779
User 26871 does not improve AUC. Reverting changes.
Training on augumented user 90214 49/50 current_auc = 0.6531358885017422
User 90214 AUC after training: 0.6528455284552845
User 90214 does not improve AUC. Reverting changes.
[2024-12-02 19:01:44.938538] start test user 3576 153/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:01:45.348818] start test user 3576 153/568 recall augumented users by random, augumented_users = [41272, 83150, 110336, 50421, 6115, 126746, 88542, 130579, 80566, 33773, 122240, 116237, 117279, 40382, 37376, 74504, 89258, 108261, 29991, 109952, 117568, 102706, 77529, 101967, 113051, 107055, 39130, 105513, 40283, 61321, 97674, 112678, 530, 50804, 75328, 61265, 113008, 15746, 69300, 42471, 25091, 63082, 109521, 133247, 62101, 62103, 98435, 28334, 116213, 68168]
[2024-12-02 19:01:45.365770] user = 3576 Cloud 153/568
[2024-12-02 19:01:45.376385] user = 3576 Local 153/568
[2024-12-02 19:01:45.564123] user = 3576 Local+ 153/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:01:48.006654] user = 3576 MPDA- 153/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6868686868686869
Training on augumented user 41272 0/50 current_auc = 0.6868686868686869
User 41272 AUC after training: 0.6888888888888889
User 41272 improves AUC. Keeping the model.
Training on augumented user 83150 1/50 current_auc = 0.6888888888888889
User 83150 AUC after training: 0.6868686868686869
User 83150 does not improve AUC. Reverting changes.
Training on augumented user 110336 2/50 current_auc = 0.6888888888888889
User 110336 AUC after training: 0.6868686868686869
User 110336 does not improve AUC. Reverting changes.
Training on augumented user 50421 3/50 current_auc = 0.6888888888888889
User 50421 AUC after training: 0.6868686868686869
User 50421 does not improve AUC. Reverting changes.
Training on augumented user 6115 4/50 current_auc = 0.6888888888888889
User 6115 AUC after training: 0.6888888888888889
User 6115 does not improve AUC. Reverting changes.
Training on augumented user 126746 5/50 current_auc = 0.6888888888888889
User 126746 AUC after training: 0.6909090909090909
User 126746 improves AUC. Keeping the model.
Training on augumented user 88542 6/50 current_auc = 0.6909090909090909
User 88542 AUC after training: 0.6888888888888889
User 88542 does not improve AUC. Reverting changes.
Training on augumented user 130579 7/50 current_auc = 0.6909090909090909
User 130579 AUC after training: 0.6888888888888889
User 130579 does not improve AUC. Reverting changes.
Training on augumented user 80566 8/50 current_auc = 0.6909090909090909
User 80566 AUC after training: 0.6909090909090909
User 80566 does not improve AUC. Reverting changes.
Training on augumented user 33773 9/50 current_auc = 0.6909090909090909
User 33773 AUC after training: 0.6909090909090909
User 33773 does not improve AUC. Reverting changes.
Training on augumented user 122240 10/50 current_auc = 0.6909090909090909
User 122240 AUC after training: 0.694949494949495
User 122240 improves AUC. Keeping the model.
Training on augumented user 116237 11/50 current_auc = 0.694949494949495
User 116237 AUC after training: 0.694949494949495
User 116237 does not improve AUC. Reverting changes.
Training on augumented user 117279 12/50 current_auc = 0.694949494949495
User 117279 AUC after training: 0.696969696969697
User 117279 improves AUC. Keeping the model.
Training on augumented user 40382 13/50 current_auc = 0.696969696969697
User 40382 AUC after training: 0.6888888888888889
User 40382 does not improve AUC. Reverting changes.
Training on augumented user 37376 14/50 current_auc = 0.696969696969697
User 37376 AUC after training: 0.696969696969697
User 37376 does not improve AUC. Reverting changes.
Training on augumented user 74504 15/50 current_auc = 0.696969696969697
User 74504 AUC after training: 0.696969696969697
User 74504 does not improve AUC. Reverting changes.
Training on augumented user 89258 16/50 current_auc = 0.696969696969697
User 89258 AUC after training: 0.696969696969697
User 89258 does not improve AUC. Reverting changes.
Training on augumented user 108261 17/50 current_auc = 0.696969696969697
User 108261 AUC after training: 0.6909090909090909
User 108261 does not improve AUC. Reverting changes.
Training on augumented user 29991 18/50 current_auc = 0.696969696969697
User 29991 AUC after training: 0.696969696969697
User 29991 does not improve AUC. Reverting changes.
Training on augumented user 109952 19/50 current_auc = 0.696969696969697
User 109952 AUC after training: 0.696969696969697
User 109952 does not improve AUC. Reverting changes.
Training on augumented user 117568 20/50 current_auc = 0.696969696969697
User 117568 AUC after training: 0.692929292929293
User 117568 does not improve AUC. Reverting changes.
Training on augumented user 102706 21/50 current_auc = 0.696969696969697
User 102706 AUC after training: 0.6969696969696969
User 102706 does not improve AUC. Reverting changes.
Training on augumented user 77529 22/50 current_auc = 0.696969696969697
User 77529 AUC after training: 0.694949494949495
User 77529 does not improve AUC. Reverting changes.
Training on augumented user 101967 23/50 current_auc = 0.696969696969697
User 101967 AUC after training: 0.696969696969697
User 101967 does not improve AUC. Reverting changes.
Training on augumented user 113051 24/50 current_auc = 0.696969696969697
User 113051 AUC after training: 0.696969696969697
User 113051 does not improve AUC. Reverting changes.
Training on augumented user 107055 25/50 current_auc = 0.696969696969697
User 107055 AUC after training: 0.698989898989899
User 107055 improves AUC. Keeping the model.
Training on augumented user 39130 26/50 current_auc = 0.698989898989899
User 39130 AUC after training: 0.694949494949495
User 39130 does not improve AUC. Reverting changes.
Training on augumented user 105513 27/50 current_auc = 0.698989898989899
User 105513 AUC after training: 0.6949494949494949
User 105513 does not improve AUC. Reverting changes.
Training on augumented user 40283 28/50 current_auc = 0.698989898989899
User 40283 AUC after training: 0.6909090909090909
User 40283 does not improve AUC. Reverting changes.
Training on augumented user 61321 29/50 current_auc = 0.698989898989899
User 61321 AUC after training: 0.694949494949495
User 61321 does not improve AUC. Reverting changes.
Training on augumented user 97674 30/50 current_auc = 0.698989898989899
User 97674 AUC after training: 0.698989898989899
User 97674 does not improve AUC. Reverting changes.
Training on augumented user 112678 31/50 current_auc = 0.698989898989899
User 112678 AUC after training: 0.698989898989899
User 112678 does not improve AUC. Reverting changes.
Training on augumented user 530 32/50 current_auc = 0.698989898989899
User 530 AUC after training: 0.694949494949495
User 530 does not improve AUC. Reverting changes.
Training on augumented user 50804 33/50 current_auc = 0.698989898989899
User 50804 AUC after training: 0.694949494949495
User 50804 does not improve AUC. Reverting changes.
Training on augumented user 75328 34/50 current_auc = 0.698989898989899
User 75328 AUC after training: 0.6909090909090909
User 75328 does not improve AUC. Reverting changes.
Training on augumented user 61265 35/50 current_auc = 0.698989898989899
User 61265 AUC after training: 0.692929292929293
User 61265 does not improve AUC. Reverting changes.
Training on augumented user 113008 36/50 current_auc = 0.698989898989899
User 113008 AUC after training: 0.696969696969697
User 113008 does not improve AUC. Reverting changes.
Training on augumented user 15746 37/50 current_auc = 0.698989898989899
User 15746 AUC after training: 0.698989898989899
User 15746 does not improve AUC. Reverting changes.
Training on augumented user 69300 38/50 current_auc = 0.698989898989899
User 69300 AUC after training: 0.696969696969697
User 69300 does not improve AUC. Reverting changes.
Training on augumented user 42471 39/50 current_auc = 0.698989898989899
User 42471 AUC after training: 0.6888888888888889
User 42471 does not improve AUC. Reverting changes.
Training on augumented user 25091 40/50 current_auc = 0.698989898989899
User 25091 AUC after training: 0.6949494949494949
User 25091 does not improve AUC. Reverting changes.
Training on augumented user 63082 41/50 current_auc = 0.698989898989899
User 63082 AUC after training: 0.696969696969697
User 63082 does not improve AUC. Reverting changes.
Training on augumented user 109521 42/50 current_auc = 0.698989898989899
User 109521 AUC after training: 0.698989898989899
User 109521 does not improve AUC. Reverting changes.
Training on augumented user 133247 43/50 current_auc = 0.698989898989899
User 133247 AUC after training: 0.698989898989899
User 133247 does not improve AUC. Reverting changes.
Training on augumented user 62101 44/50 current_auc = 0.698989898989899
User 62101 AUC after training: 0.698989898989899
User 62101 does not improve AUC. Reverting changes.
Training on augumented user 62103 45/50 current_auc = 0.698989898989899
User 62103 AUC after training: 0.698989898989899
User 62103 does not improve AUC. Reverting changes.
Training on augumented user 98435 46/50 current_auc = 0.698989898989899
User 98435 AUC after training: 0.6909090909090909
User 98435 does not improve AUC. Reverting changes.
Training on augumented user 28334 47/50 current_auc = 0.698989898989899
User 28334 AUC after training: 0.696969696969697
User 28334 does not improve AUC. Reverting changes.
Training on augumented user 116213 48/50 current_auc = 0.698989898989899
User 116213 AUC after training: 0.696969696969697
User 116213 does not improve AUC. Reverting changes.
Training on augumented user 68168 49/50 current_auc = 0.698989898989899
User 68168 AUC after training: 0.694949494949495
User 68168 does not improve AUC. Reverting changes.
[2024-12-02 19:02:17.406572] start test user 3589 154/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:02:17.837689] start test user 3589 154/568 recall augumented users by random, augumented_users = [41284, 131195, 104824, 2319, 22274, 98605, 32750, 108200, 98788, 82380, 102282, 8713, 22655, 93352, 33666, 126490, 42970, 104230, 66766, 54013, 41170, 52561, 45905, 30673, 30638, 28959, 1553, 90342, 119268, 62466, 87703, 137368, 119759, 88009, 117823, 120198, 117944, 75406, 77899, 56727, 90448, 95369, 58353, 116050, 101336, 20321, 103035, 50850, 113687, 32559]
[2024-12-02 19:02:17.854245] user = 3589 Cloud 154/568
[2024-12-02 19:02:17.868730] user = 3589 Local 154/568
[2024-12-02 19:02:17.971829] user = 3589 Local+ 154/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:02:20.433703] user = 3589 MPDA- 154/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5953947368421053
Training on augumented user 41284 0/50 current_auc = 0.5953947368421053
User 41284 AUC after training: 0.5951206140350878
User 41284 does not improve AUC. Reverting changes.
Training on augumented user 131195 1/50 current_auc = 0.5953947368421053
User 131195 AUC after training: 0.5948464912280702
User 131195 does not improve AUC. Reverting changes.
Training on augumented user 104824 2/50 current_auc = 0.5953947368421053
User 104824 AUC after training: 0.5937500000000001
User 104824 does not improve AUC. Reverting changes.
Training on augumented user 2319 3/50 current_auc = 0.5953947368421053
User 2319 AUC after training: 0.5953947368421053
User 2319 does not improve AUC. Reverting changes.
Training on augumented user 22274 4/50 current_auc = 0.5953947368421053
User 22274 AUC after training: 0.5948464912280702
User 22274 does not improve AUC. Reverting changes.
Training on augumented user 98605 5/50 current_auc = 0.5953947368421053
User 98605 AUC after training: 0.5948464912280702
User 98605 does not improve AUC. Reverting changes.
Training on augumented user 32750 6/50 current_auc = 0.5953947368421053
User 32750 AUC after training: 0.5956688596491229
User 32750 improves AUC. Keeping the model.
Training on augumented user 108200 7/50 current_auc = 0.5956688596491229
User 108200 AUC after training: 0.5964912280701754
User 108200 improves AUC. Keeping the model.
Training on augumented user 98788 8/50 current_auc = 0.5964912280701754
User 98788 AUC after training: 0.5964912280701754
User 98788 does not improve AUC. Reverting changes.
Training on augumented user 82380 9/50 current_auc = 0.5964912280701754
User 82380 AUC after training: 0.5956688596491229
User 82380 does not improve AUC. Reverting changes.
Training on augumented user 102282 10/50 current_auc = 0.5964912280701754
User 102282 AUC after training: 0.5970394736842105
User 102282 improves AUC. Keeping the model.
Training on augumented user 8713 11/50 current_auc = 0.5970394736842105
User 8713 AUC after training: 0.5959429824561404
User 8713 does not improve AUC. Reverting changes.
Training on augumented user 22655 12/50 current_auc = 0.5970394736842105
User 22655 AUC after training: 0.5964912280701755
User 22655 does not improve AUC. Reverting changes.
Training on augumented user 93352 13/50 current_auc = 0.5970394736842105
User 93352 AUC after training: 0.5964912280701755
User 93352 does not improve AUC. Reverting changes.
Training on augumented user 33666 14/50 current_auc = 0.5970394736842105
User 33666 AUC after training: 0.5959429824561404
User 33666 does not improve AUC. Reverting changes.
Training on augumented user 126490 15/50 current_auc = 0.5970394736842105
User 126490 AUC after training: 0.5964912280701755
User 126490 does not improve AUC. Reverting changes.
Training on augumented user 42970 16/50 current_auc = 0.5970394736842105
User 42970 AUC after training: 0.5964912280701755
User 42970 does not improve AUC. Reverting changes.
Training on augumented user 104230 17/50 current_auc = 0.5970394736842105
User 104230 AUC after training: 0.5964912280701754
User 104230 does not improve AUC. Reverting changes.
Training on augumented user 66766 18/50 current_auc = 0.5970394736842105
User 66766 AUC after training: 0.5964912280701754
User 66766 does not improve AUC. Reverting changes.
Training on augumented user 54013 19/50 current_auc = 0.5970394736842105
User 54013 AUC after training: 0.5953947368421053
User 54013 does not improve AUC. Reverting changes.
Training on augumented user 41170 20/50 current_auc = 0.5970394736842105
User 41170 AUC after training: 0.5959429824561404
User 41170 does not improve AUC. Reverting changes.
Training on augumented user 52561 21/50 current_auc = 0.5970394736842105
User 52561 AUC after training: 0.5953947368421053
User 52561 does not improve AUC. Reverting changes.
Training on augumented user 45905 22/50 current_auc = 0.5970394736842105
User 45905 AUC after training: 0.5970394736842105
User 45905 does not improve AUC. Reverting changes.
Training on augumented user 30673 23/50 current_auc = 0.5970394736842105
User 30673 AUC after training: 0.5934758771929824
User 30673 does not improve AUC. Reverting changes.
Training on augumented user 30638 24/50 current_auc = 0.5970394736842105
User 30638 AUC after training: 0.5964912280701754
User 30638 does not improve AUC. Reverting changes.
Training on augumented user 28959 25/50 current_auc = 0.5970394736842105
User 28959 AUC after training: 0.5964912280701755
User 28959 does not improve AUC. Reverting changes.
Training on augumented user 1553 26/50 current_auc = 0.5970394736842105
User 1553 AUC after training: 0.5959429824561404
User 1553 does not improve AUC. Reverting changes.
Training on augumented user 90342 27/50 current_auc = 0.5970394736842105
User 90342 AUC after training: 0.5970394736842105
User 90342 does not improve AUC. Reverting changes.
Training on augumented user 119268 28/50 current_auc = 0.5970394736842105
User 119268 AUC after training: 0.5964912280701755
User 119268 does not improve AUC. Reverting changes.
Training on augumented user 62466 29/50 current_auc = 0.5970394736842105
User 62466 AUC after training: 0.5953947368421053
User 62466 does not improve AUC. Reverting changes.
Training on augumented user 87703 30/50 current_auc = 0.5970394736842105
User 87703 AUC after training: 0.5964912280701755
User 87703 does not improve AUC. Reverting changes.
Training on augumented user 137368 31/50 current_auc = 0.5970394736842105
User 137368 AUC after training: 0.5964912280701755
User 137368 does not improve AUC. Reverting changes.
Training on augumented user 119759 32/50 current_auc = 0.5970394736842105
User 119759 AUC after training: 0.5964912280701755
User 119759 does not improve AUC. Reverting changes.
Training on augumented user 88009 33/50 current_auc = 0.5970394736842105
User 88009 AUC after training: 0.5964912280701755
User 88009 does not improve AUC. Reverting changes.
Training on augumented user 117823 34/50 current_auc = 0.5970394736842105
User 117823 AUC after training: 0.5953947368421053
User 117823 does not improve AUC. Reverting changes.
Training on augumented user 120198 35/50 current_auc = 0.5970394736842105
User 120198 AUC after training: 0.5970394736842105
User 120198 does not improve AUC. Reverting changes.
Training on augumented user 117944 36/50 current_auc = 0.5970394736842105
User 117944 AUC after training: 0.5959429824561404
User 117944 does not improve AUC. Reverting changes.
Training on augumented user 75406 37/50 current_auc = 0.5970394736842105
User 75406 AUC after training: 0.5959429824561404
User 75406 does not improve AUC. Reverting changes.
Training on augumented user 77899 38/50 current_auc = 0.5970394736842105
User 77899 AUC after training: 0.5964912280701755
User 77899 does not improve AUC. Reverting changes.
Training on augumented user 56727 39/50 current_auc = 0.5970394736842105
User 56727 AUC after training: 0.5970394736842105
User 56727 does not improve AUC. Reverting changes.
Training on augumented user 90448 40/50 current_auc = 0.5970394736842105
User 90448 AUC after training: 0.5964912280701755
User 90448 does not improve AUC. Reverting changes.
Training on augumented user 95369 41/50 current_auc = 0.5970394736842105
User 95369 AUC after training: 0.5959429824561404
User 95369 does not improve AUC. Reverting changes.
Training on augumented user 58353 42/50 current_auc = 0.5970394736842105
User 58353 AUC after training: 0.5953947368421053
User 58353 does not improve AUC. Reverting changes.
Training on augumented user 116050 43/50 current_auc = 0.5970394736842105
User 116050 AUC after training: 0.5970394736842105
User 116050 does not improve AUC. Reverting changes.
Training on augumented user 101336 44/50 current_auc = 0.5970394736842105
User 101336 AUC after training: 0.5959429824561403
User 101336 does not improve AUC. Reverting changes.
Training on augumented user 20321 45/50 current_auc = 0.5970394736842105
User 20321 AUC after training: 0.5964912280701754
User 20321 does not improve AUC. Reverting changes.
Training on augumented user 103035 46/50 current_auc = 0.5970394736842105
User 103035 AUC after training: 0.5959429824561404
User 103035 does not improve AUC. Reverting changes.
Training on augumented user 50850 47/50 current_auc = 0.5970394736842105
User 50850 AUC after training: 0.5964912280701754
User 50850 does not improve AUC. Reverting changes.
Training on augumented user 113687 48/50 current_auc = 0.5970394736842105
User 113687 AUC after training: 0.5970394736842105
User 113687 does not improve AUC. Reverting changes.
Training on augumented user 32559 49/50 current_auc = 0.5970394736842105
User 32559 AUC after training: 0.5970394736842105
User 32559 does not improve AUC. Reverting changes.
[2024-12-02 19:02:47.346966] start test user 3591 155/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:02:48.180405] start test user 3591 155/568 recall augumented users by random, augumented_users = [13136, 57098, 122431, 102636, 12691, 6160, 133247, 29517, 95938, 54297, 110171, 70069, 100052, 39432, 96016, 136221, 23882, 121039, 108882, 57851, 2888, 132737, 130936, 113869, 30366, 72570, 8671, 20098, 46026, 85669, 111817, 89682, 116416, 25099, 71135, 41382, 43020, 26360, 39683, 109415, 136859, 58613, 122921, 62489, 124870, 37522, 120971, 59049, 93254, 129193]
[2024-12-02 19:02:48.209160] user = 3591 Cloud 155/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:02:48.215994] user = 3591 Local 155/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:02:48.266977] user = 3591 Local+ 155/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:02:50.714914] user = 3591 MPDA- 155/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 13136 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13136 AUC after training: 0.5
User 13136 does not improve AUC. Reverting changes.
Training on augumented user 57098 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57098 AUC after training: 0.5
User 57098 does not improve AUC. Reverting changes.
Training on augumented user 122431 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122431 AUC after training: 0.5
User 122431 does not improve AUC. Reverting changes.
Training on augumented user 102636 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102636 AUC after training: 0.5
User 102636 does not improve AUC. Reverting changes.
Training on augumented user 12691 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12691 AUC after training: 0.5
User 12691 does not improve AUC. Reverting changes.
Training on augumented user 6160 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6160 AUC after training: 0.5
User 6160 does not improve AUC. Reverting changes.
Training on augumented user 133247 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133247 AUC after training: 0.5
User 133247 does not improve AUC. Reverting changes.
Training on augumented user 29517 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29517 AUC after training: 0.5
User 29517 does not improve AUC. Reverting changes.
Training on augumented user 95938 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95938 AUC after training: 0.5
User 95938 does not improve AUC. Reverting changes.
Training on augumented user 54297 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54297 AUC after training: 0.5
User 54297 does not improve AUC. Reverting changes.
Training on augumented user 110171 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110171 AUC after training: 0.5
User 110171 does not improve AUC. Reverting changes.
Training on augumented user 70069 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70069 AUC after training: 0.5
User 70069 does not improve AUC. Reverting changes.
Training on augumented user 100052 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100052 AUC after training: 0.5
User 100052 does not improve AUC. Reverting changes.
Training on augumented user 39432 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39432 AUC after training: 0.5
User 39432 does not improve AUC. Reverting changes.
Training on augumented user 96016 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96016 AUC after training: 0.5
User 96016 does not improve AUC. Reverting changes.
Training on augumented user 136221 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136221 AUC after training: 0.5
User 136221 does not improve AUC. Reverting changes.
Training on augumented user 23882 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23882 AUC after training: 0.5
User 23882 does not improve AUC. Reverting changes.
Training on augumented user 121039 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121039 AUC after training: 0.5
User 121039 does not improve AUC. Reverting changes.
Training on augumented user 108882 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108882 AUC after training: 0.5
User 108882 does not improve AUC. Reverting changes.
Training on augumented user 57851 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57851 AUC after training: 0.5
User 57851 does not improve AUC. Reverting changes.
Training on augumented user 2888 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2888 AUC after training: 0.5
User 2888 does not improve AUC. Reverting changes.
Training on augumented user 132737 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132737 AUC after training: 0.5
User 132737 does not improve AUC. Reverting changes.
Training on augumented user 130936 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130936 AUC after training: 0.5
User 130936 does not improve AUC. Reverting changes.
Training on augumented user 113869 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113869 AUC after training: 0.5
User 113869 does not improve AUC. Reverting changes.
Training on augumented user 30366 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30366 AUC after training: 0.5
User 30366 does not improve AUC. Reverting changes.
Training on augumented user 72570 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72570 AUC after training: 0.5
User 72570 does not improve AUC. Reverting changes.
Training on augumented user 8671 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8671 AUC after training: 0.5
User 8671 does not improve AUC. Reverting changes.
Training on augumented user 20098 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20098 AUC after training: 0.5
User 20098 does not improve AUC. Reverting changes.
Training on augumented user 46026 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46026 AUC after training: 0.5
User 46026 does not improve AUC. Reverting changes.
Training on augumented user 85669 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85669 AUC after training: 0.5
User 85669 does not improve AUC. Reverting changes.
Training on augumented user 111817 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111817 AUC after training: 0.5
User 111817 does not improve AUC. Reverting changes.
Training on augumented user 89682 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89682 AUC after training: 0.5
User 89682 does not improve AUC. Reverting changes.
Training on augumented user 116416 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116416 AUC after training: 0.5
User 116416 does not improve AUC. Reverting changes.
Training on augumented user 25099 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25099 AUC after training: 0.5
User 25099 does not improve AUC. Reverting changes.
Training on augumented user 71135 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71135 AUC after training: 0.5
User 71135 does not improve AUC. Reverting changes.
Training on augumented user 41382 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41382 AUC after training: 0.5
User 41382 does not improve AUC. Reverting changes.
Training on augumented user 43020 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43020 AUC after training: 0.5
User 43020 does not improve AUC. Reverting changes.
Training on augumented user 26360 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26360 AUC after training: 0.5
User 26360 does not improve AUC. Reverting changes.
Training on augumented user 39683 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39683 AUC after training: 0.5
User 39683 does not improve AUC. Reverting changes.
Training on augumented user 109415 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109415 AUC after training: 0.5
User 109415 does not improve AUC. Reverting changes.
Training on augumented user 136859 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136859 AUC after training: 0.5
User 136859 does not improve AUC. Reverting changes.
Training on augumented user 58613 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58613 AUC after training: 0.5
User 58613 does not improve AUC. Reverting changes.
Training on augumented user 122921 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122921 AUC after training: 0.5
User 122921 does not improve AUC. Reverting changes.
Training on augumented user 62489 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62489 AUC after training: 0.5
User 62489 does not improve AUC. Reverting changes.
Training on augumented user 124870 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124870 AUC after training: 0.5
User 124870 does not improve AUC. Reverting changes.
Training on augumented user 37522 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37522 AUC after training: 0.5
User 37522 does not improve AUC. Reverting changes.
Training on augumented user 120971 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120971 AUC after training: 0.5
User 120971 does not improve AUC. Reverting changes.
Training on augumented user 59049 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59049 AUC after training: 0.5
User 59049 does not improve AUC. Reverting changes.
Training on augumented user 93254 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93254 AUC after training: 0.5
User 93254 does not improve AUC. Reverting changes.
Training on augumented user 129193 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129193 AUC after training: 0.5
User 129193 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:03:20.720501] start test user 3618 156/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:03:21.244240] start test user 3618 156/568 recall augumented users by random, augumented_users = [128927, 83384, 79479, 111816, 22621, 17465, 69596, 40252, 71384, 135671, 93633, 59667, 81582, 13379, 89124, 82579, 15646, 14678, 21048, 108799, 103867, 91158, 76601, 55775, 123509, 84441, 17819, 91291, 77187, 130797, 68464, 7325, 44375, 100782, 104459, 10624, 109349, 36361, 42633, 121671, 101451, 11159, 101650, 125525, 64251, 31497, 5145, 118639, 42718, 36226]
[2024-12-02 19:03:21.261609] user = 3618 Cloud 156/568
[2024-12-02 19:03:21.284956] user = 3618 Local 156/568
[2024-12-02 19:03:21.422441] user = 3618 Local+ 156/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:03:24.093667] user = 3618 MPDA- 156/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5872229465449804
Training on augumented user 128927 0/50 current_auc = 0.5872229465449804
User 128927 AUC after training: 0.5873533246414602
User 128927 improves AUC. Keeping the model.
Training on augumented user 83384 1/50 current_auc = 0.5873533246414602
User 83384 AUC after training: 0.5876792698826597
User 83384 improves AUC. Keeping the model.
Training on augumented user 79479 2/50 current_auc = 0.5876792698826597
User 79479 AUC after training: 0.5882659713168188
User 79479 improves AUC. Keeping the model.
Training on augumented user 111816 3/50 current_auc = 0.5882659713168188
User 111816 AUC after training: 0.5882659713168188
User 111816 does not improve AUC. Reverting changes.
Training on augumented user 22621 4/50 current_auc = 0.5882659713168188
User 22621 AUC after training: 0.5885267275097784
User 22621 improves AUC. Keeping the model.
Training on augumented user 17465 5/50 current_auc = 0.5885267275097784
User 17465 AUC after training: 0.5883963494132985
User 17465 does not improve AUC. Reverting changes.
Training on augumented user 69596 6/50 current_auc = 0.5885267275097784
User 69596 AUC after training: 0.5872881355932204
User 69596 does not improve AUC. Reverting changes.
Training on augumented user 40252 7/50 current_auc = 0.5885267275097784
User 40252 AUC after training: 0.5883311603650586
User 40252 does not improve AUC. Reverting changes.
Training on augumented user 71384 8/50 current_auc = 0.5885267275097784
User 71384 AUC after training: 0.5883311603650586
User 71384 does not improve AUC. Reverting changes.
Training on augumented user 135671 9/50 current_auc = 0.5885267275097784
User 135671 AUC after training: 0.5889178617992177
User 135671 improves AUC. Keeping the model.
Training on augumented user 93633 10/50 current_auc = 0.5889178617992177
User 93633 AUC after training: 0.5886571056062582
User 93633 does not improve AUC. Reverting changes.
Training on augumented user 59667 11/50 current_auc = 0.5889178617992177
User 59667 AUC after training: 0.5885267275097783
User 59667 does not improve AUC. Reverting changes.
Training on augumented user 81582 12/50 current_auc = 0.5889178617992177
User 81582 AUC after training: 0.5895371577574967
User 81582 improves AUC. Keeping the model.
Training on augumented user 13379 13/50 current_auc = 0.5895371577574967
User 13379 AUC after training: 0.5892764015645371
User 13379 does not improve AUC. Reverting changes.
Training on augumented user 89124 14/50 current_auc = 0.5895371577574967
User 89124 AUC after training: 0.5890482398956975
User 89124 does not improve AUC. Reverting changes.
Training on augumented user 82579 15/50 current_auc = 0.5895371577574967
User 82579 AUC after training: 0.5890482398956975
User 82579 does not improve AUC. Reverting changes.
Training on augumented user 15646 16/50 current_auc = 0.5895371577574967
User 15646 AUC after training: 0.5891786179921773
User 15646 does not improve AUC. Reverting changes.
Training on augumented user 14678 17/50 current_auc = 0.5895371577574967
User 14678 AUC after training: 0.5918187744458931
User 14678 improves AUC. Keeping the model.
Training on augumented user 21048 18/50 current_auc = 0.5918187744458931
User 21048 AUC after training: 0.5911016949152543
User 21048 does not improve AUC. Reverting changes.
Training on augumented user 108799 19/50 current_auc = 0.5918187744458931
User 108799 AUC after training: 0.5920795306388527
User 108799 improves AUC. Keeping the model.
Training on augumented user 103867 20/50 current_auc = 0.5920795306388527
User 103867 AUC after training: 0.5909061277705345
User 103867 does not improve AUC. Reverting changes.
Training on augumented user 91158 21/50 current_auc = 0.5920795306388527
User 91158 AUC after training: 0.5914602346805737
User 91158 does not improve AUC. Reverting changes.
Training on augumented user 76601 22/50 current_auc = 0.5920795306388527
User 76601 AUC after training: 0.591883963494133
User 76601 does not improve AUC. Reverting changes.
Training on augumented user 55775 23/50 current_auc = 0.5920795306388527
User 55775 AUC after training: 0.5921121251629726
User 55775 improves AUC. Keeping the model.
Training on augumented user 123509 24/50 current_auc = 0.5921121251629726
User 123509 AUC after training: 0.5907757496740547
User 123509 does not improve AUC. Reverting changes.
Training on augumented user 84441 25/50 current_auc = 0.5921121251629726
User 84441 AUC after training: 0.5919491525423729
User 84441 does not improve AUC. Reverting changes.
Training on augumented user 17819 26/50 current_auc = 0.5921121251629726
User 17819 AUC after training: 0.5915254237288136
User 17819 does not improve AUC. Reverting changes.
Training on augumented user 91291 27/50 current_auc = 0.5921121251629726
User 91291 AUC after training: 0.5921773142112126
User 91291 improves AUC. Keeping the model.
Training on augumented user 77187 28/50 current_auc = 0.5921773142112126
User 77187 AUC after training: 0.5923728813559321
User 77187 improves AUC. Keeping the model.
Training on augumented user 130797 29/50 current_auc = 0.5923728813559321
User 130797 AUC after training: 0.5917861799217732
User 130797 does not improve AUC. Reverting changes.
Training on augumented user 68464 30/50 current_auc = 0.5923728813559321
User 68464 AUC after training: 0.5923728813559321
User 68464 does not improve AUC. Reverting changes.
Training on augumented user 7325 31/50 current_auc = 0.5923728813559321
User 7325 AUC after training: 0.5920469361147327
User 7325 does not improve AUC. Reverting changes.
Training on augumented user 44375 32/50 current_auc = 0.5923728813559321
User 44375 AUC after training: 0.5917209908735332
User 44375 does not improve AUC. Reverting changes.
Training on augumented user 100782 33/50 current_auc = 0.5923728813559321
User 100782 AUC after training: 0.5924054758800521
User 100782 improves AUC. Keeping the model.
Training on augumented user 104459 34/50 current_auc = 0.5924054758800521
User 104459 AUC after training: 0.5932855280312908
User 104459 improves AUC. Keeping the model.
Training on augumented user 10624 35/50 current_auc = 0.5932855280312908
User 10624 AUC after training: 0.5926336375488918
User 10624 does not improve AUC. Reverting changes.
Training on augumented user 109349 36/50 current_auc = 0.5932855280312908
User 109349 AUC after training: 0.5933833116036505
User 109349 improves AUC. Keeping the model.
Training on augumented user 36361 37/50 current_auc = 0.5933833116036505
User 36361 AUC after training: 0.5907431551499348
User 36361 does not improve AUC. Reverting changes.
Training on augumented user 42633 38/50 current_auc = 0.5933833116036505
User 42633 AUC after training: 0.5929269882659712
User 42633 does not improve AUC. Reverting changes.
Training on augumented user 121671 39/50 current_auc = 0.5933833116036505
User 121671 AUC after training: 0.5941003911342895
User 121671 improves AUC. Keeping the model.
Training on augumented user 101451 40/50 current_auc = 0.5941003911342895
User 101451 AUC after training: 0.5929269882659713
User 101451 does not improve AUC. Reverting changes.
Training on augumented user 11159 41/50 current_auc = 0.5941003911342895
User 11159 AUC after training: 0.5928617992177314
User 11159 does not improve AUC. Reverting changes.
Training on augumented user 101650 42/50 current_auc = 0.5941003911342895
User 101650 AUC after training: 0.5933181225554107
User 101650 does not improve AUC. Reverting changes.
Training on augumented user 125525 43/50 current_auc = 0.5941003911342895
User 125525 AUC after training: 0.5924380704041722
User 125525 does not improve AUC. Reverting changes.
Training on augumented user 64251 44/50 current_auc = 0.5941003911342895
User 64251 AUC after training: 0.5929921773142113
User 64251 does not improve AUC. Reverting changes.
Training on augumented user 31497 45/50 current_auc = 0.5941003911342895
User 31497 AUC after training: 0.5934159061277705
User 31497 does not improve AUC. Reverting changes.
Training on augumented user 5145 46/50 current_auc = 0.5941003911342895
User 5145 AUC after training: 0.5932855280312908
User 5145 does not improve AUC. Reverting changes.
Training on augumented user 118639 47/50 current_auc = 0.5941003911342895
User 118639 AUC after training: 0.593024771838331
User 118639 does not improve AUC. Reverting changes.
Training on augumented user 42718 48/50 current_auc = 0.5941003911342895
User 42718 AUC after training: 0.5935462842242503
User 42718 does not improve AUC. Reverting changes.
Training on augumented user 36226 49/50 current_auc = 0.5941003911342895
User 36226 AUC after training: 0.5923728813559321
User 36226 does not improve AUC. Reverting changes.
[2024-12-02 19:03:54.604546] start test user 3629 157/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:03:55.458614] start test user 3629 157/568 recall augumented users by random, augumented_users = [128951, 133059, 56462, 52215, 115407, 29679, 88902, 62249, 17095, 115235, 109851, 127424, 114387, 68030, 104365, 29626, 97384, 95930, 65125, 114523, 112718, 81933, 71236, 81194, 137513, 78085, 25485, 44036, 121589, 16157, 43483, 92535, 93735, 7403, 36562, 32934, 27825, 89687, 41801, 68268, 29630, 134169, 60130, 46665, 23000, 86671, 113222, 116236, 138031, 112047]
[2024-12-02 19:03:55.486914] user = 3629 Cloud 157/568
[2024-12-02 19:03:55.513521] user = 3629 Local 157/568
[2024-12-02 19:03:55.854841] user = 3629 Local+ 157/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:03:57.628742] user = 3629 MPDA- 157/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5105917243327214
Training on augumented user 128951 0/50 current_auc = 0.5105917243327214
User 128951 AUC after training: 0.509956220872758
User 128951 does not improve AUC. Reverting changes.
Training on augumented user 133059 1/50 current_auc = 0.5105917243327214
User 133059 AUC after training: 0.5091794944216919
User 133059 does not improve AUC. Reverting changes.
Training on augumented user 56462 2/50 current_auc = 0.5105917243327214
User 56462 AUC after training: 0.5109447818104788
User 56462 improves AUC. Keeping the model.
Training on augumented user 52215 3/50 current_auc = 0.5109447818104788
User 52215 AUC after training: 0.5112272277926846
User 52215 improves AUC. Keeping the model.
Training on augumented user 115407 4/50 current_auc = 0.5112272277926846
User 115407 AUC after training: 0.5106623358282728
User 115407 does not improve AUC. Reverting changes.
Training on augumented user 29679 5/50 current_auc = 0.5112272277926846
User 29679 AUC after training: 0.5110860048015817
User 29679 does not improve AUC. Reverting changes.
Training on augumented user 88902 6/50 current_auc = 0.5112272277926846
User 88902 AUC after training: 0.5119333427481993
User 88902 improves AUC. Keeping the model.
Training on augumented user 62249 7/50 current_auc = 0.5119333427481993
User 62249 AUC after training: 0.5122157887304053
User 62249 improves AUC. Keeping the model.
Training on augumented user 17095 8/50 current_auc = 0.5122157887304053
User 17095 AUC after training: 0.510379889846067
User 17095 does not improve AUC. Reverting changes.
Training on augumented user 115235 9/50 current_auc = 0.5122157887304053
User 115235 AUC after training: 0.5126394577037141
User 115235 improves AUC. Keeping the model.
Training on augumented user 109851 10/50 current_auc = 0.5126394577037141
User 109851 AUC after training: 0.5124982347126112
User 109851 does not improve AUC. Reverting changes.
Training on augumented user 127424 11/50 current_auc = 0.5126394577037141
User 127424 AUC after training: 0.511156616297133
User 127424 does not improve AUC. Reverting changes.
Training on augumented user 114387 12/50 current_auc = 0.5126394577037141
User 114387 AUC after training: 0.5117921197570965
User 114387 does not improve AUC. Reverting changes.
Training on augumented user 68030 13/50 current_auc = 0.5126394577037141
User 68030 AUC after training: 0.5115096737748905
User 68030 does not improve AUC. Reverting changes.
Training on augumented user 104365 14/50 current_auc = 0.5126394577037141
User 104365 AUC after training: 0.513204349668126
User 104365 improves AUC. Keeping the model.
Training on augumented user 29626 15/50 current_auc = 0.513204349668126
User 29626 AUC after training: 0.5122157887304053
User 29626 does not improve AUC. Reverting changes.
Training on augumented user 97384 16/50 current_auc = 0.513204349668126
User 97384 AUC after training: 0.5134161841547804
User 97384 improves AUC. Keeping the model.
Training on augumented user 95930 17/50 current_auc = 0.5134161841547804
User 95930 AUC after training: 0.5127806806948171
User 95930 does not improve AUC. Reverting changes.
Training on augumented user 65125 18/50 current_auc = 0.5134161841547804
User 65125 AUC after training: 0.5133455726592289
User 65125 does not improve AUC. Reverting changes.
Training on augumented user 114523 19/50 current_auc = 0.5134161841547804
User 114523 AUC after training: 0.5123570117215083
User 114523 does not improve AUC. Reverting changes.
Training on augumented user 112718 20/50 current_auc = 0.5134161841547804
User 112718 AUC after training: 0.513063126677023
User 112718 does not improve AUC. Reverting changes.
Training on augumented user 81933 21/50 current_auc = 0.5134161841547804
User 81933 AUC after training: 0.513204349668126
User 81933 does not improve AUC. Reverting changes.
Training on augumented user 71236 22/50 current_auc = 0.5134161841547804
User 71236 AUC after training: 0.5082615449795227
User 71236 does not improve AUC. Reverting changes.
Training on augumented user 81194 23/50 current_auc = 0.5134161841547804
User 81194 AUC after training: 0.5134161841547804
User 81194 does not improve AUC. Reverting changes.
Training on augumented user 137513 24/50 current_auc = 0.5134161841547804
User 137513 AUC after training: 0.5129925151814716
User 137513 does not improve AUC. Reverting changes.
Training on augumented user 78085 25/50 current_auc = 0.5134161841547804
User 78085 AUC after training: 0.5126394577037141
User 78085 does not improve AUC. Reverting changes.
Training on augumented user 25485 26/50 current_auc = 0.5134161841547804
User 25485 AUC after training: 0.51292190368592
User 25485 does not improve AUC. Reverting changes.
Training on augumented user 44036 27/50 current_auc = 0.5134161841547804
User 44036 AUC after training: 0.5110153933060302
User 44036 does not improve AUC. Reverting changes.
Training on augumented user 121589 28/50 current_auc = 0.5134161841547804
User 121589 AUC after training: 0.5127806806948172
User 121589 does not improve AUC. Reverting changes.
Training on augumented user 16157 29/50 current_auc = 0.5134161841547804
User 16157 AUC after training: 0.511439062279339
User 16157 does not improve AUC. Reverting changes.
Training on augumented user 43483 30/50 current_auc = 0.5134161841547804
User 43483 AUC after training: 0.5136280186414348
User 43483 improves AUC. Keeping the model.
Training on augumented user 92535 31/50 current_auc = 0.5136280186414348
User 92535 AUC after training: 0.5127806806948172
User 92535 does not improve AUC. Reverting changes.
Training on augumented user 93735 32/50 current_auc = 0.5136280186414348
User 93735 AUC after training: 0.5135574071458833
User 93735 does not improve AUC. Reverting changes.
Training on augumented user 7403 33/50 current_auc = 0.5136280186414348
User 7403 AUC after training: 0.5133455726592289
User 7403 does not improve AUC. Reverting changes.
Training on augumented user 36562 34/50 current_auc = 0.5136280186414348
User 36562 AUC after training: 0.5133455726592289
User 36562 does not improve AUC. Reverting changes.
Training on augumented user 32934 35/50 current_auc = 0.5136280186414348
User 32934 AUC after training: 0.5139810761191923
User 32934 improves AUC. Keeping the model.
Training on augumented user 27825 36/50 current_auc = 0.5139810761191923
User 27825 AUC after training: 0.5127100691992657
User 27825 does not improve AUC. Reverting changes.
Training on augumented user 89687 37/50 current_auc = 0.5139810761191923
User 89687 AUC after training: 0.5127100691992657
User 89687 does not improve AUC. Reverting changes.
Training on augumented user 41801 38/50 current_auc = 0.5139810761191923
User 41801 AUC after training: 0.5136280186414348
User 41801 does not improve AUC. Reverting changes.
Training on augumented user 68268 39/50 current_auc = 0.5139810761191923
User 68268 AUC after training: 0.513204349668126
User 68268 does not improve AUC. Reverting changes.
Training on augumented user 29630 40/50 current_auc = 0.5139810761191923
User 29630 AUC after training: 0.5136280186414348
User 29630 does not improve AUC. Reverting changes.
Training on augumented user 134169 41/50 current_auc = 0.5139810761191923
User 134169 AUC after training: 0.5124982347126112
User 134169 does not improve AUC. Reverting changes.
Training on augumented user 60130 42/50 current_auc = 0.5139810761191923
User 60130 AUC after training: 0.5136280186414348
User 60130 does not improve AUC. Reverting changes.
Training on augumented user 46665 43/50 current_auc = 0.5139810761191923
User 46665 AUC after training: 0.5135574071458833
User 46665 does not improve AUC. Reverting changes.
Training on augumented user 23000 44/50 current_auc = 0.5139810761191923
User 23000 AUC after training: 0.5138398531280892
User 23000 does not improve AUC. Reverting changes.
Training on augumented user 86671 45/50 current_auc = 0.5139810761191923
User 86671 AUC after training: 0.5125688462081627
User 86671 does not improve AUC. Reverting changes.
Training on augumented user 113222 46/50 current_auc = 0.5139810761191923
User 113222 AUC after training: 0.514404745092501
User 113222 improves AUC. Keeping the model.
Training on augumented user 116236 47/50 current_auc = 0.514404745092501
User 116236 AUC after training: 0.5141929106058466
User 116236 does not improve AUC. Reverting changes.
Training on augumented user 138031 48/50 current_auc = 0.514404745092501
User 138031 AUC after training: 0.5137692416325378
User 138031 does not improve AUC. Reverting changes.
Training on augumented user 112047 49/50 current_auc = 0.514404745092501
User 112047 AUC after training: 0.5140516876147436
User 112047 does not improve AUC. Reverting changes.
[2024-12-02 19:04:27.237705] start test user 3660 158/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:04:27.788278] start test user 3660 158/568 recall augumented users by random, augumented_users = [5336, 128194, 69656, 94374, 17969, 65690, 17115, 13923, 26138, 14977, 19156, 20885, 76671, 5573, 76314, 72831, 21028, 37740, 68941, 91787, 125537, 53195, 42086, 126470, 33677, 127948, 29676, 36456, 19847, 77396, 77043, 27328, 120474, 72264, 122088, 116000, 129800, 60984, 111246, 40493, 59817, 24063, 88857, 68734, 78879, 84988, 131500, 134020, 86166, 117186]
[2024-12-02 19:04:27.810555] user = 3660 Cloud 158/568
[2024-12-02 19:04:27.844133] user = 3660 Local 158/568
[2024-12-02 19:04:27.911772] user = 3660 Local+ 158/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:04:30.130453] user = 3660 MPDA- 158/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7339154411764706
Training on augumented user 5336 0/50 current_auc = 0.7339154411764706
User 5336 AUC after training: 0.7338670665634675
User 5336 does not improve AUC. Reverting changes.
Training on augumented user 128194 1/50 current_auc = 0.7339154411764706
User 128194 AUC after training: 0.7341089396284829
User 128194 improves AUC. Keeping the model.
Training on augumented user 69656 2/50 current_auc = 0.7341089396284829
User 69656 AUC after training: 0.7337219427244581
User 69656 does not improve AUC. Reverting changes.
Training on augumented user 94374 3/50 current_auc = 0.7341089396284829
User 94374 AUC after training: 0.734205688854489
User 94374 improves AUC. Keeping the model.
Training on augumented user 17969 4/50 current_auc = 0.734205688854489
User 17969 AUC after training: 0.7339880030959752
User 17969 does not improve AUC. Reverting changes.
Training on augumented user 65690 5/50 current_auc = 0.734205688854489
User 65690 AUC after training: 0.7339880030959753
User 65690 does not improve AUC. Reverting changes.
Training on augumented user 17115 6/50 current_auc = 0.734205688854489
User 17115 AUC after training: 0.7341331269349846
User 17115 does not improve AUC. Reverting changes.
Training on augumented user 13923 7/50 current_auc = 0.734205688854489
User 13923 AUC after training: 0.7344959365325077
User 13923 improves AUC. Keeping the model.
Training on augumented user 26138 8/50 current_auc = 0.7344959365325077
User 26138 AUC after training: 0.7351731811145512
User 26138 improves AUC. Keeping the model.
Training on augumented user 14977 9/50 current_auc = 0.7351731811145512
User 14977 AUC after training: 0.7309404024767803
User 14977 does not improve AUC. Reverting changes.
Training on augumented user 19156 10/50 current_auc = 0.7351731811145512
User 19156 AUC after training: 0.7349796826625387
User 19156 does not improve AUC. Reverting changes.
Training on augumented user 20885 11/50 current_auc = 0.7351731811145512
User 20885 AUC after training: 0.7351731811145511
User 20885 does not improve AUC. Reverting changes.
Training on augumented user 76671 12/50 current_auc = 0.7351731811145512
User 76671 AUC after training: 0.7350280572755419
User 76671 does not improve AUC. Reverting changes.
Training on augumented user 5573 13/50 current_auc = 0.7351731811145512
User 5573 AUC after training: 0.7349313080495355
User 5573 does not improve AUC. Reverting changes.
Training on augumented user 76314 14/50 current_auc = 0.7351731811145512
User 76314 AUC after training: 0.7342056888544891
User 76314 does not improve AUC. Reverting changes.
Training on augumented user 72831 15/50 current_auc = 0.7351731811145512
User 72831 AUC after training: 0.7347861842105262
User 72831 does not improve AUC. Reverting changes.
Training on augumented user 21028 16/50 current_auc = 0.7351731811145512
User 21028 AUC after training: 0.735124806501548
User 21028 does not improve AUC. Reverting changes.
Training on augumented user 37740 17/50 current_auc = 0.7351731811145512
User 37740 AUC after training: 0.7314725232198143
User 37740 does not improve AUC. Reverting changes.
Training on augumented user 68941 18/50 current_auc = 0.7351731811145512
User 68941 AUC after training: 0.7354150541795665
User 68941 improves AUC. Keeping the model.
Training on augumented user 91787 19/50 current_auc = 0.7354150541795665
User 91787 AUC after training: 0.7351248065015481
User 91787 does not improve AUC. Reverting changes.
Training on augumented user 125537 20/50 current_auc = 0.7354150541795665
User 125537 AUC after training: 0.7352699303405573
User 125537 does not improve AUC. Reverting changes.
Training on augumented user 53195 21/50 current_auc = 0.7354150541795665
User 53195 AUC after training: 0.7349313080495355
User 53195 does not improve AUC. Reverting changes.
Training on augumented user 42086 22/50 current_auc = 0.7354150541795665
User 42086 AUC after training: 0.7340847523219813
User 42086 does not improve AUC. Reverting changes.
Training on augumented user 126470 23/50 current_auc = 0.7354150541795665
User 126470 AUC after training: 0.7356569272445821
User 126470 improves AUC. Keeping the model.
Training on augumented user 33677 24/50 current_auc = 0.7356569272445821
User 33677 AUC after training: 0.7350764318885449
User 33677 does not improve AUC. Reverting changes.
Training on augumented user 127948 25/50 current_auc = 0.7356569272445821
User 127948 AUC after training: 0.735124806501548
User 127948 does not improve AUC. Reverting changes.
Training on augumented user 29676 26/50 current_auc = 0.7356569272445821
User 29676 AUC after training: 0.7354150541795665
User 29676 does not improve AUC. Reverting changes.
Training on augumented user 36456 27/50 current_auc = 0.7356569272445821
User 36456 AUC after training: 0.7352699303405572
User 36456 does not improve AUC. Reverting changes.
Training on augumented user 19847 28/50 current_auc = 0.7356569272445821
User 19847 AUC after training: 0.7346894349845201
User 19847 does not improve AUC. Reverting changes.
Training on augumented user 77396 29/50 current_auc = 0.7356569272445821
User 77396 AUC after training: 0.7338912538699689
User 77396 does not improve AUC. Reverting changes.
Training on augumented user 77043 30/50 current_auc = 0.7356569272445821
User 77043 AUC after training: 0.7356569272445821
User 77043 does not improve AUC. Reverting changes.
Training on augumented user 27328 31/50 current_auc = 0.7356569272445821
User 27328 AUC after training: 0.7353666795665635
User 27328 does not improve AUC. Reverting changes.
Training on augumented user 120474 32/50 current_auc = 0.7356569272445821
User 120474 AUC after training: 0.7354634287925697
User 120474 does not improve AUC. Reverting changes.
Training on augumented user 72264 33/50 current_auc = 0.7356569272445821
User 72264 AUC after training: 0.7348829334365325
User 72264 does not improve AUC. Reverting changes.
Training on augumented user 122088 34/50 current_auc = 0.7356569272445821
User 122088 AUC after training: 0.7354634287925697
User 122088 does not improve AUC. Reverting changes.
Training on augumented user 116000 35/50 current_auc = 0.7356569272445821
User 116000 AUC after training: 0.7355118034055728
User 116000 does not improve AUC. Reverting changes.
Training on augumented user 129800 36/50 current_auc = 0.7356569272445821
User 129800 AUC after training: 0.7356569272445821
User 129800 does not improve AUC. Reverting changes.
Training on augumented user 60984 37/50 current_auc = 0.7356569272445821
User 60984 AUC after training: 0.7353183049535604
User 60984 does not improve AUC. Reverting changes.
Training on augumented user 111246 38/50 current_auc = 0.7356569272445821
User 111246 AUC after training: 0.7346894349845201
User 111246 does not improve AUC. Reverting changes.
Training on augumented user 40493 39/50 current_auc = 0.7356569272445821
User 40493 AUC after training: 0.7356569272445821
User 40493 does not improve AUC. Reverting changes.
Training on augumented user 59817 40/50 current_auc = 0.7356569272445821
User 59817 AUC after training: 0.7353666795665635
User 59817 does not improve AUC. Reverting changes.
Training on augumented user 24063 41/50 current_auc = 0.7356569272445821
User 24063 AUC after training: 0.7354150541795664
User 24063 does not improve AUC. Reverting changes.
Training on augumented user 88857 42/50 current_auc = 0.7356569272445821
User 88857 AUC after training: 0.7350280572755418
User 88857 does not improve AUC. Reverting changes.
Training on augumented user 68734 43/50 current_auc = 0.7356569272445821
User 68734 AUC after training: 0.7356569272445821
User 68734 does not improve AUC. Reverting changes.
Training on augumented user 78879 44/50 current_auc = 0.7356569272445821
User 78879 AUC after training: 0.735124806501548
User 78879 does not improve AUC. Reverting changes.
Training on augumented user 84988 45/50 current_auc = 0.7356569272445821
User 84988 AUC after training: 0.7354634287925697
User 84988 does not improve AUC. Reverting changes.
Training on augumented user 131500 46/50 current_auc = 0.7356569272445821
User 131500 AUC after training: 0.7352215557275543
User 131500 does not improve AUC. Reverting changes.
Training on augumented user 134020 47/50 current_auc = 0.7356569272445821
User 134020 AUC after training: 0.7355601780185759
User 134020 does not improve AUC. Reverting changes.
Training on augumented user 86166 48/50 current_auc = 0.7356569272445821
User 86166 AUC after training: 0.7353666795665635
User 86166 does not improve AUC. Reverting changes.
Training on augumented user 117186 49/50 current_auc = 0.7356569272445821
User 117186 AUC after training: 0.7352699303405573
User 117186 does not improve AUC. Reverting changes.
[2024-12-02 19:04:57.064328] start test user 3667 159/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:04:57.472522] start test user 3667 159/568 recall augumented users by random, augumented_users = [33118, 23590, 60980, 93004, 70025, 94857, 105357, 122369, 2926, 64678, 40113, 69105, 63735, 93765, 110717, 78751, 16706, 52829, 138044, 128084, 97511, 131270, 13407, 41689, 38793, 91582, 136704, 53975, 124411, 15340, 79250, 34900, 32756, 80350, 43761, 4167, 95439, 95606, 13112, 3836, 126634, 67901, 86911, 35503, 121364, 74514, 46044, 92233, 59666, 125824]
[2024-12-02 19:04:57.487879] user = 3667 Cloud 159/568
[2024-12-02 19:04:57.497940] user = 3667 Local 159/568
[2024-12-02 19:04:57.611286] user = 3667 Local+ 159/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:05:00.472781] user = 3667 MPDA- 159/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8333333333333333
Training on augumented user 33118 0/50 current_auc = 0.8333333333333333
User 33118 AUC after training: 0.8333333333333333
User 33118 does not improve AUC. Reverting changes.
Training on augumented user 23590 1/50 current_auc = 0.8333333333333333
User 23590 AUC after training: 0.8333333333333333
User 23590 does not improve AUC. Reverting changes.
Training on augumented user 60980 2/50 current_auc = 0.8333333333333333
User 60980 AUC after training: 0.8333333333333333
User 60980 does not improve AUC. Reverting changes.
Training on augumented user 93004 3/50 current_auc = 0.8333333333333333
User 93004 AUC after training: 0.8333333333333333
User 93004 does not improve AUC. Reverting changes.
Training on augumented user 70025 4/50 current_auc = 0.8333333333333333
User 70025 AUC after training: 0.8333333333333333
User 70025 does not improve AUC. Reverting changes.
Training on augumented user 94857 5/50 current_auc = 0.8333333333333333
User 94857 AUC after training: 0.8333333333333333
User 94857 does not improve AUC. Reverting changes.
Training on augumented user 105357 6/50 current_auc = 0.8333333333333333
User 105357 AUC after training: 0.6666666666666666
User 105357 does not improve AUC. Reverting changes.
Training on augumented user 122369 7/50 current_auc = 0.8333333333333333
User 122369 AUC after training: 0.8333333333333333
User 122369 does not improve AUC. Reverting changes.
Training on augumented user 2926 8/50 current_auc = 0.8333333333333333
User 2926 AUC after training: 0.8333333333333333
User 2926 does not improve AUC. Reverting changes.
Training on augumented user 64678 9/50 current_auc = 0.8333333333333333
User 64678 AUC after training: 0.8333333333333333
User 64678 does not improve AUC. Reverting changes.
Training on augumented user 40113 10/50 current_auc = 0.8333333333333333
User 40113 AUC after training: 0.8333333333333333
User 40113 does not improve AUC. Reverting changes.
Training on augumented user 69105 11/50 current_auc = 0.8333333333333333
User 69105 AUC after training: 0.8333333333333333
User 69105 does not improve AUC. Reverting changes.
Training on augumented user 63735 12/50 current_auc = 0.8333333333333333
User 63735 AUC after training: 0.8333333333333333
User 63735 does not improve AUC. Reverting changes.
Training on augumented user 93765 13/50 current_auc = 0.8333333333333333
User 93765 AUC after training: 0.8333333333333333
User 93765 does not improve AUC. Reverting changes.
Training on augumented user 110717 14/50 current_auc = 0.8333333333333333
User 110717 AUC after training: 0.8333333333333333
User 110717 does not improve AUC. Reverting changes.
Training on augumented user 78751 15/50 current_auc = 0.8333333333333333
User 78751 AUC after training: 0.8333333333333333
User 78751 does not improve AUC. Reverting changes.
Training on augumented user 16706 16/50 current_auc = 0.8333333333333333
User 16706 AUC after training: 0.8333333333333333
User 16706 does not improve AUC. Reverting changes.
Training on augumented user 52829 17/50 current_auc = 0.8333333333333333
User 52829 AUC after training: 0.8333333333333333
User 52829 does not improve AUC. Reverting changes.
Training on augumented user 138044 18/50 current_auc = 0.8333333333333333
User 138044 AUC after training: 0.8333333333333333
User 138044 does not improve AUC. Reverting changes.
Training on augumented user 128084 19/50 current_auc = 0.8333333333333333
User 128084 AUC after training: 0.8333333333333333
User 128084 does not improve AUC. Reverting changes.
Training on augumented user 97511 20/50 current_auc = 0.8333333333333333
User 97511 AUC after training: 0.8333333333333333
User 97511 does not improve AUC. Reverting changes.
Training on augumented user 131270 21/50 current_auc = 0.8333333333333333
User 131270 AUC after training: 0.6666666666666666
User 131270 does not improve AUC. Reverting changes.
Training on augumented user 13407 22/50 current_auc = 0.8333333333333333
User 13407 AUC after training: 0.8333333333333333
User 13407 does not improve AUC. Reverting changes.
Training on augumented user 41689 23/50 current_auc = 0.8333333333333333
User 41689 AUC after training: 0.8333333333333333
User 41689 does not improve AUC. Reverting changes.
Training on augumented user 38793 24/50 current_auc = 0.8333333333333333
User 38793 AUC after training: 0.8333333333333333
User 38793 does not improve AUC. Reverting changes.
Training on augumented user 91582 25/50 current_auc = 0.8333333333333333
User 91582 AUC after training: 0.8333333333333333
User 91582 does not improve AUC. Reverting changes.
Training on augumented user 136704 26/50 current_auc = 0.8333333333333333
User 136704 AUC after training: 0.8333333333333333
User 136704 does not improve AUC. Reverting changes.
Training on augumented user 53975 27/50 current_auc = 0.8333333333333333
User 53975 AUC after training: 0.8333333333333333
User 53975 does not improve AUC. Reverting changes.
Training on augumented user 124411 28/50 current_auc = 0.8333333333333333
User 124411 AUC after training: 0.6666666666666666
User 124411 does not improve AUC. Reverting changes.
Training on augumented user 15340 29/50 current_auc = 0.8333333333333333
User 15340 AUC after training: 0.8333333333333333
User 15340 does not improve AUC. Reverting changes.
Training on augumented user 79250 30/50 current_auc = 0.8333333333333333
User 79250 AUC after training: 0.6666666666666666
User 79250 does not improve AUC. Reverting changes.
Training on augumented user 34900 31/50 current_auc = 0.8333333333333333
User 34900 AUC after training: 0.8333333333333333
User 34900 does not improve AUC. Reverting changes.
Training on augumented user 32756 32/50 current_auc = 0.8333333333333333
User 32756 AUC after training: 0.8333333333333333
User 32756 does not improve AUC. Reverting changes.
Training on augumented user 80350 33/50 current_auc = 0.8333333333333333
User 80350 AUC after training: 0.8333333333333333
User 80350 does not improve AUC. Reverting changes.
Training on augumented user 43761 34/50 current_auc = 0.8333333333333333
User 43761 AUC after training: 0.8333333333333333
User 43761 does not improve AUC. Reverting changes.
Training on augumented user 4167 35/50 current_auc = 0.8333333333333333
User 4167 AUC after training: 0.8333333333333333
User 4167 does not improve AUC. Reverting changes.
Training on augumented user 95439 36/50 current_auc = 0.8333333333333333
User 95439 AUC after training: 0.6666666666666666
User 95439 does not improve AUC. Reverting changes.
Training on augumented user 95606 37/50 current_auc = 0.8333333333333333
User 95606 AUC after training: 0.8333333333333333
User 95606 does not improve AUC. Reverting changes.
Training on augumented user 13112 38/50 current_auc = 0.8333333333333333
User 13112 AUC after training: 0.8333333333333333
User 13112 does not improve AUC. Reverting changes.
Training on augumented user 3836 39/50 current_auc = 0.8333333333333333
User 3836 AUC after training: 0.8333333333333333
User 3836 does not improve AUC. Reverting changes.
Training on augumented user 126634 40/50 current_auc = 0.8333333333333333
User 126634 AUC after training: 0.8333333333333333
User 126634 does not improve AUC. Reverting changes.
Training on augumented user 67901 41/50 current_auc = 0.8333333333333333
User 67901 AUC after training: 0.8333333333333333
User 67901 does not improve AUC. Reverting changes.
Training on augumented user 86911 42/50 current_auc = 0.8333333333333333
User 86911 AUC after training: 0.8333333333333333
User 86911 does not improve AUC. Reverting changes.
Training on augumented user 35503 43/50 current_auc = 0.8333333333333333
User 35503 AUC after training: 0.8333333333333333
User 35503 does not improve AUC. Reverting changes.
Training on augumented user 121364 44/50 current_auc = 0.8333333333333333
User 121364 AUC after training: 0.8333333333333333
User 121364 does not improve AUC. Reverting changes.
Training on augumented user 74514 45/50 current_auc = 0.8333333333333333
User 74514 AUC after training: 0.8333333333333333
User 74514 does not improve AUC. Reverting changes.
Training on augumented user 46044 46/50 current_auc = 0.8333333333333333
User 46044 AUC after training: 0.8333333333333333
User 46044 does not improve AUC. Reverting changes.
Training on augumented user 92233 47/50 current_auc = 0.8333333333333333
User 92233 AUC after training: 0.8333333333333333
User 92233 does not improve AUC. Reverting changes.
Training on augumented user 59666 48/50 current_auc = 0.8333333333333333
User 59666 AUC after training: 0.8333333333333333
User 59666 does not improve AUC. Reverting changes.
Training on augumented user 125824 49/50 current_auc = 0.8333333333333333
User 125824 AUC after training: 0.8333333333333333
User 125824 does not improve AUC. Reverting changes.
[2024-12-02 19:05:28.708644] start test user 3759 160/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:05:29.289355] start test user 3759 160/568 recall augumented users by random, augumented_users = [72546, 137395, 19539, 88048, 94005, 64167, 130571, 74232, 64360, 21029, 103459, 57452, 69824, 7364, 131832, 7003, 25785, 39174, 120619, 39017, 110956, 45033, 72284, 9774, 22878, 44550, 52315, 87181, 151, 66342, 2605, 105991, 136891, 67285, 107832, 17805, 63381, 118908, 102451, 19360, 42970, 122349, 87598, 119894, 74895, 121993, 99813, 132129, 25975, 53119]
[2024-12-02 19:05:29.303708] user = 3759 Cloud 160/568
[2024-12-02 19:05:29.321133] user = 3759 Local 160/568
[2024-12-02 19:05:29.342133] user = 3759 Local+ 160/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:05:31.513920] user = 3759 MPDA- 160/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.3866666666666666
Training on augumented user 72546 0/50 current_auc = 0.3866666666666666
User 72546 AUC after training: 0.39999999999999997
User 72546 improves AUC. Keeping the model.
Training on augumented user 137395 1/50 current_auc = 0.39999999999999997
User 137395 AUC after training: 0.39999999999999997
User 137395 does not improve AUC. Reverting changes.
Training on augumented user 19539 2/50 current_auc = 0.39999999999999997
User 19539 AUC after training: 0.39999999999999997
User 19539 does not improve AUC. Reverting changes.
Training on augumented user 88048 3/50 current_auc = 0.39999999999999997
User 88048 AUC after training: 0.3866666666666666
User 88048 does not improve AUC. Reverting changes.
Training on augumented user 94005 4/50 current_auc = 0.39999999999999997
User 94005 AUC after training: 0.39999999999999997
User 94005 does not improve AUC. Reverting changes.
Training on augumented user 64167 5/50 current_auc = 0.39999999999999997
User 64167 AUC after training: 0.39999999999999997
User 64167 does not improve AUC. Reverting changes.
Training on augumented user 130571 6/50 current_auc = 0.39999999999999997
User 130571 AUC after training: 0.39999999999999997
User 130571 does not improve AUC. Reverting changes.
Training on augumented user 74232 7/50 current_auc = 0.39999999999999997
User 74232 AUC after training: 0.3866666666666666
User 74232 does not improve AUC. Reverting changes.
Training on augumented user 64360 8/50 current_auc = 0.39999999999999997
User 64360 AUC after training: 0.39999999999999997
User 64360 does not improve AUC. Reverting changes.
Training on augumented user 21029 9/50 current_auc = 0.39999999999999997
User 21029 AUC after training: 0.39999999999999997
User 21029 does not improve AUC. Reverting changes.
Training on augumented user 103459 10/50 current_auc = 0.39999999999999997
User 103459 AUC after training: 0.39999999999999997
User 103459 does not improve AUC. Reverting changes.
Training on augumented user 57452 11/50 current_auc = 0.39999999999999997
User 57452 AUC after training: 0.39999999999999997
User 57452 does not improve AUC. Reverting changes.
Training on augumented user 69824 12/50 current_auc = 0.39999999999999997
User 69824 AUC after training: 0.39999999999999997
User 69824 does not improve AUC. Reverting changes.
Training on augumented user 7364 13/50 current_auc = 0.39999999999999997
User 7364 AUC after training: 0.39999999999999997
User 7364 does not improve AUC. Reverting changes.
Training on augumented user 131832 14/50 current_auc = 0.39999999999999997
User 131832 AUC after training: 0.39999999999999997
User 131832 does not improve AUC. Reverting changes.
Training on augumented user 7003 15/50 current_auc = 0.39999999999999997
User 7003 AUC after training: 0.39999999999999997
User 7003 does not improve AUC. Reverting changes.
Training on augumented user 25785 16/50 current_auc = 0.39999999999999997
User 25785 AUC after training: 0.3733333333333333
User 25785 does not improve AUC. Reverting changes.
Training on augumented user 39174 17/50 current_auc = 0.39999999999999997
User 39174 AUC after training: 0.39999999999999997
User 39174 does not improve AUC. Reverting changes.
Training on augumented user 120619 18/50 current_auc = 0.39999999999999997
User 120619 AUC after training: 0.39999999999999997
User 120619 does not improve AUC. Reverting changes.
Training on augumented user 39017 19/50 current_auc = 0.39999999999999997
User 39017 AUC after training: 0.3866666666666666
User 39017 does not improve AUC. Reverting changes.
Training on augumented user 110956 20/50 current_auc = 0.39999999999999997
User 110956 AUC after training: 0.39999999999999997
User 110956 does not improve AUC. Reverting changes.
Training on augumented user 45033 21/50 current_auc = 0.39999999999999997
User 45033 AUC after training: 0.39999999999999997
User 45033 does not improve AUC. Reverting changes.
Training on augumented user 72284 22/50 current_auc = 0.39999999999999997
User 72284 AUC after training: 0.3733333333333333
User 72284 does not improve AUC. Reverting changes.
Training on augumented user 9774 23/50 current_auc = 0.39999999999999997
User 9774 AUC after training: 0.39999999999999997
User 9774 does not improve AUC. Reverting changes.
Training on augumented user 22878 24/50 current_auc = 0.39999999999999997
User 22878 AUC after training: 0.39999999999999997
User 22878 does not improve AUC. Reverting changes.
Training on augumented user 44550 25/50 current_auc = 0.39999999999999997
User 44550 AUC after training: 0.3866666666666666
User 44550 does not improve AUC. Reverting changes.
Training on augumented user 52315 26/50 current_auc = 0.39999999999999997
User 52315 AUC after training: 0.3866666666666666
User 52315 does not improve AUC. Reverting changes.
Training on augumented user 87181 27/50 current_auc = 0.39999999999999997
User 87181 AUC after training: 0.39999999999999997
User 87181 does not improve AUC. Reverting changes.
Training on augumented user 151 28/50 current_auc = 0.39999999999999997
User 151 AUC after training: 0.39999999999999997
User 151 does not improve AUC. Reverting changes.
Training on augumented user 66342 29/50 current_auc = 0.39999999999999997
User 66342 AUC after training: 0.3866666666666666
User 66342 does not improve AUC. Reverting changes.
Training on augumented user 2605 30/50 current_auc = 0.39999999999999997
User 2605 AUC after training: 0.41333333333333333
User 2605 improves AUC. Keeping the model.
Training on augumented user 105991 31/50 current_auc = 0.41333333333333333
User 105991 AUC after training: 0.39999999999999997
User 105991 does not improve AUC. Reverting changes.
Training on augumented user 136891 32/50 current_auc = 0.41333333333333333
User 136891 AUC after training: 0.39999999999999997
User 136891 does not improve AUC. Reverting changes.
Training on augumented user 67285 33/50 current_auc = 0.41333333333333333
User 67285 AUC after training: 0.39999999999999997
User 67285 does not improve AUC. Reverting changes.
Training on augumented user 107832 34/50 current_auc = 0.41333333333333333
User 107832 AUC after training: 0.39999999999999997
User 107832 does not improve AUC. Reverting changes.
Training on augumented user 17805 35/50 current_auc = 0.41333333333333333
User 17805 AUC after training: 0.42666666666666664
User 17805 improves AUC. Keeping the model.
Training on augumented user 63381 36/50 current_auc = 0.42666666666666664
User 63381 AUC after training: 0.41333333333333333
User 63381 does not improve AUC. Reverting changes.
Training on augumented user 118908 37/50 current_auc = 0.42666666666666664
User 118908 AUC after training: 0.4
User 118908 does not improve AUC. Reverting changes.
Training on augumented user 102451 38/50 current_auc = 0.42666666666666664
User 102451 AUC after training: 0.39999999999999997
User 102451 does not improve AUC. Reverting changes.
Training on augumented user 19360 39/50 current_auc = 0.42666666666666664
User 19360 AUC after training: 0.42666666666666664
User 19360 does not improve AUC. Reverting changes.
Training on augumented user 42970 40/50 current_auc = 0.42666666666666664
User 42970 AUC after training: 0.42666666666666664
User 42970 does not improve AUC. Reverting changes.
Training on augumented user 122349 41/50 current_auc = 0.42666666666666664
User 122349 AUC after training: 0.41333333333333333
User 122349 does not improve AUC. Reverting changes.
Training on augumented user 87598 42/50 current_auc = 0.42666666666666664
User 87598 AUC after training: 0.42666666666666664
User 87598 does not improve AUC. Reverting changes.
Training on augumented user 119894 43/50 current_auc = 0.42666666666666664
User 119894 AUC after training: 0.41333333333333333
User 119894 does not improve AUC. Reverting changes.
Training on augumented user 74895 44/50 current_auc = 0.42666666666666664
User 74895 AUC after training: 0.42666666666666664
User 74895 does not improve AUC. Reverting changes.
Training on augumented user 121993 45/50 current_auc = 0.42666666666666664
User 121993 AUC after training: 0.41333333333333333
User 121993 does not improve AUC. Reverting changes.
Training on augumented user 99813 46/50 current_auc = 0.42666666666666664
User 99813 AUC after training: 0.42666666666666664
User 99813 does not improve AUC. Reverting changes.
Training on augumented user 132129 47/50 current_auc = 0.42666666666666664
User 132129 AUC after training: 0.39999999999999997
User 132129 does not improve AUC. Reverting changes.
Training on augumented user 25975 48/50 current_auc = 0.42666666666666664
User 25975 AUC after training: 0.41333333333333333
User 25975 does not improve AUC. Reverting changes.
Training on augumented user 53119 49/50 current_auc = 0.42666666666666664
User 53119 AUC after training: 0.41333333333333333
User 53119 does not improve AUC. Reverting changes.
[2024-12-02 19:05:56.100602] start test user 3797 161/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:05:56.537351] start test user 3797 161/568 recall augumented users by random, augumented_users = [6328, 33069, 11573, 6589, 52360, 53241, 26015, 24613, 116029, 12747, 108364, 6903, 123028, 75141, 110626, 38860, 121731, 8230, 113274, 2553, 66, 54850, 95890, 73774, 38395, 41760, 48510, 99038, 23430, 32623, 22247, 132823, 84459, 46971, 112376, 9707, 93571, 65870, 35114, 57917, 63238, 25286, 68151, 125893, 3865, 93938, 90727, 79537, 41482, 22653]
[2024-12-02 19:05:56.555348] user = 3797 Cloud 161/568
[2024-12-02 19:05:56.637445] user = 3797 Local 161/568
[2024-12-02 19:05:56.891662] user = 3797 Local+ 161/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:05:59.593295] user = 3797 MPDA- 161/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.533005374479889
Training on augumented user 6328 0/50 current_auc = 0.533005374479889
User 6328 AUC after training: 0.5325286061026352
User 6328 does not improve AUC. Reverting changes.
Training on augumented user 33069 1/50 current_auc = 0.533005374479889
User 33069 AUC after training: 0.5336013349514563
User 33069 improves AUC. Keeping the model.
Training on augumented user 11573 2/50 current_auc = 0.5336013349514563
User 11573 AUC after training: 0.5337096914008321
User 11573 improves AUC. Keeping the model.
Training on augumented user 6589 3/50 current_auc = 0.5337096914008321
User 6589 AUC after training: 0.5335254854368933
User 6589 does not improve AUC. Reverting changes.
Training on augumented user 52360 4/50 current_auc = 0.5337096914008321
User 52360 AUC after training: 0.5334713072122054
User 52360 does not improve AUC. Reverting changes.
Training on augumented user 53241 5/50 current_auc = 0.5337096914008321
User 53241 AUC after training: 0.533167909153953
User 53241 does not improve AUC. Reverting changes.
Training on augumented user 26015 6/50 current_auc = 0.5337096914008321
User 26015 AUC after training: 0.5335038141470181
User 26015 does not improve AUC. Reverting changes.
Training on augumented user 24613 7/50 current_auc = 0.5337096914008321
User 24613 AUC after training: 0.5340347607489598
User 24613 improves AUC. Keeping the model.
Training on augumented user 116029 8/50 current_auc = 0.5340347607489598
User 116029 AUC after training: 0.5339805825242718
User 116029 does not improve AUC. Reverting changes.
Training on augumented user 12747 9/50 current_auc = 0.5340347607489598
User 12747 AUC after training: 0.5334279646324549
User 12747 does not improve AUC. Reverting changes.
Training on augumented user 108364 10/50 current_auc = 0.5340347607489598
User 108364 AUC after training: 0.5332545943134535
User 108364 does not improve AUC. Reverting changes.
Training on augumented user 6903 11/50 current_auc = 0.5340347607489598
User 6903 AUC after training: 0.5340239251040222
User 6903 does not improve AUC. Reverting changes.
Training on augumented user 123028 12/50 current_auc = 0.5340347607489598
User 123028 AUC after training: 0.5339589112343968
User 123028 does not improve AUC. Reverting changes.
Training on augumented user 75141 13/50 current_auc = 0.5340347607489598
User 75141 AUC after training: 0.5356167649098474
User 75141 improves AUC. Keeping the model.
Training on augumented user 110626 14/50 current_auc = 0.5356167649098474
User 110626 AUC after training: 0.5355084084604715
User 110626 does not improve AUC. Reverting changes.
Training on augumented user 38860 15/50 current_auc = 0.5356167649098474
User 38860 AUC after training: 0.5342948162274619
User 38860 does not improve AUC. Reverting changes.
Training on augumented user 121731 16/50 current_auc = 0.5356167649098474
User 121731 AUC after training: 0.5352591886269071
User 121731 does not improve AUC. Reverting changes.
Training on augumented user 8230 17/50 current_auc = 0.5356167649098474
User 8230 AUC after training: 0.5349774618585298
User 8230 does not improve AUC. Reverting changes.
Training on augumented user 113274 18/50 current_auc = 0.5356167649098474
User 113274 AUC after training: 0.5350641470180305
User 113274 does not improve AUC. Reverting changes.
Training on augumented user 2553 19/50 current_auc = 0.5356167649098474
User 2553 AUC after training: 0.5351399965325936
User 2553 does not improve AUC. Reverting changes.
Training on augumented user 66 20/50 current_auc = 0.5356167649098474
User 66 AUC after training: 0.5355842579750347
User 66 does not improve AUC. Reverting changes.
Training on augumented user 54850 21/50 current_auc = 0.5356167649098474
User 54850 AUC after training: 0.5352916955617197
User 54850 does not improve AUC. Reverting changes.
Training on augumented user 95890 22/50 current_auc = 0.5356167649098474
User 95890 AUC after training: 0.5356059292649099
User 95890 does not improve AUC. Reverting changes.
Training on augumented user 73774 23/50 current_auc = 0.5356167649098474
User 73774 AUC after training: 0.5356492718446602
User 73774 improves AUC. Keeping the model.
Training on augumented user 38395 24/50 current_auc = 0.5356492718446602
User 38395 AUC after training: 0.5353458737864077
User 38395 does not improve AUC. Reverting changes.
Training on augumented user 41760 25/50 current_auc = 0.5356492718446602
User 41760 AUC after training: 0.5359743411927879
User 41760 improves AUC. Keeping the model.
Training on augumented user 48510 26/50 current_auc = 0.5359743411927879
User 48510 AUC after training: 0.5363535887656034
User 48510 improves AUC. Keeping the model.
Training on augumented user 99038 27/50 current_auc = 0.5363535887656034
User 99038 AUC after training: 0.5363319174757282
User 99038 does not improve AUC. Reverting changes.
Training on augumented user 23430 28/50 current_auc = 0.5363535887656034
User 23430 AUC after training: 0.5363210818307905
User 23430 does not improve AUC. Reverting changes.
Training on augumented user 32623 29/50 current_auc = 0.5363535887656034
User 32623 AUC after training: 0.5360068481276006
User 32623 does not improve AUC. Reverting changes.
Training on augumented user 22247 30/50 current_auc = 0.5363535887656034
User 22247 AUC after training: 0.5362777392510403
User 22247 does not improve AUC. Reverting changes.
Training on augumented user 132823 31/50 current_auc = 0.5363535887656034
User 132823 AUC after training: 0.5362127253814147
User 132823 does not improve AUC. Reverting changes.
Training on augumented user 84459 32/50 current_auc = 0.5363535887656034
User 84459 AUC after training: 0.5361477115117892
User 84459 does not improve AUC. Reverting changes.
Training on augumented user 46971 33/50 current_auc = 0.5363535887656034
User 46971 AUC after training: 0.5362777392510403
User 46971 does not improve AUC. Reverting changes.
Training on augumented user 112376 34/50 current_auc = 0.5363535887656034
User 112376 AUC after training: 0.5357792995839112
User 112376 does not improve AUC. Reverting changes.
Training on augumented user 9707 35/50 current_auc = 0.5363535887656034
User 9707 AUC after training: 0.5359960124826629
User 9707 does not improve AUC. Reverting changes.
Training on augumented user 93571 36/50 current_auc = 0.5363535887656034
User 93571 AUC after training: 0.5366028085991679
User 93571 improves AUC. Keeping the model.
Training on augumented user 65870 37/50 current_auc = 0.5366028085991679
User 65870 AUC after training: 0.5367978502080444
User 65870 improves AUC. Keeping the model.
Training on augumented user 35114 38/50 current_auc = 0.5367978502080444
User 35114 AUC after training: 0.5366678224687933
User 35114 does not improve AUC. Reverting changes.
Training on augumented user 57917 39/50 current_auc = 0.5367978502080444
User 57917 AUC after training: 0.5364511095700416
User 57917 does not improve AUC. Reverting changes.
Training on augumented user 63238 40/50 current_auc = 0.5367978502080444
User 63238 AUC after training: 0.5365919729542302
User 63238 does not improve AUC. Reverting changes.
Training on augumented user 25286 41/50 current_auc = 0.5367978502080444
User 25286 AUC after training: 0.5349774618585299
User 25286 does not improve AUC. Reverting changes.
Training on augumented user 68151 42/50 current_auc = 0.5367978502080444
User 68151 AUC after training: 0.5366569868238558
User 68151 does not improve AUC. Reverting changes.
Training on augumented user 125893 43/50 current_auc = 0.5367978502080444
User 125893 AUC after training: 0.5366678224687934
User 125893 does not improve AUC. Reverting changes.
Training on augumented user 3865 44/50 current_auc = 0.5367978502080444
User 3865 AUC after training: 0.5366786581137309
User 3865 does not improve AUC. Reverting changes.
Training on augumented user 93938 45/50 current_auc = 0.5367978502080444
User 93938 AUC after training: 0.5368411927877947
User 93938 improves AUC. Keeping the model.
Training on augumented user 90727 46/50 current_auc = 0.5368411927877947
User 90727 AUC after training: 0.5367978502080444
User 90727 does not improve AUC. Reverting changes.
Training on augumented user 79537 47/50 current_auc = 0.5368411927877947
User 79537 AUC after training: 0.5371012482662967
User 79537 improves AUC. Keeping the model.
Training on augumented user 41482 48/50 current_auc = 0.5371012482662967
User 41482 AUC after training: 0.5363427531206657
User 41482 does not improve AUC. Reverting changes.
Training on augumented user 22653 49/50 current_auc = 0.5371012482662967
User 22653 AUC after training: 0.5369820561719834
User 22653 does not improve AUC. Reverting changes.
[2024-12-02 19:06:33.102524] start test user 3892 162/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:06:33.887167] start test user 3892 162/568 recall augumented users by random, augumented_users = [44437, 96577, 125463, 24631, 115194, 14486, 65990, 90437, 2136, 47000, 138137, 55941, 87266, 10766, 78525, 86155, 22000, 83807, 94329, 49104, 40113, 46652, 37053, 69174, 132889, 127071, 123728, 35052, 3945, 100458, 71066, 1743, 24677, 115519, 60839, 94169, 96946, 72695, 54279, 35648, 64580, 32931, 2545, 71018, 89352, 4450, 82158, 127886, 132983, 5140]
[2024-12-02 19:06:33.902825] user = 3892 Cloud 162/568
[2024-12-02 19:06:33.917152] user = 3892 Local 162/568
[2024-12-02 19:06:33.959030] user = 3892 Local+ 162/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:06:36.291261] user = 3892 MPDA- 162/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6200716845878137
Training on augumented user 44437 0/50 current_auc = 0.6200716845878137
User 44437 AUC after training: 0.6200716845878137
User 44437 does not improve AUC. Reverting changes.
Training on augumented user 96577 1/50 current_auc = 0.6200716845878137
User 96577 AUC after training: 0.6164874551971328
User 96577 does not improve AUC. Reverting changes.
Training on augumented user 125463 2/50 current_auc = 0.6200716845878137
User 125463 AUC after training: 0.6200716845878137
User 125463 does not improve AUC. Reverting changes.
Training on augumented user 24631 3/50 current_auc = 0.6200716845878137
User 24631 AUC after training: 0.6200716845878137
User 24631 does not improve AUC. Reverting changes.
Training on augumented user 115194 4/50 current_auc = 0.6200716845878137
User 115194 AUC after training: 0.6218637992831542
User 115194 improves AUC. Keeping the model.
Training on augumented user 14486 5/50 current_auc = 0.6218637992831542
User 14486 AUC after training: 0.6182795698924732
User 14486 does not improve AUC. Reverting changes.
Training on augumented user 65990 6/50 current_auc = 0.6218637992831542
User 65990 AUC after training: 0.6218637992831542
User 65990 does not improve AUC. Reverting changes.
Training on augumented user 90437 7/50 current_auc = 0.6218637992831542
User 90437 AUC after training: 0.6164874551971327
User 90437 does not improve AUC. Reverting changes.
Training on augumented user 2136 8/50 current_auc = 0.6218637992831542
User 2136 AUC after training: 0.6218637992831542
User 2136 does not improve AUC. Reverting changes.
Training on augumented user 47000 9/50 current_auc = 0.6218637992831542
User 47000 AUC after training: 0.6182795698924731
User 47000 does not improve AUC. Reverting changes.
Training on augumented user 138137 10/50 current_auc = 0.6218637992831542
User 138137 AUC after training: 0.6129032258064517
User 138137 does not improve AUC. Reverting changes.
Training on augumented user 55941 11/50 current_auc = 0.6218637992831542
User 55941 AUC after training: 0.6200716845878137
User 55941 does not improve AUC. Reverting changes.
Training on augumented user 87266 12/50 current_auc = 0.6218637992831542
User 87266 AUC after training: 0.6146953405017922
User 87266 does not improve AUC. Reverting changes.
Training on augumented user 10766 13/50 current_auc = 0.6218637992831542
User 10766 AUC after training: 0.6200716845878137
User 10766 does not improve AUC. Reverting changes.
Training on augumented user 78525 14/50 current_auc = 0.6218637992831542
User 78525 AUC after training: 0.6200716845878137
User 78525 does not improve AUC. Reverting changes.
Training on augumented user 86155 15/50 current_auc = 0.6218637992831542
User 86155 AUC after training: 0.6218637992831542
User 86155 does not improve AUC. Reverting changes.
Training on augumented user 22000 16/50 current_auc = 0.6218637992831542
User 22000 AUC after training: 0.6146953405017922
User 22000 does not improve AUC. Reverting changes.
Training on augumented user 83807 17/50 current_auc = 0.6218637992831542
User 83807 AUC after training: 0.6218637992831542
User 83807 does not improve AUC. Reverting changes.
Training on augumented user 94329 18/50 current_auc = 0.6218637992831542
User 94329 AUC after training: 0.6200716845878137
User 94329 does not improve AUC. Reverting changes.
Training on augumented user 49104 19/50 current_auc = 0.6218637992831542
User 49104 AUC after training: 0.6200716845878137
User 49104 does not improve AUC. Reverting changes.
Training on augumented user 40113 20/50 current_auc = 0.6218637992831542
User 40113 AUC after training: 0.6200716845878137
User 40113 does not improve AUC. Reverting changes.
Training on augumented user 46652 21/50 current_auc = 0.6218637992831542
User 46652 AUC after training: 0.6218637992831542
User 46652 does not improve AUC. Reverting changes.
Training on augumented user 37053 22/50 current_auc = 0.6218637992831542
User 37053 AUC after training: 0.6129032258064516
User 37053 does not improve AUC. Reverting changes.
Training on augumented user 69174 23/50 current_auc = 0.6218637992831542
User 69174 AUC after training: 0.6164874551971327
User 69174 does not improve AUC. Reverting changes.
Training on augumented user 132889 24/50 current_auc = 0.6218637992831542
User 132889 AUC after training: 0.6164874551971328
User 132889 does not improve AUC. Reverting changes.
Training on augumented user 127071 25/50 current_auc = 0.6218637992831542
User 127071 AUC after training: 0.6164874551971327
User 127071 does not improve AUC. Reverting changes.
Training on augumented user 123728 26/50 current_auc = 0.6218637992831542
User 123728 AUC after training: 0.6182795698924732
User 123728 does not improve AUC. Reverting changes.
Training on augumented user 35052 27/50 current_auc = 0.6218637992831542
User 35052 AUC after training: 0.6164874551971328
User 35052 does not improve AUC. Reverting changes.
Training on augumented user 3945 28/50 current_auc = 0.6218637992831542
User 3945 AUC after training: 0.6218637992831542
User 3945 does not improve AUC. Reverting changes.
Training on augumented user 100458 29/50 current_auc = 0.6218637992831542
User 100458 AUC after training: 0.6164874551971328
User 100458 does not improve AUC. Reverting changes.
Training on augumented user 71066 30/50 current_auc = 0.6218637992831542
User 71066 AUC after training: 0.6200716845878137
User 71066 does not improve AUC. Reverting changes.
Training on augumented user 1743 31/50 current_auc = 0.6218637992831542
User 1743 AUC after training: 0.6182795698924732
User 1743 does not improve AUC. Reverting changes.
Training on augumented user 24677 32/50 current_auc = 0.6218637992831542
User 24677 AUC after training: 0.6218637992831542
User 24677 does not improve AUC. Reverting changes.
Training on augumented user 115519 33/50 current_auc = 0.6218637992831542
User 115519 AUC after training: 0.6200716845878137
User 115519 does not improve AUC. Reverting changes.
Training on augumented user 60839 34/50 current_auc = 0.6218637992831542
User 60839 AUC after training: 0.6200716845878137
User 60839 does not improve AUC. Reverting changes.
Training on augumented user 94169 35/50 current_auc = 0.6218637992831542
User 94169 AUC after training: 0.6182795698924732
User 94169 does not improve AUC. Reverting changes.
Training on augumented user 96946 36/50 current_auc = 0.6218637992831542
User 96946 AUC after training: 0.6218637992831542
User 96946 does not improve AUC. Reverting changes.
Training on augumented user 72695 37/50 current_auc = 0.6218637992831542
User 72695 AUC after training: 0.6218637992831542
User 72695 does not improve AUC. Reverting changes.
Training on augumented user 54279 38/50 current_auc = 0.6218637992831542
User 54279 AUC after training: 0.6200716845878137
User 54279 does not improve AUC. Reverting changes.
Training on augumented user 35648 39/50 current_auc = 0.6218637992831542
User 35648 AUC after training: 0.6236559139784947
User 35648 improves AUC. Keeping the model.
Training on augumented user 64580 40/50 current_auc = 0.6236559139784947
User 64580 AUC after training: 0.6218637992831542
User 64580 does not improve AUC. Reverting changes.
Training on augumented user 32931 41/50 current_auc = 0.6236559139784947
User 32931 AUC after training: 0.6236559139784947
User 32931 does not improve AUC. Reverting changes.
Training on augumented user 2545 42/50 current_auc = 0.6236559139784947
User 2545 AUC after training: 0.6236559139784947
User 2545 does not improve AUC. Reverting changes.
Training on augumented user 71018 43/50 current_auc = 0.6236559139784947
User 71018 AUC after training: 0.6254480286738352
User 71018 improves AUC. Keeping the model.
Training on augumented user 89352 44/50 current_auc = 0.6254480286738352
User 89352 AUC after training: 0.6254480286738352
User 89352 does not improve AUC. Reverting changes.
Training on augumented user 4450 45/50 current_auc = 0.6254480286738352
User 4450 AUC after training: 0.6254480286738352
User 4450 does not improve AUC. Reverting changes.
Training on augumented user 82158 46/50 current_auc = 0.6254480286738352
User 82158 AUC after training: 0.6254480286738352
User 82158 does not improve AUC. Reverting changes.
Training on augumented user 127886 47/50 current_auc = 0.6254480286738352
User 127886 AUC after training: 0.6254480286738352
User 127886 does not improve AUC. Reverting changes.
Training on augumented user 132983 48/50 current_auc = 0.6254480286738352
User 132983 AUC after training: 0.6254480286738352
User 132983 does not improve AUC. Reverting changes.
Training on augumented user 5140 49/50 current_auc = 0.6254480286738352
User 5140 AUC after training: 0.6254480286738352
User 5140 does not improve AUC. Reverting changes.
[2024-12-02 19:07:01.233335] start test user 3907 163/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:07:01.718656] start test user 3907 163/568 recall augumented users by random, augumented_users = [137314, 54786, 135263, 128417, 41055, 102544, 58811, 46354, 52016, 41611, 54021, 107858, 88975, 42326, 59596, 96966, 7567, 73665, 10273, 67840, 21834, 47410, 134643, 63951, 21939, 2543, 93052, 103195, 6391, 58065, 45196, 98097, 30748, 33590, 43125, 136024, 79151, 69329, 109192, 95555, 54405, 12726, 80260, 68643, 17090, 76602, 51947, 126917, 12425, 34959]
[2024-12-02 19:07:01.737942] user = 3907 Cloud 163/568
[2024-12-02 19:07:01.816169] user = 3907 Local 163/568
[2024-12-02 19:07:02.323491] user = 3907 Local+ 163/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:07:05.333792] user = 3907 MPDA- 163/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6384187340598192
Training on augumented user 137314 0/50 current_auc = 0.6384187340598192
User 137314 AUC after training: 0.6386042198006029
User 137314 improves AUC. Keeping the model.
Training on augumented user 54786 1/50 current_auc = 0.6386042198006029
User 54786 AUC after training: 0.6382912126130305
User 54786 does not improve AUC. Reverting changes.
Training on augumented user 135263 2/50 current_auc = 0.6386042198006029
User 135263 AUC after training: 0.6385114769302109
User 135263 does not improve AUC. Reverting changes.
Training on augumented user 128417 3/50 current_auc = 0.6386042198006029
User 128417 AUC after training: 0.6384071412010202
User 128417 does not improve AUC. Reverting changes.
Training on augumented user 41055 4/50 current_auc = 0.6386042198006029
User 41055 AUC after training: 0.6384303269186181
User 41055 does not improve AUC. Reverting changes.
Training on augumented user 102544 5/50 current_auc = 0.6386042198006029
User 102544 AUC after training: 0.6378159054022721
User 102544 does not improve AUC. Reverting changes.
Training on augumented user 58811 6/50 current_auc = 0.6386042198006029
User 58811 AUC after training: 0.6384535126362161
User 58811 does not improve AUC. Reverting changes.
Training on augumented user 46354 7/50 current_auc = 0.6386042198006029
User 46354 AUC after training: 0.6386274055182007
User 46354 improves AUC. Keeping the model.
Training on augumented user 52016 8/50 current_auc = 0.6386274055182007
User 52016 AUC after training: 0.638488291212613
User 52016 does not improve AUC. Reverting changes.
Training on augumented user 41611 9/50 current_auc = 0.6386274055182007
User 41611 AUC after training: 0.6387201483885926
User 41611 improves AUC. Keeping the model.
Training on augumented user 54021 10/50 current_auc = 0.6387201483885926
User 54021 AUC after training: 0.6388824484117783
User 54021 improves AUC. Keeping the model.
Training on augumented user 107858 11/50 current_auc = 0.6388824484117783
User 107858 AUC after training: 0.6389635984233712
User 107858 improves AUC. Keeping the model.
Training on augumented user 88975 12/50 current_auc = 0.6389635984233712
User 88975 AUC after training: 0.6387897055413865
User 88975 does not improve AUC. Reverting changes.
Training on augumented user 42326 13/50 current_auc = 0.6389635984233712
User 42326 AUC after training: 0.639067934152562
User 42326 improves AUC. Keeping the model.
Training on augumented user 59596 14/50 current_auc = 0.639067934152562
User 59596 AUC after training: 0.6389288198469742
User 59596 does not improve AUC. Reverting changes.
Training on augumented user 96966 15/50 current_auc = 0.639067934152562
User 96966 AUC after training: 0.6392186413169487
User 96966 improves AUC. Keeping the model.
Training on augumented user 7567 16/50 current_auc = 0.6392186413169487
User 7567 AUC after training: 0.6398446556920937
User 7567 improves AUC. Keeping the model.
Training on augumented user 73665 17/50 current_auc = 0.6398446556920937
User 73665 AUC after training: 0.6402504057500579
User 73665 improves AUC. Keeping the model.
Training on augumented user 10273 18/50 current_auc = 0.6402504057500579
User 10273 AUC after training: 0.6401112914444701
User 10273 does not improve AUC. Reverting changes.
Training on augumented user 67840 19/50 current_auc = 0.6402504057500579
User 67840 AUC after training: 0.6394273127753305
User 67840 does not improve AUC. Reverting changes.
Training on augumented user 21834 20/50 current_auc = 0.6402504057500579
User 21834 AUC after training: 0.6401344771620681
User 21834 does not improve AUC. Reverting changes.
Training on augumented user 47410 21/50 current_auc = 0.6402504057500579
User 47410 AUC after training: 0.6397750985392998
User 47410 does not improve AUC. Reverting changes.
Training on augumented user 134643 22/50 current_auc = 0.6402504057500579
User 134643 AUC after training: 0.640215627173661
User 134643 does not improve AUC. Reverting changes.
Training on augumented user 63951 23/50 current_auc = 0.6402504057500579
User 63951 AUC after training: 0.6401112914444702
User 63951 does not improve AUC. Reverting changes.
Training on augumented user 21939 24/50 current_auc = 0.6402504057500579
User 21939 AUC after training: 0.640180848597264
User 21939 does not improve AUC. Reverting changes.
Training on augumented user 2543 25/50 current_auc = 0.6402504057500579
User 2543 AUC after training: 0.64079527011361
User 2543 improves AUC. Keeping the model.
Training on augumented user 93052 26/50 current_auc = 0.64079527011361
User 93052 AUC after training: 0.6405518200788314
User 93052 does not improve AUC. Reverting changes.
Training on augumented user 103195 27/50 current_auc = 0.64079527011361
User 103195 AUC after training: 0.6399953628564804
User 103195 does not improve AUC. Reverting changes.
Training on augumented user 6391 28/50 current_auc = 0.64079527011361
User 6391 AUC after training: 0.6405286343612334
User 6391 does not improve AUC. Reverting changes.
Training on augumented user 58065 29/50 current_auc = 0.64079527011361
User 58065 AUC after training: 0.6403547414792488
User 58065 does not improve AUC. Reverting changes.
Training on augumented user 45196 30/50 current_auc = 0.64079527011361
User 45196 AUC after training: 0.6407952701136099
User 45196 does not improve AUC. Reverting changes.
Training on augumented user 98097 31/50 current_auc = 0.64079527011361
User 98097 AUC after training: 0.6407720843960121
User 98097 does not improve AUC. Reverting changes.
Training on augumented user 30748 32/50 current_auc = 0.64079527011361
User 30748 AUC after training: 0.64079527011361
User 30748 does not improve AUC. Reverting changes.
Training on augumented user 33590 33/50 current_auc = 0.64079527011361
User 33590 AUC after training: 0.6404706700672386
User 33590 does not improve AUC. Reverting changes.
Training on augumented user 43125 34/50 current_auc = 0.64079527011361
User 43125 AUC after training: 0.6401112914444702
User 43125 does not improve AUC. Reverting changes.
Training on augumented user 136024 35/50 current_auc = 0.64079527011361
User 136024 AUC after training: 0.640725712960816
User 136024 does not improve AUC. Reverting changes.
Training on augumented user 79151 36/50 current_auc = 0.64079527011361
User 79151 AUC after training: 0.6410619058659865
User 79151 improves AUC. Keeping the model.
Training on augumented user 69329 37/50 current_auc = 0.6410619058659865
User 69329 AUC after training: 0.6408648272664038
User 69329 does not improve AUC. Reverting changes.
Training on augumented user 109192 38/50 current_auc = 0.6410619058659865
User 109192 AUC after training: 0.6409111987015998
User 109192 does not improve AUC. Reverting changes.
Training on augumented user 95555 39/50 current_auc = 0.6410619058659865
User 95555 AUC after training: 0.6409459772779967
User 95555 does not improve AUC. Reverting changes.
Training on augumented user 54405 40/50 current_auc = 0.6410619058659865
User 54405 AUC after training: 0.6407720843960121
User 54405 does not improve AUC. Reverting changes.
Training on augumented user 12726 41/50 current_auc = 0.6410619058659865
User 12726 AUC after training: 0.6407604915372129
User 12726 does not improve AUC. Reverting changes.
Training on augumented user 80260 42/50 current_auc = 0.6410619058659865
User 80260 AUC after training: 0.639635984233712
User 80260 does not improve AUC. Reverting changes.
Training on augumented user 68643 43/50 current_auc = 0.6410619058659865
User 68643 AUC after training: 0.6386042198006028
User 68643 does not improve AUC. Reverting changes.
Training on augumented user 17090 44/50 current_auc = 0.6410619058659865
User 17090 AUC after training: 0.6407373058196151
User 17090 does not improve AUC. Reverting changes.
Training on augumented user 76602 45/50 current_auc = 0.6410619058659865
User 76602 AUC after training: 0.6409923487131927
User 76602 does not improve AUC. Reverting changes.
Training on augumented user 51947 46/50 current_auc = 0.6410619058659865
User 51947 AUC after training: 0.640841641548806
User 51947 does not improve AUC. Reverting changes.
Training on augumented user 126917 47/50 current_auc = 0.6410619058659865
User 126917 AUC after training: 0.640841641548806
User 126917 does not improve AUC. Reverting changes.
Training on augumented user 12425 48/50 current_auc = 0.6410619058659865
User 12425 AUC after training: 0.6410734987247855
User 12425 improves AUC. Keeping the model.
Training on augumented user 34959 49/50 current_auc = 0.6410734987247855
User 34959 AUC after training: 0.6411662415951773
User 34959 improves AUC. Keeping the model.
[2024-12-02 19:07:41.996767] start test user 3915 164/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:07:42.421756] start test user 3915 164/568 recall augumented users by random, augumented_users = [114292, 33926, 41386, 30056, 32381, 89451, 41602, 17270, 64078, 35506, 51005, 49260, 106885, 71223, 3031, 39068, 10444, 103851, 84549, 93529, 131930, 51608, 76087, 39642, 47153, 10201, 94967, 119631, 93842, 55860, 118363, 34210, 69486, 66590, 68406, 105734, 135209, 21119, 98725, 54373, 136246, 34136, 115498, 82159, 135832, 79212, 86994, 89490, 126490, 87135]
[2024-12-02 19:07:42.436541] user = 3915 Cloud 164/568
[2024-12-02 19:07:42.446288] user = 3915 Local 164/568
[2024-12-02 19:07:42.492693] user = 3915 Local+ 164/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:07:44.810069] user = 3915 MPDA- 164/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5101010101010102
Training on augumented user 114292 0/50 current_auc = 0.5101010101010102
User 114292 AUC after training: 0.5151515151515151
User 114292 improves AUC. Keeping the model.
Training on augumented user 33926 1/50 current_auc = 0.5151515151515151
User 33926 AUC after training: 0.5101010101010102
User 33926 does not improve AUC. Reverting changes.
Training on augumented user 41386 2/50 current_auc = 0.5151515151515151
User 41386 AUC after training: 0.5101010101010102
User 41386 does not improve AUC. Reverting changes.
Training on augumented user 30056 3/50 current_auc = 0.5151515151515151
User 30056 AUC after training: 0.5101010101010102
User 30056 does not improve AUC. Reverting changes.
Training on augumented user 32381 4/50 current_auc = 0.5151515151515151
User 32381 AUC after training: 0.5151515151515151
User 32381 does not improve AUC. Reverting changes.
Training on augumented user 89451 5/50 current_auc = 0.5151515151515151
User 89451 AUC after training: 0.5101010101010102
User 89451 does not improve AUC. Reverting changes.
Training on augumented user 41602 6/50 current_auc = 0.5151515151515151
User 41602 AUC after training: 0.5101010101010102
User 41602 does not improve AUC. Reverting changes.
Training on augumented user 17270 7/50 current_auc = 0.5151515151515151
User 17270 AUC after training: 0.5101010101010102
User 17270 does not improve AUC. Reverting changes.
Training on augumented user 64078 8/50 current_auc = 0.5151515151515151
User 64078 AUC after training: 0.5151515151515151
User 64078 does not improve AUC. Reverting changes.
Training on augumented user 35506 9/50 current_auc = 0.5151515151515151
User 35506 AUC after training: 0.5101010101010102
User 35506 does not improve AUC. Reverting changes.
Training on augumented user 51005 10/50 current_auc = 0.5151515151515151
User 51005 AUC after training: 0.5101010101010102
User 51005 does not improve AUC. Reverting changes.
Training on augumented user 49260 11/50 current_auc = 0.5151515151515151
User 49260 AUC after training: 0.5101010101010102
User 49260 does not improve AUC. Reverting changes.
Training on augumented user 106885 12/50 current_auc = 0.5151515151515151
User 106885 AUC after training: 0.5151515151515151
User 106885 does not improve AUC. Reverting changes.
Training on augumented user 71223 13/50 current_auc = 0.5151515151515151
User 71223 AUC after training: 0.5101010101010102
User 71223 does not improve AUC. Reverting changes.
Training on augumented user 3031 14/50 current_auc = 0.5151515151515151
User 3031 AUC after training: 0.5101010101010102
User 3031 does not improve AUC. Reverting changes.
Training on augumented user 39068 15/50 current_auc = 0.5151515151515151
User 39068 AUC after training: 0.5151515151515151
User 39068 does not improve AUC. Reverting changes.
Training on augumented user 10444 16/50 current_auc = 0.5151515151515151
User 10444 AUC after training: 0.5151515151515151
User 10444 does not improve AUC. Reverting changes.
Training on augumented user 103851 17/50 current_auc = 0.5151515151515151
User 103851 AUC after training: 0.5151515151515151
User 103851 does not improve AUC. Reverting changes.
Training on augumented user 84549 18/50 current_auc = 0.5151515151515151
User 84549 AUC after training: 0.5101010101010102
User 84549 does not improve AUC. Reverting changes.
Training on augumented user 93529 19/50 current_auc = 0.5151515151515151
User 93529 AUC after training: 0.5151515151515151
User 93529 does not improve AUC. Reverting changes.
Training on augumented user 131930 20/50 current_auc = 0.5151515151515151
User 131930 AUC after training: 0.5101010101010102
User 131930 does not improve AUC. Reverting changes.
Training on augumented user 51608 21/50 current_auc = 0.5151515151515151
User 51608 AUC after training: 0.5202020202020201
User 51608 improves AUC. Keeping the model.
Training on augumented user 76087 22/50 current_auc = 0.5202020202020201
User 76087 AUC after training: 0.5151515151515151
User 76087 does not improve AUC. Reverting changes.
Training on augumented user 39642 23/50 current_auc = 0.5202020202020201
User 39642 AUC after training: 0.5151515151515151
User 39642 does not improve AUC. Reverting changes.
Training on augumented user 47153 24/50 current_auc = 0.5202020202020201
User 47153 AUC after training: 0.5151515151515151
User 47153 does not improve AUC. Reverting changes.
Training on augumented user 10201 25/50 current_auc = 0.5202020202020201
User 10201 AUC after training: 0.5202020202020201
User 10201 does not improve AUC. Reverting changes.
Training on augumented user 94967 26/50 current_auc = 0.5202020202020201
User 94967 AUC after training: 0.5101010101010102
User 94967 does not improve AUC. Reverting changes.
Training on augumented user 119631 27/50 current_auc = 0.5202020202020201
User 119631 AUC after training: 0.5202020202020201
User 119631 does not improve AUC. Reverting changes.
Training on augumented user 93842 28/50 current_auc = 0.5202020202020201
User 93842 AUC after training: 0.5151515151515151
User 93842 does not improve AUC. Reverting changes.
Training on augumented user 55860 29/50 current_auc = 0.5202020202020201
User 55860 AUC after training: 0.5151515151515151
User 55860 does not improve AUC. Reverting changes.
Training on augumented user 118363 30/50 current_auc = 0.5202020202020201
User 118363 AUC after training: 0.5202020202020201
User 118363 does not improve AUC. Reverting changes.
Training on augumented user 34210 31/50 current_auc = 0.5202020202020201
User 34210 AUC after training: 0.5151515151515151
User 34210 does not improve AUC. Reverting changes.
Training on augumented user 69486 32/50 current_auc = 0.5202020202020201
User 69486 AUC after training: 0.5202020202020201
User 69486 does not improve AUC. Reverting changes.
Training on augumented user 66590 33/50 current_auc = 0.5202020202020201
User 66590 AUC after training: 0.5151515151515151
User 66590 does not improve AUC. Reverting changes.
Training on augumented user 68406 34/50 current_auc = 0.5202020202020201
User 68406 AUC after training: 0.5151515151515151
User 68406 does not improve AUC. Reverting changes.
Training on augumented user 105734 35/50 current_auc = 0.5202020202020201
User 105734 AUC after training: 0.5151515151515151
User 105734 does not improve AUC. Reverting changes.
Training on augumented user 135209 36/50 current_auc = 0.5202020202020201
User 135209 AUC after training: 0.5202020202020201
User 135209 does not improve AUC. Reverting changes.
Training on augumented user 21119 37/50 current_auc = 0.5202020202020201
User 21119 AUC after training: 0.5151515151515151
User 21119 does not improve AUC. Reverting changes.
Training on augumented user 98725 38/50 current_auc = 0.5202020202020201
User 98725 AUC after training: 0.5202020202020201
User 98725 does not improve AUC. Reverting changes.
Training on augumented user 54373 39/50 current_auc = 0.5202020202020201
User 54373 AUC after training: 0.5151515151515151
User 54373 does not improve AUC. Reverting changes.
Training on augumented user 136246 40/50 current_auc = 0.5202020202020201
User 136246 AUC after training: 0.5202020202020201
User 136246 does not improve AUC. Reverting changes.
Training on augumented user 34136 41/50 current_auc = 0.5202020202020201
User 34136 AUC after training: 0.5151515151515151
User 34136 does not improve AUC. Reverting changes.
Training on augumented user 115498 42/50 current_auc = 0.5202020202020201
User 115498 AUC after training: 0.5202020202020201
User 115498 does not improve AUC. Reverting changes.
Training on augumented user 82159 43/50 current_auc = 0.5202020202020201
User 82159 AUC after training: 0.5202020202020201
User 82159 does not improve AUC. Reverting changes.
Training on augumented user 135832 44/50 current_auc = 0.5202020202020201
User 135832 AUC after training: 0.5151515151515151
User 135832 does not improve AUC. Reverting changes.
Training on augumented user 79212 45/50 current_auc = 0.5202020202020201
User 79212 AUC after training: 0.5202020202020201
User 79212 does not improve AUC. Reverting changes.
Training on augumented user 86994 46/50 current_auc = 0.5202020202020201
User 86994 AUC after training: 0.5151515151515151
User 86994 does not improve AUC. Reverting changes.
Training on augumented user 89490 47/50 current_auc = 0.5202020202020201
User 89490 AUC after training: 0.5202020202020201
User 89490 does not improve AUC. Reverting changes.
Training on augumented user 126490 48/50 current_auc = 0.5202020202020201
User 126490 AUC after training: 0.5101010101010102
User 126490 does not improve AUC. Reverting changes.
Training on augumented user 87135 49/50 current_auc = 0.5202020202020201
User 87135 AUC after training: 0.5202020202020201
User 87135 does not improve AUC. Reverting changes.
[2024-12-02 19:08:09.258644] start test user 3922 165/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:08:09.670213] start test user 3922 165/568 recall augumented users by random, augumented_users = [95772, 125302, 60939, 113894, 72291, 74287, 38768, 112739, 115781, 118083, 48484, 94762, 15825, 114110, 72101, 8771, 53483, 84855, 47551, 88494, 123509, 66695, 136039, 43388, 80442, 130654, 2328, 73281, 53912, 109089, 32544, 66991, 67448, 26279, 51599, 13956, 82037, 82367, 110281, 135919, 55579, 34679, 126510, 19007, 15163, 69559, 85100, 24793, 130503, 101819]
[2024-12-02 19:08:09.684756] user = 3922 Cloud 165/568
[2024-12-02 19:08:09.698610] user = 3922 Local 165/568
[2024-12-02 19:08:09.735037] user = 3922 Local+ 165/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:08:11.509642] user = 3922 MPDA- 165/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.751946030098599
Training on augumented user 95772 0/50 current_auc = 0.751946030098599
User 95772 AUC after training: 0.7524649714582252
User 95772 improves AUC. Keeping the model.
Training on augumented user 125302 1/50 current_auc = 0.7524649714582252
User 125302 AUC after training: 0.7524649714582252
User 125302 does not improve AUC. Reverting changes.
Training on augumented user 60939 2/50 current_auc = 0.7524649714582252
User 60939 AUC after training: 0.7524649714582252
User 60939 does not improve AUC. Reverting changes.
Training on augumented user 113894 3/50 current_auc = 0.7524649714582252
User 113894 AUC after training: 0.751946030098599
User 113894 does not improve AUC. Reverting changes.
Training on augumented user 72291 4/50 current_auc = 0.7524649714582252
User 72291 AUC after training: 0.753502854177478
User 72291 improves AUC. Keeping the model.
Training on augumented user 74287 5/50 current_auc = 0.753502854177478
User 74287 AUC after training: 0.7503892060197197
User 74287 does not improve AUC. Reverting changes.
Training on augumented user 38768 6/50 current_auc = 0.753502854177478
User 38768 AUC after training: 0.7529839128178516
User 38768 does not improve AUC. Reverting changes.
Training on augumented user 112739 7/50 current_auc = 0.753502854177478
User 112739 AUC after training: 0.753502854177478
User 112739 does not improve AUC. Reverting changes.
Training on augumented user 115781 8/50 current_auc = 0.753502854177478
User 115781 AUC after training: 0.751946030098599
User 115781 does not improve AUC. Reverting changes.
Training on augumented user 118083 9/50 current_auc = 0.753502854177478
User 118083 AUC after training: 0.753502854177478
User 118083 does not improve AUC. Reverting changes.
Training on augumented user 48484 10/50 current_auc = 0.753502854177478
User 48484 AUC after training: 0.751946030098599
User 48484 does not improve AUC. Reverting changes.
Training on augumented user 94762 11/50 current_auc = 0.753502854177478
User 94762 AUC after training: 0.7524649714582252
User 94762 does not improve AUC. Reverting changes.
Training on augumented user 15825 12/50 current_auc = 0.753502854177478
User 15825 AUC after training: 0.7524649714582252
User 15825 does not improve AUC. Reverting changes.
Training on augumented user 114110 13/50 current_auc = 0.753502854177478
User 114110 AUC after training: 0.7524649714582252
User 114110 does not improve AUC. Reverting changes.
Training on augumented user 72101 14/50 current_auc = 0.753502854177478
User 72101 AUC after training: 0.7514270887389725
User 72101 does not improve AUC. Reverting changes.
Training on augumented user 8771 15/50 current_auc = 0.753502854177478
User 8771 AUC after training: 0.7529839128178516
User 8771 does not improve AUC. Reverting changes.
Training on augumented user 53483 16/50 current_auc = 0.753502854177478
User 53483 AUC after training: 0.7529839128178516
User 53483 does not improve AUC. Reverting changes.
Training on augumented user 84855 17/50 current_auc = 0.753502854177478
User 84855 AUC after training: 0.7540217955371044
User 84855 improves AUC. Keeping the model.
Training on augumented user 47551 18/50 current_auc = 0.7540217955371044
User 47551 AUC after training: 0.7540217955371042
User 47551 does not improve AUC. Reverting changes.
Training on augumented user 88494 19/50 current_auc = 0.7540217955371044
User 88494 AUC after training: 0.7550596782563571
User 88494 improves AUC. Keeping the model.
Training on augumented user 123509 20/50 current_auc = 0.7550596782563571
User 123509 AUC after training: 0.7545407368967307
User 123509 does not improve AUC. Reverting changes.
Training on augumented user 66695 21/50 current_auc = 0.7550596782563571
User 66695 AUC after training: 0.7550596782563571
User 66695 does not improve AUC. Reverting changes.
Training on augumented user 136039 22/50 current_auc = 0.7550596782563571
User 136039 AUC after training: 0.7555786196159835
User 136039 improves AUC. Keeping the model.
Training on augumented user 43388 23/50 current_auc = 0.7555786196159835
User 43388 AUC after training: 0.7540217955371042
User 43388 does not improve AUC. Reverting changes.
Training on augumented user 80442 24/50 current_auc = 0.7555786196159835
User 80442 AUC after training: 0.755059678256357
User 80442 does not improve AUC. Reverting changes.
Training on augumented user 130654 25/50 current_auc = 0.7555786196159835
User 130654 AUC after training: 0.7555786196159834
User 130654 does not improve AUC. Reverting changes.
Training on augumented user 2328 26/50 current_auc = 0.7555786196159835
User 2328 AUC after training: 0.7545407368967306
User 2328 does not improve AUC. Reverting changes.
Training on augumented user 73281 27/50 current_auc = 0.7555786196159835
User 73281 AUC after training: 0.755059678256357
User 73281 does not improve AUC. Reverting changes.
Training on augumented user 53912 28/50 current_auc = 0.7555786196159835
User 53912 AUC after training: 0.753502854177478
User 53912 does not improve AUC. Reverting changes.
Training on augumented user 109089 29/50 current_auc = 0.7555786196159835
User 109089 AUC after training: 0.7555786196159835
User 109089 does not improve AUC. Reverting changes.
Training on augumented user 32544 30/50 current_auc = 0.7555786196159835
User 32544 AUC after training: 0.7550596782563571
User 32544 does not improve AUC. Reverting changes.
Training on augumented user 66991 31/50 current_auc = 0.7555786196159835
User 66991 AUC after training: 0.7560975609756098
User 66991 improves AUC. Keeping the model.
Training on augumented user 67448 32/50 current_auc = 0.7560975609756098
User 67448 AUC after training: 0.7571354436948625
User 67448 improves AUC. Keeping the model.
Training on augumented user 26279 33/50 current_auc = 0.7571354436948625
User 26279 AUC after training: 0.7576543850544889
User 26279 improves AUC. Keeping the model.
Training on augumented user 51599 34/50 current_auc = 0.7576543850544889
User 51599 AUC after training: 0.7566165023352363
User 51599 does not improve AUC. Reverting changes.
Training on augumented user 13956 35/50 current_auc = 0.7576543850544889
User 13956 AUC after training: 0.7576543850544889
User 13956 does not improve AUC. Reverting changes.
Training on augumented user 82037 36/50 current_auc = 0.7576543850544889
User 82037 AUC after training: 0.7581733264141152
User 82037 improves AUC. Keeping the model.
Training on augumented user 82367 37/50 current_auc = 0.7581733264141152
User 82367 AUC after training: 0.7592112091333679
User 82367 improves AUC. Keeping the model.
Training on augumented user 110281 38/50 current_auc = 0.7592112091333679
User 110281 AUC after training: 0.7592112091333679
User 110281 does not improve AUC. Reverting changes.
Training on augumented user 135919 39/50 current_auc = 0.7592112091333679
User 135919 AUC after training: 0.7592112091333679
User 135919 does not improve AUC. Reverting changes.
Training on augumented user 55579 40/50 current_auc = 0.7592112091333679
User 55579 AUC after training: 0.7581733264141153
User 55579 does not improve AUC. Reverting changes.
Training on augumented user 34679 41/50 current_auc = 0.7592112091333679
User 34679 AUC after training: 0.7576543850544889
User 34679 does not improve AUC. Reverting changes.
Training on augumented user 126510 42/50 current_auc = 0.7592112091333679
User 126510 AUC after training: 0.7581733264141153
User 126510 does not improve AUC. Reverting changes.
Training on augumented user 19007 43/50 current_auc = 0.7592112091333679
User 19007 AUC after training: 0.7576543850544889
User 19007 does not improve AUC. Reverting changes.
Training on augumented user 15163 44/50 current_auc = 0.7592112091333679
User 15163 AUC after training: 0.7592112091333679
User 15163 does not improve AUC. Reverting changes.
Training on augumented user 69559 45/50 current_auc = 0.7592112091333679
User 69559 AUC after training: 0.7602490918526207
User 69559 improves AUC. Keeping the model.
Training on augumented user 85100 46/50 current_auc = 0.7602490918526207
User 85100 AUC after training: 0.7602490918526206
User 85100 does not improve AUC. Reverting changes.
Training on augumented user 24793 47/50 current_auc = 0.7602490918526207
User 24793 AUC after training: 0.7592112091333679
User 24793 does not improve AUC. Reverting changes.
Training on augumented user 130503 48/50 current_auc = 0.7602490918526207
User 130503 AUC after training: 0.7602490918526207
User 130503 does not improve AUC. Reverting changes.
Training on augumented user 101819 49/50 current_auc = 0.7602490918526207
User 101819 AUC after training: 0.7602490918526207
User 101819 does not improve AUC. Reverting changes.
[2024-12-02 19:08:41.160982] start test user 3928 166/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:08:41.793866] start test user 3928 166/568 recall augumented users by random, augumented_users = [64798, 89842, 32731, 3792, 133809, 7152, 133169, 112245, 22516, 50692, 87385, 71118, 130248, 24185, 73701, 106543, 109646, 2524, 45127, 18937, 57831, 8068, 69143, 42687, 131020, 118644, 108976, 126525, 19309, 35295, 16641, 56706, 29576, 14583, 30489, 111704, 137395, 78639, 105067, 1664, 2481, 67427, 25135, 99076, 31118, 128702, 13978, 137935, 57487, 108633]
[2024-12-02 19:08:41.808628] user = 3928 Cloud 166/568
[2024-12-02 19:08:41.859332] user = 3928 Local 166/568
[2024-12-02 19:08:41.963066] user = 3928 Local+ 166/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:08:44.439243] user = 3928 MPDA- 166/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7614650342394689
Training on augumented user 64798 0/50 current_auc = 0.7614650342394689
User 64798 AUC after training: 0.7605312305457563
User 64798 does not improve AUC. Reverting changes.
Training on augumented user 89842 1/50 current_auc = 0.7614650342394689
User 89842 AUC after training: 0.761776302137373
User 89842 improves AUC. Keeping the model.
Training on augumented user 32731 2/50 current_auc = 0.761776302137373
User 32731 AUC after training: 0.7616725461714049
User 32731 does not improve AUC. Reverting changes.
Training on augumented user 3792 3/50 current_auc = 0.761776302137373
User 3792 AUC after training: 0.7623988379331811
User 3792 improves AUC. Keeping the model.
Training on augumented user 133809 4/50 current_auc = 0.7623988379331811
User 133809 AUC after training: 0.7619838140693089
User 133809 does not improve AUC. Reverting changes.
Training on augumented user 7152 5/50 current_auc = 0.7623988379331811
User 7152 AUC after training: 0.7625025938991492
User 7152 improves AUC. Keeping the model.
Training on augumented user 133169 6/50 current_auc = 0.7625025938991492
User 133169 AUC after training: 0.761776302137373
User 133169 does not improve AUC. Reverting changes.
Training on augumented user 112245 7/50 current_auc = 0.7625025938991492
User 112245 AUC after training: 0.7633326416268936
User 112245 improves AUC. Keeping the model.
Training on augumented user 22516 8/50 current_auc = 0.7633326416268936
User 22516 AUC after training: 0.7632288856609255
User 22516 does not improve AUC. Reverting changes.
Training on augumented user 50692 9/50 current_auc = 0.7633326416268936
User 50692 AUC after training: 0.7635401535588296
User 50692 improves AUC. Keeping the model.
Training on augumented user 87385 10/50 current_auc = 0.7635401535588296
User 87385 AUC after training: 0.7633326416268936
User 87385 does not improve AUC. Reverting changes.
Training on augumented user 71118 11/50 current_auc = 0.7635401535588296
User 71118 AUC after training: 0.7635401535588298
User 71118 improves AUC. Keeping the model.
Training on augumented user 130248 12/50 current_auc = 0.7635401535588298
User 130248 AUC after training: 0.7635401535588296
User 130248 does not improve AUC. Reverting changes.
Training on augumented user 24185 13/50 current_auc = 0.7635401535588298
User 24185 AUC after training: 0.7633326416268936
User 24185 does not improve AUC. Reverting changes.
Training on augumented user 73701 14/50 current_auc = 0.7635401535588298
User 73701 AUC after training: 0.7640589333886699
User 73701 improves AUC. Keeping the model.
Training on augumented user 106543 15/50 current_auc = 0.7640589333886699
User 106543 AUC after training: 0.7634363975928616
User 106543 does not improve AUC. Reverting changes.
Training on augumented user 109646 16/50 current_auc = 0.7640589333886699
User 109646 AUC after training: 0.7638514214567338
User 109646 does not improve AUC. Reverting changes.
Training on augumented user 2524 17/50 current_auc = 0.7640589333886699
User 2524 AUC after training: 0.7635401535588296
User 2524 does not improve AUC. Reverting changes.
Training on augumented user 45127 18/50 current_auc = 0.7640589333886699
User 45127 AUC after training: 0.7636439095247977
User 45127 does not improve AUC. Reverting changes.
Training on augumented user 18937 19/50 current_auc = 0.7640589333886699
User 18937 AUC after training: 0.7638514214567337
User 18937 does not improve AUC. Reverting changes.
Training on augumented user 57831 20/50 current_auc = 0.7640589333886699
User 57831 AUC after training: 0.7629176177630214
User 57831 does not improve AUC. Reverting changes.
Training on augumented user 8068 21/50 current_auc = 0.7640589333886699
User 8068 AUC after training: 0.7641626893546379
User 8068 improves AUC. Keeping the model.
Training on augumented user 69143 22/50 current_auc = 0.7641626893546379
User 69143 AUC after training: 0.7635401535588296
User 69143 does not improve AUC. Reverting changes.
Training on augumented user 42687 23/50 current_auc = 0.7641626893546379
User 42687 AUC after training: 0.7631770076779415
User 42687 does not improve AUC. Reverting changes.
Training on augumented user 131020 24/50 current_auc = 0.7641626893546379
User 131020 AUC after training: 0.7640589333886698
User 131020 does not improve AUC. Reverting changes.
Training on augumented user 118644 25/50 current_auc = 0.7641626893546379
User 118644 AUC after training: 0.7637476654907657
User 118644 does not improve AUC. Reverting changes.
Training on augumented user 108976 26/50 current_auc = 0.7641626893546379
User 108976 AUC after training: 0.7633326416268936
User 108976 does not improve AUC. Reverting changes.
Training on augumented user 126525 27/50 current_auc = 0.7641626893546379
User 126525 AUC after training: 0.7638514214567338
User 126525 does not improve AUC. Reverting changes.
Training on augumented user 19309 28/50 current_auc = 0.7641626893546379
User 19309 AUC after training: 0.764266445320606
User 19309 improves AUC. Keeping the model.
Training on augumented user 35295 29/50 current_auc = 0.764266445320606
User 35295 AUC after training: 0.7635401535588296
User 35295 does not improve AUC. Reverting changes.
Training on augumented user 16641 30/50 current_auc = 0.764266445320606
User 16641 AUC after training: 0.764266445320606
User 16641 does not improve AUC. Reverting changes.
Training on augumented user 56706 31/50 current_auc = 0.764266445320606
User 56706 AUC after training: 0.7638514214567338
User 56706 does not improve AUC. Reverting changes.
Training on augumented user 29576 32/50 current_auc = 0.764266445320606
User 29576 AUC after training: 0.7640589333886699
User 29576 does not improve AUC. Reverting changes.
Training on augumented user 14583 33/50 current_auc = 0.764266445320606
User 14583 AUC after training: 0.764370201286574
User 14583 improves AUC. Keeping the model.
Training on augumented user 30489 34/50 current_auc = 0.764370201286574
User 30489 AUC after training: 0.7640589333886699
User 30489 does not improve AUC. Reverting changes.
Training on augumented user 111704 35/50 current_auc = 0.764370201286574
User 111704 AUC after training: 0.764473957252542
User 111704 improves AUC. Keeping the model.
Training on augumented user 137395 36/50 current_auc = 0.764473957252542
User 137395 AUC after training: 0.7644739572525421
User 137395 improves AUC. Keeping the model.
Training on augumented user 78639 37/50 current_auc = 0.7644739572525421
User 78639 AUC after training: 0.7647852251504462
User 78639 improves AUC. Keeping the model.
Training on augumented user 105067 38/50 current_auc = 0.7647852251504462
User 105067 AUC after training: 0.7646814691844781
User 105067 does not improve AUC. Reverting changes.
Training on augumented user 1664 39/50 current_auc = 0.7647852251504462
User 1664 AUC after training: 0.7646814691844781
User 1664 does not improve AUC. Reverting changes.
Training on augumented user 2481 40/50 current_auc = 0.7647852251504462
User 2481 AUC after training: 0.7649927370823822
User 2481 improves AUC. Keeping the model.
Training on augumented user 67427 41/50 current_auc = 0.7649927370823822
User 67427 AUC after training: 0.7652002490143184
User 67427 improves AUC. Keeping the model.
Training on augumented user 25135 42/50 current_auc = 0.7652002490143184
User 25135 AUC after training: 0.764473957252542
User 25135 does not improve AUC. Reverting changes.
Training on augumented user 99076 43/50 current_auc = 0.7652002490143184
User 99076 AUC after training: 0.7648889811164142
User 99076 does not improve AUC. Reverting changes.
Training on augumented user 31118 44/50 current_auc = 0.7652002490143184
User 31118 AUC after training: 0.76457771321851
User 31118 does not improve AUC. Reverting changes.
Training on augumented user 128702 45/50 current_auc = 0.7652002490143184
User 128702 AUC after training: 0.7659265407760946
User 128702 improves AUC. Keeping the model.
Training on augumented user 13978 46/50 current_auc = 0.7659265407760946
User 13978 AUC after training: 0.7661340527080308
User 13978 improves AUC. Keeping the model.
Training on augumented user 137935 47/50 current_auc = 0.7661340527080308
User 137935 AUC after training: 0.7650964930483503
User 137935 does not improve AUC. Reverting changes.
Training on augumented user 57487 48/50 current_auc = 0.7661340527080308
User 57487 AUC after training: 0.7649927370823822
User 57487 does not improve AUC. Reverting changes.
Training on augumented user 108633 49/50 current_auc = 0.7661340527080308
User 108633 AUC after training: 0.7661859306910148
User 108633 improves AUC. Keeping the model.
[2024-12-02 19:09:16.799234] start test user 3942 167/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:09:17.209088] start test user 3942 167/568 recall augumented users by random, augumented_users = [58704, 27674, 45097, 102752, 132157, 91163, 35833, 44083, 75265, 54894, 73009, 67000, 133085, 134854, 98865, 113112, 1105, 41939, 13457, 76411, 126655, 23423, 4976, 24885, 129355, 82220, 33161, 128429, 6465, 21892, 99358, 44975, 55614, 42505, 123331, 99444, 54878, 84627, 9113, 31855, 115488, 101265, 37, 20822, 58674, 28607, 57217, 67965, 133700, 95714]
[2024-12-02 19:09:17.223494] user = 3942 Cloud 167/568
[2024-12-02 19:09:17.232903] user = 3942 Local 167/568
[2024-12-02 19:09:17.264505] user = 3942 Local+ 167/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:09:19.913609] user = 3942 MPDA- 167/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 58704 0/50 current_auc = 1.0
User 58704 AUC after training: 1.0
User 58704 does not improve AUC. Reverting changes.
Training on augumented user 27674 1/50 current_auc = 1.0
User 27674 AUC after training: 1.0
User 27674 does not improve AUC. Reverting changes.
Training on augumented user 45097 2/50 current_auc = 1.0
User 45097 AUC after training: 1.0
User 45097 does not improve AUC. Reverting changes.
Training on augumented user 102752 3/50 current_auc = 1.0
User 102752 AUC after training: 1.0
User 102752 does not improve AUC. Reverting changes.
Training on augumented user 132157 4/50 current_auc = 1.0
User 132157 AUC after training: 1.0
User 132157 does not improve AUC. Reverting changes.
Training on augumented user 91163 5/50 current_auc = 1.0
User 91163 AUC after training: 1.0
User 91163 does not improve AUC. Reverting changes.
Training on augumented user 35833 6/50 current_auc = 1.0
User 35833 AUC after training: 1.0
User 35833 does not improve AUC. Reverting changes.
Training on augumented user 44083 7/50 current_auc = 1.0
User 44083 AUC after training: 1.0
User 44083 does not improve AUC. Reverting changes.
Training on augumented user 75265 8/50 current_auc = 1.0
User 75265 AUC after training: 1.0
User 75265 does not improve AUC. Reverting changes.
Training on augumented user 54894 9/50 current_auc = 1.0
User 54894 AUC after training: 1.0
User 54894 does not improve AUC. Reverting changes.
Training on augumented user 73009 10/50 current_auc = 1.0
User 73009 AUC after training: 1.0
User 73009 does not improve AUC. Reverting changes.
Training on augumented user 67000 11/50 current_auc = 1.0
User 67000 AUC after training: 1.0
User 67000 does not improve AUC. Reverting changes.
Training on augumented user 133085 12/50 current_auc = 1.0
User 133085 AUC after training: 1.0
User 133085 does not improve AUC. Reverting changes.
Training on augumented user 134854 13/50 current_auc = 1.0
User 134854 AUC after training: 1.0
User 134854 does not improve AUC. Reverting changes.
Training on augumented user 98865 14/50 current_auc = 1.0
User 98865 AUC after training: 1.0
User 98865 does not improve AUC. Reverting changes.
Training on augumented user 113112 15/50 current_auc = 1.0
User 113112 AUC after training: 1.0
User 113112 does not improve AUC. Reverting changes.
Training on augumented user 1105 16/50 current_auc = 1.0
User 1105 AUC after training: 1.0
User 1105 does not improve AUC. Reverting changes.
Training on augumented user 41939 17/50 current_auc = 1.0
User 41939 AUC after training: 1.0
User 41939 does not improve AUC. Reverting changes.
Training on augumented user 13457 18/50 current_auc = 1.0
User 13457 AUC after training: 1.0
User 13457 does not improve AUC. Reverting changes.
Training on augumented user 76411 19/50 current_auc = 1.0
User 76411 AUC after training: 1.0
User 76411 does not improve AUC. Reverting changes.
Training on augumented user 126655 20/50 current_auc = 1.0
User 126655 AUC after training: 1.0
User 126655 does not improve AUC. Reverting changes.
Training on augumented user 23423 21/50 current_auc = 1.0
User 23423 AUC after training: 1.0
User 23423 does not improve AUC. Reverting changes.
Training on augumented user 4976 22/50 current_auc = 1.0
User 4976 AUC after training: 1.0
User 4976 does not improve AUC. Reverting changes.
Training on augumented user 24885 23/50 current_auc = 1.0
User 24885 AUC after training: 1.0
User 24885 does not improve AUC. Reverting changes.
Training on augumented user 129355 24/50 current_auc = 1.0
User 129355 AUC after training: 1.0
User 129355 does not improve AUC. Reverting changes.
Training on augumented user 82220 25/50 current_auc = 1.0
User 82220 AUC after training: 1.0
User 82220 does not improve AUC. Reverting changes.
Training on augumented user 33161 26/50 current_auc = 1.0
User 33161 AUC after training: 1.0
User 33161 does not improve AUC. Reverting changes.
Training on augumented user 128429 27/50 current_auc = 1.0
User 128429 AUC after training: 1.0
User 128429 does not improve AUC. Reverting changes.
Training on augumented user 6465 28/50 current_auc = 1.0
User 6465 AUC after training: 1.0
User 6465 does not improve AUC. Reverting changes.
Training on augumented user 21892 29/50 current_auc = 1.0
User 21892 AUC after training: 1.0
User 21892 does not improve AUC. Reverting changes.
Training on augumented user 99358 30/50 current_auc = 1.0
User 99358 AUC after training: 1.0
User 99358 does not improve AUC. Reverting changes.
Training on augumented user 44975 31/50 current_auc = 1.0
User 44975 AUC after training: 1.0
User 44975 does not improve AUC. Reverting changes.
Training on augumented user 55614 32/50 current_auc = 1.0
User 55614 AUC after training: 1.0
User 55614 does not improve AUC. Reverting changes.
Training on augumented user 42505 33/50 current_auc = 1.0
User 42505 AUC after training: 1.0
User 42505 does not improve AUC. Reverting changes.
Training on augumented user 123331 34/50 current_auc = 1.0
User 123331 AUC after training: 1.0
User 123331 does not improve AUC. Reverting changes.
Training on augumented user 99444 35/50 current_auc = 1.0
User 99444 AUC after training: 1.0
User 99444 does not improve AUC. Reverting changes.
Training on augumented user 54878 36/50 current_auc = 1.0
User 54878 AUC after training: 1.0
User 54878 does not improve AUC. Reverting changes.
Training on augumented user 84627 37/50 current_auc = 1.0
User 84627 AUC after training: 1.0
User 84627 does not improve AUC. Reverting changes.
Training on augumented user 9113 38/50 current_auc = 1.0
User 9113 AUC after training: 1.0
User 9113 does not improve AUC. Reverting changes.
Training on augumented user 31855 39/50 current_auc = 1.0
User 31855 AUC after training: 1.0
User 31855 does not improve AUC. Reverting changes.
Training on augumented user 115488 40/50 current_auc = 1.0
User 115488 AUC after training: 1.0
User 115488 does not improve AUC. Reverting changes.
Training on augumented user 101265 41/50 current_auc = 1.0
User 101265 AUC after training: 1.0
User 101265 does not improve AUC. Reverting changes.
Training on augumented user 37 42/50 current_auc = 1.0
User 37 AUC after training: 1.0
User 37 does not improve AUC. Reverting changes.
Training on augumented user 20822 43/50 current_auc = 1.0
User 20822 AUC after training: 1.0
User 20822 does not improve AUC. Reverting changes.
Training on augumented user 58674 44/50 current_auc = 1.0
User 58674 AUC after training: 1.0
User 58674 does not improve AUC. Reverting changes.
Training on augumented user 28607 45/50 current_auc = 1.0
User 28607 AUC after training: 1.0
User 28607 does not improve AUC. Reverting changes.
Training on augumented user 57217 46/50 current_auc = 1.0
User 57217 AUC after training: 1.0
User 57217 does not improve AUC. Reverting changes.
Training on augumented user 67965 47/50 current_auc = 1.0
User 67965 AUC after training: 1.0
User 67965 does not improve AUC. Reverting changes.
Training on augumented user 133700 48/50 current_auc = 1.0
User 133700 AUC after training: 1.0
User 133700 does not improve AUC. Reverting changes.
Training on augumented user 95714 49/50 current_auc = 1.0
User 95714 AUC after training: 1.0
User 95714 does not improve AUC. Reverting changes.
[2024-12-02 19:09:49.267591] start test user 3944 168/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:09:49.896680] start test user 3944 168/568 recall augumented users by random, augumented_users = [24642, 85755, 66179, 80531, 38659, 110229, 94697, 21580, 118170, 89467, 68967, 93767, 133618, 9613, 77787, 111014, 11968, 34081, 32100, 12972, 4372, 32701, 30984, 56473, 77023, 61481, 35826, 7815, 20676, 34946, 37345, 22816, 99943, 115179, 113171, 98979, 2675, 127042, 9334, 61322, 124162, 66303, 42149, 115172, 70032, 115006, 7418, 55433, 52425, 25617]
[2024-12-02 19:09:49.933115] user = 3944 Cloud 168/568
[2024-12-02 19:09:49.951227] user = 3944 Local 168/568
[2024-12-02 19:09:50.044326] user = 3944 Local+ 168/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:09:52.039808] user = 3944 MPDA- 168/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7363834422657951
Training on augumented user 24642 0/50 current_auc = 0.7363834422657951
User 24642 AUC after training: 0.7363834422657951
User 24642 does not improve AUC. Reverting changes.
Training on augumented user 85755 1/50 current_auc = 0.7363834422657951
User 85755 AUC after training: 0.7342047930283224
User 85755 does not improve AUC. Reverting changes.
Training on augumented user 66179 2/50 current_auc = 0.7363834422657951
User 66179 AUC after training: 0.7342047930283224
User 66179 does not improve AUC. Reverting changes.
Training on augumented user 80531 3/50 current_auc = 0.7363834422657951
User 80531 AUC after training: 0.7342047930283224
User 80531 does not improve AUC. Reverting changes.
Training on augumented user 38659 4/50 current_auc = 0.7363834422657951
User 38659 AUC after training: 0.738562091503268
User 38659 improves AUC. Keeping the model.
Training on augumented user 110229 5/50 current_auc = 0.738562091503268
User 110229 AUC after training: 0.7342047930283224
User 110229 does not improve AUC. Reverting changes.
Training on augumented user 94697 6/50 current_auc = 0.738562091503268
User 94697 AUC after training: 0.738562091503268
User 94697 does not improve AUC. Reverting changes.
Training on augumented user 21580 7/50 current_auc = 0.738562091503268
User 21580 AUC after training: 0.7363834422657951
User 21580 does not improve AUC. Reverting changes.
Training on augumented user 118170 8/50 current_auc = 0.738562091503268
User 118170 AUC after training: 0.738562091503268
User 118170 does not improve AUC. Reverting changes.
Training on augumented user 89467 9/50 current_auc = 0.738562091503268
User 89467 AUC after training: 0.738562091503268
User 89467 does not improve AUC. Reverting changes.
Training on augumented user 68967 10/50 current_auc = 0.738562091503268
User 68967 AUC after training: 0.738562091503268
User 68967 does not improve AUC. Reverting changes.
Training on augumented user 93767 11/50 current_auc = 0.738562091503268
User 93767 AUC after training: 0.738562091503268
User 93767 does not improve AUC. Reverting changes.
Training on augumented user 133618 12/50 current_auc = 0.738562091503268
User 133618 AUC after training: 0.738562091503268
User 133618 does not improve AUC. Reverting changes.
Training on augumented user 9613 13/50 current_auc = 0.738562091503268
User 9613 AUC after training: 0.7407407407407407
User 9613 improves AUC. Keeping the model.
Training on augumented user 77787 14/50 current_auc = 0.7407407407407407
User 77787 AUC after training: 0.7363834422657951
User 77787 does not improve AUC. Reverting changes.
Training on augumented user 111014 15/50 current_auc = 0.7407407407407407
User 111014 AUC after training: 0.738562091503268
User 111014 does not improve AUC. Reverting changes.
Training on augumented user 11968 16/50 current_auc = 0.7407407407407407
User 11968 AUC after training: 0.7407407407407407
User 11968 does not improve AUC. Reverting changes.
Training on augumented user 34081 17/50 current_auc = 0.7407407407407407
User 34081 AUC after training: 0.738562091503268
User 34081 does not improve AUC. Reverting changes.
Training on augumented user 32100 18/50 current_auc = 0.7407407407407407
User 32100 AUC after training: 0.7407407407407407
User 32100 does not improve AUC. Reverting changes.
Training on augumented user 12972 19/50 current_auc = 0.7407407407407407
User 12972 AUC after training: 0.7407407407407407
User 12972 does not improve AUC. Reverting changes.
Training on augumented user 4372 20/50 current_auc = 0.7407407407407407
User 4372 AUC after training: 0.738562091503268
User 4372 does not improve AUC. Reverting changes.
Training on augumented user 32701 21/50 current_auc = 0.7407407407407407
User 32701 AUC after training: 0.7429193899782134
User 32701 improves AUC. Keeping the model.
Training on augumented user 30984 22/50 current_auc = 0.7429193899782134
User 30984 AUC after training: 0.7429193899782134
User 30984 does not improve AUC. Reverting changes.
Training on augumented user 56473 23/50 current_auc = 0.7429193899782134
User 56473 AUC after training: 0.7429193899782134
User 56473 does not improve AUC. Reverting changes.
Training on augumented user 77023 24/50 current_auc = 0.7429193899782134
User 77023 AUC after training: 0.7407407407407407
User 77023 does not improve AUC. Reverting changes.
Training on augumented user 61481 25/50 current_auc = 0.7429193899782134
User 61481 AUC after training: 0.7429193899782134
User 61481 does not improve AUC. Reverting changes.
Training on augumented user 35826 26/50 current_auc = 0.7429193899782134
User 35826 AUC after training: 0.7407407407407407
User 35826 does not improve AUC. Reverting changes.
Training on augumented user 7815 27/50 current_auc = 0.7429193899782134
User 7815 AUC after training: 0.7429193899782134
User 7815 does not improve AUC. Reverting changes.
Training on augumented user 20676 28/50 current_auc = 0.7429193899782134
User 20676 AUC after training: 0.7450980392156863
User 20676 improves AUC. Keeping the model.
Training on augumented user 34946 29/50 current_auc = 0.7450980392156863
User 34946 AUC after training: 0.7450980392156863
User 34946 does not improve AUC. Reverting changes.
Training on augumented user 37345 30/50 current_auc = 0.7450980392156863
User 37345 AUC after training: 0.7450980392156863
User 37345 does not improve AUC. Reverting changes.
Training on augumented user 22816 31/50 current_auc = 0.7450980392156863
User 22816 AUC after training: 0.7429193899782134
User 22816 does not improve AUC. Reverting changes.
Training on augumented user 99943 32/50 current_auc = 0.7450980392156863
User 99943 AUC after training: 0.7450980392156863
User 99943 does not improve AUC. Reverting changes.
Training on augumented user 115179 33/50 current_auc = 0.7450980392156863
User 115179 AUC after training: 0.7450980392156863
User 115179 does not improve AUC. Reverting changes.
Training on augumented user 113171 34/50 current_auc = 0.7450980392156863
User 113171 AUC after training: 0.7429193899782134
User 113171 does not improve AUC. Reverting changes.
Training on augumented user 98979 35/50 current_auc = 0.7450980392156863
User 98979 AUC after training: 0.7450980392156863
User 98979 does not improve AUC. Reverting changes.
Training on augumented user 2675 36/50 current_auc = 0.7450980392156863
User 2675 AUC after training: 0.7407407407407407
User 2675 does not improve AUC. Reverting changes.
Training on augumented user 127042 37/50 current_auc = 0.7450980392156863
User 127042 AUC after training: 0.7450980392156863
User 127042 does not improve AUC. Reverting changes.
Training on augumented user 9334 38/50 current_auc = 0.7450980392156863
User 9334 AUC after training: 0.7429193899782134
User 9334 does not improve AUC. Reverting changes.
Training on augumented user 61322 39/50 current_auc = 0.7450980392156863
User 61322 AUC after training: 0.747276688453159
User 61322 improves AUC. Keeping the model.
Training on augumented user 124162 40/50 current_auc = 0.747276688453159
User 124162 AUC after training: 0.7407407407407407
User 124162 does not improve AUC. Reverting changes.
Training on augumented user 66303 41/50 current_auc = 0.747276688453159
User 66303 AUC after training: 0.7450980392156863
User 66303 does not improve AUC. Reverting changes.
Training on augumented user 42149 42/50 current_auc = 0.747276688453159
User 42149 AUC after training: 0.7429193899782135
User 42149 does not improve AUC. Reverting changes.
Training on augumented user 115172 43/50 current_auc = 0.747276688453159
User 115172 AUC after training: 0.7450980392156863
User 115172 does not improve AUC. Reverting changes.
Training on augumented user 70032 44/50 current_auc = 0.747276688453159
User 70032 AUC after training: 0.747276688453159
User 70032 does not improve AUC. Reverting changes.
Training on augumented user 115006 45/50 current_auc = 0.747276688453159
User 115006 AUC after training: 0.7429193899782135
User 115006 does not improve AUC. Reverting changes.
Training on augumented user 7418 46/50 current_auc = 0.747276688453159
User 7418 AUC after training: 0.7407407407407407
User 7418 does not improve AUC. Reverting changes.
Training on augumented user 55433 47/50 current_auc = 0.747276688453159
User 55433 AUC after training: 0.738562091503268
User 55433 does not improve AUC. Reverting changes.
Training on augumented user 52425 48/50 current_auc = 0.747276688453159
User 52425 AUC after training: 0.7407407407407407
User 52425 does not improve AUC. Reverting changes.
Training on augumented user 25617 49/50 current_auc = 0.747276688453159
User 25617 AUC after training: 0.7450980392156863
User 25617 does not improve AUC. Reverting changes.
[2024-12-02 19:10:21.032640] start test user 3948 169/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:10:21.542674] start test user 3948 169/568 recall augumented users by random, augumented_users = [40741, 31436, 99852, 50969, 57557, 112136, 24236, 56026, 33422, 91092, 47262, 137863, 120741, 19114, 135233, 42845, 67722, 25007, 132003, 132897, 25741, 9678, 9094, 137904, 117243, 112285, 125882, 43742, 117531, 100509, 67868, 92228, 43278, 132352, 133484, 123332, 127962, 9823, 46058, 66473, 78854, 43231, 133116, 47094, 69143, 87118, 126333, 52660, 74240, 104512]
[2024-12-02 19:10:21.558311] user = 3948 Cloud 169/568
[2024-12-02 19:10:21.580282] user = 3948 Local 169/568
[2024-12-02 19:10:21.869006] user = 3948 Local+ 169/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:10:24.369631] user = 3948 MPDA- 169/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6833601819387852
Training on augumented user 40741 0/50 current_auc = 0.6833601819387852
User 40741 AUC after training: 0.6839761205344452
User 40741 improves AUC. Keeping the model.
Training on augumented user 31436 1/50 current_auc = 0.6839761205344452
User 31436 AUC after training: 0.6842603998862884
User 31436 improves AUC. Keeping the model.
Training on augumented user 99852 2/50 current_auc = 0.6842603998862884
User 99852 AUC after training: 0.6846868189140529
User 99852 improves AUC. Keeping the model.
Training on augumented user 50969 3/50 current_auc = 0.6846868189140529
User 50969 AUC after training: 0.6843551596702359
User 50969 does not improve AUC. Reverting changes.
Training on augumented user 57557 4/50 current_auc = 0.6846868189140529
User 57557 AUC after training: 0.6849237183739222
User 57557 improves AUC. Keeping the model.
Training on augumented user 112136 5/50 current_auc = 0.6849237183739222
User 112136 AUC after training: 0.6855870368615559
User 112136 improves AUC. Keeping the model.
Training on augumented user 24236 6/50 current_auc = 0.6855870368615559
User 24236 AUC after training: 0.6853027575097129
User 24236 does not improve AUC. Reverting changes.
Training on augumented user 56026 7/50 current_auc = 0.6855870368615559
User 56026 AUC after training: 0.6850184781578698
User 56026 does not improve AUC. Reverting changes.
Training on augumented user 33422 8/50 current_auc = 0.6855870368615559
User 33422 AUC after training: 0.6853975172936607
User 33422 does not improve AUC. Reverting changes.
Training on augumented user 91092 9/50 current_auc = 0.6855870368615559
User 91092 AUC after training: 0.6856817966455037
User 91092 improves AUC. Keeping the model.
Training on augumented user 47262 10/50 current_auc = 0.6856817966455037
User 47262 AUC after training: 0.6852079977257652
User 47262 does not improve AUC. Reverting changes.
Training on augumented user 137863 11/50 current_auc = 0.6856817966455037
User 137863 AUC after training: 0.6851132379418174
User 137863 does not improve AUC. Reverting changes.
Training on augumented user 120741 12/50 current_auc = 0.6856817966455037
User 120741 AUC after training: 0.68563441675353
User 120741 does not improve AUC. Reverting changes.
Training on augumented user 19114 13/50 current_auc = 0.6856817966455037
User 19114 AUC after training: 0.6848289585899744
User 19114 does not improve AUC. Reverting changes.
Training on augumented user 135233 14/50 current_auc = 0.6856817966455037
User 135233 AUC after training: 0.6855396569695822
User 135233 does not improve AUC. Reverting changes.
Training on augumented user 42845 15/50 current_auc = 0.6856817966455037
User 42845 AUC after training: 0.6853975172936605
User 42845 does not improve AUC. Reverting changes.
Training on augumented user 67722 16/50 current_auc = 0.6856817966455037
User 67722 AUC after training: 0.6853975172936606
User 67722 does not improve AUC. Reverting changes.
Training on augumented user 25007 17/50 current_auc = 0.6856817966455037
User 25007 AUC after training: 0.6850184781578699
User 25007 does not improve AUC. Reverting changes.
Training on augumented user 132003 18/50 current_auc = 0.6856817966455037
User 132003 AUC after training: 0.6861555955652423
User 132003 improves AUC. Keeping the model.
Training on augumented user 132897 19/50 current_auc = 0.6861555955652423
User 132897 AUC after training: 0.6854922770776084
User 132897 does not improve AUC. Reverting changes.
Training on augumented user 25741 20/50 current_auc = 0.6861555955652423
User 25741 AUC after training: 0.68563441675353
User 25741 does not improve AUC. Reverting changes.
Training on augumented user 9678 21/50 current_auc = 0.6861555955652423
User 9678 AUC after training: 0.685587036861556
User 9678 does not improve AUC. Reverting changes.
Training on augumented user 9094 22/50 current_auc = 0.6861555955652423
User 9094 AUC after training: 0.6863924950251115
User 9094 improves AUC. Keeping the model.
Training on augumented user 137904 23/50 current_auc = 0.6863924950251115
User 137904 AUC after training: 0.6859660759973467
User 137904 does not improve AUC. Reverting changes.
Training on augumented user 117243 24/50 current_auc = 0.6863924950251115
User 117243 AUC after training: 0.6864398749170852
User 117243 improves AUC. Keeping the model.
Training on augumented user 112285 25/50 current_auc = 0.6864398749170852
User 112285 AUC after training: 0.6865820145930068
User 112285 improves AUC. Keeping the model.
Training on augumented user 125882 26/50 current_auc = 0.6865820145930068
User 125882 AUC after training: 0.6867241542689282
User 125882 improves AUC. Keeping the model.
Training on augumented user 43742 27/50 current_auc = 0.6867241542689282
User 43742 AUC after training: 0.6867241542689282
User 43742 does not improve AUC. Reverting changes.
Training on augumented user 117531 28/50 current_auc = 0.6867241542689282
User 117531 AUC after training: 0.6862977352411637
User 117531 does not improve AUC. Reverting changes.
Training on augumented user 100509 29/50 current_auc = 0.6867241542689282
User 100509 AUC after training: 0.6864398749170852
User 100509 does not improve AUC. Reverting changes.
Training on augumented user 67868 30/50 current_auc = 0.6867241542689282
User 67868 AUC after training: 0.6862503553491899
User 67868 does not improve AUC. Reverting changes.
Training on augumented user 92228 31/50 current_auc = 0.6867241542689282
User 92228 AUC after training: 0.6862977352411637
User 92228 does not improve AUC. Reverting changes.
Training on augumented user 43278 32/50 current_auc = 0.6867241542689282
User 43278 AUC after training: 0.6859660759973467
User 43278 does not improve AUC. Reverting changes.
Training on augumented user 132352 33/50 current_auc = 0.6867241542689282
User 132352 AUC after training: 0.6856344167535299
User 132352 does not improve AUC. Reverting changes.
Training on augumented user 133484 34/50 current_auc = 0.6867241542689282
User 133484 AUC after training: 0.6860134558893205
User 133484 does not improve AUC. Reverting changes.
Training on augumented user 123332 35/50 current_auc = 0.6867241542689282
User 123332 AUC after training: 0.686487254809059
User 123332 does not improve AUC. Reverting changes.
Training on augumented user 127962 36/50 current_auc = 0.6867241542689282
User 127962 AUC after training: 0.6860608357812945
User 127962 does not improve AUC. Reverting changes.
Training on augumented user 9823 37/50 current_auc = 0.6867241542689282
User 9823 AUC after training: 0.6865820145930066
User 9823 does not improve AUC. Reverting changes.
Training on augumented user 46058 38/50 current_auc = 0.6867241542689282
User 46058 AUC after training: 0.686818914052876
User 46058 improves AUC. Keeping the model.
Training on augumented user 66473 39/50 current_auc = 0.686818914052876
User 66473 AUC after training: 0.6857291765374776
User 66473 does not improve AUC. Reverting changes.
Training on augumented user 78854 40/50 current_auc = 0.686818914052876
User 78854 AUC after training: 0.6859660759973467
User 78854 does not improve AUC. Reverting changes.
Training on augumented user 43231 41/50 current_auc = 0.686818914052876
User 43231 AUC after training: 0.6865346347010328
User 43231 does not improve AUC. Reverting changes.
Training on augumented user 133116 42/50 current_auc = 0.686818914052876
User 133116 AUC after training: 0.6859660759973467
User 133116 does not improve AUC. Reverting changes.
Training on augumented user 47094 43/50 current_auc = 0.686818914052876
User 47094 AUC after training: 0.6870558135127453
User 47094 improves AUC. Keeping the model.
Training on augumented user 69143 44/50 current_auc = 0.6870558135127453
User 69143 AUC after training: 0.6871505732966929
User 69143 improves AUC. Keeping the model.
Training on augumented user 87118 45/50 current_auc = 0.6871505732966929
User 87118 AUC after training: 0.685255377617739
User 87118 does not improve AUC. Reverting changes.
Training on augumented user 126333 46/50 current_auc = 0.6871505732966929
User 126333 AUC after training: 0.6867715341609021
User 126333 does not improve AUC. Reverting changes.
Training on augumented user 52660 47/50 current_auc = 0.6871505732966929
User 52660 AUC after training: 0.6866767743769545
User 52660 does not improve AUC. Reverting changes.
Training on augumented user 74240 48/50 current_auc = 0.6871505732966929
User 74240 AUC after training: 0.6863451151331375
User 74240 does not improve AUC. Reverting changes.
Training on augumented user 104512 49/50 current_auc = 0.6871505732966929
User 104512 AUC after training: 0.6864872548090591
User 104512 does not improve AUC. Reverting changes.
[2024-12-02 19:10:56.533422] start test user 3971 170/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:10:57.114354] start test user 3971 170/568 recall augumented users by random, augumented_users = [7666, 84485, 18315, 58284, 37218, 77439, 28237, 92222, 94041, 54166, 1904, 53307, 15991, 28505, 28695, 136153, 40873, 105356, 116802, 92637, 79105, 53203, 9148, 6811, 125323, 59160, 111507, 122941, 95917, 51694, 59930, 23184, 107741, 98888, 96734, 74416, 26057, 118446, 94841, 55854, 108823, 123395, 45056, 43282, 119714, 114668, 36646, 56184, 21655, 79504]
[2024-12-02 19:10:57.130488] user = 3971 Cloud 170/568
[2024-12-02 19:10:57.187440] user = 3971 Local 170/568
[2024-12-02 19:10:57.426469] user = 3971 Local+ 170/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:11:00.171644] user = 3971 MPDA- 170/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6181019437925016
Training on augumented user 7666 0/50 current_auc = 0.6181019437925016
User 7666 AUC after training: 0.6179966299572727
User 7666 does not improve AUC. Reverting changes.
Training on augumented user 84485 1/50 current_auc = 0.6181019437925016
User 84485 AUC after training: 0.6192303063128122
User 84485 improves AUC. Keeping the model.
Training on augumented user 18315 2/50 current_auc = 0.6192303063128122
User 18315 AUC after training: 0.6187338268038756
User 18315 does not improve AUC. Reverting changes.
Training on augumented user 58284 3/50 current_auc = 0.6192303063128122
User 58284 AUC after training: 0.6181019437925017
User 58284 does not improve AUC. Reverting changes.
Training on augumented user 37218 4/50 current_auc = 0.6192303063128122
User 37218 AUC after training: 0.6166425949329
User 37218 does not improve AUC. Reverting changes.
Training on augumented user 77439 5/50 current_auc = 0.6192303063128122
User 77439 AUC after training: 0.6182674369621473
User 77439 does not improve AUC. Reverting changes.
Training on augumented user 28237 6/50 current_auc = 0.6192303063128122
User 28237 AUC after training: 0.6192754408136247
User 28237 improves AUC. Keeping the model.
Training on augumented user 92222 7/50 current_auc = 0.6192754408136247
User 92222 AUC after training: 0.6192303063128122
User 92222 does not improve AUC. Reverting changes.
Training on augumented user 94041 8/50 current_auc = 0.6192754408136247
User 94041 AUC after training: 0.6190497683095626
User 94041 does not improve AUC. Reverting changes.
Training on augumented user 54166 9/50 current_auc = 0.6192754408136247
User 54166 AUC after training: 0.6203436239995186
User 54166 improves AUC. Keeping the model.
Training on augumented user 1904 10/50 current_auc = 0.6203436239995186
User 1904 AUC after training: 0.6212613588493712
User 1904 improves AUC. Keeping the model.
Training on augumented user 53307 11/50 current_auc = 0.6212613588493712
User 53307 AUC after training: 0.6217728831919118
User 53307 improves AUC. Keeping the model.
Training on augumented user 15991 12/50 current_auc = 0.6217728831919118
User 15991 AUC after training: 0.6220286453631823
User 15991 improves AUC. Keeping the model.
Training on augumented user 28505 13/50 current_auc = 0.6220286453631823
User 28505 AUC after training: 0.6224799903713065
User 28505 improves AUC. Keeping the model.
Training on augumented user 28695 14/50 current_auc = 0.6224799903713065
User 28695 AUC after training: 0.6221941385328279
User 28695 does not improve AUC. Reverting changes.
Training on augumented user 136153 15/50 current_auc = 0.6224799903713065
User 136153 AUC after training: 0.6215923451886622
User 136153 does not improve AUC. Reverting changes.
Training on augumented user 40873 16/50 current_auc = 0.6224799903713065
User 40873 AUC after training: 0.6229463802130348
User 40873 improves AUC. Keeping the model.
Training on augumented user 105356 17/50 current_auc = 0.6229463802130348
User 105356 AUC after training: 0.6226605283745561
User 105356 does not improve AUC. Reverting changes.
Training on augumented user 116802 18/50 current_auc = 0.6229463802130348
User 116802 AUC after training: 0.6227207077089727
User 116802 does not improve AUC. Reverting changes.
Training on augumented user 92637 19/50 current_auc = 0.6229463802130348
User 92637 AUC after training: 0.6188617078895107
User 92637 does not improve AUC. Reverting changes.
Training on augumented user 79105 20/50 current_auc = 0.6229463802130348
User 79105 AUC after training: 0.6229162905458265
User 79105 does not improve AUC. Reverting changes.
Training on augumented user 53203 21/50 current_auc = 0.6229463802130348
User 53203 AUC after training: 0.6237437563940543
User 53203 improves AUC. Keeping the model.
Training on augumented user 9148 22/50 current_auc = 0.6237437563940543
User 9148 AUC after training: 0.6214418968526207
User 9148 does not improve AUC. Reverting changes.
Training on augumented user 6811 23/50 current_auc = 0.6237437563940543
User 6811 AUC after training: 0.623924294397304
User 6811 improves AUC. Keeping the model.
Training on augumented user 125323 24/50 current_auc = 0.623924294397304
User 125323 AUC after training: 0.6233225010531384
User 125323 does not improve AUC. Reverting changes.
Training on augumented user 59160 25/50 current_auc = 0.623924294397304
User 59160 AUC after training: 0.6236384425588254
User 59160 does not improve AUC. Reverting changes.
Training on augumented user 111507 26/50 current_auc = 0.623924294397304
User 111507 AUC after training: 0.6238641150628874
User 111507 does not improve AUC. Reverting changes.
Training on augumented user 122941 27/50 current_auc = 0.623924294397304
User 122941 AUC after training: 0.6239844737317205
User 122941 improves AUC. Keeping the model.
Training on augumented user 95917 28/50 current_auc = 0.6239844737317205
User 95917 AUC after training: 0.6243154600710117
User 95917 improves AUC. Keeping the model.
Training on augumented user 51694 29/50 current_auc = 0.6243154600710117
User 51694 AUC after training: 0.6243004152374074
User 51694 does not improve AUC. Reverting changes.
Training on augumented user 59930 30/50 current_auc = 0.6243154600710117
User 59930 AUC after training: 0.6241951014021785
User 59930 does not improve AUC. Reverting changes.
Training on augumented user 23184 31/50 current_auc = 0.6243154600710117
User 23184 AUC after training: 0.6236534873924294
User 23184 does not improve AUC. Reverting changes.
Training on augumented user 107741 32/50 current_auc = 0.6243154600710117
User 107741 AUC after training: 0.6244809532406572
User 107741 improves AUC. Keeping the model.
Training on augumented user 98888 33/50 current_auc = 0.6244809532406572
User 98888 AUC after training: 0.624894686164771
User 98888 improves AUC. Keeping the model.
Training on augumented user 96734 34/50 current_auc = 0.624894686164771
User 96734 AUC after training: 0.6246163567430945
User 96734 does not improve AUC. Reverting changes.
Training on augumented user 74416 35/50 current_auc = 0.624894686164771
User 74416 AUC after training: 0.624992477583198
User 74416 improves AUC. Keeping the model.
Training on augumented user 26057 36/50 current_auc = 0.624992477583198
User 26057 AUC after training: 0.6248269844135523
User 26057 does not improve AUC. Reverting changes.
Training on augumented user 118446 37/50 current_auc = 0.624992477583198
User 118446 AUC after training: 0.6249172534151772
User 118446 does not improve AUC. Reverting changes.
Training on augumented user 94841 38/50 current_auc = 0.624992477583198
User 94841 AUC after training: 0.6249774327495938
User 94841 does not improve AUC. Reverting changes.
Training on augumented user 55854 39/50 current_auc = 0.624992477583198
User 55854 AUC after training: 0.6237287115604502
User 55854 does not improve AUC. Reverting changes.
Training on augumented user 108823 40/50 current_auc = 0.624992477583198
User 108823 AUC after training: 0.6242251910693868
User 108823 does not improve AUC. Reverting changes.
Training on augumented user 123395 41/50 current_auc = 0.624992477583198
User 123395 AUC after training: 0.6253535535896972
User 123395 improves AUC. Keeping the model.
Training on augumented user 45056 42/50 current_auc = 0.6253535535896972
User 45056 AUC after training: 0.6253986880905098
User 45056 improves AUC. Keeping the model.
Training on augumented user 43282 43/50 current_auc = 0.6253986880905098
User 43282 AUC after training: 0.6253385087560931
User 43282 does not improve AUC. Reverting changes.
Training on augumented user 119714 44/50 current_auc = 0.6253986880905098
User 119714 AUC after training: 0.6260004814346753
User 119714 improves AUC. Keeping the model.
Training on augumented user 114668 45/50 current_auc = 0.6260004814346753
User 114668 AUC after training: 0.6260080038514775
User 114668 improves AUC. Keeping the model.
Training on augumented user 36646 46/50 current_auc = 0.6260080038514775
User 36646 AUC after training: 0.6256995847625926
User 36646 does not improve AUC. Reverting changes.
Training on augumented user 56184 47/50 current_auc = 0.6260080038514775
User 56184 AUC after training: 0.6255942709273635
User 56184 does not improve AUC. Reverting changes.
Training on augumented user 21655 48/50 current_auc = 0.6260080038514775
User 21655 AUC after training: 0.6253385087560932
User 21655 does not improve AUC. Reverting changes.
Training on augumented user 79504 49/50 current_auc = 0.6260080038514775
User 79504 AUC after training: 0.625970391767467
User 79504 does not improve AUC. Reverting changes.
[2024-12-02 19:11:31.357209] start test user 3986 171/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:11:31.783047] start test user 3986 171/568 recall augumented users by random, augumented_users = [83960, 59070, 28784, 113087, 127091, 130859, 64205, 136082, 41370, 61312, 65489, 36715, 87865, 109095, 118282, 50151, 93712, 74904, 53672, 47839, 5993, 30186, 80354, 55348, 59667, 92547, 49242, 117481, 77066, 46642, 18565, 98328, 103047, 104639, 17266, 48259, 60654, 128556, 134218, 100011, 125954, 113173, 20692, 48147, 51401, 124339, 93467, 45343, 132556, 118728]
[2024-12-02 19:11:31.797998] user = 3986 Cloud 171/568
[2024-12-02 19:11:31.807505] user = 3986 Local 171/568
[2024-12-02 19:11:31.897147] user = 3986 Local+ 171/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:11:34.619424] user = 3986 MPDA- 171/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.75
Training on augumented user 83960 0/50 current_auc = 0.75
User 83960 AUC after training: 0.75
User 83960 does not improve AUC. Reverting changes.
Training on augumented user 59070 1/50 current_auc = 0.75
User 59070 AUC after training: 0.75
User 59070 does not improve AUC. Reverting changes.
Training on augumented user 28784 2/50 current_auc = 0.75
User 28784 AUC after training: 0.75
User 28784 does not improve AUC. Reverting changes.
Training on augumented user 113087 3/50 current_auc = 0.75
User 113087 AUC after training: 0.75
User 113087 does not improve AUC. Reverting changes.
Training on augumented user 127091 4/50 current_auc = 0.75
User 127091 AUC after training: 0.75
User 127091 does not improve AUC. Reverting changes.
Training on augumented user 130859 5/50 current_auc = 0.75
User 130859 AUC after training: 0.75
User 130859 does not improve AUC. Reverting changes.
Training on augumented user 64205 6/50 current_auc = 0.75
User 64205 AUC after training: 0.75
User 64205 does not improve AUC. Reverting changes.
Training on augumented user 136082 7/50 current_auc = 0.75
User 136082 AUC after training: 0.75
User 136082 does not improve AUC. Reverting changes.
Training on augumented user 41370 8/50 current_auc = 0.75
User 41370 AUC after training: 0.75
User 41370 does not improve AUC. Reverting changes.
Training on augumented user 61312 9/50 current_auc = 0.75
User 61312 AUC after training: 0.75
User 61312 does not improve AUC. Reverting changes.
Training on augumented user 65489 10/50 current_auc = 0.75
User 65489 AUC after training: 0.75
User 65489 does not improve AUC. Reverting changes.
Training on augumented user 36715 11/50 current_auc = 0.75
User 36715 AUC after training: 0.75
User 36715 does not improve AUC. Reverting changes.
Training on augumented user 87865 12/50 current_auc = 0.75
User 87865 AUC after training: 0.75
User 87865 does not improve AUC. Reverting changes.
Training on augumented user 109095 13/50 current_auc = 0.75
User 109095 AUC after training: 0.75
User 109095 does not improve AUC. Reverting changes.
Training on augumented user 118282 14/50 current_auc = 0.75
User 118282 AUC after training: 0.75
User 118282 does not improve AUC. Reverting changes.
Training on augumented user 50151 15/50 current_auc = 0.75
User 50151 AUC after training: 0.75
User 50151 does not improve AUC. Reverting changes.
Training on augumented user 93712 16/50 current_auc = 0.75
User 93712 AUC after training: 0.75
User 93712 does not improve AUC. Reverting changes.
Training on augumented user 74904 17/50 current_auc = 0.75
User 74904 AUC after training: 0.75
User 74904 does not improve AUC. Reverting changes.
Training on augumented user 53672 18/50 current_auc = 0.75
User 53672 AUC after training: 0.75
User 53672 does not improve AUC. Reverting changes.
Training on augumented user 47839 19/50 current_auc = 0.75
User 47839 AUC after training: 0.75
User 47839 does not improve AUC. Reverting changes.
Training on augumented user 5993 20/50 current_auc = 0.75
User 5993 AUC after training: 0.75
User 5993 does not improve AUC. Reverting changes.
Training on augumented user 30186 21/50 current_auc = 0.75
User 30186 AUC after training: 0.75
User 30186 does not improve AUC. Reverting changes.
Training on augumented user 80354 22/50 current_auc = 0.75
User 80354 AUC after training: 0.75
User 80354 does not improve AUC. Reverting changes.
Training on augumented user 55348 23/50 current_auc = 0.75
User 55348 AUC after training: 0.75
User 55348 does not improve AUC. Reverting changes.
Training on augumented user 59667 24/50 current_auc = 0.75
User 59667 AUC after training: 0.75
User 59667 does not improve AUC. Reverting changes.
Training on augumented user 92547 25/50 current_auc = 0.75
User 92547 AUC after training: 0.75
User 92547 does not improve AUC. Reverting changes.
Training on augumented user 49242 26/50 current_auc = 0.75
User 49242 AUC after training: 0.75
User 49242 does not improve AUC. Reverting changes.
Training on augumented user 117481 27/50 current_auc = 0.75
User 117481 AUC after training: 0.75
User 117481 does not improve AUC. Reverting changes.
Training on augumented user 77066 28/50 current_auc = 0.75
User 77066 AUC after training: 0.75
User 77066 does not improve AUC. Reverting changes.
Training on augumented user 46642 29/50 current_auc = 0.75
User 46642 AUC after training: 0.75
User 46642 does not improve AUC. Reverting changes.
Training on augumented user 18565 30/50 current_auc = 0.75
User 18565 AUC after training: 0.75
User 18565 does not improve AUC. Reverting changes.
Training on augumented user 98328 31/50 current_auc = 0.75
User 98328 AUC after training: 0.75
User 98328 does not improve AUC. Reverting changes.
Training on augumented user 103047 32/50 current_auc = 0.75
User 103047 AUC after training: 0.75
User 103047 does not improve AUC. Reverting changes.
Training on augumented user 104639 33/50 current_auc = 0.75
User 104639 AUC after training: 0.75
User 104639 does not improve AUC. Reverting changes.
Training on augumented user 17266 34/50 current_auc = 0.75
User 17266 AUC after training: 0.75
User 17266 does not improve AUC. Reverting changes.
Training on augumented user 48259 35/50 current_auc = 0.75
User 48259 AUC after training: 0.75
User 48259 does not improve AUC. Reverting changes.
Training on augumented user 60654 36/50 current_auc = 0.75
User 60654 AUC after training: 0.75
User 60654 does not improve AUC. Reverting changes.
Training on augumented user 128556 37/50 current_auc = 0.75
User 128556 AUC after training: 0.75
User 128556 does not improve AUC. Reverting changes.
Training on augumented user 134218 38/50 current_auc = 0.75
User 134218 AUC after training: 0.75
User 134218 does not improve AUC. Reverting changes.
Training on augumented user 100011 39/50 current_auc = 0.75
User 100011 AUC after training: 0.75
User 100011 does not improve AUC. Reverting changes.
Training on augumented user 125954 40/50 current_auc = 0.75
User 125954 AUC after training: 0.75
User 125954 does not improve AUC. Reverting changes.
Training on augumented user 113173 41/50 current_auc = 0.75
User 113173 AUC after training: 0.75
User 113173 does not improve AUC. Reverting changes.
Training on augumented user 20692 42/50 current_auc = 0.75
User 20692 AUC after training: 0.75
User 20692 does not improve AUC. Reverting changes.
Training on augumented user 48147 43/50 current_auc = 0.75
User 48147 AUC after training: 0.75
User 48147 does not improve AUC. Reverting changes.
Training on augumented user 51401 44/50 current_auc = 0.75
User 51401 AUC after training: 0.75
User 51401 does not improve AUC. Reverting changes.
Training on augumented user 124339 45/50 current_auc = 0.75
User 124339 AUC after training: 0.75
User 124339 does not improve AUC. Reverting changes.
Training on augumented user 93467 46/50 current_auc = 0.75
User 93467 AUC after training: 0.75
User 93467 does not improve AUC. Reverting changes.
Training on augumented user 45343 47/50 current_auc = 0.75
User 45343 AUC after training: 0.75
User 45343 does not improve AUC. Reverting changes.
Training on augumented user 132556 48/50 current_auc = 0.75
User 132556 AUC after training: 0.75
User 132556 does not improve AUC. Reverting changes.
Training on augumented user 118728 49/50 current_auc = 0.75
User 118728 AUC after training: 0.75
User 118728 does not improve AUC. Reverting changes.
[2024-12-02 19:12:04.408413] start test user 3989 172/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:12:04.906606] start test user 3989 172/568 recall augumented users by random, augumented_users = [77689, 34623, 77147, 932, 97261, 97885, 50046, 131439, 95780, 19487, 105199, 105275, 71290, 1521, 79271, 53036, 58220, 57011, 12099, 135350, 79069, 32240, 102884, 91136, 5650, 37124, 9796, 80252, 35536, 89385, 33071, 37458, 36700, 94691, 97115, 64844, 129312, 75248, 104671, 123724, 47042, 17104, 109039, 106385, 99357, 40149, 107754, 66013, 87495, 131168]
[2024-12-02 19:12:04.921455] user = 3989 Cloud 172/568
[2024-12-02 19:12:04.931431] user = 3989 Local 172/568
[2024-12-02 19:12:04.980317] user = 3989 Local+ 172/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:12:06.926767] user = 3989 MPDA- 172/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.9166666666666667
Training on augumented user 77689 0/50 current_auc = 0.9166666666666667
User 77689 AUC after training: 0.9166666666666667
User 77689 does not improve AUC. Reverting changes.
Training on augumented user 34623 1/50 current_auc = 0.9166666666666667
User 34623 AUC after training: 0.8958333333333333
User 34623 does not improve AUC. Reverting changes.
Training on augumented user 77147 2/50 current_auc = 0.9166666666666667
User 77147 AUC after training: 0.8958333333333333
User 77147 does not improve AUC. Reverting changes.
Training on augumented user 932 3/50 current_auc = 0.9166666666666667
User 932 AUC after training: 0.8958333333333333
User 932 does not improve AUC. Reverting changes.
Training on augumented user 97261 4/50 current_auc = 0.9166666666666667
User 97261 AUC after training: 0.9166666666666667
User 97261 does not improve AUC. Reverting changes.
Training on augumented user 97885 5/50 current_auc = 0.9166666666666667
User 97885 AUC after training: 0.9166666666666667
User 97885 does not improve AUC. Reverting changes.
Training on augumented user 50046 6/50 current_auc = 0.9166666666666667
User 50046 AUC after training: 0.9166666666666667
User 50046 does not improve AUC. Reverting changes.
Training on augumented user 131439 7/50 current_auc = 0.9166666666666667
User 131439 AUC after training: 0.9166666666666667
User 131439 does not improve AUC. Reverting changes.
Training on augumented user 95780 8/50 current_auc = 0.9166666666666667
User 95780 AUC after training: 0.9166666666666667
User 95780 does not improve AUC. Reverting changes.
Training on augumented user 19487 9/50 current_auc = 0.9166666666666667
User 19487 AUC after training: 0.9166666666666667
User 19487 does not improve AUC. Reverting changes.
Training on augumented user 105199 10/50 current_auc = 0.9166666666666667
User 105199 AUC after training: 0.9166666666666667
User 105199 does not improve AUC. Reverting changes.
Training on augumented user 105275 11/50 current_auc = 0.9166666666666667
User 105275 AUC after training: 0.8958333333333333
User 105275 does not improve AUC. Reverting changes.
Training on augumented user 71290 12/50 current_auc = 0.9166666666666667
User 71290 AUC after training: 0.8958333333333333
User 71290 does not improve AUC. Reverting changes.
Training on augumented user 1521 13/50 current_auc = 0.9166666666666667
User 1521 AUC after training: 0.9166666666666667
User 1521 does not improve AUC. Reverting changes.
Training on augumented user 79271 14/50 current_auc = 0.9166666666666667
User 79271 AUC after training: 0.9166666666666667
User 79271 does not improve AUC. Reverting changes.
Training on augumented user 53036 15/50 current_auc = 0.9166666666666667
User 53036 AUC after training: 0.9166666666666667
User 53036 does not improve AUC. Reverting changes.
Training on augumented user 58220 16/50 current_auc = 0.9166666666666667
User 58220 AUC after training: 0.9166666666666667
User 58220 does not improve AUC. Reverting changes.
Training on augumented user 57011 17/50 current_auc = 0.9166666666666667
User 57011 AUC after training: 0.9166666666666667
User 57011 does not improve AUC. Reverting changes.
Training on augumented user 12099 18/50 current_auc = 0.9166666666666667
User 12099 AUC after training: 0.9166666666666667
User 12099 does not improve AUC. Reverting changes.
Training on augumented user 135350 19/50 current_auc = 0.9166666666666667
User 135350 AUC after training: 0.9166666666666667
User 135350 does not improve AUC. Reverting changes.
Training on augumented user 79069 20/50 current_auc = 0.9166666666666667
User 79069 AUC after training: 0.9166666666666667
User 79069 does not improve AUC. Reverting changes.
Training on augumented user 32240 21/50 current_auc = 0.9166666666666667
User 32240 AUC after training: 0.9166666666666667
User 32240 does not improve AUC. Reverting changes.
Training on augumented user 102884 22/50 current_auc = 0.9166666666666667
User 102884 AUC after training: 0.9166666666666667
User 102884 does not improve AUC. Reverting changes.
Training on augumented user 91136 23/50 current_auc = 0.9166666666666667
User 91136 AUC after training: 0.9166666666666667
User 91136 does not improve AUC. Reverting changes.
Training on augumented user 5650 24/50 current_auc = 0.9166666666666667
User 5650 AUC after training: 0.8958333333333333
User 5650 does not improve AUC. Reverting changes.
Training on augumented user 37124 25/50 current_auc = 0.9166666666666667
User 37124 AUC after training: 0.8958333333333333
User 37124 does not improve AUC. Reverting changes.
Training on augumented user 9796 26/50 current_auc = 0.9166666666666667
User 9796 AUC after training: 0.8958333333333333
User 9796 does not improve AUC. Reverting changes.
Training on augumented user 80252 27/50 current_auc = 0.9166666666666667
User 80252 AUC after training: 0.8958333333333333
User 80252 does not improve AUC. Reverting changes.
Training on augumented user 35536 28/50 current_auc = 0.9166666666666667
User 35536 AUC after training: 0.9166666666666667
User 35536 does not improve AUC. Reverting changes.
Training on augumented user 89385 29/50 current_auc = 0.9166666666666667
User 89385 AUC after training: 0.8958333333333333
User 89385 does not improve AUC. Reverting changes.
Training on augumented user 33071 30/50 current_auc = 0.9166666666666667
User 33071 AUC after training: 0.9166666666666667
User 33071 does not improve AUC. Reverting changes.
Training on augumented user 37458 31/50 current_auc = 0.9166666666666667
User 37458 AUC after training: 0.9166666666666667
User 37458 does not improve AUC. Reverting changes.
Training on augumented user 36700 32/50 current_auc = 0.9166666666666667
User 36700 AUC after training: 0.8958333333333333
User 36700 does not improve AUC. Reverting changes.
Training on augumented user 94691 33/50 current_auc = 0.9166666666666667
User 94691 AUC after training: 0.9166666666666667
User 94691 does not improve AUC. Reverting changes.
Training on augumented user 97115 34/50 current_auc = 0.9166666666666667
User 97115 AUC after training: 0.9166666666666667
User 97115 does not improve AUC. Reverting changes.
Training on augumented user 64844 35/50 current_auc = 0.9166666666666667
User 64844 AUC after training: 0.9166666666666667
User 64844 does not improve AUC. Reverting changes.
Training on augumented user 129312 36/50 current_auc = 0.9166666666666667
User 129312 AUC after training: 0.9166666666666667
User 129312 does not improve AUC. Reverting changes.
Training on augumented user 75248 37/50 current_auc = 0.9166666666666667
User 75248 AUC after training: 0.9166666666666667
User 75248 does not improve AUC. Reverting changes.
Training on augumented user 104671 38/50 current_auc = 0.9166666666666667
User 104671 AUC after training: 0.9166666666666667
User 104671 does not improve AUC. Reverting changes.
Training on augumented user 123724 39/50 current_auc = 0.9166666666666667
User 123724 AUC after training: 0.8958333333333333
User 123724 does not improve AUC. Reverting changes.
Training on augumented user 47042 40/50 current_auc = 0.9166666666666667
User 47042 AUC after training: 0.8958333333333333
User 47042 does not improve AUC. Reverting changes.
Training on augumented user 17104 41/50 current_auc = 0.9166666666666667
User 17104 AUC after training: 0.9166666666666667
User 17104 does not improve AUC. Reverting changes.
Training on augumented user 109039 42/50 current_auc = 0.9166666666666667
User 109039 AUC after training: 0.9166666666666667
User 109039 does not improve AUC. Reverting changes.
Training on augumented user 106385 43/50 current_auc = 0.9166666666666667
User 106385 AUC after training: 0.9166666666666667
User 106385 does not improve AUC. Reverting changes.
Training on augumented user 99357 44/50 current_auc = 0.9166666666666667
User 99357 AUC after training: 0.9166666666666667
User 99357 does not improve AUC. Reverting changes.
Training on augumented user 40149 45/50 current_auc = 0.9166666666666667
User 40149 AUC after training: 0.9166666666666667
User 40149 does not improve AUC. Reverting changes.
Training on augumented user 107754 46/50 current_auc = 0.9166666666666667
User 107754 AUC after training: 0.8958333333333333
User 107754 does not improve AUC. Reverting changes.
Training on augumented user 66013 47/50 current_auc = 0.9166666666666667
User 66013 AUC after training: 0.8958333333333333
User 66013 does not improve AUC. Reverting changes.
Training on augumented user 87495 48/50 current_auc = 0.9166666666666667
User 87495 AUC after training: 0.9166666666666667
User 87495 does not improve AUC. Reverting changes.
Training on augumented user 131168 49/50 current_auc = 0.9166666666666667
User 131168 AUC after training: 0.9166666666666667
User 131168 does not improve AUC. Reverting changes.
[2024-12-02 19:12:34.171631] start test user 4034 173/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:12:34.656127] start test user 4034 173/568 recall augumented users by random, augumented_users = [51898, 79807, 27531, 63000, 8092, 67524, 64517, 117239, 31072, 19589, 6751, 65595, 40984, 66904, 132993, 59497, 22132, 8146, 62466, 117073, 56957, 125848, 68437, 12436, 105491, 62840, 132205, 39044, 113196, 51265, 45195, 83498, 48657, 27998, 83130, 68857, 131659, 89602, 77446, 7233, 17169, 127990, 56498, 57464, 32918, 134164, 62849, 128609, 123180, 127133]
[2024-12-02 19:12:34.670562] user = 4034 Cloud 173/568
[2024-12-02 19:12:34.715106] user = 4034 Local 173/568
[2024-12-02 19:12:34.763373] user = 4034 Local+ 173/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:12:37.194337] user = 4034 MPDA- 173/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.730738545703214
Training on augumented user 51898 0/50 current_auc = 0.730738545703214
User 51898 AUC after training: 0.7309664919079097
User 51898 improves AUC. Keeping the model.
Training on augumented user 79807 1/50 current_auc = 0.7309664919079097
User 79807 AUC after training: 0.7306245726008662
User 79807 does not improve AUC. Reverting changes.
Training on augumented user 27531 2/50 current_auc = 0.7309664919079097
User 27531 AUC after training: 0.7311944381126055
User 27531 improves AUC. Keeping the model.
Training on augumented user 63000 3/50 current_auc = 0.7311944381126055
User 63000 AUC after training: 0.730795532254388
User 63000 does not improve AUC. Reverting changes.
Training on augumented user 8092 4/50 current_auc = 0.7311944381126055
User 8092 AUC after training: 0.7316503305219968
User 8092 improves AUC. Keeping the model.
Training on augumented user 67524 5/50 current_auc = 0.7316503305219968
User 67524 AUC after training: 0.7315648506952359
User 67524 does not improve AUC. Reverting changes.
Training on augumented user 64517 6/50 current_auc = 0.7316503305219968
User 64517 AUC after training: 0.7308382721677684
User 64517 does not improve AUC. Reverting changes.
Training on augumented user 117239 7/50 current_auc = 0.7316503305219968
User 117239 AUC after training: 0.7309522452701163
User 117239 does not improve AUC. Reverting changes.
Training on augumented user 31072 8/50 current_auc = 0.7316503305219968
User 31072 AUC after training: 0.7308240255299749
User 31072 does not improve AUC. Reverting changes.
Training on augumented user 19589 9/50 current_auc = 0.7316503305219968
User 19589 AUC after training: 0.7308525188055619
User 19589 does not improve AUC. Reverting changes.
Training on augumented user 6751 10/50 current_auc = 0.7316503305219968
User 6751 AUC after training: 0.7316930704353773
User 6751 improves AUC. Keeping the model.
Training on augumented user 65595 11/50 current_auc = 0.7316930704353773
User 65595 AUC after training: 0.7308240255299748
User 65595 does not improve AUC. Reverting changes.
Training on augumented user 40984 12/50 current_auc = 0.7316930704353773
User 40984 AUC after training: 0.7314793708684751
User 40984 does not improve AUC. Reverting changes.
Training on augumented user 66904 13/50 current_auc = 0.7316930704353773
User 66904 AUC after training: 0.7315221107818555
User 66904 does not improve AUC. Reverting changes.
Training on augumented user 132993 14/50 current_auc = 0.7316930704353773
User 132993 AUC after training: 0.7308097788921813
User 132993 does not improve AUC. Reverting changes.
Training on augumented user 59497 15/50 current_auc = 0.7316930704353773
User 59497 AUC after training: 0.7313369044905402
User 59497 does not improve AUC. Reverting changes.
Training on augumented user 22132 16/50 current_auc = 0.7316930704353773
User 22132 AUC after training: 0.7316788237975838
User 22132 does not improve AUC. Reverting changes.
Training on augumented user 8146 17/50 current_auc = 0.7316930704353773
User 8146 AUC after training: 0.7310804650102576
User 8146 does not improve AUC. Reverting changes.
Training on augumented user 62466 18/50 current_auc = 0.7316930704353773
User 62466 AUC after training: 0.7317358103487577
User 62466 improves AUC. Keeping the model.
Training on augumented user 117073 19/50 current_auc = 0.7317358103487577
User 117073 AUC after training: 0.7313369044905401
User 117073 does not improve AUC. Reverting changes.
Training on augumented user 56957 20/50 current_auc = 0.7317358103487577
User 56957 AUC after training: 0.7325906086163666
User 56957 improves AUC. Keeping the model.
Training on augumented user 125848 21/50 current_auc = 0.7325906086163666
User 125848 AUC after training: 0.7323484157738773
User 125848 does not improve AUC. Reverting changes.
Training on augumented user 68437 22/50 current_auc = 0.7325906086163666
User 68437 AUC after training: 0.7324766355140188
User 68437 does not improve AUC. Reverting changes.
Training on augumented user 12436 23/50 current_auc = 0.7325906086163666
User 12436 AUC after training: 0.7319210166400729
User 12436 does not improve AUC. Reverting changes.
Training on augumented user 105491 24/50 current_auc = 0.7325906086163666
User 105491 AUC after training: 0.7320777296558012
User 105491 does not improve AUC. Reverting changes.
Training on augumented user 62840 25/50 current_auc = 0.7325906086163666
User 62840 AUC after training: 0.7323199224982905
User 62840 does not improve AUC. Reverting changes.
Training on augumented user 132205 26/50 current_auc = 0.7325906086163666
User 132205 AUC after training: 0.7323626624116708
User 132205 does not improve AUC. Reverting changes.
Training on augumented user 39044 27/50 current_auc = 0.7325906086163666
User 39044 AUC after training: 0.7322344426715296
User 39044 does not improve AUC. Reverting changes.
Training on augumented user 113196 28/50 current_auc = 0.7325906086163666
User 113196 AUC after training: 0.7326760884431275
User 113196 improves AUC. Keeping the model.
Training on augumented user 51265 29/50 current_auc = 0.7326760884431275
User 51265 AUC after training: 0.7325336220651927
User 51265 does not improve AUC. Reverting changes.
Training on augumented user 45195 30/50 current_auc = 0.7326760884431275
User 45195 AUC after training: 0.7325621153407795
User 45195 does not improve AUC. Reverting changes.
Training on augumented user 83498 31/50 current_auc = 0.7326760884431275
User 83498 AUC after training: 0.7319352632778664
User 83498 does not improve AUC. Reverting changes.
Training on augumented user 48657 32/50 current_auc = 0.7326760884431275
User 48657 AUC after training: 0.7317785502621381
User 48657 does not improve AUC. Reverting changes.
Training on augumented user 27998 33/50 current_auc = 0.7326760884431275
User 27998 AUC after training: 0.7320492363802142
User 27998 does not improve AUC. Reverting changes.
Training on augumented user 83130 34/50 current_auc = 0.7326760884431275
User 83130 AUC after training: 0.7323484157738774
User 83130 does not improve AUC. Reverting changes.
Training on augumented user 68857 35/50 current_auc = 0.7326760884431275
User 68857 AUC after training: 0.732220196033736
User 68857 does not improve AUC. Reverting changes.
Training on augumented user 131659 36/50 current_auc = 0.7326760884431275
User 131659 AUC after training: 0.732191702758149
User 131659 does not improve AUC. Reverting changes.
Training on augumented user 89602 37/50 current_auc = 0.7326760884431275
User 89602 AUC after training: 0.7325336220651927
User 89602 does not improve AUC. Reverting changes.
Training on augumented user 77446 38/50 current_auc = 0.7326760884431275
User 77446 AUC after training: 0.7325621153407795
User 77446 does not improve AUC. Reverting changes.
Training on augumented user 7233 39/50 current_auc = 0.7326760884431275
User 7233 AUC after training: 0.7320207431046274
User 7233 does not improve AUC. Reverting changes.
Training on augumented user 17169 40/50 current_auc = 0.7326760884431275
User 17169 AUC after training: 0.7327473216320948
User 17169 improves AUC. Keeping the model.
Training on augumented user 127990 41/50 current_auc = 0.7327473216320948
User 127990 AUC after training: 0.7330322543879644
User 127990 improves AUC. Keeping the model.
Training on augumented user 56498 42/50 current_auc = 0.7330322543879644
User 56498 AUC after training: 0.7329610211989971
User 56498 does not improve AUC. Reverting changes.
Training on augumented user 57464 43/50 current_auc = 0.7330322543879644
User 57464 AUC after training: 0.7325906086163665
User 57464 does not improve AUC. Reverting changes.
Training on augumented user 32918 44/50 current_auc = 0.7330322543879644
User 32918 AUC after training: 0.7327330749943013
User 32918 does not improve AUC. Reverting changes.
Training on augumented user 134164 45/50 current_auc = 0.7330322543879644
User 134164 AUC after training: 0.7327615682698883
User 134164 does not improve AUC. Reverting changes.
Training on augumented user 62849 46/50 current_auc = 0.7330322543879644
User 62849 AUC after training: 0.7324338956006383
User 62849 does not improve AUC. Reverting changes.
Training on augumented user 128609 47/50 current_auc = 0.7330322543879644
User 128609 AUC after training: 0.7327900615454753
User 128609 does not improve AUC. Reverting changes.
Training on augumented user 123180 48/50 current_auc = 0.7330322543879644
User 123180 AUC after training: 0.7328185548210622
User 123180 does not improve AUC. Reverting changes.
Training on augumented user 127133 49/50 current_auc = 0.7330322543879644
User 127133 AUC after training: 0.7327045817187144
User 127133 does not improve AUC. Reverting changes.
[2024-12-02 19:13:07.738301] start test user 4065 174/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:13:08.243723] start test user 4065 174/568 recall augumented users by random, augumented_users = [122924, 58044, 64650, 93313, 92715, 93861, 78310, 49040, 2883, 130213, 59144, 16779, 40916, 5559, 57476, 3454, 684, 129443, 122140, 37413, 86139, 104898, 120337, 76646, 112400, 126860, 10269, 30086, 549, 102432, 12140, 92678, 5768, 64705, 109974, 119280, 68912, 54484, 8456, 83148, 125440, 86033, 121955, 129399, 35426, 46505, 30607, 8372, 10160, 81746]
[2024-12-02 19:13:08.259844] user = 4065 Cloud 174/568
[2024-12-02 19:13:08.281509] user = 4065 Local 174/568
[2024-12-02 19:13:08.353233] user = 4065 Local+ 174/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:13:10.966220] user = 4065 MPDA- 174/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5172619047619047
Training on augumented user 122924 0/50 current_auc = 0.5172619047619047
User 122924 AUC after training: 0.518452380952381
User 122924 improves AUC. Keeping the model.
Training on augumented user 58044 1/50 current_auc = 0.518452380952381
User 58044 AUC after training: 0.518452380952381
User 58044 does not improve AUC. Reverting changes.
Training on augumented user 64650 2/50 current_auc = 0.518452380952381
User 64650 AUC after training: 0.518452380952381
User 64650 does not improve AUC. Reverting changes.
Training on augumented user 93313 3/50 current_auc = 0.518452380952381
User 93313 AUC after training: 0.518452380952381
User 93313 does not improve AUC. Reverting changes.
Training on augumented user 92715 4/50 current_auc = 0.518452380952381
User 92715 AUC after training: 0.5166666666666666
User 92715 does not improve AUC. Reverting changes.
Training on augumented user 93861 5/50 current_auc = 0.518452380952381
User 93861 AUC after training: 0.5196428571428572
User 93861 improves AUC. Keeping the model.
Training on augumented user 78310 6/50 current_auc = 0.5196428571428572
User 78310 AUC after training: 0.5172619047619048
User 78310 does not improve AUC. Reverting changes.
Training on augumented user 49040 7/50 current_auc = 0.5196428571428572
User 49040 AUC after training: 0.5172619047619048
User 49040 does not improve AUC. Reverting changes.
Training on augumented user 2883 8/50 current_auc = 0.5196428571428572
User 2883 AUC after training: 0.5196428571428571
User 2883 does not improve AUC. Reverting changes.
Training on augumented user 130213 9/50 current_auc = 0.5196428571428572
User 130213 AUC after training: 0.518452380952381
User 130213 does not improve AUC. Reverting changes.
Training on augumented user 59144 10/50 current_auc = 0.5196428571428572
User 59144 AUC after training: 0.518452380952381
User 59144 does not improve AUC. Reverting changes.
Training on augumented user 16779 11/50 current_auc = 0.5196428571428572
User 16779 AUC after training: 0.518452380952381
User 16779 does not improve AUC. Reverting changes.
Training on augumented user 40916 12/50 current_auc = 0.5196428571428572
User 40916 AUC after training: 0.5208333333333334
User 40916 improves AUC. Keeping the model.
Training on augumented user 5559 13/50 current_auc = 0.5208333333333334
User 5559 AUC after training: 0.5208333333333334
User 5559 does not improve AUC. Reverting changes.
Training on augumented user 57476 14/50 current_auc = 0.5208333333333334
User 57476 AUC after training: 0.5208333333333334
User 57476 does not improve AUC. Reverting changes.
Training on augumented user 3454 15/50 current_auc = 0.5208333333333334
User 3454 AUC after training: 0.5208333333333334
User 3454 does not improve AUC. Reverting changes.
Training on augumented user 684 16/50 current_auc = 0.5208333333333334
User 684 AUC after training: 0.5208333333333334
User 684 does not improve AUC. Reverting changes.
Training on augumented user 129443 17/50 current_auc = 0.5208333333333334
User 129443 AUC after training: 0.5196428571428571
User 129443 does not improve AUC. Reverting changes.
Training on augumented user 122140 18/50 current_auc = 0.5208333333333334
User 122140 AUC after training: 0.5196428571428571
User 122140 does not improve AUC. Reverting changes.
Training on augumented user 37413 19/50 current_auc = 0.5208333333333334
User 37413 AUC after training: 0.5220238095238096
User 37413 improves AUC. Keeping the model.
Training on augumented user 86139 20/50 current_auc = 0.5220238095238096
User 86139 AUC after training: 0.5220238095238096
User 86139 does not improve AUC. Reverting changes.
Training on augumented user 104898 21/50 current_auc = 0.5220238095238096
User 104898 AUC after training: 0.5214285714285715
User 104898 does not improve AUC. Reverting changes.
Training on augumented user 120337 22/50 current_auc = 0.5220238095238096
User 120337 AUC after training: 0.5220238095238096
User 120337 does not improve AUC. Reverting changes.
Training on augumented user 76646 23/50 current_auc = 0.5220238095238096
User 76646 AUC after training: 0.5208333333333333
User 76646 does not improve AUC. Reverting changes.
Training on augumented user 112400 24/50 current_auc = 0.5220238095238096
User 112400 AUC after training: 0.5220238095238096
User 112400 does not improve AUC. Reverting changes.
Training on augumented user 126860 25/50 current_auc = 0.5220238095238096
User 126860 AUC after training: 0.5238095238095238
User 126860 improves AUC. Keeping the model.
Training on augumented user 10269 26/50 current_auc = 0.5238095238095238
User 10269 AUC after training: 0.5214285714285714
User 10269 does not improve AUC. Reverting changes.
Training on augumented user 30086 27/50 current_auc = 0.5238095238095238
User 30086 AUC after training: 0.525
User 30086 improves AUC. Keeping the model.
Training on augumented user 549 28/50 current_auc = 0.525
User 549 AUC after training: 0.5226190476190476
User 549 does not improve AUC. Reverting changes.
Training on augumented user 102432 29/50 current_auc = 0.525
User 102432 AUC after training: 0.5220238095238096
User 102432 does not improve AUC. Reverting changes.
Training on augumented user 12140 30/50 current_auc = 0.525
User 12140 AUC after training: 0.5202380952380952
User 12140 does not improve AUC. Reverting changes.
Training on augumented user 92678 31/50 current_auc = 0.525
User 92678 AUC after training: 0.525
User 92678 does not improve AUC. Reverting changes.
Training on augumented user 5768 32/50 current_auc = 0.525
User 5768 AUC after training: 0.5178571428571428
User 5768 does not improve AUC. Reverting changes.
Training on augumented user 64705 33/50 current_auc = 0.525
User 64705 AUC after training: 0.5184523809523809
User 64705 does not improve AUC. Reverting changes.
Training on augumented user 109974 34/50 current_auc = 0.525
User 109974 AUC after training: 0.5220238095238096
User 109974 does not improve AUC. Reverting changes.
Training on augumented user 119280 35/50 current_auc = 0.525
User 119280 AUC after training: 0.5214285714285714
User 119280 does not improve AUC. Reverting changes.
Training on augumented user 68912 36/50 current_auc = 0.525
User 68912 AUC after training: 0.525
User 68912 does not improve AUC. Reverting changes.
Training on augumented user 54484 37/50 current_auc = 0.525
User 54484 AUC after training: 0.5226190476190476
User 54484 does not improve AUC. Reverting changes.
Training on augumented user 8456 38/50 current_auc = 0.525
User 8456 AUC after training: 0.5178571428571428
User 8456 does not improve AUC. Reverting changes.
Training on augumented user 83148 39/50 current_auc = 0.525
User 83148 AUC after training: 0.5238095238095238
User 83148 does not improve AUC. Reverting changes.
Training on augumented user 125440 40/50 current_auc = 0.525
User 125440 AUC after training: 0.5208333333333333
User 125440 does not improve AUC. Reverting changes.
Training on augumented user 86033 41/50 current_auc = 0.525
User 86033 AUC after training: 0.5208333333333334
User 86033 does not improve AUC. Reverting changes.
Training on augumented user 121955 42/50 current_auc = 0.525
User 121955 AUC after training: 0.5172619047619047
User 121955 does not improve AUC. Reverting changes.
Training on augumented user 129399 43/50 current_auc = 0.525
User 129399 AUC after training: 0.5196428571428571
User 129399 does not improve AUC. Reverting changes.
Training on augumented user 35426 44/50 current_auc = 0.525
User 35426 AUC after training: 0.5226190476190476
User 35426 does not improve AUC. Reverting changes.
Training on augumented user 46505 45/50 current_auc = 0.525
User 46505 AUC after training: 0.5226190476190476
User 46505 does not improve AUC. Reverting changes.
Training on augumented user 30607 46/50 current_auc = 0.525
User 30607 AUC after training: 0.519047619047619
User 30607 does not improve AUC. Reverting changes.
Training on augumented user 8372 47/50 current_auc = 0.525
User 8372 AUC after training: 0.5214285714285714
User 8372 does not improve AUC. Reverting changes.
Training on augumented user 10160 48/50 current_auc = 0.525
User 10160 AUC after training: 0.5208333333333334
User 10160 does not improve AUC. Reverting changes.
Training on augumented user 81746 49/50 current_auc = 0.525
User 81746 AUC after training: 0.5214285714285714
User 81746 does not improve AUC. Reverting changes.
[2024-12-02 19:13:33.551974] start test user 4089 175/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:13:33.983946] start test user 4089 175/568 recall augumented users by random, augumented_users = [88691, 134639, 36020, 44872, 46985, 4089, 20760, 124048, 56016, 138448, 116885, 19015, 138110, 54618, 111179, 5301, 29275, 54473, 95034, 58237, 1351, 124497, 111914, 125609, 46994, 54891, 95318, 129948, 98972, 49874, 65534, 112297, 118688, 33481, 6710, 106484, 64317, 14463, 19247, 11836, 120232, 120367, 63448, 90292, 68118, 41745, 71570, 83068, 106375, 1063]
[2024-12-02 19:13:33.999216] user = 4089 Cloud 175/568
[2024-12-02 19:13:34.034287] user = 4089 Local 175/568
[2024-12-02 19:13:34.285451] user = 4089 Local+ 175/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:13:36.348090] user = 4089 MPDA- 175/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7
Training on augumented user 88691 0/50 current_auc = 0.7
User 88691 AUC after training: 0.7009345794392522
User 88691 improves AUC. Keeping the model.
Training on augumented user 134639 1/50 current_auc = 0.7009345794392522
User 134639 AUC after training: 0.7028037383177569
User 134639 improves AUC. Keeping the model.
Training on augumented user 36020 2/50 current_auc = 0.7028037383177569
User 36020 AUC after training: 0.7023364485981308
User 36020 does not improve AUC. Reverting changes.
Training on augumented user 44872 3/50 current_auc = 0.7028037383177569
User 44872 AUC after training: 0.7004672897196261
User 44872 does not improve AUC. Reverting changes.
Training on augumented user 46985 4/50 current_auc = 0.7028037383177569
User 46985 AUC after training: 0.7004672897196261
User 46985 does not improve AUC. Reverting changes.
Training on augumented user 4089 5/50 current_auc = 0.7028037383177569
User 4089 AUC after training: 0.6901869158878504
User 4089 does not improve AUC. Reverting changes.
Training on augumented user 20760 6/50 current_auc = 0.7028037383177569
User 20760 AUC after training: 0.7032710280373832
User 20760 improves AUC. Keeping the model.
Training on augumented user 124048 7/50 current_auc = 0.7032710280373832
User 124048 AUC after training: 0.702803738317757
User 124048 does not improve AUC. Reverting changes.
Training on augumented user 56016 8/50 current_auc = 0.7032710280373832
User 56016 AUC after training: 0.7046728971962617
User 56016 improves AUC. Keeping the model.
Training on augumented user 138448 9/50 current_auc = 0.7046728971962617
User 138448 AUC after training: 0.7014018691588785
User 138448 does not improve AUC. Reverting changes.
Training on augumented user 116885 10/50 current_auc = 0.7046728971962617
User 116885 AUC after training: 0.7060747663551402
User 116885 improves AUC. Keeping the model.
Training on augumented user 19015 11/50 current_auc = 0.7060747663551402
User 19015 AUC after training: 0.7042056074766355
User 19015 does not improve AUC. Reverting changes.
Training on augumented user 138110 12/50 current_auc = 0.7060747663551402
User 138110 AUC after training: 0.7070093457943925
User 138110 improves AUC. Keeping the model.
Training on augumented user 54618 13/50 current_auc = 0.7070093457943925
User 54618 AUC after training: 0.708411214953271
User 54618 improves AUC. Keeping the model.
Training on augumented user 111179 14/50 current_auc = 0.708411214953271
User 111179 AUC after training: 0.7079439252336448
User 111179 does not improve AUC. Reverting changes.
Training on augumented user 5301 15/50 current_auc = 0.708411214953271
User 5301 AUC after training: 0.7074766355140186
User 5301 does not improve AUC. Reverting changes.
Training on augumented user 29275 16/50 current_auc = 0.708411214953271
User 29275 AUC after training: 0.708411214953271
User 29275 does not improve AUC. Reverting changes.
Training on augumented user 54473 17/50 current_auc = 0.708411214953271
User 54473 AUC after training: 0.708411214953271
User 54473 does not improve AUC. Reverting changes.
Training on augumented user 95034 18/50 current_auc = 0.708411214953271
User 95034 AUC after training: 0.7060747663551402
User 95034 does not improve AUC. Reverting changes.
Training on augumented user 58237 19/50 current_auc = 0.708411214953271
User 58237 AUC after training: 0.7079439252336449
User 58237 does not improve AUC. Reverting changes.
Training on augumented user 1351 20/50 current_auc = 0.708411214953271
User 1351 AUC after training: 0.7079439252336449
User 1351 does not improve AUC. Reverting changes.
Training on augumented user 124497 21/50 current_auc = 0.708411214953271
User 124497 AUC after training: 0.7065420560747663
User 124497 does not improve AUC. Reverting changes.
Training on augumented user 111914 22/50 current_auc = 0.708411214953271
User 111914 AUC after training: 0.7051401869158879
User 111914 does not improve AUC. Reverting changes.
Training on augumented user 125609 23/50 current_auc = 0.708411214953271
User 125609 AUC after training: 0.7070093457943925
User 125609 does not improve AUC. Reverting changes.
Training on augumented user 46994 24/50 current_auc = 0.708411214953271
User 46994 AUC after training: 0.7079439252336448
User 46994 does not improve AUC. Reverting changes.
Training on augumented user 54891 25/50 current_auc = 0.708411214953271
User 54891 AUC after training: 0.7088785046728971
User 54891 improves AUC. Keeping the model.
Training on augumented user 95318 26/50 current_auc = 0.7088785046728971
User 95318 AUC after training: 0.7088785046728973
User 95318 improves AUC. Keeping the model.
Training on augumented user 129948 27/50 current_auc = 0.7088785046728973
User 129948 AUC after training: 0.7060747663551401
User 129948 does not improve AUC. Reverting changes.
Training on augumented user 98972 28/50 current_auc = 0.7088785046728973
User 98972 AUC after training: 0.7088785046728973
User 98972 does not improve AUC. Reverting changes.
Training on augumented user 49874 29/50 current_auc = 0.7088785046728973
User 49874 AUC after training: 0.7060747663551402
User 49874 does not improve AUC. Reverting changes.
Training on augumented user 65534 30/50 current_auc = 0.7088785046728973
User 65534 AUC after training: 0.7056074766355139
User 65534 does not improve AUC. Reverting changes.
Training on augumented user 112297 31/50 current_auc = 0.7088785046728973
User 112297 AUC after training: 0.7060747663551401
User 112297 does not improve AUC. Reverting changes.
Training on augumented user 118688 32/50 current_auc = 0.7088785046728973
User 118688 AUC after training: 0.7070093457943926
User 118688 does not improve AUC. Reverting changes.
Training on augumented user 33481 33/50 current_auc = 0.7088785046728973
User 33481 AUC after training: 0.7098130841121495
User 33481 improves AUC. Keeping the model.
Training on augumented user 6710 34/50 current_auc = 0.7098130841121495
User 6710 AUC after training: 0.7079439252336449
User 6710 does not improve AUC. Reverting changes.
Training on augumented user 106484 35/50 current_auc = 0.7098130841121495
User 106484 AUC after training: 0.7093457943925233
User 106484 does not improve AUC. Reverting changes.
Training on augumented user 64317 36/50 current_auc = 0.7098130841121495
User 64317 AUC after training: 0.7088785046728971
User 64317 does not improve AUC. Reverting changes.
Training on augumented user 14463 37/50 current_auc = 0.7098130841121495
User 14463 AUC after training: 0.7088785046728971
User 14463 does not improve AUC. Reverting changes.
Training on augumented user 19247 38/50 current_auc = 0.7098130841121495
User 19247 AUC after training: 0.7074766355140186
User 19247 does not improve AUC. Reverting changes.
Training on augumented user 11836 39/50 current_auc = 0.7098130841121495
User 11836 AUC after training: 0.708411214953271
User 11836 does not improve AUC. Reverting changes.
Training on augumented user 120232 40/50 current_auc = 0.7098130841121495
User 120232 AUC after training: 0.708411214953271
User 120232 does not improve AUC. Reverting changes.
Training on augumented user 120367 41/50 current_auc = 0.7098130841121495
User 120367 AUC after training: 0.708411214953271
User 120367 does not improve AUC. Reverting changes.
Training on augumented user 63448 42/50 current_auc = 0.7098130841121495
User 63448 AUC after training: 0.7093457943925233
User 63448 does not improve AUC. Reverting changes.
Training on augumented user 90292 43/50 current_auc = 0.7098130841121495
User 90292 AUC after training: 0.7074766355140187
User 90292 does not improve AUC. Reverting changes.
Training on augumented user 68118 44/50 current_auc = 0.7098130841121495
User 68118 AUC after training: 0.7098130841121495
User 68118 does not improve AUC. Reverting changes.
Training on augumented user 41745 45/50 current_auc = 0.7098130841121495
User 41745 AUC after training: 0.7098130841121495
User 41745 does not improve AUC. Reverting changes.
Training on augumented user 71570 46/50 current_auc = 0.7098130841121495
User 71570 AUC after training: 0.708411214953271
User 71570 does not improve AUC. Reverting changes.
Training on augumented user 83068 47/50 current_auc = 0.7098130841121495
User 83068 AUC after training: 0.7079439252336449
User 83068 does not improve AUC. Reverting changes.
Training on augumented user 106375 48/50 current_auc = 0.7098130841121495
User 106375 AUC after training: 0.7088785046728971
User 106375 does not improve AUC. Reverting changes.
Training on augumented user 1063 49/50 current_auc = 0.7098130841121495
User 1063 AUC after training: 0.708411214953271
User 1063 does not improve AUC. Reverting changes.
[2024-12-02 19:14:07.475086] start test user 4129 176/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:14:07.890225] start test user 4129 176/568 recall augumented users by random, augumented_users = [79147, 6930, 126648, 131996, 1970, 60283, 134089, 27395, 3361, 5621, 117353, 22990, 131280, 68935, 76750, 109812, 71573, 5213, 90818, 11988, 77889, 99958, 50494, 23954, 125938, 59082, 11778, 10790, 135831, 50707, 56335, 84597, 74264, 13049, 109896, 97435, 28603, 31379, 110814, 32751, 111063, 103686, 28381, 27431, 3369, 113122, 15729, 14398, 99337, 14921]
[2024-12-02 19:14:07.905933] user = 4129 Cloud 176/568
[2024-12-02 19:14:07.925562] user = 4129 Local 176/568
[2024-12-02 19:14:08.072158] user = 4129 Local+ 176/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:14:09.974052] user = 4129 MPDA- 176/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6716322892793481
Training on augumented user 79147 0/50 current_auc = 0.6716322892793481
User 79147 AUC after training: 0.6720142602495545
User 79147 improves AUC. Keeping the model.
Training on augumented user 6930 1/50 current_auc = 0.6720142602495545
User 6930 AUC after training: 0.6717596129360837
User 6930 does not improve AUC. Reverting changes.
Training on augumented user 126648 2/50 current_auc = 0.6720142602495545
User 126648 AUC after training: 0.6702317290552584
User 126648 does not improve AUC. Reverting changes.
Training on augumented user 131996 3/50 current_auc = 0.6720142602495545
User 131996 AUC after training: 0.6715049656226126
User 131996 does not improve AUC. Reverting changes.
Training on augumented user 1970 4/50 current_auc = 0.6720142602495545
User 1970 AUC after training: 0.671886936592819
User 1970 does not improve AUC. Reverting changes.
Training on augumented user 60283 5/50 current_auc = 0.6720142602495545
User 60283 AUC after training: 0.6715049656226126
User 60283 does not improve AUC. Reverting changes.
Training on augumented user 134089 6/50 current_auc = 0.6720142602495545
User 134089 AUC after training: 0.669467787114846
User 134089 does not improve AUC. Reverting changes.
Training on augumented user 27395 7/50 current_auc = 0.6720142602495545
User 27395 AUC after training: 0.6692131398013752
User 27395 does not improve AUC. Reverting changes.
Training on augumented user 3361 8/50 current_auc = 0.6720142602495545
User 3361 AUC after training: 0.6715049656226126
User 3361 does not improve AUC. Reverting changes.
Training on augumented user 5621 9/50 current_auc = 0.6720142602495545
User 5621 AUC after training: 0.669213139801375
User 5621 does not improve AUC. Reverting changes.
Training on augumented user 117353 10/50 current_auc = 0.6720142602495545
User 117353 AUC after training: 0.671632289279348
User 117353 does not improve AUC. Reverting changes.
Training on augumented user 22990 11/50 current_auc = 0.6720142602495545
User 22990 AUC after training: 0.6720142602495544
User 22990 does not improve AUC. Reverting changes.
Training on augumented user 131280 12/50 current_auc = 0.6720142602495545
User 131280 AUC after training: 0.6711229946524064
User 131280 does not improve AUC. Reverting changes.
Training on augumented user 68935 13/50 current_auc = 0.6720142602495545
User 68935 AUC after training: 0.6721415839062898
User 68935 improves AUC. Keeping the model.
Training on augumented user 76750 14/50 current_auc = 0.6721415839062898
User 76750 AUC after training: 0.6707410236822001
User 76750 does not improve AUC. Reverting changes.
Training on augumented user 109812 15/50 current_auc = 0.6721415839062898
User 109812 AUC after training: 0.6721415839062898
User 109812 does not improve AUC. Reverting changes.
Training on augumented user 71573 16/50 current_auc = 0.6721415839062898
User 71573 AUC after training: 0.672077922077922
User 71573 does not improve AUC. Reverting changes.
Training on augumented user 5213 17/50 current_auc = 0.6721415839062898
User 5213 AUC after training: 0.6722689075630252
User 5213 improves AUC. Keeping the model.
Training on augumented user 90818 18/50 current_auc = 0.6722689075630252
User 90818 AUC after training: 0.6721415839062899
User 90818 does not improve AUC. Reverting changes.
Training on augumented user 11988 19/50 current_auc = 0.6722689075630252
User 11988 AUC after training: 0.671632289279348
User 11988 does not improve AUC. Reverting changes.
Training on augumented user 77889 20/50 current_auc = 0.6722689075630252
User 77889 AUC after training: 0.6722689075630253
User 77889 improves AUC. Keeping the model.
Training on augumented user 99958 21/50 current_auc = 0.6722689075630253
User 99958 AUC after training: 0.6699770817417876
User 99958 does not improve AUC. Reverting changes.
Training on augumented user 50494 22/50 current_auc = 0.6722689075630253
User 50494 AUC after training: 0.6717596129360837
User 50494 does not improve AUC. Reverting changes.
Training on augumented user 23954 23/50 current_auc = 0.6722689075630253
User 23954 AUC after training: 0.6726508785332315
User 23954 improves AUC. Keeping the model.
Training on augumented user 125938 24/50 current_auc = 0.6726508785332315
User 125938 AUC after training: 0.6735421441303795
User 125938 improves AUC. Keeping the model.
Training on augumented user 59082 25/50 current_auc = 0.6735421441303795
User 59082 AUC after training: 0.6737331296154825
User 59082 improves AUC. Keeping the model.
Training on augumented user 11778 26/50 current_auc = 0.6737331296154825
User 11778 AUC after training: 0.6722689075630253
User 11778 does not improve AUC. Reverting changes.
Training on augumented user 10790 27/50 current_auc = 0.6737331296154825
User 10790 AUC after training: 0.6757703081232493
User 10790 improves AUC. Keeping the model.
Training on augumented user 135831 28/50 current_auc = 0.6757703081232493
User 135831 AUC after training: 0.6695951107715813
User 135831 does not improve AUC. Reverting changes.
Training on augumented user 50707 29/50 current_auc = 0.6757703081232493
User 50707 AUC after training: 0.674751718869366
User 50707 does not improve AUC. Reverting changes.
Training on augumented user 56335 30/50 current_auc = 0.6757703081232493
User 56335 AUC after training: 0.6758976317799846
User 56335 improves AUC. Keeping the model.
Training on augumented user 84597 31/50 current_auc = 0.6758976317799846
User 84597 AUC after training: 0.6751336898395723
User 84597 does not improve AUC. Reverting changes.
Training on augumented user 74264 32/50 current_auc = 0.6758976317799846
User 74264 AUC after training: 0.6751336898395722
User 74264 does not improve AUC. Reverting changes.
Training on augumented user 13049 33/50 current_auc = 0.6758976317799846
User 13049 AUC after training: 0.6751973516679398
User 13049 does not improve AUC. Reverting changes.
Training on augumented user 109896 34/50 current_auc = 0.6758976317799846
User 109896 AUC after training: 0.67602495543672
User 109896 improves AUC. Keeping the model.
Training on augumented user 97435 35/50 current_auc = 0.67602495543672
User 97435 AUC after training: 0.6746880570409982
User 97435 does not improve AUC. Reverting changes.
Training on augumented user 28603 36/50 current_auc = 0.67602495543672
User 28603 AUC after training: 0.6708046855105678
User 28603 does not improve AUC. Reverting changes.
Training on augumented user 31379 37/50 current_auc = 0.67602495543672
User 31379 AUC after training: 0.6741787624140565
User 31379 does not improve AUC. Reverting changes.
Training on augumented user 110814 38/50 current_auc = 0.67602495543672
User 110814 AUC after training: 0.6678762414056532
User 110814 does not improve AUC. Reverting changes.
Training on augumented user 32751 39/50 current_auc = 0.67602495543672
User 32751 AUC after training: 0.6712503183091418
User 32751 does not improve AUC. Reverting changes.
Training on augumented user 111063 40/50 current_auc = 0.67602495543672
User 111063 AUC after training: 0.6764069264069265
User 111063 improves AUC. Keeping the model.
Training on augumented user 103686 41/50 current_auc = 0.6764069264069265
User 103686 AUC after training: 0.6748790425261013
User 103686 does not improve AUC. Reverting changes.
Training on augumented user 28381 42/50 current_auc = 0.6764069264069265
User 28381 AUC after training: 0.6748790425261013
User 28381 does not improve AUC. Reverting changes.
Training on augumented user 27431 43/50 current_auc = 0.6764069264069265
User 27431 AUC after training: 0.676279602750191
User 27431 does not improve AUC. Reverting changes.
Training on augumented user 3369 44/50 current_auc = 0.6764069264069265
User 3369 AUC after training: 0.6774255156608097
User 3369 improves AUC. Keeping the model.
Training on augumented user 113122 45/50 current_auc = 0.6774255156608097
User 113122 AUC after training: 0.6765342500636619
User 113122 does not improve AUC. Reverting changes.
Training on augumented user 15729 46/50 current_auc = 0.6774255156608097
User 15729 AUC after training: 0.6771708683473389
User 15729 does not improve AUC. Reverting changes.
Training on augumented user 14398 47/50 current_auc = 0.6774255156608097
User 14398 AUC after training: 0.6725235548764961
User 14398 does not improve AUC. Reverting changes.
Training on augumented user 99337 48/50 current_auc = 0.6774255156608097
User 99337 AUC after training: 0.6772981920040744
User 99337 does not improve AUC. Reverting changes.
Training on augumented user 14921 49/50 current_auc = 0.6774255156608097
User 14921 AUC after training: 0.6765342500636617
User 14921 does not improve AUC. Reverting changes.
[2024-12-02 19:14:42.259942] start test user 4175 177/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:14:42.671433] start test user 4175 177/568 recall augumented users by random, augumented_users = [22884, 70829, 50854, 52514, 118489, 16682, 74241, 91110, 11800, 119640, 64626, 100021, 29194, 26815, 132436, 119766, 15202, 38632, 8635, 116019, 34660, 47274, 100048, 64088, 48936, 26730, 27552, 67013, 4919, 19242, 53447, 6774, 67359, 58252, 35821, 77887, 103831, 116211, 8120, 111424, 125827, 19162, 123945, 38628, 114227, 37387, 73168, 32880, 12603, 110467]
[2024-12-02 19:14:42.686208] user = 4175 Cloud 177/568
[2024-12-02 19:14:42.698633] user = 4175 Local 177/568
[2024-12-02 19:14:42.738766] user = 4175 Local+ 177/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:14:45.972788] user = 4175 MPDA- 177/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7267801857585139
Training on augumented user 22884 0/50 current_auc = 0.7267801857585139
User 22884 AUC after training: 0.7298761609907121
User 22884 improves AUC. Keeping the model.
Training on augumented user 70829 1/50 current_auc = 0.7298761609907121
User 70829 AUC after training: 0.7314241486068112
User 70829 improves AUC. Keeping the model.
Training on augumented user 50854 2/50 current_auc = 0.7314241486068112
User 50854 AUC after training: 0.7298761609907122
User 50854 does not improve AUC. Reverting changes.
Training on augumented user 52514 3/50 current_auc = 0.7314241486068112
User 52514 AUC after training: 0.7352941176470588
User 52514 improves AUC. Keeping the model.
Training on augumented user 118489 4/50 current_auc = 0.7352941176470588
User 118489 AUC after training: 0.7360681114551083
User 118489 improves AUC. Keeping the model.
Training on augumented user 16682 5/50 current_auc = 0.7360681114551083
User 16682 AUC after training: 0.7345201238390093
User 16682 does not improve AUC. Reverting changes.
Training on augumented user 74241 6/50 current_auc = 0.7360681114551083
User 74241 AUC after training: 0.7368421052631579
User 74241 improves AUC. Keeping the model.
Training on augumented user 91110 7/50 current_auc = 0.7368421052631579
User 91110 AUC after training: 0.7345201238390092
User 91110 does not improve AUC. Reverting changes.
Training on augumented user 11800 8/50 current_auc = 0.7368421052631579
User 11800 AUC after training: 0.7352941176470589
User 11800 does not improve AUC. Reverting changes.
Training on augumented user 119640 9/50 current_auc = 0.7368421052631579
User 119640 AUC after training: 0.7345201238390093
User 119640 does not improve AUC. Reverting changes.
Training on augumented user 64626 10/50 current_auc = 0.7368421052631579
User 64626 AUC after training: 0.7337461300309598
User 64626 does not improve AUC. Reverting changes.
Training on augumented user 100021 11/50 current_auc = 0.7368421052631579
User 100021 AUC after training: 0.7368421052631579
User 100021 does not improve AUC. Reverting changes.
Training on augumented user 29194 12/50 current_auc = 0.7368421052631579
User 29194 AUC after training: 0.7376160990712074
User 29194 improves AUC. Keeping the model.
Training on augumented user 26815 13/50 current_auc = 0.7376160990712074
User 26815 AUC after training: 0.7329721362229102
User 26815 does not improve AUC. Reverting changes.
Training on augumented user 132436 14/50 current_auc = 0.7376160990712074
User 132436 AUC after training: 0.7376160990712074
User 132436 does not improve AUC. Reverting changes.
Training on augumented user 119766 15/50 current_auc = 0.7376160990712074
User 119766 AUC after training: 0.7383900928792569
User 119766 improves AUC. Keeping the model.
Training on augumented user 15202 16/50 current_auc = 0.7383900928792569
User 15202 AUC after training: 0.7383900928792569
User 15202 does not improve AUC. Reverting changes.
Training on augumented user 38632 17/50 current_auc = 0.7383900928792569
User 38632 AUC after training: 0.7360681114551083
User 38632 does not improve AUC. Reverting changes.
Training on augumented user 8635 18/50 current_auc = 0.7383900928792569
User 8635 AUC after training: 0.7376160990712074
User 8635 does not improve AUC. Reverting changes.
Training on augumented user 116019 19/50 current_auc = 0.7383900928792569
User 116019 AUC after training: 0.7360681114551083
User 116019 does not improve AUC. Reverting changes.
Training on augumented user 34660 20/50 current_auc = 0.7383900928792569
User 34660 AUC after training: 0.7360681114551083
User 34660 does not improve AUC. Reverting changes.
Training on augumented user 47274 21/50 current_auc = 0.7383900928792569
User 47274 AUC after training: 0.7383900928792569
User 47274 does not improve AUC. Reverting changes.
Training on augumented user 100048 22/50 current_auc = 0.7383900928792569
User 100048 AUC after training: 0.7391640866873065
User 100048 improves AUC. Keeping the model.
Training on augumented user 64088 23/50 current_auc = 0.7391640866873065
User 64088 AUC after training: 0.739938080495356
User 64088 improves AUC. Keeping the model.
Training on augumented user 48936 24/50 current_auc = 0.739938080495356
User 48936 AUC after training: 0.7414860681114551
User 48936 improves AUC. Keeping the model.
Training on augumented user 26730 25/50 current_auc = 0.7414860681114551
User 26730 AUC after training: 0.739938080495356
User 26730 does not improve AUC. Reverting changes.
Training on augumented user 27552 26/50 current_auc = 0.7414860681114551
User 27552 AUC after training: 0.7407120743034056
User 27552 does not improve AUC. Reverting changes.
Training on augumented user 67013 27/50 current_auc = 0.7414860681114551
User 67013 AUC after training: 0.7407120743034056
User 67013 does not improve AUC. Reverting changes.
Training on augumented user 4919 28/50 current_auc = 0.7414860681114551
User 4919 AUC after training: 0.739938080495356
User 4919 does not improve AUC. Reverting changes.
Training on augumented user 19242 29/50 current_auc = 0.7414860681114551
User 19242 AUC after training: 0.7383900928792569
User 19242 does not improve AUC. Reverting changes.
Training on augumented user 53447 30/50 current_auc = 0.7414860681114551
User 53447 AUC after training: 0.7407120743034056
User 53447 does not improve AUC. Reverting changes.
Training on augumented user 6774 31/50 current_auc = 0.7414860681114551
User 6774 AUC after training: 0.7368421052631579
User 6774 does not improve AUC. Reverting changes.
Training on augumented user 67359 32/50 current_auc = 0.7414860681114551
User 67359 AUC after training: 0.7407120743034056
User 67359 does not improve AUC. Reverting changes.
Training on augumented user 58252 33/50 current_auc = 0.7414860681114551
User 58252 AUC after training: 0.739938080495356
User 58252 does not improve AUC. Reverting changes.
Training on augumented user 35821 34/50 current_auc = 0.7414860681114551
User 35821 AUC after training: 0.7414860681114551
User 35821 does not improve AUC. Reverting changes.
Training on augumented user 77887 35/50 current_auc = 0.7414860681114551
User 77887 AUC after training: 0.7407120743034056
User 77887 does not improve AUC. Reverting changes.
Training on augumented user 103831 36/50 current_auc = 0.7414860681114551
User 103831 AUC after training: 0.739938080495356
User 103831 does not improve AUC. Reverting changes.
Training on augumented user 116211 37/50 current_auc = 0.7414860681114551
User 116211 AUC after training: 0.739938080495356
User 116211 does not improve AUC. Reverting changes.
Training on augumented user 8120 38/50 current_auc = 0.7414860681114551
User 8120 AUC after training: 0.7407120743034056
User 8120 does not improve AUC. Reverting changes.
Training on augumented user 111424 39/50 current_auc = 0.7414860681114551
User 111424 AUC after training: 0.739938080495356
User 111424 does not improve AUC. Reverting changes.
Training on augumented user 125827 40/50 current_auc = 0.7414860681114551
User 125827 AUC after training: 0.739938080495356
User 125827 does not improve AUC. Reverting changes.
Training on augumented user 19162 41/50 current_auc = 0.7414860681114551
User 19162 AUC after training: 0.7414860681114551
User 19162 does not improve AUC. Reverting changes.
Training on augumented user 123945 42/50 current_auc = 0.7414860681114551
User 123945 AUC after training: 0.7391640866873065
User 123945 does not improve AUC. Reverting changes.
Training on augumented user 38628 43/50 current_auc = 0.7414860681114551
User 38628 AUC after training: 0.7352941176470588
User 38628 does not improve AUC. Reverting changes.
Training on augumented user 114227 44/50 current_auc = 0.7414860681114551
User 114227 AUC after training: 0.7430340557275542
User 114227 improves AUC. Keeping the model.
Training on augumented user 37387 45/50 current_auc = 0.7430340557275542
User 37387 AUC after training: 0.7414860681114551
User 37387 does not improve AUC. Reverting changes.
Training on augumented user 73168 46/50 current_auc = 0.7430340557275542
User 73168 AUC after training: 0.739938080495356
User 73168 does not improve AUC. Reverting changes.
Training on augumented user 32880 47/50 current_auc = 0.7430340557275542
User 32880 AUC after training: 0.7422600619195047
User 32880 does not improve AUC. Reverting changes.
Training on augumented user 12603 48/50 current_auc = 0.7430340557275542
User 12603 AUC after training: 0.7422600619195047
User 12603 does not improve AUC. Reverting changes.
Training on augumented user 110467 49/50 current_auc = 0.7430340557275542
User 110467 AUC after training: 0.7430340557275542
User 110467 does not improve AUC. Reverting changes.
[2024-12-02 19:15:13.084305] start test user 4200 178/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:15:13.831919] start test user 4200 178/568 recall augumented users by random, augumented_users = [32028, 84868, 4476, 97927, 94116, 47377, 29318, 108216, 64550, 119301, 37969, 93084, 107393, 41187, 115758, 3725, 16469, 55913, 75991, 112117, 111971, 132684, 98077, 4162, 1671, 86755, 102648, 88219, 69267, 14580, 44226, 132636, 109239, 121302, 83752, 138384, 28855, 90070, 107104, 106455, 60478, 121367, 20759, 113840, 72988, 100721, 109826, 19731, 109777, 41599]
[2024-12-02 19:15:13.847771] user = 4200 Cloud 178/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:15:13.854871] user = 4200 Local 178/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:15:13.908007] user = 4200 Local+ 178/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:15:16.331468] user = 4200 MPDA- 178/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 32028 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32028 AUC after training: 0.5
User 32028 does not improve AUC. Reverting changes.
Training on augumented user 84868 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84868 AUC after training: 0.5
User 84868 does not improve AUC. Reverting changes.
Training on augumented user 4476 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4476 AUC after training: 0.5
User 4476 does not improve AUC. Reverting changes.
Training on augumented user 97927 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97927 AUC after training: 0.5
User 97927 does not improve AUC. Reverting changes.
Training on augumented user 94116 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94116 AUC after training: 0.5
User 94116 does not improve AUC. Reverting changes.
Training on augumented user 47377 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47377 AUC after training: 0.5
User 47377 does not improve AUC. Reverting changes.
Training on augumented user 29318 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29318 AUC after training: 0.5
User 29318 does not improve AUC. Reverting changes.
Training on augumented user 108216 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108216 AUC after training: 0.5
User 108216 does not improve AUC. Reverting changes.
Training on augumented user 64550 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64550 AUC after training: 0.5
User 64550 does not improve AUC. Reverting changes.
Training on augumented user 119301 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119301 AUC after training: 0.5
User 119301 does not improve AUC. Reverting changes.
Training on augumented user 37969 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37969 AUC after training: 0.5
User 37969 does not improve AUC. Reverting changes.
Training on augumented user 93084 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93084 AUC after training: 0.5
User 93084 does not improve AUC. Reverting changes.
Training on augumented user 107393 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107393 AUC after training: 0.5
User 107393 does not improve AUC. Reverting changes.
Training on augumented user 41187 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41187 AUC after training: 0.5
User 41187 does not improve AUC. Reverting changes.
Training on augumented user 115758 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115758 AUC after training: 0.5
User 115758 does not improve AUC. Reverting changes.
Training on augumented user 3725 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3725 AUC after training: 0.5
User 3725 does not improve AUC. Reverting changes.
Training on augumented user 16469 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16469 AUC after training: 0.5
User 16469 does not improve AUC. Reverting changes.
Training on augumented user 55913 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55913 AUC after training: 0.5
User 55913 does not improve AUC. Reverting changes.
Training on augumented user 75991 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75991 AUC after training: 0.5
User 75991 does not improve AUC. Reverting changes.
Training on augumented user 112117 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112117 AUC after training: 0.5
User 112117 does not improve AUC. Reverting changes.
Training on augumented user 111971 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111971 AUC after training: 0.5
User 111971 does not improve AUC. Reverting changes.
Training on augumented user 132684 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132684 AUC after training: 0.5
User 132684 does not improve AUC. Reverting changes.
Training on augumented user 98077 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98077 AUC after training: 0.5
User 98077 does not improve AUC. Reverting changes.
Training on augumented user 4162 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4162 AUC after training: 0.5
User 4162 does not improve AUC. Reverting changes.
Training on augumented user 1671 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1671 AUC after training: 0.5
User 1671 does not improve AUC. Reverting changes.
Training on augumented user 86755 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86755 AUC after training: 0.5
User 86755 does not improve AUC. Reverting changes.
Training on augumented user 102648 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102648 AUC after training: 0.5
User 102648 does not improve AUC. Reverting changes.
Training on augumented user 88219 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88219 AUC after training: 0.5
User 88219 does not improve AUC. Reverting changes.
Training on augumented user 69267 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69267 AUC after training: 0.5
User 69267 does not improve AUC. Reverting changes.
Training on augumented user 14580 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14580 AUC after training: 0.5
User 14580 does not improve AUC. Reverting changes.
Training on augumented user 44226 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44226 AUC after training: 0.5
User 44226 does not improve AUC. Reverting changes.
Training on augumented user 132636 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132636 AUC after training: 0.5
User 132636 does not improve AUC. Reverting changes.
Training on augumented user 109239 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109239 AUC after training: 0.5
User 109239 does not improve AUC. Reverting changes.
Training on augumented user 121302 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121302 AUC after training: 0.5
User 121302 does not improve AUC. Reverting changes.
Training on augumented user 83752 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83752 AUC after training: 0.5
User 83752 does not improve AUC. Reverting changes.
Training on augumented user 138384 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138384 AUC after training: 0.5
User 138384 does not improve AUC. Reverting changes.
Training on augumented user 28855 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28855 AUC after training: 0.5
User 28855 does not improve AUC. Reverting changes.
Training on augumented user 90070 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90070 AUC after training: 0.5
User 90070 does not improve AUC. Reverting changes.
Training on augumented user 107104 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107104 AUC after training: 0.5
User 107104 does not improve AUC. Reverting changes.
Training on augumented user 106455 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106455 AUC after training: 0.5
User 106455 does not improve AUC. Reverting changes.
Training on augumented user 60478 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60478 AUC after training: 0.5
User 60478 does not improve AUC. Reverting changes.
Training on augumented user 121367 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121367 AUC after training: 0.5
User 121367 does not improve AUC. Reverting changes.
Training on augumented user 20759 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20759 AUC after training: 0.5
User 20759 does not improve AUC. Reverting changes.
Training on augumented user 113840 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113840 AUC after training: 0.5
User 113840 does not improve AUC. Reverting changes.
Training on augumented user 72988 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72988 AUC after training: 0.5
User 72988 does not improve AUC. Reverting changes.
Training on augumented user 100721 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100721 AUC after training: 0.5
User 100721 does not improve AUC. Reverting changes.
Training on augumented user 109826 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109826 AUC after training: 0.5
User 109826 does not improve AUC. Reverting changes.
Training on augumented user 19731 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19731 AUC after training: 0.5
User 19731 does not improve AUC. Reverting changes.
Training on augumented user 109777 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109777 AUC after training: 0.5
User 109777 does not improve AUC. Reverting changes.
Training on augumented user 41599 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41599 AUC after training: 0.5
User 41599 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:15:42.069540] start test user 4220 179/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:15:42.534273] start test user 4220 179/568 recall augumented users by random, augumented_users = [46651, 12853, 20395, 56699, 88405, 127326, 85200, 14900, 54548, 50136, 13323, 43883, 95964, 10459, 115098, 126120, 11140, 93930, 93404, 110736, 23686, 110776, 80526, 50001, 46833, 135840, 96620, 33142, 135684, 125134, 128602, 120437, 75665, 30020, 11259, 102524, 136154, 28104, 48077, 34723, 11956, 56993, 14489, 6012, 87962, 77532, 34464, 96056, 103557, 8871]
[2024-12-02 19:15:42.549969] user = 4220 Cloud 179/568
[2024-12-02 19:15:42.559901] user = 4220 Local 179/568
[2024-12-02 19:15:42.592895] user = 4220 Local+ 179/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:15:45.311836] user = 4220 MPDA- 179/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.65
Training on augumented user 46651 0/50 current_auc = 0.65
User 46651 AUC after training: 0.6428571428571429
User 46651 does not improve AUC. Reverting changes.
Training on augumented user 12853 1/50 current_auc = 0.65
User 12853 AUC after training: 0.65
User 12853 does not improve AUC. Reverting changes.
Training on augumented user 20395 2/50 current_auc = 0.65
User 20395 AUC after training: 0.65
User 20395 does not improve AUC. Reverting changes.
Training on augumented user 56699 3/50 current_auc = 0.65
User 56699 AUC after training: 0.65
User 56699 does not improve AUC. Reverting changes.
Training on augumented user 88405 4/50 current_auc = 0.65
User 88405 AUC after training: 0.65
User 88405 does not improve AUC. Reverting changes.
Training on augumented user 127326 5/50 current_auc = 0.65
User 127326 AUC after training: 0.65
User 127326 does not improve AUC. Reverting changes.
Training on augumented user 85200 6/50 current_auc = 0.65
User 85200 AUC after training: 0.65
User 85200 does not improve AUC. Reverting changes.
Training on augumented user 14900 7/50 current_auc = 0.65
User 14900 AUC after training: 0.65
User 14900 does not improve AUC. Reverting changes.
Training on augumented user 54548 8/50 current_auc = 0.65
User 54548 AUC after training: 0.65
User 54548 does not improve AUC. Reverting changes.
Training on augumented user 50136 9/50 current_auc = 0.65
User 50136 AUC after training: 0.65
User 50136 does not improve AUC. Reverting changes.
Training on augumented user 13323 10/50 current_auc = 0.65
User 13323 AUC after training: 0.65
User 13323 does not improve AUC. Reverting changes.
Training on augumented user 43883 11/50 current_auc = 0.65
User 43883 AUC after training: 0.65
User 43883 does not improve AUC. Reverting changes.
Training on augumented user 95964 12/50 current_auc = 0.65
User 95964 AUC after training: 0.65
User 95964 does not improve AUC. Reverting changes.
Training on augumented user 10459 13/50 current_auc = 0.65
User 10459 AUC after training: 0.65
User 10459 does not improve AUC. Reverting changes.
Training on augumented user 115098 14/50 current_auc = 0.65
User 115098 AUC after training: 0.65
User 115098 does not improve AUC. Reverting changes.
Training on augumented user 126120 15/50 current_auc = 0.65
User 126120 AUC after training: 0.65
User 126120 does not improve AUC. Reverting changes.
Training on augumented user 11140 16/50 current_auc = 0.65
User 11140 AUC after training: 0.65
User 11140 does not improve AUC. Reverting changes.
Training on augumented user 93930 17/50 current_auc = 0.65
User 93930 AUC after training: 0.65
User 93930 does not improve AUC. Reverting changes.
Training on augumented user 93404 18/50 current_auc = 0.65
User 93404 AUC after training: 0.65
User 93404 does not improve AUC. Reverting changes.
Training on augumented user 110736 19/50 current_auc = 0.65
User 110736 AUC after training: 0.65
User 110736 does not improve AUC. Reverting changes.
Training on augumented user 23686 20/50 current_auc = 0.65
User 23686 AUC after training: 0.65
User 23686 does not improve AUC. Reverting changes.
Training on augumented user 110776 21/50 current_auc = 0.65
User 110776 AUC after training: 0.65
User 110776 does not improve AUC. Reverting changes.
Training on augumented user 80526 22/50 current_auc = 0.65
User 80526 AUC after training: 0.65
User 80526 does not improve AUC. Reverting changes.
Training on augumented user 50001 23/50 current_auc = 0.65
User 50001 AUC after training: 0.65
User 50001 does not improve AUC. Reverting changes.
Training on augumented user 46833 24/50 current_auc = 0.65
User 46833 AUC after training: 0.65
User 46833 does not improve AUC. Reverting changes.
Training on augumented user 135840 25/50 current_auc = 0.65
User 135840 AUC after training: 0.65
User 135840 does not improve AUC. Reverting changes.
Training on augumented user 96620 26/50 current_auc = 0.65
User 96620 AUC after training: 0.65
User 96620 does not improve AUC. Reverting changes.
Training on augumented user 33142 27/50 current_auc = 0.65
User 33142 AUC after training: 0.65
User 33142 does not improve AUC. Reverting changes.
Training on augumented user 135684 28/50 current_auc = 0.65
User 135684 AUC after training: 0.65
User 135684 does not improve AUC. Reverting changes.
Training on augumented user 125134 29/50 current_auc = 0.65
User 125134 AUC after training: 0.65
User 125134 does not improve AUC. Reverting changes.
Training on augumented user 128602 30/50 current_auc = 0.65
User 128602 AUC after training: 0.65
User 128602 does not improve AUC. Reverting changes.
Training on augumented user 120437 31/50 current_auc = 0.65
User 120437 AUC after training: 0.65
User 120437 does not improve AUC. Reverting changes.
Training on augumented user 75665 32/50 current_auc = 0.65
User 75665 AUC after training: 0.65
User 75665 does not improve AUC. Reverting changes.
Training on augumented user 30020 33/50 current_auc = 0.65
User 30020 AUC after training: 0.65
User 30020 does not improve AUC. Reverting changes.
Training on augumented user 11259 34/50 current_auc = 0.65
User 11259 AUC after training: 0.65
User 11259 does not improve AUC. Reverting changes.
Training on augumented user 102524 35/50 current_auc = 0.65
User 102524 AUC after training: 0.65
User 102524 does not improve AUC. Reverting changes.
Training on augumented user 136154 36/50 current_auc = 0.65
User 136154 AUC after training: 0.65
User 136154 does not improve AUC. Reverting changes.
Training on augumented user 28104 37/50 current_auc = 0.65
User 28104 AUC after training: 0.65
User 28104 does not improve AUC. Reverting changes.
Training on augumented user 48077 38/50 current_auc = 0.65
User 48077 AUC after training: 0.65
User 48077 does not improve AUC. Reverting changes.
Training on augumented user 34723 39/50 current_auc = 0.65
User 34723 AUC after training: 0.65
User 34723 does not improve AUC. Reverting changes.
Training on augumented user 11956 40/50 current_auc = 0.65
User 11956 AUC after training: 0.65
User 11956 does not improve AUC. Reverting changes.
Training on augumented user 56993 41/50 current_auc = 0.65
User 56993 AUC after training: 0.65
User 56993 does not improve AUC. Reverting changes.
Training on augumented user 14489 42/50 current_auc = 0.65
User 14489 AUC after training: 0.65
User 14489 does not improve AUC. Reverting changes.
Training on augumented user 6012 43/50 current_auc = 0.65
User 6012 AUC after training: 0.65
User 6012 does not improve AUC. Reverting changes.
Training on augumented user 87962 44/50 current_auc = 0.65
User 87962 AUC after training: 0.65
User 87962 does not improve AUC. Reverting changes.
Training on augumented user 77532 45/50 current_auc = 0.65
User 77532 AUC after training: 0.65
User 77532 does not improve AUC. Reverting changes.
Training on augumented user 34464 46/50 current_auc = 0.65
User 34464 AUC after training: 0.65
User 34464 does not improve AUC. Reverting changes.
Training on augumented user 96056 47/50 current_auc = 0.65
User 96056 AUC after training: 0.65
User 96056 does not improve AUC. Reverting changes.
Training on augumented user 103557 48/50 current_auc = 0.65
User 103557 AUC after training: 0.65
User 103557 does not improve AUC. Reverting changes.
Training on augumented user 8871 49/50 current_auc = 0.65
User 8871 AUC after training: 0.65
User 8871 does not improve AUC. Reverting changes.
[2024-12-02 19:16:17.213360] start test user 4222 180/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:16:17.800976] start test user 4222 180/568 recall augumented users by random, augumented_users = [123963, 11537, 113816, 18072, 3526, 57885, 36921, 102449, 65504, 62192, 77876, 85639, 89773, 133621, 120615, 113499, 7925, 6677, 55129, 26520, 41728, 130892, 9037, 117980, 89442, 80942, 26886, 4640, 97303, 107688, 33416, 92768, 39152, 94997, 45532, 31384, 39731, 91893, 136242, 79173, 8450, 93547, 82035, 57220, 137006, 49766, 117352, 121096, 14565, 66227]
[2024-12-02 19:16:17.820802] user = 4222 Cloud 180/568
[2024-12-02 19:16:17.865793] user = 4222 Local 180/568
[2024-12-02 19:16:18.170626] user = 4222 Local+ 180/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:16:20.542789] user = 4222 MPDA- 180/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7109151745342739
Training on augumented user 123963 0/50 current_auc = 0.7109151745342739
User 123963 AUC after training: 0.7109151745342738
User 123963 does not improve AUC. Reverting changes.
Training on augumented user 11537 1/50 current_auc = 0.7109151745342739
User 11537 AUC after training: 0.7097395550732502
User 11537 does not improve AUC. Reverting changes.
Training on augumented user 113816 2/50 current_auc = 0.7109151745342739
User 113816 AUC after training: 0.7107704829083017
User 113816 does not improve AUC. Reverting changes.
Training on augumented user 18072 3/50 current_auc = 0.7109151745342739
User 18072 AUC after training: 0.7107343100018086
User 18072 does not improve AUC. Reverting changes.
Training on augumented user 3526 4/50 current_auc = 0.7109151745342739
User 3526 AUC after training: 0.7108970880810273
User 3526 does not improve AUC. Reverting changes.
Training on augumented user 57885 5/50 current_auc = 0.7109151745342739
User 57885 AUC after training: 0.7110779526134925
User 57885 improves AUC. Keeping the model.
Training on augumented user 36921 6/50 current_auc = 0.7110779526134925
User 36921 AUC after training: 0.7108066558147947
User 36921 does not improve AUC. Reverting changes.
Training on augumented user 102449 7/50 current_auc = 0.7110779526134925
User 102449 AUC after training: 0.711059866160246
User 102449 does not improve AUC. Reverting changes.
Training on augumented user 65504 8/50 current_auc = 0.7110779526134925
User 65504 AUC after training: 0.7110056068005064
User 65504 does not improve AUC. Reverting changes.
Training on augumented user 62192 9/50 current_auc = 0.7110779526134925
User 62192 AUC after training: 0.7110779526134925
User 62192 does not improve AUC. Reverting changes.
Training on augumented user 77876 10/50 current_auc = 0.7110779526134925
User 77876 AUC after training: 0.711132211973232
User 77876 improves AUC. Keeping the model.
Training on augumented user 85639 11/50 current_auc = 0.711132211973232
User 85639 AUC after training: 0.710851871947911
User 85639 does not improve AUC. Reverting changes.
Training on augumented user 89773 12/50 current_auc = 0.711132211973232
User 89773 AUC after training: 0.7110236932537528
User 89773 does not improve AUC. Reverting changes.
Training on augumented user 133621 13/50 current_auc = 0.711132211973232
User 133621 AUC after training: 0.7107885693615481
User 133621 does not improve AUC. Reverting changes.
Training on augumented user 120615 14/50 current_auc = 0.711132211973232
User 120615 AUC after training: 0.7115301139446555
User 120615 improves AUC. Keeping the model.
Training on augumented user 113499 15/50 current_auc = 0.7115301139446555
User 113499 AUC after training: 0.7104991861096039
User 113499 does not improve AUC. Reverting changes.
Training on augumented user 7925 16/50 current_auc = 0.7115301139446555
User 7925 AUC after training: 0.711512027491409
User 7925 does not improve AUC. Reverting changes.
Training on augumented user 6677 17/50 current_auc = 0.7115301139446555
User 6677 AUC after training: 0.7111864713329716
User 6677 does not improve AUC. Reverting changes.
Training on augumented user 55129 18/50 current_auc = 0.7115301139446555
User 55129 AUC after training: 0.7110779526134925
User 55129 does not improve AUC. Reverting changes.
Training on augumented user 26520 19/50 current_auc = 0.7115301139446555
User 26520 AUC after training: 0.7116205462108881
User 26520 improves AUC. Keeping the model.
Training on augumented user 41728 20/50 current_auc = 0.7116205462108881
User 41728 AUC after training: 0.7118556701030928
User 41728 improves AUC. Keeping the model.
Training on augumented user 130892 21/50 current_auc = 0.7118556701030928
User 130892 AUC after training: 0.7115572436245252
User 130892 does not improve AUC. Reverting changes.
Training on augumented user 9037 22/50 current_auc = 0.7118556701030928
User 9037 AUC after training: 0.7119461023693254
User 9037 improves AUC. Keeping the model.
Training on augumented user 117980 23/50 current_auc = 0.7119461023693254
User 117980 AUC after training: 0.7128142521251584
User 117980 improves AUC. Keeping the model.
Training on augumented user 89442 24/50 current_auc = 0.7128142521251584
User 89442 AUC after training: 0.7125791282329537
User 89442 does not improve AUC. Reverting changes.
Training on augumented user 80942 25/50 current_auc = 0.7128142521251584
User 80942 AUC after training: 0.712524868873214
User 80942 does not improve AUC. Reverting changes.
Training on augumented user 26886 26/50 current_auc = 0.7128142521251584
User 26886 AUC after training: 0.7125791282329536
User 26886 does not improve AUC. Reverting changes.
Training on augumented user 4640 27/50 current_auc = 0.7128142521251584
User 4640 AUC after training: 0.7128504250316513
User 4640 improves AUC. Keeping the model.
Training on augumented user 97303 28/50 current_auc = 0.7128504250316513
User 97303 AUC after training: 0.7127238198589257
User 97303 does not improve AUC. Reverting changes.
Training on augumented user 107688 29/50 current_auc = 0.7128504250316513
User 107688 AUC after training: 0.7126514740459395
User 107688 does not improve AUC. Reverting changes.
Training on augumented user 33416 30/50 current_auc = 0.7128504250316513
User 33416 AUC after training: 0.7122987882076326
User 33416 does not improve AUC. Reverting changes.
Training on augumented user 92768 31/50 current_auc = 0.7128504250316513
User 92768 AUC after training: 0.712561041779707
User 92768 does not improve AUC. Reverting changes.
Training on augumented user 39152 32/50 current_auc = 0.7128504250316513
User 39152 AUC after training: 0.71301320311087
User 39152 improves AUC. Keeping the model.
Training on augumented user 94997 33/50 current_auc = 0.71301320311087
User 94997 AUC after training: 0.7132302405498281
User 94997 improves AUC. Keeping the model.
Training on augumented user 45532 34/50 current_auc = 0.7132302405498281
User 45532 AUC after training: 0.7132302405498283
User 45532 improves AUC. Keeping the model.
Training on augumented user 31384 35/50 current_auc = 0.7132302405498283
User 31384 AUC after training: 0.7132573702296979
User 31384 improves AUC. Keeping the model.
Training on augumented user 39731 36/50 current_auc = 0.7132573702296979
User 39731 AUC after training: 0.713293543136191
User 39731 improves AUC. Keeping the model.
Training on augumented user 91893 37/50 current_auc = 0.713293543136191
User 91893 AUC after training: 0.7130493760173631
User 91893 does not improve AUC. Reverting changes.
Training on augumented user 136242 38/50 current_auc = 0.713293543136191
User 136242 AUC after training: 0.7131669379634654
User 136242 does not improve AUC. Reverting changes.
Training on augumented user 79173 39/50 current_auc = 0.713293543136191
User 79173 AUC after training: 0.713329716042684
User 79173 improves AUC. Keeping the model.
Training on augumented user 8450 40/50 current_auc = 0.713329716042684
User 8450 AUC after training: 0.712977030204377
User 8450 does not improve AUC. Reverting changes.
Training on augumented user 93547 41/50 current_auc = 0.713329716042684
User 93547 AUC after training: 0.7130493760173631
User 93547 does not improve AUC. Reverting changes.
Training on augumented user 82035 42/50 current_auc = 0.713329716042684
User 82035 AUC after training: 0.7133749321758003
User 82035 improves AUC. Keeping the model.
Training on augumented user 57220 43/50 current_auc = 0.7133749321758003
User 57220 AUC after training: 0.7132754566829445
User 57220 does not improve AUC. Reverting changes.
Training on augumented user 137006 44/50 current_auc = 0.7133749321758003
User 137006 AUC after training: 0.7124706095134744
User 137006 does not improve AUC. Reverting changes.
Training on augumented user 49766 45/50 current_auc = 0.7133749321758003
User 49766 AUC after training: 0.7134111050822933
User 49766 improves AUC. Keeping the model.
Training on augumented user 117352 46/50 current_auc = 0.7134111050822933
User 117352 AUC after training: 0.7132392837764514
User 117352 does not improve AUC. Reverting changes.
Training on augumented user 121096 47/50 current_auc = 0.7134111050822933
User 121096 AUC after training: 0.7128594682582745
User 121096 does not improve AUC. Reverting changes.
Training on augumented user 14565 48/50 current_auc = 0.7134111050822933
User 14565 AUC after training: 0.7133116295894376
User 14565 does not improve AUC. Reverting changes.
Training on augumented user 66227 49/50 current_auc = 0.7134111050822933
User 66227 AUC after training: 0.7135196238017725
User 66227 improves AUC. Keeping the model.
[2024-12-02 19:16:54.472456] start test user 4235 181/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:16:54.995801] start test user 4235 181/568 recall augumented users by random, augumented_users = [107816, 73243, 88554, 25482, 83199, 20363, 80071, 109793, 76439, 118202, 113093, 5204, 28452, 104032, 94731, 4542, 23883, 84074, 26342, 93600, 29338, 13001, 172, 113574, 60135, 87357, 132675, 135045, 131483, 133677, 68954, 49332, 136802, 103025, 87981, 8755, 49157, 7647, 31752, 2066, 98382, 71511, 74739, 105187, 54302, 22445, 89824, 4369, 79763, 52428]
[2024-12-02 19:16:55.013231] user = 4235 Cloud 181/568
[2024-12-02 19:16:55.023282] user = 4235 Local 181/568
[2024-12-02 19:16:55.057981] user = 4235 Local+ 181/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:16:57.044851] user = 4235 MPDA- 181/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6333333333333333
Training on augumented user 107816 0/50 current_auc = 0.6333333333333333
User 107816 AUC after training: 0.6333333333333333
User 107816 does not improve AUC. Reverting changes.
Training on augumented user 73243 1/50 current_auc = 0.6333333333333333
User 73243 AUC after training: 0.6333333333333333
User 73243 does not improve AUC. Reverting changes.
Training on augumented user 88554 2/50 current_auc = 0.6333333333333333
User 88554 AUC after training: 0.6333333333333333
User 88554 does not improve AUC. Reverting changes.
Training on augumented user 25482 3/50 current_auc = 0.6333333333333333
User 25482 AUC after training: 0.6333333333333333
User 25482 does not improve AUC. Reverting changes.
Training on augumented user 83199 4/50 current_auc = 0.6333333333333333
User 83199 AUC after training: 0.6333333333333333
User 83199 does not improve AUC. Reverting changes.
Training on augumented user 20363 5/50 current_auc = 0.6333333333333333
User 20363 AUC after training: 0.6333333333333333
User 20363 does not improve AUC. Reverting changes.
Training on augumented user 80071 6/50 current_auc = 0.6333333333333333
User 80071 AUC after training: 0.64
User 80071 improves AUC. Keeping the model.
Training on augumented user 109793 7/50 current_auc = 0.64
User 109793 AUC after training: 0.64
User 109793 does not improve AUC. Reverting changes.
Training on augumented user 76439 8/50 current_auc = 0.64
User 76439 AUC after training: 0.6333333333333333
User 76439 does not improve AUC. Reverting changes.
Training on augumented user 118202 9/50 current_auc = 0.64
User 118202 AUC after training: 0.64
User 118202 does not improve AUC. Reverting changes.
Training on augumented user 113093 10/50 current_auc = 0.64
User 113093 AUC after training: 0.6333333333333333
User 113093 does not improve AUC. Reverting changes.
Training on augumented user 5204 11/50 current_auc = 0.64
User 5204 AUC after training: 0.64
User 5204 does not improve AUC. Reverting changes.
Training on augumented user 28452 12/50 current_auc = 0.64
User 28452 AUC after training: 0.6333333333333333
User 28452 does not improve AUC. Reverting changes.
Training on augumented user 104032 13/50 current_auc = 0.64
User 104032 AUC after training: 0.64
User 104032 does not improve AUC. Reverting changes.
Training on augumented user 94731 14/50 current_auc = 0.64
User 94731 AUC after training: 0.64
User 94731 does not improve AUC. Reverting changes.
Training on augumented user 4542 15/50 current_auc = 0.64
User 4542 AUC after training: 0.6333333333333333
User 4542 does not improve AUC. Reverting changes.
Training on augumented user 23883 16/50 current_auc = 0.64
User 23883 AUC after training: 0.64
User 23883 does not improve AUC. Reverting changes.
Training on augumented user 84074 17/50 current_auc = 0.64
User 84074 AUC after training: 0.6333333333333333
User 84074 does not improve AUC. Reverting changes.
Training on augumented user 26342 18/50 current_auc = 0.64
User 26342 AUC after training: 0.64
User 26342 does not improve AUC. Reverting changes.
Training on augumented user 93600 19/50 current_auc = 0.64
User 93600 AUC after training: 0.64
User 93600 does not improve AUC. Reverting changes.
Training on augumented user 29338 20/50 current_auc = 0.64
User 29338 AUC after training: 0.6333333333333333
User 29338 does not improve AUC. Reverting changes.
Training on augumented user 13001 21/50 current_auc = 0.64
User 13001 AUC after training: 0.6333333333333333
User 13001 does not improve AUC. Reverting changes.
Training on augumented user 172 22/50 current_auc = 0.64
User 172 AUC after training: 0.6333333333333333
User 172 does not improve AUC. Reverting changes.
Training on augumented user 113574 23/50 current_auc = 0.64
User 113574 AUC after training: 0.6333333333333333
User 113574 does not improve AUC. Reverting changes.
Training on augumented user 60135 24/50 current_auc = 0.64
User 60135 AUC after training: 0.6333333333333333
User 60135 does not improve AUC. Reverting changes.
Training on augumented user 87357 25/50 current_auc = 0.64
User 87357 AUC after training: 0.64
User 87357 does not improve AUC. Reverting changes.
Training on augumented user 132675 26/50 current_auc = 0.64
User 132675 AUC after training: 0.6333333333333333
User 132675 does not improve AUC. Reverting changes.
Training on augumented user 135045 27/50 current_auc = 0.64
User 135045 AUC after training: 0.6333333333333333
User 135045 does not improve AUC. Reverting changes.
Training on augumented user 131483 28/50 current_auc = 0.64
User 131483 AUC after training: 0.64
User 131483 does not improve AUC. Reverting changes.
Training on augumented user 133677 29/50 current_auc = 0.64
User 133677 AUC after training: 0.64
User 133677 does not improve AUC. Reverting changes.
Training on augumented user 68954 30/50 current_auc = 0.64
User 68954 AUC after training: 0.6333333333333333
User 68954 does not improve AUC. Reverting changes.
Training on augumented user 49332 31/50 current_auc = 0.64
User 49332 AUC after training: 0.6333333333333333
User 49332 does not improve AUC. Reverting changes.
Training on augumented user 136802 32/50 current_auc = 0.64
User 136802 AUC after training: 0.6333333333333333
User 136802 does not improve AUC. Reverting changes.
Training on augumented user 103025 33/50 current_auc = 0.64
User 103025 AUC after training: 0.6333333333333333
User 103025 does not improve AUC. Reverting changes.
Training on augumented user 87981 34/50 current_auc = 0.64
User 87981 AUC after training: 0.64
User 87981 does not improve AUC. Reverting changes.
Training on augumented user 8755 35/50 current_auc = 0.64
User 8755 AUC after training: 0.6333333333333333
User 8755 does not improve AUC. Reverting changes.
Training on augumented user 49157 36/50 current_auc = 0.64
User 49157 AUC after training: 0.6333333333333333
User 49157 does not improve AUC. Reverting changes.
Training on augumented user 7647 37/50 current_auc = 0.64
User 7647 AUC after training: 0.64
User 7647 does not improve AUC. Reverting changes.
Training on augumented user 31752 38/50 current_auc = 0.64
User 31752 AUC after training: 0.64
User 31752 does not improve AUC. Reverting changes.
Training on augumented user 2066 39/50 current_auc = 0.64
User 2066 AUC after training: 0.6333333333333333
User 2066 does not improve AUC. Reverting changes.
Training on augumented user 98382 40/50 current_auc = 0.64
User 98382 AUC after training: 0.6333333333333333
User 98382 does not improve AUC. Reverting changes.
Training on augumented user 71511 41/50 current_auc = 0.64
User 71511 AUC after training: 0.64
User 71511 does not improve AUC. Reverting changes.
Training on augumented user 74739 42/50 current_auc = 0.64
User 74739 AUC after training: 0.6333333333333333
User 74739 does not improve AUC. Reverting changes.
Training on augumented user 105187 43/50 current_auc = 0.64
User 105187 AUC after training: 0.6333333333333333
User 105187 does not improve AUC. Reverting changes.
Training on augumented user 54302 44/50 current_auc = 0.64
User 54302 AUC after training: 0.64
User 54302 does not improve AUC. Reverting changes.
Training on augumented user 22445 45/50 current_auc = 0.64
User 22445 AUC after training: 0.6333333333333333
User 22445 does not improve AUC. Reverting changes.
Training on augumented user 89824 46/50 current_auc = 0.64
User 89824 AUC after training: 0.6333333333333333
User 89824 does not improve AUC. Reverting changes.
Training on augumented user 4369 47/50 current_auc = 0.64
User 4369 AUC after training: 0.64
User 4369 does not improve AUC. Reverting changes.
Training on augumented user 79763 48/50 current_auc = 0.64
User 79763 AUC after training: 0.6333333333333333
User 79763 does not improve AUC. Reverting changes.
Training on augumented user 52428 49/50 current_auc = 0.64
User 52428 AUC after training: 0.6333333333333333
User 52428 does not improve AUC. Reverting changes.
[2024-12-02 19:17:28.992896] start test user 4254 182/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:17:29.754502] start test user 4254 182/568 recall augumented users by random, augumented_users = [113718, 52430, 64781, 58520, 118368, 74259, 96285, 112809, 124187, 24410, 28959, 69021, 23085, 98662, 63532, 136312, 4134, 56977, 38917, 3366, 137296, 92520, 129793, 4161, 43961, 71866, 66135, 113889, 134387, 31289, 104996, 138031, 123194, 130324, 51250, 95220, 93695, 76546, 135447, 51672, 115189, 93438, 66862, 90137, 119440, 9973, 99228, 80510, 56214, 89292]
[2024-12-02 19:17:29.770452] user = 4254 Cloud 182/568
[2024-12-02 19:17:29.784724] user = 4254 Local 182/568
[2024-12-02 19:17:29.925297] user = 4254 Local+ 182/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:17:32.189275] user = 4254 MPDA- 182/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4
Training on augumented user 113718 0/50 current_auc = 0.4
User 113718 AUC after training: 0.4
User 113718 does not improve AUC. Reverting changes.
Training on augumented user 52430 1/50 current_auc = 0.4
User 52430 AUC after training: 0.4
User 52430 does not improve AUC. Reverting changes.
Training on augumented user 64781 2/50 current_auc = 0.4
User 64781 AUC after training: 0.4
User 64781 does not improve AUC. Reverting changes.
Training on augumented user 58520 3/50 current_auc = 0.4
User 58520 AUC after training: 0.4
User 58520 does not improve AUC. Reverting changes.
Training on augumented user 118368 4/50 current_auc = 0.4
User 118368 AUC after training: 0.4
User 118368 does not improve AUC. Reverting changes.
Training on augumented user 74259 5/50 current_auc = 0.4
User 74259 AUC after training: 0.4
User 74259 does not improve AUC. Reverting changes.
Training on augumented user 96285 6/50 current_auc = 0.4
User 96285 AUC after training: 0.4
User 96285 does not improve AUC. Reverting changes.
Training on augumented user 112809 7/50 current_auc = 0.4
User 112809 AUC after training: 0.4
User 112809 does not improve AUC. Reverting changes.
Training on augumented user 124187 8/50 current_auc = 0.4
User 124187 AUC after training: 0.4
User 124187 does not improve AUC. Reverting changes.
Training on augumented user 24410 9/50 current_auc = 0.4
User 24410 AUC after training: 0.4
User 24410 does not improve AUC. Reverting changes.
Training on augumented user 28959 10/50 current_auc = 0.4
User 28959 AUC after training: 0.4
User 28959 does not improve AUC. Reverting changes.
Training on augumented user 69021 11/50 current_auc = 0.4
User 69021 AUC after training: 0.4
User 69021 does not improve AUC. Reverting changes.
Training on augumented user 23085 12/50 current_auc = 0.4
User 23085 AUC after training: 0.4
User 23085 does not improve AUC. Reverting changes.
Training on augumented user 98662 13/50 current_auc = 0.4
User 98662 AUC after training: 0.4
User 98662 does not improve AUC. Reverting changes.
Training on augumented user 63532 14/50 current_auc = 0.4
User 63532 AUC after training: 0.4
User 63532 does not improve AUC. Reverting changes.
Training on augumented user 136312 15/50 current_auc = 0.4
User 136312 AUC after training: 0.4
User 136312 does not improve AUC. Reverting changes.
Training on augumented user 4134 16/50 current_auc = 0.4
User 4134 AUC after training: 0.4
User 4134 does not improve AUC. Reverting changes.
Training on augumented user 56977 17/50 current_auc = 0.4
User 56977 AUC after training: 0.4
User 56977 does not improve AUC. Reverting changes.
Training on augumented user 38917 18/50 current_auc = 0.4
User 38917 AUC after training: 0.4
User 38917 does not improve AUC. Reverting changes.
Training on augumented user 3366 19/50 current_auc = 0.4
User 3366 AUC after training: 0.4
User 3366 does not improve AUC. Reverting changes.
Training on augumented user 137296 20/50 current_auc = 0.4
User 137296 AUC after training: 0.4
User 137296 does not improve AUC. Reverting changes.
Training on augumented user 92520 21/50 current_auc = 0.4
User 92520 AUC after training: 0.4
User 92520 does not improve AUC. Reverting changes.
Training on augumented user 129793 22/50 current_auc = 0.4
User 129793 AUC after training: 0.4
User 129793 does not improve AUC. Reverting changes.
Training on augumented user 4161 23/50 current_auc = 0.4
User 4161 AUC after training: 0.4
User 4161 does not improve AUC. Reverting changes.
Training on augumented user 43961 24/50 current_auc = 0.4
User 43961 AUC after training: 0.4
User 43961 does not improve AUC. Reverting changes.
Training on augumented user 71866 25/50 current_auc = 0.4
User 71866 AUC after training: 0.4
User 71866 does not improve AUC. Reverting changes.
Training on augumented user 66135 26/50 current_auc = 0.4
User 66135 AUC after training: 0.4
User 66135 does not improve AUC. Reverting changes.
Training on augumented user 113889 27/50 current_auc = 0.4
User 113889 AUC after training: 0.4
User 113889 does not improve AUC. Reverting changes.
Training on augumented user 134387 28/50 current_auc = 0.4
User 134387 AUC after training: 0.4
User 134387 does not improve AUC. Reverting changes.
Training on augumented user 31289 29/50 current_auc = 0.4
User 31289 AUC after training: 0.4
User 31289 does not improve AUC. Reverting changes.
Training on augumented user 104996 30/50 current_auc = 0.4
User 104996 AUC after training: 0.4
User 104996 does not improve AUC. Reverting changes.
Training on augumented user 138031 31/50 current_auc = 0.4
User 138031 AUC after training: 0.4
User 138031 does not improve AUC. Reverting changes.
Training on augumented user 123194 32/50 current_auc = 0.4
User 123194 AUC after training: 0.4
User 123194 does not improve AUC. Reverting changes.
Training on augumented user 130324 33/50 current_auc = 0.4
User 130324 AUC after training: 0.4
User 130324 does not improve AUC. Reverting changes.
Training on augumented user 51250 34/50 current_auc = 0.4
User 51250 AUC after training: 0.4
User 51250 does not improve AUC. Reverting changes.
Training on augumented user 95220 35/50 current_auc = 0.4
User 95220 AUC after training: 0.4
User 95220 does not improve AUC. Reverting changes.
Training on augumented user 93695 36/50 current_auc = 0.4
User 93695 AUC after training: 0.4
User 93695 does not improve AUC. Reverting changes.
Training on augumented user 76546 37/50 current_auc = 0.4
User 76546 AUC after training: 0.4
User 76546 does not improve AUC. Reverting changes.
Training on augumented user 135447 38/50 current_auc = 0.4
User 135447 AUC after training: 0.4
User 135447 does not improve AUC. Reverting changes.
Training on augumented user 51672 39/50 current_auc = 0.4
User 51672 AUC after training: 0.4
User 51672 does not improve AUC. Reverting changes.
Training on augumented user 115189 40/50 current_auc = 0.4
User 115189 AUC after training: 0.4
User 115189 does not improve AUC. Reverting changes.
Training on augumented user 93438 41/50 current_auc = 0.4
User 93438 AUC after training: 0.4
User 93438 does not improve AUC. Reverting changes.
Training on augumented user 66862 42/50 current_auc = 0.4
User 66862 AUC after training: 0.4
User 66862 does not improve AUC. Reverting changes.
Training on augumented user 90137 43/50 current_auc = 0.4
User 90137 AUC after training: 0.4
User 90137 does not improve AUC. Reverting changes.
Training on augumented user 119440 44/50 current_auc = 0.4
User 119440 AUC after training: 0.4
User 119440 does not improve AUC. Reverting changes.
Training on augumented user 9973 45/50 current_auc = 0.4
User 9973 AUC after training: 0.4
User 9973 does not improve AUC. Reverting changes.
Training on augumented user 99228 46/50 current_auc = 0.4
User 99228 AUC after training: 0.4
User 99228 does not improve AUC. Reverting changes.
Training on augumented user 80510 47/50 current_auc = 0.4
User 80510 AUC after training: 0.4
User 80510 does not improve AUC. Reverting changes.
Training on augumented user 56214 48/50 current_auc = 0.4
User 56214 AUC after training: 0.4
User 56214 does not improve AUC. Reverting changes.
Training on augumented user 89292 49/50 current_auc = 0.4
User 89292 AUC after training: 0.4
User 89292 does not improve AUC. Reverting changes.
[2024-12-02 19:18:02.768535] start test user 4276 183/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:18:03.288459] start test user 4276 183/568 recall augumented users by random, augumented_users = [28726, 74163, 68947, 88793, 11896, 20390, 90329, 87873, 135238, 11647, 75332, 105835, 24499, 64034, 33127, 127370, 37874, 127404, 2354, 20586, 15233, 21306, 104748, 33330, 68692, 113357, 38757, 1258, 46774, 109321, 88048, 49114, 69022, 57685, 19880, 105894, 1833, 5087, 125326, 134694, 19057, 43461, 136845, 20093, 68208, 60112, 84958, 50366, 51529, 88154]
[2024-12-02 19:18:03.313802] user = 4276 Cloud 183/568
[2024-12-02 19:18:03.406579] user = 4276 Local 183/568
[2024-12-02 19:18:04.033641] user = 4276 Local+ 183/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:18:06.078268] user = 4276 MPDA- 183/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6267287416130357
Training on augumented user 28726 0/50 current_auc = 0.6267287416130357
User 28726 AUC after training: 0.6264548815555251
User 28726 does not improve AUC. Reverting changes.
Training on augumented user 74163 1/50 current_auc = 0.6267287416130357
User 74163 AUC after training: 0.6267972066274133
User 74163 improves AUC. Keeping the model.
Training on augumented user 68947 2/50 current_auc = 0.6267972066274133
User 68947 AUC after training: 0.626865671641791
User 68947 improves AUC. Keeping the model.
Training on augumented user 88793 3/50 current_auc = 0.626865671641791
User 88793 AUC after training: 0.6264548815555251
User 88793 does not improve AUC. Reverting changes.
Training on augumented user 11896 4/50 current_auc = 0.626865671641791
User 11896 AUC after training: 0.6266602765986581
User 11896 does not improve AUC. Reverting changes.
Training on augumented user 20390 5/50 current_auc = 0.626865671641791
User 20390 AUC after training: 0.626660276598658
User 20390 does not improve AUC. Reverting changes.
Training on augumented user 90329 6/50 current_auc = 0.626865671641791
User 90329 AUC after training: 0.6266602765986581
User 90329 does not improve AUC. Reverting changes.
Training on augumented user 87873 7/50 current_auc = 0.626865671641791
User 87873 AUC after training: 0.6267287416130357
User 87873 does not improve AUC. Reverting changes.
Training on augumented user 135238 8/50 current_auc = 0.626865671641791
User 135238 AUC after training: 0.6266602765986581
User 135238 does not improve AUC. Reverting changes.
Training on augumented user 11647 9/50 current_auc = 0.626865671641791
User 11647 AUC after training: 0.6270026016705463
User 11647 improves AUC. Keeping the model.
Training on augumented user 75332 10/50 current_auc = 0.6270026016705463
User 75332 AUC after training: 0.6267287416130356
User 75332 does not improve AUC. Reverting changes.
Training on augumented user 105835 11/50 current_auc = 0.6270026016705463
User 105835 AUC after training: 0.6270026016705463
User 105835 does not improve AUC. Reverting changes.
Training on augumented user 24499 12/50 current_auc = 0.6270026016705463
User 24499 AUC after training: 0.627276461728057
User 24499 improves AUC. Keeping the model.
Training on augumented user 64034 13/50 current_auc = 0.627276461728057
User 64034 AUC after training: 0.6272079967136793
User 64034 does not improve AUC. Reverting changes.
Training on augumented user 33127 14/50 current_auc = 0.627276461728057
User 33127 AUC after training: 0.627276461728057
User 33127 does not improve AUC. Reverting changes.
Training on augumented user 127370 15/50 current_auc = 0.627276461728057
User 127370 AUC after training: 0.6263179515267698
User 127370 does not improve AUC. Reverting changes.
Training on augumented user 37874 16/50 current_auc = 0.627276461728057
User 37874 AUC after training: 0.6271395316993017
User 37874 does not improve AUC. Reverting changes.
Training on augumented user 127404 17/50 current_auc = 0.627276461728057
User 127404 AUC after training: 0.6270026016705463
User 127404 does not improve AUC. Reverting changes.
Training on augumented user 2354 18/50 current_auc = 0.627276461728057
User 2354 AUC after training: 0.627071066684924
User 2354 does not improve AUC. Reverting changes.
Training on augumented user 20586 19/50 current_auc = 0.627276461728057
User 20586 AUC after training: 0.6273449267424346
User 20586 improves AUC. Keeping the model.
Training on augumented user 15233 20/50 current_auc = 0.6273449267424346
User 15233 AUC after training: 0.6273449267424346
User 15233 does not improve AUC. Reverting changes.
Training on augumented user 21306 21/50 current_auc = 0.6273449267424346
User 21306 AUC after training: 0.6274818567711898
User 21306 improves AUC. Keeping the model.
Training on augumented user 104748 22/50 current_auc = 0.6274818567711898
User 104748 AUC after training: 0.6274818567711898
User 104748 does not improve AUC. Reverting changes.
Training on augumented user 33330 23/50 current_auc = 0.6274818567711898
User 33330 AUC after training: 0.6276187867999453
User 33330 improves AUC. Keeping the model.
Training on augumented user 68692 24/50 current_auc = 0.6276187867999453
User 68692 AUC after training: 0.627071066684924
User 68692 does not improve AUC. Reverting changes.
Training on augumented user 113357 25/50 current_auc = 0.6276187867999453
User 113357 AUC after training: 0.6278241818430782
User 113357 improves AUC. Keeping the model.
Training on augumented user 38757 26/50 current_auc = 0.6278241818430782
User 38757 AUC after training: 0.62748185677119
User 38757 does not improve AUC. Reverting changes.
Training on augumented user 1258 27/50 current_auc = 0.6278241818430782
User 1258 AUC after training: 0.6275503217855676
User 1258 does not improve AUC. Reverting changes.
Training on augumented user 46774 28/50 current_auc = 0.6278241818430782
User 46774 AUC after training: 0.6278926468574558
User 46774 improves AUC. Keeping the model.
Training on augumented user 109321 29/50 current_auc = 0.6278926468574558
User 109321 AUC after training: 0.62748185677119
User 109321 does not improve AUC. Reverting changes.
Training on augumented user 88048 30/50 current_auc = 0.6278926468574558
User 88048 AUC after training: 0.6276187867999452
User 88048 does not improve AUC. Reverting changes.
Training on augumented user 49114 31/50 current_auc = 0.6278926468574558
User 49114 AUC after training: 0.6273449267424346
User 49114 does not improve AUC. Reverting changes.
Training on augumented user 69022 32/50 current_auc = 0.6278926468574558
User 69022 AUC after training: 0.6280295768862111
User 69022 improves AUC. Keeping the model.
Training on augumented user 57685 33/50 current_auc = 0.6280295768862111
User 57685 AUC after training: 0.6281665069149664
User 57685 improves AUC. Keeping the model.
Training on augumented user 19880 34/50 current_auc = 0.6281665069149664
User 19880 AUC after training: 0.6276187867999452
User 19880 does not improve AUC. Reverting changes.
Training on augumented user 105894 35/50 current_auc = 0.6281665069149664
User 105894 AUC after training: 0.6281665069149664
User 105894 does not improve AUC. Reverting changes.
Training on augumented user 1833 36/50 current_auc = 0.6281665069149664
User 1833 AUC after training: 0.6280980419005888
User 1833 does not improve AUC. Reverting changes.
Training on augumented user 5087 37/50 current_auc = 0.6281665069149664
User 5087 AUC after training: 0.6278926468574558
User 5087 does not improve AUC. Reverting changes.
Training on augumented user 125326 38/50 current_auc = 0.6281665069149664
User 125326 AUC after training: 0.6280980419005888
User 125326 does not improve AUC. Reverting changes.
Training on augumented user 134694 39/50 current_auc = 0.6281665069149664
User 134694 AUC after training: 0.62748185677119
User 134694 does not improve AUC. Reverting changes.
Training on augumented user 19057 40/50 current_auc = 0.6281665069149664
User 19057 AUC after training: 0.6274133917568123
User 19057 does not improve AUC. Reverting changes.
Training on augumented user 43461 41/50 current_auc = 0.6281665069149664
User 43461 AUC after training: 0.6278926468574558
User 43461 does not improve AUC. Reverting changes.
Training on augumented user 136845 42/50 current_auc = 0.6281665069149664
User 136845 AUC after training: 0.6275503217855677
User 136845 does not improve AUC. Reverting changes.
Training on augumented user 20093 43/50 current_auc = 0.6281665069149664
User 20093 AUC after training: 0.6275503217855676
User 20093 does not improve AUC. Reverting changes.
Training on augumented user 68208 44/50 current_auc = 0.6281665069149664
User 68208 AUC after training: 0.6280295768862112
User 68208 does not improve AUC. Reverting changes.
Training on augumented user 60112 45/50 current_auc = 0.6281665069149664
User 60112 AUC after training: 0.6280295768862112
User 60112 does not improve AUC. Reverting changes.
Training on augumented user 84958 46/50 current_auc = 0.6281665069149664
User 84958 AUC after training: 0.6274133917568122
User 84958 does not improve AUC. Reverting changes.
Training on augumented user 50366 47/50 current_auc = 0.6281665069149664
User 50366 AUC after training: 0.6278241818430782
User 50366 does not improve AUC. Reverting changes.
Training on augumented user 51529 48/50 current_auc = 0.6281665069149664
User 51529 AUC after training: 0.6281665069149664
User 51529 does not improve AUC. Reverting changes.
Training on augumented user 88154 49/50 current_auc = 0.6281665069149664
User 88154 AUC after training: 0.6276187867999452
User 88154 does not improve AUC. Reverting changes.
[2024-12-02 19:18:40.521021] start test user 4292 184/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:18:41.156442] start test user 4292 184/568 recall augumented users by random, augumented_users = [118471, 23685, 35654, 125634, 23129, 52976, 27497, 63790, 86057, 43254, 50455, 61167, 100890, 77457, 70403, 12125, 21609, 20322, 90403, 30724, 76609, 41468, 73607, 14936, 119207, 92597, 130971, 108747, 22759, 43264, 8290, 72174, 109121, 58630, 76182, 76606, 125509, 81623, 75594, 5567, 76726, 136105, 133821, 41735, 16823, 107657, 113517, 92575, 119657, 59019]
[2024-12-02 19:18:41.177256] user = 4292 Cloud 184/568
[2024-12-02 19:18:41.193715] user = 4292 Local 184/568
[2024-12-02 19:18:41.265701] user = 4292 Local+ 184/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:18:44.393318] user = 4292 MPDA- 184/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4411764705882353
Training on augumented user 118471 0/50 current_auc = 0.4411764705882353
User 118471 AUC after training: 0.4411764705882353
User 118471 does not improve AUC. Reverting changes.
Training on augumented user 23685 1/50 current_auc = 0.4411764705882353
User 23685 AUC after training: 0.4411764705882353
User 23685 does not improve AUC. Reverting changes.
Training on augumented user 35654 2/50 current_auc = 0.4411764705882353
User 35654 AUC after training: 0.4411764705882353
User 35654 does not improve AUC. Reverting changes.
Training on augumented user 125634 3/50 current_auc = 0.4411764705882353
User 125634 AUC after training: 0.4411764705882353
User 125634 does not improve AUC. Reverting changes.
Training on augumented user 23129 4/50 current_auc = 0.4411764705882353
User 23129 AUC after training: 0.4411764705882353
User 23129 does not improve AUC. Reverting changes.
Training on augumented user 52976 5/50 current_auc = 0.4411764705882353
User 52976 AUC after training: 0.4411764705882353
User 52976 does not improve AUC. Reverting changes.
Training on augumented user 27497 6/50 current_auc = 0.4411764705882353
User 27497 AUC after training: 0.4411764705882353
User 27497 does not improve AUC. Reverting changes.
Training on augumented user 63790 7/50 current_auc = 0.4411764705882353
User 63790 AUC after training: 0.4411764705882353
User 63790 does not improve AUC. Reverting changes.
Training on augumented user 86057 8/50 current_auc = 0.4411764705882353
User 86057 AUC after training: 0.4411764705882353
User 86057 does not improve AUC. Reverting changes.
Training on augumented user 43254 9/50 current_auc = 0.4411764705882353
User 43254 AUC after training: 0.4411764705882353
User 43254 does not improve AUC. Reverting changes.
Training on augumented user 50455 10/50 current_auc = 0.4411764705882353
User 50455 AUC after training: 0.4411764705882353
User 50455 does not improve AUC. Reverting changes.
Training on augumented user 61167 11/50 current_auc = 0.4411764705882353
User 61167 AUC after training: 0.4411764705882353
User 61167 does not improve AUC. Reverting changes.
Training on augumented user 100890 12/50 current_auc = 0.4411764705882353
User 100890 AUC after training: 0.4411764705882353
User 100890 does not improve AUC. Reverting changes.
Training on augumented user 77457 13/50 current_auc = 0.4411764705882353
User 77457 AUC after training: 0.4411764705882353
User 77457 does not improve AUC. Reverting changes.
Training on augumented user 70403 14/50 current_auc = 0.4411764705882353
User 70403 AUC after training: 0.4411764705882353
User 70403 does not improve AUC. Reverting changes.
Training on augumented user 12125 15/50 current_auc = 0.4411764705882353
User 12125 AUC after training: 0.4411764705882353
User 12125 does not improve AUC. Reverting changes.
Training on augumented user 21609 16/50 current_auc = 0.4411764705882353
User 21609 AUC after training: 0.4411764705882353
User 21609 does not improve AUC. Reverting changes.
Training on augumented user 20322 17/50 current_auc = 0.4411764705882353
User 20322 AUC after training: 0.4411764705882353
User 20322 does not improve AUC. Reverting changes.
Training on augumented user 90403 18/50 current_auc = 0.4411764705882353
User 90403 AUC after training: 0.4411764705882353
User 90403 does not improve AUC. Reverting changes.
Training on augumented user 30724 19/50 current_auc = 0.4411764705882353
User 30724 AUC after training: 0.4411764705882353
User 30724 does not improve AUC. Reverting changes.
Training on augumented user 76609 20/50 current_auc = 0.4411764705882353
User 76609 AUC after training: 0.4411764705882353
User 76609 does not improve AUC. Reverting changes.
Training on augumented user 41468 21/50 current_auc = 0.4411764705882353
User 41468 AUC after training: 0.4411764705882353
User 41468 does not improve AUC. Reverting changes.
Training on augumented user 73607 22/50 current_auc = 0.4411764705882353
User 73607 AUC after training: 0.4411764705882353
User 73607 does not improve AUC. Reverting changes.
Training on augumented user 14936 23/50 current_auc = 0.4411764705882353
User 14936 AUC after training: 0.4411764705882353
User 14936 does not improve AUC. Reverting changes.
Training on augumented user 119207 24/50 current_auc = 0.4411764705882353
User 119207 AUC after training: 0.4411764705882353
User 119207 does not improve AUC. Reverting changes.
Training on augumented user 92597 25/50 current_auc = 0.4411764705882353
User 92597 AUC after training: 0.4411764705882353
User 92597 does not improve AUC. Reverting changes.
Training on augumented user 130971 26/50 current_auc = 0.4411764705882353
User 130971 AUC after training: 0.4411764705882353
User 130971 does not improve AUC. Reverting changes.
Training on augumented user 108747 27/50 current_auc = 0.4411764705882353
User 108747 AUC after training: 0.4411764705882353
User 108747 does not improve AUC. Reverting changes.
Training on augumented user 22759 28/50 current_auc = 0.4411764705882353
User 22759 AUC after training: 0.4411764705882353
User 22759 does not improve AUC. Reverting changes.
Training on augumented user 43264 29/50 current_auc = 0.4411764705882353
User 43264 AUC after training: 0.4411764705882353
User 43264 does not improve AUC. Reverting changes.
Training on augumented user 8290 30/50 current_auc = 0.4411764705882353
User 8290 AUC after training: 0.4411764705882353
User 8290 does not improve AUC. Reverting changes.
Training on augumented user 72174 31/50 current_auc = 0.4411764705882353
User 72174 AUC after training: 0.4411764705882353
User 72174 does not improve AUC. Reverting changes.
Training on augumented user 109121 32/50 current_auc = 0.4411764705882353
User 109121 AUC after training: 0.4411764705882353
User 109121 does not improve AUC. Reverting changes.
Training on augumented user 58630 33/50 current_auc = 0.4411764705882353
User 58630 AUC after training: 0.4411764705882353
User 58630 does not improve AUC. Reverting changes.
Training on augumented user 76182 34/50 current_auc = 0.4411764705882353
User 76182 AUC after training: 0.4411764705882353
User 76182 does not improve AUC. Reverting changes.
Training on augumented user 76606 35/50 current_auc = 0.4411764705882353
User 76606 AUC after training: 0.4411764705882353
User 76606 does not improve AUC. Reverting changes.
Training on augumented user 125509 36/50 current_auc = 0.4411764705882353
User 125509 AUC after training: 0.4411764705882353
User 125509 does not improve AUC. Reverting changes.
Training on augumented user 81623 37/50 current_auc = 0.4411764705882353
User 81623 AUC after training: 0.4411764705882353
User 81623 does not improve AUC. Reverting changes.
Training on augumented user 75594 38/50 current_auc = 0.4411764705882353
User 75594 AUC after training: 0.4411764705882353
User 75594 does not improve AUC. Reverting changes.
Training on augumented user 5567 39/50 current_auc = 0.4411764705882353
User 5567 AUC after training: 0.4411764705882353
User 5567 does not improve AUC. Reverting changes.
Training on augumented user 76726 40/50 current_auc = 0.4411764705882353
User 76726 AUC after training: 0.4411764705882353
User 76726 does not improve AUC. Reverting changes.
Training on augumented user 136105 41/50 current_auc = 0.4411764705882353
User 136105 AUC after training: 0.4411764705882353
User 136105 does not improve AUC. Reverting changes.
Training on augumented user 133821 42/50 current_auc = 0.4411764705882353
User 133821 AUC after training: 0.4411764705882353
User 133821 does not improve AUC. Reverting changes.
Training on augumented user 41735 43/50 current_auc = 0.4411764705882353
User 41735 AUC after training: 0.4411764705882353
User 41735 does not improve AUC. Reverting changes.
Training on augumented user 16823 44/50 current_auc = 0.4411764705882353
User 16823 AUC after training: 0.4411764705882353
User 16823 does not improve AUC. Reverting changes.
Training on augumented user 107657 45/50 current_auc = 0.4411764705882353
User 107657 AUC after training: 0.4411764705882353
User 107657 does not improve AUC. Reverting changes.
Training on augumented user 113517 46/50 current_auc = 0.4411764705882353
User 113517 AUC after training: 0.4411764705882353
User 113517 does not improve AUC. Reverting changes.
Training on augumented user 92575 47/50 current_auc = 0.4411764705882353
User 92575 AUC after training: 0.4411764705882353
User 92575 does not improve AUC. Reverting changes.
Training on augumented user 119657 48/50 current_auc = 0.4411764705882353
User 119657 AUC after training: 0.4411764705882353
User 119657 does not improve AUC. Reverting changes.
Training on augumented user 59019 49/50 current_auc = 0.4411764705882353
User 59019 AUC after training: 0.4411764705882353
User 59019 does not improve AUC. Reverting changes.
[2024-12-02 19:19:14.874168] start test user 4347 185/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:19:15.720335] start test user 4347 185/568 recall augumented users by random, augumented_users = [16209, 23272, 75576, 107783, 743, 66504, 88769, 31959, 136827, 63975, 102341, 38228, 35966, 64249, 52514, 100575, 65063, 129974, 12154, 21475, 34839, 70160, 45562, 89340, 65576, 3964, 18592, 37553, 56839, 3020, 112926, 84666, 91774, 134586, 123721, 35665, 120828, 116224, 18481, 90590, 137190, 99534, 21320, 35400, 67993, 71851, 116559, 98722, 73549, 97397]
[2024-12-02 19:19:15.750935] user = 4347 Cloud 185/568
[2024-12-02 19:19:15.792223] user = 4347 Local 185/568
[2024-12-02 19:19:16.108792] user = 4347 Local+ 185/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:19:18.841065] user = 4347 MPDA- 185/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.600627990430622
Training on augumented user 16209 0/50 current_auc = 0.600627990430622
User 16209 AUC after training: 0.600627990430622
User 16209 does not improve AUC. Reverting changes.
Training on augumented user 23272 1/50 current_auc = 0.600627990430622
User 23272 AUC after training: 0.5994318181818182
User 23272 does not improve AUC. Reverting changes.
Training on augumented user 75576 2/50 current_auc = 0.600627990430622
User 75576 AUC after training: 0.600627990430622
User 75576 does not improve AUC. Reverting changes.
Training on augumented user 107783 3/50 current_auc = 0.600627990430622
User 107783 AUC after training: 0.6006279904306221
User 107783 improves AUC. Keeping the model.
Training on augumented user 743 4/50 current_auc = 0.6006279904306221
User 743 AUC after training: 0.6006279904306221
User 743 does not improve AUC. Reverting changes.
Training on augumented user 66504 5/50 current_auc = 0.6006279904306221
User 66504 AUC after training: 0.6006279904306221
User 66504 does not improve AUC. Reverting changes.
Training on augumented user 88769 6/50 current_auc = 0.6006279904306221
User 88769 AUC after training: 0.6013755980861244
User 88769 improves AUC. Keeping the model.
Training on augumented user 31959 7/50 current_auc = 0.6013755980861244
User 31959 AUC after training: 0.6018241626794258
User 31959 improves AUC. Keeping the model.
Training on augumented user 136827 8/50 current_auc = 0.6018241626794258
User 136827 AUC after training: 0.6018241626794258
User 136827 does not improve AUC. Reverting changes.
Training on augumented user 63975 9/50 current_auc = 0.6018241626794258
User 63975 AUC after training: 0.6013755980861244
User 63975 does not improve AUC. Reverting changes.
Training on augumented user 102341 10/50 current_auc = 0.6018241626794258
User 102341 AUC after training: 0.6007775119617225
User 102341 does not improve AUC. Reverting changes.
Training on augumented user 38228 11/50 current_auc = 0.6018241626794258
User 38228 AUC after training: 0.6070574162679425
User 38228 improves AUC. Keeping the model.
Training on augumented user 35966 12/50 current_auc = 0.6070574162679425
User 35966 AUC after training: 0.6052631578947368
User 35966 does not improve AUC. Reverting changes.
Training on augumented user 64249 13/50 current_auc = 0.6070574162679425
User 64249 AUC after training: 0.6055622009569378
User 64249 does not improve AUC. Reverting changes.
Training on augumented user 52514 14/50 current_auc = 0.6070574162679425
User 52514 AUC after training: 0.6031698564593302
User 52514 does not improve AUC. Reverting changes.
Training on augumented user 100575 15/50 current_auc = 0.6070574162679425
User 100575 AUC after training: 0.6063098086124401
User 100575 does not improve AUC. Reverting changes.
Training on augumented user 65063 16/50 current_auc = 0.6070574162679425
User 65063 AUC after training: 0.6063098086124402
User 65063 does not improve AUC. Reverting changes.
Training on augumented user 129974 17/50 current_auc = 0.6070574162679425
User 129974 AUC after training: 0.6064593301435406
User 129974 does not improve AUC. Reverting changes.
Training on augumented user 12154 18/50 current_auc = 0.6070574162679425
User 12154 AUC after training: 0.6066088516746412
User 12154 does not improve AUC. Reverting changes.
Training on augumented user 21475 19/50 current_auc = 0.6070574162679425
User 21475 AUC after training: 0.6060107655502392
User 21475 does not improve AUC. Reverting changes.
Training on augumented user 34839 20/50 current_auc = 0.6070574162679425
User 34839 AUC after training: 0.6066088516746411
User 34839 does not improve AUC. Reverting changes.
Training on augumented user 70160 21/50 current_auc = 0.6070574162679425
User 70160 AUC after training: 0.6060107655502392
User 70160 does not improve AUC. Reverting changes.
Training on augumented user 45562 22/50 current_auc = 0.6070574162679425
User 45562 AUC after training: 0.6066088516746411
User 45562 does not improve AUC. Reverting changes.
Training on augumented user 89340 23/50 current_auc = 0.6070574162679425
User 89340 AUC after training: 0.6060107655502392
User 89340 does not improve AUC. Reverting changes.
Training on augumented user 65576 24/50 current_auc = 0.6070574162679425
User 65576 AUC after training: 0.6076555023923444
User 65576 improves AUC. Keeping the model.
Training on augumented user 3964 25/50 current_auc = 0.6076555023923444
User 3964 AUC after training: 0.6076555023923444
User 3964 does not improve AUC. Reverting changes.
Training on augumented user 18592 26/50 current_auc = 0.6076555023923444
User 18592 AUC after training: 0.6078050239234449
User 18592 improves AUC. Keeping the model.
Training on augumented user 37553 27/50 current_auc = 0.6078050239234449
User 37553 AUC after training: 0.6070574162679426
User 37553 does not improve AUC. Reverting changes.
Training on augumented user 56839 28/50 current_auc = 0.6078050239234449
User 56839 AUC after training: 0.6084031100478469
User 56839 improves AUC. Keeping the model.
Training on augumented user 3020 29/50 current_auc = 0.6084031100478469
User 3020 AUC after training: 0.6076555023923444
User 3020 does not improve AUC. Reverting changes.
Training on augumented user 112926 30/50 current_auc = 0.6084031100478469
User 112926 AUC after training: 0.6094497607655504
User 112926 improves AUC. Keeping the model.
Training on augumented user 84666 31/50 current_auc = 0.6094497607655504
User 84666 AUC after training: 0.6090011961722488
User 84666 does not improve AUC. Reverting changes.
Training on augumented user 91774 32/50 current_auc = 0.6094497607655504
User 91774 AUC after training: 0.6087021531100478
User 91774 does not improve AUC. Reverting changes.
Training on augumented user 134586 33/50 current_auc = 0.6094497607655504
User 134586 AUC after training: 0.6088516746411483
User 134586 does not improve AUC. Reverting changes.
Training on augumented user 123721 34/50 current_auc = 0.6094497607655504
User 123721 AUC after training: 0.6093002392344498
User 123721 does not improve AUC. Reverting changes.
Training on augumented user 35665 35/50 current_auc = 0.6094497607655504
User 35665 AUC after training: 0.607505980861244
User 35665 does not improve AUC. Reverting changes.
Training on augumented user 120828 36/50 current_auc = 0.6094497607655504
User 120828 AUC after training: 0.6090011961722488
User 120828 does not improve AUC. Reverting changes.
Training on augumented user 116224 37/50 current_auc = 0.6094497607655504
User 116224 AUC after training: 0.6095992822966507
User 116224 improves AUC. Keeping the model.
Training on augumented user 18481 38/50 current_auc = 0.6095992822966507
User 18481 AUC after training: 0.6098983253588517
User 18481 improves AUC. Keeping the model.
Training on augumented user 90590 39/50 current_auc = 0.6098983253588517
User 90590 AUC after training: 0.6097488038277511
User 90590 does not improve AUC. Reverting changes.
Training on augumented user 137190 40/50 current_auc = 0.6098983253588517
User 137190 AUC after training: 0.6100478468899522
User 137190 improves AUC. Keeping the model.
Training on augumented user 99534 41/50 current_auc = 0.6100478468899522
User 99534 AUC after training: 0.6085526315789473
User 99534 does not improve AUC. Reverting changes.
Training on augumented user 21320 42/50 current_auc = 0.6100478468899522
User 21320 AUC after training: 0.6100478468899522
User 21320 does not improve AUC. Reverting changes.
Training on augumented user 35400 43/50 current_auc = 0.6100478468899522
User 35400 AUC after training: 0.6098983253588517
User 35400 does not improve AUC. Reverting changes.
Training on augumented user 67993 44/50 current_auc = 0.6100478468899522
User 67993 AUC after training: 0.6097488038277512
User 67993 does not improve AUC. Reverting changes.
Training on augumented user 71851 45/50 current_auc = 0.6100478468899522
User 71851 AUC after training: 0.6101973684210527
User 71851 improves AUC. Keeping the model.
Training on augumented user 116559 46/50 current_auc = 0.6101973684210527
User 116559 AUC after training: 0.6097488038277512
User 116559 does not improve AUC. Reverting changes.
Training on augumented user 98722 47/50 current_auc = 0.6101973684210527
User 98722 AUC after training: 0.6098983253588517
User 98722 does not improve AUC. Reverting changes.
Training on augumented user 73549 48/50 current_auc = 0.6101973684210527
User 73549 AUC after training: 0.6091507177033493
User 73549 does not improve AUC. Reverting changes.
Training on augumented user 97397 49/50 current_auc = 0.6101973684210527
User 97397 AUC after training: 0.6082535885167465
User 97397 does not improve AUC. Reverting changes.
[2024-12-02 19:19:46.586464] start test user 4358 186/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:19:47.213960] start test user 4358 186/568 recall augumented users by random, augumented_users = [120455, 62250, 134480, 70352, 68400, 4232, 129682, 334, 62171, 97242, 1569, 26369, 112576, 133684, 1736, 68263, 52341, 88221, 8166, 42762, 99743, 61930, 24393, 102534, 123850, 45057, 103441, 115961, 12047, 124740, 135354, 9388, 123240, 18870, 79017, 134979, 12521, 54392, 114297, 5146, 53088, 110543, 33405, 84705, 51906, 137111, 54604, 11277, 38472, 126030]
[2024-12-02 19:19:47.246407] user = 4358 Cloud 186/568
[2024-12-02 19:19:47.265313] user = 4358 Local 186/568
[2024-12-02 19:19:47.855326] user = 4358 Local+ 186/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:19:50.194732] user = 4358 MPDA- 186/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6987545787545788
Training on augumented user 120455 0/50 current_auc = 0.6987545787545788
User 120455 AUC after training: 0.6977289377289377
User 120455 does not improve AUC. Reverting changes.
Training on augumented user 62250 1/50 current_auc = 0.6987545787545788
User 62250 AUC after training: 0.6981684981684981
User 62250 does not improve AUC. Reverting changes.
Training on augumented user 134480 2/50 current_auc = 0.6987545787545788
User 134480 AUC after training: 0.6981684981684982
User 134480 does not improve AUC. Reverting changes.
Training on augumented user 70352 3/50 current_auc = 0.6987545787545788
User 70352 AUC after training: 0.6983150183150184
User 70352 does not improve AUC. Reverting changes.
Training on augumented user 68400 4/50 current_auc = 0.6987545787545788
User 68400 AUC after training: 0.6983150183150184
User 68400 does not improve AUC. Reverting changes.
Training on augumented user 4232 5/50 current_auc = 0.6987545787545788
User 4232 AUC after training: 0.698021978021978
User 4232 does not improve AUC. Reverting changes.
Training on augumented user 129682 6/50 current_auc = 0.6987545787545788
User 129682 AUC after training: 0.6953846153846155
User 129682 does not improve AUC. Reverting changes.
Training on augumented user 334 7/50 current_auc = 0.6987545787545788
User 334 AUC after training: 0.6978754578754579
User 334 does not improve AUC. Reverting changes.
Training on augumented user 62171 8/50 current_auc = 0.6987545787545788
User 62171 AUC after training: 0.6977289377289377
User 62171 does not improve AUC. Reverting changes.
Training on augumented user 97242 9/50 current_auc = 0.6987545787545788
User 97242 AUC after training: 0.6977289377289376
User 97242 does not improve AUC. Reverting changes.
Training on augumented user 1569 10/50 current_auc = 0.6987545787545788
User 1569 AUC after training: 0.6980219780219781
User 1569 does not improve AUC. Reverting changes.
Training on augumented user 26369 11/50 current_auc = 0.6987545787545788
User 26369 AUC after training: 0.6974358974358975
User 26369 does not improve AUC. Reverting changes.
Training on augumented user 112576 12/50 current_auc = 0.6987545787545788
User 112576 AUC after training: 0.6980219780219781
User 112576 does not improve AUC. Reverting changes.
Training on augumented user 133684 13/50 current_auc = 0.6987545787545788
User 133684 AUC after training: 0.6972893772893772
User 133684 does not improve AUC. Reverting changes.
Training on augumented user 1736 14/50 current_auc = 0.6987545787545788
User 1736 AUC after training: 0.6974358974358974
User 1736 does not improve AUC. Reverting changes.
Training on augumented user 68263 15/50 current_auc = 0.6987545787545788
User 68263 AUC after training: 0.6983150183150184
User 68263 does not improve AUC. Reverting changes.
Training on augumented user 52341 16/50 current_auc = 0.6987545787545788
User 52341 AUC after training: 0.6986080586080586
User 52341 does not improve AUC. Reverting changes.
Training on augumented user 88221 17/50 current_auc = 0.6987545787545788
User 88221 AUC after training: 0.6972893772893773
User 88221 does not improve AUC. Reverting changes.
Training on augumented user 8166 18/50 current_auc = 0.6987545787545788
User 8166 AUC after training: 0.6983150183150183
User 8166 does not improve AUC. Reverting changes.
Training on augumented user 42762 19/50 current_auc = 0.6987545787545788
User 42762 AUC after training: 0.6984615384615385
User 42762 does not improve AUC. Reverting changes.
Training on augumented user 99743 20/50 current_auc = 0.6987545787545788
User 99743 AUC after training: 0.6981684981684981
User 99743 does not improve AUC. Reverting changes.
Training on augumented user 61930 21/50 current_auc = 0.6987545787545788
User 61930 AUC after training: 0.6987545787545788
User 61930 does not improve AUC. Reverting changes.
Training on augumented user 24393 22/50 current_auc = 0.6987545787545788
User 24393 AUC after training: 0.6981684981684982
User 24393 does not improve AUC. Reverting changes.
Training on augumented user 102534 23/50 current_auc = 0.6987545787545788
User 102534 AUC after training: 0.6981684981684981
User 102534 does not improve AUC. Reverting changes.
Training on augumented user 123850 24/50 current_auc = 0.6987545787545788
User 123850 AUC after training: 0.6980219780219781
User 123850 does not improve AUC. Reverting changes.
Training on augumented user 45057 25/50 current_auc = 0.6987545787545788
User 45057 AUC after training: 0.6987545787545787
User 45057 does not improve AUC. Reverting changes.
Training on augumented user 103441 26/50 current_auc = 0.6987545787545788
User 103441 AUC after training: 0.6978754578754579
User 103441 does not improve AUC. Reverting changes.
Training on augumented user 115961 27/50 current_auc = 0.6987545787545788
User 115961 AUC after training: 0.6983150183150183
User 115961 does not improve AUC. Reverting changes.
Training on augumented user 12047 28/50 current_auc = 0.6987545787545788
User 12047 AUC after training: 0.6980219780219781
User 12047 does not improve AUC. Reverting changes.
Training on augumented user 124740 29/50 current_auc = 0.6987545787545788
User 124740 AUC after training: 0.6975824175824177
User 124740 does not improve AUC. Reverting changes.
Training on augumented user 135354 30/50 current_auc = 0.6987545787545788
User 135354 AUC after training: 0.6983150183150183
User 135354 does not improve AUC. Reverting changes.
Training on augumented user 9388 31/50 current_auc = 0.6987545787545788
User 9388 AUC after training: 0.6978754578754578
User 9388 does not improve AUC. Reverting changes.
Training on augumented user 123240 32/50 current_auc = 0.6987545787545788
User 123240 AUC after training: 0.6986080586080586
User 123240 does not improve AUC. Reverting changes.
Training on augumented user 18870 33/50 current_auc = 0.6987545787545788
User 18870 AUC after training: 0.6981684981684981
User 18870 does not improve AUC. Reverting changes.
Training on augumented user 79017 34/50 current_auc = 0.6987545787545788
User 79017 AUC after training: 0.6983150183150184
User 79017 does not improve AUC. Reverting changes.
Training on augumented user 134979 35/50 current_auc = 0.6987545787545788
User 134979 AUC after training: 0.6984615384615385
User 134979 does not improve AUC. Reverting changes.
Training on augumented user 12521 36/50 current_auc = 0.6987545787545788
User 12521 AUC after training: 0.6981684981684982
User 12521 does not improve AUC. Reverting changes.
Training on augumented user 54392 37/50 current_auc = 0.6987545787545788
User 54392 AUC after training: 0.6981684981684981
User 54392 does not improve AUC. Reverting changes.
Training on augumented user 114297 38/50 current_auc = 0.6987545787545788
User 114297 AUC after training: 0.6986080586080585
User 114297 does not improve AUC. Reverting changes.
Training on augumented user 5146 39/50 current_auc = 0.6987545787545788
User 5146 AUC after training: 0.6986080586080586
User 5146 does not improve AUC. Reverting changes.
Training on augumented user 53088 40/50 current_auc = 0.6987545787545788
User 53088 AUC after training: 0.6972893772893772
User 53088 does not improve AUC. Reverting changes.
Training on augumented user 110543 41/50 current_auc = 0.6987545787545788
User 110543 AUC after training: 0.6986080586080585
User 110543 does not improve AUC. Reverting changes.
Training on augumented user 33405 42/50 current_auc = 0.6987545787545788
User 33405 AUC after training: 0.696996336996337
User 33405 does not improve AUC. Reverting changes.
Training on augumented user 84705 43/50 current_auc = 0.6987545787545788
User 84705 AUC after training: 0.6983150183150183
User 84705 does not improve AUC. Reverting changes.
Training on augumented user 51906 44/50 current_auc = 0.6987545787545788
User 51906 AUC after training: 0.6981684981684981
User 51906 does not improve AUC. Reverting changes.
Training on augumented user 137111 45/50 current_auc = 0.6987545787545788
User 137111 AUC after training: 0.6987545787545787
User 137111 does not improve AUC. Reverting changes.
Training on augumented user 54604 46/50 current_auc = 0.6987545787545788
User 54604 AUC after training: 0.6984615384615384
User 54604 does not improve AUC. Reverting changes.
Training on augumented user 11277 47/50 current_auc = 0.6987545787545788
User 11277 AUC after training: 0.6983150183150184
User 11277 does not improve AUC. Reverting changes.
Training on augumented user 38472 48/50 current_auc = 0.6987545787545788
User 38472 AUC after training: 0.6975824175824176
User 38472 does not improve AUC. Reverting changes.
Training on augumented user 126030 49/50 current_auc = 0.6987545787545788
User 126030 AUC after training: 0.6984615384615385
User 126030 does not improve AUC. Reverting changes.
[2024-12-02 19:20:18.016205] start test user 4391 187/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:20:18.742219] start test user 4391 187/568 recall augumented users by random, augumented_users = [96647, 32954, 49785, 137032, 133771, 15944, 45500, 65962, 22160, 113428, 79018, 21205, 43517, 29425, 111440, 94784, 6879, 124362, 1679, 129270, 29984, 91277, 134025, 81894, 59904, 121219, 97116, 131322, 33185, 68061, 51562, 71258, 46453, 35674, 47900, 22062, 28520, 43759, 117241, 13, 46821, 6787, 114732, 109833, 108701, 32932, 119161, 116915, 49961, 21514]
[2024-12-02 19:20:18.758592] user = 4391 Cloud 187/568
[2024-12-02 19:20:18.769605] user = 4391 Local 187/568
[2024-12-02 19:20:18.822096] user = 4391 Local+ 187/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:20:22.155338] user = 4391 MPDA- 187/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5909090909090909
Training on augumented user 96647 0/50 current_auc = 0.5909090909090909
User 96647 AUC after training: 0.5909090909090909
User 96647 does not improve AUC. Reverting changes.
Training on augumented user 32954 1/50 current_auc = 0.5909090909090909
User 32954 AUC after training: 0.5909090909090909
User 32954 does not improve AUC. Reverting changes.
Training on augumented user 49785 2/50 current_auc = 0.5909090909090909
User 49785 AUC after training: 0.5909090909090909
User 49785 does not improve AUC. Reverting changes.
Training on augumented user 137032 3/50 current_auc = 0.5909090909090909
User 137032 AUC after training: 0.5909090909090909
User 137032 does not improve AUC. Reverting changes.
Training on augumented user 133771 4/50 current_auc = 0.5909090909090909
User 133771 AUC after training: 0.5909090909090909
User 133771 does not improve AUC. Reverting changes.
Training on augumented user 15944 5/50 current_auc = 0.5909090909090909
User 15944 AUC after training: 0.5909090909090909
User 15944 does not improve AUC. Reverting changes.
Training on augumented user 45500 6/50 current_auc = 0.5909090909090909
User 45500 AUC after training: 0.5909090909090909
User 45500 does not improve AUC. Reverting changes.
Training on augumented user 65962 7/50 current_auc = 0.5909090909090909
User 65962 AUC after training: 0.5909090909090909
User 65962 does not improve AUC. Reverting changes.
Training on augumented user 22160 8/50 current_auc = 0.5909090909090909
User 22160 AUC after training: 0.5909090909090909
User 22160 does not improve AUC. Reverting changes.
Training on augumented user 113428 9/50 current_auc = 0.5909090909090909
User 113428 AUC after training: 0.5909090909090909
User 113428 does not improve AUC. Reverting changes.
Training on augumented user 79018 10/50 current_auc = 0.5909090909090909
User 79018 AUC after training: 0.5909090909090909
User 79018 does not improve AUC. Reverting changes.
Training on augumented user 21205 11/50 current_auc = 0.5909090909090909
User 21205 AUC after training: 0.5909090909090909
User 21205 does not improve AUC. Reverting changes.
Training on augumented user 43517 12/50 current_auc = 0.5909090909090909
User 43517 AUC after training: 0.5909090909090909
User 43517 does not improve AUC. Reverting changes.
Training on augumented user 29425 13/50 current_auc = 0.5909090909090909
User 29425 AUC after training: 0.5909090909090909
User 29425 does not improve AUC. Reverting changes.
Training on augumented user 111440 14/50 current_auc = 0.5909090909090909
User 111440 AUC after training: 0.5909090909090909
User 111440 does not improve AUC. Reverting changes.
Training on augumented user 94784 15/50 current_auc = 0.5909090909090909
User 94784 AUC after training: 0.5909090909090909
User 94784 does not improve AUC. Reverting changes.
Training on augumented user 6879 16/50 current_auc = 0.5909090909090909
User 6879 AUC after training: 0.5909090909090909
User 6879 does not improve AUC. Reverting changes.
Training on augumented user 124362 17/50 current_auc = 0.5909090909090909
User 124362 AUC after training: 0.5909090909090909
User 124362 does not improve AUC. Reverting changes.
Training on augumented user 1679 18/50 current_auc = 0.5909090909090909
User 1679 AUC after training: 0.5909090909090909
User 1679 does not improve AUC. Reverting changes.
Training on augumented user 129270 19/50 current_auc = 0.5909090909090909
User 129270 AUC after training: 0.5909090909090909
User 129270 does not improve AUC. Reverting changes.
Training on augumented user 29984 20/50 current_auc = 0.5909090909090909
User 29984 AUC after training: 0.5909090909090909
User 29984 does not improve AUC. Reverting changes.
Training on augumented user 91277 21/50 current_auc = 0.5909090909090909
User 91277 AUC after training: 0.5909090909090909
User 91277 does not improve AUC. Reverting changes.
Training on augumented user 134025 22/50 current_auc = 0.5909090909090909
User 134025 AUC after training: 0.5909090909090909
User 134025 does not improve AUC. Reverting changes.
Training on augumented user 81894 23/50 current_auc = 0.5909090909090909
User 81894 AUC after training: 0.5909090909090909
User 81894 does not improve AUC. Reverting changes.
Training on augumented user 59904 24/50 current_auc = 0.5909090909090909
User 59904 AUC after training: 0.5909090909090909
User 59904 does not improve AUC. Reverting changes.
Training on augumented user 121219 25/50 current_auc = 0.5909090909090909
User 121219 AUC after training: 0.5909090909090909
User 121219 does not improve AUC. Reverting changes.
Training on augumented user 97116 26/50 current_auc = 0.5909090909090909
User 97116 AUC after training: 0.5909090909090909
User 97116 does not improve AUC. Reverting changes.
Training on augumented user 131322 27/50 current_auc = 0.5909090909090909
User 131322 AUC after training: 0.5909090909090909
User 131322 does not improve AUC. Reverting changes.
Training on augumented user 33185 28/50 current_auc = 0.5909090909090909
User 33185 AUC after training: 0.5909090909090909
User 33185 does not improve AUC. Reverting changes.
Training on augumented user 68061 29/50 current_auc = 0.5909090909090909
User 68061 AUC after training: 0.5909090909090909
User 68061 does not improve AUC. Reverting changes.
Training on augumented user 51562 30/50 current_auc = 0.5909090909090909
User 51562 AUC after training: 0.5909090909090909
User 51562 does not improve AUC. Reverting changes.
Training on augumented user 71258 31/50 current_auc = 0.5909090909090909
User 71258 AUC after training: 0.5909090909090909
User 71258 does not improve AUC. Reverting changes.
Training on augumented user 46453 32/50 current_auc = 0.5909090909090909
User 46453 AUC after training: 0.5909090909090909
User 46453 does not improve AUC. Reverting changes.
Training on augumented user 35674 33/50 current_auc = 0.5909090909090909
User 35674 AUC after training: 0.5909090909090909
User 35674 does not improve AUC. Reverting changes.
Training on augumented user 47900 34/50 current_auc = 0.5909090909090909
User 47900 AUC after training: 0.5909090909090909
User 47900 does not improve AUC. Reverting changes.
Training on augumented user 22062 35/50 current_auc = 0.5909090909090909
User 22062 AUC after training: 0.5909090909090909
User 22062 does not improve AUC. Reverting changes.
Training on augumented user 28520 36/50 current_auc = 0.5909090909090909
User 28520 AUC after training: 0.5909090909090909
User 28520 does not improve AUC. Reverting changes.
Training on augumented user 43759 37/50 current_auc = 0.5909090909090909
User 43759 AUC after training: 0.5909090909090909
User 43759 does not improve AUC. Reverting changes.
Training on augumented user 117241 38/50 current_auc = 0.5909090909090909
User 117241 AUC after training: 0.5909090909090909
User 117241 does not improve AUC. Reverting changes.
Training on augumented user 13 39/50 current_auc = 0.5909090909090909
User 13 AUC after training: 0.5909090909090909
User 13 does not improve AUC. Reverting changes.
Training on augumented user 46821 40/50 current_auc = 0.5909090909090909
User 46821 AUC after training: 0.5909090909090909
User 46821 does not improve AUC. Reverting changes.
Training on augumented user 6787 41/50 current_auc = 0.5909090909090909
User 6787 AUC after training: 0.5909090909090909
User 6787 does not improve AUC. Reverting changes.
Training on augumented user 114732 42/50 current_auc = 0.5909090909090909
User 114732 AUC after training: 0.5909090909090909
User 114732 does not improve AUC. Reverting changes.
Training on augumented user 109833 43/50 current_auc = 0.5909090909090909
User 109833 AUC after training: 0.5909090909090909
User 109833 does not improve AUC. Reverting changes.
Training on augumented user 108701 44/50 current_auc = 0.5909090909090909
User 108701 AUC after training: 0.5909090909090909
User 108701 does not improve AUC. Reverting changes.
Training on augumented user 32932 45/50 current_auc = 0.5909090909090909
User 32932 AUC after training: 0.5909090909090909
User 32932 does not improve AUC. Reverting changes.
Training on augumented user 119161 46/50 current_auc = 0.5909090909090909
User 119161 AUC after training: 0.5909090909090909
User 119161 does not improve AUC. Reverting changes.
Training on augumented user 116915 47/50 current_auc = 0.5909090909090909
User 116915 AUC after training: 0.5909090909090909
User 116915 does not improve AUC. Reverting changes.
Training on augumented user 49961 48/50 current_auc = 0.5909090909090909
User 49961 AUC after training: 0.5909090909090909
User 49961 does not improve AUC. Reverting changes.
Training on augumented user 21514 49/50 current_auc = 0.5909090909090909
User 21514 AUC after training: 0.5909090909090909
User 21514 does not improve AUC. Reverting changes.
[2024-12-02 19:20:51.464990] start test user 4402 188/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:20:51.939016] start test user 4402 188/568 recall augumented users by random, augumented_users = [17163, 73695, 77222, 134098, 73686, 92051, 11848, 79839, 73036, 137459, 14954, 68049, 40596, 16119, 74092, 12721, 13783, 74205, 30881, 54996, 61191, 113560, 49694, 82892, 122561, 60507, 125355, 44342, 29927, 114086, 127423, 301, 21153, 70888, 19442, 5399, 1113, 103330, 51507, 22479, 104539, 67761, 117046, 73308, 24919, 123126, 918, 123430, 118451, 134769]
[2024-12-02 19:20:51.954064] user = 4402 Cloud 188/568
[2024-12-02 19:20:51.963346] user = 4402 Local 188/568
[2024-12-02 19:20:52.022664] user = 4402 Local+ 188/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:20:53.858936] user = 4402 MPDA- 188/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4375
Training on augumented user 17163 0/50 current_auc = 0.4375
User 17163 AUC after training: 0.4375
User 17163 does not improve AUC. Reverting changes.
Training on augumented user 73695 1/50 current_auc = 0.4375
User 73695 AUC after training: 0.4375
User 73695 does not improve AUC. Reverting changes.
Training on augumented user 77222 2/50 current_auc = 0.4375
User 77222 AUC after training: 0.4375
User 77222 does not improve AUC. Reverting changes.
Training on augumented user 134098 3/50 current_auc = 0.4375
User 134098 AUC after training: 0.4375
User 134098 does not improve AUC. Reverting changes.
Training on augumented user 73686 4/50 current_auc = 0.4375
User 73686 AUC after training: 0.4375
User 73686 does not improve AUC. Reverting changes.
Training on augumented user 92051 5/50 current_auc = 0.4375
User 92051 AUC after training: 0.4375
User 92051 does not improve AUC. Reverting changes.
Training on augumented user 11848 6/50 current_auc = 0.4375
User 11848 AUC after training: 0.4375
User 11848 does not improve AUC. Reverting changes.
Training on augumented user 79839 7/50 current_auc = 0.4375
User 79839 AUC after training: 0.4375
User 79839 does not improve AUC. Reverting changes.
Training on augumented user 73036 8/50 current_auc = 0.4375
User 73036 AUC after training: 0.4375
User 73036 does not improve AUC. Reverting changes.
Training on augumented user 137459 9/50 current_auc = 0.4375
User 137459 AUC after training: 0.4375
User 137459 does not improve AUC. Reverting changes.
Training on augumented user 14954 10/50 current_auc = 0.4375
User 14954 AUC after training: 0.4375
User 14954 does not improve AUC. Reverting changes.
Training on augumented user 68049 11/50 current_auc = 0.4375
User 68049 AUC after training: 0.4375
User 68049 does not improve AUC. Reverting changes.
Training on augumented user 40596 12/50 current_auc = 0.4375
User 40596 AUC after training: 0.4375
User 40596 does not improve AUC. Reverting changes.
Training on augumented user 16119 13/50 current_auc = 0.4375
User 16119 AUC after training: 0.4375
User 16119 does not improve AUC. Reverting changes.
Training on augumented user 74092 14/50 current_auc = 0.4375
User 74092 AUC after training: 0.4375
User 74092 does not improve AUC. Reverting changes.
Training on augumented user 12721 15/50 current_auc = 0.4375
User 12721 AUC after training: 0.4375
User 12721 does not improve AUC. Reverting changes.
Training on augumented user 13783 16/50 current_auc = 0.4375
User 13783 AUC after training: 0.4375
User 13783 does not improve AUC. Reverting changes.
Training on augumented user 74205 17/50 current_auc = 0.4375
User 74205 AUC after training: 0.4375
User 74205 does not improve AUC. Reverting changes.
Training on augumented user 30881 18/50 current_auc = 0.4375
User 30881 AUC after training: 0.4375
User 30881 does not improve AUC. Reverting changes.
Training on augumented user 54996 19/50 current_auc = 0.4375
User 54996 AUC after training: 0.4375
User 54996 does not improve AUC. Reverting changes.
Training on augumented user 61191 20/50 current_auc = 0.4375
User 61191 AUC after training: 0.4375
User 61191 does not improve AUC. Reverting changes.
Training on augumented user 113560 21/50 current_auc = 0.4375
User 113560 AUC after training: 0.4375
User 113560 does not improve AUC. Reverting changes.
Training on augumented user 49694 22/50 current_auc = 0.4375
User 49694 AUC after training: 0.4375
User 49694 does not improve AUC. Reverting changes.
Training on augumented user 82892 23/50 current_auc = 0.4375
User 82892 AUC after training: 0.4375
User 82892 does not improve AUC. Reverting changes.
Training on augumented user 122561 24/50 current_auc = 0.4375
User 122561 AUC after training: 0.4375
User 122561 does not improve AUC. Reverting changes.
Training on augumented user 60507 25/50 current_auc = 0.4375
User 60507 AUC after training: 0.4375
User 60507 does not improve AUC. Reverting changes.
Training on augumented user 125355 26/50 current_auc = 0.4375
User 125355 AUC after training: 0.4375
User 125355 does not improve AUC. Reverting changes.
Training on augumented user 44342 27/50 current_auc = 0.4375
User 44342 AUC after training: 0.4375
User 44342 does not improve AUC. Reverting changes.
Training on augumented user 29927 28/50 current_auc = 0.4375
User 29927 AUC after training: 0.4375
User 29927 does not improve AUC. Reverting changes.
Training on augumented user 114086 29/50 current_auc = 0.4375
User 114086 AUC after training: 0.4375
User 114086 does not improve AUC. Reverting changes.
Training on augumented user 127423 30/50 current_auc = 0.4375
User 127423 AUC after training: 0.4375
User 127423 does not improve AUC. Reverting changes.
Training on augumented user 301 31/50 current_auc = 0.4375
User 301 AUC after training: 0.4375
User 301 does not improve AUC. Reverting changes.
Training on augumented user 21153 32/50 current_auc = 0.4375
User 21153 AUC after training: 0.4375
User 21153 does not improve AUC. Reverting changes.
Training on augumented user 70888 33/50 current_auc = 0.4375
User 70888 AUC after training: 0.4375
User 70888 does not improve AUC. Reverting changes.
Training on augumented user 19442 34/50 current_auc = 0.4375
User 19442 AUC after training: 0.4375
User 19442 does not improve AUC. Reverting changes.
Training on augumented user 5399 35/50 current_auc = 0.4375
User 5399 AUC after training: 0.4375
User 5399 does not improve AUC. Reverting changes.
Training on augumented user 1113 36/50 current_auc = 0.4375
User 1113 AUC after training: 0.375
User 1113 does not improve AUC. Reverting changes.
Training on augumented user 103330 37/50 current_auc = 0.4375
User 103330 AUC after training: 0.4375
User 103330 does not improve AUC. Reverting changes.
Training on augumented user 51507 38/50 current_auc = 0.4375
User 51507 AUC after training: 0.4375
User 51507 does not improve AUC. Reverting changes.
Training on augumented user 22479 39/50 current_auc = 0.4375
User 22479 AUC after training: 0.4375
User 22479 does not improve AUC. Reverting changes.
Training on augumented user 104539 40/50 current_auc = 0.4375
User 104539 AUC after training: 0.4375
User 104539 does not improve AUC. Reverting changes.
Training on augumented user 67761 41/50 current_auc = 0.4375
User 67761 AUC after training: 0.4375
User 67761 does not improve AUC. Reverting changes.
Training on augumented user 117046 42/50 current_auc = 0.4375
User 117046 AUC after training: 0.4375
User 117046 does not improve AUC. Reverting changes.
Training on augumented user 73308 43/50 current_auc = 0.4375
User 73308 AUC after training: 0.4375
User 73308 does not improve AUC. Reverting changes.
Training on augumented user 24919 44/50 current_auc = 0.4375
User 24919 AUC after training: 0.4375
User 24919 does not improve AUC. Reverting changes.
Training on augumented user 123126 45/50 current_auc = 0.4375
User 123126 AUC after training: 0.4375
User 123126 does not improve AUC. Reverting changes.
Training on augumented user 918 46/50 current_auc = 0.4375
User 918 AUC after training: 0.4375
User 918 does not improve AUC. Reverting changes.
Training on augumented user 123430 47/50 current_auc = 0.4375
User 123430 AUC after training: 0.4375
User 123430 does not improve AUC. Reverting changes.
Training on augumented user 118451 48/50 current_auc = 0.4375
User 118451 AUC after training: 0.4375
User 118451 does not improve AUC. Reverting changes.
Training on augumented user 134769 49/50 current_auc = 0.4375
User 134769 AUC after training: 0.4375
User 134769 does not improve AUC. Reverting changes.
[2024-12-02 19:21:21.957673] start test user 4431 189/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:21:22.413790] start test user 4431 189/568 recall augumented users by random, augumented_users = [81183, 90189, 112576, 123887, 100854, 136821, 134188, 17268, 35004, 125144, 79555, 88479, 111062, 101815, 4697, 116603, 52210, 29979, 5227, 138152, 5014, 108835, 134216, 108618, 72669, 108021, 104677, 14073, 1605, 97534, 95480, 52876, 116507, 25470, 21578, 56665, 19502, 69991, 4461, 130783, 124169, 74008, 88151, 81380, 122826, 80607, 137535, 34419, 89505, 73541]
[2024-12-02 19:21:22.428377] user = 4431 Cloud 189/568
[2024-12-02 19:21:22.438878] user = 4431 Local 189/568
[2024-12-02 19:21:22.477481] user = 4431 Local+ 189/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:21:25.320418] user = 4431 MPDA- 189/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.58
Training on augumented user 81183 0/50 current_auc = 0.58
User 81183 AUC after training: 0.5833333333333333
User 81183 improves AUC. Keeping the model.
Training on augumented user 90189 1/50 current_auc = 0.5833333333333333
User 90189 AUC after training: 0.5833333333333333
User 90189 does not improve AUC. Reverting changes.
Training on augumented user 112576 2/50 current_auc = 0.5833333333333333
User 112576 AUC after training: 0.5833333333333333
User 112576 does not improve AUC. Reverting changes.
Training on augumented user 123887 3/50 current_auc = 0.5833333333333333
User 123887 AUC after training: 0.5833333333333333
User 123887 does not improve AUC. Reverting changes.
Training on augumented user 100854 4/50 current_auc = 0.5833333333333333
User 100854 AUC after training: 0.5866666666666667
User 100854 improves AUC. Keeping the model.
Training on augumented user 136821 5/50 current_auc = 0.5866666666666667
User 136821 AUC after training: 0.5866666666666667
User 136821 does not improve AUC. Reverting changes.
Training on augumented user 134188 6/50 current_auc = 0.5866666666666667
User 134188 AUC after training: 0.5866666666666667
User 134188 does not improve AUC. Reverting changes.
Training on augumented user 17268 7/50 current_auc = 0.5866666666666667
User 17268 AUC after training: 0.5866666666666667
User 17268 does not improve AUC. Reverting changes.
Training on augumented user 35004 8/50 current_auc = 0.5866666666666667
User 35004 AUC after training: 0.58
User 35004 does not improve AUC. Reverting changes.
Training on augumented user 125144 9/50 current_auc = 0.5866666666666667
User 125144 AUC after training: 0.5833333333333333
User 125144 does not improve AUC. Reverting changes.
Training on augumented user 79555 10/50 current_auc = 0.5866666666666667
User 79555 AUC after training: 0.5866666666666667
User 79555 does not improve AUC. Reverting changes.
Training on augumented user 88479 11/50 current_auc = 0.5866666666666667
User 88479 AUC after training: 0.5866666666666667
User 88479 does not improve AUC. Reverting changes.
Training on augumented user 111062 12/50 current_auc = 0.5866666666666667
User 111062 AUC after training: 0.5866666666666667
User 111062 does not improve AUC. Reverting changes.
Training on augumented user 101815 13/50 current_auc = 0.5866666666666667
User 101815 AUC after training: 0.5833333333333333
User 101815 does not improve AUC. Reverting changes.
Training on augumented user 4697 14/50 current_auc = 0.5866666666666667
User 4697 AUC after training: 0.5833333333333333
User 4697 does not improve AUC. Reverting changes.
Training on augumented user 116603 15/50 current_auc = 0.5866666666666667
User 116603 AUC after training: 0.5866666666666667
User 116603 does not improve AUC. Reverting changes.
Training on augumented user 52210 16/50 current_auc = 0.5866666666666667
User 52210 AUC after training: 0.5833333333333333
User 52210 does not improve AUC. Reverting changes.
Training on augumented user 29979 17/50 current_auc = 0.5866666666666667
User 29979 AUC after training: 0.5816666666666667
User 29979 does not improve AUC. Reverting changes.
Training on augumented user 5227 18/50 current_auc = 0.5866666666666667
User 5227 AUC after training: 0.5833333333333333
User 5227 does not improve AUC. Reverting changes.
Training on augumented user 138152 19/50 current_auc = 0.5866666666666667
User 138152 AUC after training: 0.5866666666666667
User 138152 does not improve AUC. Reverting changes.
Training on augumented user 5014 20/50 current_auc = 0.5866666666666667
User 5014 AUC after training: 0.5833333333333333
User 5014 does not improve AUC. Reverting changes.
Training on augumented user 108835 21/50 current_auc = 0.5866666666666667
User 108835 AUC after training: 0.5866666666666667
User 108835 does not improve AUC. Reverting changes.
Training on augumented user 134216 22/50 current_auc = 0.5866666666666667
User 134216 AUC after training: 0.5866666666666667
User 134216 does not improve AUC. Reverting changes.
Training on augumented user 108618 23/50 current_auc = 0.5866666666666667
User 108618 AUC after training: 0.5816666666666666
User 108618 does not improve AUC. Reverting changes.
Training on augumented user 72669 24/50 current_auc = 0.5866666666666667
User 72669 AUC after training: 0.5866666666666667
User 72669 does not improve AUC. Reverting changes.
Training on augumented user 108021 25/50 current_auc = 0.5866666666666667
User 108021 AUC after training: 0.5833333333333333
User 108021 does not improve AUC. Reverting changes.
Training on augumented user 104677 26/50 current_auc = 0.5866666666666667
User 104677 AUC after training: 0.5866666666666667
User 104677 does not improve AUC. Reverting changes.
Training on augumented user 14073 27/50 current_auc = 0.5866666666666667
User 14073 AUC after training: 0.5866666666666667
User 14073 does not improve AUC. Reverting changes.
Training on augumented user 1605 28/50 current_auc = 0.5866666666666667
User 1605 AUC after training: 0.5866666666666667
User 1605 does not improve AUC. Reverting changes.
Training on augumented user 97534 29/50 current_auc = 0.5866666666666667
User 97534 AUC after training: 0.5866666666666667
User 97534 does not improve AUC. Reverting changes.
Training on augumented user 95480 30/50 current_auc = 0.5866666666666667
User 95480 AUC after training: 0.5816666666666666
User 95480 does not improve AUC. Reverting changes.
Training on augumented user 52876 31/50 current_auc = 0.5866666666666667
User 52876 AUC after training: 0.5816666666666666
User 52876 does not improve AUC. Reverting changes.
Training on augumented user 116507 32/50 current_auc = 0.5866666666666667
User 116507 AUC after training: 0.5866666666666667
User 116507 does not improve AUC. Reverting changes.
Training on augumented user 25470 33/50 current_auc = 0.5866666666666667
User 25470 AUC after training: 0.5816666666666666
User 25470 does not improve AUC. Reverting changes.
Training on augumented user 21578 34/50 current_auc = 0.5866666666666667
User 21578 AUC after training: 0.5866666666666667
User 21578 does not improve AUC. Reverting changes.
Training on augumented user 56665 35/50 current_auc = 0.5866666666666667
User 56665 AUC after training: 0.5866666666666667
User 56665 does not improve AUC. Reverting changes.
Training on augumented user 19502 36/50 current_auc = 0.5866666666666667
User 19502 AUC after training: 0.5866666666666667
User 19502 does not improve AUC. Reverting changes.
Training on augumented user 69991 37/50 current_auc = 0.5866666666666667
User 69991 AUC after training: 0.5816666666666666
User 69991 does not improve AUC. Reverting changes.
Training on augumented user 4461 38/50 current_auc = 0.5866666666666667
User 4461 AUC after training: 0.5816666666666666
User 4461 does not improve AUC. Reverting changes.
Training on augumented user 130783 39/50 current_auc = 0.5866666666666667
User 130783 AUC after training: 0.5866666666666667
User 130783 does not improve AUC. Reverting changes.
Training on augumented user 124169 40/50 current_auc = 0.5866666666666667
User 124169 AUC after training: 0.5833333333333333
User 124169 does not improve AUC. Reverting changes.
Training on augumented user 74008 41/50 current_auc = 0.5866666666666667
User 74008 AUC after training: 0.5833333333333333
User 74008 does not improve AUC. Reverting changes.
Training on augumented user 88151 42/50 current_auc = 0.5866666666666667
User 88151 AUC after training: 0.5866666666666667
User 88151 does not improve AUC. Reverting changes.
Training on augumented user 81380 43/50 current_auc = 0.5866666666666667
User 81380 AUC after training: 0.5833333333333333
User 81380 does not improve AUC. Reverting changes.
Training on augumented user 122826 44/50 current_auc = 0.5866666666666667
User 122826 AUC after training: 0.5866666666666667
User 122826 does not improve AUC. Reverting changes.
Training on augumented user 80607 45/50 current_auc = 0.5866666666666667
User 80607 AUC after training: 0.5866666666666667
User 80607 does not improve AUC. Reverting changes.
Training on augumented user 137535 46/50 current_auc = 0.5866666666666667
User 137535 AUC after training: 0.5816666666666666
User 137535 does not improve AUC. Reverting changes.
Training on augumented user 34419 47/50 current_auc = 0.5866666666666667
User 34419 AUC after training: 0.5833333333333333
User 34419 does not improve AUC. Reverting changes.
Training on augumented user 89505 48/50 current_auc = 0.5866666666666667
User 89505 AUC after training: 0.5816666666666666
User 89505 does not improve AUC. Reverting changes.
Training on augumented user 73541 49/50 current_auc = 0.5866666666666667
User 73541 AUC after training: 0.5866666666666667
User 73541 does not improve AUC. Reverting changes.
[2024-12-02 19:21:53.958331] start test user 4439 190/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:21:54.552431] start test user 4439 190/568 recall augumented users by random, augumented_users = [61879, 29109, 8195, 58106, 97751, 10244, 24789, 44955, 57126, 64273, 7289, 90704, 32063, 42083, 67505, 116427, 86653, 31464, 137089, 46285, 92241, 75630, 37921, 68670, 4297, 7112, 122535, 98320, 128787, 75730, 107806, 87830, 36996, 110398, 108350, 67648, 9804, 89228, 44996, 30468, 46095, 129669, 8786, 45553, 72046, 29202, 31855, 29649, 52953, 13210]
[2024-12-02 19:21:54.566893] user = 4439 Cloud 190/568
[2024-12-02 19:21:54.589390] user = 4439 Local 190/568
[2024-12-02 19:21:54.657162] user = 4439 Local+ 190/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:21:56.861388] user = 4439 MPDA- 190/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.55
Training on augumented user 61879 0/50 current_auc = 0.55
User 61879 AUC after training: 0.55
User 61879 does not improve AUC. Reverting changes.
Training on augumented user 29109 1/50 current_auc = 0.55
User 29109 AUC after training: 0.5482142857142858
User 29109 does not improve AUC. Reverting changes.
Training on augumented user 8195 2/50 current_auc = 0.55
User 8195 AUC after training: 0.5464285714285715
User 8195 does not improve AUC. Reverting changes.
Training on augumented user 58106 3/50 current_auc = 0.55
User 58106 AUC after training: 0.55
User 58106 does not improve AUC. Reverting changes.
Training on augumented user 97751 4/50 current_auc = 0.55
User 97751 AUC after training: 0.5464285714285715
User 97751 does not improve AUC. Reverting changes.
Training on augumented user 10244 5/50 current_auc = 0.55
User 10244 AUC after training: 0.5482142857142858
User 10244 does not improve AUC. Reverting changes.
Training on augumented user 24789 6/50 current_auc = 0.55
User 24789 AUC after training: 0.55
User 24789 does not improve AUC. Reverting changes.
Training on augumented user 44955 7/50 current_auc = 0.55
User 44955 AUC after training: 0.5464285714285715
User 44955 does not improve AUC. Reverting changes.
Training on augumented user 57126 8/50 current_auc = 0.55
User 57126 AUC after training: 0.5464285714285715
User 57126 does not improve AUC. Reverting changes.
Training on augumented user 64273 9/50 current_auc = 0.55
User 64273 AUC after training: 0.5446428571428572
User 64273 does not improve AUC. Reverting changes.
Training on augumented user 7289 10/50 current_auc = 0.55
User 7289 AUC after training: 0.5482142857142858
User 7289 does not improve AUC. Reverting changes.
Training on augumented user 90704 11/50 current_auc = 0.55
User 90704 AUC after training: 0.5464285714285715
User 90704 does not improve AUC. Reverting changes.
Training on augumented user 32063 12/50 current_auc = 0.55
User 32063 AUC after training: 0.5482142857142858
User 32063 does not improve AUC. Reverting changes.
Training on augumented user 42083 13/50 current_auc = 0.55
User 42083 AUC after training: 0.55
User 42083 does not improve AUC. Reverting changes.
Training on augumented user 67505 14/50 current_auc = 0.55
User 67505 AUC after training: 0.55
User 67505 does not improve AUC. Reverting changes.
Training on augumented user 116427 15/50 current_auc = 0.55
User 116427 AUC after training: 0.55
User 116427 does not improve AUC. Reverting changes.
Training on augumented user 86653 16/50 current_auc = 0.55
User 86653 AUC after training: 0.5410714285714286
User 86653 does not improve AUC. Reverting changes.
Training on augumented user 31464 17/50 current_auc = 0.55
User 31464 AUC after training: 0.55
User 31464 does not improve AUC. Reverting changes.
Training on augumented user 137089 18/50 current_auc = 0.55
User 137089 AUC after training: 0.5464285714285715
User 137089 does not improve AUC. Reverting changes.
Training on augumented user 46285 19/50 current_auc = 0.55
User 46285 AUC after training: 0.55
User 46285 does not improve AUC. Reverting changes.
Training on augumented user 92241 20/50 current_auc = 0.55
User 92241 AUC after training: 0.5517857142857143
User 92241 improves AUC. Keeping the model.
Training on augumented user 75630 21/50 current_auc = 0.5517857142857143
User 75630 AUC after training: 0.5428571428571429
User 75630 does not improve AUC. Reverting changes.
Training on augumented user 37921 22/50 current_auc = 0.5517857142857143
User 37921 AUC after training: 0.5482142857142858
User 37921 does not improve AUC. Reverting changes.
Training on augumented user 68670 23/50 current_auc = 0.5517857142857143
User 68670 AUC after training: 0.55
User 68670 does not improve AUC. Reverting changes.
Training on augumented user 4297 24/50 current_auc = 0.5517857142857143
User 4297 AUC after training: 0.55
User 4297 does not improve AUC. Reverting changes.
Training on augumented user 7112 25/50 current_auc = 0.5517857142857143
User 7112 AUC after training: 0.55
User 7112 does not improve AUC. Reverting changes.
Training on augumented user 122535 26/50 current_auc = 0.5517857142857143
User 122535 AUC after training: 0.55
User 122535 does not improve AUC. Reverting changes.
Training on augumented user 98320 27/50 current_auc = 0.5517857142857143
User 98320 AUC after training: 0.5482142857142858
User 98320 does not improve AUC. Reverting changes.
Training on augumented user 128787 28/50 current_auc = 0.5517857142857143
User 128787 AUC after training: 0.5482142857142858
User 128787 does not improve AUC. Reverting changes.
Training on augumented user 75730 29/50 current_auc = 0.5517857142857143
User 75730 AUC after training: 0.5517857142857143
User 75730 does not improve AUC. Reverting changes.
Training on augumented user 107806 30/50 current_auc = 0.5517857142857143
User 107806 AUC after training: 0.5428571428571429
User 107806 does not improve AUC. Reverting changes.
Training on augumented user 87830 31/50 current_auc = 0.5517857142857143
User 87830 AUC after training: 0.5517857142857143
User 87830 does not improve AUC. Reverting changes.
Training on augumented user 36996 32/50 current_auc = 0.5517857142857143
User 36996 AUC after training: 0.5517857142857143
User 36996 does not improve AUC. Reverting changes.
Training on augumented user 110398 33/50 current_auc = 0.5517857142857143
User 110398 AUC after training: 0.5517857142857143
User 110398 does not improve AUC. Reverting changes.
Training on augumented user 108350 34/50 current_auc = 0.5517857142857143
User 108350 AUC after training: 0.5446428571428572
User 108350 does not improve AUC. Reverting changes.
Training on augumented user 67648 35/50 current_auc = 0.5517857142857143
User 67648 AUC after training: 0.5482142857142858
User 67648 does not improve AUC. Reverting changes.
Training on augumented user 9804 36/50 current_auc = 0.5517857142857143
User 9804 AUC after training: 0.5482142857142858
User 9804 does not improve AUC. Reverting changes.
Training on augumented user 89228 37/50 current_auc = 0.5517857142857143
User 89228 AUC after training: 0.5517857142857143
User 89228 does not improve AUC. Reverting changes.
Training on augumented user 44996 38/50 current_auc = 0.5517857142857143
User 44996 AUC after training: 0.5446428571428572
User 44996 does not improve AUC. Reverting changes.
Training on augumented user 30468 39/50 current_auc = 0.5517857142857143
User 30468 AUC after training: 0.5517857142857143
User 30468 does not improve AUC. Reverting changes.
Training on augumented user 46095 40/50 current_auc = 0.5517857142857143
User 46095 AUC after training: 0.5339285714285714
User 46095 does not improve AUC. Reverting changes.
Training on augumented user 129669 41/50 current_auc = 0.5517857142857143
User 129669 AUC after training: 0.5517857142857143
User 129669 does not improve AUC. Reverting changes.
Training on augumented user 8786 42/50 current_auc = 0.5517857142857143
User 8786 AUC after training: 0.5464285714285715
User 8786 does not improve AUC. Reverting changes.
Training on augumented user 45553 43/50 current_auc = 0.5517857142857143
User 45553 AUC after training: 0.55
User 45553 does not improve AUC. Reverting changes.
Training on augumented user 72046 44/50 current_auc = 0.5517857142857143
User 72046 AUC after training: 0.55
User 72046 does not improve AUC. Reverting changes.
Training on augumented user 29202 45/50 current_auc = 0.5517857142857143
User 29202 AUC after training: 0.55
User 29202 does not improve AUC. Reverting changes.
Training on augumented user 31855 46/50 current_auc = 0.5517857142857143
User 31855 AUC after training: 0.5482142857142858
User 31855 does not improve AUC. Reverting changes.
Training on augumented user 29649 47/50 current_auc = 0.5517857142857143
User 29649 AUC after training: 0.55
User 29649 does not improve AUC. Reverting changes.
Training on augumented user 52953 48/50 current_auc = 0.5517857142857143
User 52953 AUC after training: 0.55
User 52953 does not improve AUC. Reverting changes.
Training on augumented user 13210 49/50 current_auc = 0.5517857142857143
User 13210 AUC after training: 0.5446428571428572
User 13210 does not improve AUC. Reverting changes.
[2024-12-02 19:22:20.883747] start test user 4450 191/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:22:21.340641] start test user 4450 191/568 recall augumented users by random, augumented_users = [104139, 46705, 107728, 54069, 113986, 21059, 36515, 61254, 94525, 88201, 115967, 119446, 118464, 67971, 69626, 39394, 93495, 118490, 93659, 82818, 96200, 138258, 134900, 16030, 18277, 72296, 21410, 21215, 136237, 14209, 96166, 47796, 41536, 65048, 26977, 108718, 124588, 43944, 119394, 126087, 121464, 4034, 123394, 56313, 62426, 63334, 5821, 46044, 128365, 2866]
[2024-12-02 19:22:21.357626] user = 4450 Cloud 191/568
[2024-12-02 19:22:21.401548] user = 4450 Local 191/568
[2024-12-02 19:22:21.589957] user = 4450 Local+ 191/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:22:24.171956] user = 4450 MPDA- 191/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4331437736949548
Training on augumented user 104139 0/50 current_auc = 0.4331437736949548
User 104139 AUC after training: 0.43270632837561973
User 104139 does not improve AUC. Reverting changes.
Training on augumented user 46705 1/50 current_auc = 0.4331437736949548
User 46705 AUC after training: 0.4329250510352872
User 46705 does not improve AUC. Reverting changes.
Training on augumented user 107728 2/50 current_auc = 0.4331437736949548
User 107728 AUC after training: 0.4336541265675124
User 107728 improves AUC. Keeping the model.
Training on augumented user 54069 3/50 current_auc = 0.4336541265675124
User 54069 AUC after training: 0.4334354039078449
User 54069 does not improve AUC. Reverting changes.
Training on augumented user 113986 4/50 current_auc = 0.4336541265675124
User 113986 AUC after training: 0.43350831146106744
User 113986 does not improve AUC. Reverting changes.
Training on augumented user 21059 5/50 current_auc = 0.4336541265675124
User 21059 AUC after training: 0.43343540390784485
User 21059 does not improve AUC. Reverting changes.
Training on augumented user 36515 6/50 current_auc = 0.4336541265675124
User 36515 AUC after training: 0.43379994167395747
User 36515 improves AUC. Keeping the model.
Training on augumented user 61254 7/50 current_auc = 0.43379994167395747
User 61254 AUC after training: 0.43372703412073493
User 61254 does not improve AUC. Reverting changes.
Training on augumented user 94525 8/50 current_auc = 0.43379994167395747
User 94525 AUC after training: 0.43343540390784485
User 94525 does not improve AUC. Reverting changes.
Training on augumented user 88201 9/50 current_auc = 0.43379994167395747
User 88201 AUC after training: 0.434310294546515
User 88201 improves AUC. Keeping the model.
Training on augumented user 115967 10/50 current_auc = 0.434310294546515
User 115967 AUC after training: 0.4339457567804025
User 115967 does not improve AUC. Reverting changes.
Training on augumented user 119446 11/50 current_auc = 0.434310294546515
User 119446 AUC after training: 0.4343832020997376
User 119446 improves AUC. Keeping the model.
Training on augumented user 118464 12/50 current_auc = 0.4343832020997376
User 118464 AUC after training: 0.4332166812481773
User 118464 does not improve AUC. Reverting changes.
Training on augumented user 67971 13/50 current_auc = 0.4343832020997376
User 67971 AUC after training: 0.4329250510352873
User 67971 does not improve AUC. Reverting changes.
Training on augumented user 69626 14/50 current_auc = 0.4343832020997376
User 69626 AUC after training: 0.4333624963546223
User 69626 does not improve AUC. Reverting changes.
Training on augumented user 39394 15/50 current_auc = 0.4343832020997376
User 39394 AUC after training: 0.43372703412073493
User 39394 does not improve AUC. Reverting changes.
Training on augumented user 93495 16/50 current_auc = 0.4343832020997376
User 93495 AUC after training: 0.43431029454651504
User 93495 does not improve AUC. Reverting changes.
Training on augumented user 118490 17/50 current_auc = 0.4343832020997376
User 118490 AUC after training: 0.4336541265675124
User 118490 does not improve AUC. Reverting changes.
Training on augumented user 93659 18/50 current_auc = 0.4343832020997376
User 93659 AUC after training: 0.43416447944007
User 93659 does not improve AUC. Reverting changes.
Training on augumented user 82818 19/50 current_auc = 0.4343832020997376
User 82818 AUC after training: 0.4342373869932925
User 82818 does not improve AUC. Reverting changes.
Training on augumented user 96200 20/50 current_auc = 0.4343832020997376
User 96200 AUC after training: 0.4342373869932925
User 96200 does not improve AUC. Reverting changes.
Training on augumented user 138258 21/50 current_auc = 0.4343832020997376
User 138258 AUC after training: 0.4346019247594051
User 138258 improves AUC. Keeping the model.
Training on augumented user 134900 22/50 current_auc = 0.4346019247594051
User 134900 AUC after training: 0.4343832020997376
User 134900 does not improve AUC. Reverting changes.
Training on augumented user 16030 23/50 current_auc = 0.4346019247594051
User 16030 AUC after training: 0.43416447944007003
User 16030 does not improve AUC. Reverting changes.
Training on augumented user 18277 24/50 current_auc = 0.4346019247594051
User 18277 AUC after training: 0.43423738699329256
User 18277 does not improve AUC. Reverting changes.
Training on augumented user 72296 25/50 current_auc = 0.4346019247594051
User 72296 AUC after training: 0.4339457567804025
User 72296 does not improve AUC. Reverting changes.
Training on augumented user 21410 26/50 current_auc = 0.4346019247594051
User 21410 AUC after training: 0.434601924759405
User 21410 does not improve AUC. Reverting changes.
Training on augumented user 21215 27/50 current_auc = 0.4346019247594051
User 21215 AUC after training: 0.4333624963546224
User 21215 does not improve AUC. Reverting changes.
Training on augumented user 136237 28/50 current_auc = 0.4346019247594051
User 136237 AUC after training: 0.434018664333625
User 136237 does not improve AUC. Reverting changes.
Training on augumented user 14209 29/50 current_auc = 0.4346019247594051
User 14209 AUC after training: 0.43452901720618264
User 14209 does not improve AUC. Reverting changes.
Training on augumented user 96166 30/50 current_auc = 0.4346019247594051
User 96166 AUC after training: 0.43416447944007003
User 96166 does not improve AUC. Reverting changes.
Training on augumented user 47796 31/50 current_auc = 0.4346019247594051
User 47796 AUC after training: 0.4347477398658501
User 47796 improves AUC. Keeping the model.
Training on augumented user 41536 32/50 current_auc = 0.4347477398658501
User 41536 AUC after training: 0.4351122776319627
User 41536 improves AUC. Keeping the model.
Training on augumented user 65048 33/50 current_auc = 0.4351122776319627
User 65048 AUC after training: 0.4348206474190726
User 65048 does not improve AUC. Reverting changes.
Training on augumented user 26977 34/50 current_auc = 0.4351122776319627
User 26977 AUC after training: 0.4348935549722951
User 26977 does not improve AUC. Reverting changes.
Training on augumented user 108718 35/50 current_auc = 0.4351122776319627
User 108718 AUC after training: 0.4346748323126276
User 108718 does not improve AUC. Reverting changes.
Training on augumented user 124588 36/50 current_auc = 0.4351122776319627
User 124588 AUC after training: 0.4358413531641878
User 124588 improves AUC. Keeping the model.
Training on augumented user 43944 37/50 current_auc = 0.4358413531641878
User 43944 AUC after training: 0.4351851851851851
User 43944 does not improve AUC. Reverting changes.
Training on augumented user 119394 38/50 current_auc = 0.4358413531641878
User 119394 AUC after training: 0.4357684456109653
User 119394 does not improve AUC. Reverting changes.
Training on augumented user 126087 39/50 current_auc = 0.4358413531641878
User 126087 AUC after training: 0.43613298337707784
User 126087 improves AUC. Keeping the model.
Training on augumented user 121464 40/50 current_auc = 0.43613298337707784
User 121464 AUC after training: 0.4349664625255176
User 121464 does not improve AUC. Reverting changes.
Training on augumented user 4034 41/50 current_auc = 0.43613298337707784
User 4034 AUC after training: 0.43576844561096534
User 4034 does not improve AUC. Reverting changes.
Training on augumented user 123394 42/50 current_auc = 0.43613298337707784
User 123394 AUC after training: 0.4358413531641879
User 123394 does not improve AUC. Reverting changes.
Training on augumented user 56313 43/50 current_auc = 0.43613298337707784
User 56313 AUC after training: 0.4351851851851852
User 56313 does not improve AUC. Reverting changes.
Training on augumented user 62426 44/50 current_auc = 0.43613298337707784
User 62426 AUC after training: 0.4356955380577428
User 62426 does not improve AUC. Reverting changes.
Training on augumented user 63334 45/50 current_auc = 0.43613298337707784
User 63334 AUC after training: 0.43554972295129774
User 63334 does not improve AUC. Reverting changes.
Training on augumented user 5821 46/50 current_auc = 0.43613298337707784
User 5821 AUC after training: 0.4354039078448527
User 5821 does not improve AUC. Reverting changes.
Training on augumented user 46044 47/50 current_auc = 0.43613298337707784
User 46044 AUC after training: 0.43562263050452027
User 46044 does not improve AUC. Reverting changes.
Training on augumented user 128365 48/50 current_auc = 0.43613298337707784
User 128365 AUC after training: 0.43591426071741035
User 128365 does not improve AUC. Reverting changes.
Training on augumented user 2866 49/50 current_auc = 0.43613298337707784
User 2866 AUC after training: 0.43416447944007
User 2866 does not improve AUC. Reverting changes.
[2024-12-02 19:22:56.838367] start test user 4475 192/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:22:57.538579] start test user 4475 192/568 recall augumented users by random, augumented_users = [112803, 113402, 104639, 47211, 117407, 66677, 137593, 16871, 128766, 127874, 124746, 108899, 71255, 88662, 74801, 109416, 13892, 14280, 92234, 85305, 116108, 135176, 42906, 82265, 60449, 133009, 16020, 22584, 79698, 86641, 16523, 21860, 125034, 47332, 56322, 20989, 131147, 28353, 75616, 39556, 113320, 14690, 48028, 107738, 30961, 5640, 4840, 49529, 110055, 96194]
[2024-12-02 19:22:57.552674] user = 4475 Cloud 192/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:22:57.569827] user = 4475 Local 192/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:22:57.644379] user = 4475 Local+ 192/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:23:00.238277] user = 4475 MPDA- 192/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 112803 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112803 AUC after training: 0.5
User 112803 does not improve AUC. Reverting changes.
Training on augumented user 113402 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113402 AUC after training: 0.5
User 113402 does not improve AUC. Reverting changes.
Training on augumented user 104639 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104639 AUC after training: 0.5
User 104639 does not improve AUC. Reverting changes.
Training on augumented user 47211 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47211 AUC after training: 0.5
User 47211 does not improve AUC. Reverting changes.
Training on augumented user 117407 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117407 AUC after training: 0.5
User 117407 does not improve AUC. Reverting changes.
Training on augumented user 66677 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66677 AUC after training: 0.5
User 66677 does not improve AUC. Reverting changes.
Training on augumented user 137593 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137593 AUC after training: 0.5
User 137593 does not improve AUC. Reverting changes.
Training on augumented user 16871 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16871 AUC after training: 0.5
User 16871 does not improve AUC. Reverting changes.
Training on augumented user 128766 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128766 AUC after training: 0.5
User 128766 does not improve AUC. Reverting changes.
Training on augumented user 127874 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127874 AUC after training: 0.5
User 127874 does not improve AUC. Reverting changes.
Training on augumented user 124746 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124746 AUC after training: 0.5
User 124746 does not improve AUC. Reverting changes.
Training on augumented user 108899 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108899 AUC after training: 0.5
User 108899 does not improve AUC. Reverting changes.
Training on augumented user 71255 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71255 AUC after training: 0.5
User 71255 does not improve AUC. Reverting changes.
Training on augumented user 88662 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88662 AUC after training: 0.5
User 88662 does not improve AUC. Reverting changes.
Training on augumented user 74801 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74801 AUC after training: 0.5
User 74801 does not improve AUC. Reverting changes.
Training on augumented user 109416 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109416 AUC after training: 0.5
User 109416 does not improve AUC. Reverting changes.
Training on augumented user 13892 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13892 AUC after training: 0.5
User 13892 does not improve AUC. Reverting changes.
Training on augumented user 14280 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14280 AUC after training: 0.5
User 14280 does not improve AUC. Reverting changes.
Training on augumented user 92234 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92234 AUC after training: 0.5
User 92234 does not improve AUC. Reverting changes.
Training on augumented user 85305 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85305 AUC after training: 0.5
User 85305 does not improve AUC. Reverting changes.
Training on augumented user 116108 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116108 AUC after training: 0.5
User 116108 does not improve AUC. Reverting changes.
Training on augumented user 135176 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135176 AUC after training: 0.5
User 135176 does not improve AUC. Reverting changes.
Training on augumented user 42906 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42906 AUC after training: 0.5
User 42906 does not improve AUC. Reverting changes.
Training on augumented user 82265 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82265 AUC after training: 0.5
User 82265 does not improve AUC. Reverting changes.
Training on augumented user 60449 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60449 AUC after training: 0.5
User 60449 does not improve AUC. Reverting changes.
Training on augumented user 133009 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133009 AUC after training: 0.5
User 133009 does not improve AUC. Reverting changes.
Training on augumented user 16020 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16020 AUC after training: 0.5
User 16020 does not improve AUC. Reverting changes.
Training on augumented user 22584 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22584 AUC after training: 0.5
User 22584 does not improve AUC. Reverting changes.
Training on augumented user 79698 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79698 AUC after training: 0.5
User 79698 does not improve AUC. Reverting changes.
Training on augumented user 86641 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86641 AUC after training: 0.5
User 86641 does not improve AUC. Reverting changes.
Training on augumented user 16523 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16523 AUC after training: 0.5
User 16523 does not improve AUC. Reverting changes.
Training on augumented user 21860 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21860 AUC after training: 0.5
User 21860 does not improve AUC. Reverting changes.
Training on augumented user 125034 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125034 AUC after training: 0.5
User 125034 does not improve AUC. Reverting changes.
Training on augumented user 47332 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47332 AUC after training: 0.5
User 47332 does not improve AUC. Reverting changes.
Training on augumented user 56322 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56322 AUC after training: 0.5
User 56322 does not improve AUC. Reverting changes.
Training on augumented user 20989 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20989 AUC after training: 0.5
User 20989 does not improve AUC. Reverting changes.
Training on augumented user 131147 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131147 AUC after training: 0.5
User 131147 does not improve AUC. Reverting changes.
Training on augumented user 28353 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28353 AUC after training: 0.5
User 28353 does not improve AUC. Reverting changes.
Training on augumented user 75616 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75616 AUC after training: 0.5
User 75616 does not improve AUC. Reverting changes.
Training on augumented user 39556 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39556 AUC after training: 0.5
User 39556 does not improve AUC. Reverting changes.
Training on augumented user 113320 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113320 AUC after training: 0.5
User 113320 does not improve AUC. Reverting changes.
Training on augumented user 14690 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14690 AUC after training: 0.5
User 14690 does not improve AUC. Reverting changes.
Training on augumented user 48028 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48028 AUC after training: 0.5
User 48028 does not improve AUC. Reverting changes.
Training on augumented user 107738 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107738 AUC after training: 0.5
User 107738 does not improve AUC. Reverting changes.
Training on augumented user 30961 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30961 AUC after training: 0.5
User 30961 does not improve AUC. Reverting changes.
Training on augumented user 5640 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5640 AUC after training: 0.5
User 5640 does not improve AUC. Reverting changes.
Training on augumented user 4840 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4840 AUC after training: 0.5
User 4840 does not improve AUC. Reverting changes.
Training on augumented user 49529 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49529 AUC after training: 0.5
User 49529 does not improve AUC. Reverting changes.
Training on augumented user 110055 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110055 AUC after training: 0.5
User 110055 does not improve AUC. Reverting changes.
Training on augumented user 96194 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96194 AUC after training: 0.5
User 96194 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:23:26.338959] start test user 4483 193/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:23:26.932027] start test user 4483 193/568 recall augumented users by random, augumented_users = [105605, 31584, 19681, 133122, 71967, 8607, 43613, 29049, 107821, 31725, 108469, 19517, 8024, 57747, 40414, 19408, 134147, 6451, 114002, 7403, 54691, 77676, 93916, 79783, 107302, 50431, 38874, 25227, 98552, 71333, 50390, 87894, 82294, 90388, 31129, 15027, 17903, 62777, 25492, 124785, 70645, 9237, 50978, 98615, 115771, 80132, 78138, 87336, 110892, 68852]
[2024-12-02 19:23:26.953211] user = 4483 Cloud 193/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:23:26.959893] user = 4483 Local 193/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:23:27.040834] user = 4483 Local+ 193/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:23:29.217803] user = 4483 MPDA- 193/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 105605 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105605 AUC after training: 0.5
User 105605 does not improve AUC. Reverting changes.
Training on augumented user 31584 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31584 AUC after training: 0.5
User 31584 does not improve AUC. Reverting changes.
Training on augumented user 19681 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19681 AUC after training: 0.5
User 19681 does not improve AUC. Reverting changes.
Training on augumented user 133122 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133122 AUC after training: 0.5
User 133122 does not improve AUC. Reverting changes.
Training on augumented user 71967 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71967 AUC after training: 0.5
User 71967 does not improve AUC. Reverting changes.
Training on augumented user 8607 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8607 AUC after training: 0.5
User 8607 does not improve AUC. Reverting changes.
Training on augumented user 43613 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43613 AUC after training: 0.5
User 43613 does not improve AUC. Reverting changes.
Training on augumented user 29049 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29049 AUC after training: 0.5
User 29049 does not improve AUC. Reverting changes.
Training on augumented user 107821 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107821 AUC after training: 0.5
User 107821 does not improve AUC. Reverting changes.
Training on augumented user 31725 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31725 AUC after training: 0.5
User 31725 does not improve AUC. Reverting changes.
Training on augumented user 108469 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108469 AUC after training: 0.5
User 108469 does not improve AUC. Reverting changes.
Training on augumented user 19517 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19517 AUC after training: 0.5
User 19517 does not improve AUC. Reverting changes.
Training on augumented user 8024 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8024 AUC after training: 0.5
User 8024 does not improve AUC. Reverting changes.
Training on augumented user 57747 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57747 AUC after training: 0.5
User 57747 does not improve AUC. Reverting changes.
Training on augumented user 40414 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40414 AUC after training: 0.5
User 40414 does not improve AUC. Reverting changes.
Training on augumented user 19408 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19408 AUC after training: 0.5
User 19408 does not improve AUC. Reverting changes.
Training on augumented user 134147 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134147 AUC after training: 0.5
User 134147 does not improve AUC. Reverting changes.
Training on augumented user 6451 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6451 AUC after training: 0.5
User 6451 does not improve AUC. Reverting changes.
Training on augumented user 114002 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114002 AUC after training: 0.5
User 114002 does not improve AUC. Reverting changes.
Training on augumented user 7403 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7403 AUC after training: 0.5
User 7403 does not improve AUC. Reverting changes.
Training on augumented user 54691 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54691 AUC after training: 0.5
User 54691 does not improve AUC. Reverting changes.
Training on augumented user 77676 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77676 AUC after training: 0.5
User 77676 does not improve AUC. Reverting changes.
Training on augumented user 93916 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93916 AUC after training: 0.5
User 93916 does not improve AUC. Reverting changes.
Training on augumented user 79783 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79783 AUC after training: 0.5
User 79783 does not improve AUC. Reverting changes.
Training on augumented user 107302 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107302 AUC after training: 0.5
User 107302 does not improve AUC. Reverting changes.
Training on augumented user 50431 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50431 AUC after training: 0.5
User 50431 does not improve AUC. Reverting changes.
Training on augumented user 38874 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38874 AUC after training: 0.5
User 38874 does not improve AUC. Reverting changes.
Training on augumented user 25227 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25227 AUC after training: 0.5
User 25227 does not improve AUC. Reverting changes.
Training on augumented user 98552 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98552 AUC after training: 0.5
User 98552 does not improve AUC. Reverting changes.
Training on augumented user 71333 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71333 AUC after training: 0.5
User 71333 does not improve AUC. Reverting changes.
Training on augumented user 50390 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50390 AUC after training: 0.5
User 50390 does not improve AUC. Reverting changes.
Training on augumented user 87894 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87894 AUC after training: 0.5
User 87894 does not improve AUC. Reverting changes.
Training on augumented user 82294 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82294 AUC after training: 0.5
User 82294 does not improve AUC. Reverting changes.
Training on augumented user 90388 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90388 AUC after training: 0.5
User 90388 does not improve AUC. Reverting changes.
Training on augumented user 31129 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31129 AUC after training: 0.5
User 31129 does not improve AUC. Reverting changes.
Training on augumented user 15027 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15027 AUC after training: 0.5
User 15027 does not improve AUC. Reverting changes.
Training on augumented user 17903 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17903 AUC after training: 0.5
User 17903 does not improve AUC. Reverting changes.
Training on augumented user 62777 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62777 AUC after training: 0.5
User 62777 does not improve AUC. Reverting changes.
Training on augumented user 25492 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25492 AUC after training: 0.5
User 25492 does not improve AUC. Reverting changes.
Training on augumented user 124785 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124785 AUC after training: 0.5
User 124785 does not improve AUC. Reverting changes.
Training on augumented user 70645 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70645 AUC after training: 0.5
User 70645 does not improve AUC. Reverting changes.
Training on augumented user 9237 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9237 AUC after training: 0.5
User 9237 does not improve AUC. Reverting changes.
Training on augumented user 50978 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50978 AUC after training: 0.5
User 50978 does not improve AUC. Reverting changes.
Training on augumented user 98615 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98615 AUC after training: 0.5
User 98615 does not improve AUC. Reverting changes.
Training on augumented user 115771 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115771 AUC after training: 0.5
User 115771 does not improve AUC. Reverting changes.
Training on augumented user 80132 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80132 AUC after training: 0.5
User 80132 does not improve AUC. Reverting changes.
Training on augumented user 78138 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78138 AUC after training: 0.5
User 78138 does not improve AUC. Reverting changes.
Training on augumented user 87336 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87336 AUC after training: 0.5
User 87336 does not improve AUC. Reverting changes.
Training on augumented user 110892 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110892 AUC after training: 0.5
User 110892 does not improve AUC. Reverting changes.
Training on augumented user 68852 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68852 AUC after training: 0.5
User 68852 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:23:58.034486] start test user 4500 194/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:23:58.511593] start test user 4500 194/568 recall augumented users by random, augumented_users = [88995, 19448, 98599, 105904, 60076, 6489, 86334, 42301, 81097, 15717, 120316, 9485, 88253, 95565, 1742, 41091, 132687, 97778, 43654, 135249, 3851, 120551, 7458, 121225, 71977, 61983, 73949, 13683, 119119, 37129, 46561, 86897, 49784, 62717, 44210, 131870, 9657, 20679, 137068, 39189, 137267, 29931, 83519, 90310, 8363, 50129, 6831, 83322, 36986, 52771]
[2024-12-02 19:23:58.527355] user = 4500 Cloud 194/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:23:58.534412] user = 4500 Local 194/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:23:58.635090] user = 4500 Local+ 194/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:24:00.531305] user = 4500 MPDA- 194/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 88995 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88995 AUC after training: 0.5
User 88995 does not improve AUC. Reverting changes.
Training on augumented user 19448 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19448 AUC after training: 0.5
User 19448 does not improve AUC. Reverting changes.
Training on augumented user 98599 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98599 AUC after training: 0.5
User 98599 does not improve AUC. Reverting changes.
Training on augumented user 105904 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105904 AUC after training: 0.5
User 105904 does not improve AUC. Reverting changes.
Training on augumented user 60076 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60076 AUC after training: 0.5
User 60076 does not improve AUC. Reverting changes.
Training on augumented user 6489 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6489 AUC after training: 0.5
User 6489 does not improve AUC. Reverting changes.
Training on augumented user 86334 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86334 AUC after training: 0.5
User 86334 does not improve AUC. Reverting changes.
Training on augumented user 42301 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42301 AUC after training: 0.5
User 42301 does not improve AUC. Reverting changes.
Training on augumented user 81097 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81097 AUC after training: 0.5
User 81097 does not improve AUC. Reverting changes.
Training on augumented user 15717 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15717 AUC after training: 0.5
User 15717 does not improve AUC. Reverting changes.
Training on augumented user 120316 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120316 AUC after training: 0.5
User 120316 does not improve AUC. Reverting changes.
Training on augumented user 9485 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9485 AUC after training: 0.5
User 9485 does not improve AUC. Reverting changes.
Training on augumented user 88253 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88253 AUC after training: 0.5
User 88253 does not improve AUC. Reverting changes.
Training on augumented user 95565 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95565 AUC after training: 0.5
User 95565 does not improve AUC. Reverting changes.
Training on augumented user 1742 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1742 AUC after training: 0.5
User 1742 does not improve AUC. Reverting changes.
Training on augumented user 41091 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41091 AUC after training: 0.5
User 41091 does not improve AUC. Reverting changes.
Training on augumented user 132687 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132687 AUC after training: 0.5
User 132687 does not improve AUC. Reverting changes.
Training on augumented user 97778 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97778 AUC after training: 0.5
User 97778 does not improve AUC. Reverting changes.
Training on augumented user 43654 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43654 AUC after training: 0.5
User 43654 does not improve AUC. Reverting changes.
Training on augumented user 135249 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135249 AUC after training: 0.5
User 135249 does not improve AUC. Reverting changes.
Training on augumented user 3851 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3851 AUC after training: 0.5
User 3851 does not improve AUC. Reverting changes.
Training on augumented user 120551 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120551 AUC after training: 0.5
User 120551 does not improve AUC. Reverting changes.
Training on augumented user 7458 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7458 AUC after training: 0.5
User 7458 does not improve AUC. Reverting changes.
Training on augumented user 121225 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121225 AUC after training: 0.5
User 121225 does not improve AUC. Reverting changes.
Training on augumented user 71977 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71977 AUC after training: 0.5
User 71977 does not improve AUC. Reverting changes.
Training on augumented user 61983 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61983 AUC after training: 0.5
User 61983 does not improve AUC. Reverting changes.
Training on augumented user 73949 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73949 AUC after training: 0.5
User 73949 does not improve AUC. Reverting changes.
Training on augumented user 13683 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13683 AUC after training: 0.5
User 13683 does not improve AUC. Reverting changes.
Training on augumented user 119119 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119119 AUC after training: 0.5
User 119119 does not improve AUC. Reverting changes.
Training on augumented user 37129 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37129 AUC after training: 0.5
User 37129 does not improve AUC. Reverting changes.
Training on augumented user 46561 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46561 AUC after training: 0.5
User 46561 does not improve AUC. Reverting changes.
Training on augumented user 86897 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86897 AUC after training: 0.5
User 86897 does not improve AUC. Reverting changes.
Training on augumented user 49784 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49784 AUC after training: 0.5
User 49784 does not improve AUC. Reverting changes.
Training on augumented user 62717 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62717 AUC after training: 0.5
User 62717 does not improve AUC. Reverting changes.
Training on augumented user 44210 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44210 AUC after training: 0.5
User 44210 does not improve AUC. Reverting changes.
Training on augumented user 131870 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131870 AUC after training: 0.5
User 131870 does not improve AUC. Reverting changes.
Training on augumented user 9657 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9657 AUC after training: 0.5
User 9657 does not improve AUC. Reverting changes.
Training on augumented user 20679 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20679 AUC after training: 0.5
User 20679 does not improve AUC. Reverting changes.
Training on augumented user 137068 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137068 AUC after training: 0.5
User 137068 does not improve AUC. Reverting changes.
Training on augumented user 39189 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39189 AUC after training: 0.5
User 39189 does not improve AUC. Reverting changes.
Training on augumented user 137267 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137267 AUC after training: 0.5
User 137267 does not improve AUC. Reverting changes.
Training on augumented user 29931 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29931 AUC after training: 0.5
User 29931 does not improve AUC. Reverting changes.
Training on augumented user 83519 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83519 AUC after training: 0.5
User 83519 does not improve AUC. Reverting changes.
Training on augumented user 90310 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90310 AUC after training: 0.5
User 90310 does not improve AUC. Reverting changes.
Training on augumented user 8363 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8363 AUC after training: 0.5
User 8363 does not improve AUC. Reverting changes.
Training on augumented user 50129 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50129 AUC after training: 0.5
User 50129 does not improve AUC. Reverting changes.
Training on augumented user 6831 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6831 AUC after training: 0.5
User 6831 does not improve AUC. Reverting changes.
Training on augumented user 83322 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83322 AUC after training: 0.5
User 83322 does not improve AUC. Reverting changes.
Training on augumented user 36986 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36986 AUC after training: 0.5
User 36986 does not improve AUC. Reverting changes.
Training on augumented user 52771 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52771 AUC after training: 0.5
User 52771 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:24:23.397251] start test user 4540 195/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:24:24.120147] start test user 4540 195/568 recall augumented users by random, augumented_users = [109727, 47511, 26260, 65952, 116792, 128382, 389, 52363, 112871, 42237, 111958, 58283, 11886, 20902, 121302, 46849, 1669, 95759, 122442, 43906, 128038, 102164, 91866, 2545, 11840, 127253, 60757, 59937, 107519, 26725, 77774, 24286, 90122, 120372, 116575, 136352, 80064, 134545, 90150, 134569, 39255, 60563, 55708, 80699, 49924, 118486, 26060, 60034, 136453, 131520]
[2024-12-02 19:24:24.186844] user = 4540 Cloud 195/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:24:24.193773] user = 4540 Local 195/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:24:24.281391] user = 4540 Local+ 195/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:24:26.373484] user = 4540 MPDA- 195/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 109727 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109727 AUC after training: 0.5
User 109727 does not improve AUC. Reverting changes.
Training on augumented user 47511 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47511 AUC after training: 0.5
User 47511 does not improve AUC. Reverting changes.
Training on augumented user 26260 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26260 AUC after training: 0.5
User 26260 does not improve AUC. Reverting changes.
Training on augumented user 65952 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65952 AUC after training: 0.5
User 65952 does not improve AUC. Reverting changes.
Training on augumented user 116792 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116792 AUC after training: 0.5
User 116792 does not improve AUC. Reverting changes.
Training on augumented user 128382 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128382 AUC after training: 0.5
User 128382 does not improve AUC. Reverting changes.
Training on augumented user 389 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 389 AUC after training: 0.5
User 389 does not improve AUC. Reverting changes.
Training on augumented user 52363 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52363 AUC after training: 0.5
User 52363 does not improve AUC. Reverting changes.
Training on augumented user 112871 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112871 AUC after training: 0.5
User 112871 does not improve AUC. Reverting changes.
Training on augumented user 42237 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42237 AUC after training: 0.5
User 42237 does not improve AUC. Reverting changes.
Training on augumented user 111958 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111958 AUC after training: 0.5
User 111958 does not improve AUC. Reverting changes.
Training on augumented user 58283 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58283 AUC after training: 0.5
User 58283 does not improve AUC. Reverting changes.
Training on augumented user 11886 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11886 AUC after training: 0.5
User 11886 does not improve AUC. Reverting changes.
Training on augumented user 20902 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20902 AUC after training: 0.5
User 20902 does not improve AUC. Reverting changes.
Training on augumented user 121302 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121302 AUC after training: 0.5
User 121302 does not improve AUC. Reverting changes.
Training on augumented user 46849 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46849 AUC after training: 0.5
User 46849 does not improve AUC. Reverting changes.
Training on augumented user 1669 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1669 AUC after training: 0.5
User 1669 does not improve AUC. Reverting changes.
Training on augumented user 95759 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95759 AUC after training: 0.5
User 95759 does not improve AUC. Reverting changes.
Training on augumented user 122442 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122442 AUC after training: 0.5
User 122442 does not improve AUC. Reverting changes.
Training on augumented user 43906 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43906 AUC after training: 0.5
User 43906 does not improve AUC. Reverting changes.
Training on augumented user 128038 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128038 AUC after training: 0.5
User 128038 does not improve AUC. Reverting changes.
Training on augumented user 102164 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102164 AUC after training: 0.5
User 102164 does not improve AUC. Reverting changes.
Training on augumented user 91866 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91866 AUC after training: 0.5
User 91866 does not improve AUC. Reverting changes.
Training on augumented user 2545 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2545 AUC after training: 0.5
User 2545 does not improve AUC. Reverting changes.
Training on augumented user 11840 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11840 AUC after training: 0.5
User 11840 does not improve AUC. Reverting changes.
Training on augumented user 127253 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127253 AUC after training: 0.5
User 127253 does not improve AUC. Reverting changes.
Training on augumented user 60757 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60757 AUC after training: 0.5
User 60757 does not improve AUC. Reverting changes.
Training on augumented user 59937 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59937 AUC after training: 0.5
User 59937 does not improve AUC. Reverting changes.
Training on augumented user 107519 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107519 AUC after training: 0.5
User 107519 does not improve AUC. Reverting changes.
Training on augumented user 26725 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26725 AUC after training: 0.5
User 26725 does not improve AUC. Reverting changes.
Training on augumented user 77774 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77774 AUC after training: 0.5
User 77774 does not improve AUC. Reverting changes.
Training on augumented user 24286 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24286 AUC after training: 0.5
User 24286 does not improve AUC. Reverting changes.
Training on augumented user 90122 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90122 AUC after training: 0.5
User 90122 does not improve AUC. Reverting changes.
Training on augumented user 120372 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120372 AUC after training: 0.5
User 120372 does not improve AUC. Reverting changes.
Training on augumented user 116575 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116575 AUC after training: 0.5
User 116575 does not improve AUC. Reverting changes.
Training on augumented user 136352 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136352 AUC after training: 0.5
User 136352 does not improve AUC. Reverting changes.
Training on augumented user 80064 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80064 AUC after training: 0.5
User 80064 does not improve AUC. Reverting changes.
Training on augumented user 134545 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134545 AUC after training: 0.5
User 134545 does not improve AUC. Reverting changes.
Training on augumented user 90150 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90150 AUC after training: 0.5
User 90150 does not improve AUC. Reverting changes.
Training on augumented user 134569 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134569 AUC after training: 0.5
User 134569 does not improve AUC. Reverting changes.
Training on augumented user 39255 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39255 AUC after training: 0.5
User 39255 does not improve AUC. Reverting changes.
Training on augumented user 60563 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60563 AUC after training: 0.5
User 60563 does not improve AUC. Reverting changes.
Training on augumented user 55708 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55708 AUC after training: 0.5
User 55708 does not improve AUC. Reverting changes.
Training on augumented user 80699 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80699 AUC after training: 0.5
User 80699 does not improve AUC. Reverting changes.
Training on augumented user 49924 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49924 AUC after training: 0.5
User 49924 does not improve AUC. Reverting changes.
Training on augumented user 118486 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118486 AUC after training: 0.5
User 118486 does not improve AUC. Reverting changes.
Training on augumented user 26060 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26060 AUC after training: 0.5
User 26060 does not improve AUC. Reverting changes.
Training on augumented user 60034 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60034 AUC after training: 0.5
User 60034 does not improve AUC. Reverting changes.
Training on augumented user 136453 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136453 AUC after training: 0.5
User 136453 does not improve AUC. Reverting changes.
Training on augumented user 131520 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131520 AUC after training: 0.5
User 131520 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:24:56.123398] start test user 4563 196/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:24:57.019733] start test user 4563 196/568 recall augumented users by random, augumented_users = [19184, 7251, 106530, 49820, 42597, 113440, 68562, 80830, 60211, 117811, 56027, 124177, 80789, 28561, 126111, 5738, 5124, 74837, 72947, 56230, 65681, 125938, 83414, 85010, 133849, 29542, 76395, 9086, 121437, 121060, 111931, 99212, 114000, 23733, 28208, 133767, 1989, 20900, 13009, 100039, 64914, 38050, 62313, 34588, 107923, 43453, 78544, 47455, 1992, 40413]
[2024-12-02 19:24:57.057273] user = 4563 Cloud 196/568
[2024-12-02 19:24:57.093989] user = 4563 Local 196/568
[2024-12-02 19:24:57.284383] user = 4563 Local+ 196/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:25:00.505523] user = 4563 MPDA- 196/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6086587436332768
Training on augumented user 19184 0/50 current_auc = 0.6086587436332768
User 19184 AUC after training: 0.6092246745897002
User 19184 improves AUC. Keeping the model.
Training on augumented user 7251 1/50 current_auc = 0.6092246745897002
User 7251 AUC after training: 0.6089417091114884
User 7251 does not improve AUC. Reverting changes.
Training on augumented user 106530 2/50 current_auc = 0.6092246745897002
User 106530 AUC after training: 0.6095076400679118
User 106530 improves AUC. Keeping the model.
Training on augumented user 49820 3/50 current_auc = 0.6095076400679118
User 49820 AUC after training: 0.6106395019807583
User 49820 improves AUC. Keeping the model.
Training on augumented user 42597 4/50 current_auc = 0.6106395019807583
User 42597 AUC after training: 0.6097906055461235
User 42597 does not improve AUC. Reverting changes.
Training on augumented user 113440 5/50 current_auc = 0.6106395019807583
User 113440 AUC after training: 0.6097906055461234
User 113440 does not improve AUC. Reverting changes.
Training on augumented user 68562 6/50 current_auc = 0.6106395019807583
User 68562 AUC after training: 0.6078098471986418
User 68562 does not improve AUC. Reverting changes.
Training on augumented user 80830 7/50 current_auc = 0.6106395019807583
User 80830 AUC after training: 0.61092246745897
User 80830 improves AUC. Keeping the model.
Training on augumented user 60211 8/50 current_auc = 0.61092246745897
User 60211 AUC after training: 0.6095076400679117
User 60211 does not improve AUC. Reverting changes.
Training on augumented user 117811 9/50 current_auc = 0.61092246745897
User 117811 AUC after training: 0.6089417091114884
User 117811 does not improve AUC. Reverting changes.
Training on augumented user 56027 10/50 current_auc = 0.61092246745897
User 56027 AUC after training: 0.610073571024335
User 56027 does not improve AUC. Reverting changes.
Training on augumented user 124177 11/50 current_auc = 0.61092246745897
User 124177 AUC after training: 0.611771363893605
User 124177 improves AUC. Keeping the model.
Training on augumented user 80789 12/50 current_auc = 0.611771363893605
User 80789 AUC after training: 0.6106395019807584
User 80789 does not improve AUC. Reverting changes.
Training on augumented user 28561 13/50 current_auc = 0.611771363893605
User 28561 AUC after training: 0.6109224674589699
User 28561 does not improve AUC. Reverting changes.
Training on augumented user 126111 14/50 current_auc = 0.611771363893605
User 126111 AUC after training: 0.6112054329371817
User 126111 does not improve AUC. Reverting changes.
Training on augumented user 5738 15/50 current_auc = 0.611771363893605
User 5738 AUC after training: 0.6106395019807583
User 5738 does not improve AUC. Reverting changes.
Training on augumented user 5124 16/50 current_auc = 0.611771363893605
User 5124 AUC after training: 0.6114883984153934
User 5124 does not improve AUC. Reverting changes.
Training on augumented user 74837 17/50 current_auc = 0.611771363893605
User 74837 AUC after training: 0.6112054329371817
User 74837 does not improve AUC. Reverting changes.
Training on augumented user 72947 18/50 current_auc = 0.611771363893605
User 72947 AUC after training: 0.6106395019807583
User 72947 does not improve AUC. Reverting changes.
Training on augumented user 56230 19/50 current_auc = 0.611771363893605
User 56230 AUC after training: 0.6112054329371818
User 56230 does not improve AUC. Reverting changes.
Training on augumented user 65681 20/50 current_auc = 0.611771363893605
User 65681 AUC after training: 0.6117713638936051
User 65681 improves AUC. Keeping the model.
Training on augumented user 125938 21/50 current_auc = 0.6117713638936051
User 125938 AUC after training: 0.6112054329371818
User 125938 does not improve AUC. Reverting changes.
Training on augumented user 83414 22/50 current_auc = 0.6117713638936051
User 83414 AUC after training: 0.6112054329371818
User 83414 does not improve AUC. Reverting changes.
Training on augumented user 85010 23/50 current_auc = 0.6117713638936051
User 85010 AUC after training: 0.6114883984153935
User 85010 does not improve AUC. Reverting changes.
Training on augumented user 133849 24/50 current_auc = 0.6117713638936051
User 133849 AUC after training: 0.6114883984153934
User 133849 does not improve AUC. Reverting changes.
Training on augumented user 29542 25/50 current_auc = 0.6117713638936051
User 29542 AUC after training: 0.611771363893605
User 29542 does not improve AUC. Reverting changes.
Training on augumented user 76395 26/50 current_auc = 0.6117713638936051
User 76395 AUC after training: 0.6114883984153934
User 76395 does not improve AUC. Reverting changes.
Training on augumented user 9086 27/50 current_auc = 0.6117713638936051
User 9086 AUC after training: 0.6112054329371817
User 9086 does not improve AUC. Reverting changes.
Training on augumented user 121437 28/50 current_auc = 0.6117713638936051
User 121437 AUC after training: 0.6112054329371818
User 121437 does not improve AUC. Reverting changes.
Training on augumented user 121060 29/50 current_auc = 0.6117713638936051
User 121060 AUC after training: 0.6114883984153934
User 121060 does not improve AUC. Reverting changes.
Training on augumented user 111931 30/50 current_auc = 0.6117713638936051
User 111931 AUC after training: 0.6117713638936051
User 111931 does not improve AUC. Reverting changes.
Training on augumented user 99212 31/50 current_auc = 0.6117713638936051
User 99212 AUC after training: 0.6095076400679117
User 99212 does not improve AUC. Reverting changes.
Training on augumented user 114000 32/50 current_auc = 0.6117713638936051
User 114000 AUC after training: 0.6117713638936051
User 114000 does not improve AUC. Reverting changes.
Training on augumented user 23733 33/50 current_auc = 0.6117713638936051
User 23733 AUC after training: 0.6100735710243351
User 23733 does not improve AUC. Reverting changes.
Training on augumented user 28208 34/50 current_auc = 0.6117713638936051
User 28208 AUC after training: 0.6114883984153934
User 28208 does not improve AUC. Reverting changes.
Training on augumented user 133767 35/50 current_auc = 0.6117713638936051
User 133767 AUC after training: 0.6117713638936051
User 133767 does not improve AUC. Reverting changes.
Training on augumented user 1989 36/50 current_auc = 0.6117713638936051
User 1989 AUC after training: 0.6117713638936051
User 1989 does not improve AUC. Reverting changes.
Training on augumented user 20900 37/50 current_auc = 0.6117713638936051
User 20900 AUC after training: 0.6117713638936051
User 20900 does not improve AUC. Reverting changes.
Training on augumented user 13009 38/50 current_auc = 0.6117713638936051
User 13009 AUC after training: 0.6106395019807584
User 13009 does not improve AUC. Reverting changes.
Training on augumented user 100039 39/50 current_auc = 0.6117713638936051
User 100039 AUC after training: 0.6117713638936051
User 100039 does not improve AUC. Reverting changes.
Training on augumented user 64914 40/50 current_auc = 0.6117713638936051
User 64914 AUC after training: 0.6120543293718167
User 64914 improves AUC. Keeping the model.
Training on augumented user 38050 41/50 current_auc = 0.6120543293718167
User 38050 AUC after training: 0.6092246745897001
User 38050 does not improve AUC. Reverting changes.
Training on augumented user 62313 42/50 current_auc = 0.6120543293718167
User 62313 AUC after training: 0.6114883984153934
User 62313 does not improve AUC. Reverting changes.
Training on augumented user 34588 43/50 current_auc = 0.6120543293718167
User 34588 AUC after training: 0.6109224674589699
User 34588 does not improve AUC. Reverting changes.
Training on augumented user 107923 44/50 current_auc = 0.6120543293718167
User 107923 AUC after training: 0.6112054329371817
User 107923 does not improve AUC. Reverting changes.
Training on augumented user 43453 45/50 current_auc = 0.6120543293718167
User 43453 AUC after training: 0.6120543293718166
User 43453 does not improve AUC. Reverting changes.
Training on augumented user 78544 46/50 current_auc = 0.6120543293718167
User 78544 AUC after training: 0.6114883984153934
User 78544 does not improve AUC. Reverting changes.
Training on augumented user 47455 47/50 current_auc = 0.6120543293718167
User 47455 AUC after training: 0.6114883984153934
User 47455 does not improve AUC. Reverting changes.
Training on augumented user 1992 48/50 current_auc = 0.6120543293718167
User 1992 AUC after training: 0.6106395019807584
User 1992 does not improve AUC. Reverting changes.
Training on augumented user 40413 49/50 current_auc = 0.6120543293718167
User 40413 AUC after training: 0.6103565365025467
User 40413 does not improve AUC. Reverting changes.
[2024-12-02 19:25:30.808764] start test user 4575 197/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:25:31.426196] start test user 4575 197/568 recall augumented users by random, augumented_users = [113927, 134281, 110159, 14618, 109208, 107382, 44347, 2767, 27179, 99087, 58548, 106102, 9216, 124475, 82212, 87043, 71550, 34158, 68514, 83865, 94331, 102384, 38142, 17339, 112393, 46893, 66075, 36157, 73468, 59632, 105934, 120387, 18713, 21223, 123485, 67805, 94027, 51304, 115458, 26929, 69393, 98708, 27272, 66940, 44719, 8749, 130501, 46329, 44721, 112479]
[2024-12-02 19:25:31.454323] user = 4575 Cloud 197/568
[2024-12-02 19:25:31.515753] user = 4575 Local 197/568
[2024-12-02 19:25:31.691321] user = 4575 Local+ 197/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:25:33.835613] user = 4575 MPDA- 197/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7095736122284796
Training on augumented user 113927 0/50 current_auc = 0.7095736122284796
User 113927 AUC after training: 0.7093322606596942
User 113927 does not improve AUC. Reverting changes.
Training on augumented user 134281 1/50 current_auc = 0.7095736122284796
User 134281 AUC after training: 0.7086886564762671
User 134281 does not improve AUC. Reverting changes.
Training on augumented user 110159 2/50 current_auc = 0.7095736122284796
User 110159 AUC after training: 0.7101367658889783
User 110159 improves AUC. Keeping the model.
Training on augumented user 14618 3/50 current_auc = 0.7101367658889783
User 14618 AUC after training: 0.7091713596138375
User 14618 does not improve AUC. Reverting changes.
Training on augumented user 109208 4/50 current_auc = 0.7101367658889783
User 109208 AUC after training: 0.711263073209976
User 109208 improves AUC. Keeping the model.
Training on augumented user 107382 5/50 current_auc = 0.711263073209976
User 107382 AUC after training: 0.7092518101367659
User 107382 does not improve AUC. Reverting changes.
Training on augumented user 44347 6/50 current_auc = 0.711263073209976
User 44347 AUC after training: 0.7114239742558327
User 44347 improves AUC. Keeping the model.
Training on augumented user 2767 7/50 current_auc = 0.7114239742558327
User 2767 AUC after training: 0.7104585679806918
User 2767 does not improve AUC. Reverting changes.
Training on augumented user 27179 8/50 current_auc = 0.7114239742558327
User 27179 AUC after training: 0.7082864038616251
User 27179 does not improve AUC. Reverting changes.
Training on augumented user 99087 9/50 current_auc = 0.7114239742558327
User 99087 AUC after training: 0.709654062751408
User 99087 does not improve AUC. Reverting changes.
Training on augumented user 58548 10/50 current_auc = 0.7114239742558327
User 58548 AUC after training: 0.7102172164119067
User 58548 does not improve AUC. Reverting changes.
Training on augumented user 106102 11/50 current_auc = 0.7114239742558327
User 106102 AUC after training: 0.7126307320997587
User 106102 improves AUC. Keeping the model.
Training on augumented user 9216 12/50 current_auc = 0.7126307320997587
User 9216 AUC after training: 0.7120675784392599
User 9216 does not improve AUC. Reverting changes.
Training on augumented user 124475 13/50 current_auc = 0.7126307320997587
User 124475 AUC after training: 0.7127111826226872
User 124475 improves AUC. Keeping the model.
Training on augumented user 82212 14/50 current_auc = 0.7127111826226872
User 82212 AUC after training: 0.7144810941271119
User 82212 improves AUC. Keeping the model.
Training on augumented user 87043 15/50 current_auc = 0.7144810941271119
User 87043 AUC after training: 0.7142397425583267
User 87043 does not improve AUC. Reverting changes.
Training on augumented user 71550 16/50 current_auc = 0.7144810941271119
User 71550 AUC after training: 0.7152855993563958
User 71550 improves AUC. Keeping the model.
Training on augumented user 34158 17/50 current_auc = 0.7152855993563958
User 34158 AUC after training: 0.716331456154465
User 34158 improves AUC. Keeping the model.
Training on augumented user 68514 18/50 current_auc = 0.716331456154465
User 68514 AUC after training: 0.7170555108608205
User 68514 improves AUC. Keeping the model.
Training on augumented user 83865 19/50 current_auc = 0.7170555108608205
User 83865 AUC after training: 0.7175382139983911
User 83865 improves AUC. Keeping the model.
Training on augumented user 94331 20/50 current_auc = 0.7175382139983911
User 94331 AUC after training: 0.7154465004022527
User 94331 does not improve AUC. Reverting changes.
Training on augumented user 102384 21/50 current_auc = 0.7175382139983911
User 102384 AUC after training: 0.7165728077232503
User 102384 does not improve AUC. Reverting changes.
Training on augumented user 38142 22/50 current_auc = 0.7175382139983911
User 38142 AUC after training: 0.7163314561544651
User 38142 does not improve AUC. Reverting changes.
Training on augumented user 17339 23/50 current_auc = 0.7175382139983911
User 17339 AUC after training: 0.7176186645213195
User 17339 improves AUC. Keeping the model.
Training on augumented user 112393 24/50 current_auc = 0.7176186645213195
User 112393 AUC after training: 0.7189058728881738
User 112393 improves AUC. Keeping the model.
Training on augumented user 46893 25/50 current_auc = 0.7189058728881738
User 46893 AUC after training: 0.7181818181818181
User 46893 does not improve AUC. Reverting changes.
Training on augumented user 66075 26/50 current_auc = 0.7189058728881738
User 66075 AUC after training: 0.7181013676588898
User 66075 does not improve AUC. Reverting changes.
Training on augumented user 36157 27/50 current_auc = 0.7189058728881738
User 36157 AUC after training: 0.7182622687047465
User 36157 does not improve AUC. Reverting changes.
Training on augumented user 73468 28/50 current_auc = 0.7189058728881738
User 73468 AUC after training: 0.7190667739340305
User 73468 improves AUC. Keeping the model.
Training on augumented user 59632 29/50 current_auc = 0.7190667739340305
User 59632 AUC after training: 0.720353982300885
User 59632 improves AUC. Keeping the model.
Training on augumented user 105934 30/50 current_auc = 0.720353982300885
User 105934 AUC after training: 0.719549477071601
User 105934 does not improve AUC. Reverting changes.
Training on augumented user 120387 31/50 current_auc = 0.720353982300885
User 120387 AUC after training: 0.719549477071601
User 120387 does not improve AUC. Reverting changes.
Training on augumented user 18713 32/50 current_auc = 0.720353982300885
User 18713 AUC after training: 0.718744971842317
User 18713 does not improve AUC. Reverting changes.
Training on augumented user 21223 33/50 current_auc = 0.720353982300885
User 21223 AUC after training: 0.7208366854384554
User 21223 improves AUC. Keeping the model.
Training on augumented user 123485 34/50 current_auc = 0.7208366854384554
User 123485 AUC after training: 0.7152051488334675
User 123485 does not improve AUC. Reverting changes.
Training on augumented user 67805 35/50 current_auc = 0.7208366854384554
User 67805 AUC after training: 0.7213998390989541
User 67805 improves AUC. Keeping the model.
Training on augumented user 94027 36/50 current_auc = 0.7213998390989541
User 94027 AUC after training: 0.7199517296862429
User 94027 does not improve AUC. Reverting changes.
Training on augumented user 51304 37/50 current_auc = 0.7213998390989541
User 51304 AUC after training: 0.7200321802091714
User 51304 does not improve AUC. Reverting changes.
Training on augumented user 115458 38/50 current_auc = 0.7213998390989541
User 115458 AUC after training: 0.720756234915527
User 115458 does not improve AUC. Reverting changes.
Training on augumented user 26929 39/50 current_auc = 0.7213998390989541
User 26929 AUC after training: 0.7172164119066774
User 26929 does not improve AUC. Reverting changes.
Training on augumented user 69393 40/50 current_auc = 0.7213998390989541
User 69393 AUC after training: 0.7202735317779566
User 69393 does not improve AUC. Reverting changes.
Training on augumented user 98708 41/50 current_auc = 0.7213998390989541
User 98708 AUC after training: 0.719951729686243
User 98708 does not improve AUC. Reverting changes.
Training on augumented user 27272 42/50 current_auc = 0.7213998390989541
User 27272 AUC after training: 0.7217216411906678
User 27272 improves AUC. Keeping the model.
Training on augumented user 66940 43/50 current_auc = 0.7217216411906678
User 66940 AUC after training: 0.7218020917135962
User 66940 improves AUC. Keeping the model.
Training on augumented user 44719 44/50 current_auc = 0.7218020917135962
User 44719 AUC after training: 0.7230893000804505
User 44719 improves AUC. Keeping the model.
Training on augumented user 8749 45/50 current_auc = 0.7230893000804505
User 8749 AUC after training: 0.7228479485116653
User 8749 does not improve AUC. Reverting changes.
Training on augumented user 130501 46/50 current_auc = 0.7230893000804505
User 130501 AUC after training: 0.7230088495575221
User 130501 does not improve AUC. Reverting changes.
Training on augumented user 46329 47/50 current_auc = 0.7230893000804505
User 46329 AUC after training: 0.7224456958970233
User 46329 does not improve AUC. Reverting changes.
Training on augumented user 44721 48/50 current_auc = 0.7230893000804505
User 44721 AUC after training: 0.7222043443282382
User 44721 does not improve AUC. Reverting changes.
Training on augumented user 112479 49/50 current_auc = 0.7230893000804505
User 112479 AUC after training: 0.7230088495575222
User 112479 does not improve AUC. Reverting changes.
[2024-12-02 19:26:04.409085] start test user 4587 198/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:26:04.819497] start test user 4587 198/568 recall augumented users by random, augumented_users = [5025, 116917, 99351, 1992, 42908, 96986, 54921, 46834, 87206, 3367, 13874, 117823, 132121, 131954, 123571, 121483, 39208, 34989, 47814, 5947, 110897, 113465, 7069, 97281, 43106, 6117, 116964, 48261, 125424, 17740, 36638, 109805, 84720, 53640, 125526, 34919, 44306, 76811, 18590, 105800, 49610, 65870, 133030, 56958, 45276, 76026, 62241, 64789, 103111, 11388]
[2024-12-02 19:26:04.834996] user = 4587 Cloud 198/568
[2024-12-02 19:26:04.867271] user = 4587 Local 198/568
[2024-12-02 19:26:04.942197] user = 4587 Local+ 198/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:26:07.135622] user = 4587 MPDA- 198/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6724195154331231
Training on augumented user 5025 0/50 current_auc = 0.6724195154331231
User 5025 AUC after training: 0.6718884832392964
User 5025 does not improve AUC. Reverting changes.
Training on augumented user 116917 1/50 current_auc = 0.6724195154331231
User 116917 AUC after training: 0.6732160637238632
User 116917 improves AUC. Keeping the model.
Training on augumented user 99351 2/50 current_auc = 0.6732160637238632
User 99351 AUC after training: 0.6742781281115169
User 99351 improves AUC. Keeping the model.
Training on augumented user 1992 3/50 current_auc = 0.6742781281115169
User 1992 AUC after training: 0.6738134749419183
User 1992 does not improve AUC. Reverting changes.
Training on augumented user 42908 4/50 current_auc = 0.6742781281115169
User 42908 AUC after training: 0.6746764022568869
User 42908 improves AUC. Keeping the model.
Training on augumented user 96986 5/50 current_auc = 0.6746764022568869
User 96986 AUC after training: 0.6732824427480916
User 96986 does not improve AUC. Reverting changes.
Training on augumented user 54921 6/50 current_auc = 0.6746764022568869
User 54921 AUC after training: 0.6731496846996349
User 54921 does not improve AUC. Reverting changes.
Training on augumented user 46834 7/50 current_auc = 0.6746764022568869
User 46834 AUC after training: 0.6742781281115167
User 46834 does not improve AUC. Reverting changes.
Training on augumented user 87206 8/50 current_auc = 0.6746764022568869
User 87206 AUC after training: 0.67414537006306
User 87206 does not improve AUC. Reverting changes.
Training on augumented user 3367 9/50 current_auc = 0.6746764022568869
User 3367 AUC after training: 0.6742781281115167
User 3367 does not improve AUC. Reverting changes.
Training on augumented user 13874 10/50 current_auc = 0.6746764022568869
User 13874 AUC after training: 0.6738798539661466
User 13874 does not improve AUC. Reverting changes.
Training on augumented user 117823 11/50 current_auc = 0.6746764022568869
User 117823 AUC after training: 0.6714902090939263
User 117823 does not improve AUC. Reverting changes.
Training on augumented user 132121 12/50 current_auc = 0.6746764022568869
User 132121 AUC after training: 0.6742781281115167
User 132121 does not improve AUC. Reverting changes.
Training on augumented user 131954 13/50 current_auc = 0.6746764022568869
User 131954 AUC after training: 0.6751410554264852
User 131954 improves AUC. Keeping the model.
Training on augumented user 123571 14/50 current_auc = 0.6751410554264852
User 123571 AUC after training: 0.6755393295718554
User 123571 improves AUC. Keeping the model.
Training on augumented user 121483 15/50 current_auc = 0.6755393295718554
User 121483 AUC after training: 0.6749419183538002
User 121483 does not improve AUC. Reverting changes.
Training on augumented user 39208 16/50 current_auc = 0.6755393295718554
User 39208 AUC after training: 0.6716893461666112
User 39208 does not improve AUC. Reverting changes.
Training on augumented user 34989 17/50 current_auc = 0.6755393295718554
User 34989 AUC after training: 0.675871224692997
User 34989 improves AUC. Keeping the model.
Training on augumented user 47814 18/50 current_auc = 0.675871224692997
User 47814 AUC after training: 0.6760039827414536
User 47814 improves AUC. Keeping the model.
Training on augumented user 5947 19/50 current_auc = 0.6760039827414536
User 5947 AUC after training: 0.6758712246929969
User 5947 does not improve AUC. Reverting changes.
Training on augumented user 110897 20/50 current_auc = 0.6760039827414536
User 110897 AUC after training: 0.6753401924991701
User 110897 does not improve AUC. Reverting changes.
Training on augumented user 113465 21/50 current_auc = 0.6760039827414536
User 113465 AUC after training: 0.675672087620312
User 113465 does not improve AUC. Reverting changes.
Training on augumented user 7069 22/50 current_auc = 0.6760039827414536
User 7069 AUC after training: 0.675672087620312
User 7069 does not improve AUC. Reverting changes.
Training on augumented user 97281 23/50 current_auc = 0.6760039827414536
User 97281 AUC after training: 0.67454364420843
User 97281 does not improve AUC. Reverting changes.
Training on augumented user 43106 24/50 current_auc = 0.6760039827414536
User 43106 AUC after training: 0.6757384666445402
User 43106 does not improve AUC. Reverting changes.
Training on augumented user 6117 25/50 current_auc = 0.6760039827414536
User 6117 AUC after training: 0.673946232990375
User 6117 does not improve AUC. Reverting changes.
Training on augumented user 116964 26/50 current_auc = 0.6760039827414536
User 116964 AUC after training: 0.675273813474942
User 116964 does not improve AUC. Reverting changes.
Training on augumented user 48261 27/50 current_auc = 0.6760039827414536
User 48261 AUC after training: 0.6758048456687685
User 48261 does not improve AUC. Reverting changes.
Training on augumented user 125424 28/50 current_auc = 0.6760039827414536
User 125424 AUC after training: 0.6752074344507135
User 125424 does not improve AUC. Reverting changes.
Training on augumented user 17740 29/50 current_auc = 0.6760039827414536
User 17740 AUC after training: 0.6758048456687685
User 17740 does not improve AUC. Reverting changes.
Training on augumented user 36638 30/50 current_auc = 0.6760039827414536
User 36638 AUC after training: 0.6762031198141386
User 36638 improves AUC. Keeping the model.
Training on augumented user 109805 31/50 current_auc = 0.6762031198141386
User 109805 AUC after training: 0.676269498838367
User 109805 improves AUC. Keeping the model.
Training on augumented user 84720 32/50 current_auc = 0.676269498838367
User 84720 AUC after training: 0.6740789910388316
User 84720 does not improve AUC. Reverting changes.
Training on augumented user 53640 33/50 current_auc = 0.676269498838367
User 53640 AUC after training: 0.6736807168934617
User 53640 does not improve AUC. Reverting changes.
Training on augumented user 125526 34/50 current_auc = 0.676269498838367
User 125526 AUC after training: 0.675871224692997
User 125526 does not improve AUC. Reverting changes.
Training on augumented user 34919 35/50 current_auc = 0.676269498838367
User 34919 AUC after training: 0.6748091603053434
User 34919 does not improve AUC. Reverting changes.
Training on augumented user 44306 36/50 current_auc = 0.676269498838367
User 44306 AUC after training: 0.6770660471291071
User 44306 improves AUC. Keeping the model.
Training on augumented user 76811 37/50 current_auc = 0.6770660471291071
User 76811 AUC after training: 0.6768005310321937
User 76811 does not improve AUC. Reverting changes.
Training on augumented user 18590 38/50 current_auc = 0.6770660471291071
User 18590 AUC after training: 0.6690341851974775
User 18590 does not improve AUC. Reverting changes.
Training on augumented user 105800 39/50 current_auc = 0.6770660471291071
User 105800 AUC after training: 0.677796216395619
User 105800 improves AUC. Keeping the model.
Training on augumented user 49610 40/50 current_auc = 0.677796216395619
User 49610 AUC after training: 0.6768669100564222
User 49610 does not improve AUC. Reverting changes.
Training on augumented user 65870 41/50 current_auc = 0.677796216395619
User 65870 AUC after training: 0.6769332890806504
User 65870 does not improve AUC. Reverting changes.
Training on augumented user 133030 42/50 current_auc = 0.677796216395619
User 133030 AUC after training: 0.6757384666445403
User 133030 does not improve AUC. Reverting changes.
Training on augumented user 56958 43/50 current_auc = 0.677796216395619
User 56958 AUC after training: 0.6753401924991703
User 56958 does not improve AUC. Reverting changes.
Training on augumented user 45276 44/50 current_auc = 0.677796216395619
User 45276 AUC after training: 0.6777298373713906
User 45276 does not improve AUC. Reverting changes.
Training on augumented user 76026 45/50 current_auc = 0.677796216395619
User 76026 AUC after training: 0.6766677729837371
User 76026 does not improve AUC. Reverting changes.
Training on augumented user 62241 46/50 current_auc = 0.677796216395619
User 62241 AUC after training: 0.6777298373713906
User 62241 does not improve AUC. Reverting changes.
Training on augumented user 64789 47/50 current_auc = 0.677796216395619
User 64789 AUC after training: 0.6784600066379024
User 64789 improves AUC. Keeping the model.
Training on augumented user 103111 48/50 current_auc = 0.6784600066379024
User 103111 AUC after training: 0.6789246598075007
User 103111 improves AUC. Keeping the model.
Training on augumented user 11388 49/50 current_auc = 0.6789246598075007
User 11388 AUC after training: 0.6780617324925323
User 11388 does not improve AUC. Reverting changes.
[2024-12-02 19:26:38.454005] start test user 4600 199/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:26:39.048806] start test user 4600 199/568 recall augumented users by random, augumented_users = [37589, 128922, 22942, 111381, 99588, 55971, 51191, 132410, 51188, 8086, 42578, 43614, 79207, 99138, 125328, 75284, 5127, 45551, 41007, 71192, 69263, 56663, 102316, 54082, 10192, 70564, 114360, 118305, 123884, 135809, 74478, 41299, 30406, 121517, 49268, 106560, 73998, 111160, 67957, 75449, 114782, 133359, 46747, 24372, 130213, 105189, 39106, 115633, 46158, 22979]
[2024-12-02 19:26:39.078541] user = 4600 Cloud 199/568
[2024-12-02 19:26:39.116531] user = 4600 Local 199/568
[2024-12-02 19:26:39.300312] user = 4600 Local+ 199/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:26:41.610730] user = 4600 MPDA- 199/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5495739348370927
Training on augumented user 37589 0/50 current_auc = 0.5495739348370927
User 37589 AUC after training: 0.5489724310776942
User 37589 does not improve AUC. Reverting changes.
Training on augumented user 128922 1/50 current_auc = 0.5495739348370927
User 128922 AUC after training: 0.5486716791979951
User 128922 does not improve AUC. Reverting changes.
Training on augumented user 22942 2/50 current_auc = 0.5495739348370927
User 22942 AUC after training: 0.5478195488721805
User 22942 does not improve AUC. Reverting changes.
Training on augumented user 111381 3/50 current_auc = 0.5495739348370927
User 111381 AUC after training: 0.5496741854636592
User 111381 improves AUC. Keeping the model.
Training on augumented user 99588 4/50 current_auc = 0.5496741854636592
User 99588 AUC after training: 0.5501754385964912
User 99588 improves AUC. Keeping the model.
Training on augumented user 55971 5/50 current_auc = 0.5501754385964912
User 55971 AUC after training: 0.5492731829573935
User 55971 does not improve AUC. Reverting changes.
Training on augumented user 51191 6/50 current_auc = 0.5501754385964912
User 51191 AUC after training: 0.5504761904761906
User 51191 improves AUC. Keeping the model.
Training on augumented user 132410 7/50 current_auc = 0.5504761904761906
User 132410 AUC after training: 0.5531829573934837
User 132410 improves AUC. Keeping the model.
Training on augumented user 51188 8/50 current_auc = 0.5531829573934837
User 51188 AUC after training: 0.5521303258145362
User 51188 does not improve AUC. Reverting changes.
Training on augumented user 8086 9/50 current_auc = 0.5531829573934837
User 8086 AUC after training: 0.5523809523809524
User 8086 does not improve AUC. Reverting changes.
Training on augumented user 42578 10/50 current_auc = 0.5531829573934837
User 42578 AUC after training: 0.5528822055137845
User 42578 does not improve AUC. Reverting changes.
Training on augumented user 43614 11/50 current_auc = 0.5531829573934837
User 43614 AUC after training: 0.5506766917293233
User 43614 does not improve AUC. Reverting changes.
Training on augumented user 79207 12/50 current_auc = 0.5531829573934837
User 79207 AUC after training: 0.5530827067669173
User 79207 does not improve AUC. Reverting changes.
Training on augumented user 99138 13/50 current_auc = 0.5531829573934837
User 99138 AUC after training: 0.5539849624060151
User 99138 improves AUC. Keeping the model.
Training on augumented user 125328 14/50 current_auc = 0.5539849624060151
User 125328 AUC after training: 0.5547869674185464
User 125328 improves AUC. Keeping the model.
Training on augumented user 75284 15/50 current_auc = 0.5547869674185464
User 75284 AUC after training: 0.5548872180451128
User 75284 improves AUC. Keeping the model.
Training on augumented user 5127 16/50 current_auc = 0.5548872180451128
User 5127 AUC after training: 0.5553884711779449
User 5127 improves AUC. Keeping the model.
Training on augumented user 45551 17/50 current_auc = 0.5553884711779449
User 45551 AUC after training: 0.5559899749373434
User 45551 improves AUC. Keeping the model.
Training on augumented user 41007 18/50 current_auc = 0.5559899749373434
User 41007 AUC after training: 0.5564912280701755
User 41007 improves AUC. Keeping the model.
Training on augumented user 71192 19/50 current_auc = 0.5564912280701755
User 71192 AUC after training: 0.5541854636591479
User 71192 does not improve AUC. Reverting changes.
Training on augumented user 69263 20/50 current_auc = 0.5564912280701755
User 69263 AUC after training: 0.5555889724310777
User 69263 does not improve AUC. Reverting changes.
Training on augumented user 56663 21/50 current_auc = 0.5564912280701755
User 56663 AUC after training: 0.5556892230576441
User 56663 does not improve AUC. Reverting changes.
Training on augumented user 102316 22/50 current_auc = 0.5564912280701755
User 102316 AUC after training: 0.5574937343358397
User 102316 improves AUC. Keeping the model.
Training on augumented user 54082 23/50 current_auc = 0.5574937343358397
User 54082 AUC after training: 0.555889724310777
User 54082 does not improve AUC. Reverting changes.
Training on augumented user 10192 24/50 current_auc = 0.5574937343358397
User 10192 AUC after training: 0.5559899749373435
User 10192 does not improve AUC. Reverting changes.
Training on augumented user 70564 25/50 current_auc = 0.5574937343358397
User 70564 AUC after training: 0.5581954887218046
User 70564 improves AUC. Keeping the model.
Training on augumented user 114360 26/50 current_auc = 0.5581954887218046
User 114360 AUC after training: 0.5568922305764411
User 114360 does not improve AUC. Reverting changes.
Training on augumented user 118305 27/50 current_auc = 0.5581954887218046
User 118305 AUC after training: 0.557092731829574
User 118305 does not improve AUC. Reverting changes.
Training on augumented user 123884 28/50 current_auc = 0.5581954887218046
User 123884 AUC after training: 0.5565914786967419
User 123884 does not improve AUC. Reverting changes.
Training on augumented user 135809 29/50 current_auc = 0.5581954887218046
User 135809 AUC after training: 0.5577944862155388
User 135809 does not improve AUC. Reverting changes.
Training on augumented user 74478 30/50 current_auc = 0.5581954887218046
User 74478 AUC after training: 0.5555889724310777
User 74478 does not improve AUC. Reverting changes.
Training on augumented user 41299 31/50 current_auc = 0.5581954887218046
User 41299 AUC after training: 0.5584962406015038
User 41299 improves AUC. Keeping the model.
Training on augumented user 30406 32/50 current_auc = 0.5584962406015038
User 30406 AUC after training: 0.5579949874686717
User 30406 does not improve AUC. Reverting changes.
Training on augumented user 121517 33/50 current_auc = 0.5584962406015038
User 121517 AUC after training: 0.5585964912280702
User 121517 improves AUC. Keeping the model.
Training on augumented user 49268 34/50 current_auc = 0.5585964912280702
User 49268 AUC after training: 0.5580952380952382
User 49268 does not improve AUC. Reverting changes.
Training on augumented user 106560 35/50 current_auc = 0.5585964912280702
User 106560 AUC after training: 0.557092731829574
User 106560 does not improve AUC. Reverting changes.
Training on augumented user 73998 36/50 current_auc = 0.5585964912280702
User 73998 AUC after training: 0.5581954887218046
User 73998 does not improve AUC. Reverting changes.
Training on augumented user 111160 37/50 current_auc = 0.5585964912280702
User 111160 AUC after training: 0.5596992481203007
User 111160 improves AUC. Keeping the model.
Training on augumented user 67957 38/50 current_auc = 0.5596992481203007
User 67957 AUC after training: 0.5587969924812031
User 67957 does not improve AUC. Reverting changes.
Training on augumented user 75449 39/50 current_auc = 0.5596992481203007
User 75449 AUC after training: 0.5586967418546366
User 75449 does not improve AUC. Reverting changes.
Training on augumented user 114782 40/50 current_auc = 0.5596992481203007
User 114782 AUC after training: 0.5589974937343358
User 114782 does not improve AUC. Reverting changes.
Training on augumented user 133359 41/50 current_auc = 0.5596992481203007
User 133359 AUC after training: 0.5586967418546367
User 133359 does not improve AUC. Reverting changes.
Training on augumented user 46747 42/50 current_auc = 0.5596992481203007
User 46747 AUC after training: 0.5583959899749374
User 46747 does not improve AUC. Reverting changes.
Training on augumented user 24372 43/50 current_auc = 0.5596992481203007
User 24372 AUC after training: 0.5591979949874687
User 24372 does not improve AUC. Reverting changes.
Training on augumented user 130213 44/50 current_auc = 0.5596992481203007
User 130213 AUC after training: 0.5593984962406016
User 130213 does not improve AUC. Reverting changes.
Training on augumented user 105189 45/50 current_auc = 0.5596992481203007
User 105189 AUC after training: 0.5597994987468672
User 105189 improves AUC. Keeping the model.
Training on augumented user 39106 46/50 current_auc = 0.5597994987468672
User 39106 AUC after training: 0.5597994987468672
User 39106 does not improve AUC. Reverting changes.
Training on augumented user 115633 47/50 current_auc = 0.5597994987468672
User 115633 AUC after training: 0.5589974937343359
User 115633 does not improve AUC. Reverting changes.
Training on augumented user 46158 48/50 current_auc = 0.5597994987468672
User 46158 AUC after training: 0.5583959899749373
User 46158 does not improve AUC. Reverting changes.
Training on augumented user 22979 49/50 current_auc = 0.5597994987468672
User 22979 AUC after training: 0.5592982456140351
User 22979 does not improve AUC. Reverting changes.
[2024-12-02 19:27:08.738127] start test user 4627 200/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:27:09.252868] start test user 4627 200/568 recall augumented users by random, augumented_users = [69236, 8304, 116568, 17786, 88676, 9785, 125491, 81865, 117976, 27189, 108608, 19811, 76181, 129346, 62494, 65860, 130258, 3115, 112521, 120233, 41346, 2363, 30595, 66078, 5154, 58648, 101547, 38452, 137463, 29159, 83309, 91535, 22607, 126506, 77243, 7266, 40257, 110622, 112833, 36436, 38180, 96592, 16425, 26604, 94691, 75498, 51601, 65383, 124577, 59587]
[2024-12-02 19:27:09.267032] user = 4627 Cloud 200/568
[2024-12-02 19:27:09.284245] user = 4627 Local 200/568
[2024-12-02 19:27:09.327226] user = 4627 Local+ 200/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:27:11.652994] user = 4627 MPDA- 200/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.32981220657276994
Training on augumented user 69236 0/50 current_auc = 0.32981220657276994
User 69236 AUC after training: 0.3290297339593114
User 69236 does not improve AUC. Reverting changes.
Training on augumented user 8304 1/50 current_auc = 0.32981220657276994
User 8304 AUC after training: 0.33020344287949926
User 8304 improves AUC. Keeping the model.
Training on augumented user 116568 2/50 current_auc = 0.33020344287949926
User 116568 AUC after training: 0.3302034428794992
User 116568 does not improve AUC. Reverting changes.
Training on augumented user 17786 3/50 current_auc = 0.33020344287949926
User 17786 AUC after training: 0.331377151799687
User 17786 improves AUC. Keeping the model.
Training on augumented user 88676 4/50 current_auc = 0.331377151799687
User 88676 AUC after training: 0.3321596244131455
User 88676 improves AUC. Keeping the model.
Training on augumented user 9785 5/50 current_auc = 0.3321596244131455
User 9785 AUC after training: 0.33294209702660404
User 9785 improves AUC. Keeping the model.
Training on augumented user 125491 6/50 current_auc = 0.33294209702660404
User 125491 AUC after training: 0.33294209702660404
User 125491 does not improve AUC. Reverting changes.
Training on augumented user 81865 7/50 current_auc = 0.33294209702660404
User 81865 AUC after training: 0.3333333333333333
User 81865 improves AUC. Keeping the model.
Training on augumented user 117976 8/50 current_auc = 0.3333333333333333
User 117976 AUC after training: 0.3294209702660407
User 117976 does not improve AUC. Reverting changes.
Training on augumented user 27189 9/50 current_auc = 0.3333333333333333
User 27189 AUC after training: 0.3278560250391236
User 27189 does not improve AUC. Reverting changes.
Training on augumented user 108608 10/50 current_auc = 0.3333333333333333
User 108608 AUC after training: 0.3337245696400626
User 108608 improves AUC. Keeping the model.
Training on augumented user 19811 11/50 current_auc = 0.3337245696400626
User 19811 AUC after training: 0.3333333333333333
User 19811 does not improve AUC. Reverting changes.
Training on augumented user 76181 12/50 current_auc = 0.3337245696400626
User 76181 AUC after training: 0.3337245696400626
User 76181 does not improve AUC. Reverting changes.
Training on augumented user 129346 13/50 current_auc = 0.3337245696400626
User 129346 AUC after training: 0.3333333333333333
User 129346 does not improve AUC. Reverting changes.
Training on augumented user 62494 14/50 current_auc = 0.3337245696400626
User 62494 AUC after training: 0.3325508607198748
User 62494 does not improve AUC. Reverting changes.
Training on augumented user 65860 15/50 current_auc = 0.3337245696400626
User 65860 AUC after training: 0.33411580594679186
User 65860 improves AUC. Keeping the model.
Training on augumented user 130258 16/50 current_auc = 0.33411580594679186
User 130258 AUC after training: 0.3325508607198748
User 130258 does not improve AUC. Reverting changes.
Training on augumented user 3115 17/50 current_auc = 0.33411580594679186
User 3115 AUC after training: 0.3352895148669796
User 3115 improves AUC. Keeping the model.
Training on augumented user 112521 18/50 current_auc = 0.3352895148669796
User 112521 AUC after training: 0.33568075117370894
User 112521 improves AUC. Keeping the model.
Training on augumented user 120233 19/50 current_auc = 0.33568075117370894
User 120233 AUC after training: 0.3364632237871675
User 120233 improves AUC. Keeping the model.
Training on augumented user 41346 20/50 current_auc = 0.3364632237871675
User 41346 AUC after training: 0.3337245696400626
User 41346 does not improve AUC. Reverting changes.
Training on augumented user 2363 21/50 current_auc = 0.3364632237871675
User 2363 AUC after training: 0.3360719874804382
User 2363 does not improve AUC. Reverting changes.
Training on augumented user 30595 22/50 current_auc = 0.3364632237871675
User 30595 AUC after training: 0.3360719874804382
User 30595 does not improve AUC. Reverting changes.
Training on augumented user 66078 23/50 current_auc = 0.3364632237871675
User 66078 AUC after training: 0.3364632237871675
User 66078 does not improve AUC. Reverting changes.
Training on augumented user 5154 24/50 current_auc = 0.3364632237871675
User 5154 AUC after training: 0.3337245696400626
User 5154 does not improve AUC. Reverting changes.
Training on augumented user 58648 25/50 current_auc = 0.3364632237871675
User 58648 AUC after training: 0.3309859154929577
User 58648 does not improve AUC. Reverting changes.
Training on augumented user 101547 26/50 current_auc = 0.3364632237871675
User 101547 AUC after training: 0.33411580594679186
User 101547 does not improve AUC. Reverting changes.
Training on augumented user 38452 27/50 current_auc = 0.3364632237871675
User 38452 AUC after training: 0.33568075117370894
User 38452 does not improve AUC. Reverting changes.
Training on augumented user 137463 28/50 current_auc = 0.3364632237871675
User 137463 AUC after training: 0.3368544600938967
User 137463 improves AUC. Keeping the model.
Training on augumented user 29159 29/50 current_auc = 0.3368544600938967
User 29159 AUC after training: 0.3364632237871675
User 29159 does not improve AUC. Reverting changes.
Training on augumented user 83309 30/50 current_auc = 0.3368544600938967
User 83309 AUC after training: 0.33607198748043815
User 83309 does not improve AUC. Reverting changes.
Training on augumented user 91535 31/50 current_auc = 0.3368544600938967
User 91535 AUC after training: 0.3325508607198748
User 91535 does not improve AUC. Reverting changes.
Training on augumented user 22607 32/50 current_auc = 0.3368544600938967
User 22607 AUC after training: 0.3352895148669796
User 22607 does not improve AUC. Reverting changes.
Training on augumented user 126506 33/50 current_auc = 0.3368544600938967
User 126506 AUC after training: 0.33333333333333337
User 126506 does not improve AUC. Reverting changes.
Training on augumented user 77243 34/50 current_auc = 0.3368544600938967
User 77243 AUC after training: 0.3380281690140845
User 77243 improves AUC. Keeping the model.
Training on augumented user 7266 35/50 current_auc = 0.3380281690140845
User 7266 AUC after training: 0.3302034428794992
User 7266 does not improve AUC. Reverting changes.
Training on augumented user 40257 36/50 current_auc = 0.3380281690140845
User 40257 AUC after training: 0.3368544600938967
User 40257 does not improve AUC. Reverting changes.
Training on augumented user 110622 37/50 current_auc = 0.3380281690140845
User 110622 AUC after training: 0.33841940532081377
User 110622 improves AUC. Keeping the model.
Training on augumented user 112833 38/50 current_auc = 0.33841940532081377
User 112833 AUC after training: 0.3360719874804382
User 112833 does not improve AUC. Reverting changes.
Training on augumented user 36436 39/50 current_auc = 0.33841940532081377
User 36436 AUC after training: 0.3364632237871675
User 36436 does not improve AUC. Reverting changes.
Training on augumented user 38180 40/50 current_auc = 0.33841940532081377
User 38180 AUC after training: 0.3392018779342723
User 38180 improves AUC. Keeping the model.
Training on augumented user 96592 41/50 current_auc = 0.3392018779342723
User 96592 AUC after training: 0.3380281690140845
User 96592 does not improve AUC. Reverting changes.
Training on augumented user 16425 42/50 current_auc = 0.3392018779342723
User 16425 AUC after training: 0.3395931142410016
User 16425 improves AUC. Keeping the model.
Training on augumented user 26604 43/50 current_auc = 0.3395931142410016
User 26604 AUC after training: 0.33528951486697967
User 26604 does not improve AUC. Reverting changes.
Training on augumented user 94691 44/50 current_auc = 0.3395931142410016
User 94691 AUC after training: 0.3395931142410015
User 94691 does not improve AUC. Reverting changes.
Training on augumented user 75498 45/50 current_auc = 0.3395931142410016
User 75498 AUC after training: 0.34076682316118934
User 75498 improves AUC. Keeping the model.
Training on augumented user 51601 46/50 current_auc = 0.34076682316118934
User 51601 AUC after training: 0.33998435054773085
User 51601 does not improve AUC. Reverting changes.
Training on augumented user 65383 47/50 current_auc = 0.34076682316118934
User 65383 AUC after training: 0.33881064162754304
User 65383 does not improve AUC. Reverting changes.
Training on augumented user 124577 48/50 current_auc = 0.34076682316118934
User 124577 AUC after training: 0.337245696400626
User 124577 does not improve AUC. Reverting changes.
Training on augumented user 59587 49/50 current_auc = 0.34076682316118934
User 59587 AUC after training: 0.3407668231611894
User 59587 improves AUC. Keeping the model.
[2024-12-02 19:27:40.702695] start test user 4629 201/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:27:41.367946] start test user 4629 201/568 recall augumented users by random, augumented_users = [36653, 63760, 14168, 126408, 39941, 90957, 14116, 103666, 136963, 31936, 44851, 68569, 86754, 54519, 114542, 58648, 31554, 55967, 62369, 25081, 50418, 133827, 2468, 131585, 34016, 138448, 29674, 108129, 82555, 97767, 35702, 59474, 72801, 36658, 75659, 67250, 59191, 49605, 16788, 315, 21032, 99184, 33208, 44497, 104295, 21096, 4852, 10753, 120691, 6968]
[2024-12-02 19:27:41.384361] user = 4629 Cloud 201/568
[2024-12-02 19:27:41.407464] user = 4629 Local 201/568
[2024-12-02 19:27:41.555320] user = 4629 Local+ 201/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:27:44.153901] user = 4629 MPDA- 201/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6311274509803921
Training on augumented user 36653 0/50 current_auc = 0.6311274509803921
User 36653 AUC after training: 0.6303104575163399
User 36653 does not improve AUC. Reverting changes.
Training on augumented user 63760 1/50 current_auc = 0.6311274509803921
User 63760 AUC after training: 0.6319444444444445
User 63760 improves AUC. Keeping the model.
Training on augumented user 14168 2/50 current_auc = 0.6319444444444445
User 14168 AUC after training: 0.6319444444444444
User 14168 does not improve AUC. Reverting changes.
Training on augumented user 126408 3/50 current_auc = 0.6319444444444445
User 126408 AUC after training: 0.633578431372549
User 126408 improves AUC. Keeping the model.
Training on augumented user 39941 4/50 current_auc = 0.633578431372549
User 39941 AUC after training: 0.6343954248366013
User 39941 improves AUC. Keeping the model.
Training on augumented user 90957 5/50 current_auc = 0.6343954248366013
User 90957 AUC after training: 0.6352124183006536
User 90957 improves AUC. Keeping the model.
Training on augumented user 14116 6/50 current_auc = 0.6352124183006536
User 14116 AUC after training: 0.6348039215686274
User 14116 does not improve AUC. Reverting changes.
Training on augumented user 103666 7/50 current_auc = 0.6352124183006536
User 103666 AUC after training: 0.6339869281045751
User 103666 does not improve AUC. Reverting changes.
Training on augumented user 136963 8/50 current_auc = 0.6352124183006536
User 136963 AUC after training: 0.6343954248366013
User 136963 does not improve AUC. Reverting changes.
Training on augumented user 31936 9/50 current_auc = 0.6352124183006536
User 31936 AUC after training: 0.6335784313725491
User 31936 does not improve AUC. Reverting changes.
Training on augumented user 44851 10/50 current_auc = 0.6352124183006536
User 44851 AUC after training: 0.6356209150326798
User 44851 improves AUC. Keeping the model.
Training on augumented user 68569 11/50 current_auc = 0.6356209150326798
User 68569 AUC after training: 0.6352124183006536
User 68569 does not improve AUC. Reverting changes.
Training on augumented user 86754 12/50 current_auc = 0.6356209150326798
User 86754 AUC after training: 0.6343954248366013
User 86754 does not improve AUC. Reverting changes.
Training on augumented user 54519 13/50 current_auc = 0.6356209150326798
User 54519 AUC after training: 0.636029411764706
User 54519 improves AUC. Keeping the model.
Training on augumented user 114542 14/50 current_auc = 0.636029411764706
User 114542 AUC after training: 0.6356209150326798
User 114542 does not improve AUC. Reverting changes.
Training on augumented user 58648 15/50 current_auc = 0.636029411764706
User 58648 AUC after training: 0.6358251633986929
User 58648 does not improve AUC. Reverting changes.
Training on augumented user 31554 16/50 current_auc = 0.636029411764706
User 31554 AUC after training: 0.6368464052287582
User 31554 improves AUC. Keeping the model.
Training on augumented user 55967 17/50 current_auc = 0.6368464052287582
User 55967 AUC after training: 0.6384803921568628
User 55967 improves AUC. Keeping the model.
Training on augumented user 62369 18/50 current_auc = 0.6384803921568628
User 62369 AUC after training: 0.6368464052287582
User 62369 does not improve AUC. Reverting changes.
Training on augumented user 25081 19/50 current_auc = 0.6384803921568628
User 25081 AUC after training: 0.636029411764706
User 25081 does not improve AUC. Reverting changes.
Training on augumented user 50418 20/50 current_auc = 0.6384803921568628
User 50418 AUC after training: 0.6392973856209151
User 50418 improves AUC. Keeping the model.
Training on augumented user 133827 21/50 current_auc = 0.6392973856209151
User 133827 AUC after training: 0.6380718954248366
User 133827 does not improve AUC. Reverting changes.
Training on augumented user 2468 22/50 current_auc = 0.6392973856209151
User 2468 AUC after training: 0.6372549019607844
User 2468 does not improve AUC. Reverting changes.
Training on augumented user 131585 23/50 current_auc = 0.6392973856209151
User 131585 AUC after training: 0.6368464052287582
User 131585 does not improve AUC. Reverting changes.
Training on augumented user 34016 24/50 current_auc = 0.6392973856209151
User 34016 AUC after training: 0.639297385620915
User 34016 does not improve AUC. Reverting changes.
Training on augumented user 138448 25/50 current_auc = 0.6392973856209151
User 138448 AUC after training: 0.6384803921568628
User 138448 does not improve AUC. Reverting changes.
Training on augumented user 29674 26/50 current_auc = 0.6392973856209151
User 29674 AUC after training: 0.6397058823529412
User 29674 improves AUC. Keeping the model.
Training on augumented user 108129 27/50 current_auc = 0.6397058823529412
User 108129 AUC after training: 0.6380718954248367
User 108129 does not improve AUC. Reverting changes.
Training on augumented user 82555 28/50 current_auc = 0.6397058823529412
User 82555 AUC after training: 0.638888888888889
User 82555 does not improve AUC. Reverting changes.
Training on augumented user 97767 29/50 current_auc = 0.6397058823529412
User 97767 AUC after training: 0.6401143790849674
User 97767 improves AUC. Keeping the model.
Training on augumented user 35702 30/50 current_auc = 0.6401143790849674
User 35702 AUC after training: 0.6376633986928105
User 35702 does not improve AUC. Reverting changes.
Training on augumented user 59474 31/50 current_auc = 0.6401143790849674
User 59474 AUC after training: 0.6384803921568628
User 59474 does not improve AUC. Reverting changes.
Training on augumented user 72801 32/50 current_auc = 0.6401143790849674
User 72801 AUC after training: 0.6384803921568628
User 72801 does not improve AUC. Reverting changes.
Training on augumented user 36658 33/50 current_auc = 0.6401143790849674
User 36658 AUC after training: 0.6384803921568628
User 36658 does not improve AUC. Reverting changes.
Training on augumented user 75659 34/50 current_auc = 0.6401143790849674
User 75659 AUC after training: 0.6401143790849674
User 75659 does not improve AUC. Reverting changes.
Training on augumented user 67250 35/50 current_auc = 0.6401143790849674
User 67250 AUC after training: 0.6384803921568628
User 67250 does not improve AUC. Reverting changes.
Training on augumented user 59191 36/50 current_auc = 0.6401143790849674
User 59191 AUC after training: 0.6397058823529412
User 59191 does not improve AUC. Reverting changes.
Training on augumented user 49605 37/50 current_auc = 0.6401143790849674
User 49605 AUC after training: 0.638888888888889
User 49605 does not improve AUC. Reverting changes.
Training on augumented user 16788 38/50 current_auc = 0.6401143790849674
User 16788 AUC after training: 0.639297385620915
User 16788 does not improve AUC. Reverting changes.
Training on augumented user 315 39/50 current_auc = 0.6401143790849674
User 315 AUC after training: 0.638888888888889
User 315 does not improve AUC. Reverting changes.
Training on augumented user 21032 40/50 current_auc = 0.6401143790849674
User 21032 AUC after training: 0.6392973856209151
User 21032 does not improve AUC. Reverting changes.
Training on augumented user 99184 41/50 current_auc = 0.6401143790849674
User 99184 AUC after training: 0.6392973856209151
User 99184 does not improve AUC. Reverting changes.
Training on augumented user 33208 42/50 current_auc = 0.6401143790849674
User 33208 AUC after training: 0.6392973856209151
User 33208 does not improve AUC. Reverting changes.
Training on augumented user 44497 43/50 current_auc = 0.6401143790849674
User 44497 AUC after training: 0.6339869281045751
User 44497 does not improve AUC. Reverting changes.
Training on augumented user 104295 44/50 current_auc = 0.6401143790849674
User 104295 AUC after training: 0.6409313725490197
User 104295 improves AUC. Keeping the model.
Training on augumented user 21096 45/50 current_auc = 0.6409313725490197
User 21096 AUC after training: 0.6384803921568627
User 21096 does not improve AUC. Reverting changes.
Training on augumented user 4852 46/50 current_auc = 0.6409313725490197
User 4852 AUC after training: 0.6397058823529412
User 4852 does not improve AUC. Reverting changes.
Training on augumented user 10753 47/50 current_auc = 0.6409313725490197
User 10753 AUC after training: 0.6380718954248367
User 10753 does not improve AUC. Reverting changes.
Training on augumented user 120691 48/50 current_auc = 0.6409313725490197
User 120691 AUC after training: 0.6376633986928105
User 120691 does not improve AUC. Reverting changes.
Training on augumented user 6968 49/50 current_auc = 0.6409313725490197
User 6968 AUC after training: 0.6401143790849674
User 6968 does not improve AUC. Reverting changes.
[2024-12-02 19:28:14.587942] start test user 4660 202/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:28:15.006741] start test user 4660 202/568 recall augumented users by random, augumented_users = [62717, 96458, 33715, 36344, 50782, 124996, 21510, 116979, 97442, 23037, 19173, 38459, 95569, 100210, 110422, 106262, 122549, 69654, 53544, 43483, 79695, 12511, 14196, 18764, 32843, 122848, 4241, 53557, 120375, 72430, 122429, 82801, 57327, 60385, 104148, 135295, 29954, 13197, 62727, 42421, 111845, 83606, 124894, 124243, 85977, 79454, 122209, 72957, 1879, 4253]
[2024-12-02 19:28:15.021761] user = 4660 Cloud 202/568
[2024-12-02 19:28:15.042829] user = 4660 Local 202/568
[2024-12-02 19:28:15.101961] user = 4660 Local+ 202/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:28:17.249728] user = 4660 MPDA- 202/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5778006519128496
Training on augumented user 62717 0/50 current_auc = 0.5778006519128496
User 62717 AUC after training: 0.577457539886773
User 62717 does not improve AUC. Reverting changes.
Training on augumented user 96458 1/50 current_auc = 0.5778006519128496
User 96458 AUC after training: 0.5778864299193686
User 96458 improves AUC. Keeping the model.
Training on augumented user 33715 2/50 current_auc = 0.5778864299193686
User 33715 AUC after training: 0.5791731000171556
User 33715 improves AUC. Keeping the model.
Training on augumented user 36344 3/50 current_auc = 0.5791731000171556
User 36344 AUC after training: 0.5791302110138961
User 36344 does not improve AUC. Reverting changes.
Training on augumented user 50782 4/50 current_auc = 0.5791731000171556
User 50782 AUC after training: 0.578829987991079
User 50782 does not improve AUC. Reverting changes.
Training on augumented user 124996 5/50 current_auc = 0.5791731000171556
User 124996 AUC after training: 0.5794304340367129
User 124996 improves AUC. Keeping the model.
Training on augumented user 21510 6/50 current_auc = 0.5794304340367129
User 21510 AUC after training: 0.5786155429747811
User 21510 does not improve AUC. Reverting changes.
Training on augumented user 116979 7/50 current_auc = 0.5794304340367129
User 116979 AUC after training: 0.5796019900497513
User 116979 improves AUC. Keeping the model.
Training on augumented user 97442 8/50 current_auc = 0.5796019900497513
User 97442 AUC after training: 0.579130211013896
User 97442 does not improve AUC. Reverting changes.
Training on augumented user 23037 9/50 current_auc = 0.5796019900497513
User 23037 AUC after training: 0.5776290958998112
User 23037 does not improve AUC. Reverting changes.
Training on augumented user 19173 10/50 current_auc = 0.5796019900497513
User 19173 AUC after training: 0.578829987991079
User 19173 does not improve AUC. Reverting changes.
Training on augumented user 38459 11/50 current_auc = 0.5796019900497513
User 38459 AUC after training: 0.5794304340367129
User 38459 does not improve AUC. Reverting changes.
Training on augumented user 95569 12/50 current_auc = 0.5796019900497513
User 95569 AUC after training: 0.5793017670269343
User 95569 does not improve AUC. Reverting changes.
Training on augumented user 100210 13/50 current_auc = 0.5796019900497513
User 100210 AUC after training: 0.5802882141019042
User 100210 improves AUC. Keeping the model.
Training on augumented user 110422 14/50 current_auc = 0.5802882141019042
User 110422 AUC after training: 0.5802024360953851
User 110422 does not improve AUC. Reverting changes.
Training on augumented user 106262 15/50 current_auc = 0.5802882141019042
User 106262 AUC after training: 0.5786155429747812
User 106262 does not improve AUC. Reverting changes.
Training on augumented user 122549 16/50 current_auc = 0.5802882141019042
User 122549 AUC after training: 0.5802882141019042
User 122549 does not improve AUC. Reverting changes.
Training on augumented user 69654 17/50 current_auc = 0.5802882141019042
User 69654 AUC after training: 0.5779293189226282
User 69654 does not improve AUC. Reverting changes.
Training on augumented user 53544 18/50 current_auc = 0.5802882141019042
User 53544 AUC after training: 0.5796877680562703
User 53544 does not improve AUC. Reverting changes.
Training on augumented user 43483 19/50 current_auc = 0.5802882141019042
User 43483 AUC after training: 0.5800737690856064
User 43483 does not improve AUC. Reverting changes.
Training on augumented user 79695 20/50 current_auc = 0.5802882141019042
User 79695 AUC after training: 0.5816606622062104
User 79695 improves AUC. Keeping the model.
Training on augumented user 12511 21/50 current_auc = 0.5816606622062104
User 12511 AUC after training: 0.580416881111683
User 12511 does not improve AUC. Reverting changes.
Training on augumented user 14196 22/50 current_auc = 0.5816606622062104
User 14196 AUC after training: 0.5790873220106365
User 14196 does not improve AUC. Reverting changes.
Training on augumented user 18764 23/50 current_auc = 0.5816606622062104
User 18764 AUC after training: 0.5798164350660491
User 18764 does not improve AUC. Reverting changes.
Training on augumented user 32843 24/50 current_auc = 0.5816606622062104
User 32843 AUC after training: 0.5807171041345
User 32843 does not improve AUC. Reverting changes.
Training on augumented user 122848 25/50 current_auc = 0.5816606622062104
User 122848 AUC after training: 0.5809744381540572
User 122848 does not improve AUC. Reverting changes.
Training on augumented user 4241 26/50 current_auc = 0.5816606622062104
User 4241 AUC after training: 0.5817035512094698
User 4241 improves AUC. Keeping the model.
Training on augumented user 53557 27/50 current_auc = 0.5817035512094698
User 53557 AUC after training: 0.5811459941670954
User 53557 does not improve AUC. Reverting changes.
Training on augumented user 120375 28/50 current_auc = 0.5817035512094698
User 120375 AUC after training: 0.5804597701149424
User 120375 does not improve AUC. Reverting changes.
Training on augumented user 72430 29/50 current_auc = 0.5817035512094698
User 72430 AUC after training: 0.5807171041344998
User 72430 does not improve AUC. Reverting changes.
Training on augumented user 122429 30/50 current_auc = 0.5817035512094698
User 122429 AUC after training: 0.582089552238806
User 122429 improves AUC. Keeping the model.
Training on augumented user 82801 31/50 current_auc = 0.582089552238806
User 82801 AUC after training: 0.5828186652942186
User 82801 improves AUC. Keeping the model.
Training on augumented user 57327 32/50 current_auc = 0.5828186652942186
User 57327 AUC after training: 0.5829473323039971
User 57327 improves AUC. Keeping the model.
Training on augumented user 60385 33/50 current_auc = 0.5829473323039971
User 60385 AUC after training: 0.5817464402127295
User 60385 does not improve AUC. Reverting changes.
Training on augumented user 104148 34/50 current_auc = 0.5829473323039971
User 104148 AUC after training: 0.5822182192485845
User 104148 does not improve AUC. Reverting changes.
Training on augumented user 135295 35/50 current_auc = 0.5829473323039971
User 135295 AUC after training: 0.5828186652942184
User 135295 does not improve AUC. Reverting changes.
Training on augumented user 29954 36/50 current_auc = 0.5829473323039971
User 29954 AUC after training: 0.5832904443300737
User 29954 improves AUC. Keeping the model.
Training on augumented user 13197 37/50 current_auc = 0.5832904443300737
User 13197 AUC after training: 0.584448447418082
User 13197 improves AUC. Keeping the model.
Training on augumented user 62727 38/50 current_auc = 0.584448447418082
User 62727 AUC after training: 0.5837622233659289
User 62727 does not improve AUC. Reverting changes.
Training on augumented user 42421 39/50 current_auc = 0.584448447418082
User 42421 AUC after training: 0.5830331103105163
User 42421 does not improve AUC. Reverting changes.
Training on augumented user 111845 40/50 current_auc = 0.584448447418082
User 111845 AUC after training: 0.583762223365929
User 111845 does not improve AUC. Reverting changes.
Training on augumented user 83606 41/50 current_auc = 0.584448447418082
User 83606 AUC after training: 0.5841911133985246
User 83606 does not improve AUC. Reverting changes.
Training on augumented user 124894 42/50 current_auc = 0.584448447418082
User 124894 AUC after training: 0.5839337793789671
User 124894 does not improve AUC. Reverting changes.
Training on augumented user 124243 43/50 current_auc = 0.584448447418082
User 124243 AUC after training: 0.5847057814376393
User 124243 improves AUC. Keeping the model.
Training on augumented user 85977 44/50 current_auc = 0.5847057814376393
User 85977 AUC after training: 0.5836764453594099
User 85977 does not improve AUC. Reverting changes.
Training on augumented user 79454 45/50 current_auc = 0.5847057814376393
User 79454 AUC after training: 0.5812746611768742
User 79454 does not improve AUC. Reverting changes.
Training on augumented user 122209 46/50 current_auc = 0.5847057814376393
User 122209 AUC after training: 0.5836764453594099
User 122209 does not improve AUC. Reverting changes.
Training on augumented user 72957 47/50 current_auc = 0.5847057814376393
User 72957 AUC after training: 0.5836335563561501
User 72957 does not improve AUC. Reverting changes.
Training on augumented user 1879 48/50 current_auc = 0.5847057814376393
User 1879 AUC after training: 0.5841911133985246
User 1879 does not improve AUC. Reverting changes.
Training on augumented user 4253 49/50 current_auc = 0.5847057814376393
User 4253 AUC after training: 0.583161777320295
User 4253 does not improve AUC. Reverting changes.
[2024-12-02 19:28:48.064440] start test user 4745 203/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:28:48.547907] start test user 4745 203/568 recall augumented users by random, augumented_users = [26858, 1797, 90569, 93396, 59401, 7105, 86557, 56706, 35425, 88589, 29882, 117414, 10001, 18613, 31690, 18892, 12473, 3670, 9981, 89021, 24647, 28442, 46355, 37411, 53716, 31070, 72548, 31959, 4336, 81760, 137067, 78113, 55839, 10599, 131840, 71216, 55512, 92927, 91844, 49532, 111941, 51185, 93042, 44395, 119244, 94087, 102547, 7923, 29109, 117405]
[2024-12-02 19:28:48.563230] user = 4745 Cloud 203/568
[2024-12-02 19:28:48.577452] user = 4745 Local 203/568
[2024-12-02 19:28:48.674723] user = 4745 Local+ 203/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:28:51.004299] user = 4745 MPDA- 203/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.44107142857142856
Training on augumented user 26858 0/50 current_auc = 0.44107142857142856
User 26858 AUC after training: 0.4414285714285714
User 26858 improves AUC. Keeping the model.
Training on augumented user 1797 1/50 current_auc = 0.4414285714285714
User 1797 AUC after training: 0.44214285714285717
User 1797 improves AUC. Keeping the model.
Training on augumented user 90569 2/50 current_auc = 0.44214285714285717
User 90569 AUC after training: 0.44214285714285717
User 90569 does not improve AUC. Reverting changes.
Training on augumented user 93396 3/50 current_auc = 0.44214285714285717
User 93396 AUC after training: 0.44499999999999995
User 93396 improves AUC. Keeping the model.
Training on augumented user 59401 4/50 current_auc = 0.44499999999999995
User 59401 AUC after training: 0.44214285714285717
User 59401 does not improve AUC. Reverting changes.
Training on augumented user 7105 5/50 current_auc = 0.44499999999999995
User 7105 AUC after training: 0.4407142857142857
User 7105 does not improve AUC. Reverting changes.
Training on augumented user 86557 6/50 current_auc = 0.44499999999999995
User 86557 AUC after training: 0.4335714285714286
User 86557 does not improve AUC. Reverting changes.
Training on augumented user 56706 7/50 current_auc = 0.44499999999999995
User 56706 AUC after training: 0.43928571428571433
User 56706 does not improve AUC. Reverting changes.
Training on augumented user 35425 8/50 current_auc = 0.44499999999999995
User 35425 AUC after training: 0.4464285714285715
User 35425 improves AUC. Keeping the model.
Training on augumented user 88589 9/50 current_auc = 0.4464285714285715
User 88589 AUC after training: 0.44678571428571434
User 88589 improves AUC. Keeping the model.
Training on augumented user 29882 10/50 current_auc = 0.44678571428571434
User 29882 AUC after training: 0.4453571428571429
User 29882 does not improve AUC. Reverting changes.
Training on augumented user 117414 11/50 current_auc = 0.44678571428571434
User 117414 AUC after training: 0.4357142857142857
User 117414 does not improve AUC. Reverting changes.
Training on augumented user 10001 12/50 current_auc = 0.44678571428571434
User 10001 AUC after training: 0.4364285714285715
User 10001 does not improve AUC. Reverting changes.
Training on augumented user 18613 13/50 current_auc = 0.44678571428571434
User 18613 AUC after training: 0.4464285714285714
User 18613 does not improve AUC. Reverting changes.
Training on augumented user 31690 14/50 current_auc = 0.44678571428571434
User 31690 AUC after training: 0.43714285714285717
User 31690 does not improve AUC. Reverting changes.
Training on augumented user 18892 15/50 current_auc = 0.44678571428571434
User 18892 AUC after training: 0.43678571428571433
User 18892 does not improve AUC. Reverting changes.
Training on augumented user 12473 16/50 current_auc = 0.44678571428571434
User 12473 AUC after training: 0.43607142857142855
User 12473 does not improve AUC. Reverting changes.
Training on augumented user 3670 17/50 current_auc = 0.44678571428571434
User 3670 AUC after training: 0.4396428571428572
User 3670 does not improve AUC. Reverting changes.
Training on augumented user 9981 18/50 current_auc = 0.44678571428571434
User 9981 AUC after training: 0.4435714285714286
User 9981 does not improve AUC. Reverting changes.
Training on augumented user 89021 19/50 current_auc = 0.44678571428571434
User 89021 AUC after training: 0.4503571428571429
User 89021 improves AUC. Keeping the model.
Training on augumented user 24647 20/50 current_auc = 0.4503571428571429
User 24647 AUC after training: 0.4514285714285714
User 24647 improves AUC. Keeping the model.
Training on augumented user 28442 21/50 current_auc = 0.4514285714285714
User 28442 AUC after training: 0.4532142857142857
User 28442 improves AUC. Keeping the model.
Training on augumented user 46355 22/50 current_auc = 0.4532142857142857
User 46355 AUC after training: 0.4525
User 46355 does not improve AUC. Reverting changes.
Training on augumented user 37411 23/50 current_auc = 0.4532142857142857
User 37411 AUC after training: 0.4460714285714286
User 37411 does not improve AUC. Reverting changes.
Training on augumented user 53716 24/50 current_auc = 0.4532142857142857
User 53716 AUC after training: 0.4564285714285714
User 53716 improves AUC. Keeping the model.
Training on augumented user 31070 25/50 current_auc = 0.4564285714285714
User 31070 AUC after training: 0.4564285714285714
User 31070 does not improve AUC. Reverting changes.
Training on augumented user 72548 26/50 current_auc = 0.4564285714285714
User 72548 AUC after training: 0.45571428571428574
User 72548 does not improve AUC. Reverting changes.
Training on augumented user 31959 27/50 current_auc = 0.4564285714285714
User 31959 AUC after training: 0.4592857142857143
User 31959 improves AUC. Keeping the model.
Training on augumented user 4336 28/50 current_auc = 0.4592857142857143
User 4336 AUC after training: 0.4542857142857143
User 4336 does not improve AUC. Reverting changes.
Training on augumented user 81760 29/50 current_auc = 0.4592857142857143
User 81760 AUC after training: 0.45785714285714285
User 81760 does not improve AUC. Reverting changes.
Training on augumented user 137067 30/50 current_auc = 0.4592857142857143
User 137067 AUC after training: 0.4521428571428572
User 137067 does not improve AUC. Reverting changes.
Training on augumented user 78113 31/50 current_auc = 0.4592857142857143
User 78113 AUC after training: 0.45499999999999996
User 78113 does not improve AUC. Reverting changes.
Training on augumented user 55839 32/50 current_auc = 0.4592857142857143
User 55839 AUC after training: 0.45785714285714285
User 55839 does not improve AUC. Reverting changes.
Training on augumented user 10599 33/50 current_auc = 0.4592857142857143
User 10599 AUC after training: 0.4503571428571429
User 10599 does not improve AUC. Reverting changes.
Training on augumented user 131840 34/50 current_auc = 0.4592857142857143
User 131840 AUC after training: 0.46
User 131840 improves AUC. Keeping the model.
Training on augumented user 71216 35/50 current_auc = 0.46
User 71216 AUC after training: 0.4535714285714286
User 71216 does not improve AUC. Reverting changes.
Training on augumented user 55512 36/50 current_auc = 0.46
User 55512 AUC after training: 0.45785714285714285
User 55512 does not improve AUC. Reverting changes.
Training on augumented user 92927 37/50 current_auc = 0.46
User 92927 AUC after training: 0.4514285714285714
User 92927 does not improve AUC. Reverting changes.
Training on augumented user 91844 38/50 current_auc = 0.46
User 91844 AUC after training: 0.45357142857142857
User 91844 does not improve AUC. Reverting changes.
Training on augumented user 49532 39/50 current_auc = 0.46
User 49532 AUC after training: 0.46
User 49532 does not improve AUC. Reverting changes.
Training on augumented user 111941 40/50 current_auc = 0.46
User 111941 AUC after training: 0.45571428571428574
User 111941 does not improve AUC. Reverting changes.
Training on augumented user 51185 41/50 current_auc = 0.46
User 51185 AUC after training: 0.4571428571428572
User 51185 does not improve AUC. Reverting changes.
Training on augumented user 93042 42/50 current_auc = 0.46
User 93042 AUC after training: 0.45607142857142857
User 93042 does not improve AUC. Reverting changes.
Training on augumented user 44395 43/50 current_auc = 0.46
User 44395 AUC after training: 0.45678571428571424
User 44395 does not improve AUC. Reverting changes.
Training on augumented user 119244 44/50 current_auc = 0.46
User 119244 AUC after training: 0.4514285714285714
User 119244 does not improve AUC. Reverting changes.
Training on augumented user 94087 45/50 current_auc = 0.46
User 94087 AUC after training: 0.4435714285714286
User 94087 does not improve AUC. Reverting changes.
Training on augumented user 102547 46/50 current_auc = 0.46
User 102547 AUC after training: 0.4503571428571429
User 102547 does not improve AUC. Reverting changes.
Training on augumented user 7923 47/50 current_auc = 0.46
User 7923 AUC after training: 0.45357142857142857
User 7923 does not improve AUC. Reverting changes.
Training on augumented user 29109 48/50 current_auc = 0.46
User 29109 AUC after training: 0.455
User 29109 does not improve AUC. Reverting changes.
Training on augumented user 117405 49/50 current_auc = 0.46
User 117405 AUC after training: 0.4514285714285714
User 117405 does not improve AUC. Reverting changes.
[2024-12-02 19:29:22.900782] start test user 4748 204/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:29:23.445357] start test user 4748 204/568 recall augumented users by random, augumented_users = [36183, 57039, 115137, 129157, 89822, 28482, 47532, 11326, 43699, 75102, 23346, 57511, 126869, 21706, 95731, 78187, 37359, 85090, 116533, 109550, 108283, 62773, 16039, 112706, 65035, 92299, 47207, 105486, 9734, 35125, 52201, 8808, 26607, 93428, 44088, 44331, 78638, 130155, 2784, 57068, 133453, 6960, 94820, 72816, 10146, 23664, 28998, 17527, 4414, 48587]
[2024-12-02 19:29:23.463173] user = 4748 Cloud 204/568
[2024-12-02 19:29:23.475225] user = 4748 Local 204/568
[2024-12-02 19:29:23.725622] user = 4748 Local+ 204/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:29:25.495845] user = 4748 MPDA- 204/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7727272727272727
Training on augumented user 36183 0/50 current_auc = 0.7727272727272727
User 36183 AUC after training: 0.7727272727272727
User 36183 does not improve AUC. Reverting changes.
Training on augumented user 57039 1/50 current_auc = 0.7727272727272727
User 57039 AUC after training: 0.7727272727272727
User 57039 does not improve AUC. Reverting changes.
Training on augumented user 115137 2/50 current_auc = 0.7727272727272727
User 115137 AUC after training: 0.7727272727272727
User 115137 does not improve AUC. Reverting changes.
Training on augumented user 129157 3/50 current_auc = 0.7727272727272727
User 129157 AUC after training: 0.7727272727272727
User 129157 does not improve AUC. Reverting changes.
Training on augumented user 89822 4/50 current_auc = 0.7727272727272727
User 89822 AUC after training: 0.7727272727272727
User 89822 does not improve AUC. Reverting changes.
Training on augumented user 28482 5/50 current_auc = 0.7727272727272727
User 28482 AUC after training: 0.7727272727272727
User 28482 does not improve AUC. Reverting changes.
Training on augumented user 47532 6/50 current_auc = 0.7727272727272727
User 47532 AUC after training: 0.7727272727272727
User 47532 does not improve AUC. Reverting changes.
Training on augumented user 11326 7/50 current_auc = 0.7727272727272727
User 11326 AUC after training: 0.7727272727272727
User 11326 does not improve AUC. Reverting changes.
Training on augumented user 43699 8/50 current_auc = 0.7727272727272727
User 43699 AUC after training: 0.7762237762237763
User 43699 improves AUC. Keeping the model.
Training on augumented user 75102 9/50 current_auc = 0.7762237762237763
User 75102 AUC after training: 0.7762237762237763
User 75102 does not improve AUC. Reverting changes.
Training on augumented user 23346 10/50 current_auc = 0.7762237762237763
User 23346 AUC after training: 0.7762237762237763
User 23346 does not improve AUC. Reverting changes.
Training on augumented user 57511 11/50 current_auc = 0.7762237762237763
User 57511 AUC after training: 0.7762237762237763
User 57511 does not improve AUC. Reverting changes.
Training on augumented user 126869 12/50 current_auc = 0.7762237762237763
User 126869 AUC after training: 0.7762237762237763
User 126869 does not improve AUC. Reverting changes.
Training on augumented user 21706 13/50 current_auc = 0.7762237762237763
User 21706 AUC after training: 0.7727272727272727
User 21706 does not improve AUC. Reverting changes.
Training on augumented user 95731 14/50 current_auc = 0.7762237762237763
User 95731 AUC after training: 0.7762237762237763
User 95731 does not improve AUC. Reverting changes.
Training on augumented user 78187 15/50 current_auc = 0.7762237762237763
User 78187 AUC after training: 0.7762237762237763
User 78187 does not improve AUC. Reverting changes.
Training on augumented user 37359 16/50 current_auc = 0.7762237762237763
User 37359 AUC after training: 0.7762237762237763
User 37359 does not improve AUC. Reverting changes.
Training on augumented user 85090 17/50 current_auc = 0.7762237762237763
User 85090 AUC after training: 0.7762237762237763
User 85090 does not improve AUC. Reverting changes.
Training on augumented user 116533 18/50 current_auc = 0.7762237762237763
User 116533 AUC after training: 0.7762237762237763
User 116533 does not improve AUC. Reverting changes.
Training on augumented user 109550 19/50 current_auc = 0.7762237762237763
User 109550 AUC after training: 0.7762237762237763
User 109550 does not improve AUC. Reverting changes.
Training on augumented user 108283 20/50 current_auc = 0.7762237762237763
User 108283 AUC after training: 0.7762237762237763
User 108283 does not improve AUC. Reverting changes.
Training on augumented user 62773 21/50 current_auc = 0.7762237762237763
User 62773 AUC after training: 0.7762237762237763
User 62773 does not improve AUC. Reverting changes.
Training on augumented user 16039 22/50 current_auc = 0.7762237762237763
User 16039 AUC after training: 0.7762237762237763
User 16039 does not improve AUC. Reverting changes.
Training on augumented user 112706 23/50 current_auc = 0.7762237762237763
User 112706 AUC after training: 0.7762237762237763
User 112706 does not improve AUC. Reverting changes.
Training on augumented user 65035 24/50 current_auc = 0.7762237762237763
User 65035 AUC after training: 0.7762237762237763
User 65035 does not improve AUC. Reverting changes.
Training on augumented user 92299 25/50 current_auc = 0.7762237762237763
User 92299 AUC after training: 0.7762237762237763
User 92299 does not improve AUC. Reverting changes.
Training on augumented user 47207 26/50 current_auc = 0.7762237762237763
User 47207 AUC after training: 0.7762237762237763
User 47207 does not improve AUC. Reverting changes.
Training on augumented user 105486 27/50 current_auc = 0.7762237762237763
User 105486 AUC after training: 0.7762237762237763
User 105486 does not improve AUC. Reverting changes.
Training on augumented user 9734 28/50 current_auc = 0.7762237762237763
User 9734 AUC after training: 0.7762237762237763
User 9734 does not improve AUC. Reverting changes.
Training on augumented user 35125 29/50 current_auc = 0.7762237762237763
User 35125 AUC after training: 0.7762237762237763
User 35125 does not improve AUC. Reverting changes.
Training on augumented user 52201 30/50 current_auc = 0.7762237762237763
User 52201 AUC after training: 0.7762237762237763
User 52201 does not improve AUC. Reverting changes.
Training on augumented user 8808 31/50 current_auc = 0.7762237762237763
User 8808 AUC after training: 0.7762237762237763
User 8808 does not improve AUC. Reverting changes.
Training on augumented user 26607 32/50 current_auc = 0.7762237762237763
User 26607 AUC after training: 0.7762237762237763
User 26607 does not improve AUC. Reverting changes.
Training on augumented user 93428 33/50 current_auc = 0.7762237762237763
User 93428 AUC after training: 0.7762237762237763
User 93428 does not improve AUC. Reverting changes.
Training on augumented user 44088 34/50 current_auc = 0.7762237762237763
User 44088 AUC after training: 0.7762237762237763
User 44088 does not improve AUC. Reverting changes.
Training on augumented user 44331 35/50 current_auc = 0.7762237762237763
User 44331 AUC after training: 0.7762237762237763
User 44331 does not improve AUC. Reverting changes.
Training on augumented user 78638 36/50 current_auc = 0.7762237762237763
User 78638 AUC after training: 0.7762237762237763
User 78638 does not improve AUC. Reverting changes.
Training on augumented user 130155 37/50 current_auc = 0.7762237762237763
User 130155 AUC after training: 0.7762237762237763
User 130155 does not improve AUC. Reverting changes.
Training on augumented user 2784 38/50 current_auc = 0.7762237762237763
User 2784 AUC after training: 0.7762237762237763
User 2784 does not improve AUC. Reverting changes.
Training on augumented user 57068 39/50 current_auc = 0.7762237762237763
User 57068 AUC after training: 0.7762237762237763
User 57068 does not improve AUC. Reverting changes.
Training on augumented user 133453 40/50 current_auc = 0.7762237762237763
User 133453 AUC after training: 0.7727272727272727
User 133453 does not improve AUC. Reverting changes.
Training on augumented user 6960 41/50 current_auc = 0.7762237762237763
User 6960 AUC after training: 0.7762237762237763
User 6960 does not improve AUC. Reverting changes.
Training on augumented user 94820 42/50 current_auc = 0.7762237762237763
User 94820 AUC after training: 0.7762237762237763
User 94820 does not improve AUC. Reverting changes.
Training on augumented user 72816 43/50 current_auc = 0.7762237762237763
User 72816 AUC after training: 0.7762237762237763
User 72816 does not improve AUC. Reverting changes.
Training on augumented user 10146 44/50 current_auc = 0.7762237762237763
User 10146 AUC after training: 0.7762237762237763
User 10146 does not improve AUC. Reverting changes.
Training on augumented user 23664 45/50 current_auc = 0.7762237762237763
User 23664 AUC after training: 0.7762237762237763
User 23664 does not improve AUC. Reverting changes.
Training on augumented user 28998 46/50 current_auc = 0.7762237762237763
User 28998 AUC after training: 0.7762237762237763
User 28998 does not improve AUC. Reverting changes.
Training on augumented user 17527 47/50 current_auc = 0.7762237762237763
User 17527 AUC after training: 0.7762237762237763
User 17527 does not improve AUC. Reverting changes.
Training on augumented user 4414 48/50 current_auc = 0.7762237762237763
User 4414 AUC after training: 0.7762237762237763
User 4414 does not improve AUC. Reverting changes.
Training on augumented user 48587 49/50 current_auc = 0.7762237762237763
User 48587 AUC after training: 0.7762237762237763
User 48587 does not improve AUC. Reverting changes.
[2024-12-02 19:29:57.200471] start test user 4759 205/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:29:57.817062] start test user 4759 205/568 recall augumented users by random, augumented_users = [109376, 11181, 119460, 115000, 10452, 67395, 62560, 73474, 83220, 127213, 52612, 107941, 8835, 35411, 91487, 22549, 11251, 76268, 118970, 108608, 65476, 8064, 79652, 90183, 88348, 104284, 54884, 26909, 85926, 88451, 137286, 94353, 130550, 65274, 15679, 134128, 30448, 122506, 71472, 108924, 77885, 108348, 40546, 81118, 112458, 52182, 11376, 69394, 122080, 77661]
[2024-12-02 19:29:57.834632] user = 4759 Cloud 205/568
[2024-12-02 19:29:57.867048] user = 4759 Local 205/568
[2024-12-02 19:29:58.176809] user = 4759 Local+ 205/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:30:01.284141] user = 4759 MPDA- 205/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.613356210021322
Training on augumented user 109376 0/50 current_auc = 0.613356210021322
User 109376 AUC after training: 0.6128564765458422
User 109376 does not improve AUC. Reverting changes.
Training on augumented user 11181 1/50 current_auc = 0.613356210021322
User 11181 AUC after training: 0.6130563699360341
User 11181 does not improve AUC. Reverting changes.
Training on augumented user 119460 2/50 current_auc = 0.613356210021322
User 119460 AUC after training: 0.6138392857142858
User 119460 improves AUC. Keeping the model.
Training on augumented user 115000 3/50 current_auc = 0.6138392857142858
User 115000 AUC after training: 0.613172974413646
User 115000 does not improve AUC. Reverting changes.
Training on augumented user 10452 4/50 current_auc = 0.6138392857142858
User 10452 AUC after training: 0.6134728144989339
User 10452 does not improve AUC. Reverting changes.
Training on augumented user 67395 5/50 current_auc = 0.6138392857142858
User 67395 AUC after training: 0.6138392857142857
User 67395 does not improve AUC. Reverting changes.
Training on augumented user 62560 6/50 current_auc = 0.6138392857142858
User 62560 AUC after training: 0.6130397121535182
User 62560 does not improve AUC. Reverting changes.
Training on augumented user 73474 7/50 current_auc = 0.6138392857142858
User 73474 AUC after training: 0.613389525586354
User 73474 does not improve AUC. Reverting changes.
Training on augumented user 83220 8/50 current_auc = 0.6138392857142858
User 83220 AUC after training: 0.6136727078891258
User 83220 does not improve AUC. Reverting changes.
Training on augumented user 127213 9/50 current_auc = 0.6138392857142858
User 127213 AUC after training: 0.6134394989339019
User 127213 does not improve AUC. Reverting changes.
Training on augumented user 52612 10/50 current_auc = 0.6138392857142858
User 52612 AUC after training: 0.613339552238806
User 52612 does not improve AUC. Reverting changes.
Training on augumented user 107941 11/50 current_auc = 0.6138392857142858
User 107941 AUC after training: 0.6129730810234542
User 107941 does not improve AUC. Reverting changes.
Training on augumented user 8835 12/50 current_auc = 0.6138392857142858
User 8835 AUC after training: 0.6138059701492538
User 8835 does not improve AUC. Reverting changes.
Training on augumented user 35411 13/50 current_auc = 0.6138392857142858
User 35411 AUC after training: 0.6138392857142857
User 35411 does not improve AUC. Reverting changes.
Training on augumented user 91487 14/50 current_auc = 0.6138392857142858
User 91487 AUC after training: 0.6127731876332623
User 91487 does not improve AUC. Reverting changes.
Training on augumented user 22549 15/50 current_auc = 0.6138392857142858
User 22549 AUC after training: 0.6138726012793176
User 22549 improves AUC. Keeping the model.
Training on augumented user 11251 16/50 current_auc = 0.6138726012793176
User 11251 AUC after training: 0.6139392324093816
User 11251 improves AUC. Keeping the model.
Training on augumented user 76268 17/50 current_auc = 0.6139392324093816
User 76268 AUC after training: 0.6139725479744136
User 76268 improves AUC. Keeping the model.
Training on augumented user 118970 18/50 current_auc = 0.6139725479744136
User 118970 AUC after training: 0.6137393390191896
User 118970 does not improve AUC. Reverting changes.
Training on augumented user 108608 19/50 current_auc = 0.6139725479744136
User 108608 AUC after training: 0.6140891524520256
User 108608 improves AUC. Keeping the model.
Training on augumented user 65476 20/50 current_auc = 0.6140891524520256
User 65476 AUC after training: 0.6144056503198294
User 65476 improves AUC. Keeping the model.
Training on augumented user 8064 21/50 current_auc = 0.6144056503198294
User 8064 AUC after training: 0.6142057569296375
User 8064 does not improve AUC. Reverting changes.
Training on augumented user 79652 22/50 current_auc = 0.6144056503198294
User 79652 AUC after training: 0.6143057036247335
User 79652 does not improve AUC. Reverting changes.
Training on augumented user 90183 23/50 current_auc = 0.6144056503198294
User 90183 AUC after training: 0.6145722281449894
User 90183 improves AUC. Keeping the model.
Training on augumented user 88348 24/50 current_auc = 0.6145722281449894
User 88348 AUC after training: 0.6148387526652452
User 88348 improves AUC. Keeping the model.
Training on augumented user 104284 25/50 current_auc = 0.6148387526652452
User 104284 AUC after training: 0.6147721215351812
User 104284 does not improve AUC. Reverting changes.
Training on augumented user 54884 26/50 current_auc = 0.6148387526652452
User 54884 AUC after training: 0.6145055970149254
User 54884 does not improve AUC. Reverting changes.
Training on augumented user 26909 27/50 current_auc = 0.6148387526652452
User 26909 AUC after training: 0.6149053837953091
User 26909 improves AUC. Keeping the model.
Training on augumented user 85926 28/50 current_auc = 0.6149053837953091
User 85926 AUC after training: 0.6156383262260128
User 85926 improves AUC. Keeping the model.
Training on augumented user 88451 29/50 current_auc = 0.6156383262260128
User 88451 AUC after training: 0.6158382196162047
User 88451 improves AUC. Keeping the model.
Training on augumented user 137286 30/50 current_auc = 0.6158382196162047
User 137286 AUC after training: 0.6162713219616205
User 137286 improves AUC. Keeping the model.
Training on augumented user 94353 31/50 current_auc = 0.6162713219616205
User 94353 AUC after training: 0.6167044243070363
User 94353 improves AUC. Keeping the model.
Training on augumented user 130550 32/50 current_auc = 0.6167044243070363
User 130550 AUC after training: 0.617070895522388
User 130550 improves AUC. Keeping the model.
Training on augumented user 65274 33/50 current_auc = 0.617070895522388
User 65274 AUC after training: 0.617204157782516
User 65274 improves AUC. Keeping the model.
Training on augumented user 15679 34/50 current_auc = 0.617204157782516
User 15679 AUC after training: 0.6167044243070363
User 15679 does not improve AUC. Reverting changes.
Training on augumented user 134128 35/50 current_auc = 0.617204157782516
User 134128 AUC after training: 0.6167710554371002
User 134128 does not improve AUC. Reverting changes.
Training on augumented user 30448 36/50 current_auc = 0.617204157782516
User 30448 AUC after training: 0.6168376865671641
User 30448 does not improve AUC. Reverting changes.
Training on augumented user 122506 37/50 current_auc = 0.617204157782516
User 122506 AUC after training: 0.61743736673774
User 122506 improves AUC. Keeping the model.
Training on augumented user 71472 38/50 current_auc = 0.61743736673774
User 71472 AUC after training: 0.617204157782516
User 71472 does not improve AUC. Reverting changes.
Training on augumented user 108924 39/50 current_auc = 0.61743736673774
User 108924 AUC after training: 0.6178371535181237
User 108924 improves AUC. Keeping the model.
Training on augumented user 77885 40/50 current_auc = 0.6178371535181237
User 77885 AUC after training: 0.6170542377398721
User 77885 does not improve AUC. Reverting changes.
Training on augumented user 108348 41/50 current_auc = 0.6178371535181237
User 108348 AUC after training: 0.6180703624733476
User 108348 improves AUC. Keeping the model.
Training on augumented user 40546 42/50 current_auc = 0.6180703624733476
User 40546 AUC after training: 0.6174706823027719
User 40546 does not improve AUC. Reverting changes.
Training on augumented user 81118 43/50 current_auc = 0.6180703624733476
User 81118 AUC after training: 0.617170842217484
User 81118 does not improve AUC. Reverting changes.
Training on augumented user 112458 44/50 current_auc = 0.6180703624733476
User 112458 AUC after training: 0.6176705756929638
User 112458 does not improve AUC. Reverting changes.
Training on augumented user 52182 45/50 current_auc = 0.6180703624733476
User 52182 AUC after training: 0.6179037846481876
User 52182 does not improve AUC. Reverting changes.
Training on augumented user 11376 46/50 current_auc = 0.6180703624733476
User 11376 AUC after training: 0.6181703091684436
User 11376 improves AUC. Keeping the model.
Training on augumented user 69394 47/50 current_auc = 0.6181703091684436
User 69394 AUC after training: 0.6175039978678039
User 69394 does not improve AUC. Reverting changes.
Training on augumented user 122080 48/50 current_auc = 0.6181703091684436
User 122080 AUC after training: 0.6178704690831557
User 122080 does not improve AUC. Reverting changes.
Training on augumented user 77661 49/50 current_auc = 0.6181703091684436
User 77661 AUC after training: 0.6181703091684435
User 77661 does not improve AUC. Reverting changes.
[2024-12-02 19:30:31.027439] start test user 4769 206/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:30:31.629422] start test user 4769 206/568 recall augumented users by random, augumented_users = [111855, 135787, 63900, 87894, 59157, 62922, 76313, 47751, 107674, 7187, 50608, 66245, 44218, 27869, 104194, 90596, 63904, 25567, 5381, 55767, 10452, 85389, 4421, 106085, 72528, 34914, 101304, 61162, 5234, 17048, 59149, 57097, 132045, 11539, 3302, 69172, 74563, 10825, 107518, 44015, 128378, 83349, 46176, 31566, 53624, 87284, 39023, 569, 6186, 82652]
[2024-12-02 19:30:31.659642] user = 4769 Cloud 206/568
[2024-12-02 19:30:31.684851] user = 4769 Local 206/568
[2024-12-02 19:30:31.847914] user = 4769 Local+ 206/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:30:34.395081] user = 4769 MPDA- 206/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6762749445676275
Training on augumented user 111855 0/50 current_auc = 0.6762749445676275
User 111855 AUC after training: 0.6762749445676275
User 111855 does not improve AUC. Reverting changes.
Training on augumented user 135787 1/50 current_auc = 0.6762749445676275
User 135787 AUC after training: 0.6762749445676275
User 135787 does not improve AUC. Reverting changes.
Training on augumented user 63900 2/50 current_auc = 0.6762749445676275
User 63900 AUC after training: 0.6762749445676275
User 63900 does not improve AUC. Reverting changes.
Training on augumented user 87894 3/50 current_auc = 0.6762749445676275
User 87894 AUC after training: 0.6762749445676275
User 87894 does not improve AUC. Reverting changes.
Training on augumented user 59157 4/50 current_auc = 0.6762749445676275
User 59157 AUC after training: 0.6740576496674058
User 59157 does not improve AUC. Reverting changes.
Training on augumented user 62922 5/50 current_auc = 0.6762749445676275
User 62922 AUC after training: 0.6762749445676275
User 62922 does not improve AUC. Reverting changes.
Training on augumented user 76313 6/50 current_auc = 0.6762749445676275
User 76313 AUC after training: 0.6740576496674058
User 76313 does not improve AUC. Reverting changes.
Training on augumented user 47751 7/50 current_auc = 0.6762749445676275
User 47751 AUC after training: 0.6762749445676275
User 47751 does not improve AUC. Reverting changes.
Training on augumented user 107674 8/50 current_auc = 0.6762749445676275
User 107674 AUC after training: 0.6718403547671841
User 107674 does not improve AUC. Reverting changes.
Training on augumented user 7187 9/50 current_auc = 0.6762749445676275
User 7187 AUC after training: 0.6740576496674058
User 7187 does not improve AUC. Reverting changes.
Training on augumented user 50608 10/50 current_auc = 0.6762749445676275
User 50608 AUC after training: 0.6762749445676275
User 50608 does not improve AUC. Reverting changes.
Training on augumented user 66245 11/50 current_auc = 0.6762749445676275
User 66245 AUC after training: 0.6740576496674058
User 66245 does not improve AUC. Reverting changes.
Training on augumented user 44218 12/50 current_auc = 0.6762749445676275
User 44218 AUC after training: 0.6740576496674058
User 44218 does not improve AUC. Reverting changes.
Training on augumented user 27869 13/50 current_auc = 0.6762749445676275
User 27869 AUC after training: 0.6762749445676275
User 27869 does not improve AUC. Reverting changes.
Training on augumented user 104194 14/50 current_auc = 0.6762749445676275
User 104194 AUC after training: 0.6762749445676275
User 104194 does not improve AUC. Reverting changes.
Training on augumented user 90596 15/50 current_auc = 0.6762749445676275
User 90596 AUC after training: 0.6740576496674058
User 90596 does not improve AUC. Reverting changes.
Training on augumented user 63904 16/50 current_auc = 0.6762749445676275
User 63904 AUC after training: 0.6762749445676275
User 63904 does not improve AUC. Reverting changes.
Training on augumented user 25567 17/50 current_auc = 0.6762749445676275
User 25567 AUC after training: 0.6762749445676275
User 25567 does not improve AUC. Reverting changes.
Training on augumented user 5381 18/50 current_auc = 0.6762749445676275
User 5381 AUC after training: 0.6762749445676275
User 5381 does not improve AUC. Reverting changes.
Training on augumented user 55767 19/50 current_auc = 0.6762749445676275
User 55767 AUC after training: 0.6762749445676275
User 55767 does not improve AUC. Reverting changes.
Training on augumented user 10452 20/50 current_auc = 0.6762749445676275
User 10452 AUC after training: 0.6740576496674058
User 10452 does not improve AUC. Reverting changes.
Training on augumented user 85389 21/50 current_auc = 0.6762749445676275
User 85389 AUC after training: 0.6729490022172948
User 85389 does not improve AUC. Reverting changes.
Training on augumented user 4421 22/50 current_auc = 0.6762749445676275
User 4421 AUC after training: 0.6762749445676275
User 4421 does not improve AUC. Reverting changes.
Training on augumented user 106085 23/50 current_auc = 0.6762749445676275
User 106085 AUC after training: 0.6762749445676275
User 106085 does not improve AUC. Reverting changes.
Training on augumented user 72528 24/50 current_auc = 0.6762749445676275
User 72528 AUC after training: 0.6762749445676275
User 72528 does not improve AUC. Reverting changes.
Training on augumented user 34914 25/50 current_auc = 0.6762749445676275
User 34914 AUC after training: 0.6762749445676275
User 34914 does not improve AUC. Reverting changes.
Training on augumented user 101304 26/50 current_auc = 0.6762749445676275
User 101304 AUC after training: 0.6762749445676275
User 101304 does not improve AUC. Reverting changes.
Training on augumented user 61162 27/50 current_auc = 0.6762749445676275
User 61162 AUC after training: 0.6740576496674058
User 61162 does not improve AUC. Reverting changes.
Training on augumented user 5234 28/50 current_auc = 0.6762749445676275
User 5234 AUC after training: 0.6773835920177383
User 5234 improves AUC. Keeping the model.
Training on augumented user 17048 29/50 current_auc = 0.6773835920177383
User 17048 AUC after training: 0.6796008869179601
User 17048 improves AUC. Keeping the model.
Training on augumented user 59149 30/50 current_auc = 0.6796008869179601
User 59149 AUC after training: 0.6762749445676275
User 59149 does not improve AUC. Reverting changes.
Training on augumented user 57097 31/50 current_auc = 0.6796008869179601
User 57097 AUC after training: 0.6773835920177383
User 57097 does not improve AUC. Reverting changes.
Training on augumented user 132045 32/50 current_auc = 0.6796008869179601
User 132045 AUC after training: 0.6773835920177383
User 132045 does not improve AUC. Reverting changes.
Training on augumented user 11539 33/50 current_auc = 0.6796008869179601
User 11539 AUC after training: 0.6773835920177383
User 11539 does not improve AUC. Reverting changes.
Training on augumented user 3302 34/50 current_auc = 0.6796008869179601
User 3302 AUC after training: 0.6796008869179601
User 3302 does not improve AUC. Reverting changes.
Training on augumented user 69172 35/50 current_auc = 0.6796008869179601
User 69172 AUC after training: 0.6773835920177383
User 69172 does not improve AUC. Reverting changes.
Training on augumented user 74563 36/50 current_auc = 0.6796008869179601
User 74563 AUC after training: 0.6773835920177383
User 74563 does not improve AUC. Reverting changes.
Training on augumented user 10825 37/50 current_auc = 0.6796008869179601
User 10825 AUC after training: 0.6796008869179601
User 10825 does not improve AUC. Reverting changes.
Training on augumented user 107518 38/50 current_auc = 0.6796008869179601
User 107518 AUC after training: 0.6796008869179601
User 107518 does not improve AUC. Reverting changes.
Training on augumented user 44015 39/50 current_auc = 0.6796008869179601
User 44015 AUC after training: 0.6773835920177383
User 44015 does not improve AUC. Reverting changes.
Training on augumented user 128378 40/50 current_auc = 0.6796008869179601
User 128378 AUC after training: 0.6773835920177383
User 128378 does not improve AUC. Reverting changes.
Training on augumented user 83349 41/50 current_auc = 0.6796008869179601
User 83349 AUC after training: 0.6784922394678492
User 83349 does not improve AUC. Reverting changes.
Training on augumented user 46176 42/50 current_auc = 0.6796008869179601
User 46176 AUC after training: 0.6762749445676275
User 46176 does not improve AUC. Reverting changes.
Training on augumented user 31566 43/50 current_auc = 0.6796008869179601
User 31566 AUC after training: 0.6796008869179601
User 31566 does not improve AUC. Reverting changes.
Training on augumented user 53624 44/50 current_auc = 0.6796008869179601
User 53624 AUC after training: 0.6773835920177383
User 53624 does not improve AUC. Reverting changes.
Training on augumented user 87284 45/50 current_auc = 0.6796008869179601
User 87284 AUC after training: 0.6796008869179601
User 87284 does not improve AUC. Reverting changes.
Training on augumented user 39023 46/50 current_auc = 0.6796008869179601
User 39023 AUC after training: 0.6773835920177383
User 39023 does not improve AUC. Reverting changes.
Training on augumented user 569 47/50 current_auc = 0.6796008869179601
User 569 AUC after training: 0.6796008869179601
User 569 does not improve AUC. Reverting changes.
Training on augumented user 6186 48/50 current_auc = 0.6796008869179601
User 6186 AUC after training: 0.6773835920177383
User 6186 does not improve AUC. Reverting changes.
Training on augumented user 82652 49/50 current_auc = 0.6796008869179601
User 82652 AUC after training: 0.6773835920177383
User 82652 does not improve AUC. Reverting changes.
[2024-12-02 19:31:00.300392] start test user 4822 207/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:31:00.760293] start test user 4822 207/568 recall augumented users by random, augumented_users = [108946, 64033, 98411, 26640, 67363, 31486, 15345, 85082, 101923, 99918, 92422, 33064, 95827, 80632, 130774, 50502, 100332, 55256, 83088, 10887, 43611, 102266, 101582, 85410, 73083, 115206, 44908, 75834, 21686, 636, 54459, 122406, 94925, 26378, 15823, 73643, 132601, 105169, 30337, 37608, 76190, 93888, 124396, 119091, 18226, 87552, 77190, 62681, 21070, 28774]
[2024-12-02 19:31:00.779916] user = 4822 Cloud 207/568
[2024-12-02 19:31:00.795435] user = 4822 Local 207/568
[2024-12-02 19:31:01.127548] user = 4822 Local+ 207/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:31:04.790116] user = 4822 MPDA- 207/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5908045977011495
Training on augumented user 108946 0/50 current_auc = 0.5908045977011495
User 108946 AUC after training: 0.593103448275862
User 108946 improves AUC. Keeping the model.
Training on augumented user 64033 1/50 current_auc = 0.593103448275862
User 64033 AUC after training: 0.5885057471264368
User 64033 does not improve AUC. Reverting changes.
Training on augumented user 98411 2/50 current_auc = 0.593103448275862
User 98411 AUC after training: 0.5908045977011495
User 98411 does not improve AUC. Reverting changes.
Training on augumented user 26640 3/50 current_auc = 0.593103448275862
User 26640 AUC after training: 0.5908045977011495
User 26640 does not improve AUC. Reverting changes.
Training on augumented user 67363 4/50 current_auc = 0.593103448275862
User 67363 AUC after training: 0.5977011494252873
User 67363 improves AUC. Keeping the model.
Training on augumented user 31486 5/50 current_auc = 0.5977011494252873
User 31486 AUC after training: 0.5908045977011495
User 31486 does not improve AUC. Reverting changes.
Training on augumented user 15345 6/50 current_auc = 0.5977011494252873
User 15345 AUC after training: 0.6
User 15345 improves AUC. Keeping the model.
Training on augumented user 85082 7/50 current_auc = 0.6
User 85082 AUC after training: 0.5977011494252873
User 85082 does not improve AUC. Reverting changes.
Training on augumented user 101923 8/50 current_auc = 0.6
User 101923 AUC after training: 0.5954022988505747
User 101923 does not improve AUC. Reverting changes.
Training on augumented user 99918 9/50 current_auc = 0.6
User 99918 AUC after training: 0.5977011494252874
User 99918 does not improve AUC. Reverting changes.
Training on augumented user 92422 10/50 current_auc = 0.6
User 92422 AUC after training: 0.5885057471264368
User 92422 does not improve AUC. Reverting changes.
Training on augumented user 33064 11/50 current_auc = 0.6
User 33064 AUC after training: 0.5977011494252873
User 33064 does not improve AUC. Reverting changes.
Training on augumented user 95827 12/50 current_auc = 0.6
User 95827 AUC after training: 0.593103448275862
User 95827 does not improve AUC. Reverting changes.
Training on augumented user 80632 13/50 current_auc = 0.6
User 80632 AUC after training: 0.5954022988505747
User 80632 does not improve AUC. Reverting changes.
Training on augumented user 130774 14/50 current_auc = 0.6
User 130774 AUC after training: 0.5954022988505747
User 130774 does not improve AUC. Reverting changes.
Training on augumented user 50502 15/50 current_auc = 0.6
User 50502 AUC after training: 0.6
User 50502 does not improve AUC. Reverting changes.
Training on augumented user 100332 16/50 current_auc = 0.6
User 100332 AUC after training: 0.6
User 100332 does not improve AUC. Reverting changes.
Training on augumented user 55256 17/50 current_auc = 0.6
User 55256 AUC after training: 0.5977011494252873
User 55256 does not improve AUC. Reverting changes.
Training on augumented user 83088 18/50 current_auc = 0.6
User 83088 AUC after training: 0.5954022988505747
User 83088 does not improve AUC. Reverting changes.
Training on augumented user 10887 19/50 current_auc = 0.6
User 10887 AUC after training: 0.5908045977011495
User 10887 does not improve AUC. Reverting changes.
Training on augumented user 43611 20/50 current_auc = 0.6
User 43611 AUC after training: 0.5977011494252874
User 43611 does not improve AUC. Reverting changes.
Training on augumented user 102266 21/50 current_auc = 0.6
User 102266 AUC after training: 0.6
User 102266 does not improve AUC. Reverting changes.
Training on augumented user 101582 22/50 current_auc = 0.6
User 101582 AUC after training: 0.6
User 101582 does not improve AUC. Reverting changes.
Training on augumented user 85410 23/50 current_auc = 0.6
User 85410 AUC after training: 0.5977011494252874
User 85410 does not improve AUC. Reverting changes.
Training on augumented user 73083 24/50 current_auc = 0.6
User 73083 AUC after training: 0.5977011494252873
User 73083 does not improve AUC. Reverting changes.
Training on augumented user 115206 25/50 current_auc = 0.6
User 115206 AUC after training: 0.593103448275862
User 115206 does not improve AUC. Reverting changes.
Training on augumented user 44908 26/50 current_auc = 0.6
User 44908 AUC after training: 0.6
User 44908 does not improve AUC. Reverting changes.
Training on augumented user 75834 27/50 current_auc = 0.6
User 75834 AUC after training: 0.593103448275862
User 75834 does not improve AUC. Reverting changes.
Training on augumented user 21686 28/50 current_auc = 0.6
User 21686 AUC after training: 0.5908045977011495
User 21686 does not improve AUC. Reverting changes.
Training on augumented user 636 29/50 current_auc = 0.6
User 636 AUC after training: 0.5908045977011495
User 636 does not improve AUC. Reverting changes.
Training on augumented user 54459 30/50 current_auc = 0.6
User 54459 AUC after training: 0.593103448275862
User 54459 does not improve AUC. Reverting changes.
Training on augumented user 122406 31/50 current_auc = 0.6
User 122406 AUC after training: 0.6
User 122406 does not improve AUC. Reverting changes.
Training on augumented user 94925 32/50 current_auc = 0.6
User 94925 AUC after training: 0.6
User 94925 does not improve AUC. Reverting changes.
Training on augumented user 26378 33/50 current_auc = 0.6
User 26378 AUC after training: 0.593103448275862
User 26378 does not improve AUC. Reverting changes.
Training on augumented user 15823 34/50 current_auc = 0.6
User 15823 AUC after training: 0.6
User 15823 does not improve AUC. Reverting changes.
Training on augumented user 73643 35/50 current_auc = 0.6
User 73643 AUC after training: 0.6
User 73643 does not improve AUC. Reverting changes.
Training on augumented user 132601 36/50 current_auc = 0.6
User 132601 AUC after training: 0.5977011494252873
User 132601 does not improve AUC. Reverting changes.
Training on augumented user 105169 37/50 current_auc = 0.6
User 105169 AUC after training: 0.5954022988505747
User 105169 does not improve AUC. Reverting changes.
Training on augumented user 30337 38/50 current_auc = 0.6
User 30337 AUC after training: 0.6
User 30337 does not improve AUC. Reverting changes.
Training on augumented user 37608 39/50 current_auc = 0.6
User 37608 AUC after training: 0.5977011494252873
User 37608 does not improve AUC. Reverting changes.
Training on augumented user 76190 40/50 current_auc = 0.6
User 76190 AUC after training: 0.5954022988505747
User 76190 does not improve AUC. Reverting changes.
Training on augumented user 93888 41/50 current_auc = 0.6
User 93888 AUC after training: 0.5977011494252874
User 93888 does not improve AUC. Reverting changes.
Training on augumented user 124396 42/50 current_auc = 0.6
User 124396 AUC after training: 0.6
User 124396 does not improve AUC. Reverting changes.
Training on augumented user 119091 43/50 current_auc = 0.6
User 119091 AUC after training: 0.5885057471264368
User 119091 does not improve AUC. Reverting changes.
Training on augumented user 18226 44/50 current_auc = 0.6
User 18226 AUC after training: 0.5954022988505747
User 18226 does not improve AUC. Reverting changes.
Training on augumented user 87552 45/50 current_auc = 0.6
User 87552 AUC after training: 0.5954022988505747
User 87552 does not improve AUC. Reverting changes.
Training on augumented user 77190 46/50 current_auc = 0.6
User 77190 AUC after training: 0.5977011494252874
User 77190 does not improve AUC. Reverting changes.
Training on augumented user 62681 47/50 current_auc = 0.6
User 62681 AUC after training: 0.5977011494252874
User 62681 does not improve AUC. Reverting changes.
Training on augumented user 21070 48/50 current_auc = 0.6
User 21070 AUC after training: 0.593103448275862
User 21070 does not improve AUC. Reverting changes.
Training on augumented user 28774 49/50 current_auc = 0.6
User 28774 AUC after training: 0.5977011494252874
User 28774 does not improve AUC. Reverting changes.
[2024-12-02 19:31:33.536790] start test user 4857 208/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:31:34.208512] start test user 4857 208/568 recall augumented users by random, augumented_users = [104318, 17289, 51490, 69098, 86713, 47758, 11768, 79051, 110175, 35895, 119985, 5453, 99038, 32268, 13166, 15646, 2515, 70892, 113139, 24219, 92872, 28341, 123962, 83233, 121321, 77662, 11708, 37831, 78665, 103028, 1132, 91628, 27248, 21158, 16407, 113117, 3323, 28773, 122443, 68156, 77077, 80644, 22190, 38626, 30908, 56678, 47410, 11448, 44991, 136183]
[2024-12-02 19:31:34.256702] user = 4857 Cloud 208/568
[2024-12-02 19:31:34.282617] user = 4857 Local 208/568
[2024-12-02 19:31:34.353891] user = 4857 Local+ 208/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:31:37.650495] user = 4857 MPDA- 208/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7429149797570851
Training on augumented user 104318 0/50 current_auc = 0.7429149797570851
User 104318 AUC after training: 0.7429149797570851
User 104318 does not improve AUC. Reverting changes.
Training on augumented user 17289 1/50 current_auc = 0.7429149797570851
User 17289 AUC after training: 0.7429149797570851
User 17289 does not improve AUC. Reverting changes.
Training on augumented user 51490 2/50 current_auc = 0.7429149797570851
User 51490 AUC after training: 0.7449392712550608
User 51490 improves AUC. Keeping the model.
Training on augumented user 69098 3/50 current_auc = 0.7449392712550608
User 69098 AUC after training: 0.7449392712550608
User 69098 does not improve AUC. Reverting changes.
Training on augumented user 86713 4/50 current_auc = 0.7449392712550608
User 86713 AUC after training: 0.7408906882591093
User 86713 does not improve AUC. Reverting changes.
Training on augumented user 47758 5/50 current_auc = 0.7449392712550608
User 47758 AUC after training: 0.7449392712550608
User 47758 does not improve AUC. Reverting changes.
Training on augumented user 11768 6/50 current_auc = 0.7449392712550608
User 11768 AUC after training: 0.7429149797570851
User 11768 does not improve AUC. Reverting changes.
Training on augumented user 79051 7/50 current_auc = 0.7449392712550608
User 79051 AUC after training: 0.7449392712550608
User 79051 does not improve AUC. Reverting changes.
Training on augumented user 110175 8/50 current_auc = 0.7449392712550608
User 110175 AUC after training: 0.7449392712550608
User 110175 does not improve AUC. Reverting changes.
Training on augumented user 35895 9/50 current_auc = 0.7449392712550608
User 35895 AUC after training: 0.7449392712550608
User 35895 does not improve AUC. Reverting changes.
Training on augumented user 119985 10/50 current_auc = 0.7449392712550608
User 119985 AUC after training: 0.7449392712550608
User 119985 does not improve AUC. Reverting changes.
Training on augumented user 5453 11/50 current_auc = 0.7449392712550608
User 5453 AUC after training: 0.7449392712550607
User 5453 does not improve AUC. Reverting changes.
Training on augumented user 99038 12/50 current_auc = 0.7449392712550608
User 99038 AUC after training: 0.7388663967611336
User 99038 does not improve AUC. Reverting changes.
Training on augumented user 32268 13/50 current_auc = 0.7449392712550608
User 32268 AUC after training: 0.7449392712550608
User 32268 does not improve AUC. Reverting changes.
Training on augumented user 13166 14/50 current_auc = 0.7449392712550608
User 13166 AUC after training: 0.7449392712550608
User 13166 does not improve AUC. Reverting changes.
Training on augumented user 15646 15/50 current_auc = 0.7449392712550608
User 15646 AUC after training: 0.7449392712550608
User 15646 does not improve AUC. Reverting changes.
Training on augumented user 2515 16/50 current_auc = 0.7449392712550608
User 2515 AUC after training: 0.7469635627530364
User 2515 improves AUC. Keeping the model.
Training on augumented user 70892 17/50 current_auc = 0.7469635627530364
User 70892 AUC after training: 0.7469635627530364
User 70892 does not improve AUC. Reverting changes.
Training on augumented user 113139 18/50 current_auc = 0.7469635627530364
User 113139 AUC after training: 0.7429149797570851
User 113139 does not improve AUC. Reverting changes.
Training on augumented user 24219 19/50 current_auc = 0.7469635627530364
User 24219 AUC after training: 0.7449392712550607
User 24219 does not improve AUC. Reverting changes.
Training on augumented user 92872 20/50 current_auc = 0.7469635627530364
User 92872 AUC after training: 0.7449392712550608
User 92872 does not improve AUC. Reverting changes.
Training on augumented user 28341 21/50 current_auc = 0.7469635627530364
User 28341 AUC after training: 0.7449392712550608
User 28341 does not improve AUC. Reverting changes.
Training on augumented user 123962 22/50 current_auc = 0.7469635627530364
User 123962 AUC after training: 0.7408906882591093
User 123962 does not improve AUC. Reverting changes.
Training on augumented user 83233 23/50 current_auc = 0.7469635627530364
User 83233 AUC after training: 0.742914979757085
User 83233 does not improve AUC. Reverting changes.
Training on augumented user 121321 24/50 current_auc = 0.7469635627530364
User 121321 AUC after training: 0.7469635627530364
User 121321 does not improve AUC. Reverting changes.
Training on augumented user 77662 25/50 current_auc = 0.7469635627530364
User 77662 AUC after training: 0.7469635627530364
User 77662 does not improve AUC. Reverting changes.
Training on augumented user 11708 26/50 current_auc = 0.7469635627530364
User 11708 AUC after training: 0.7469635627530364
User 11708 does not improve AUC. Reverting changes.
Training on augumented user 37831 27/50 current_auc = 0.7469635627530364
User 37831 AUC after training: 0.7429149797570851
User 37831 does not improve AUC. Reverting changes.
Training on augumented user 78665 28/50 current_auc = 0.7469635627530364
User 78665 AUC after training: 0.7449392712550607
User 78665 does not improve AUC. Reverting changes.
Training on augumented user 103028 29/50 current_auc = 0.7469635627530364
User 103028 AUC after training: 0.7469635627530364
User 103028 does not improve AUC. Reverting changes.
Training on augumented user 1132 30/50 current_auc = 0.7469635627530364
User 1132 AUC after training: 0.7449392712550607
User 1132 does not improve AUC. Reverting changes.
Training on augumented user 91628 31/50 current_auc = 0.7469635627530364
User 91628 AUC after training: 0.7429149797570851
User 91628 does not improve AUC. Reverting changes.
Training on augumented user 27248 32/50 current_auc = 0.7469635627530364
User 27248 AUC after training: 0.7408906882591093
User 27248 does not improve AUC. Reverting changes.
Training on augumented user 21158 33/50 current_auc = 0.7469635627530364
User 21158 AUC after training: 0.7469635627530364
User 21158 does not improve AUC. Reverting changes.
Training on augumented user 16407 34/50 current_auc = 0.7469635627530364
User 16407 AUC after training: 0.7469635627530364
User 16407 does not improve AUC. Reverting changes.
Training on augumented user 113117 35/50 current_auc = 0.7469635627530364
User 113117 AUC after training: 0.7449392712550608
User 113117 does not improve AUC. Reverting changes.
Training on augumented user 3323 36/50 current_auc = 0.7469635627530364
User 3323 AUC after training: 0.7449392712550608
User 3323 does not improve AUC. Reverting changes.
Training on augumented user 28773 37/50 current_auc = 0.7469635627530364
User 28773 AUC after training: 0.7469635627530364
User 28773 does not improve AUC. Reverting changes.
Training on augumented user 122443 38/50 current_auc = 0.7469635627530364
User 122443 AUC after training: 0.7429149797570851
User 122443 does not improve AUC. Reverting changes.
Training on augumented user 68156 39/50 current_auc = 0.7469635627530364
User 68156 AUC after training: 0.7449392712550608
User 68156 does not improve AUC. Reverting changes.
Training on augumented user 77077 40/50 current_auc = 0.7469635627530364
User 77077 AUC after training: 0.742914979757085
User 77077 does not improve AUC. Reverting changes.
Training on augumented user 80644 41/50 current_auc = 0.7469635627530364
User 80644 AUC after training: 0.7449392712550608
User 80644 does not improve AUC. Reverting changes.
Training on augumented user 22190 42/50 current_auc = 0.7469635627530364
User 22190 AUC after training: 0.7449392712550607
User 22190 does not improve AUC. Reverting changes.
Training on augumented user 38626 43/50 current_auc = 0.7469635627530364
User 38626 AUC after training: 0.7449392712550608
User 38626 does not improve AUC. Reverting changes.
Training on augumented user 30908 44/50 current_auc = 0.7469635627530364
User 30908 AUC after training: 0.742914979757085
User 30908 does not improve AUC. Reverting changes.
Training on augumented user 56678 45/50 current_auc = 0.7469635627530364
User 56678 AUC after training: 0.7449392712550607
User 56678 does not improve AUC. Reverting changes.
Training on augumented user 47410 46/50 current_auc = 0.7469635627530364
User 47410 AUC after training: 0.7429149797570851
User 47410 does not improve AUC. Reverting changes.
Training on augumented user 11448 47/50 current_auc = 0.7469635627530364
User 11448 AUC after training: 0.7449392712550607
User 11448 does not improve AUC. Reverting changes.
Training on augumented user 44991 48/50 current_auc = 0.7469635627530364
User 44991 AUC after training: 0.7449392712550608
User 44991 does not improve AUC. Reverting changes.
Training on augumented user 136183 49/50 current_auc = 0.7469635627530364
User 136183 AUC after training: 0.7449392712550608
User 136183 does not improve AUC. Reverting changes.
[2024-12-02 19:32:05.631280] start test user 4868 209/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:32:06.076764] start test user 4868 209/568 recall augumented users by random, augumented_users = [46751, 106368, 120490, 106636, 59588, 37463, 134515, 120797, 91269, 49707, 19369, 110464, 101153, 17366, 70742, 58072, 130989, 103976, 88648, 76169, 116251, 49267, 104842, 54215, 124790, 61125, 31479, 96288, 94302, 59265, 63074, 123935, 29531, 90952, 13834, 29097, 92472, 95919, 55992, 42884, 66055, 86213, 26113, 133847, 106820, 74823, 51626, 49037, 70429, 68171]
[2024-12-02 19:32:06.092676] user = 4868 Cloud 209/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:32:06.099172] user = 4868 Local 209/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:32:06.122987] user = 4868 Local+ 209/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:32:08.050261] user = 4868 MPDA- 209/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 46751 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46751 AUC after training: 0.5
User 46751 does not improve AUC. Reverting changes.
Training on augumented user 106368 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106368 AUC after training: 0.5
User 106368 does not improve AUC. Reverting changes.
Training on augumented user 120490 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120490 AUC after training: 0.5
User 120490 does not improve AUC. Reverting changes.
Training on augumented user 106636 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106636 AUC after training: 0.5
User 106636 does not improve AUC. Reverting changes.
Training on augumented user 59588 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59588 AUC after training: 0.5
User 59588 does not improve AUC. Reverting changes.
Training on augumented user 37463 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37463 AUC after training: 0.5
User 37463 does not improve AUC. Reverting changes.
Training on augumented user 134515 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134515 AUC after training: 0.5
User 134515 does not improve AUC. Reverting changes.
Training on augumented user 120797 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120797 AUC after training: 0.5
User 120797 does not improve AUC. Reverting changes.
Training on augumented user 91269 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91269 AUC after training: 0.5
User 91269 does not improve AUC. Reverting changes.
Training on augumented user 49707 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49707 AUC after training: 0.5
User 49707 does not improve AUC. Reverting changes.
Training on augumented user 19369 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19369 AUC after training: 0.5
User 19369 does not improve AUC. Reverting changes.
Training on augumented user 110464 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110464 AUC after training: 0.5
User 110464 does not improve AUC. Reverting changes.
Training on augumented user 101153 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101153 AUC after training: 0.5
User 101153 does not improve AUC. Reverting changes.
Training on augumented user 17366 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17366 AUC after training: 0.5
User 17366 does not improve AUC. Reverting changes.
Training on augumented user 70742 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70742 AUC after training: 0.5
User 70742 does not improve AUC. Reverting changes.
Training on augumented user 58072 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58072 AUC after training: 0.5
User 58072 does not improve AUC. Reverting changes.
Training on augumented user 130989 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130989 AUC after training: 0.5
User 130989 does not improve AUC. Reverting changes.
Training on augumented user 103976 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103976 AUC after training: 0.5
User 103976 does not improve AUC. Reverting changes.
Training on augumented user 88648 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88648 AUC after training: 0.5
User 88648 does not improve AUC. Reverting changes.
Training on augumented user 76169 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76169 AUC after training: 0.5
User 76169 does not improve AUC. Reverting changes.
Training on augumented user 116251 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116251 AUC after training: 0.5
User 116251 does not improve AUC. Reverting changes.
Training on augumented user 49267 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49267 AUC after training: 0.5
User 49267 does not improve AUC. Reverting changes.
Training on augumented user 104842 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104842 AUC after training: 0.5
User 104842 does not improve AUC. Reverting changes.
Training on augumented user 54215 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54215 AUC after training: 0.5
User 54215 does not improve AUC. Reverting changes.
Training on augumented user 124790 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124790 AUC after training: 0.5
User 124790 does not improve AUC. Reverting changes.
Training on augumented user 61125 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61125 AUC after training: 0.5
User 61125 does not improve AUC. Reverting changes.
Training on augumented user 31479 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31479 AUC after training: 0.5
User 31479 does not improve AUC. Reverting changes.
Training on augumented user 96288 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96288 AUC after training: 0.5
User 96288 does not improve AUC. Reverting changes.
Training on augumented user 94302 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94302 AUC after training: 0.5
User 94302 does not improve AUC. Reverting changes.
Training on augumented user 59265 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59265 AUC after training: 0.5
User 59265 does not improve AUC. Reverting changes.
Training on augumented user 63074 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63074 AUC after training: 0.5
User 63074 does not improve AUC. Reverting changes.
Training on augumented user 123935 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123935 AUC after training: 0.5
User 123935 does not improve AUC. Reverting changes.
Training on augumented user 29531 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29531 AUC after training: 0.5
User 29531 does not improve AUC. Reverting changes.
Training on augumented user 90952 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90952 AUC after training: 0.5
User 90952 does not improve AUC. Reverting changes.
Training on augumented user 13834 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13834 AUC after training: 0.5
User 13834 does not improve AUC. Reverting changes.
Training on augumented user 29097 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29097 AUC after training: 0.5
User 29097 does not improve AUC. Reverting changes.
Training on augumented user 92472 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92472 AUC after training: 0.5
User 92472 does not improve AUC. Reverting changes.
Training on augumented user 95919 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95919 AUC after training: 0.5
User 95919 does not improve AUC. Reverting changes.
Training on augumented user 55992 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55992 AUC after training: 0.5
User 55992 does not improve AUC. Reverting changes.
Training on augumented user 42884 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42884 AUC after training: 0.5
User 42884 does not improve AUC. Reverting changes.
Training on augumented user 66055 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66055 AUC after training: 0.5
User 66055 does not improve AUC. Reverting changes.
Training on augumented user 86213 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86213 AUC after training: 0.5
User 86213 does not improve AUC. Reverting changes.
Training on augumented user 26113 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26113 AUC after training: 0.5
User 26113 does not improve AUC. Reverting changes.
Training on augumented user 133847 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133847 AUC after training: 0.5
User 133847 does not improve AUC. Reverting changes.
Training on augumented user 106820 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106820 AUC after training: 0.5
User 106820 does not improve AUC. Reverting changes.
Training on augumented user 74823 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74823 AUC after training: 0.5
User 74823 does not improve AUC. Reverting changes.
Training on augumented user 51626 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51626 AUC after training: 0.5
User 51626 does not improve AUC. Reverting changes.
Training on augumented user 49037 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49037 AUC after training: 0.5
User 49037 does not improve AUC. Reverting changes.
Training on augumented user 70429 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70429 AUC after training: 0.5
User 70429 does not improve AUC. Reverting changes.
Training on augumented user 68171 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68171 AUC after training: 0.5
User 68171 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:32:39.964134] start test user 4871 210/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:32:40.727994] start test user 4871 210/568 recall augumented users by random, augumented_users = [118197, 119998, 49568, 78024, 22078, 38493, 106822, 109839, 89940, 91554, 114589, 40139, 14588, 43111, 43172, 97243, 37308, 125564, 84021, 134686, 94159, 123209, 83518, 121237, 14758, 135157, 102499, 71976, 83329, 3238, 64414, 42314, 115794, 45413, 107900, 100480, 38980, 110042, 82928, 65733, 28092, 87715, 41234, 101118, 131042, 122241, 13020, 127214, 10010, 25933]
[2024-12-02 19:32:40.745470] user = 4871 Cloud 210/568
[2024-12-02 19:32:40.758308] user = 4871 Local 210/568
[2024-12-02 19:32:40.826233] user = 4871 Local+ 210/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:32:43.280037] user = 4871 MPDA- 210/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 118197 0/50 current_auc = 0.5
User 118197 AUC after training: 0.5
User 118197 does not improve AUC. Reverting changes.
Training on augumented user 119998 1/50 current_auc = 0.5
User 119998 AUC after training: 0.5
User 119998 does not improve AUC. Reverting changes.
Training on augumented user 49568 2/50 current_auc = 0.5
User 49568 AUC after training: 0.5
User 49568 does not improve AUC. Reverting changes.
Training on augumented user 78024 3/50 current_auc = 0.5
User 78024 AUC after training: 0.5
User 78024 does not improve AUC. Reverting changes.
Training on augumented user 22078 4/50 current_auc = 0.5
User 22078 AUC after training: 0.5
User 22078 does not improve AUC. Reverting changes.
Training on augumented user 38493 5/50 current_auc = 0.5
User 38493 AUC after training: 0.5
User 38493 does not improve AUC. Reverting changes.
Training on augumented user 106822 6/50 current_auc = 0.5
User 106822 AUC after training: 0.5
User 106822 does not improve AUC. Reverting changes.
Training on augumented user 109839 7/50 current_auc = 0.5
User 109839 AUC after training: 0.5
User 109839 does not improve AUC. Reverting changes.
Training on augumented user 89940 8/50 current_auc = 0.5
User 89940 AUC after training: 0.5
User 89940 does not improve AUC. Reverting changes.
Training on augumented user 91554 9/50 current_auc = 0.5
User 91554 AUC after training: 0.5
User 91554 does not improve AUC. Reverting changes.
Training on augumented user 114589 10/50 current_auc = 0.5
User 114589 AUC after training: 0.5
User 114589 does not improve AUC. Reverting changes.
Training on augumented user 40139 11/50 current_auc = 0.5
User 40139 AUC after training: 0.5
User 40139 does not improve AUC. Reverting changes.
Training on augumented user 14588 12/50 current_auc = 0.5
User 14588 AUC after training: 0.5
User 14588 does not improve AUC. Reverting changes.
Training on augumented user 43111 13/50 current_auc = 0.5
User 43111 AUC after training: 0.5
User 43111 does not improve AUC. Reverting changes.
Training on augumented user 43172 14/50 current_auc = 0.5
User 43172 AUC after training: 0.5
User 43172 does not improve AUC. Reverting changes.
Training on augumented user 97243 15/50 current_auc = 0.5
User 97243 AUC after training: 0.5
User 97243 does not improve AUC. Reverting changes.
Training on augumented user 37308 16/50 current_auc = 0.5
User 37308 AUC after training: 0.5
User 37308 does not improve AUC. Reverting changes.
Training on augumented user 125564 17/50 current_auc = 0.5
User 125564 AUC after training: 0.5
User 125564 does not improve AUC. Reverting changes.
Training on augumented user 84021 18/50 current_auc = 0.5
User 84021 AUC after training: 0.5
User 84021 does not improve AUC. Reverting changes.
Training on augumented user 134686 19/50 current_auc = 0.5
User 134686 AUC after training: 0.5
User 134686 does not improve AUC. Reverting changes.
Training on augumented user 94159 20/50 current_auc = 0.5
User 94159 AUC after training: 0.5
User 94159 does not improve AUC. Reverting changes.
Training on augumented user 123209 21/50 current_auc = 0.5
User 123209 AUC after training: 0.5
User 123209 does not improve AUC. Reverting changes.
Training on augumented user 83518 22/50 current_auc = 0.5
User 83518 AUC after training: 0.5
User 83518 does not improve AUC. Reverting changes.
Training on augumented user 121237 23/50 current_auc = 0.5
User 121237 AUC after training: 0.5
User 121237 does not improve AUC. Reverting changes.
Training on augumented user 14758 24/50 current_auc = 0.5
User 14758 AUC after training: 0.5
User 14758 does not improve AUC. Reverting changes.
Training on augumented user 135157 25/50 current_auc = 0.5
User 135157 AUC after training: 0.5
User 135157 does not improve AUC. Reverting changes.
Training on augumented user 102499 26/50 current_auc = 0.5
User 102499 AUC after training: 0.5
User 102499 does not improve AUC. Reverting changes.
Training on augumented user 71976 27/50 current_auc = 0.5
User 71976 AUC after training: 0.5
User 71976 does not improve AUC. Reverting changes.
Training on augumented user 83329 28/50 current_auc = 0.5
User 83329 AUC after training: 0.5
User 83329 does not improve AUC. Reverting changes.
Training on augumented user 3238 29/50 current_auc = 0.5
User 3238 AUC after training: 0.5
User 3238 does not improve AUC. Reverting changes.
Training on augumented user 64414 30/50 current_auc = 0.5
User 64414 AUC after training: 0.5
User 64414 does not improve AUC. Reverting changes.
Training on augumented user 42314 31/50 current_auc = 0.5
User 42314 AUC after training: 0.5
User 42314 does not improve AUC. Reverting changes.
Training on augumented user 115794 32/50 current_auc = 0.5
User 115794 AUC after training: 0.5
User 115794 does not improve AUC. Reverting changes.
Training on augumented user 45413 33/50 current_auc = 0.5
User 45413 AUC after training: 0.5
User 45413 does not improve AUC. Reverting changes.
Training on augumented user 107900 34/50 current_auc = 0.5
User 107900 AUC after training: 0.5
User 107900 does not improve AUC. Reverting changes.
Training on augumented user 100480 35/50 current_auc = 0.5
User 100480 AUC after training: 0.5
User 100480 does not improve AUC. Reverting changes.
Training on augumented user 38980 36/50 current_auc = 0.5
User 38980 AUC after training: 0.5
User 38980 does not improve AUC. Reverting changes.
Training on augumented user 110042 37/50 current_auc = 0.5
User 110042 AUC after training: 0.5
User 110042 does not improve AUC. Reverting changes.
Training on augumented user 82928 38/50 current_auc = 0.5
User 82928 AUC after training: 0.5
User 82928 does not improve AUC. Reverting changes.
Training on augumented user 65733 39/50 current_auc = 0.5
User 65733 AUC after training: 0.5
User 65733 does not improve AUC. Reverting changes.
Training on augumented user 28092 40/50 current_auc = 0.5
User 28092 AUC after training: 0.5
User 28092 does not improve AUC. Reverting changes.
Training on augumented user 87715 41/50 current_auc = 0.5
User 87715 AUC after training: 0.5
User 87715 does not improve AUC. Reverting changes.
Training on augumented user 41234 42/50 current_auc = 0.5
User 41234 AUC after training: 0.5
User 41234 does not improve AUC. Reverting changes.
Training on augumented user 101118 43/50 current_auc = 0.5
User 101118 AUC after training: 0.5
User 101118 does not improve AUC. Reverting changes.
Training on augumented user 131042 44/50 current_auc = 0.5
User 131042 AUC after training: 0.5
User 131042 does not improve AUC. Reverting changes.
Training on augumented user 122241 45/50 current_auc = 0.5
User 122241 AUC after training: 0.5
User 122241 does not improve AUC. Reverting changes.
Training on augumented user 13020 46/50 current_auc = 0.5
User 13020 AUC after training: 0.5
User 13020 does not improve AUC. Reverting changes.
Training on augumented user 127214 47/50 current_auc = 0.5
User 127214 AUC after training: 0.5
User 127214 does not improve AUC. Reverting changes.
Training on augumented user 10010 48/50 current_auc = 0.5
User 10010 AUC after training: 0.5
User 10010 does not improve AUC. Reverting changes.
Training on augumented user 25933 49/50 current_auc = 0.5
User 25933 AUC after training: 0.5
User 25933 does not improve AUC. Reverting changes.
[2024-12-02 19:33:11.853643] start test user 4896 211/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:33:12.377423] start test user 4896 211/568 recall augumented users by random, augumented_users = [18047, 71576, 28627, 6278, 21575, 1287, 135244, 36169, 54604, 61257, 126748, 44233, 80675, 30643, 93957, 71333, 99736, 39225, 111844, 10707, 3725, 123638, 7949, 62696, 78974, 26443, 25162, 32104, 75483, 93542, 123096, 108788, 60686, 97079, 93520, 125171, 56113, 59846, 64119, 124629, 32895, 63956, 108681, 65217, 30700, 33682, 83656, 132691, 129806, 83058]
[2024-12-02 19:33:12.392984] user = 4896 Cloud 211/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:33:12.399054] user = 4896 Local 211/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:33:12.433026] user = 4896 Local+ 211/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:33:14.899837] user = 4896 MPDA- 211/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 18047 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18047 AUC after training: 0.5
User 18047 does not improve AUC. Reverting changes.
Training on augumented user 71576 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71576 AUC after training: 0.5
User 71576 does not improve AUC. Reverting changes.
Training on augumented user 28627 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28627 AUC after training: 0.5
User 28627 does not improve AUC. Reverting changes.
Training on augumented user 6278 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6278 AUC after training: 0.5
User 6278 does not improve AUC. Reverting changes.
Training on augumented user 21575 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21575 AUC after training: 0.5
User 21575 does not improve AUC. Reverting changes.
Training on augumented user 1287 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1287 AUC after training: 0.5
User 1287 does not improve AUC. Reverting changes.
Training on augumented user 135244 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135244 AUC after training: 0.5
User 135244 does not improve AUC. Reverting changes.
Training on augumented user 36169 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36169 AUC after training: 0.5
User 36169 does not improve AUC. Reverting changes.
Training on augumented user 54604 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54604 AUC after training: 0.5
User 54604 does not improve AUC. Reverting changes.
Training on augumented user 61257 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61257 AUC after training: 0.5
User 61257 does not improve AUC. Reverting changes.
Training on augumented user 126748 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126748 AUC after training: 0.5
User 126748 does not improve AUC. Reverting changes.
Training on augumented user 44233 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44233 AUC after training: 0.5
User 44233 does not improve AUC. Reverting changes.
Training on augumented user 80675 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80675 AUC after training: 0.5
User 80675 does not improve AUC. Reverting changes.
Training on augumented user 30643 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30643 AUC after training: 0.5
User 30643 does not improve AUC. Reverting changes.
Training on augumented user 93957 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93957 AUC after training: 0.5
User 93957 does not improve AUC. Reverting changes.
Training on augumented user 71333 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71333 AUC after training: 0.5
User 71333 does not improve AUC. Reverting changes.
Training on augumented user 99736 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99736 AUC after training: 0.5
User 99736 does not improve AUC. Reverting changes.
Training on augumented user 39225 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39225 AUC after training: 0.5
User 39225 does not improve AUC. Reverting changes.
Training on augumented user 111844 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111844 AUC after training: 0.5
User 111844 does not improve AUC. Reverting changes.
Training on augumented user 10707 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10707 AUC after training: 0.5
User 10707 does not improve AUC. Reverting changes.
Training on augumented user 3725 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3725 AUC after training: 0.5
User 3725 does not improve AUC. Reverting changes.
Training on augumented user 123638 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123638 AUC after training: 0.5
User 123638 does not improve AUC. Reverting changes.
Training on augumented user 7949 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7949 AUC after training: 0.5
User 7949 does not improve AUC. Reverting changes.
Training on augumented user 62696 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62696 AUC after training: 0.5
User 62696 does not improve AUC. Reverting changes.
Training on augumented user 78974 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78974 AUC after training: 0.5
User 78974 does not improve AUC. Reverting changes.
Training on augumented user 26443 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26443 AUC after training: 0.5
User 26443 does not improve AUC. Reverting changes.
Training on augumented user 25162 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25162 AUC after training: 0.5
User 25162 does not improve AUC. Reverting changes.
Training on augumented user 32104 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32104 AUC after training: 0.5
User 32104 does not improve AUC. Reverting changes.
Training on augumented user 75483 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75483 AUC after training: 0.5
User 75483 does not improve AUC. Reverting changes.
Training on augumented user 93542 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93542 AUC after training: 0.5
User 93542 does not improve AUC. Reverting changes.
Training on augumented user 123096 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123096 AUC after training: 0.5
User 123096 does not improve AUC. Reverting changes.
Training on augumented user 108788 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108788 AUC after training: 0.5
User 108788 does not improve AUC. Reverting changes.
Training on augumented user 60686 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60686 AUC after training: 0.5
User 60686 does not improve AUC. Reverting changes.
Training on augumented user 97079 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97079 AUC after training: 0.5
User 97079 does not improve AUC. Reverting changes.
Training on augumented user 93520 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93520 AUC after training: 0.5
User 93520 does not improve AUC. Reverting changes.
Training on augumented user 125171 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125171 AUC after training: 0.5
User 125171 does not improve AUC. Reverting changes.
Training on augumented user 56113 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56113 AUC after training: 0.5
User 56113 does not improve AUC. Reverting changes.
Training on augumented user 59846 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59846 AUC after training: 0.5
User 59846 does not improve AUC. Reverting changes.
Training on augumented user 64119 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64119 AUC after training: 0.5
User 64119 does not improve AUC. Reverting changes.
Training on augumented user 124629 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124629 AUC after training: 0.5
User 124629 does not improve AUC. Reverting changes.
Training on augumented user 32895 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32895 AUC after training: 0.5
User 32895 does not improve AUC. Reverting changes.
Training on augumented user 63956 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63956 AUC after training: 0.5
User 63956 does not improve AUC. Reverting changes.
Training on augumented user 108681 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108681 AUC after training: 0.5
User 108681 does not improve AUC. Reverting changes.
Training on augumented user 65217 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65217 AUC after training: 0.5
User 65217 does not improve AUC. Reverting changes.
Training on augumented user 30700 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30700 AUC after training: 0.5
User 30700 does not improve AUC. Reverting changes.
Training on augumented user 33682 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33682 AUC after training: 0.5
User 33682 does not improve AUC. Reverting changes.
Training on augumented user 83656 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83656 AUC after training: 0.5
User 83656 does not improve AUC. Reverting changes.
Training on augumented user 132691 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132691 AUC after training: 0.5
User 132691 does not improve AUC. Reverting changes.
Training on augumented user 129806 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129806 AUC after training: 0.5
User 129806 does not improve AUC. Reverting changes.
Training on augumented user 83058 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83058 AUC after training: 0.5
User 83058 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:33:40.327089] start test user 4931 212/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:33:40.945952] start test user 4931 212/568 recall augumented users by random, augumented_users = [3831, 64220, 29430, 58236, 135112, 116873, 132127, 72760, 42574, 25647, 44653, 264, 117614, 49152, 79517, 106109, 422, 102840, 78849, 125808, 66400, 13621, 93383, 46135, 105051, 19193, 31051, 61267, 30065, 75636, 22982, 15274, 70507, 689, 75906, 52308, 56485, 126457, 78210, 103969, 126726, 5816, 92460, 6590, 104256, 33267, 131851, 95531, 1261, 104038]
[2024-12-02 19:33:40.974345] user = 4931 Cloud 212/568
[2024-12-02 19:33:40.987239] user = 4931 Local 212/568
[2024-12-02 19:33:41.111994] user = 4931 Local+ 212/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:33:42.444103] user = 4931 MPDA- 212/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.829004329004329
Training on augumented user 3831 0/50 current_auc = 0.829004329004329
User 3831 AUC after training: 0.829004329004329
User 3831 does not improve AUC. Reverting changes.
Training on augumented user 64220 1/50 current_auc = 0.829004329004329
User 64220 AUC after training: 0.8311688311688312
User 64220 improves AUC. Keeping the model.
Training on augumented user 29430 2/50 current_auc = 0.8311688311688312
User 29430 AUC after training: 0.8311688311688312
User 29430 does not improve AUC. Reverting changes.
Training on augumented user 58236 3/50 current_auc = 0.8311688311688312
User 58236 AUC after training: 0.8311688311688312
User 58236 does not improve AUC. Reverting changes.
Training on augumented user 135112 4/50 current_auc = 0.8311688311688312
User 135112 AUC after training: 0.8311688311688312
User 135112 does not improve AUC. Reverting changes.
Training on augumented user 116873 5/50 current_auc = 0.8311688311688312
User 116873 AUC after training: 0.8311688311688312
User 116873 does not improve AUC. Reverting changes.
Training on augumented user 132127 6/50 current_auc = 0.8311688311688312
User 132127 AUC after training: 0.8311688311688312
User 132127 does not improve AUC. Reverting changes.
Training on augumented user 72760 7/50 current_auc = 0.8311688311688312
User 72760 AUC after training: 0.829004329004329
User 72760 does not improve AUC. Reverting changes.
Training on augumented user 42574 8/50 current_auc = 0.8311688311688312
User 42574 AUC after training: 0.8311688311688312
User 42574 does not improve AUC. Reverting changes.
Training on augumented user 25647 9/50 current_auc = 0.8311688311688312
User 25647 AUC after training: 0.8311688311688312
User 25647 does not improve AUC. Reverting changes.
Training on augumented user 44653 10/50 current_auc = 0.8311688311688312
User 44653 AUC after training: 0.8311688311688312
User 44653 does not improve AUC. Reverting changes.
Training on augumented user 264 11/50 current_auc = 0.8311688311688312
User 264 AUC after training: 0.8333333333333333
User 264 improves AUC. Keeping the model.
Training on augumented user 117614 12/50 current_auc = 0.8333333333333333
User 117614 AUC after training: 0.8333333333333333
User 117614 does not improve AUC. Reverting changes.
Training on augumented user 49152 13/50 current_auc = 0.8333333333333333
User 49152 AUC after training: 0.8354978354978355
User 49152 improves AUC. Keeping the model.
Training on augumented user 79517 14/50 current_auc = 0.8354978354978355
User 79517 AUC after training: 0.8354978354978355
User 79517 does not improve AUC. Reverting changes.
Training on augumented user 106109 15/50 current_auc = 0.8354978354978355
User 106109 AUC after training: 0.8354978354978355
User 106109 does not improve AUC. Reverting changes.
Training on augumented user 422 16/50 current_auc = 0.8354978354978355
User 422 AUC after training: 0.8311688311688312
User 422 does not improve AUC. Reverting changes.
Training on augumented user 102840 17/50 current_auc = 0.8354978354978355
User 102840 AUC after training: 0.8354978354978355
User 102840 does not improve AUC. Reverting changes.
Training on augumented user 78849 18/50 current_auc = 0.8354978354978355
User 78849 AUC after training: 0.8333333333333333
User 78849 does not improve AUC. Reverting changes.
Training on augumented user 125808 19/50 current_auc = 0.8354978354978355
User 125808 AUC after training: 0.8354978354978355
User 125808 does not improve AUC. Reverting changes.
Training on augumented user 66400 20/50 current_auc = 0.8354978354978355
User 66400 AUC after training: 0.8333333333333333
User 66400 does not improve AUC. Reverting changes.
Training on augumented user 13621 21/50 current_auc = 0.8354978354978355
User 13621 AUC after training: 0.8354978354978355
User 13621 does not improve AUC. Reverting changes.
Training on augumented user 93383 22/50 current_auc = 0.8354978354978355
User 93383 AUC after training: 0.8354978354978355
User 93383 does not improve AUC. Reverting changes.
Training on augumented user 46135 23/50 current_auc = 0.8354978354978355
User 46135 AUC after training: 0.8333333333333333
User 46135 does not improve AUC. Reverting changes.
Training on augumented user 105051 24/50 current_auc = 0.8354978354978355
User 105051 AUC after training: 0.8333333333333333
User 105051 does not improve AUC. Reverting changes.
Training on augumented user 19193 25/50 current_auc = 0.8354978354978355
User 19193 AUC after training: 0.8354978354978355
User 19193 does not improve AUC. Reverting changes.
Training on augumented user 31051 26/50 current_auc = 0.8354978354978355
User 31051 AUC after training: 0.8354978354978355
User 31051 does not improve AUC. Reverting changes.
Training on augumented user 61267 27/50 current_auc = 0.8354978354978355
User 61267 AUC after training: 0.8354978354978355
User 61267 does not improve AUC. Reverting changes.
Training on augumented user 30065 28/50 current_auc = 0.8354978354978355
User 30065 AUC after training: 0.8376623376623377
User 30065 improves AUC. Keeping the model.
Training on augumented user 75636 29/50 current_auc = 0.8376623376623377
User 75636 AUC after training: 0.8311688311688312
User 75636 does not improve AUC. Reverting changes.
Training on augumented user 22982 30/50 current_auc = 0.8376623376623377
User 22982 AUC after training: 0.8376623376623377
User 22982 does not improve AUC. Reverting changes.
Training on augumented user 15274 31/50 current_auc = 0.8376623376623377
User 15274 AUC after training: 0.8333333333333334
User 15274 does not improve AUC. Reverting changes.
Training on augumented user 70507 32/50 current_auc = 0.8376623376623377
User 70507 AUC after training: 0.8333333333333334
User 70507 does not improve AUC. Reverting changes.
Training on augumented user 689 33/50 current_auc = 0.8376623376623377
User 689 AUC after training: 0.829004329004329
User 689 does not improve AUC. Reverting changes.
Training on augumented user 75906 34/50 current_auc = 0.8376623376623377
User 75906 AUC after training: 0.8311688311688312
User 75906 does not improve AUC. Reverting changes.
Training on augumented user 52308 35/50 current_auc = 0.8376623376623377
User 52308 AUC after training: 0.8354978354978355
User 52308 does not improve AUC. Reverting changes.
Training on augumented user 56485 36/50 current_auc = 0.8376623376623377
User 56485 AUC after training: 0.8333333333333334
User 56485 does not improve AUC. Reverting changes.
Training on augumented user 126457 37/50 current_auc = 0.8376623376623377
User 126457 AUC after training: 0.8376623376623377
User 126457 does not improve AUC. Reverting changes.
Training on augumented user 78210 38/50 current_auc = 0.8376623376623377
User 78210 AUC after training: 0.8354978354978355
User 78210 does not improve AUC. Reverting changes.
Training on augumented user 103969 39/50 current_auc = 0.8376623376623377
User 103969 AUC after training: 0.8333333333333334
User 103969 does not improve AUC. Reverting changes.
Training on augumented user 126726 40/50 current_auc = 0.8376623376623377
User 126726 AUC after training: 0.8311688311688312
User 126726 does not improve AUC. Reverting changes.
Training on augumented user 5816 41/50 current_auc = 0.8376623376623377
User 5816 AUC after training: 0.8376623376623377
User 5816 does not improve AUC. Reverting changes.
Training on augumented user 92460 42/50 current_auc = 0.8376623376623377
User 92460 AUC after training: 0.8354978354978355
User 92460 does not improve AUC. Reverting changes.
Training on augumented user 6590 43/50 current_auc = 0.8376623376623377
User 6590 AUC after training: 0.8376623376623377
User 6590 does not improve AUC. Reverting changes.
Training on augumented user 104256 44/50 current_auc = 0.8376623376623377
User 104256 AUC after training: 0.8354978354978355
User 104256 does not improve AUC. Reverting changes.
Training on augumented user 33267 45/50 current_auc = 0.8376623376623377
User 33267 AUC after training: 0.8333333333333334
User 33267 does not improve AUC. Reverting changes.
Training on augumented user 131851 46/50 current_auc = 0.8376623376623377
User 131851 AUC after training: 0.8376623376623377
User 131851 does not improve AUC. Reverting changes.
Training on augumented user 95531 47/50 current_auc = 0.8376623376623377
User 95531 AUC after training: 0.8354978354978355
User 95531 does not improve AUC. Reverting changes.
Training on augumented user 1261 48/50 current_auc = 0.8376623376623377
User 1261 AUC after training: 0.8354978354978355
User 1261 does not improve AUC. Reverting changes.
Training on augumented user 104038 49/50 current_auc = 0.8376623376623377
User 104038 AUC after training: 0.8354978354978355
User 104038 does not improve AUC. Reverting changes.
[2024-12-02 19:34:12.509965] start test user 4951 213/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:34:13.370949] start test user 4951 213/568 recall augumented users by random, augumented_users = [18317, 61751, 64582, 24888, 32755, 121250, 43284, 56900, 49347, 72522, 856, 135996, 87150, 133480, 2884, 28839, 76558, 21303, 37351, 91577, 99843, 7043, 128841, 2625, 134034, 59961, 132263, 120304, 84190, 12828, 62966, 12264, 16942, 76676, 21110, 118474, 15935, 35327, 24010, 81294, 70574, 39197, 132184, 89790, 55863, 90325, 75945, 46661, 100633, 53308]
[2024-12-02 19:34:13.387657] user = 4951 Cloud 213/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:34:13.394312] user = 4951 Local 213/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:34:13.466808] user = 4951 Local+ 213/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:34:16.198259] user = 4951 MPDA- 213/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 18317 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18317 AUC after training: 0.5
User 18317 does not improve AUC. Reverting changes.
Training on augumented user 61751 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61751 AUC after training: 0.5
User 61751 does not improve AUC. Reverting changes.
Training on augumented user 64582 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64582 AUC after training: 0.5
User 64582 does not improve AUC. Reverting changes.
Training on augumented user 24888 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24888 AUC after training: 0.5
User 24888 does not improve AUC. Reverting changes.
Training on augumented user 32755 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32755 AUC after training: 0.5
User 32755 does not improve AUC. Reverting changes.
Training on augumented user 121250 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121250 AUC after training: 0.5
User 121250 does not improve AUC. Reverting changes.
Training on augumented user 43284 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43284 AUC after training: 0.5
User 43284 does not improve AUC. Reverting changes.
Training on augumented user 56900 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56900 AUC after training: 0.5
User 56900 does not improve AUC. Reverting changes.
Training on augumented user 49347 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49347 AUC after training: 0.5
User 49347 does not improve AUC. Reverting changes.
Training on augumented user 72522 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72522 AUC after training: 0.5
User 72522 does not improve AUC. Reverting changes.
Training on augumented user 856 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 856 AUC after training: 0.5
User 856 does not improve AUC. Reverting changes.
Training on augumented user 135996 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135996 AUC after training: 0.5
User 135996 does not improve AUC. Reverting changes.
Training on augumented user 87150 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87150 AUC after training: 0.5
User 87150 does not improve AUC. Reverting changes.
Training on augumented user 133480 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133480 AUC after training: 0.5
User 133480 does not improve AUC. Reverting changes.
Training on augumented user 2884 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2884 AUC after training: 0.5
User 2884 does not improve AUC. Reverting changes.
Training on augumented user 28839 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28839 AUC after training: 0.5
User 28839 does not improve AUC. Reverting changes.
Training on augumented user 76558 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76558 AUC after training: 0.5
User 76558 does not improve AUC. Reverting changes.
Training on augumented user 21303 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21303 AUC after training: 0.5
User 21303 does not improve AUC. Reverting changes.
Training on augumented user 37351 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37351 AUC after training: 0.5
User 37351 does not improve AUC. Reverting changes.
Training on augumented user 91577 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91577 AUC after training: 0.5
User 91577 does not improve AUC. Reverting changes.
Training on augumented user 99843 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99843 AUC after training: 0.5
User 99843 does not improve AUC. Reverting changes.
Training on augumented user 7043 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7043 AUC after training: 0.5
User 7043 does not improve AUC. Reverting changes.
Training on augumented user 128841 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128841 AUC after training: 0.5
User 128841 does not improve AUC. Reverting changes.
Training on augumented user 2625 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2625 AUC after training: 0.5
User 2625 does not improve AUC. Reverting changes.
Training on augumented user 134034 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134034 AUC after training: 0.5
User 134034 does not improve AUC. Reverting changes.
Training on augumented user 59961 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59961 AUC after training: 0.5
User 59961 does not improve AUC. Reverting changes.
Training on augumented user 132263 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132263 AUC after training: 0.5
User 132263 does not improve AUC. Reverting changes.
Training on augumented user 120304 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120304 AUC after training: 0.5
User 120304 does not improve AUC. Reverting changes.
Training on augumented user 84190 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84190 AUC after training: 0.5
User 84190 does not improve AUC. Reverting changes.
Training on augumented user 12828 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12828 AUC after training: 0.5
User 12828 does not improve AUC. Reverting changes.
Training on augumented user 62966 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62966 AUC after training: 0.5
User 62966 does not improve AUC. Reverting changes.
Training on augumented user 12264 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12264 AUC after training: 0.5
User 12264 does not improve AUC. Reverting changes.
Training on augumented user 16942 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16942 AUC after training: 0.5
User 16942 does not improve AUC. Reverting changes.
Training on augumented user 76676 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76676 AUC after training: 0.5
User 76676 does not improve AUC. Reverting changes.
Training on augumented user 21110 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21110 AUC after training: 0.5
User 21110 does not improve AUC. Reverting changes.
Training on augumented user 118474 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118474 AUC after training: 0.5
User 118474 does not improve AUC. Reverting changes.
Training on augumented user 15935 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15935 AUC after training: 0.5
User 15935 does not improve AUC. Reverting changes.
Training on augumented user 35327 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35327 AUC after training: 0.5
User 35327 does not improve AUC. Reverting changes.
Training on augumented user 24010 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24010 AUC after training: 0.5
User 24010 does not improve AUC. Reverting changes.
Training on augumented user 81294 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81294 AUC after training: 0.5
User 81294 does not improve AUC. Reverting changes.
Training on augumented user 70574 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70574 AUC after training: 0.5
User 70574 does not improve AUC. Reverting changes.
Training on augumented user 39197 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39197 AUC after training: 0.5
User 39197 does not improve AUC. Reverting changes.
Training on augumented user 132184 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132184 AUC after training: 0.5
User 132184 does not improve AUC. Reverting changes.
Training on augumented user 89790 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89790 AUC after training: 0.5
User 89790 does not improve AUC. Reverting changes.
Training on augumented user 55863 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55863 AUC after training: 0.5
User 55863 does not improve AUC. Reverting changes.
Training on augumented user 90325 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90325 AUC after training: 0.5
User 90325 does not improve AUC. Reverting changes.
Training on augumented user 75945 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75945 AUC after training: 0.5
User 75945 does not improve AUC. Reverting changes.
Training on augumented user 46661 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46661 AUC after training: 0.5
User 46661 does not improve AUC. Reverting changes.
Training on augumented user 100633 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100633 AUC after training: 0.5
User 100633 does not improve AUC. Reverting changes.
Training on augumented user 53308 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53308 AUC after training: 0.5
User 53308 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:34:48.352940] start test user 4964 214/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:34:48.886380] start test user 4964 214/568 recall augumented users by random, augumented_users = [95584, 137190, 96084, 99338, 7916, 69157, 128762, 8492, 34478, 94262, 70575, 53063, 23193, 44574, 111652, 77520, 92141, 32003, 100598, 22884, 5562, 12811, 83103, 122541, 88370, 137525, 15275, 59757, 127851, 88793, 105992, 120573, 75575, 22424, 100507, 96294, 107251, 130730, 30699, 8321, 64622, 122512, 103188, 114744, 57600, 99509, 133344, 23877, 82775, 31130]
[2024-12-02 19:34:48.901595] user = 4964 Cloud 214/568
[2024-12-02 19:34:48.918502] user = 4964 Local 214/568
[2024-12-02 19:34:49.024712] user = 4964 Local+ 214/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:34:51.113574] user = 4964 MPDA- 214/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 95584 0/50 current_auc = 1.0
User 95584 AUC after training: 1.0
User 95584 does not improve AUC. Reverting changes.
Training on augumented user 137190 1/50 current_auc = 1.0
User 137190 AUC after training: 1.0
User 137190 does not improve AUC. Reverting changes.
Training on augumented user 96084 2/50 current_auc = 1.0
User 96084 AUC after training: 1.0
User 96084 does not improve AUC. Reverting changes.
Training on augumented user 99338 3/50 current_auc = 1.0
User 99338 AUC after training: 1.0
User 99338 does not improve AUC. Reverting changes.
Training on augumented user 7916 4/50 current_auc = 1.0
User 7916 AUC after training: 1.0
User 7916 does not improve AUC. Reverting changes.
Training on augumented user 69157 5/50 current_auc = 1.0
User 69157 AUC after training: 1.0
User 69157 does not improve AUC. Reverting changes.
Training on augumented user 128762 6/50 current_auc = 1.0
User 128762 AUC after training: 1.0
User 128762 does not improve AUC. Reverting changes.
Training on augumented user 8492 7/50 current_auc = 1.0
User 8492 AUC after training: 1.0
User 8492 does not improve AUC. Reverting changes.
Training on augumented user 34478 8/50 current_auc = 1.0
User 34478 AUC after training: 1.0
User 34478 does not improve AUC. Reverting changes.
Training on augumented user 94262 9/50 current_auc = 1.0
User 94262 AUC after training: 1.0
User 94262 does not improve AUC. Reverting changes.
Training on augumented user 70575 10/50 current_auc = 1.0
User 70575 AUC after training: 1.0
User 70575 does not improve AUC. Reverting changes.
Training on augumented user 53063 11/50 current_auc = 1.0
User 53063 AUC after training: 1.0
User 53063 does not improve AUC. Reverting changes.
Training on augumented user 23193 12/50 current_auc = 1.0
User 23193 AUC after training: 1.0
User 23193 does not improve AUC. Reverting changes.
Training on augumented user 44574 13/50 current_auc = 1.0
User 44574 AUC after training: 1.0
User 44574 does not improve AUC. Reverting changes.
Training on augumented user 111652 14/50 current_auc = 1.0
User 111652 AUC after training: 1.0
User 111652 does not improve AUC. Reverting changes.
Training on augumented user 77520 15/50 current_auc = 1.0
User 77520 AUC after training: 1.0
User 77520 does not improve AUC. Reverting changes.
Training on augumented user 92141 16/50 current_auc = 1.0
User 92141 AUC after training: 1.0
User 92141 does not improve AUC. Reverting changes.
Training on augumented user 32003 17/50 current_auc = 1.0
User 32003 AUC after training: 1.0
User 32003 does not improve AUC. Reverting changes.
Training on augumented user 100598 18/50 current_auc = 1.0
User 100598 AUC after training: 1.0
User 100598 does not improve AUC. Reverting changes.
Training on augumented user 22884 19/50 current_auc = 1.0
User 22884 AUC after training: 1.0
User 22884 does not improve AUC. Reverting changes.
Training on augumented user 5562 20/50 current_auc = 1.0
User 5562 AUC after training: 1.0
User 5562 does not improve AUC. Reverting changes.
Training on augumented user 12811 21/50 current_auc = 1.0
User 12811 AUC after training: 1.0
User 12811 does not improve AUC. Reverting changes.
Training on augumented user 83103 22/50 current_auc = 1.0
User 83103 AUC after training: 1.0
User 83103 does not improve AUC. Reverting changes.
Training on augumented user 122541 23/50 current_auc = 1.0
User 122541 AUC after training: 1.0
User 122541 does not improve AUC. Reverting changes.
Training on augumented user 88370 24/50 current_auc = 1.0
User 88370 AUC after training: 1.0
User 88370 does not improve AUC. Reverting changes.
Training on augumented user 137525 25/50 current_auc = 1.0
User 137525 AUC after training: 1.0
User 137525 does not improve AUC. Reverting changes.
Training on augumented user 15275 26/50 current_auc = 1.0
User 15275 AUC after training: 1.0
User 15275 does not improve AUC. Reverting changes.
Training on augumented user 59757 27/50 current_auc = 1.0
User 59757 AUC after training: 1.0
User 59757 does not improve AUC. Reverting changes.
Training on augumented user 127851 28/50 current_auc = 1.0
User 127851 AUC after training: 1.0
User 127851 does not improve AUC. Reverting changes.
Training on augumented user 88793 29/50 current_auc = 1.0
User 88793 AUC after training: 1.0
User 88793 does not improve AUC. Reverting changes.
Training on augumented user 105992 30/50 current_auc = 1.0
User 105992 AUC after training: 1.0
User 105992 does not improve AUC. Reverting changes.
Training on augumented user 120573 31/50 current_auc = 1.0
User 120573 AUC after training: 1.0
User 120573 does not improve AUC. Reverting changes.
Training on augumented user 75575 32/50 current_auc = 1.0
User 75575 AUC after training: 1.0
User 75575 does not improve AUC. Reverting changes.
Training on augumented user 22424 33/50 current_auc = 1.0
User 22424 AUC after training: 1.0
User 22424 does not improve AUC. Reverting changes.
Training on augumented user 100507 34/50 current_auc = 1.0
User 100507 AUC after training: 1.0
User 100507 does not improve AUC. Reverting changes.
Training on augumented user 96294 35/50 current_auc = 1.0
User 96294 AUC after training: 1.0
User 96294 does not improve AUC. Reverting changes.
Training on augumented user 107251 36/50 current_auc = 1.0
User 107251 AUC after training: 1.0
User 107251 does not improve AUC. Reverting changes.
Training on augumented user 130730 37/50 current_auc = 1.0
User 130730 AUC after training: 1.0
User 130730 does not improve AUC. Reverting changes.
Training on augumented user 30699 38/50 current_auc = 1.0
User 30699 AUC after training: 1.0
User 30699 does not improve AUC. Reverting changes.
Training on augumented user 8321 39/50 current_auc = 1.0
User 8321 AUC after training: 1.0
User 8321 does not improve AUC. Reverting changes.
Training on augumented user 64622 40/50 current_auc = 1.0
User 64622 AUC after training: 1.0
User 64622 does not improve AUC. Reverting changes.
Training on augumented user 122512 41/50 current_auc = 1.0
User 122512 AUC after training: 1.0
User 122512 does not improve AUC. Reverting changes.
Training on augumented user 103188 42/50 current_auc = 1.0
User 103188 AUC after training: 1.0
User 103188 does not improve AUC. Reverting changes.
Training on augumented user 114744 43/50 current_auc = 1.0
User 114744 AUC after training: 1.0
User 114744 does not improve AUC. Reverting changes.
Training on augumented user 57600 44/50 current_auc = 1.0
User 57600 AUC after training: 1.0
User 57600 does not improve AUC. Reverting changes.
Training on augumented user 99509 45/50 current_auc = 1.0
User 99509 AUC after training: 1.0
User 99509 does not improve AUC. Reverting changes.
Training on augumented user 133344 46/50 current_auc = 1.0
User 133344 AUC after training: 1.0
User 133344 does not improve AUC. Reverting changes.
Training on augumented user 23877 47/50 current_auc = 1.0
User 23877 AUC after training: 1.0
User 23877 does not improve AUC. Reverting changes.
Training on augumented user 82775 48/50 current_auc = 1.0
User 82775 AUC after training: 1.0
User 82775 does not improve AUC. Reverting changes.
Training on augumented user 31130 49/50 current_auc = 1.0
User 31130 AUC after training: 1.0
User 31130 does not improve AUC. Reverting changes.
[2024-12-02 19:35:18.652551] start test user 4965 215/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:35:19.071271] start test user 4965 215/568 recall augumented users by random, augumented_users = [106895, 10490, 96343, 109432, 29125, 75314, 136035, 94806, 26366, 73125, 107037, 64533, 1983, 32653, 133168, 137190, 60622, 105165, 47125, 80593, 67538, 98608, 35876, 109730, 4566, 88539, 81865, 21215, 98844, 95942, 126833, 12946, 63822, 11768, 115121, 64825, 34990, 127481, 45592, 135427, 111600, 20637, 662, 12848, 95787, 8374, 110719, 103109, 96061, 43966]
[2024-12-02 19:35:19.086612] user = 4965 Cloud 215/568
[2024-12-02 19:35:19.104008] user = 4965 Local 215/568
[2024-12-02 19:35:19.213566] user = 4965 Local+ 215/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:35:21.660067] user = 4965 MPDA- 215/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5048076923076923
Training on augumented user 106895 0/50 current_auc = 0.5048076923076923
User 106895 AUC after training: 0.5030048076923077
User 106895 does not improve AUC. Reverting changes.
Training on augumented user 10490 1/50 current_auc = 0.5048076923076923
User 10490 AUC after training: 0.5042067307692308
User 10490 does not improve AUC. Reverting changes.
Training on augumented user 96343 2/50 current_auc = 0.5048076923076923
User 96343 AUC after training: 0.5060096153846154
User 96343 improves AUC. Keeping the model.
Training on augumented user 109432 3/50 current_auc = 0.5060096153846154
User 109432 AUC after training: 0.5054086538461539
User 109432 does not improve AUC. Reverting changes.
Training on augumented user 29125 4/50 current_auc = 0.5060096153846154
User 29125 AUC after training: 0.5063100961538461
User 29125 improves AUC. Keeping the model.
Training on augumented user 75314 5/50 current_auc = 0.5063100961538461
User 75314 AUC after training: 0.5063100961538461
User 75314 does not improve AUC. Reverting changes.
Training on augumented user 136035 6/50 current_auc = 0.5063100961538461
User 136035 AUC after training: 0.5063100961538461
User 136035 does not improve AUC. Reverting changes.
Training on augumented user 94806 7/50 current_auc = 0.5063100961538461
User 94806 AUC after training: 0.5069110576923077
User 94806 improves AUC. Keeping the model.
Training on augumented user 26366 8/50 current_auc = 0.5069110576923077
User 26366 AUC after training: 0.5072115384615385
User 26366 improves AUC. Keeping the model.
Training on augumented user 73125 9/50 current_auc = 0.5072115384615385
User 73125 AUC after training: 0.5069110576923077
User 73125 does not improve AUC. Reverting changes.
Training on augumented user 107037 10/50 current_auc = 0.5072115384615385
User 107037 AUC after training: 0.5078125
User 107037 improves AUC. Keeping the model.
Training on augumented user 64533 11/50 current_auc = 0.5078125
User 64533 AUC after training: 0.5084134615384616
User 64533 improves AUC. Keeping the model.
Training on augumented user 1983 12/50 current_auc = 0.5084134615384616
User 1983 AUC after training: 0.5075120192307693
User 1983 does not improve AUC. Reverting changes.
Training on augumented user 32653 13/50 current_auc = 0.5084134615384616
User 32653 AUC after training: 0.5075120192307692
User 32653 does not improve AUC. Reverting changes.
Training on augumented user 133168 14/50 current_auc = 0.5084134615384616
User 133168 AUC after training: 0.5084134615384616
User 133168 does not improve AUC. Reverting changes.
Training on augumented user 137190 15/50 current_auc = 0.5084134615384616
User 137190 AUC after training: 0.5093149038461539
User 137190 improves AUC. Keeping the model.
Training on augumented user 60622 16/50 current_auc = 0.5093149038461539
User 60622 AUC after training: 0.5087139423076923
User 60622 does not improve AUC. Reverting changes.
Training on augumented user 105165 17/50 current_auc = 0.5093149038461539
User 105165 AUC after training: 0.5087139423076923
User 105165 does not improve AUC. Reverting changes.
Training on augumented user 47125 18/50 current_auc = 0.5093149038461539
User 47125 AUC after training: 0.5090144230769231
User 47125 does not improve AUC. Reverting changes.
Training on augumented user 80593 19/50 current_auc = 0.5093149038461539
User 80593 AUC after training: 0.5084134615384615
User 80593 does not improve AUC. Reverting changes.
Training on augumented user 67538 20/50 current_auc = 0.5093149038461539
User 67538 AUC after training: 0.5084134615384616
User 67538 does not improve AUC. Reverting changes.
Training on augumented user 98608 21/50 current_auc = 0.5093149038461539
User 98608 AUC after training: 0.5090144230769231
User 98608 does not improve AUC. Reverting changes.
Training on augumented user 35876 22/50 current_auc = 0.5093149038461539
User 35876 AUC after training: 0.5084134615384615
User 35876 does not improve AUC. Reverting changes.
Training on augumented user 109730 23/50 current_auc = 0.5093149038461539
User 109730 AUC after training: 0.5081129807692308
User 109730 does not improve AUC. Reverting changes.
Training on augumented user 4566 24/50 current_auc = 0.5093149038461539
User 4566 AUC after training: 0.5084134615384616
User 4566 does not improve AUC. Reverting changes.
Training on augumented user 88539 25/50 current_auc = 0.5093149038461539
User 88539 AUC after training: 0.5087139423076923
User 88539 does not improve AUC. Reverting changes.
Training on augumented user 81865 26/50 current_auc = 0.5093149038461539
User 81865 AUC after training: 0.5087139423076924
User 81865 does not improve AUC. Reverting changes.
Training on augumented user 21215 27/50 current_auc = 0.5093149038461539
User 21215 AUC after training: 0.5072115384615385
User 21215 does not improve AUC. Reverting changes.
Training on augumented user 98844 28/50 current_auc = 0.5093149038461539
User 98844 AUC after training: 0.509014423076923
User 98844 does not improve AUC. Reverting changes.
Training on augumented user 95942 29/50 current_auc = 0.5093149038461539
User 95942 AUC after training: 0.5084134615384616
User 95942 does not improve AUC. Reverting changes.
Training on augumented user 126833 30/50 current_auc = 0.5093149038461539
User 126833 AUC after training: 0.5087139423076923
User 126833 does not improve AUC. Reverting changes.
Training on augumented user 12946 31/50 current_auc = 0.5093149038461539
User 12946 AUC after training: 0.5087139423076923
User 12946 does not improve AUC. Reverting changes.
Training on augumented user 63822 32/50 current_auc = 0.5093149038461539
User 63822 AUC after training: 0.5087139423076923
User 63822 does not improve AUC. Reverting changes.
Training on augumented user 11768 33/50 current_auc = 0.5093149038461539
User 11768 AUC after training: 0.5084134615384616
User 11768 does not improve AUC. Reverting changes.
Training on augumented user 115121 34/50 current_auc = 0.5093149038461539
User 115121 AUC after training: 0.5087139423076923
User 115121 does not improve AUC. Reverting changes.
Training on augumented user 64825 35/50 current_auc = 0.5093149038461539
User 64825 AUC after training: 0.5087139423076923
User 64825 does not improve AUC. Reverting changes.
Training on augumented user 34990 36/50 current_auc = 0.5093149038461539
User 34990 AUC after training: 0.5090144230769231
User 34990 does not improve AUC. Reverting changes.
Training on augumented user 127481 37/50 current_auc = 0.5093149038461539
User 127481 AUC after training: 0.5084134615384615
User 127481 does not improve AUC. Reverting changes.
Training on augumented user 45592 38/50 current_auc = 0.5093149038461539
User 45592 AUC after training: 0.5087139423076923
User 45592 does not improve AUC. Reverting changes.
Training on augumented user 135427 39/50 current_auc = 0.5093149038461539
User 135427 AUC after training: 0.5090144230769231
User 135427 does not improve AUC. Reverting changes.
Training on augumented user 111600 40/50 current_auc = 0.5093149038461539
User 111600 AUC after training: 0.5087139423076923
User 111600 does not improve AUC. Reverting changes.
Training on augumented user 20637 41/50 current_auc = 0.5093149038461539
User 20637 AUC after training: 0.5087139423076923
User 20637 does not improve AUC. Reverting changes.
Training on augumented user 662 42/50 current_auc = 0.5093149038461539
User 662 AUC after training: 0.5084134615384616
User 662 does not improve AUC. Reverting changes.
Training on augumented user 12848 43/50 current_auc = 0.5093149038461539
User 12848 AUC after training: 0.5075120192307693
User 12848 does not improve AUC. Reverting changes.
Training on augumented user 95787 44/50 current_auc = 0.5093149038461539
User 95787 AUC after training: 0.5087139423076923
User 95787 does not improve AUC. Reverting changes.
Training on augumented user 8374 45/50 current_auc = 0.5093149038461539
User 8374 AUC after training: 0.5081129807692308
User 8374 does not improve AUC. Reverting changes.
Training on augumented user 110719 46/50 current_auc = 0.5093149038461539
User 110719 AUC after training: 0.5090144230769231
User 110719 does not improve AUC. Reverting changes.
Training on augumented user 103109 47/50 current_auc = 0.5093149038461539
User 103109 AUC after training: 0.5093149038461539
User 103109 does not improve AUC. Reverting changes.
Training on augumented user 96061 48/50 current_auc = 0.5093149038461539
User 96061 AUC after training: 0.5075120192307693
User 96061 does not improve AUC. Reverting changes.
Training on augumented user 43966 49/50 current_auc = 0.5093149038461539
User 43966 AUC after training: 0.5081129807692307
User 43966 does not improve AUC. Reverting changes.
[2024-12-02 19:35:47.954638] start test user 4967 216/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:35:48.369139] start test user 4967 216/568 recall augumented users by random, augumented_users = [96266, 79889, 38490, 45718, 21919, 124756, 112702, 37230, 53138, 348, 21762, 22000, 130419, 85797, 30936, 4047, 42506, 124206, 28382, 76481, 57114, 83633, 82981, 80134, 89643, 132326, 75309, 100202, 4114, 94063, 42247, 116500, 106975, 53562, 4647, 45905, 18334, 56423, 29084, 15476, 72867, 76888, 65743, 115230, 125901, 120543, 100286, 63226, 68984, 25634]
[2024-12-02 19:35:48.386359] user = 4967 Cloud 216/568
[2024-12-02 19:35:48.452136] user = 4967 Local 216/568
[2024-12-02 19:35:48.685809] user = 4967 Local+ 216/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:35:51.438703] user = 4967 MPDA- 216/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6325459317585301
Training on augumented user 96266 0/50 current_auc = 0.6325459317585301
User 96266 AUC after training: 0.6328043191492255
User 96266 improves AUC. Keeping the model.
Training on augumented user 79889 1/50 current_auc = 0.6328043191492255
User 79889 AUC after training: 0.632573130431235
User 79889 does not improve AUC. Reverting changes.
Training on augumented user 38490 2/50 current_auc = 0.6328043191492255
User 38490 AUC after training: 0.632607128772116
User 38490 does not improve AUC. Reverting changes.
Training on augumented user 45718 3/50 current_auc = 0.6328043191492255
User 45718 AUC after training: 0.6324507364040635
User 45718 does not improve AUC. Reverting changes.
Training on augumented user 21919 4/50 current_auc = 0.6328043191492255
User 21919 AUC after training: 0.6326683257857018
User 21919 does not improve AUC. Reverting changes.
Training on augumented user 124756 5/50 current_auc = 0.6328043191492255
User 124756 AUC after training: 0.6327227231311112
User 124756 does not improve AUC. Reverting changes.
Training on augumented user 112702 6/50 current_auc = 0.6328043191492255
User 112702 AUC after training: 0.6327839201446969
User 112702 does not improve AUC. Reverting changes.
Training on augumented user 37230 7/50 current_auc = 0.6328043191492255
User 37230 AUC after training: 0.6326479267811731
User 37230 does not improve AUC. Reverting changes.
Training on augumented user 53138 8/50 current_auc = 0.6328043191492255
User 53138 AUC after training: 0.6326275277766444
User 53138 does not improve AUC. Reverting changes.
Training on augumented user 348 9/50 current_auc = 0.6328043191492255
User 348 AUC after training: 0.6323351420450681
User 348 does not improve AUC. Reverting changes.
Training on augumented user 21762 10/50 current_auc = 0.6328043191492255
User 21762 AUC after training: 0.6326275277766445
User 21762 does not improve AUC. Reverting changes.
Training on augumented user 22000 11/50 current_auc = 0.6328043191492255
User 22000 AUC after training: 0.6326683257857016
User 22000 does not improve AUC. Reverting changes.
Training on augumented user 130419 12/50 current_auc = 0.6328043191492255
User 130419 AUC after training: 0.632328342376892
User 130419 does not improve AUC. Reverting changes.
Training on augumented user 85797 13/50 current_auc = 0.6328043191492255
User 85797 AUC after training: 0.6325799300994113
User 85797 does not improve AUC. Reverting changes.
Training on augumented user 30936 14/50 current_auc = 0.6328043191492255
User 30936 AUC after training: 0.6321447513361349
User 30936 does not improve AUC. Reverting changes.
Training on augumented user 4047 15/50 current_auc = 0.6328043191492255
User 4047 AUC after training: 0.6326275277766444
User 4047 does not improve AUC. Reverting changes.
Training on augumented user 42506 16/50 current_auc = 0.6328043191492255
User 42506 AUC after training: 0.6326139284402921
User 42506 does not improve AUC. Reverting changes.
Training on augumented user 124206 17/50 current_auc = 0.6328043191492255
User 124206 AUC after training: 0.6326751254538778
User 124206 does not improve AUC. Reverting changes.
Training on augumented user 28382 18/50 current_auc = 0.6328043191492255
User 28382 AUC after training: 0.6327363224674636
User 28382 does not improve AUC. Reverting changes.
Training on augumented user 76481 19/50 current_auc = 0.6328043191492255
User 76481 AUC after training: 0.6324779350767682
User 76481 does not improve AUC. Reverting changes.
Training on augumented user 57114 20/50 current_auc = 0.6328043191492255
User 57114 AUC after training: 0.6326275277766445
User 57114 does not improve AUC. Reverting changes.
Training on augumented user 83633 21/50 current_auc = 0.6328043191492255
User 83633 AUC after training: 0.6324643357404158
User 83633 does not improve AUC. Reverting changes.
Training on augumented user 82981 22/50 current_auc = 0.6328043191492255
User 82981 AUC after training: 0.6330627065399208
User 82981 improves AUC. Keeping the model.
Training on augumented user 80134 23/50 current_auc = 0.6330627065399208
User 80134 AUC after training: 0.6328043191492254
User 80134 does not improve AUC. Reverting changes.
Training on augumented user 89643 24/50 current_auc = 0.6330627065399208
User 89643 AUC after training: 0.6327907198128732
User 89643 does not improve AUC. Reverting changes.
Training on augumented user 132326 25/50 current_auc = 0.6330627065399208
User 132326 AUC after training: 0.6331035045489781
User 132326 improves AUC. Keeping the model.
Training on augumented user 75309 26/50 current_auc = 0.6331035045489781
User 75309 AUC after training: 0.6325595310948826
User 75309 does not improve AUC. Reverting changes.
Training on augumented user 100202 27/50 current_auc = 0.6331035045489781
User 100202 AUC after training: 0.6329403125127494
User 100202 does not improve AUC. Reverting changes.
Training on augumented user 4114 28/50 current_auc = 0.6331035045489781
User 4114 AUC after training: 0.6327091237947589
User 4114 does not improve AUC. Reverting changes.
Training on augumented user 94063 29/50 current_auc = 0.6331035045489781
User 94063 AUC after training: 0.6330627065399209
User 94063 does not improve AUC. Reverting changes.
Training on augumented user 42247 30/50 current_auc = 0.6331035045489781
User 42247 AUC after training: 0.6329403125127493
User 42247 does not improve AUC. Reverting changes.
Training on augumented user 116500 31/50 current_auc = 0.6331035045489781
User 116500 AUC after training: 0.6328995145036923
User 116500 does not improve AUC. Reverting changes.
Training on augumented user 106975 32/50 current_auc = 0.6331035045489781
User 106975 AUC after training: 0.6326819251220541
User 106975 does not improve AUC. Reverting changes.
Training on augumented user 53562 33/50 current_auc = 0.6331035045489781
User 53562 AUC after training: 0.6328995145036923
User 53562 does not improve AUC. Reverting changes.
Training on augumented user 4647 34/50 current_auc = 0.6331035045489781
User 4647 AUC after training: 0.6328451171582826
User 4647 does not improve AUC. Reverting changes.
Training on augumented user 45905 35/50 current_auc = 0.6331035045489781
User 45905 AUC after training: 0.63317150123074
User 45905 improves AUC. Keeping the model.
Training on augumented user 18334 36/50 current_auc = 0.63317150123074
User 18334 AUC after training: 0.6331171038853304
User 18334 does not improve AUC. Reverting changes.
Training on augumented user 56423 37/50 current_auc = 0.63317150123074
User 56423 AUC after training: 0.6330491072035684
User 56423 does not improve AUC. Reverting changes.
Training on augumented user 29084 38/50 current_auc = 0.63317150123074
User 29084 AUC after training: 0.6328859151673398
User 29084 does not improve AUC. Reverting changes.
Training on augumented user 15476 39/50 current_auc = 0.63317150123074
User 15476 AUC after training: 0.633280295921559
User 15476 improves AUC. Keeping the model.
Training on augumented user 72867 40/50 current_auc = 0.633280295921559
User 72867 AUC after training: 0.6332802959215589
User 72867 does not improve AUC. Reverting changes.
Training on augumented user 76888 41/50 current_auc = 0.633280295921559
User 76888 AUC after training: 0.6332394979125019
User 76888 does not improve AUC. Reverting changes.
Training on augumented user 65743 42/50 current_auc = 0.633280295921559
User 65743 AUC after training: 0.6327091237947589
User 65743 does not improve AUC. Reverting changes.
Training on augumented user 115230 43/50 current_auc = 0.633280295921559
User 115230 AUC after training: 0.6332530972488543
User 115230 does not improve AUC. Reverting changes.
Training on augumented user 125901 44/50 current_auc = 0.633280295921559
User 125901 AUC after training: 0.6333618919396733
User 125901 improves AUC. Keeping the model.
Training on augumented user 120543 45/50 current_auc = 0.6333618919396733
User 120543 AUC after training: 0.6330763058762732
User 120543 does not improve AUC. Reverting changes.
Training on augumented user 100286 46/50 current_auc = 0.6333618919396733
User 100286 AUC after training: 0.6321923490133682
User 100286 does not improve AUC. Reverting changes.
Training on augumented user 63226 47/50 current_auc = 0.6333618919396733
User 63226 AUC after training: 0.6330219085308637
User 63226 does not improve AUC. Reverting changes.
Training on augumented user 68984 48/50 current_auc = 0.6333618919396733
User 68984 AUC after training: 0.6333074945942638
User 68984 does not improve AUC. Reverting changes.
Training on augumented user 25634 49/50 current_auc = 0.6333618919396733
User 25634 AUC after training: 0.6331579018943876
User 25634 does not improve AUC. Reverting changes.
[2024-12-02 19:36:25.499447] start test user 4968 217/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:36:26.102145] start test user 4968 217/568 recall augumented users by random, augumented_users = [14161, 94330, 131401, 93298, 48418, 133393, 24418, 31394, 6427, 41509, 95986, 35179, 74672, 129511, 10441, 54316, 98087, 106210, 102522, 78712, 126537, 98643, 95464, 96666, 63339, 89086, 56111, 59205, 21424, 114599, 42631, 28970, 34340, 102786, 72591, 54194, 76623, 31992, 101901, 108629, 66587, 28832, 24518, 4391, 10846, 115638, 47230, 103058, 132606, 67792]
[2024-12-02 19:36:26.118433] user = 4968 Cloud 217/568
[2024-12-02 19:36:26.194384] user = 4968 Local 217/568
[2024-12-02 19:36:26.318789] user = 4968 Local+ 217/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:36:28.460037] user = 4968 MPDA- 217/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7080276448697501
Training on augumented user 14161 0/50 current_auc = 0.7080276448697501
User 14161 AUC after training: 0.7083466241360978
User 14161 improves AUC. Keeping the model.
Training on augumented user 94330 1/50 current_auc = 0.7083466241360978
User 94330 AUC after training: 0.7071637426900584
User 94330 does not improve AUC. Reverting changes.
Training on augumented user 131401 2/50 current_auc = 0.7083466241360978
User 131401 AUC after training: 0.7083200425305688
User 131401 does not improve AUC. Reverting changes.
Training on augumented user 93298 3/50 current_auc = 0.7083466241360978
User 93298 AUC after training: 0.7081406166932482
User 93298 does not improve AUC. Reverting changes.
Training on augumented user 48418 4/50 current_auc = 0.7083466241360978
User 48418 AUC after training: 0.7082203615098353
User 48418 does not improve AUC. Reverting changes.
Training on augumented user 133393 5/50 current_auc = 0.7083466241360978
User 133393 AUC after training: 0.7079412546517809
User 133393 does not improve AUC. Reverting changes.
Training on augumented user 24418 6/50 current_auc = 0.7083466241360978
User 24418 AUC after training: 0.708300106326422
User 24418 does not improve AUC. Reverting changes.
Training on augumented user 31394 7/50 current_auc = 0.7083466241360978
User 31394 AUC after training: 0.7083333333333334
User 31394 does not improve AUC. Reverting changes.
Training on augumented user 6427 8/50 current_auc = 0.7083466241360978
User 6427 AUC after training: 0.7081206804891016
User 6427 does not improve AUC. Reverting changes.
Training on augumented user 41509 9/50 current_auc = 0.7083466241360978
User 41509 AUC after training: 0.7086390217969165
User 41509 improves AUC. Keeping the model.
Training on augumented user 95986 10/50 current_auc = 0.7086390217969165
User 95986 AUC after training: 0.7083732057416269
User 95986 does not improve AUC. Reverting changes.
Training on augumented user 35179 11/50 current_auc = 0.7086390217969165
User 35179 AUC after training: 0.7074295587453482
User 35179 does not improve AUC. Reverting changes.
Training on augumented user 74672 12/50 current_auc = 0.7086390217969165
User 74672 AUC after training: 0.7083864965443913
User 74672 does not improve AUC. Reverting changes.
Training on augumented user 129511 13/50 current_auc = 0.7086390217969165
User 129511 AUC after training: 0.7084662413609781
User 129511 does not improve AUC. Reverting changes.
Training on augumented user 10441 14/50 current_auc = 0.7086390217969165
User 10441 AUC after training: 0.7084130781499203
User 10441 does not improve AUC. Reverting changes.
Training on augumented user 54316 15/50 current_auc = 0.7086390217969165
User 54316 AUC after training: 0.7088915470494418
User 54316 improves AUC. Keeping the model.
Training on augumented user 98087 16/50 current_auc = 0.7088915470494418
User 98087 AUC after training: 0.7084928229665071
User 98087 does not improve AUC. Reverting changes.
Training on augumented user 106210 17/50 current_auc = 0.7088915470494418
User 106210 AUC after training: 0.7087586390217968
User 106210 does not improve AUC. Reverting changes.
Training on augumented user 102522 18/50 current_auc = 0.7088915470494418
User 102522 AUC after training: 0.7082535885167464
User 102522 does not improve AUC. Reverting changes.
Training on augumented user 78712 19/50 current_auc = 0.7088915470494418
User 78712 AUC after training: 0.7083466241360978
User 78712 does not improve AUC. Reverting changes.
Training on augumented user 126537 20/50 current_auc = 0.7088915470494418
User 126537 AUC after training: 0.70867889420521
User 126537 does not improve AUC. Reverting changes.
Training on augumented user 98643 21/50 current_auc = 0.7088915470494418
User 98643 AUC after training: 0.7089048378522063
User 98643 improves AUC. Keeping the model.
Training on augumented user 95464 22/50 current_auc = 0.7089048378522063
User 95464 AUC after training: 0.7087187666135034
User 95464 does not improve AUC. Reverting changes.
Training on augumented user 96666 23/50 current_auc = 0.7089048378522063
User 96666 AUC after training: 0.7087719298245614
User 96666 does not improve AUC. Reverting changes.
Training on augumented user 63339 24/50 current_auc = 0.7089048378522063
User 63339 AUC after training: 0.7086656034024454
User 63339 does not improve AUC. Reverting changes.
Training on augumented user 89086 25/50 current_auc = 0.7089048378522063
User 89086 AUC after training: 0.7089712918660287
User 89086 improves AUC. Keeping the model.
Training on augumented user 56111 26/50 current_auc = 0.7089712918660287
User 56111 AUC after training: 0.7087187666135035
User 56111 does not improve AUC. Reverting changes.
Training on augumented user 59205 27/50 current_auc = 0.7089712918660287
User 59205 AUC after training: 0.7080808080808082
User 59205 does not improve AUC. Reverting changes.
Training on augumented user 21424 28/50 current_auc = 0.7089712918660287
User 21424 AUC after training: 0.7089447102604998
User 21424 does not improve AUC. Reverting changes.
Training on augumented user 114599 29/50 current_auc = 0.7089712918660287
User 114599 AUC after training: 0.7092105263157895
User 114599 improves AUC. Keeping the model.
Training on augumented user 42631 30/50 current_auc = 0.7092105263157895
User 42631 AUC after training: 0.7092238171185539
User 42631 improves AUC. Keeping the model.
Training on augumented user 28970 31/50 current_auc = 0.7092238171185539
User 28970 AUC after training: 0.7088383838383838
User 28970 does not improve AUC. Reverting changes.
Training on augumented user 34340 32/50 current_auc = 0.7092238171185539
User 34340 AUC after training: 0.7091839447102605
User 34340 does not improve AUC. Reverting changes.
Training on augumented user 102786 33/50 current_auc = 0.7092238171185539
User 102786 AUC after training: 0.7085725677830941
User 102786 does not improve AUC. Reverting changes.
Training on augumented user 72591 34/50 current_auc = 0.7092238171185539
User 72591 AUC after training: 0.709170653907496
User 72591 does not improve AUC. Reverting changes.
Training on augumented user 54194 35/50 current_auc = 0.7092238171185539
User 54194 AUC after training: 0.7095427963849017
User 54194 improves AUC. Keeping the model.
Training on augumented user 76623 36/50 current_auc = 0.7095427963849017
User 76623 AUC after training: 0.709303561935141
User 76623 does not improve AUC. Reverting changes.
Training on augumented user 31992 37/50 current_auc = 0.7095427963849017
User 31992 AUC after training: 0.7093434343434344
User 31992 does not improve AUC. Reverting changes.
Training on augumented user 101901 38/50 current_auc = 0.7095427963849017
User 101901 AUC after training: 0.7085194045720362
User 101901 does not improve AUC. Reverting changes.
Training on augumented user 108629 39/50 current_auc = 0.7095427963849017
User 108629 AUC after training: 0.709197235513025
User 108629 does not improve AUC. Reverting changes.
Training on augumented user 66587 40/50 current_auc = 0.7095427963849017
User 66587 AUC after training: 0.7091839447102605
User 66587 does not improve AUC. Reverting changes.
Training on augumented user 28832 41/50 current_auc = 0.7095427963849017
User 28832 AUC after training: 0.7095029239766082
User 28832 does not improve AUC. Reverting changes.
Training on augumented user 24518 42/50 current_auc = 0.7095427963849017
User 24518 AUC after training: 0.7093965975544924
User 24518 does not improve AUC. Reverting changes.
Training on augumented user 4391 43/50 current_auc = 0.7095427963849017
User 4391 AUC after training: 0.70867889420521
User 4391 does not improve AUC. Reverting changes.
Training on augumented user 10846 44/50 current_auc = 0.7095427963849017
User 10846 AUC after training: 0.709170653907496
User 10846 does not improve AUC. Reverting changes.
Training on augumented user 115638 45/50 current_auc = 0.7095427963849017
User 115638 AUC after training: 0.7090510366826156
User 115638 does not improve AUC. Reverting changes.
Training on augumented user 47230 46/50 current_auc = 0.7095427963849017
User 47230 AUC after training: 0.7092636895268474
User 47230 does not improve AUC. Reverting changes.
Training on augumented user 103058 47/50 current_auc = 0.7095427963849017
User 103058 AUC after training: 0.7093965975544922
User 103058 does not improve AUC. Reverting changes.
Training on augumented user 132606 48/50 current_auc = 0.7095427963849017
User 132606 AUC after training: 0.7089314194577353
User 132606 does not improve AUC. Reverting changes.
Training on augumented user 67792 49/50 current_auc = 0.7095427963849017
User 67792 AUC after training: 0.7090909090909092
User 67792 does not improve AUC. Reverting changes.
[2024-12-02 19:36:56.162903] start test user 4978 218/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:36:56.602562] start test user 4978 218/568 recall augumented users by random, augumented_users = [81782, 34, 19845, 69267, 25272, 49665, 123987, 37158, 36735, 25048, 69697, 80249, 8171, 40213, 102874, 37434, 32833, 69313, 98035, 116567, 63561, 85184, 73372, 124600, 90664, 18342, 107779, 89277, 75442, 70810, 130896, 20863, 10699, 54544, 109403, 79381, 23111, 43207, 121148, 22749, 52950, 71860, 106184, 9650, 45425, 41546, 115072, 99468, 15519, 3832]
[2024-12-02 19:36:56.616997] user = 4978 Cloud 218/568
[2024-12-02 19:36:56.638392] user = 4978 Local 218/568
[2024-12-02 19:36:56.769237] user = 4978 Local+ 218/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:36:58.816706] user = 4978 MPDA- 218/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5357142857142857
Training on augumented user 81782 0/50 current_auc = 0.5357142857142857
User 81782 AUC after training: 0.5357142857142857
User 81782 does not improve AUC. Reverting changes.
Training on augumented user 34 1/50 current_auc = 0.5357142857142857
User 34 AUC after training: 0.5357142857142857
User 34 does not improve AUC. Reverting changes.
Training on augumented user 19845 2/50 current_auc = 0.5357142857142857
User 19845 AUC after training: 0.5357142857142857
User 19845 does not improve AUC. Reverting changes.
Training on augumented user 69267 3/50 current_auc = 0.5357142857142857
User 69267 AUC after training: 0.5357142857142857
User 69267 does not improve AUC. Reverting changes.
Training on augumented user 25272 4/50 current_auc = 0.5357142857142857
User 25272 AUC after training: 0.5357142857142857
User 25272 does not improve AUC. Reverting changes.
Training on augumented user 49665 5/50 current_auc = 0.5357142857142857
User 49665 AUC after training: 0.5357142857142857
User 49665 does not improve AUC. Reverting changes.
Training on augumented user 123987 6/50 current_auc = 0.5357142857142857
User 123987 AUC after training: 0.5357142857142857
User 123987 does not improve AUC. Reverting changes.
Training on augumented user 37158 7/50 current_auc = 0.5357142857142857
User 37158 AUC after training: 0.5357142857142857
User 37158 does not improve AUC. Reverting changes.
Training on augumented user 36735 8/50 current_auc = 0.5357142857142857
User 36735 AUC after training: 0.5357142857142857
User 36735 does not improve AUC. Reverting changes.
Training on augumented user 25048 9/50 current_auc = 0.5357142857142857
User 25048 AUC after training: 0.5357142857142857
User 25048 does not improve AUC. Reverting changes.
Training on augumented user 69697 10/50 current_auc = 0.5357142857142857
User 69697 AUC after training: 0.5357142857142857
User 69697 does not improve AUC. Reverting changes.
Training on augumented user 80249 11/50 current_auc = 0.5357142857142857
User 80249 AUC after training: 0.5357142857142857
User 80249 does not improve AUC. Reverting changes.
Training on augumented user 8171 12/50 current_auc = 0.5357142857142857
User 8171 AUC after training: 0.5357142857142857
User 8171 does not improve AUC. Reverting changes.
Training on augumented user 40213 13/50 current_auc = 0.5357142857142857
User 40213 AUC after training: 0.5357142857142857
User 40213 does not improve AUC. Reverting changes.
Training on augumented user 102874 14/50 current_auc = 0.5357142857142857
User 102874 AUC after training: 0.5357142857142857
User 102874 does not improve AUC. Reverting changes.
Training on augumented user 37434 15/50 current_auc = 0.5357142857142857
User 37434 AUC after training: 0.5357142857142857
User 37434 does not improve AUC. Reverting changes.
Training on augumented user 32833 16/50 current_auc = 0.5357142857142857
User 32833 AUC after training: 0.5357142857142857
User 32833 does not improve AUC. Reverting changes.
Training on augumented user 69313 17/50 current_auc = 0.5357142857142857
User 69313 AUC after training: 0.5357142857142857
User 69313 does not improve AUC. Reverting changes.
Training on augumented user 98035 18/50 current_auc = 0.5357142857142857
User 98035 AUC after training: 0.5357142857142857
User 98035 does not improve AUC. Reverting changes.
Training on augumented user 116567 19/50 current_auc = 0.5357142857142857
User 116567 AUC after training: 0.5357142857142857
User 116567 does not improve AUC. Reverting changes.
Training on augumented user 63561 20/50 current_auc = 0.5357142857142857
User 63561 AUC after training: 0.5357142857142857
User 63561 does not improve AUC. Reverting changes.
Training on augumented user 85184 21/50 current_auc = 0.5357142857142857
User 85184 AUC after training: 0.5357142857142857
User 85184 does not improve AUC. Reverting changes.
Training on augumented user 73372 22/50 current_auc = 0.5357142857142857
User 73372 AUC after training: 0.5357142857142857
User 73372 does not improve AUC. Reverting changes.
Training on augumented user 124600 23/50 current_auc = 0.5357142857142857
User 124600 AUC after training: 0.5357142857142857
User 124600 does not improve AUC. Reverting changes.
Training on augumented user 90664 24/50 current_auc = 0.5357142857142857
User 90664 AUC after training: 0.5357142857142857
User 90664 does not improve AUC. Reverting changes.
Training on augumented user 18342 25/50 current_auc = 0.5357142857142857
User 18342 AUC after training: 0.5357142857142857
User 18342 does not improve AUC. Reverting changes.
Training on augumented user 107779 26/50 current_auc = 0.5357142857142857
User 107779 AUC after training: 0.5357142857142857
User 107779 does not improve AUC. Reverting changes.
Training on augumented user 89277 27/50 current_auc = 0.5357142857142857
User 89277 AUC after training: 0.5357142857142857
User 89277 does not improve AUC. Reverting changes.
Training on augumented user 75442 28/50 current_auc = 0.5357142857142857
User 75442 AUC after training: 0.5357142857142857
User 75442 does not improve AUC. Reverting changes.
Training on augumented user 70810 29/50 current_auc = 0.5357142857142857
User 70810 AUC after training: 0.5357142857142857
User 70810 does not improve AUC. Reverting changes.
Training on augumented user 130896 30/50 current_auc = 0.5357142857142857
User 130896 AUC after training: 0.5357142857142857
User 130896 does not improve AUC. Reverting changes.
Training on augumented user 20863 31/50 current_auc = 0.5357142857142857
User 20863 AUC after training: 0.5357142857142857
User 20863 does not improve AUC. Reverting changes.
Training on augumented user 10699 32/50 current_auc = 0.5357142857142857
User 10699 AUC after training: 0.5357142857142857
User 10699 does not improve AUC. Reverting changes.
Training on augumented user 54544 33/50 current_auc = 0.5357142857142857
User 54544 AUC after training: 0.5357142857142857
User 54544 does not improve AUC. Reverting changes.
Training on augumented user 109403 34/50 current_auc = 0.5357142857142857
User 109403 AUC after training: 0.5357142857142857
User 109403 does not improve AUC. Reverting changes.
Training on augumented user 79381 35/50 current_auc = 0.5357142857142857
User 79381 AUC after training: 0.5357142857142857
User 79381 does not improve AUC. Reverting changes.
Training on augumented user 23111 36/50 current_auc = 0.5357142857142857
User 23111 AUC after training: 0.5357142857142857
User 23111 does not improve AUC. Reverting changes.
Training on augumented user 43207 37/50 current_auc = 0.5357142857142857
User 43207 AUC after training: 0.5357142857142857
User 43207 does not improve AUC. Reverting changes.
Training on augumented user 121148 38/50 current_auc = 0.5357142857142857
User 121148 AUC after training: 0.5357142857142857
User 121148 does not improve AUC. Reverting changes.
Training on augumented user 22749 39/50 current_auc = 0.5357142857142857
User 22749 AUC after training: 0.5357142857142857
User 22749 does not improve AUC. Reverting changes.
Training on augumented user 52950 40/50 current_auc = 0.5357142857142857
User 52950 AUC after training: 0.5357142857142857
User 52950 does not improve AUC. Reverting changes.
Training on augumented user 71860 41/50 current_auc = 0.5357142857142857
User 71860 AUC after training: 0.5357142857142857
User 71860 does not improve AUC. Reverting changes.
Training on augumented user 106184 42/50 current_auc = 0.5357142857142857
User 106184 AUC after training: 0.5357142857142857
User 106184 does not improve AUC. Reverting changes.
Training on augumented user 9650 43/50 current_auc = 0.5357142857142857
User 9650 AUC after training: 0.5357142857142857
User 9650 does not improve AUC. Reverting changes.
Training on augumented user 45425 44/50 current_auc = 0.5357142857142857
User 45425 AUC after training: 0.5357142857142857
User 45425 does not improve AUC. Reverting changes.
Training on augumented user 41546 45/50 current_auc = 0.5357142857142857
User 41546 AUC after training: 0.5357142857142857
User 41546 does not improve AUC. Reverting changes.
Training on augumented user 115072 46/50 current_auc = 0.5357142857142857
User 115072 AUC after training: 0.5357142857142857
User 115072 does not improve AUC. Reverting changes.
Training on augumented user 99468 47/50 current_auc = 0.5357142857142857
User 99468 AUC after training: 0.5357142857142857
User 99468 does not improve AUC. Reverting changes.
Training on augumented user 15519 48/50 current_auc = 0.5357142857142857
User 15519 AUC after training: 0.5357142857142857
User 15519 does not improve AUC. Reverting changes.
Training on augumented user 3832 49/50 current_auc = 0.5357142857142857
User 3832 AUC after training: 0.5357142857142857
User 3832 does not improve AUC. Reverting changes.
[2024-12-02 19:37:23.635451] start test user 5002 219/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:37:24.072255] start test user 5002 219/568 recall augumented users by random, augumented_users = [12580, 107263, 36913, 126052, 64881, 90280, 18422, 102554, 43615, 117326, 102315, 61884, 107135, 109432, 47246, 135509, 17565, 135649, 87582, 10301, 1195, 36011, 6785, 50295, 107035, 70762, 118703, 30781, 44938, 26546, 29703, 136320, 122547, 61519, 106529, 112448, 106967, 89605, 125455, 122470, 105607, 137429, 47291, 105513, 85841, 1392, 113515, 6028, 119175, 37764]
[2024-12-02 19:37:24.087208] user = 5002 Cloud 219/568
[2024-12-02 19:37:24.096265] user = 5002 Local 219/568
[2024-12-02 19:37:24.158951] user = 5002 Local+ 219/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:37:26.420464] user = 5002 MPDA- 219/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 12580 0/50 current_auc = 1.0
User 12580 AUC after training: 1.0
User 12580 does not improve AUC. Reverting changes.
Training on augumented user 107263 1/50 current_auc = 1.0
User 107263 AUC after training: 1.0
User 107263 does not improve AUC. Reverting changes.
Training on augumented user 36913 2/50 current_auc = 1.0
User 36913 AUC after training: 1.0
User 36913 does not improve AUC. Reverting changes.
Training on augumented user 126052 3/50 current_auc = 1.0
User 126052 AUC after training: 1.0
User 126052 does not improve AUC. Reverting changes.
Training on augumented user 64881 4/50 current_auc = 1.0
User 64881 AUC after training: 1.0
User 64881 does not improve AUC. Reverting changes.
Training on augumented user 90280 5/50 current_auc = 1.0
User 90280 AUC after training: 1.0
User 90280 does not improve AUC. Reverting changes.
Training on augumented user 18422 6/50 current_auc = 1.0
User 18422 AUC after training: 1.0
User 18422 does not improve AUC. Reverting changes.
Training on augumented user 102554 7/50 current_auc = 1.0
User 102554 AUC after training: 1.0
User 102554 does not improve AUC. Reverting changes.
Training on augumented user 43615 8/50 current_auc = 1.0
User 43615 AUC after training: 1.0
User 43615 does not improve AUC. Reverting changes.
Training on augumented user 117326 9/50 current_auc = 1.0
User 117326 AUC after training: 1.0
User 117326 does not improve AUC. Reverting changes.
Training on augumented user 102315 10/50 current_auc = 1.0
User 102315 AUC after training: 1.0
User 102315 does not improve AUC. Reverting changes.
Training on augumented user 61884 11/50 current_auc = 1.0
User 61884 AUC after training: 1.0
User 61884 does not improve AUC. Reverting changes.
Training on augumented user 107135 12/50 current_auc = 1.0
User 107135 AUC after training: 1.0
User 107135 does not improve AUC. Reverting changes.
Training on augumented user 109432 13/50 current_auc = 1.0
User 109432 AUC after training: 1.0
User 109432 does not improve AUC. Reverting changes.
Training on augumented user 47246 14/50 current_auc = 1.0
User 47246 AUC after training: 1.0
User 47246 does not improve AUC. Reverting changes.
Training on augumented user 135509 15/50 current_auc = 1.0
User 135509 AUC after training: 1.0
User 135509 does not improve AUC. Reverting changes.
Training on augumented user 17565 16/50 current_auc = 1.0
User 17565 AUC after training: 1.0
User 17565 does not improve AUC. Reverting changes.
Training on augumented user 135649 17/50 current_auc = 1.0
User 135649 AUC after training: 1.0
User 135649 does not improve AUC. Reverting changes.
Training on augumented user 87582 18/50 current_auc = 1.0
User 87582 AUC after training: 1.0
User 87582 does not improve AUC. Reverting changes.
Training on augumented user 10301 19/50 current_auc = 1.0
User 10301 AUC after training: 1.0
User 10301 does not improve AUC. Reverting changes.
Training on augumented user 1195 20/50 current_auc = 1.0
User 1195 AUC after training: 1.0
User 1195 does not improve AUC. Reverting changes.
Training on augumented user 36011 21/50 current_auc = 1.0
User 36011 AUC after training: 1.0
User 36011 does not improve AUC. Reverting changes.
Training on augumented user 6785 22/50 current_auc = 1.0
User 6785 AUC after training: 1.0
User 6785 does not improve AUC. Reverting changes.
Training on augumented user 50295 23/50 current_auc = 1.0
User 50295 AUC after training: 1.0
User 50295 does not improve AUC. Reverting changes.
Training on augumented user 107035 24/50 current_auc = 1.0
User 107035 AUC after training: 1.0
User 107035 does not improve AUC. Reverting changes.
Training on augumented user 70762 25/50 current_auc = 1.0
User 70762 AUC after training: 1.0
User 70762 does not improve AUC. Reverting changes.
Training on augumented user 118703 26/50 current_auc = 1.0
User 118703 AUC after training: 1.0
User 118703 does not improve AUC. Reverting changes.
Training on augumented user 30781 27/50 current_auc = 1.0
User 30781 AUC after training: 1.0
User 30781 does not improve AUC. Reverting changes.
Training on augumented user 44938 28/50 current_auc = 1.0
User 44938 AUC after training: 1.0
User 44938 does not improve AUC. Reverting changes.
Training on augumented user 26546 29/50 current_auc = 1.0
User 26546 AUC after training: 1.0
User 26546 does not improve AUC. Reverting changes.
Training on augumented user 29703 30/50 current_auc = 1.0
User 29703 AUC after training: 1.0
User 29703 does not improve AUC. Reverting changes.
Training on augumented user 136320 31/50 current_auc = 1.0
User 136320 AUC after training: 1.0
User 136320 does not improve AUC. Reverting changes.
Training on augumented user 122547 32/50 current_auc = 1.0
User 122547 AUC after training: 1.0
User 122547 does not improve AUC. Reverting changes.
Training on augumented user 61519 33/50 current_auc = 1.0
User 61519 AUC after training: 1.0
User 61519 does not improve AUC. Reverting changes.
Training on augumented user 106529 34/50 current_auc = 1.0
User 106529 AUC after training: 1.0
User 106529 does not improve AUC. Reverting changes.
Training on augumented user 112448 35/50 current_auc = 1.0
User 112448 AUC after training: 1.0
User 112448 does not improve AUC. Reverting changes.
Training on augumented user 106967 36/50 current_auc = 1.0
User 106967 AUC after training: 1.0
User 106967 does not improve AUC. Reverting changes.
Training on augumented user 89605 37/50 current_auc = 1.0
User 89605 AUC after training: 1.0
User 89605 does not improve AUC. Reverting changes.
Training on augumented user 125455 38/50 current_auc = 1.0
User 125455 AUC after training: 1.0
User 125455 does not improve AUC. Reverting changes.
Training on augumented user 122470 39/50 current_auc = 1.0
User 122470 AUC after training: 1.0
User 122470 does not improve AUC. Reverting changes.
Training on augumented user 105607 40/50 current_auc = 1.0
User 105607 AUC after training: 1.0
User 105607 does not improve AUC. Reverting changes.
Training on augumented user 137429 41/50 current_auc = 1.0
User 137429 AUC after training: 1.0
User 137429 does not improve AUC. Reverting changes.
Training on augumented user 47291 42/50 current_auc = 1.0
User 47291 AUC after training: 1.0
User 47291 does not improve AUC. Reverting changes.
Training on augumented user 105513 43/50 current_auc = 1.0
User 105513 AUC after training: 1.0
User 105513 does not improve AUC. Reverting changes.
Training on augumented user 85841 44/50 current_auc = 1.0
User 85841 AUC after training: 1.0
User 85841 does not improve AUC. Reverting changes.
Training on augumented user 1392 45/50 current_auc = 1.0
User 1392 AUC after training: 1.0
User 1392 does not improve AUC. Reverting changes.
Training on augumented user 113515 46/50 current_auc = 1.0
User 113515 AUC after training: 1.0
User 113515 does not improve AUC. Reverting changes.
Training on augumented user 6028 47/50 current_auc = 1.0
User 6028 AUC after training: 1.0
User 6028 does not improve AUC. Reverting changes.
Training on augumented user 119175 48/50 current_auc = 1.0
User 119175 AUC after training: 1.0
User 119175 does not improve AUC. Reverting changes.
Training on augumented user 37764 49/50 current_auc = 1.0
User 37764 AUC after training: 1.0
User 37764 does not improve AUC. Reverting changes.
[2024-12-02 19:37:57.704013] start test user 5032 220/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:37:58.190578] start test user 5032 220/568 recall augumented users by random, augumented_users = [38782, 31174, 42336, 119712, 5122, 41733, 13326, 130961, 63649, 78511, 123302, 8996, 54825, 101952, 103679, 108827, 25218, 2167, 86424, 6618, 103585, 10296, 109896, 101766, 106714, 84928, 47110, 121961, 111362, 50890, 38215, 123445, 99828, 108413, 33451, 79562, 21496, 43100, 118830, 83030, 62963, 99038, 74003, 79021, 123813, 433, 9069, 92161, 64457, 61153]
[2024-12-02 19:37:58.218023] user = 5032 Cloud 220/568
[2024-12-02 19:37:58.234194] user = 5032 Local 220/568
[2024-12-02 19:37:58.271884] user = 5032 Local+ 220/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:38:00.366811] user = 5032 MPDA- 220/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 38782 0/50 current_auc = 0.5
User 38782 AUC after training: 0.5
User 38782 does not improve AUC. Reverting changes.
Training on augumented user 31174 1/50 current_auc = 0.5
User 31174 AUC after training: 0.5
User 31174 does not improve AUC. Reverting changes.
Training on augumented user 42336 2/50 current_auc = 0.5
User 42336 AUC after training: 0.5
User 42336 does not improve AUC. Reverting changes.
Training on augumented user 119712 3/50 current_auc = 0.5
User 119712 AUC after training: 0.5
User 119712 does not improve AUC. Reverting changes.
Training on augumented user 5122 4/50 current_auc = 0.5
User 5122 AUC after training: 0.5
User 5122 does not improve AUC. Reverting changes.
Training on augumented user 41733 5/50 current_auc = 0.5
User 41733 AUC after training: 0.5
User 41733 does not improve AUC. Reverting changes.
Training on augumented user 13326 6/50 current_auc = 0.5
User 13326 AUC after training: 0.5
User 13326 does not improve AUC. Reverting changes.
Training on augumented user 130961 7/50 current_auc = 0.5
User 130961 AUC after training: 0.5
User 130961 does not improve AUC. Reverting changes.
Training on augumented user 63649 8/50 current_auc = 0.5
User 63649 AUC after training: 0.5
User 63649 does not improve AUC. Reverting changes.
Training on augumented user 78511 9/50 current_auc = 0.5
User 78511 AUC after training: 0.5
User 78511 does not improve AUC. Reverting changes.
Training on augumented user 123302 10/50 current_auc = 0.5
User 123302 AUC after training: 0.5
User 123302 does not improve AUC. Reverting changes.
Training on augumented user 8996 11/50 current_auc = 0.5
User 8996 AUC after training: 0.5
User 8996 does not improve AUC. Reverting changes.
Training on augumented user 54825 12/50 current_auc = 0.5
User 54825 AUC after training: 0.5
User 54825 does not improve AUC. Reverting changes.
Training on augumented user 101952 13/50 current_auc = 0.5
User 101952 AUC after training: 0.5
User 101952 does not improve AUC. Reverting changes.
Training on augumented user 103679 14/50 current_auc = 0.5
User 103679 AUC after training: 0.5
User 103679 does not improve AUC. Reverting changes.
Training on augumented user 108827 15/50 current_auc = 0.5
User 108827 AUC after training: 0.5
User 108827 does not improve AUC. Reverting changes.
Training on augumented user 25218 16/50 current_auc = 0.5
User 25218 AUC after training: 0.5
User 25218 does not improve AUC. Reverting changes.
Training on augumented user 2167 17/50 current_auc = 0.5
User 2167 AUC after training: 0.5
User 2167 does not improve AUC. Reverting changes.
Training on augumented user 86424 18/50 current_auc = 0.5
User 86424 AUC after training: 0.5
User 86424 does not improve AUC. Reverting changes.
Training on augumented user 6618 19/50 current_auc = 0.5
User 6618 AUC after training: 0.5
User 6618 does not improve AUC. Reverting changes.
Training on augumented user 103585 20/50 current_auc = 0.5
User 103585 AUC after training: 0.5
User 103585 does not improve AUC. Reverting changes.
Training on augumented user 10296 21/50 current_auc = 0.5
User 10296 AUC after training: 0.5
User 10296 does not improve AUC. Reverting changes.
Training on augumented user 109896 22/50 current_auc = 0.5
User 109896 AUC after training: 0.5
User 109896 does not improve AUC. Reverting changes.
Training on augumented user 101766 23/50 current_auc = 0.5
User 101766 AUC after training: 0.5
User 101766 does not improve AUC. Reverting changes.
Training on augumented user 106714 24/50 current_auc = 0.5
User 106714 AUC after training: 0.5
User 106714 does not improve AUC. Reverting changes.
Training on augumented user 84928 25/50 current_auc = 0.5
User 84928 AUC after training: 0.5
User 84928 does not improve AUC. Reverting changes.
Training on augumented user 47110 26/50 current_auc = 0.5
User 47110 AUC after training: 0.5
User 47110 does not improve AUC. Reverting changes.
Training on augumented user 121961 27/50 current_auc = 0.5
User 121961 AUC after training: 0.5
User 121961 does not improve AUC. Reverting changes.
Training on augumented user 111362 28/50 current_auc = 0.5
User 111362 AUC after training: 0.5
User 111362 does not improve AUC. Reverting changes.
Training on augumented user 50890 29/50 current_auc = 0.5
User 50890 AUC after training: 0.5
User 50890 does not improve AUC. Reverting changes.
Training on augumented user 38215 30/50 current_auc = 0.5
User 38215 AUC after training: 0.5
User 38215 does not improve AUC. Reverting changes.
Training on augumented user 123445 31/50 current_auc = 0.5
User 123445 AUC after training: 0.5
User 123445 does not improve AUC. Reverting changes.
Training on augumented user 99828 32/50 current_auc = 0.5
User 99828 AUC after training: 0.5
User 99828 does not improve AUC. Reverting changes.
Training on augumented user 108413 33/50 current_auc = 0.5
User 108413 AUC after training: 0.5
User 108413 does not improve AUC. Reverting changes.
Training on augumented user 33451 34/50 current_auc = 0.5
User 33451 AUC after training: 0.5
User 33451 does not improve AUC. Reverting changes.
Training on augumented user 79562 35/50 current_auc = 0.5
User 79562 AUC after training: 0.5
User 79562 does not improve AUC. Reverting changes.
Training on augumented user 21496 36/50 current_auc = 0.5
User 21496 AUC after training: 0.5
User 21496 does not improve AUC. Reverting changes.
Training on augumented user 43100 37/50 current_auc = 0.5
User 43100 AUC after training: 0.5
User 43100 does not improve AUC. Reverting changes.
Training on augumented user 118830 38/50 current_auc = 0.5
User 118830 AUC after training: 0.5
User 118830 does not improve AUC. Reverting changes.
Training on augumented user 83030 39/50 current_auc = 0.5
User 83030 AUC after training: 0.5
User 83030 does not improve AUC. Reverting changes.
Training on augumented user 62963 40/50 current_auc = 0.5
User 62963 AUC after training: 0.5
User 62963 does not improve AUC. Reverting changes.
Training on augumented user 99038 41/50 current_auc = 0.5
User 99038 AUC after training: 0.5
User 99038 does not improve AUC. Reverting changes.
Training on augumented user 74003 42/50 current_auc = 0.5
User 74003 AUC after training: 0.5
User 74003 does not improve AUC. Reverting changes.
Training on augumented user 79021 43/50 current_auc = 0.5
User 79021 AUC after training: 0.5
User 79021 does not improve AUC. Reverting changes.
Training on augumented user 123813 44/50 current_auc = 0.5
User 123813 AUC after training: 0.5
User 123813 does not improve AUC. Reverting changes.
Training on augumented user 433 45/50 current_auc = 0.5
User 433 AUC after training: 0.5
User 433 does not improve AUC. Reverting changes.
Training on augumented user 9069 46/50 current_auc = 0.5
User 9069 AUC after training: 0.5
User 9069 does not improve AUC. Reverting changes.
Training on augumented user 92161 47/50 current_auc = 0.5
User 92161 AUC after training: 0.5
User 92161 does not improve AUC. Reverting changes.
Training on augumented user 64457 48/50 current_auc = 0.5
User 64457 AUC after training: 0.5
User 64457 does not improve AUC. Reverting changes.
Training on augumented user 61153 49/50 current_auc = 0.5
User 61153 AUC after training: 0.5
User 61153 does not improve AUC. Reverting changes.
[2024-12-02 19:38:25.549511] start test user 5036 221/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:38:25.853446] start test user 5036 221/568 recall augumented users by random, augumented_users = [15056, 130428, 4023, 136888, 113262, 106521, 52626, 12492, 136837, 4594, 56483, 67509, 90955, 42004, 36463, 134766, 120019, 129142, 25275, 37280, 39110, 124995, 34085, 92619, 63901, 108566, 115579, 121359, 77973, 13774, 108589, 134416, 135745, 36986, 80929, 6132, 134014, 114047, 69260, 73698, 76100, 116131, 39951, 62107, 60108, 114828, 119983, 2406, 62378, 4765]
[2024-12-02 19:38:25.861401] user = 5036 Cloud 221/568
[2024-12-02 19:38:25.893723] user = 5036 Local 221/568
[2024-12-02 19:38:25.958644] user = 5036 Local+ 221/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:38:26.875932] user = 5036 MPDA- 221/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6702226345083487
Training on augumented user 15056 0/50 current_auc = 0.6702226345083487
User 15056 AUC after training: 0.6703653489367775
User 15056 improves AUC. Keeping the model.
Training on augumented user 130428 1/50 current_auc = 0.6703653489367775
User 130428 AUC after training: 0.6702226345083487
User 130428 does not improve AUC. Reverting changes.
Training on augumented user 4023 2/50 current_auc = 0.6703653489367775
User 4023 AUC after training: 0.6706686170971885
User 4023 improves AUC. Keeping the model.
Training on augumented user 136888 3/50 current_auc = 0.6706686170971885
User 136888 AUC after training: 0.6708470101327244
User 136888 improves AUC. Keeping the model.
Training on augumented user 113262 4/50 current_auc = 0.6708470101327244
User 113262 AUC after training: 0.6705080633652062
User 113262 does not improve AUC. Reverting changes.
Training on augumented user 106521 5/50 current_auc = 0.6708470101327244
User 106521 AUC after training: 0.6710789210789211
User 106521 improves AUC. Keeping the model.
Training on augumented user 52626 6/50 current_auc = 0.6710789210789211
User 52626 AUC after training: 0.6709005280433852
User 52626 does not improve AUC. Reverting changes.
Training on augumented user 12492 7/50 current_auc = 0.6710789210789211
User 12492 AUC after training: 0.67077565291851
User 12492 does not improve AUC. Reverting changes.
Training on augumented user 136837 8/50 current_auc = 0.6710789210789211
User 136837 AUC after training: 0.6706507777936349
User 136837 does not improve AUC. Reverting changes.
Training on augumented user 4594 9/50 current_auc = 0.6710789210789211
User 4594 AUC after training: 0.669080919080919
User 4594 does not improve AUC. Reverting changes.
Training on augumented user 56483 10/50 current_auc = 0.6710789210789211
User 56483 AUC after training: 0.6709005280433852
User 56483 does not improve AUC. Reverting changes.
Training on augumented user 67509 11/50 current_auc = 0.6710789210789211
User 67509 AUC after training: 0.6708113315256172
User 67509 does not improve AUC. Reverting changes.
Training on augumented user 90955 12/50 current_auc = 0.6710789210789211
User 90955 AUC after training: 0.670864849436278
User 90955 does not improve AUC. Reverting changes.
Training on augumented user 42004 13/50 current_auc = 0.6710789210789211
User 42004 AUC after training: 0.6711502782931353
User 42004 improves AUC. Keeping the model.
Training on augumented user 36463 14/50 current_auc = 0.6711502782931353
User 36463 AUC after training: 0.6707934922220636
User 36463 does not improve AUC. Reverting changes.
Training on augumented user 134766 15/50 current_auc = 0.6711502782931353
User 134766 AUC after training: 0.6712216355073498
User 134766 improves AUC. Keeping the model.
Training on augumented user 120019 16/50 current_auc = 0.6712216355073498
User 120019 AUC after training: 0.6711502782931354
User 120019 does not improve AUC. Reverting changes.
Training on augumented user 129142 17/50 current_auc = 0.6712216355073498
User 129142 AUC after training: 0.6714713857571001
User 129142 improves AUC. Keeping the model.
Training on augumented user 25275 18/50 current_auc = 0.6714713857571001
User 25275 AUC after training: 0.6715427429713143
User 25275 improves AUC. Keeping the model.
Training on augumented user 37280 19/50 current_auc = 0.6715427429713143
User 37280 AUC after training: 0.6718281718281719
User 37280 improves AUC. Keeping the model.
Training on augumented user 39110 20/50 current_auc = 0.6718281718281719
User 39110 AUC after training: 0.6716854573997432
User 39110 does not improve AUC. Reverting changes.
Training on augumented user 124995 21/50 current_auc = 0.6718281718281719
User 124995 AUC after training: 0.6717568146139574
User 124995 does not improve AUC. Reverting changes.
Training on augumented user 34085 22/50 current_auc = 0.6718281718281719
User 34085 AUC after training: 0.6719887255601541
User 34085 improves AUC. Keeping the model.
Training on augumented user 92619 23/50 current_auc = 0.6719887255601541
User 92619 AUC after training: 0.6718995290423863
User 92619 does not improve AUC. Reverting changes.
Training on augumented user 63901 24/50 current_auc = 0.6719887255601541
User 63901 AUC after training: 0.6720957613814756
User 63901 improves AUC. Keeping the model.
Training on augumented user 108566 25/50 current_auc = 0.6720957613814756
User 108566 AUC after training: 0.6720600827743686
User 108566 does not improve AUC. Reverting changes.
Training on augumented user 115579 26/50 current_auc = 0.6720957613814756
User 115579 AUC after training: 0.6722741544170117
User 115579 improves AUC. Keeping the model.
Training on augumented user 121359 27/50 current_auc = 0.6722741544170117
User 121359 AUC after training: 0.6723098330241187
User 121359 improves AUC. Keeping the model.
Training on augumented user 77973 28/50 current_auc = 0.6723098330241187
User 77973 AUC after training: 0.6723811902383331
User 77973 improves AUC. Keeping the model.
Training on augumented user 13774 29/50 current_auc = 0.6723811902383331
User 13774 AUC after training: 0.6720600827743685
User 13774 does not improve AUC. Reverting changes.
Training on augumented user 108589 30/50 current_auc = 0.6723811902383331
User 108589 AUC after training: 0.6723098330241186
User 108589 does not improve AUC. Reverting changes.
Training on augumented user 134416 31/50 current_auc = 0.6723811902383331
User 134416 AUC after training: 0.6720065648637077
User 134416 does not improve AUC. Reverting changes.
Training on augumented user 135745 32/50 current_auc = 0.6723811902383331
User 135745 AUC after training: 0.6719530469530469
User 135745 does not improve AUC. Reverting changes.
Training on augumented user 36986 33/50 current_auc = 0.6723811902383331
User 36986 AUC after training: 0.6720957613814756
User 36986 does not improve AUC. Reverting changes.
Training on augumented user 80929 34/50 current_auc = 0.6723811902383331
User 80929 AUC after training: 0.672077922077922
User 80929 does not improve AUC. Reverting changes.
Training on augumented user 6132 35/50 current_auc = 0.6723811902383331
User 6132 AUC after training: 0.6722741544170115
User 6132 does not improve AUC. Reverting changes.
Training on augumented user 134014 36/50 current_auc = 0.6723811902383331
User 134014 AUC after training: 0.6720600827743685
User 134014 does not improve AUC. Reverting changes.
Training on augumented user 114047 37/50 current_auc = 0.6723811902383331
User 114047 AUC after training: 0.671863850435279
User 114047 does not improve AUC. Reverting changes.
Training on augumented user 69260 38/50 current_auc = 0.6723811902383331
User 69260 AUC after training: 0.6717924932210647
User 69260 does not improve AUC. Reverting changes.
Training on augumented user 73698 39/50 current_auc = 0.6723811902383331
User 73698 AUC after training: 0.6712216355073498
User 73698 does not improve AUC. Reverting changes.
Training on augumented user 76100 40/50 current_auc = 0.6723811902383331
User 76100 AUC after training: 0.6717389753104039
User 76100 does not improve AUC. Reverting changes.
Training on augumented user 116131 41/50 current_auc = 0.6723811902383331
User 116131 AUC after training: 0.6722741544170115
User 116131 does not improve AUC. Reverting changes.
Training on augumented user 39951 42/50 current_auc = 0.6723811902383331
User 39951 AUC after training: 0.6724882260596547
User 39951 improves AUC. Keeping the model.
Training on augumented user 62107 43/50 current_auc = 0.6724882260596547
User 62107 AUC after training: 0.6722384758099045
User 62107 does not improve AUC. Reverting changes.
Training on augumented user 60108 44/50 current_auc = 0.6724882260596547
User 60108 AUC after training: 0.6723811902383331
User 60108 does not improve AUC. Reverting changes.
Training on augumented user 114828 45/50 current_auc = 0.6724882260596547
User 114828 AUC after training: 0.6724525474525475
User 114828 does not improve AUC. Reverting changes.
Training on augumented user 119983 46/50 current_auc = 0.6724882260596547
User 119983 AUC after training: 0.6721492792921364
User 119983 does not improve AUC. Reverting changes.
Training on augumented user 2406 47/50 current_auc = 0.6724882260596547
User 2406 AUC after training: 0.6720600827743685
User 2406 does not improve AUC. Reverting changes.
Training on augumented user 62378 48/50 current_auc = 0.6724882260596547
User 62378 AUC after training: 0.6724882260596546
User 62378 does not improve AUC. Reverting changes.
Training on augumented user 4765 49/50 current_auc = 0.6724882260596547
User 4765 AUC after training: 0.6727022977022977
User 4765 improves AUC. Keeping the model.
[2024-12-02 19:38:53.342455] start test user 5066 222/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:38:53.755921] start test user 5066 222/568 recall augumented users by random, augumented_users = [94031, 119516, 110996, 55080, 114021, 42536, 4889, 8181, 61716, 41195, 1407, 132923, 53828, 111361, 114599, 109844, 75989, 67465, 127274, 82230, 96464, 108817, 70771, 98143, 108425, 94245, 85875, 75622, 2955, 121105, 8332, 114054, 128881, 117193, 4864, 67136, 17889, 116988, 8657, 62134, 59482, 113774, 77112, 88899, 1088, 21679, 36182, 49055, 43873, 125710]
[2024-12-02 19:38:53.770331] user = 5066 Cloud 222/568
[2024-12-02 19:38:53.780554] user = 5066 Local 222/568
[2024-12-02 19:38:53.808702] user = 5066 Local+ 222/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:38:55.961417] user = 5066 MPDA- 222/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6589446589446589
Training on augumented user 94031 0/50 current_auc = 0.6589446589446589
User 94031 AUC after training: 0.6615186615186615
User 94031 improves AUC. Keeping the model.
Training on augumented user 119516 1/50 current_auc = 0.6615186615186615
User 119516 AUC after training: 0.6589446589446589
User 119516 does not improve AUC. Reverting changes.
Training on augumented user 110996 2/50 current_auc = 0.6615186615186615
User 110996 AUC after training: 0.6615186615186616
User 110996 improves AUC. Keeping the model.
Training on augumented user 55080 3/50 current_auc = 0.6615186615186616
User 55080 AUC after training: 0.6602316602316602
User 55080 does not improve AUC. Reverting changes.
Training on augumented user 114021 4/50 current_auc = 0.6615186615186616
User 114021 AUC after training: 0.6589446589446589
User 114021 does not improve AUC. Reverting changes.
Training on augumented user 42536 5/50 current_auc = 0.6615186615186616
User 42536 AUC after training: 0.6422136422136423
User 42536 does not improve AUC. Reverting changes.
Training on augumented user 4889 6/50 current_auc = 0.6615186615186616
User 4889 AUC after training: 0.6576576576576576
User 4889 does not improve AUC. Reverting changes.
Training on augumented user 8181 7/50 current_auc = 0.6615186615186616
User 8181 AUC after training: 0.6525096525096524
User 8181 does not improve AUC. Reverting changes.
Training on augumented user 61716 8/50 current_auc = 0.6615186615186616
User 61716 AUC after training: 0.6537966537966539
User 61716 does not improve AUC. Reverting changes.
Training on augumented user 41195 9/50 current_auc = 0.6615186615186616
User 41195 AUC after training: 0.6615186615186616
User 41195 does not improve AUC. Reverting changes.
Training on augumented user 1407 10/50 current_auc = 0.6615186615186616
User 1407 AUC after training: 0.6602316602316602
User 1407 does not improve AUC. Reverting changes.
Training on augumented user 132923 11/50 current_auc = 0.6615186615186616
User 132923 AUC after training: 0.6628056628056628
User 132923 improves AUC. Keeping the model.
Training on augumented user 53828 12/50 current_auc = 0.6628056628056628
User 53828 AUC after training: 0.6550836550836551
User 53828 does not improve AUC. Reverting changes.
Training on augumented user 111361 13/50 current_auc = 0.6628056628056628
User 111361 AUC after training: 0.6628056628056628
User 111361 does not improve AUC. Reverting changes.
Training on augumented user 114599 14/50 current_auc = 0.6628056628056628
User 114599 AUC after training: 0.6602316602316601
User 114599 does not improve AUC. Reverting changes.
Training on augumented user 109844 15/50 current_auc = 0.6628056628056628
User 109844 AUC after training: 0.6602316602316602
User 109844 does not improve AUC. Reverting changes.
Training on augumented user 75989 16/50 current_auc = 0.6628056628056628
User 75989 AUC after training: 0.667953667953668
User 75989 improves AUC. Keeping the model.
Training on augumented user 67465 17/50 current_auc = 0.667953667953668
User 67465 AUC after training: 0.6666666666666667
User 67465 does not improve AUC. Reverting changes.
Training on augumented user 127274 18/50 current_auc = 0.667953667953668
User 127274 AUC after training: 0.6653796653796653
User 127274 does not improve AUC. Reverting changes.
Training on augumented user 82230 19/50 current_auc = 0.667953667953668
User 82230 AUC after training: 0.6666666666666666
User 82230 does not improve AUC. Reverting changes.
Training on augumented user 96464 20/50 current_auc = 0.667953667953668
User 96464 AUC after training: 0.6628056628056628
User 96464 does not improve AUC. Reverting changes.
Training on augumented user 108817 21/50 current_auc = 0.667953667953668
User 108817 AUC after training: 0.6653796653796654
User 108817 does not improve AUC. Reverting changes.
Training on augumented user 70771 22/50 current_auc = 0.667953667953668
User 70771 AUC after training: 0.6615186615186615
User 70771 does not improve AUC. Reverting changes.
Training on augumented user 98143 23/50 current_auc = 0.667953667953668
User 98143 AUC after training: 0.6653796653796653
User 98143 does not improve AUC. Reverting changes.
Training on augumented user 108425 24/50 current_auc = 0.667953667953668
User 108425 AUC after training: 0.6666666666666666
User 108425 does not improve AUC. Reverting changes.
Training on augumented user 94245 25/50 current_auc = 0.667953667953668
User 94245 AUC after training: 0.6563706563706564
User 94245 does not improve AUC. Reverting changes.
Training on augumented user 85875 26/50 current_auc = 0.667953667953668
User 85875 AUC after training: 0.6653796653796654
User 85875 does not improve AUC. Reverting changes.
Training on augumented user 75622 27/50 current_auc = 0.667953667953668
User 75622 AUC after training: 0.6653796653796654
User 75622 does not improve AUC. Reverting changes.
Training on augumented user 2955 28/50 current_auc = 0.667953667953668
User 2955 AUC after training: 0.658944658944659
User 2955 does not improve AUC. Reverting changes.
Training on augumented user 121105 29/50 current_auc = 0.667953667953668
User 121105 AUC after training: 0.6666666666666667
User 121105 does not improve AUC. Reverting changes.
Training on augumented user 8332 30/50 current_auc = 0.667953667953668
User 8332 AUC after training: 0.6666666666666666
User 8332 does not improve AUC. Reverting changes.
Training on augumented user 114054 31/50 current_auc = 0.667953667953668
User 114054 AUC after training: 0.6653796653796654
User 114054 does not improve AUC. Reverting changes.
Training on augumented user 128881 32/50 current_auc = 0.667953667953668
User 128881 AUC after training: 0.6640926640926641
User 128881 does not improve AUC. Reverting changes.
Training on augumented user 117193 33/50 current_auc = 0.667953667953668
User 117193 AUC after training: 0.6615186615186616
User 117193 does not improve AUC. Reverting changes.
Training on augumented user 4864 34/50 current_auc = 0.667953667953668
User 4864 AUC after training: 0.6563706563706564
User 4864 does not improve AUC. Reverting changes.
Training on augumented user 67136 35/50 current_auc = 0.667953667953668
User 67136 AUC after training: 0.6628056628056628
User 67136 does not improve AUC. Reverting changes.
Training on augumented user 17889 36/50 current_auc = 0.667953667953668
User 17889 AUC after training: 0.6628056628056628
User 17889 does not improve AUC. Reverting changes.
Training on augumented user 116988 37/50 current_auc = 0.667953667953668
User 116988 AUC after training: 0.6692406692406693
User 116988 improves AUC. Keeping the model.
Training on augumented user 8657 38/50 current_auc = 0.6692406692406693
User 8657 AUC after training: 0.6640926640926641
User 8657 does not improve AUC. Reverting changes.
Training on augumented user 62134 39/50 current_auc = 0.6692406692406693
User 62134 AUC after training: 0.6602316602316602
User 62134 does not improve AUC. Reverting changes.
Training on augumented user 59482 40/50 current_auc = 0.6692406692406693
User 59482 AUC after training: 0.6628056628056628
User 59482 does not improve AUC. Reverting changes.
Training on augumented user 113774 41/50 current_auc = 0.6692406692406693
User 113774 AUC after training: 0.6653796653796653
User 113774 does not improve AUC. Reverting changes.
Training on augumented user 77112 42/50 current_auc = 0.6692406692406693
User 77112 AUC after training: 0.6666666666666666
User 77112 does not improve AUC. Reverting changes.
Training on augumented user 88899 43/50 current_auc = 0.6692406692406693
User 88899 AUC after training: 0.6731016731016731
User 88899 improves AUC. Keeping the model.
Training on augumented user 1088 44/50 current_auc = 0.6731016731016731
User 1088 AUC after training: 0.6731016731016731
User 1088 does not improve AUC. Reverting changes.
Training on augumented user 21679 45/50 current_auc = 0.6731016731016731
User 21679 AUC after training: 0.6550836550836551
User 21679 does not improve AUC. Reverting changes.
Training on augumented user 36182 46/50 current_auc = 0.6731016731016731
User 36182 AUC after training: 0.6653796653796653
User 36182 does not improve AUC. Reverting changes.
Training on augumented user 49055 47/50 current_auc = 0.6731016731016731
User 49055 AUC after training: 0.6653796653796653
User 49055 does not improve AUC. Reverting changes.
Training on augumented user 43873 48/50 current_auc = 0.6731016731016731
User 43873 AUC after training: 0.6653796653796654
User 43873 does not improve AUC. Reverting changes.
Training on augumented user 125710 49/50 current_auc = 0.6731016731016731
User 125710 AUC after training: 0.6666666666666667
User 125710 does not improve AUC. Reverting changes.
[2024-12-02 19:39:22.219438] start test user 5070 223/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:39:22.706617] start test user 5070 223/568 recall augumented users by random, augumented_users = [41035, 42458, 10244, 81362, 54409, 50699, 87766, 97055, 50790, 80348, 70538, 126294, 57621, 15792, 14166, 113688, 78163, 28743, 81228, 126778, 41853, 16119, 124410, 114608, 117444, 120027, 124831, 111120, 119219, 80971, 136972, 69697, 28151, 91987, 70175, 49701, 133944, 19926, 28586, 82916, 43325, 30152, 29171, 127554, 60024, 104288, 133699, 102553, 76944, 14804]
[2024-12-02 19:39:22.722054] user = 5070 Cloud 223/568
[2024-12-02 19:39:22.735567] user = 5070 Local 223/568
[2024-12-02 19:39:22.877512] user = 5070 Local+ 223/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:39:24.943088] user = 5070 MPDA- 223/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4642857142857143
Training on augumented user 41035 0/50 current_auc = 0.4642857142857143
User 41035 AUC after training: 0.462406015037594
User 41035 does not improve AUC. Reverting changes.
Training on augumented user 42458 1/50 current_auc = 0.4642857142857143
User 42458 AUC after training: 0.46052631578947373
User 42458 does not improve AUC. Reverting changes.
Training on augumented user 10244 2/50 current_auc = 0.4642857142857143
User 10244 AUC after training: 0.46052631578947373
User 10244 does not improve AUC. Reverting changes.
Training on augumented user 81362 3/50 current_auc = 0.4642857142857143
User 81362 AUC after training: 0.46052631578947373
User 81362 does not improve AUC. Reverting changes.
Training on augumented user 54409 4/50 current_auc = 0.4642857142857143
User 54409 AUC after training: 0.46052631578947373
User 54409 does not improve AUC. Reverting changes.
Training on augumented user 50699 5/50 current_auc = 0.4642857142857143
User 50699 AUC after training: 0.46240601503759404
User 50699 does not improve AUC. Reverting changes.
Training on augumented user 87766 6/50 current_auc = 0.4642857142857143
User 87766 AUC after training: 0.462406015037594
User 87766 does not improve AUC. Reverting changes.
Training on augumented user 97055 7/50 current_auc = 0.4642857142857143
User 97055 AUC after training: 0.4642857142857143
User 97055 does not improve AUC. Reverting changes.
Training on augumented user 50790 8/50 current_auc = 0.4642857142857143
User 50790 AUC after training: 0.4567669172932331
User 50790 does not improve AUC. Reverting changes.
Training on augumented user 80348 9/50 current_auc = 0.4642857142857143
User 80348 AUC after training: 0.46052631578947373
User 80348 does not improve AUC. Reverting changes.
Training on augumented user 70538 10/50 current_auc = 0.4642857142857143
User 70538 AUC after training: 0.46240601503759404
User 70538 does not improve AUC. Reverting changes.
Training on augumented user 126294 11/50 current_auc = 0.4642857142857143
User 126294 AUC after training: 0.4661654135338346
User 126294 improves AUC. Keeping the model.
Training on augumented user 57621 12/50 current_auc = 0.4661654135338346
User 57621 AUC after training: 0.46616541353383456
User 57621 does not improve AUC. Reverting changes.
Training on augumented user 15792 13/50 current_auc = 0.4661654135338346
User 15792 AUC after training: 0.462406015037594
User 15792 does not improve AUC. Reverting changes.
Training on augumented user 14166 14/50 current_auc = 0.4661654135338346
User 14166 AUC after training: 0.46804511278195493
User 14166 improves AUC. Keeping the model.
Training on augumented user 113688 15/50 current_auc = 0.46804511278195493
User 113688 AUC after training: 0.46616541353383456
User 113688 does not improve AUC. Reverting changes.
Training on augumented user 78163 16/50 current_auc = 0.46804511278195493
User 78163 AUC after training: 0.4699248120300752
User 78163 improves AUC. Keeping the model.
Training on augumented user 28743 17/50 current_auc = 0.4699248120300752
User 28743 AUC after training: 0.46804511278195493
User 28743 does not improve AUC. Reverting changes.
Training on augumented user 81228 18/50 current_auc = 0.4699248120300752
User 81228 AUC after training: 0.4718045112781955
User 81228 improves AUC. Keeping the model.
Training on augumented user 126778 19/50 current_auc = 0.4718045112781955
User 126778 AUC after training: 0.46804511278195493
User 126778 does not improve AUC. Reverting changes.
Training on augumented user 41853 20/50 current_auc = 0.4718045112781955
User 41853 AUC after training: 0.4642857142857143
User 41853 does not improve AUC. Reverting changes.
Training on augumented user 16119 21/50 current_auc = 0.4718045112781955
User 16119 AUC after training: 0.4718045112781955
User 16119 does not improve AUC. Reverting changes.
Training on augumented user 124410 22/50 current_auc = 0.4718045112781955
User 124410 AUC after training: 0.46804511278195493
User 124410 does not improve AUC. Reverting changes.
Training on augumented user 114608 23/50 current_auc = 0.4718045112781955
User 114608 AUC after training: 0.46616541353383456
User 114608 does not improve AUC. Reverting changes.
Training on augumented user 117444 24/50 current_auc = 0.4718045112781955
User 117444 AUC after training: 0.46616541353383456
User 117444 does not improve AUC. Reverting changes.
Training on augumented user 120027 25/50 current_auc = 0.4718045112781955
User 120027 AUC after training: 0.46616541353383456
User 120027 does not improve AUC. Reverting changes.
Training on augumented user 124831 26/50 current_auc = 0.4718045112781955
User 124831 AUC after training: 0.4642857142857143
User 124831 does not improve AUC. Reverting changes.
Training on augumented user 111120 27/50 current_auc = 0.4718045112781955
User 111120 AUC after training: 0.46616541353383456
User 111120 does not improve AUC. Reverting changes.
Training on augumented user 119219 28/50 current_auc = 0.4718045112781955
User 119219 AUC after training: 0.4699248120300752
User 119219 does not improve AUC. Reverting changes.
Training on augumented user 80971 29/50 current_auc = 0.4718045112781955
User 80971 AUC after training: 0.46804511278195493
User 80971 does not improve AUC. Reverting changes.
Training on augumented user 136972 30/50 current_auc = 0.4718045112781955
User 136972 AUC after training: 0.46804511278195493
User 136972 does not improve AUC. Reverting changes.
Training on augumented user 69697 31/50 current_auc = 0.4718045112781955
User 69697 AUC after training: 0.46616541353383456
User 69697 does not improve AUC. Reverting changes.
Training on augumented user 28151 32/50 current_auc = 0.4718045112781955
User 28151 AUC after training: 0.4736842105263158
User 28151 improves AUC. Keeping the model.
Training on augumented user 91987 33/50 current_auc = 0.4736842105263158
User 91987 AUC after training: 0.4755639097744361
User 91987 improves AUC. Keeping the model.
Training on augumented user 70175 34/50 current_auc = 0.4755639097744361
User 70175 AUC after training: 0.4718045112781955
User 70175 does not improve AUC. Reverting changes.
Training on augumented user 49701 35/50 current_auc = 0.4755639097744361
User 49701 AUC after training: 0.4755639097744361
User 49701 does not improve AUC. Reverting changes.
Training on augumented user 133944 36/50 current_auc = 0.4755639097744361
User 133944 AUC after training: 0.46804511278195493
User 133944 does not improve AUC. Reverting changes.
Training on augumented user 19926 37/50 current_auc = 0.4755639097744361
User 19926 AUC after training: 0.4718045112781955
User 19926 does not improve AUC. Reverting changes.
Training on augumented user 28586 38/50 current_auc = 0.4755639097744361
User 28586 AUC after training: 0.4642857142857143
User 28586 does not improve AUC. Reverting changes.
Training on augumented user 82916 39/50 current_auc = 0.4755639097744361
User 82916 AUC after training: 0.4718045112781955
User 82916 does not improve AUC. Reverting changes.
Training on augumented user 43325 40/50 current_auc = 0.4755639097744361
User 43325 AUC after training: 0.47556390977443613
User 43325 improves AUC. Keeping the model.
Training on augumented user 30152 41/50 current_auc = 0.47556390977443613
User 30152 AUC after training: 0.46616541353383456
User 30152 does not improve AUC. Reverting changes.
Training on augumented user 29171 42/50 current_auc = 0.47556390977443613
User 29171 AUC after training: 0.47744360902255645
User 29171 improves AUC. Keeping the model.
Training on augumented user 127554 43/50 current_auc = 0.47744360902255645
User 127554 AUC after training: 0.47744360902255645
User 127554 does not improve AUC. Reverting changes.
Training on augumented user 60024 44/50 current_auc = 0.47744360902255645
User 60024 AUC after training: 0.47744360902255645
User 60024 does not improve AUC. Reverting changes.
Training on augumented user 104288 45/50 current_auc = 0.47744360902255645
User 104288 AUC after training: 0.47744360902255645
User 104288 does not improve AUC. Reverting changes.
Training on augumented user 133699 46/50 current_auc = 0.47744360902255645
User 133699 AUC after training: 0.47556390977443613
User 133699 does not improve AUC. Reverting changes.
Training on augumented user 102553 47/50 current_auc = 0.47744360902255645
User 102553 AUC after training: 0.4736842105263158
User 102553 does not improve AUC. Reverting changes.
Training on augumented user 76944 48/50 current_auc = 0.47744360902255645
User 76944 AUC after training: 0.4718045112781955
User 76944 does not improve AUC. Reverting changes.
Training on augumented user 14804 49/50 current_auc = 0.47744360902255645
User 14804 AUC after training: 0.47744360902255645
User 14804 does not improve AUC. Reverting changes.
[2024-12-02 19:39:54.479410] start test user 5083 224/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:39:54.958982] start test user 5083 224/568 recall augumented users by random, augumented_users = [28202, 3660, 99996, 89519, 120109, 125592, 101757, 83943, 49168, 44784, 21276, 65351, 21988, 5689, 83543, 55276, 89087, 5381, 14920, 31820, 93371, 99281, 73733, 94511, 70863, 47074, 121739, 29250, 64830, 132192, 137335, 30546, 67967, 21857, 24240, 129400, 4185, 75433, 92525, 11290, 63981, 113961, 75629, 15438, 28740, 122787, 14695, 91948, 18333, 98046]
[2024-12-02 19:39:54.992834] user = 5083 Cloud 224/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:39:54.999426] user = 5083 Local 224/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:39:55.042398] user = 5083 Local+ 224/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:39:57.885621] user = 5083 MPDA- 224/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 28202 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28202 AUC after training: 0.5
User 28202 does not improve AUC. Reverting changes.
Training on augumented user 3660 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3660 AUC after training: 0.5
User 3660 does not improve AUC. Reverting changes.
Training on augumented user 99996 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99996 AUC after training: 0.5
User 99996 does not improve AUC. Reverting changes.
Training on augumented user 89519 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89519 AUC after training: 0.5
User 89519 does not improve AUC. Reverting changes.
Training on augumented user 120109 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120109 AUC after training: 0.5
User 120109 does not improve AUC. Reverting changes.
Training on augumented user 125592 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125592 AUC after training: 0.5
User 125592 does not improve AUC. Reverting changes.
Training on augumented user 101757 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101757 AUC after training: 0.5
User 101757 does not improve AUC. Reverting changes.
Training on augumented user 83943 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83943 AUC after training: 0.5
User 83943 does not improve AUC. Reverting changes.
Training on augumented user 49168 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49168 AUC after training: 0.5
User 49168 does not improve AUC. Reverting changes.
Training on augumented user 44784 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44784 AUC after training: 0.5
User 44784 does not improve AUC. Reverting changes.
Training on augumented user 21276 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21276 AUC after training: 0.5
User 21276 does not improve AUC. Reverting changes.
Training on augumented user 65351 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65351 AUC after training: 0.5
User 65351 does not improve AUC. Reverting changes.
Training on augumented user 21988 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21988 AUC after training: 0.5
User 21988 does not improve AUC. Reverting changes.
Training on augumented user 5689 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5689 AUC after training: 0.5
User 5689 does not improve AUC. Reverting changes.
Training on augumented user 83543 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83543 AUC after training: 0.5
User 83543 does not improve AUC. Reverting changes.
Training on augumented user 55276 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55276 AUC after training: 0.5
User 55276 does not improve AUC. Reverting changes.
Training on augumented user 89087 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89087 AUC after training: 0.5
User 89087 does not improve AUC. Reverting changes.
Training on augumented user 5381 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5381 AUC after training: 0.5
User 5381 does not improve AUC. Reverting changes.
Training on augumented user 14920 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14920 AUC after training: 0.5
User 14920 does not improve AUC. Reverting changes.
Training on augumented user 31820 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31820 AUC after training: 0.5
User 31820 does not improve AUC. Reverting changes.
Training on augumented user 93371 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93371 AUC after training: 0.5
User 93371 does not improve AUC. Reverting changes.
Training on augumented user 99281 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99281 AUC after training: 0.5
User 99281 does not improve AUC. Reverting changes.
Training on augumented user 73733 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73733 AUC after training: 0.5
User 73733 does not improve AUC. Reverting changes.
Training on augumented user 94511 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94511 AUC after training: 0.5
User 94511 does not improve AUC. Reverting changes.
Training on augumented user 70863 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70863 AUC after training: 0.5
User 70863 does not improve AUC. Reverting changes.
Training on augumented user 47074 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47074 AUC after training: 0.5
User 47074 does not improve AUC. Reverting changes.
Training on augumented user 121739 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121739 AUC after training: 0.5
User 121739 does not improve AUC. Reverting changes.
Training on augumented user 29250 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29250 AUC after training: 0.5
User 29250 does not improve AUC. Reverting changes.
Training on augumented user 64830 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64830 AUC after training: 0.5
User 64830 does not improve AUC. Reverting changes.
Training on augumented user 132192 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132192 AUC after training: 0.5
User 132192 does not improve AUC. Reverting changes.
Training on augumented user 137335 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137335 AUC after training: 0.5
User 137335 does not improve AUC. Reverting changes.
Training on augumented user 30546 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30546 AUC after training: 0.5
User 30546 does not improve AUC. Reverting changes.
Training on augumented user 67967 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67967 AUC after training: 0.5
User 67967 does not improve AUC. Reverting changes.
Training on augumented user 21857 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21857 AUC after training: 0.5
User 21857 does not improve AUC. Reverting changes.
Training on augumented user 24240 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24240 AUC after training: 0.5
User 24240 does not improve AUC. Reverting changes.
Training on augumented user 129400 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129400 AUC after training: 0.5
User 129400 does not improve AUC. Reverting changes.
Training on augumented user 4185 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4185 AUC after training: 0.5
User 4185 does not improve AUC. Reverting changes.
Training on augumented user 75433 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75433 AUC after training: 0.5
User 75433 does not improve AUC. Reverting changes.
Training on augumented user 92525 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92525 AUC after training: 0.5
User 92525 does not improve AUC. Reverting changes.
Training on augumented user 11290 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11290 AUC after training: 0.5
User 11290 does not improve AUC. Reverting changes.
Training on augumented user 63981 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63981 AUC after training: 0.5
User 63981 does not improve AUC. Reverting changes.
Training on augumented user 113961 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113961 AUC after training: 0.5
User 113961 does not improve AUC. Reverting changes.
Training on augumented user 75629 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75629 AUC after training: 0.5
User 75629 does not improve AUC. Reverting changes.
Training on augumented user 15438 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15438 AUC after training: 0.5
User 15438 does not improve AUC. Reverting changes.
Training on augumented user 28740 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28740 AUC after training: 0.5
User 28740 does not improve AUC. Reverting changes.
Training on augumented user 122787 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122787 AUC after training: 0.5
User 122787 does not improve AUC. Reverting changes.
Training on augumented user 14695 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14695 AUC after training: 0.5
User 14695 does not improve AUC. Reverting changes.
Training on augumented user 91948 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91948 AUC after training: 0.5
User 91948 does not improve AUC. Reverting changes.
Training on augumented user 18333 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18333 AUC after training: 0.5
User 18333 does not improve AUC. Reverting changes.
Training on augumented user 98046 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98046 AUC after training: 0.5
User 98046 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:40:26.378197] start test user 5107 225/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:40:26.796885] start test user 5107 225/568 recall augumented users by random, augumented_users = [16074, 81083, 13751, 95039, 15484, 69773, 71670, 4941, 28180, 30884, 71834, 34867, 66955, 27754, 85793, 72393, 122872, 134945, 39638, 122966, 62208, 6286, 52575, 55971, 121945, 13620, 64964, 19882, 118780, 67088, 110525, 43978, 136940, 24273, 60843, 47410, 7187, 61951, 55599, 25172, 30400, 121893, 79803, 34325, 131559, 51235, 121500, 52136, 82894, 89518]
[2024-12-02 19:40:26.812504] user = 5107 Cloud 225/568
[2024-12-02 19:40:26.851471] user = 5107 Local 225/568
[2024-12-02 19:40:26.949609] user = 5107 Local+ 225/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:40:28.481262] user = 5107 MPDA- 225/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5817757009345794
Training on augumented user 16074 0/50 current_auc = 0.5817757009345794
User 16074 AUC after training: 0.5818300369484894
User 16074 improves AUC. Keeping the model.
Training on augumented user 81083 1/50 current_auc = 0.5818300369484894
User 81083 AUC after training: 0.5821017170180395
User 81083 improves AUC. Keeping the model.
Training on augumented user 13751 2/50 current_auc = 0.5821017170180395
User 13751 AUC after training: 0.5818572049554445
User 13751 does not improve AUC. Reverting changes.
Training on augumented user 95039 3/50 current_auc = 0.5821017170180395
User 95039 AUC after training: 0.5816398608998044
User 95039 does not improve AUC. Reverting changes.
Training on augumented user 15484 4/50 current_auc = 0.5821017170180395
User 15484 AUC after training: 0.5815583568789393
User 15484 does not improve AUC. Reverting changes.
Training on augumented user 69773 5/50 current_auc = 0.5821017170180395
User 69773 AUC after training: 0.5815040208650294
User 69773 does not improve AUC. Reverting changes.
Training on augumented user 71670 6/50 current_auc = 0.5821017170180395
User 71670 AUC after training: 0.5820473810041296
User 71670 does not improve AUC. Reverting changes.
Training on augumented user 4941 7/50 current_auc = 0.5821017170180395
User 4941 AUC after training: 0.5815040208650294
User 4941 does not improve AUC. Reverting changes.
Training on augumented user 28180 8/50 current_auc = 0.5821017170180395
User 28180 AUC after training: 0.5821560530319496
User 28180 improves AUC. Keeping the model.
Training on augumented user 30884 9/50 current_auc = 0.5821560530319496
User 30884 AUC after training: 0.5816806129102369
User 30884 does not improve AUC. Reverting changes.
Training on augumented user 71834 10/50 current_auc = 0.5821560530319496
User 71834 AUC after training: 0.5819387089763095
User 71834 does not improve AUC. Reverting changes.
Training on augumented user 34867 11/50 current_auc = 0.5821560530319496
User 34867 AUC after training: 0.5823598130841121
User 34867 improves AUC. Keeping the model.
Training on augumented user 66955 12/50 current_auc = 0.5823598130841121
User 66955 AUC after training: 0.5816126928928493
User 66955 does not improve AUC. Reverting changes.
Training on augumented user 27754 13/50 current_auc = 0.5823598130841121
User 27754 AUC after training: 0.5821832210389046
User 27754 does not improve AUC. Reverting changes.
Training on augumented user 85793 14/50 current_auc = 0.5823598130841121
User 85793 AUC after training: 0.5825907411432297
User 85793 improves AUC. Keeping the model.
Training on augumented user 72393 15/50 current_auc = 0.5825907411432297
User 72393 AUC after training: 0.5825092371223647
User 72393 does not improve AUC. Reverting changes.
Training on augumented user 122872 16/50 current_auc = 0.5825907411432297
User 122872 AUC after training: 0.5834601173657901
User 122872 improves AUC. Keeping the model.
Training on augumented user 134945 17/50 current_auc = 0.5834601173657901
User 134945 AUC after training: 0.5836774614214302
User 134945 improves AUC. Keeping the model.
Training on augumented user 39638 18/50 current_auc = 0.5836774614214302
User 39638 AUC after training: 0.583378613344925
User 39638 does not improve AUC. Reverting changes.
Training on augumented user 122966 19/50 current_auc = 0.5836774614214302
User 122966 AUC after training: 0.583324277331015
User 122966 does not improve AUC. Reverting changes.
Training on augumented user 62208 20/50 current_auc = 0.5836774614214302
User 62208 AUC after training: 0.5828895892197349
User 62208 does not improve AUC. Reverting changes.
Training on augumented user 6286 21/50 current_auc = 0.5836774614214302
User 6286 AUC after training: 0.583432949358835
User 6286 does not improve AUC. Reverting changes.
Training on augumented user 52575 22/50 current_auc = 0.5836774614214302
User 52575 AUC after training: 0.583269941317105
User 52575 does not improve AUC. Reverting changes.
Training on augumented user 55971 23/50 current_auc = 0.5836774614214302
User 55971 AUC after training: 0.5828895892197348
User 55971 does not improve AUC. Reverting changes.
Training on augumented user 121945 24/50 current_auc = 0.5836774614214302
User 121945 AUC after training: 0.5837317974353402
User 121945 improves AUC. Keeping the model.
Training on augumented user 13620 25/50 current_auc = 0.5837317974353402
User 13620 AUC after training: 0.5838948054770703
User 13620 improves AUC. Keeping the model.
Training on augumented user 64964 26/50 current_auc = 0.5838948054770703
User 64964 AUC after training: 0.5835144533797001
User 64964 does not improve AUC. Reverting changes.
Training on augumented user 19882 27/50 current_auc = 0.5838948054770703
User 19882 AUC after training: 0.5835416213866551
User 19882 does not improve AUC. Reverting changes.
Training on augumented user 118780 28/50 current_auc = 0.5838948054770703
User 118780 AUC after training: 0.5840306455118452
User 118780 improves AUC. Keeping the model.
Training on augumented user 67088 29/50 current_auc = 0.5840306455118452
User 67088 AUC after training: 0.5838948054770703
User 67088 does not improve AUC. Reverting changes.
Training on augumented user 110525 30/50 current_auc = 0.5840306455118452
User 110525 AUC after training: 0.5824005650945447
User 110525 does not improve AUC. Reverting changes.
Training on augumented user 43978 31/50 current_auc = 0.5840306455118452
User 43978 AUC after training: 0.5835416213866551
User 43978 does not improve AUC. Reverting changes.
Training on augumented user 136940 32/50 current_auc = 0.5840306455118452
User 136940 AUC after training: 0.5828624212127798
User 136940 does not improve AUC. Reverting changes.
Training on augumented user 24273 33/50 current_auc = 0.5840306455118452
User 24273 AUC after training: 0.5837997174527276
User 24273 does not improve AUC. Reverting changes.
Training on augumented user 60843 34/50 current_auc = 0.5840306455118452
User 60843 AUC after training: 0.5835687893936101
User 60843 does not improve AUC. Reverting changes.
Training on augumented user 47410 35/50 current_auc = 0.5840306455118452
User 47410 AUC after training: 0.5837317974353402
User 47410 does not improve AUC. Reverting changes.
Training on augumented user 7187 36/50 current_auc = 0.5840306455118452
User 7187 AUC after training: 0.5839491414909802
User 7187 does not improve AUC. Reverting changes.
Training on augumented user 61951 37/50 current_auc = 0.5840306455118452
User 61951 AUC after training: 0.585959574005651
User 61951 improves AUC. Keeping the model.
Training on augumented user 55599 38/50 current_auc = 0.585959574005651
User 55599 AUC after training: 0.58340578135188
User 55599 does not improve AUC. Reverting changes.
Training on augumented user 25172 39/50 current_auc = 0.585959574005651
User 25172 AUC after training: 0.5856335579221909
User 25172 does not improve AUC. Reverting changes.
Training on augumented user 30400 40/50 current_auc = 0.585959574005651
User 30400 AUC after training: 0.5853890458595957
User 30400 does not improve AUC. Reverting changes.
Training on augumented user 121893 41/50 current_auc = 0.585959574005651
User 121893 AUC after training: 0.5856063899152358
User 121893 does not improve AUC. Reverting changes.
Training on augumented user 79803 42/50 current_auc = 0.585959574005651
User 79803 AUC after training: 0.5854162138665508
User 79803 does not improve AUC. Reverting changes.
Training on augumented user 34325 43/50 current_auc = 0.585959574005651
User 34325 AUC after training: 0.5857693979569659
User 34325 does not improve AUC. Reverting changes.
Training on augumented user 131559 44/50 current_auc = 0.585959574005651
User 131559 AUC after training: 0.5850630297761357
User 131559 does not improve AUC. Reverting changes.
Training on augumented user 51235 45/50 current_auc = 0.585959574005651
User 51235 AUC after training: 0.585850901977831
User 51235 does not improve AUC. Reverting changes.
Training on augumented user 121500 46/50 current_auc = 0.585959574005651
User 121500 AUC after training: 0.5865572701586611
User 121500 improves AUC. Keeping the model.
Training on augumented user 52136 47/50 current_auc = 0.5865572701586611
User 52136 AUC after training: 0.586176918061291
User 52136 does not improve AUC. Reverting changes.
Training on augumented user 82894 48/50 current_auc = 0.5865572701586611
User 82894 AUC after training: 0.5864214301238861
User 82894 does not improve AUC. Reverting changes.
Training on augumented user 89518 49/50 current_auc = 0.5865572701586611
User 89518 AUC after training: 0.5864485981308412
User 89518 does not improve AUC. Reverting changes.
[2024-12-02 19:40:59.095567] start test user 5138 226/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:40:59.518443] start test user 5138 226/568 recall augumented users by random, augumented_users = [118020, 75876, 67990, 132775, 47559, 52473, 42693, 138096, 98743, 103969, 30996, 122813, 8349, 59558, 112422, 98186, 72037, 74577, 15697, 12691, 54951, 84549, 76100, 56172, 110802, 8222, 30984, 62984, 117189, 625, 102946, 99067, 59534, 48779, 67752, 34533, 56893, 83648, 100565, 41275, 41346, 129259, 123779, 103904, 44476, 82344, 96123, 15533, 8682, 128505]
[2024-12-02 19:40:59.533438] user = 5138 Cloud 226/568
[2024-12-02 19:40:59.565383] user = 5138 Local 226/568
[2024-12-02 19:40:59.728648] user = 5138 Local+ 226/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:41:02.099285] user = 5138 MPDA- 226/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.671126876753011
Training on augumented user 118020 0/50 current_auc = 0.671126876753011
User 118020 AUC after training: 0.671126876753011
User 118020 does not improve AUC. Reverting changes.
Training on augumented user 75876 1/50 current_auc = 0.671126876753011
User 75876 AUC after training: 0.6712753671011384
User 75876 improves AUC. Keeping the model.
Training on augumented user 67990 2/50 current_auc = 0.6712753671011384
User 67990 AUC after training: 0.6707803992740473
User 67990 does not improve AUC. Reverting changes.
Training on augumented user 132775 3/50 current_auc = 0.6712753671011384
User 132775 AUC after training: 0.6712093713908596
User 132775 does not improve AUC. Reverting changes.
Training on augumented user 47559 4/50 current_auc = 0.6712753671011384
User 47559 AUC after training: 0.672430292031018
User 47559 improves AUC. Keeping the model.
Training on augumented user 52473 5/50 current_auc = 0.672430292031018
User 52473 AUC after training: 0.6729582577132487
User 52473 improves AUC. Keeping the model.
Training on augumented user 42693 6/50 current_auc = 0.6729582577132487
User 42693 AUC after training: 0.6728262662926908
User 42693 does not improve AUC. Reverting changes.
Training on augumented user 138096 7/50 current_auc = 0.6729582577132487
User 138096 AUC after training: 0.6737832040917341
User 138096 improves AUC. Keeping the model.
Training on augumented user 98743 8/50 current_auc = 0.6737832040917341
User 98743 AUC after training: 0.6735522191057581
User 98743 does not improve AUC. Reverting changes.
Training on augumented user 103969 9/50 current_auc = 0.6737832040917341
User 103969 AUC after training: 0.6738491998020129
User 103969 improves AUC. Keeping the model.
Training on augumented user 30996 10/50 current_auc = 0.6738491998020129
User 30996 AUC after training: 0.6734862233954793
User 30996 does not improve AUC. Reverting changes.
Training on augumented user 122813 11/50 current_auc = 0.6738491998020129
User 122813 AUC after training: 0.6733542319749216
User 122813 does not improve AUC. Reverting changes.
Training on augumented user 8349 12/50 current_auc = 0.6738491998020129
User 8349 AUC after training: 0.6737007094538855
User 8349 does not improve AUC. Reverting changes.
Training on augumented user 59558 13/50 current_auc = 0.6738491998020129
User 59558 AUC after training: 0.6743441676291041
User 59558 improves AUC. Keeping the model.
Training on augumented user 112422 14/50 current_auc = 0.6743441676291041
User 112422 AUC after training: 0.6741461804982675
User 112422 does not improve AUC. Reverting changes.
Training on augumented user 98186 15/50 current_auc = 0.6743441676291041
User 98186 AUC after training: 0.6743771654842435
User 98186 improves AUC. Keeping the model.
Training on augumented user 72037 16/50 current_auc = 0.6743771654842435
User 72037 AUC after training: 0.6743111697739647
User 72037 does not improve AUC. Reverting changes.
Training on augumented user 74577 17/50 current_auc = 0.6743771654842435
User 74577 AUC after training: 0.6738491998020129
User 74577 does not improve AUC. Reverting changes.
Training on augumented user 15697 18/50 current_auc = 0.6743771654842435
User 15697 AUC after training: 0.6743111697739647
User 15697 does not improve AUC. Reverting changes.
Training on augumented user 12691 19/50 current_auc = 0.6743771654842435
User 12691 AUC after training: 0.6742121762085463
User 12691 does not improve AUC. Reverting changes.
Training on augumented user 54951 20/50 current_auc = 0.6743771654842435
User 54951 AUC after training: 0.6741131826431281
User 54951 does not improve AUC. Reverting changes.
Training on augumented user 84549 21/50 current_auc = 0.6743771654842435
User 84549 AUC after training: 0.6728922620029697
User 84549 does not improve AUC. Reverting changes.
Training on augumented user 76100 22/50 current_auc = 0.6743771654842435
User 76100 AUC after training: 0.6731232469889457
User 76100 does not improve AUC. Reverting changes.
Training on augumented user 56172 23/50 current_auc = 0.6743771654842435
User 56172 AUC after training: 0.6738162019468734
User 56172 does not improve AUC. Reverting changes.
Training on augumented user 110802 24/50 current_auc = 0.6743771654842435
User 110802 AUC after training: 0.6732882362646428
User 110802 does not improve AUC. Reverting changes.
Training on augumented user 8222 25/50 current_auc = 0.6743771654842435
User 8222 AUC after training: 0.6745916515426498
User 8222 improves AUC. Keeping the model.
Training on augumented user 30984 26/50 current_auc = 0.6745916515426498
User 30984 AUC after training: 0.6741296815706979
User 30984 does not improve AUC. Reverting changes.
Training on augumented user 62984 27/50 current_auc = 0.6745916515426498
User 62984 AUC after training: 0.6739481933674312
User 62984 does not improve AUC. Reverting changes.
Training on augumented user 117189 28/50 current_auc = 0.6745916515426498
User 117189 AUC after training: 0.6745091569048011
User 117189 does not improve AUC. Reverting changes.
Training on augumented user 625 29/50 current_auc = 0.6745916515426498
User 625 AUC after training: 0.6748061376010559
User 625 improves AUC. Keeping the model.
Training on augumented user 102946 30/50 current_auc = 0.6748061376010559
User 102946 AUC after training: 0.6756640818346809
User 102946 improves AUC. Keeping the model.
Training on augumented user 99067 31/50 current_auc = 0.6756640818346809
User 99067 AUC after training: 0.6750041247318924
User 99067 does not improve AUC. Reverting changes.
Training on augumented user 59534 32/50 current_auc = 0.6756640818346809
User 59534 AUC after training: 0.675763075400099
User 59534 improves AUC. Keeping the model.
Training on augumented user 48779 33/50 current_auc = 0.675763075400099
User 48779 AUC after training: 0.6758620689655171
User 48779 improves AUC. Keeping the model.
Training on augumented user 67752 34/50 current_auc = 0.6758620689655171
User 67752 AUC after training: 0.6758620689655173
User 67752 improves AUC. Keeping the model.
Training on augumented user 34533 35/50 current_auc = 0.6758620689655173
User 34533 AUC after training: 0.6758290711103778
User 34533 does not improve AUC. Reverting changes.
Training on augumented user 56893 36/50 current_auc = 0.6758620689655173
User 56893 AUC after training: 0.6753671011384259
User 56893 does not improve AUC. Reverting changes.
Training on augumented user 83648 37/50 current_auc = 0.6758620689655173
User 83648 AUC after training: 0.6740141890777098
User 83648 does not improve AUC. Reverting changes.
Training on augumented user 100565 38/50 current_auc = 0.6758620689655173
User 100565 AUC after training: 0.6751361161524501
User 100565 does not improve AUC. Reverting changes.
Training on augumented user 41275 39/50 current_auc = 0.6758620689655173
User 41275 AUC after training: 0.6757960732552384
User 41275 does not improve AUC. Reverting changes.
Training on augumented user 41346 40/50 current_auc = 0.6758620689655173
User 41346 AUC after training: 0.6741296815706979
User 41346 does not improve AUC. Reverting changes.
Training on augumented user 129259 41/50 current_auc = 0.6758620689655173
User 129259 AUC after training: 0.6755815871968321
User 129259 does not improve AUC. Reverting changes.
Training on augumented user 123779 42/50 current_auc = 0.6758620689655173
User 123779 AUC after training: 0.673222240554364
User 123779 does not improve AUC. Reverting changes.
Training on augumented user 103904 43/50 current_auc = 0.6758620689655173
User 103904 AUC after training: 0.6748061376010559
User 103904 does not improve AUC. Reverting changes.
Training on augumented user 44476 44/50 current_auc = 0.6758620689655173
User 44476 AUC after training: 0.6754825936314139
User 44476 does not improve AUC. Reverting changes.
Training on augumented user 82344 45/50 current_auc = 0.6758620689655173
User 82344 AUC after training: 0.6758620689655173
User 82344 does not improve AUC. Reverting changes.
Training on augumented user 96123 46/50 current_auc = 0.6758620689655173
User 96123 AUC after training: 0.6758950668206567
User 96123 improves AUC. Keeping the model.
Training on augumented user 15533 47/50 current_auc = 0.6758950668206567
User 15533 AUC after training: 0.6760930539514931
User 15533 improves AUC. Keeping the model.
Training on augumented user 8682 48/50 current_auc = 0.6760930539514931
User 8682 AUC after training: 0.6765055271407359
User 8682 improves AUC. Keeping the model.
Training on augumented user 128505 49/50 current_auc = 0.6765055271407359
User 128505 AUC after training: 0.6750041247318925
User 128505 does not improve AUC. Reverting changes.
[2024-12-02 19:41:30.925256] start test user 5146 227/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:41:31.333754] start test user 5146 227/568 recall augumented users by random, augumented_users = [113525, 127141, 112194, 75600, 94340, 117891, 127759, 32023, 22935, 36818, 113359, 122545, 15588, 122896, 19497, 129006, 14870, 92310, 92496, 103698, 21858, 103640, 114012, 91289, 77742, 11881, 19151, 15334, 104248, 8823, 51506, 102454, 91745, 72013, 91214, 66780, 135343, 106316, 106084, 64948, 5920, 70015, 53764, 24698, 118189, 119683, 117641, 74906, 95056, 121414]
[2024-12-02 19:41:31.347965] user = 5146 Cloud 227/568
[2024-12-02 19:41:31.358771] user = 5146 Local 227/568
[2024-12-02 19:41:31.377924] user = 5146 Local+ 227/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:41:33.630338] user = 5146 MPDA- 227/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7858585858585858
Training on augumented user 113525 0/50 current_auc = 0.7858585858585858
User 113525 AUC after training: 0.7838383838383839
User 113525 does not improve AUC. Reverting changes.
Training on augumented user 127141 1/50 current_auc = 0.7858585858585858
User 127141 AUC after training: 0.7838383838383838
User 127141 does not improve AUC. Reverting changes.
Training on augumented user 112194 2/50 current_auc = 0.7858585858585858
User 112194 AUC after training: 0.7838383838383839
User 112194 does not improve AUC. Reverting changes.
Training on augumented user 75600 3/50 current_auc = 0.7858585858585858
User 75600 AUC after training: 0.7858585858585858
User 75600 does not improve AUC. Reverting changes.
Training on augumented user 94340 4/50 current_auc = 0.7858585858585858
User 94340 AUC after training: 0.7838383838383839
User 94340 does not improve AUC. Reverting changes.
Training on augumented user 117891 5/50 current_auc = 0.7858585858585858
User 117891 AUC after training: 0.7858585858585858
User 117891 does not improve AUC. Reverting changes.
Training on augumented user 127759 6/50 current_auc = 0.7858585858585858
User 127759 AUC after training: 0.7858585858585858
User 127759 does not improve AUC. Reverting changes.
Training on augumented user 32023 7/50 current_auc = 0.7858585858585858
User 32023 AUC after training: 0.7696969696969697
User 32023 does not improve AUC. Reverting changes.
Training on augumented user 22935 8/50 current_auc = 0.7858585858585858
User 22935 AUC after training: 0.7838383838383839
User 22935 does not improve AUC. Reverting changes.
Training on augumented user 36818 9/50 current_auc = 0.7858585858585858
User 36818 AUC after training: 0.7818181818181819
User 36818 does not improve AUC. Reverting changes.
Training on augumented user 113359 10/50 current_auc = 0.7858585858585858
User 113359 AUC after training: 0.7838383838383839
User 113359 does not improve AUC. Reverting changes.
Training on augumented user 122545 11/50 current_auc = 0.7858585858585858
User 122545 AUC after training: 0.7838383838383839
User 122545 does not improve AUC. Reverting changes.
Training on augumented user 15588 12/50 current_auc = 0.7858585858585858
User 15588 AUC after training: 0.7818181818181817
User 15588 does not improve AUC. Reverting changes.
Training on augumented user 122896 13/50 current_auc = 0.7858585858585858
User 122896 AUC after training: 0.7858585858585858
User 122896 does not improve AUC. Reverting changes.
Training on augumented user 19497 14/50 current_auc = 0.7858585858585858
User 19497 AUC after training: 0.7838383838383839
User 19497 does not improve AUC. Reverting changes.
Training on augumented user 129006 15/50 current_auc = 0.7858585858585858
User 129006 AUC after training: 0.7797979797979798
User 129006 does not improve AUC. Reverting changes.
Training on augumented user 14870 16/50 current_auc = 0.7858585858585858
User 14870 AUC after training: 0.7858585858585858
User 14870 does not improve AUC. Reverting changes.
Training on augumented user 92310 17/50 current_auc = 0.7858585858585858
User 92310 AUC after training: 0.7818181818181819
User 92310 does not improve AUC. Reverting changes.
Training on augumented user 92496 18/50 current_auc = 0.7858585858585858
User 92496 AUC after training: 0.7838383838383839
User 92496 does not improve AUC. Reverting changes.
Training on augumented user 103698 19/50 current_auc = 0.7858585858585858
User 103698 AUC after training: 0.7858585858585858
User 103698 does not improve AUC. Reverting changes.
Training on augumented user 21858 20/50 current_auc = 0.7858585858585858
User 21858 AUC after training: 0.7858585858585858
User 21858 does not improve AUC. Reverting changes.
Training on augumented user 103640 21/50 current_auc = 0.7858585858585858
User 103640 AUC after training: 0.7818181818181819
User 103640 does not improve AUC. Reverting changes.
Training on augumented user 114012 22/50 current_auc = 0.7858585858585858
User 114012 AUC after training: 0.7838383838383839
User 114012 does not improve AUC. Reverting changes.
Training on augumented user 91289 23/50 current_auc = 0.7858585858585858
User 91289 AUC after training: 0.7838383838383839
User 91289 does not improve AUC. Reverting changes.
Training on augumented user 77742 24/50 current_auc = 0.7858585858585858
User 77742 AUC after training: 0.7858585858585858
User 77742 does not improve AUC. Reverting changes.
Training on augumented user 11881 25/50 current_auc = 0.7858585858585858
User 11881 AUC after training: 0.7858585858585858
User 11881 does not improve AUC. Reverting changes.
Training on augumented user 19151 26/50 current_auc = 0.7858585858585858
User 19151 AUC after training: 0.7838383838383839
User 19151 does not improve AUC. Reverting changes.
Training on augumented user 15334 27/50 current_auc = 0.7858585858585858
User 15334 AUC after training: 0.7838383838383839
User 15334 does not improve AUC. Reverting changes.
Training on augumented user 104248 28/50 current_auc = 0.7858585858585858
User 104248 AUC after training: 0.7858585858585858
User 104248 does not improve AUC. Reverting changes.
Training on augumented user 8823 29/50 current_auc = 0.7858585858585858
User 8823 AUC after training: 0.7858585858585858
User 8823 does not improve AUC. Reverting changes.
Training on augumented user 51506 30/50 current_auc = 0.7858585858585858
User 51506 AUC after training: 0.7838383838383839
User 51506 does not improve AUC. Reverting changes.
Training on augumented user 102454 31/50 current_auc = 0.7858585858585858
User 102454 AUC after training: 0.7777777777777778
User 102454 does not improve AUC. Reverting changes.
Training on augumented user 91745 32/50 current_auc = 0.7858585858585858
User 91745 AUC after training: 0.7838383838383839
User 91745 does not improve AUC. Reverting changes.
Training on augumented user 72013 33/50 current_auc = 0.7858585858585858
User 72013 AUC after training: 0.7858585858585858
User 72013 does not improve AUC. Reverting changes.
Training on augumented user 91214 34/50 current_auc = 0.7858585858585858
User 91214 AUC after training: 0.7838383838383839
User 91214 does not improve AUC. Reverting changes.
Training on augumented user 66780 35/50 current_auc = 0.7858585858585858
User 66780 AUC after training: 0.7858585858585858
User 66780 does not improve AUC. Reverting changes.
Training on augumented user 135343 36/50 current_auc = 0.7858585858585858
User 135343 AUC after training: 0.7818181818181819
User 135343 does not improve AUC. Reverting changes.
Training on augumented user 106316 37/50 current_auc = 0.7858585858585858
User 106316 AUC after training: 0.7818181818181817
User 106316 does not improve AUC. Reverting changes.
Training on augumented user 106084 38/50 current_auc = 0.7858585858585858
User 106084 AUC after training: 0.7838383838383838
User 106084 does not improve AUC. Reverting changes.
Training on augumented user 64948 39/50 current_auc = 0.7858585858585858
User 64948 AUC after training: 0.7858585858585858
User 64948 does not improve AUC. Reverting changes.
Training on augumented user 5920 40/50 current_auc = 0.7858585858585858
User 5920 AUC after training: 0.7858585858585858
User 5920 does not improve AUC. Reverting changes.
Training on augumented user 70015 41/50 current_auc = 0.7858585858585858
User 70015 AUC after training: 0.7818181818181817
User 70015 does not improve AUC. Reverting changes.
Training on augumented user 53764 42/50 current_auc = 0.7858585858585858
User 53764 AUC after training: 0.7838383838383838
User 53764 does not improve AUC. Reverting changes.
Training on augumented user 24698 43/50 current_auc = 0.7858585858585858
User 24698 AUC after training: 0.7858585858585858
User 24698 does not improve AUC. Reverting changes.
Training on augumented user 118189 44/50 current_auc = 0.7858585858585858
User 118189 AUC after training: 0.7858585858585858
User 118189 does not improve AUC. Reverting changes.
Training on augumented user 119683 45/50 current_auc = 0.7858585858585858
User 119683 AUC after training: 0.7777777777777778
User 119683 does not improve AUC. Reverting changes.
Training on augumented user 117641 46/50 current_auc = 0.7858585858585858
User 117641 AUC after training: 0.7838383838383839
User 117641 does not improve AUC. Reverting changes.
Training on augumented user 74906 47/50 current_auc = 0.7858585858585858
User 74906 AUC after training: 0.7838383838383839
User 74906 does not improve AUC. Reverting changes.
Training on augumented user 95056 48/50 current_auc = 0.7858585858585858
User 95056 AUC after training: 0.7838383838383839
User 95056 does not improve AUC. Reverting changes.
Training on augumented user 121414 49/50 current_auc = 0.7858585858585858
User 121414 AUC after training: 0.7777777777777778
User 121414 does not improve AUC. Reverting changes.
[2024-12-02 19:42:04.001256] start test user 5157 228/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:42:04.695901] start test user 5157 228/568 recall augumented users by random, augumented_users = [54649, 138372, 34326, 76019, 54778, 93312, 4243, 90013, 9052, 9343, 100273, 138475, 74241, 125420, 83289, 12659, 134394, 66262, 218, 24522, 112216, 85999, 101499, 81919, 121296, 97030, 5579, 7660, 12436, 125984, 96319, 96255, 76866, 96884, 112890, 5694, 120742, 122966, 51964, 29611, 2260, 10975, 126799, 76601, 98758, 118828, 126571, 2802, 86340, 10625]
[2024-12-02 19:42:04.737488] user = 5157 Cloud 228/568
[2024-12-02 19:42:04.891618] user = 5157 Local 228/568
[2024-12-02 19:42:05.018412] user = 5157 Local+ 228/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:42:08.820276] user = 5157 MPDA- 228/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6916267942583731
Training on augumented user 54649 0/50 current_auc = 0.6916267942583731
User 54649 AUC after training: 0.6913742690058479
User 54649 does not improve AUC. Reverting changes.
Training on augumented user 138372 1/50 current_auc = 0.6916267942583731
User 138372 AUC after training: 0.6913277511961722
User 138372 does not improve AUC. Reverting changes.
Training on augumented user 34326 2/50 current_auc = 0.6916267942583731
User 34326 AUC after training: 0.6921517809675705
User 34326 improves AUC. Keeping the model.
Training on augumented user 76019 3/50 current_auc = 0.6921517809675705
User 76019 AUC after training: 0.6931485911749069
User 76019 improves AUC. Keeping the model.
Training on augumented user 54778 4/50 current_auc = 0.6931485911749069
User 54778 AUC after training: 0.6941653375863901
User 54778 improves AUC. Keeping the model.
Training on augumented user 93312 5/50 current_auc = 0.6941653375863901
User 93312 AUC after training: 0.6943181818181817
User 93312 improves AUC. Keeping the model.
Training on augumented user 4243 6/50 current_auc = 0.6943181818181817
User 4243 AUC after training: 0.6946172248803827
User 4243 improves AUC. Keeping the model.
Training on augumented user 90013 7/50 current_auc = 0.6946172248803827
User 90013 AUC after training: 0.6944245082402977
User 90013 does not improve AUC. Reverting changes.
Training on augumented user 9052 8/50 current_auc = 0.6946172248803827
User 9052 AUC after training: 0.6945441254651781
User 9052 does not improve AUC. Reverting changes.
Training on augumented user 9343 9/50 current_auc = 0.6946172248803827
User 9343 AUC after training: 0.6948631047315258
User 9343 improves AUC. Keeping the model.
Training on augumented user 100273 10/50 current_auc = 0.6948631047315258
User 100273 AUC after training: 0.694896331738437
User 100273 improves AUC. Keeping the model.
Training on augumented user 138475 11/50 current_auc = 0.694896331738437
User 138475 AUC after training: 0.6958997873471557
User 138475 improves AUC. Keeping the model.
Training on augumented user 74241 12/50 current_auc = 0.6958997873471557
User 74241 AUC after training: 0.6955409356725147
User 74241 does not improve AUC. Reverting changes.
Training on augumented user 125420 13/50 current_auc = 0.6958997873471557
User 125420 AUC after training: 0.6950026581605528
User 125420 does not improve AUC. Reverting changes.
Training on augumented user 83289 14/50 current_auc = 0.6958997873471557
User 83289 AUC after training: 0.6956539074960127
User 83289 does not improve AUC. Reverting changes.
Training on augumented user 12659 15/50 current_auc = 0.6958997873471557
User 12659 AUC after training: 0.6952219564061669
User 12659 does not improve AUC. Reverting changes.
Training on augumented user 134394 16/50 current_auc = 0.6958997873471557
User 134394 AUC after training: 0.6965377458798512
User 134394 improves AUC. Keeping the model.
Training on augumented user 66262 17/50 current_auc = 0.6965377458798512
User 66262 AUC after training: 0.6964114832535885
User 66262 does not improve AUC. Reverting changes.
Training on augumented user 218 18/50 current_auc = 0.6965377458798512
User 218 AUC after training: 0.6970693779904304
User 218 improves AUC. Keeping the model.
Training on augumented user 24522 19/50 current_auc = 0.6970693779904304
User 24522 AUC after training: 0.696836788942052
User 24522 does not improve AUC. Reverting changes.
Training on augumented user 112216 20/50 current_auc = 0.6970693779904304
User 112216 AUC after training: 0.6970361509835195
User 112216 does not improve AUC. Reverting changes.
Training on augumented user 85999 21/50 current_auc = 0.6970693779904304
User 85999 AUC after training: 0.696969696969697
User 85999 does not improve AUC. Reverting changes.
Training on augumented user 101499 22/50 current_auc = 0.6970693779904304
User 101499 AUC after training: 0.6962918660287081
User 101499 does not improve AUC. Reverting changes.
Training on augumented user 81919 23/50 current_auc = 0.6970693779904304
User 81919 AUC after training: 0.6974149388623073
User 81919 improves AUC. Keeping the model.
Training on augumented user 121296 24/50 current_auc = 0.6974149388623073
User 121296 AUC after training: 0.6970162147793726
User 121296 does not improve AUC. Reverting changes.
Training on augumented user 97030 25/50 current_auc = 0.6974149388623073
User 97030 AUC after training: 0.696371610845295
User 97030 does not improve AUC. Reverting changes.
Training on augumented user 5579 26/50 current_auc = 0.6974149388623073
User 5579 AUC after training: 0.6974348750664541
User 5579 improves AUC. Keeping the model.
Training on augumented user 7660 27/50 current_auc = 0.6974348750664541
User 7660 AUC after training: 0.6978867623604464
User 7660 improves AUC. Keeping the model.
Training on augumented user 12436 28/50 current_auc = 0.6978867623604464
User 12436 AUC after training: 0.6972953216374269
User 12436 does not improve AUC. Reverting changes.
Training on augumented user 125984 29/50 current_auc = 0.6978867623604464
User 125984 AUC after training: 0.6971291866028709
User 125984 does not improve AUC. Reverting changes.
Training on augumented user 96319 30/50 current_auc = 0.6978867623604464
User 96319 AUC after training: 0.6974149388623073
User 96319 does not improve AUC. Reverting changes.
Training on augumented user 96255 31/50 current_auc = 0.6978867623604464
User 96255 AUC after training: 0.6972022860180754
User 96255 does not improve AUC. Reverting changes.
Training on augumented user 76866 32/50 current_auc = 0.6978867623604464
User 76866 AUC after training: 0.6956273258904837
User 76866 does not improve AUC. Reverting changes.
Training on augumented user 96884 33/50 current_auc = 0.6978867623604464
User 96884 AUC after training: 0.6957801701222754
User 96884 does not improve AUC. Reverting changes.
Training on augumented user 112890 34/50 current_auc = 0.6978867623604464
User 112890 AUC after training: 0.6975212652844232
User 112890 does not improve AUC. Reverting changes.
Training on augumented user 5694 35/50 current_auc = 0.6978867623604464
User 5694 AUC after training: 0.6971491228070176
User 5694 does not improve AUC. Reverting changes.
Training on augumented user 120742 36/50 current_auc = 0.6978867623604464
User 120742 AUC after training: 0.6974149388623073
User 120742 does not improve AUC. Reverting changes.
Training on augumented user 122966 37/50 current_auc = 0.6978867623604464
User 122966 AUC after training: 0.6978468899521532
User 122966 does not improve AUC. Reverting changes.
Training on augumented user 51964 38/50 current_auc = 0.6978867623604464
User 51964 AUC after training: 0.6962453482190324
User 51964 does not improve AUC. Reverting changes.
Training on augumented user 29611 39/50 current_auc = 0.6978867623604464
User 29611 AUC after training: 0.6976010101010102
User 29611 does not improve AUC. Reverting changes.
Training on augumented user 2260 40/50 current_auc = 0.6978867623604464
User 2260 AUC after training: 0.6968766613503456
User 2260 does not improve AUC. Reverting changes.
Training on augumented user 10975 41/50 current_auc = 0.6978867623604464
User 10975 AUC after training: 0.6982854864433813
User 10975 improves AUC. Keeping the model.
Training on augumented user 126799 42/50 current_auc = 0.6982854864433813
User 126799 AUC after training: 0.6979332801701223
User 126799 does not improve AUC. Reverting changes.
Training on augumented user 76601 43/50 current_auc = 0.6982854864433813
User 76601 AUC after training: 0.6975578149920256
User 76601 does not improve AUC. Reverting changes.
Training on augumented user 98758 44/50 current_auc = 0.6982854864433813
User 98758 AUC after training: 0.6976076555023922
User 98758 does not improve AUC. Reverting changes.
Training on augumented user 118828 45/50 current_auc = 0.6982854864433813
User 118828 AUC after training: 0.6982389686337055
User 118828 does not improve AUC. Reverting changes.
Training on augumented user 126571 46/50 current_auc = 0.6982854864433813
User 126571 AUC after training: 0.6973185805422648
User 126571 does not improve AUC. Reverting changes.
Training on augumented user 2802 47/50 current_auc = 0.6982854864433813
User 2802 AUC after training: 0.6978402445507709
User 2802 does not improve AUC. Reverting changes.
Training on augumented user 86340 48/50 current_auc = 0.6982854864433813
User 86340 AUC after training: 0.6977139819245082
User 86340 does not improve AUC. Reverting changes.
Training on augumented user 10625 49/50 current_auc = 0.6982854864433813
User 10625 AUC after training: 0.6975810738968634
User 10625 does not improve AUC. Reverting changes.
[2024-12-02 19:42:48.193704] start test user 5178 229/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:42:48.644926] start test user 5178 229/568 recall augumented users by random, augumented_users = [76463, 8448, 1253, 134668, 84205, 59824, 43622, 13243, 87265, 6084, 24047, 127030, 48305, 103424, 82313, 11738, 74262, 51237, 42190, 20399, 6683, 29128, 45502, 5952, 72751, 4200, 10295, 134894, 88438, 92064, 85456, 46894, 105569, 67865, 51164, 79166, 47353, 73230, 107042, 127297, 129539, 59528, 20598, 132154, 5187, 93546, 115537, 46223, 7295, 97161]
[2024-12-02 19:42:48.660379] user = 5178 Cloud 229/568
[2024-12-02 19:42:48.681577] user = 5178 Local 229/568
[2024-12-02 19:42:48.770052] user = 5178 Local+ 229/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:42:51.005825] user = 5178 MPDA- 229/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 76463 0/50 current_auc = 1.0
User 76463 AUC after training: 1.0
User 76463 does not improve AUC. Reverting changes.
Training on augumented user 8448 1/50 current_auc = 1.0
User 8448 AUC after training: 1.0
User 8448 does not improve AUC. Reverting changes.
Training on augumented user 1253 2/50 current_auc = 1.0
User 1253 AUC after training: 1.0
User 1253 does not improve AUC. Reverting changes.
Training on augumented user 134668 3/50 current_auc = 1.0
User 134668 AUC after training: 1.0
User 134668 does not improve AUC. Reverting changes.
Training on augumented user 84205 4/50 current_auc = 1.0
User 84205 AUC after training: 1.0
User 84205 does not improve AUC. Reverting changes.
Training on augumented user 59824 5/50 current_auc = 1.0
User 59824 AUC after training: 1.0
User 59824 does not improve AUC. Reverting changes.
Training on augumented user 43622 6/50 current_auc = 1.0
User 43622 AUC after training: 1.0
User 43622 does not improve AUC. Reverting changes.
Training on augumented user 13243 7/50 current_auc = 1.0
User 13243 AUC after training: 1.0
User 13243 does not improve AUC. Reverting changes.
Training on augumented user 87265 8/50 current_auc = 1.0
User 87265 AUC after training: 1.0
User 87265 does not improve AUC. Reverting changes.
Training on augumented user 6084 9/50 current_auc = 1.0
User 6084 AUC after training: 1.0
User 6084 does not improve AUC. Reverting changes.
Training on augumented user 24047 10/50 current_auc = 1.0
User 24047 AUC after training: 1.0
User 24047 does not improve AUC. Reverting changes.
Training on augumented user 127030 11/50 current_auc = 1.0
User 127030 AUC after training: 1.0
User 127030 does not improve AUC. Reverting changes.
Training on augumented user 48305 12/50 current_auc = 1.0
User 48305 AUC after training: 1.0
User 48305 does not improve AUC. Reverting changes.
Training on augumented user 103424 13/50 current_auc = 1.0
User 103424 AUC after training: 1.0
User 103424 does not improve AUC. Reverting changes.
Training on augumented user 82313 14/50 current_auc = 1.0
User 82313 AUC after training: 1.0
User 82313 does not improve AUC. Reverting changes.
Training on augumented user 11738 15/50 current_auc = 1.0
User 11738 AUC after training: 1.0
User 11738 does not improve AUC. Reverting changes.
Training on augumented user 74262 16/50 current_auc = 1.0
User 74262 AUC after training: 1.0
User 74262 does not improve AUC. Reverting changes.
Training on augumented user 51237 17/50 current_auc = 1.0
User 51237 AUC after training: 1.0
User 51237 does not improve AUC. Reverting changes.
Training on augumented user 42190 18/50 current_auc = 1.0
User 42190 AUC after training: 1.0
User 42190 does not improve AUC. Reverting changes.
Training on augumented user 20399 19/50 current_auc = 1.0
User 20399 AUC after training: 1.0
User 20399 does not improve AUC. Reverting changes.
Training on augumented user 6683 20/50 current_auc = 1.0
User 6683 AUC after training: 1.0
User 6683 does not improve AUC. Reverting changes.
Training on augumented user 29128 21/50 current_auc = 1.0
User 29128 AUC after training: 1.0
User 29128 does not improve AUC. Reverting changes.
Training on augumented user 45502 22/50 current_auc = 1.0
User 45502 AUC after training: 1.0
User 45502 does not improve AUC. Reverting changes.
Training on augumented user 5952 23/50 current_auc = 1.0
User 5952 AUC after training: 1.0
User 5952 does not improve AUC. Reverting changes.
Training on augumented user 72751 24/50 current_auc = 1.0
User 72751 AUC after training: 1.0
User 72751 does not improve AUC. Reverting changes.
Training on augumented user 4200 25/50 current_auc = 1.0
User 4200 AUC after training: 1.0
User 4200 does not improve AUC. Reverting changes.
Training on augumented user 10295 26/50 current_auc = 1.0
User 10295 AUC after training: 1.0
User 10295 does not improve AUC. Reverting changes.
Training on augumented user 134894 27/50 current_auc = 1.0
User 134894 AUC after training: 1.0
User 134894 does not improve AUC. Reverting changes.
Training on augumented user 88438 28/50 current_auc = 1.0
User 88438 AUC after training: 1.0
User 88438 does not improve AUC. Reverting changes.
Training on augumented user 92064 29/50 current_auc = 1.0
User 92064 AUC after training: 1.0
User 92064 does not improve AUC. Reverting changes.
Training on augumented user 85456 30/50 current_auc = 1.0
User 85456 AUC after training: 1.0
User 85456 does not improve AUC. Reverting changes.
Training on augumented user 46894 31/50 current_auc = 1.0
User 46894 AUC after training: 1.0
User 46894 does not improve AUC. Reverting changes.
Training on augumented user 105569 32/50 current_auc = 1.0
User 105569 AUC after training: 1.0
User 105569 does not improve AUC. Reverting changes.
Training on augumented user 67865 33/50 current_auc = 1.0
User 67865 AUC after training: 1.0
User 67865 does not improve AUC. Reverting changes.
Training on augumented user 51164 34/50 current_auc = 1.0
User 51164 AUC after training: 1.0
User 51164 does not improve AUC. Reverting changes.
Training on augumented user 79166 35/50 current_auc = 1.0
User 79166 AUC after training: 1.0
User 79166 does not improve AUC. Reverting changes.
Training on augumented user 47353 36/50 current_auc = 1.0
User 47353 AUC after training: 1.0
User 47353 does not improve AUC. Reverting changes.
Training on augumented user 73230 37/50 current_auc = 1.0
User 73230 AUC after training: 1.0
User 73230 does not improve AUC. Reverting changes.
Training on augumented user 107042 38/50 current_auc = 1.0
User 107042 AUC after training: 1.0
User 107042 does not improve AUC. Reverting changes.
Training on augumented user 127297 39/50 current_auc = 1.0
User 127297 AUC after training: 1.0
User 127297 does not improve AUC. Reverting changes.
Training on augumented user 129539 40/50 current_auc = 1.0
User 129539 AUC after training: 1.0
User 129539 does not improve AUC. Reverting changes.
Training on augumented user 59528 41/50 current_auc = 1.0
User 59528 AUC after training: 1.0
User 59528 does not improve AUC. Reverting changes.
Training on augumented user 20598 42/50 current_auc = 1.0
User 20598 AUC after training: 1.0
User 20598 does not improve AUC. Reverting changes.
Training on augumented user 132154 43/50 current_auc = 1.0
User 132154 AUC after training: 1.0
User 132154 does not improve AUC. Reverting changes.
Training on augumented user 5187 44/50 current_auc = 1.0
User 5187 AUC after training: 1.0
User 5187 does not improve AUC. Reverting changes.
Training on augumented user 93546 45/50 current_auc = 1.0
User 93546 AUC after training: 1.0
User 93546 does not improve AUC. Reverting changes.
Training on augumented user 115537 46/50 current_auc = 1.0
User 115537 AUC after training: 1.0
User 115537 does not improve AUC. Reverting changes.
Training on augumented user 46223 47/50 current_auc = 1.0
User 46223 AUC after training: 1.0
User 46223 does not improve AUC. Reverting changes.
Training on augumented user 7295 48/50 current_auc = 1.0
User 7295 AUC after training: 1.0
User 7295 does not improve AUC. Reverting changes.
Training on augumented user 97161 49/50 current_auc = 1.0
User 97161 AUC after training: 1.0
User 97161 does not improve AUC. Reverting changes.
[2024-12-02 19:43:16.355859] start test user 5204 230/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:43:17.032242] start test user 5204 230/568 recall augumented users by random, augumented_users = [55381, 21808, 2257, 32333, 69906, 70828, 21653, 97798, 98149, 102688, 37761, 82916, 27736, 51696, 112240, 69296, 111223, 116726, 34145, 77456, 48650, 102768, 136471, 47918, 101918, 12493, 63297, 67000, 77257, 33561, 82064, 24449, 108869, 24244, 132668, 77954, 22486, 107447, 88777, 130098, 92027, 5931, 96592, 70415, 132978, 87220, 113649, 73042, 123287, 41455]
[2024-12-02 19:43:17.053770] user = 5204 Cloud 230/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:43:17.059795] user = 5204 Local 230/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:43:17.097037] user = 5204 Local+ 230/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:43:19.237625] user = 5204 MPDA- 230/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 55381 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55381 AUC after training: 0.5
User 55381 does not improve AUC. Reverting changes.
Training on augumented user 21808 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21808 AUC after training: 0.5
User 21808 does not improve AUC. Reverting changes.
Training on augumented user 2257 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2257 AUC after training: 0.5
User 2257 does not improve AUC. Reverting changes.
Training on augumented user 32333 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32333 AUC after training: 0.5
User 32333 does not improve AUC. Reverting changes.
Training on augumented user 69906 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69906 AUC after training: 0.5
User 69906 does not improve AUC. Reverting changes.
Training on augumented user 70828 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70828 AUC after training: 0.5
User 70828 does not improve AUC. Reverting changes.
Training on augumented user 21653 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21653 AUC after training: 0.5
User 21653 does not improve AUC. Reverting changes.
Training on augumented user 97798 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97798 AUC after training: 0.5
User 97798 does not improve AUC. Reverting changes.
Training on augumented user 98149 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98149 AUC after training: 0.5
User 98149 does not improve AUC. Reverting changes.
Training on augumented user 102688 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102688 AUC after training: 0.5
User 102688 does not improve AUC. Reverting changes.
Training on augumented user 37761 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37761 AUC after training: 0.5
User 37761 does not improve AUC. Reverting changes.
Training on augumented user 82916 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82916 AUC after training: 0.5
User 82916 does not improve AUC. Reverting changes.
Training on augumented user 27736 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27736 AUC after training: 0.5
User 27736 does not improve AUC. Reverting changes.
Training on augumented user 51696 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51696 AUC after training: 0.5
User 51696 does not improve AUC. Reverting changes.
Training on augumented user 112240 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112240 AUC after training: 0.5
User 112240 does not improve AUC. Reverting changes.
Training on augumented user 69296 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69296 AUC after training: 0.5
User 69296 does not improve AUC. Reverting changes.
Training on augumented user 111223 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111223 AUC after training: 0.5
User 111223 does not improve AUC. Reverting changes.
Training on augumented user 116726 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116726 AUC after training: 0.5
User 116726 does not improve AUC. Reverting changes.
Training on augumented user 34145 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34145 AUC after training: 0.5
User 34145 does not improve AUC. Reverting changes.
Training on augumented user 77456 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77456 AUC after training: 0.5
User 77456 does not improve AUC. Reverting changes.
Training on augumented user 48650 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48650 AUC after training: 0.5
User 48650 does not improve AUC. Reverting changes.
Training on augumented user 102768 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102768 AUC after training: 0.5
User 102768 does not improve AUC. Reverting changes.
Training on augumented user 136471 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136471 AUC after training: 0.5
User 136471 does not improve AUC. Reverting changes.
Training on augumented user 47918 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47918 AUC after training: 0.5
User 47918 does not improve AUC. Reverting changes.
Training on augumented user 101918 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101918 AUC after training: 0.5
User 101918 does not improve AUC. Reverting changes.
Training on augumented user 12493 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12493 AUC after training: 0.5
User 12493 does not improve AUC. Reverting changes.
Training on augumented user 63297 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63297 AUC after training: 0.5
User 63297 does not improve AUC. Reverting changes.
Training on augumented user 67000 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67000 AUC after training: 0.5
User 67000 does not improve AUC. Reverting changes.
Training on augumented user 77257 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77257 AUC after training: 0.5
User 77257 does not improve AUC. Reverting changes.
Training on augumented user 33561 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33561 AUC after training: 0.5
User 33561 does not improve AUC. Reverting changes.
Training on augumented user 82064 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82064 AUC after training: 0.5
User 82064 does not improve AUC. Reverting changes.
Training on augumented user 24449 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24449 AUC after training: 0.5
User 24449 does not improve AUC. Reverting changes.
Training on augumented user 108869 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108869 AUC after training: 0.5
User 108869 does not improve AUC. Reverting changes.
Training on augumented user 24244 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24244 AUC after training: 0.5
User 24244 does not improve AUC. Reverting changes.
Training on augumented user 132668 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132668 AUC after training: 0.5
User 132668 does not improve AUC. Reverting changes.
Training on augumented user 77954 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77954 AUC after training: 0.5
User 77954 does not improve AUC. Reverting changes.
Training on augumented user 22486 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22486 AUC after training: 0.5
User 22486 does not improve AUC. Reverting changes.
Training on augumented user 107447 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107447 AUC after training: 0.5
User 107447 does not improve AUC. Reverting changes.
Training on augumented user 88777 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88777 AUC after training: 0.5
User 88777 does not improve AUC. Reverting changes.
Training on augumented user 130098 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130098 AUC after training: 0.5
User 130098 does not improve AUC. Reverting changes.
Training on augumented user 92027 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92027 AUC after training: 0.5
User 92027 does not improve AUC. Reverting changes.
Training on augumented user 5931 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5931 AUC after training: 0.5
User 5931 does not improve AUC. Reverting changes.
Training on augumented user 96592 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96592 AUC after training: 0.5
User 96592 does not improve AUC. Reverting changes.
Training on augumented user 70415 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70415 AUC after training: 0.5
User 70415 does not improve AUC. Reverting changes.
Training on augumented user 132978 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132978 AUC after training: 0.5
User 132978 does not improve AUC. Reverting changes.
Training on augumented user 87220 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87220 AUC after training: 0.5
User 87220 does not improve AUC. Reverting changes.
Training on augumented user 113649 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113649 AUC after training: 0.5
User 113649 does not improve AUC. Reverting changes.
Training on augumented user 73042 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73042 AUC after training: 0.5
User 73042 does not improve AUC. Reverting changes.
Training on augumented user 123287 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123287 AUC after training: 0.5
User 123287 does not improve AUC. Reverting changes.
Training on augumented user 41455 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41455 AUC after training: 0.5
User 41455 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:43:51.021226] start test user 5242 231/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:43:51.482865] start test user 5242 231/568 recall augumented users by random, augumented_users = [67735, 13062, 4896, 9264, 83850, 28740, 76328, 115241, 137513, 2101, 81070, 71259, 5428, 13400, 26018, 19228, 10025, 26955, 4267, 87988, 128605, 8826, 36584, 10934, 27912, 118259, 31006, 1950, 22567, 43228, 54252, 14779, 69035, 68620, 80163, 117701, 45376, 18888, 3115, 102649, 5265, 66130, 61909, 84196, 66516, 107555, 113196, 71002, 26696, 126329]
[2024-12-02 19:43:51.510993] user = 5242 Cloud 231/568
[2024-12-02 19:43:51.521084] user = 5242 Local 231/568
[2024-12-02 19:43:51.585899] user = 5242 Local+ 231/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:43:53.880295] user = 5242 MPDA- 231/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6638655462184875
Training on augumented user 67735 0/50 current_auc = 0.6638655462184875
User 67735 AUC after training: 0.6638655462184875
User 67735 does not improve AUC. Reverting changes.
Training on augumented user 13062 1/50 current_auc = 0.6638655462184875
User 13062 AUC after training: 0.6638655462184875
User 13062 does not improve AUC. Reverting changes.
Training on augumented user 4896 2/50 current_auc = 0.6638655462184875
User 4896 AUC after training: 0.6638655462184875
User 4896 does not improve AUC. Reverting changes.
Training on augumented user 9264 3/50 current_auc = 0.6638655462184875
User 9264 AUC after training: 0.6638655462184875
User 9264 does not improve AUC. Reverting changes.
Training on augumented user 83850 4/50 current_auc = 0.6638655462184875
User 83850 AUC after training: 0.6638655462184875
User 83850 does not improve AUC. Reverting changes.
Training on augumented user 28740 5/50 current_auc = 0.6638655462184875
User 28740 AUC after training: 0.6638655462184875
User 28740 does not improve AUC. Reverting changes.
Training on augumented user 76328 6/50 current_auc = 0.6638655462184875
User 76328 AUC after training: 0.6638655462184875
User 76328 does not improve AUC. Reverting changes.
Training on augumented user 115241 7/50 current_auc = 0.6638655462184875
User 115241 AUC after training: 0.6638655462184875
User 115241 does not improve AUC. Reverting changes.
Training on augumented user 137513 8/50 current_auc = 0.6638655462184875
User 137513 AUC after training: 0.6638655462184875
User 137513 does not improve AUC. Reverting changes.
Training on augumented user 2101 9/50 current_auc = 0.6638655462184875
User 2101 AUC after training: 0.6638655462184875
User 2101 does not improve AUC. Reverting changes.
Training on augumented user 81070 10/50 current_auc = 0.6638655462184875
User 81070 AUC after training: 0.6638655462184875
User 81070 does not improve AUC. Reverting changes.
Training on augumented user 71259 11/50 current_auc = 0.6638655462184875
User 71259 AUC after training: 0.6638655462184875
User 71259 does not improve AUC. Reverting changes.
Training on augumented user 5428 12/50 current_auc = 0.6638655462184875
User 5428 AUC after training: 0.6638655462184875
User 5428 does not improve AUC. Reverting changes.
Training on augumented user 13400 13/50 current_auc = 0.6638655462184875
User 13400 AUC after training: 0.6638655462184875
User 13400 does not improve AUC. Reverting changes.
Training on augumented user 26018 14/50 current_auc = 0.6638655462184875
User 26018 AUC after training: 0.6638655462184875
User 26018 does not improve AUC. Reverting changes.
Training on augumented user 19228 15/50 current_auc = 0.6638655462184875
User 19228 AUC after training: 0.6638655462184874
User 19228 does not improve AUC. Reverting changes.
Training on augumented user 10025 16/50 current_auc = 0.6638655462184875
User 10025 AUC after training: 0.6638655462184875
User 10025 does not improve AUC. Reverting changes.
Training on augumented user 26955 17/50 current_auc = 0.6638655462184875
User 26955 AUC after training: 0.6638655462184875
User 26955 does not improve AUC. Reverting changes.
Training on augumented user 4267 18/50 current_auc = 0.6638655462184875
User 4267 AUC after training: 0.6638655462184875
User 4267 does not improve AUC. Reverting changes.
Training on augumented user 87988 19/50 current_auc = 0.6638655462184875
User 87988 AUC after training: 0.6638655462184875
User 87988 does not improve AUC. Reverting changes.
Training on augumented user 128605 20/50 current_auc = 0.6638655462184875
User 128605 AUC after training: 0.6638655462184875
User 128605 does not improve AUC. Reverting changes.
Training on augumented user 8826 21/50 current_auc = 0.6638655462184875
User 8826 AUC after training: 0.6638655462184875
User 8826 does not improve AUC. Reverting changes.
Training on augumented user 36584 22/50 current_auc = 0.6638655462184875
User 36584 AUC after training: 0.6638655462184875
User 36584 does not improve AUC. Reverting changes.
Training on augumented user 10934 23/50 current_auc = 0.6638655462184875
User 10934 AUC after training: 0.6638655462184875
User 10934 does not improve AUC. Reverting changes.
Training on augumented user 27912 24/50 current_auc = 0.6638655462184875
User 27912 AUC after training: 0.6638655462184875
User 27912 does not improve AUC. Reverting changes.
Training on augumented user 118259 25/50 current_auc = 0.6638655462184875
User 118259 AUC after training: 0.6638655462184875
User 118259 does not improve AUC. Reverting changes.
Training on augumented user 31006 26/50 current_auc = 0.6638655462184875
User 31006 AUC after training: 0.6638655462184875
User 31006 does not improve AUC. Reverting changes.
Training on augumented user 1950 27/50 current_auc = 0.6638655462184875
User 1950 AUC after training: 0.6638655462184875
User 1950 does not improve AUC. Reverting changes.
Training on augumented user 22567 28/50 current_auc = 0.6638655462184875
User 22567 AUC after training: 0.6638655462184875
User 22567 does not improve AUC. Reverting changes.
Training on augumented user 43228 29/50 current_auc = 0.6638655462184875
User 43228 AUC after training: 0.6638655462184875
User 43228 does not improve AUC. Reverting changes.
Training on augumented user 54252 30/50 current_auc = 0.6638655462184875
User 54252 AUC after training: 0.6638655462184875
User 54252 does not improve AUC. Reverting changes.
Training on augumented user 14779 31/50 current_auc = 0.6638655462184875
User 14779 AUC after training: 0.6638655462184875
User 14779 does not improve AUC. Reverting changes.
Training on augumented user 69035 32/50 current_auc = 0.6638655462184875
User 69035 AUC after training: 0.6638655462184875
User 69035 does not improve AUC. Reverting changes.
Training on augumented user 68620 33/50 current_auc = 0.6638655462184875
User 68620 AUC after training: 0.6638655462184875
User 68620 does not improve AUC. Reverting changes.
Training on augumented user 80163 34/50 current_auc = 0.6638655462184875
User 80163 AUC after training: 0.6638655462184875
User 80163 does not improve AUC. Reverting changes.
Training on augumented user 117701 35/50 current_auc = 0.6638655462184875
User 117701 AUC after training: 0.6722689075630253
User 117701 improves AUC. Keeping the model.
Training on augumented user 45376 36/50 current_auc = 0.6722689075630253
User 45376 AUC after training: 0.6722689075630253
User 45376 does not improve AUC. Reverting changes.
Training on augumented user 18888 37/50 current_auc = 0.6722689075630253
User 18888 AUC after training: 0.6722689075630253
User 18888 does not improve AUC. Reverting changes.
Training on augumented user 3115 38/50 current_auc = 0.6722689075630253
User 3115 AUC after training: 0.6722689075630253
User 3115 does not improve AUC. Reverting changes.
Training on augumented user 102649 39/50 current_auc = 0.6722689075630253
User 102649 AUC after training: 0.6722689075630253
User 102649 does not improve AUC. Reverting changes.
Training on augumented user 5265 40/50 current_auc = 0.6722689075630253
User 5265 AUC after training: 0.6722689075630253
User 5265 does not improve AUC. Reverting changes.
Training on augumented user 66130 41/50 current_auc = 0.6722689075630253
User 66130 AUC after training: 0.6722689075630253
User 66130 does not improve AUC. Reverting changes.
Training on augumented user 61909 42/50 current_auc = 0.6722689075630253
User 61909 AUC after training: 0.6722689075630253
User 61909 does not improve AUC. Reverting changes.
Training on augumented user 84196 43/50 current_auc = 0.6722689075630253
User 84196 AUC after training: 0.6722689075630253
User 84196 does not improve AUC. Reverting changes.
Training on augumented user 66516 44/50 current_auc = 0.6722689075630253
User 66516 AUC after training: 0.6722689075630253
User 66516 does not improve AUC. Reverting changes.
Training on augumented user 107555 45/50 current_auc = 0.6722689075630253
User 107555 AUC after training: 0.6722689075630253
User 107555 does not improve AUC. Reverting changes.
Training on augumented user 113196 46/50 current_auc = 0.6722689075630253
User 113196 AUC after training: 0.6722689075630253
User 113196 does not improve AUC. Reverting changes.
Training on augumented user 71002 47/50 current_auc = 0.6722689075630253
User 71002 AUC after training: 0.6638655462184875
User 71002 does not improve AUC. Reverting changes.
Training on augumented user 26696 48/50 current_auc = 0.6722689075630253
User 26696 AUC after training: 0.6722689075630253
User 26696 does not improve AUC. Reverting changes.
Training on augumented user 126329 49/50 current_auc = 0.6722689075630253
User 126329 AUC after training: 0.6722689075630253
User 126329 does not improve AUC. Reverting changes.
[2024-12-02 19:44:22.363761] start test user 5257 232/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:44:22.795693] start test user 5257 232/568 recall augumented users by random, augumented_users = [17981, 49512, 32788, 79173, 65140, 68817, 854, 18785, 88861, 11472, 109653, 100681, 111677, 98645, 21626, 135702, 102155, 5791, 14384, 81378, 106069, 123431, 28442, 42375, 46088, 38062, 88788, 43961, 79041, 24817, 45445, 20660, 108508, 126563, 76470, 125748, 41874, 134547, 43611, 66547, 131162, 138014, 34156, 66286, 107076, 69442, 81093, 23745, 102695, 82658]
[2024-12-02 19:44:22.810279] user = 5257 Cloud 232/568
[2024-12-02 19:44:22.820545] user = 5257 Local 232/568
[2024-12-02 19:44:22.854516] user = 5257 Local+ 232/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:44:25.218437] user = 5257 MPDA- 232/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6833333333333333
Training on augumented user 17981 0/50 current_auc = 0.6833333333333333
User 17981 AUC after training: 0.6805555555555556
User 17981 does not improve AUC. Reverting changes.
Training on augumented user 49512 1/50 current_auc = 0.6833333333333333
User 49512 AUC after training: 0.6833333333333333
User 49512 does not improve AUC. Reverting changes.
Training on augumented user 32788 2/50 current_auc = 0.6833333333333333
User 32788 AUC after training: 0.6861111111111111
User 32788 improves AUC. Keeping the model.
Training on augumented user 79173 3/50 current_auc = 0.6861111111111111
User 79173 AUC after training: 0.6861111111111111
User 79173 does not improve AUC. Reverting changes.
Training on augumented user 65140 4/50 current_auc = 0.6861111111111111
User 65140 AUC after training: 0.6833333333333333
User 65140 does not improve AUC. Reverting changes.
Training on augumented user 68817 5/50 current_auc = 0.6861111111111111
User 68817 AUC after training: 0.6833333333333333
User 68817 does not improve AUC. Reverting changes.
Training on augumented user 854 6/50 current_auc = 0.6861111111111111
User 854 AUC after training: 0.6861111111111111
User 854 does not improve AUC. Reverting changes.
Training on augumented user 18785 7/50 current_auc = 0.6861111111111111
User 18785 AUC after training: 0.6833333333333333
User 18785 does not improve AUC. Reverting changes.
Training on augumented user 88861 8/50 current_auc = 0.6861111111111111
User 88861 AUC after training: 0.6861111111111111
User 88861 does not improve AUC. Reverting changes.
Training on augumented user 11472 9/50 current_auc = 0.6861111111111111
User 11472 AUC after training: 0.6861111111111111
User 11472 does not improve AUC. Reverting changes.
Training on augumented user 109653 10/50 current_auc = 0.6861111111111111
User 109653 AUC after training: 0.6805555555555555
User 109653 does not improve AUC. Reverting changes.
Training on augumented user 100681 11/50 current_auc = 0.6861111111111111
User 100681 AUC after training: 0.6861111111111111
User 100681 does not improve AUC. Reverting changes.
Training on augumented user 111677 12/50 current_auc = 0.6861111111111111
User 111677 AUC after training: 0.6833333333333333
User 111677 does not improve AUC. Reverting changes.
Training on augumented user 98645 13/50 current_auc = 0.6861111111111111
User 98645 AUC after training: 0.6861111111111111
User 98645 does not improve AUC. Reverting changes.
Training on augumented user 21626 14/50 current_auc = 0.6861111111111111
User 21626 AUC after training: 0.6833333333333333
User 21626 does not improve AUC. Reverting changes.
Training on augumented user 135702 15/50 current_auc = 0.6861111111111111
User 135702 AUC after training: 0.6861111111111111
User 135702 does not improve AUC. Reverting changes.
Training on augumented user 102155 16/50 current_auc = 0.6861111111111111
User 102155 AUC after training: 0.6861111111111111
User 102155 does not improve AUC. Reverting changes.
Training on augumented user 5791 17/50 current_auc = 0.6861111111111111
User 5791 AUC after training: 0.6833333333333333
User 5791 does not improve AUC. Reverting changes.
Training on augumented user 14384 18/50 current_auc = 0.6861111111111111
User 14384 AUC after training: 0.6861111111111111
User 14384 does not improve AUC. Reverting changes.
Training on augumented user 81378 19/50 current_auc = 0.6861111111111111
User 81378 AUC after training: 0.6861111111111111
User 81378 does not improve AUC. Reverting changes.
Training on augumented user 106069 20/50 current_auc = 0.6861111111111111
User 106069 AUC after training: 0.6805555555555556
User 106069 does not improve AUC. Reverting changes.
Training on augumented user 123431 21/50 current_auc = 0.6861111111111111
User 123431 AUC after training: 0.6861111111111111
User 123431 does not improve AUC. Reverting changes.
Training on augumented user 28442 22/50 current_auc = 0.6861111111111111
User 28442 AUC after training: 0.6861111111111111
User 28442 does not improve AUC. Reverting changes.
Training on augumented user 42375 23/50 current_auc = 0.6861111111111111
User 42375 AUC after training: 0.6833333333333333
User 42375 does not improve AUC. Reverting changes.
Training on augumented user 46088 24/50 current_auc = 0.6861111111111111
User 46088 AUC after training: 0.6861111111111111
User 46088 does not improve AUC. Reverting changes.
Training on augumented user 38062 25/50 current_auc = 0.6861111111111111
User 38062 AUC after training: 0.6833333333333333
User 38062 does not improve AUC. Reverting changes.
Training on augumented user 88788 26/50 current_auc = 0.6861111111111111
User 88788 AUC after training: 0.6833333333333333
User 88788 does not improve AUC. Reverting changes.
Training on augumented user 43961 27/50 current_auc = 0.6861111111111111
User 43961 AUC after training: 0.6861111111111111
User 43961 does not improve AUC. Reverting changes.
Training on augumented user 79041 28/50 current_auc = 0.6861111111111111
User 79041 AUC after training: 0.6861111111111111
User 79041 does not improve AUC. Reverting changes.
Training on augumented user 24817 29/50 current_auc = 0.6861111111111111
User 24817 AUC after training: 0.6833333333333333
User 24817 does not improve AUC. Reverting changes.
Training on augumented user 45445 30/50 current_auc = 0.6861111111111111
User 45445 AUC after training: 0.6861111111111111
User 45445 does not improve AUC. Reverting changes.
Training on augumented user 20660 31/50 current_auc = 0.6861111111111111
User 20660 AUC after training: 0.6861111111111111
User 20660 does not improve AUC. Reverting changes.
Training on augumented user 108508 32/50 current_auc = 0.6861111111111111
User 108508 AUC after training: 0.6861111111111111
User 108508 does not improve AUC. Reverting changes.
Training on augumented user 126563 33/50 current_auc = 0.6861111111111111
User 126563 AUC after training: 0.6833333333333333
User 126563 does not improve AUC. Reverting changes.
Training on augumented user 76470 34/50 current_auc = 0.6861111111111111
User 76470 AUC after training: 0.6861111111111111
User 76470 does not improve AUC. Reverting changes.
Training on augumented user 125748 35/50 current_auc = 0.6861111111111111
User 125748 AUC after training: 0.6833333333333333
User 125748 does not improve AUC. Reverting changes.
Training on augumented user 41874 36/50 current_auc = 0.6861111111111111
User 41874 AUC after training: 0.6861111111111111
User 41874 does not improve AUC. Reverting changes.
Training on augumented user 134547 37/50 current_auc = 0.6861111111111111
User 134547 AUC after training: 0.6805555555555555
User 134547 does not improve AUC. Reverting changes.
Training on augumented user 43611 38/50 current_auc = 0.6861111111111111
User 43611 AUC after training: 0.6833333333333333
User 43611 does not improve AUC. Reverting changes.
Training on augumented user 66547 39/50 current_auc = 0.6861111111111111
User 66547 AUC after training: 0.6833333333333333
User 66547 does not improve AUC. Reverting changes.
Training on augumented user 131162 40/50 current_auc = 0.6861111111111111
User 131162 AUC after training: 0.6861111111111111
User 131162 does not improve AUC. Reverting changes.
Training on augumented user 138014 41/50 current_auc = 0.6861111111111111
User 138014 AUC after training: 0.6833333333333333
User 138014 does not improve AUC. Reverting changes.
Training on augumented user 34156 42/50 current_auc = 0.6861111111111111
User 34156 AUC after training: 0.6861111111111111
User 34156 does not improve AUC. Reverting changes.
Training on augumented user 66286 43/50 current_auc = 0.6861111111111111
User 66286 AUC after training: 0.6861111111111111
User 66286 does not improve AUC. Reverting changes.
Training on augumented user 107076 44/50 current_auc = 0.6861111111111111
User 107076 AUC after training: 0.6861111111111111
User 107076 does not improve AUC. Reverting changes.
Training on augumented user 69442 45/50 current_auc = 0.6861111111111111
User 69442 AUC after training: 0.6833333333333333
User 69442 does not improve AUC. Reverting changes.
Training on augumented user 81093 46/50 current_auc = 0.6861111111111111
User 81093 AUC after training: 0.6833333333333333
User 81093 does not improve AUC. Reverting changes.
Training on augumented user 23745 47/50 current_auc = 0.6861111111111111
User 23745 AUC after training: 0.6861111111111111
User 23745 does not improve AUC. Reverting changes.
Training on augumented user 102695 48/50 current_auc = 0.6861111111111111
User 102695 AUC after training: 0.6861111111111111
User 102695 does not improve AUC. Reverting changes.
Training on augumented user 82658 49/50 current_auc = 0.6861111111111111
User 82658 AUC after training: 0.6833333333333333
User 82658 does not improve AUC. Reverting changes.
[2024-12-02 19:44:58.077951] start test user 5261 233/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:44:58.509990] start test user 5261 233/568 recall augumented users by random, augumented_users = [94490, 15509, 118432, 60441, 22972, 109264, 118798, 63334, 91, 19189, 89024, 38837, 103088, 20127, 18184, 7876, 68581, 70619, 117825, 76298, 24512, 114853, 64189, 15389, 11693, 110526, 67690, 93014, 102814, 132136, 129646, 70628, 111750, 129855, 474, 105020, 47731, 85643, 55243, 55943, 102403, 129391, 137490, 26002, 64527, 16833, 65898, 57377, 34241, 131435]
[2024-12-02 19:44:58.527406] user = 5261 Cloud 233/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:44:58.534721] user = 5261 Local 233/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:44:58.607485] user = 5261 Local+ 233/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:45:01.432264] user = 5261 MPDA- 233/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 94490 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94490 AUC after training: 0.5
User 94490 does not improve AUC. Reverting changes.
Training on augumented user 15509 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15509 AUC after training: 0.5
User 15509 does not improve AUC. Reverting changes.
Training on augumented user 118432 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118432 AUC after training: 0.5
User 118432 does not improve AUC. Reverting changes.
Training on augumented user 60441 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60441 AUC after training: 0.5
User 60441 does not improve AUC. Reverting changes.
Training on augumented user 22972 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22972 AUC after training: 0.5
User 22972 does not improve AUC. Reverting changes.
Training on augumented user 109264 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109264 AUC after training: 0.5
User 109264 does not improve AUC. Reverting changes.
Training on augumented user 118798 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118798 AUC after training: 0.5
User 118798 does not improve AUC. Reverting changes.
Training on augumented user 63334 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63334 AUC after training: 0.5
User 63334 does not improve AUC. Reverting changes.
Training on augumented user 91 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91 AUC after training: 0.5
User 91 does not improve AUC. Reverting changes.
Training on augumented user 19189 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19189 AUC after training: 0.5
User 19189 does not improve AUC. Reverting changes.
Training on augumented user 89024 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89024 AUC after training: 0.5
User 89024 does not improve AUC. Reverting changes.
Training on augumented user 38837 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38837 AUC after training: 0.5
User 38837 does not improve AUC. Reverting changes.
Training on augumented user 103088 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103088 AUC after training: 0.5
User 103088 does not improve AUC. Reverting changes.
Training on augumented user 20127 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20127 AUC after training: 0.5
User 20127 does not improve AUC. Reverting changes.
Training on augumented user 18184 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18184 AUC after training: 0.5
User 18184 does not improve AUC. Reverting changes.
Training on augumented user 7876 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7876 AUC after training: 0.5
User 7876 does not improve AUC. Reverting changes.
Training on augumented user 68581 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68581 AUC after training: 0.5
User 68581 does not improve AUC. Reverting changes.
Training on augumented user 70619 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70619 AUC after training: 0.5
User 70619 does not improve AUC. Reverting changes.
Training on augumented user 117825 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117825 AUC after training: 0.5
User 117825 does not improve AUC. Reverting changes.
Training on augumented user 76298 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76298 AUC after training: 0.5
User 76298 does not improve AUC. Reverting changes.
Training on augumented user 24512 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24512 AUC after training: 0.5
User 24512 does not improve AUC. Reverting changes.
Training on augumented user 114853 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114853 AUC after training: 0.5
User 114853 does not improve AUC. Reverting changes.
Training on augumented user 64189 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64189 AUC after training: 0.5
User 64189 does not improve AUC. Reverting changes.
Training on augumented user 15389 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15389 AUC after training: 0.5
User 15389 does not improve AUC. Reverting changes.
Training on augumented user 11693 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11693 AUC after training: 0.5
User 11693 does not improve AUC. Reverting changes.
Training on augumented user 110526 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110526 AUC after training: 0.5
User 110526 does not improve AUC. Reverting changes.
Training on augumented user 67690 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67690 AUC after training: 0.5
User 67690 does not improve AUC. Reverting changes.
Training on augumented user 93014 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93014 AUC after training: 0.5
User 93014 does not improve AUC. Reverting changes.
Training on augumented user 102814 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102814 AUC after training: 0.5
User 102814 does not improve AUC. Reverting changes.
Training on augumented user 132136 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132136 AUC after training: 0.5
User 132136 does not improve AUC. Reverting changes.
Training on augumented user 129646 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129646 AUC after training: 0.5
User 129646 does not improve AUC. Reverting changes.
Training on augumented user 70628 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70628 AUC after training: 0.5
User 70628 does not improve AUC. Reverting changes.
Training on augumented user 111750 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111750 AUC after training: 0.5
User 111750 does not improve AUC. Reverting changes.
Training on augumented user 129855 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129855 AUC after training: 0.5
User 129855 does not improve AUC. Reverting changes.
Training on augumented user 474 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 474 AUC after training: 0.5
User 474 does not improve AUC. Reverting changes.
Training on augumented user 105020 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105020 AUC after training: 0.5
User 105020 does not improve AUC. Reverting changes.
Training on augumented user 47731 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47731 AUC after training: 0.5
User 47731 does not improve AUC. Reverting changes.
Training on augumented user 85643 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85643 AUC after training: 0.5
User 85643 does not improve AUC. Reverting changes.
Training on augumented user 55243 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55243 AUC after training: 0.5
User 55243 does not improve AUC. Reverting changes.
Training on augumented user 55943 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55943 AUC after training: 0.5
User 55943 does not improve AUC. Reverting changes.
Training on augumented user 102403 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102403 AUC after training: 0.5
User 102403 does not improve AUC. Reverting changes.
Training on augumented user 129391 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129391 AUC after training: 0.5
User 129391 does not improve AUC. Reverting changes.
Training on augumented user 137490 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137490 AUC after training: 0.5
User 137490 does not improve AUC. Reverting changes.
Training on augumented user 26002 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26002 AUC after training: 0.5
User 26002 does not improve AUC. Reverting changes.
Training on augumented user 64527 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64527 AUC after training: 0.5
User 64527 does not improve AUC. Reverting changes.
Training on augumented user 16833 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16833 AUC after training: 0.5
User 16833 does not improve AUC. Reverting changes.
Training on augumented user 65898 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65898 AUC after training: 0.5
User 65898 does not improve AUC. Reverting changes.
Training on augumented user 57377 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57377 AUC after training: 0.5
User 57377 does not improve AUC. Reverting changes.
Training on augumented user 34241 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34241 AUC after training: 0.5
User 34241 does not improve AUC. Reverting changes.
Training on augumented user 131435 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131435 AUC after training: 0.5
User 131435 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:45:28.370644] start test user 5314 234/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:45:29.028692] start test user 5314 234/568 recall augumented users by random, augumented_users = [87947, 43625, 56535, 19409, 62012, 132890, 53561, 91354, 4687, 97022, 83666, 44554, 38707, 33497, 115365, 3585, 86514, 102280, 8869, 46216, 9494, 15353, 32812, 20924, 111817, 43390, 115119, 25360, 70908, 15909, 17291, 116993, 75972, 124238, 120395, 132244, 39892, 84946, 98061, 45829, 23901, 127706, 37821, 129720, 71050, 97150, 64672, 20407, 131839, 27636]
[2024-12-02 19:45:29.050649] user = 5314 Cloud 234/568
[2024-12-02 19:45:29.075572] user = 5314 Local 234/568
[2024-12-02 19:45:29.286897] user = 5314 Local+ 234/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:45:31.885497] user = 5314 MPDA- 234/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6052631578947368
Training on augumented user 87947 0/50 current_auc = 0.6052631578947368
User 87947 AUC after training: 0.6052631578947368
User 87947 does not improve AUC. Reverting changes.
Training on augumented user 43625 1/50 current_auc = 0.6052631578947368
User 43625 AUC after training: 0.6052631578947368
User 43625 does not improve AUC. Reverting changes.
Training on augumented user 56535 2/50 current_auc = 0.6052631578947368
User 56535 AUC after training: 0.6045536635706915
User 56535 does not improve AUC. Reverting changes.
Training on augumented user 19409 3/50 current_auc = 0.6052631578947368
User 19409 AUC after training: 0.6070691434468525
User 19409 improves AUC. Keeping the model.
Training on augumented user 62012 4/50 current_auc = 0.6070691434468525
User 62012 AUC after training: 0.6062306501547988
User 62012 does not improve AUC. Reverting changes.
Training on augumented user 132890 5/50 current_auc = 0.6070691434468525
User 132890 AUC after training: 0.6062951496388029
User 132890 does not improve AUC. Reverting changes.
Training on augumented user 53561 6/50 current_auc = 0.6070691434468525
User 53561 AUC after training: 0.6062306501547988
User 53561 does not improve AUC. Reverting changes.
Training on augumented user 91354 7/50 current_auc = 0.6070691434468525
User 91354 AUC after training: 0.606359649122807
User 91354 does not improve AUC. Reverting changes.
Training on augumented user 4687 8/50 current_auc = 0.6070691434468525
User 4687 AUC after training: 0.606359649122807
User 4687 does not improve AUC. Reverting changes.
Training on augumented user 97022 9/50 current_auc = 0.6070691434468525
User 97022 AUC after training: 0.6062951496388028
User 97022 does not improve AUC. Reverting changes.
Training on augumented user 83666 10/50 current_auc = 0.6070691434468525
User 83666 AUC after training: 0.6061016511867906
User 83666 does not improve AUC. Reverting changes.
Training on augumented user 44554 11/50 current_auc = 0.6070691434468525
User 44554 AUC after training: 0.6072626418988648
User 44554 improves AUC. Keeping the model.
Training on augumented user 38707 12/50 current_auc = 0.6072626418988648
User 38707 AUC after training: 0.60687564499484
User 38707 does not improve AUC. Reverting changes.
Training on augumented user 33497 13/50 current_auc = 0.6072626418988648
User 33497 AUC after training: 0.6064886480908153
User 33497 does not improve AUC. Reverting changes.
Training on augumented user 115365 14/50 current_auc = 0.6072626418988648
User 115365 AUC after training: 0.6059726522187823
User 115365 does not improve AUC. Reverting changes.
Training on augumented user 3585 15/50 current_auc = 0.6072626418988648
User 3585 AUC after training: 0.6070046439628484
User 3585 does not improve AUC. Reverting changes.
Training on augumented user 86514 16/50 current_auc = 0.6072626418988648
User 86514 AUC after training: 0.605843653250774
User 86514 does not improve AUC. Reverting changes.
Training on augumented user 102280 17/50 current_auc = 0.6072626418988648
User 102280 AUC after training: 0.6053921568627452
User 102280 does not improve AUC. Reverting changes.
Training on augumented user 8869 18/50 current_auc = 0.6072626418988648
User 8869 AUC after training: 0.60687564499484
User 8869 does not improve AUC. Reverting changes.
Training on augumented user 46216 19/50 current_auc = 0.6072626418988648
User 46216 AUC after training: 0.606359649122807
User 46216 does not improve AUC. Reverting changes.
Training on augumented user 9494 20/50 current_auc = 0.6072626418988648
User 9494 AUC after training: 0.6071336429308566
User 9494 does not improve AUC. Reverting changes.
Training on augumented user 15353 21/50 current_auc = 0.6072626418988648
User 15353 AUC after training: 0.6070046439628484
User 15353 does not improve AUC. Reverting changes.
Training on augumented user 32812 22/50 current_auc = 0.6072626418988648
User 32812 AUC after training: 0.6064241486068112
User 32812 does not improve AUC. Reverting changes.
Training on augumented user 20924 23/50 current_auc = 0.6072626418988648
User 20924 AUC after training: 0.606359649122807
User 20924 does not improve AUC. Reverting changes.
Training on augumented user 111817 24/50 current_auc = 0.6072626418988648
User 111817 AUC after training: 0.6076496388028896
User 111817 improves AUC. Keeping the model.
Training on augumented user 43390 25/50 current_auc = 0.6076496388028896
User 43390 AUC after training: 0.60687564499484
User 43390 does not improve AUC. Reverting changes.
Training on augumented user 115119 26/50 current_auc = 0.6076496388028896
User 115119 AUC after training: 0.6066176470588236
User 115119 does not improve AUC. Reverting changes.
Training on augumented user 25360 27/50 current_auc = 0.6076496388028896
User 25360 AUC after training: 0.6068756449948401
User 25360 does not improve AUC. Reverting changes.
Training on augumented user 70908 28/50 current_auc = 0.6076496388028896
User 70908 AUC after training: 0.605263157894737
User 70908 does not improve AUC. Reverting changes.
Training on augumented user 15909 29/50 current_auc = 0.6076496388028896
User 15909 AUC after training: 0.6054566563467493
User 15909 does not improve AUC. Reverting changes.
Training on augumented user 17291 30/50 current_auc = 0.6076496388028896
User 17291 AUC after training: 0.6075206398348812
User 17291 does not improve AUC. Reverting changes.
Training on augumented user 116993 31/50 current_auc = 0.6076496388028896
User 116993 AUC after training: 0.6055856553147575
User 116993 does not improve AUC. Reverting changes.
Training on augumented user 75972 32/50 current_auc = 0.6076496388028896
User 75972 AUC after training: 0.6096491228070177
User 75972 improves AUC. Keeping the model.
Training on augumented user 124238 33/50 current_auc = 0.6096491228070177
User 124238 AUC after training: 0.6077141382868937
User 124238 does not improve AUC. Reverting changes.
Training on augumented user 120395 34/50 current_auc = 0.6096491228070177
User 120395 AUC after training: 0.6058436532507739
User 120395 does not improve AUC. Reverting changes.
Training on augumented user 132244 35/50 current_auc = 0.6096491228070177
User 132244 AUC after training: 0.6081011351909185
User 132244 does not improve AUC. Reverting changes.
Training on augumented user 39892 36/50 current_auc = 0.6096491228070177
User 39892 AUC after training: 0.6097781217750259
User 39892 improves AUC. Keeping the model.
Training on augumented user 84946 37/50 current_auc = 0.6097781217750259
User 84946 AUC after training: 0.6096491228070177
User 84946 does not improve AUC. Reverting changes.
Training on augumented user 98061 38/50 current_auc = 0.6097781217750259
User 98061 AUC after training: 0.6086171310629515
User 98061 does not improve AUC. Reverting changes.
Training on augumented user 45829 39/50 current_auc = 0.6097781217750259
User 45829 AUC after training: 0.6086171310629515
User 45829 does not improve AUC. Reverting changes.
Training on augumented user 23901 40/50 current_auc = 0.6097781217750259
User 23901 AUC after training: 0.608875128998968
User 23901 does not improve AUC. Reverting changes.
Training on augumented user 127706 41/50 current_auc = 0.6097781217750259
User 127706 AUC after training: 0.6079721362229102
User 127706 does not improve AUC. Reverting changes.
Training on augumented user 37821 42/50 current_auc = 0.6097781217750259
User 37821 AUC after training: 0.6095201238390093
User 37821 does not improve AUC. Reverting changes.
Training on augumented user 129720 43/50 current_auc = 0.6097781217750259
User 129720 AUC after training: 0.6095201238390093
User 129720 does not improve AUC. Reverting changes.
Training on augumented user 71050 44/50 current_auc = 0.6097781217750259
User 71050 AUC after training: 0.6091331269349846
User 71050 does not improve AUC. Reverting changes.
Training on augumented user 97150 45/50 current_auc = 0.6097781217750259
User 97150 AUC after training: 0.6096491228070177
User 97150 does not improve AUC. Reverting changes.
Training on augumented user 64672 46/50 current_auc = 0.6097781217750259
User 64672 AUC after training: 0.6086816305469557
User 64672 does not improve AUC. Reverting changes.
Training on augumented user 20407 47/50 current_auc = 0.6097781217750259
User 20407 AUC after training: 0.6086816305469557
User 20407 does not improve AUC. Reverting changes.
Training on augumented user 131839 48/50 current_auc = 0.6097781217750259
User 131839 AUC after training: 0.6095201238390092
User 131839 does not improve AUC. Reverting changes.
Training on augumented user 27636 49/50 current_auc = 0.6097781217750259
User 27636 AUC after training: 0.6082946336429309
User 27636 does not improve AUC. Reverting changes.
[2024-12-02 19:46:01.602448] start test user 5329 235/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:46:02.002213] start test user 5329 235/568 recall augumented users by random, augumented_users = [85479, 128916, 30872, 122904, 94296, 113505, 53958, 134681, 57172, 123115, 3157, 16713, 138346, 86401, 96646, 66954, 26965, 37630, 40248, 108855, 49399, 76787, 76906, 42852, 113802, 5269, 82553, 86479, 60896, 38979, 93281, 53035, 37521, 131467, 16910, 83654, 4196, 30842, 25667, 3204, 111562, 132855, 79677, 103834, 35030, 18365, 127816, 122493, 57053, 27313]
[2024-12-02 19:46:02.017665] user = 5329 Cloud 235/568
[2024-12-02 19:46:02.043090] user = 5329 Local 235/568
[2024-12-02 19:46:02.107302] user = 5329 Local+ 235/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:46:04.290531] user = 5329 MPDA- 235/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8231617647058823
Training on augumented user 85479 0/50 current_auc = 0.8231617647058823
User 85479 AUC after training: 0.8234375
User 85479 improves AUC. Keeping the model.
Training on augumented user 128916 1/50 current_auc = 0.8234375
User 128916 AUC after training: 0.8236519607843138
User 128916 improves AUC. Keeping the model.
Training on augumented user 30872 2/50 current_auc = 0.8236519607843138
User 30872 AUC after training: 0.8237438725490197
User 30872 improves AUC. Keeping the model.
Training on augumented user 122904 3/50 current_auc = 0.8237438725490197
User 122904 AUC after training: 0.8233762254901961
User 122904 does not improve AUC. Reverting changes.
Training on augumented user 94296 4/50 current_auc = 0.8237438725490197
User 94296 AUC after training: 0.8238357843137255
User 94296 improves AUC. Keeping the model.
Training on augumented user 113505 5/50 current_auc = 0.8238357843137255
User 113505 AUC after training: 0.8235906862745098
User 113505 does not improve AUC. Reverting changes.
Training on augumented user 53958 6/50 current_auc = 0.8238357843137255
User 53958 AUC after training: 0.8237132352941176
User 53958 does not improve AUC. Reverting changes.
Training on augumented user 134681 7/50 current_auc = 0.8238357843137255
User 134681 AUC after training: 0.8236519607843137
User 134681 does not improve AUC. Reverting changes.
Training on augumented user 57172 8/50 current_auc = 0.8238357843137255
User 57172 AUC after training: 0.8232230392156862
User 57172 does not improve AUC. Reverting changes.
Training on augumented user 123115 9/50 current_auc = 0.8238357843137255
User 123115 AUC after training: 0.8238357843137255
User 123115 does not improve AUC. Reverting changes.
Training on augumented user 3157 10/50 current_auc = 0.8238357843137255
User 3157 AUC after training: 0.8240808823529412
User 3157 improves AUC. Keeping the model.
Training on augumented user 16713 11/50 current_auc = 0.8240808823529412
User 16713 AUC after training: 0.8238970588235294
User 16713 does not improve AUC. Reverting changes.
Training on augumented user 138346 12/50 current_auc = 0.8240808823529412
User 138346 AUC after training: 0.8240502450980393
User 138346 does not improve AUC. Reverting changes.
Training on augumented user 86401 13/50 current_auc = 0.8240808823529412
User 86401 AUC after training: 0.8238970588235294
User 86401 does not improve AUC. Reverting changes.
Training on augumented user 96646 14/50 current_auc = 0.8240808823529412
User 96646 AUC after training: 0.8237132352941177
User 96646 does not improve AUC. Reverting changes.
Training on augumented user 66954 15/50 current_auc = 0.8240808823529412
User 66954 AUC after training: 0.8240196078431371
User 66954 does not improve AUC. Reverting changes.
Training on augumented user 26965 16/50 current_auc = 0.8240808823529412
User 26965 AUC after training: 0.8245710784313726
User 26965 improves AUC. Keeping the model.
Training on augumented user 37630 17/50 current_auc = 0.8245710784313726
User 37630 AUC after training: 0.8242953431372549
User 37630 does not improve AUC. Reverting changes.
Training on augumented user 40248 18/50 current_auc = 0.8245710784313726
User 40248 AUC after training: 0.8242953431372549
User 40248 does not improve AUC. Reverting changes.
Training on augumented user 108855 19/50 current_auc = 0.8245710784313726
User 108855 AUC after training: 0.8245710784313726
User 108855 does not improve AUC. Reverting changes.
Training on augumented user 49399 20/50 current_auc = 0.8245710784313726
User 49399 AUC after training: 0.8243259803921569
User 49399 does not improve AUC. Reverting changes.
Training on augumented user 76787 21/50 current_auc = 0.8245710784313726
User 76787 AUC after training: 0.8247242647058824
User 76787 improves AUC. Keeping the model.
Training on augumented user 76906 22/50 current_auc = 0.8247242647058824
User 76906 AUC after training: 0.8245404411764706
User 76906 does not improve AUC. Reverting changes.
Training on augumented user 42852 23/50 current_auc = 0.8247242647058824
User 42852 AUC after training: 0.8245404411764706
User 42852 does not improve AUC. Reverting changes.
Training on augumented user 113802 24/50 current_auc = 0.8247242647058824
User 113802 AUC after training: 0.8245098039215687
User 113802 does not improve AUC. Reverting changes.
Training on augumented user 5269 25/50 current_auc = 0.8247242647058824
User 5269 AUC after training: 0.8245404411764706
User 5269 does not improve AUC. Reverting changes.
Training on augumented user 82553 26/50 current_auc = 0.8247242647058824
User 82553 AUC after training: 0.8241115196078431
User 82553 does not improve AUC. Reverting changes.
Training on augumented user 86479 27/50 current_auc = 0.8247242647058824
User 86479 AUC after training: 0.8239583333333333
User 86479 does not improve AUC. Reverting changes.
Training on augumented user 60896 28/50 current_auc = 0.8247242647058824
User 60896 AUC after training: 0.8243259803921569
User 60896 does not improve AUC. Reverting changes.
Training on augumented user 38979 29/50 current_auc = 0.8247242647058824
User 38979 AUC after training: 0.8243259803921569
User 38979 does not improve AUC. Reverting changes.
Training on augumented user 93281 30/50 current_auc = 0.8247242647058824
User 93281 AUC after training: 0.8241421568627451
User 93281 does not improve AUC. Reverting changes.
Training on augumented user 53035 31/50 current_auc = 0.8247242647058824
User 53035 AUC after training: 0.8246936274509804
User 53035 does not improve AUC. Reverting changes.
Training on augumented user 37521 32/50 current_auc = 0.8247242647058824
User 37521 AUC after training: 0.8248161764705882
User 37521 improves AUC. Keeping the model.
Training on augumented user 131467 33/50 current_auc = 0.8248161764705882
User 131467 AUC after training: 0.8231311274509804
User 131467 does not improve AUC. Reverting changes.
Training on augumented user 16910 34/50 current_auc = 0.8248161764705882
User 16910 AUC after training: 0.8243566176470588
User 16910 does not improve AUC. Reverting changes.
Training on augumented user 83654 35/50 current_auc = 0.8248161764705882
User 83654 AUC after training: 0.8245710784313726
User 83654 does not improve AUC. Reverting changes.
Training on augumented user 4196 36/50 current_auc = 0.8248161764705882
User 4196 AUC after training: 0.8242953431372549
User 4196 does not improve AUC. Reverting changes.
Training on augumented user 30842 37/50 current_auc = 0.8248161764705882
User 30842 AUC after training: 0.8243872549019609
User 30842 does not improve AUC. Reverting changes.
Training on augumented user 25667 38/50 current_auc = 0.8248161764705882
User 25667 AUC after training: 0.8245710784313726
User 25667 does not improve AUC. Reverting changes.
Training on augumented user 3204 39/50 current_auc = 0.8248161764705882
User 3204 AUC after training: 0.8247855392156862
User 3204 does not improve AUC. Reverting changes.
Training on augumented user 111562 40/50 current_auc = 0.8248161764705882
User 111562 AUC after training: 0.8245404411764706
User 111562 does not improve AUC. Reverting changes.
Training on augumented user 132855 41/50 current_auc = 0.8248161764705882
User 132855 AUC after training: 0.8243566176470588
User 132855 does not improve AUC. Reverting changes.
Training on augumented user 79677 42/50 current_auc = 0.8248161764705882
User 79677 AUC after training: 0.8241421568627452
User 79677 does not improve AUC. Reverting changes.
Training on augumented user 103834 43/50 current_auc = 0.8248161764705882
User 103834 AUC after training: 0.8242953431372549
User 103834 does not improve AUC. Reverting changes.
Training on augumented user 35030 44/50 current_auc = 0.8248161764705882
User 35030 AUC after training: 0.8246017156862746
User 35030 does not improve AUC. Reverting changes.
Training on augumented user 18365 45/50 current_auc = 0.8248161764705882
User 18365 AUC after training: 0.823498774509804
User 18365 does not improve AUC. Reverting changes.
Training on augumented user 127816 46/50 current_auc = 0.8248161764705882
User 127816 AUC after training: 0.8240196078431373
User 127816 does not improve AUC. Reverting changes.
Training on augumented user 122493 47/50 current_auc = 0.8248161764705882
User 122493 AUC after training: 0.8244485294117647
User 122493 does not improve AUC. Reverting changes.
Training on augumented user 57053 48/50 current_auc = 0.8248161764705882
User 57053 AUC after training: 0.8245404411764705
User 57053 does not improve AUC. Reverting changes.
Training on augumented user 27313 49/50 current_auc = 0.8248161764705882
User 27313 AUC after training: 0.8247242647058823
User 27313 does not improve AUC. Reverting changes.
[2024-12-02 19:46:37.438451] start test user 5352 236/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:46:37.961689] start test user 5352 236/568 recall augumented users by random, augumented_users = [71641, 36923, 23659, 58593, 113531, 94606, 87597, 58492, 178, 35499, 74540, 25528, 137381, 24894, 92897, 90575, 64651, 110100, 82945, 64114, 126273, 45472, 105583, 5937, 57133, 70579, 137526, 102343, 562, 93450, 71629, 43790, 122335, 99809, 62809, 88706, 14345, 30056, 45217, 30558, 98388, 78743, 52628, 39574, 6104, 30829, 69856, 27974, 42287, 124929]
[2024-12-02 19:46:37.978048] user = 5352 Cloud 236/568
[2024-12-02 19:46:38.017630] user = 5352 Local 236/568
[2024-12-02 19:46:38.246340] user = 5352 Local+ 236/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:46:40.107506] user = 5352 MPDA- 236/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.48834325396825395
Training on augumented user 71641 0/50 current_auc = 0.48834325396825395
User 71641 AUC after training: 0.4895833333333333
User 71641 improves AUC. Keeping the model.
Training on augumented user 36923 1/50 current_auc = 0.4895833333333333
User 36923 AUC after training: 0.4898313492063492
User 36923 improves AUC. Keeping the model.
Training on augumented user 23659 2/50 current_auc = 0.4898313492063492
User 23659 AUC after training: 0.4895833333333333
User 23659 does not improve AUC. Reverting changes.
Training on augumented user 58593 3/50 current_auc = 0.4898313492063492
User 58593 AUC after training: 0.4893353174603174
User 58593 does not improve AUC. Reverting changes.
Training on augumented user 113531 4/50 current_auc = 0.4898313492063492
User 113531 AUC after training: 0.4895833333333333
User 113531 does not improve AUC. Reverting changes.
Training on augumented user 94606 5/50 current_auc = 0.4898313492063492
User 94606 AUC after training: 0.48983134920634924
User 94606 improves AUC. Keeping the model.
Training on augumented user 87597 6/50 current_auc = 0.48983134920634924
User 87597 AUC after training: 0.49032738095238093
User 87597 improves AUC. Keeping the model.
Training on augumented user 58492 7/50 current_auc = 0.49032738095238093
User 58492 AUC after training: 0.4895833333333333
User 58492 does not improve AUC. Reverting changes.
Training on augumented user 178 8/50 current_auc = 0.49032738095238093
User 178 AUC after training: 0.4898313492063492
User 178 does not improve AUC. Reverting changes.
Training on augumented user 35499 9/50 current_auc = 0.49032738095238093
User 35499 AUC after training: 0.4895833333333333
User 35499 does not improve AUC. Reverting changes.
Training on augumented user 74540 10/50 current_auc = 0.49032738095238093
User 74540 AUC after training: 0.4908234126984127
User 74540 improves AUC. Keeping the model.
Training on augumented user 25528 11/50 current_auc = 0.4908234126984127
User 25528 AUC after training: 0.4900793650793651
User 25528 does not improve AUC. Reverting changes.
Training on augumented user 137381 12/50 current_auc = 0.4908234126984127
User 137381 AUC after training: 0.4897073412698413
User 137381 does not improve AUC. Reverting changes.
Training on augumented user 24894 13/50 current_auc = 0.4908234126984127
User 24894 AUC after training: 0.4913194444444444
User 24894 improves AUC. Keeping the model.
Training on augumented user 92897 14/50 current_auc = 0.4913194444444444
User 92897 AUC after training: 0.4908234126984127
User 92897 does not improve AUC. Reverting changes.
Training on augumented user 90575 15/50 current_auc = 0.4913194444444444
User 90575 AUC after training: 0.48933531746031744
User 90575 does not improve AUC. Reverting changes.
Training on augumented user 64651 16/50 current_auc = 0.4913194444444444
User 64651 AUC after training: 0.4913194444444444
User 64651 does not improve AUC. Reverting changes.
Training on augumented user 110100 17/50 current_auc = 0.4913194444444444
User 110100 AUC after training: 0.49082341269841273
User 110100 does not improve AUC. Reverting changes.
Training on augumented user 82945 18/50 current_auc = 0.4913194444444444
User 82945 AUC after training: 0.4913194444444444
User 82945 does not improve AUC. Reverting changes.
Training on augumented user 64114 19/50 current_auc = 0.4913194444444444
User 64114 AUC after training: 0.490327380952381
User 64114 does not improve AUC. Reverting changes.
Training on augumented user 126273 20/50 current_auc = 0.4913194444444444
User 126273 AUC after training: 0.4895833333333333
User 126273 does not improve AUC. Reverting changes.
Training on augumented user 45472 21/50 current_auc = 0.4913194444444444
User 45472 AUC after training: 0.4910714285714286
User 45472 does not improve AUC. Reverting changes.
Training on augumented user 105583 22/50 current_auc = 0.4913194444444444
User 105583 AUC after training: 0.49156746031746035
User 105583 improves AUC. Keeping the model.
Training on augumented user 5937 23/50 current_auc = 0.49156746031746035
User 5937 AUC after training: 0.4915674603174603
User 5937 does not improve AUC. Reverting changes.
Training on augumented user 57133 24/50 current_auc = 0.49156746031746035
User 57133 AUC after training: 0.4908234126984127
User 57133 does not improve AUC. Reverting changes.
Training on augumented user 70579 25/50 current_auc = 0.49156746031746035
User 70579 AUC after training: 0.49107142857142855
User 70579 does not improve AUC. Reverting changes.
Training on augumented user 137526 26/50 current_auc = 0.49156746031746035
User 137526 AUC after training: 0.49032738095238093
User 137526 does not improve AUC. Reverting changes.
Training on augumented user 102343 27/50 current_auc = 0.49156746031746035
User 102343 AUC after training: 0.4908234126984127
User 102343 does not improve AUC. Reverting changes.
Training on augumented user 562 28/50 current_auc = 0.49156746031746035
User 562 AUC after training: 0.4914434523809524
User 562 does not improve AUC. Reverting changes.
Training on augumented user 93450 29/50 current_auc = 0.49156746031746035
User 93450 AUC after training: 0.4914434523809524
User 93450 does not improve AUC. Reverting changes.
Training on augumented user 71629 30/50 current_auc = 0.49156746031746035
User 71629 AUC after training: 0.4908234126984127
User 71629 does not improve AUC. Reverting changes.
Training on augumented user 43790 31/50 current_auc = 0.49156746031746035
User 43790 AUC after training: 0.4914434523809524
User 43790 does not improve AUC. Reverting changes.
Training on augumented user 122335 32/50 current_auc = 0.49156746031746035
User 122335 AUC after training: 0.4913194444444444
User 122335 does not improve AUC. Reverting changes.
Training on augumented user 99809 33/50 current_auc = 0.49156746031746035
User 99809 AUC after training: 0.49107142857142855
User 99809 does not improve AUC. Reverting changes.
Training on augumented user 62809 34/50 current_auc = 0.49156746031746035
User 62809 AUC after training: 0.49069940476190477
User 62809 does not improve AUC. Reverting changes.
Training on augumented user 88706 35/50 current_auc = 0.49156746031746035
User 88706 AUC after training: 0.4900793650793651
User 88706 does not improve AUC. Reverting changes.
Training on augumented user 14345 36/50 current_auc = 0.49156746031746035
User 14345 AUC after training: 0.4899553571428571
User 14345 does not improve AUC. Reverting changes.
Training on augumented user 30056 37/50 current_auc = 0.49156746031746035
User 30056 AUC after training: 0.4913194444444444
User 30056 does not improve AUC. Reverting changes.
Training on augumented user 45217 38/50 current_auc = 0.49156746031746035
User 45217 AUC after training: 0.49069940476190477
User 45217 does not improve AUC. Reverting changes.
Training on augumented user 30558 39/50 current_auc = 0.49156746031746035
User 30558 AUC after training: 0.4913194444444444
User 30558 does not improve AUC. Reverting changes.
Training on augumented user 98388 40/50 current_auc = 0.49156746031746035
User 98388 AUC after training: 0.4904513888888889
User 98388 does not improve AUC. Reverting changes.
Training on augumented user 78743 41/50 current_auc = 0.49156746031746035
User 78743 AUC after training: 0.49094742063492064
User 78743 does not improve AUC. Reverting changes.
Training on augumented user 52628 42/50 current_auc = 0.49156746031746035
User 52628 AUC after training: 0.49057539682539686
User 52628 does not improve AUC. Reverting changes.
Training on augumented user 39574 43/50 current_auc = 0.49156746031746035
User 39574 AUC after training: 0.49032738095238093
User 39574 does not improve AUC. Reverting changes.
Training on augumented user 6104 44/50 current_auc = 0.49156746031746035
User 6104 AUC after training: 0.4914434523809524
User 6104 does not improve AUC. Reverting changes.
Training on augumented user 30829 45/50 current_auc = 0.49156746031746035
User 30829 AUC after training: 0.4909474206349206
User 30829 does not improve AUC. Reverting changes.
Training on augumented user 69856 46/50 current_auc = 0.49156746031746035
User 69856 AUC after training: 0.4911954365079365
User 69856 does not improve AUC. Reverting changes.
Training on augumented user 27974 47/50 current_auc = 0.49156746031746035
User 27974 AUC after training: 0.4908234126984127
User 27974 does not improve AUC. Reverting changes.
Training on augumented user 42287 48/50 current_auc = 0.49156746031746035
User 42287 AUC after training: 0.4910714285714286
User 42287 does not improve AUC. Reverting changes.
Training on augumented user 124929 49/50 current_auc = 0.49156746031746035
User 124929 AUC after training: 0.4908234126984127
User 124929 does not improve AUC. Reverting changes.
[2024-12-02 19:47:02.600940] start test user 5353 237/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:47:03.013743] start test user 5353 237/568 recall augumented users by random, augumented_users = [87642, 5683, 137136, 108612, 71107, 90941, 45060, 99159, 24508, 83513, 95075, 112108, 28318, 33862, 121966, 31400, 29240, 91425, 136012, 31275, 120559, 117215, 50737, 124230, 27522, 6536, 129102, 80422, 65765, 67637, 34588, 80885, 63867, 133871, 51017, 112431, 71612, 52591, 94621, 77217, 95587, 25905, 83132, 119386, 1230, 56367, 123365, 126320, 134133, 96426]
[2024-12-02 19:47:03.029092] user = 5353 Cloud 237/568
[2024-12-02 19:47:03.053247] user = 5353 Local 237/568
[2024-12-02 19:47:03.105101] user = 5353 Local+ 237/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:47:05.309116] user = 5353 MPDA- 237/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5541056166056166
Training on augumented user 87642 0/50 current_auc = 0.5541056166056166
User 87642 AUC after training: 0.5536477411477411
User 87642 does not improve AUC. Reverting changes.
Training on augumented user 5683 1/50 current_auc = 0.5541056166056166
User 5683 AUC after training: 0.5547924297924298
User 5683 improves AUC. Keeping the model.
Training on augumented user 137136 2/50 current_auc = 0.5547924297924298
User 137136 AUC after training: 0.5544108669108669
User 137136 does not improve AUC. Reverting changes.
Training on augumented user 108612 3/50 current_auc = 0.5547924297924298
User 108612 AUC after training: 0.5535714285714286
User 108612 does not improve AUC. Reverting changes.
Training on augumented user 71107 4/50 current_auc = 0.5547924297924298
User 71107 AUC after training: 0.5547924297924298
User 71107 does not improve AUC. Reverting changes.
Training on augumented user 90941 5/50 current_auc = 0.5547924297924298
User 90941 AUC after training: 0.5540293040293041
User 90941 does not improve AUC. Reverting changes.
Training on augumented user 45060 6/50 current_auc = 0.5547924297924298
User 45060 AUC after training: 0.5550213675213675
User 45060 improves AUC. Keeping the model.
Training on augumented user 99159 7/50 current_auc = 0.5550213675213675
User 99159 AUC after training: 0.554945054945055
User 99159 does not improve AUC. Reverting changes.
Training on augumented user 24508 8/50 current_auc = 0.5550213675213675
User 24508 AUC after training: 0.5538766788766788
User 24508 does not improve AUC. Reverting changes.
Training on augumented user 83513 9/50 current_auc = 0.5550213675213675
User 83513 AUC after training: 0.5548687423687424
User 83513 does not improve AUC. Reverting changes.
Training on augumented user 95075 10/50 current_auc = 0.5550213675213675
User 95075 AUC after training: 0.5547924297924298
User 95075 does not improve AUC. Reverting changes.
Training on augumented user 112108 11/50 current_auc = 0.5550213675213675
User 112108 AUC after training: 0.5550213675213675
User 112108 does not improve AUC. Reverting changes.
Training on augumented user 28318 12/50 current_auc = 0.5550213675213675
User 28318 AUC after training: 0.5542582417582418
User 28318 does not improve AUC. Reverting changes.
Training on augumented user 33862 13/50 current_auc = 0.5550213675213675
User 33862 AUC after training: 0.5551739926739927
User 33862 improves AUC. Keeping the model.
Training on augumented user 121966 14/50 current_auc = 0.5551739926739927
User 121966 AUC after training: 0.5550213675213675
User 121966 does not improve AUC. Reverting changes.
Training on augumented user 31400 15/50 current_auc = 0.5551739926739927
User 31400 AUC after training: 0.5550976800976801
User 31400 does not improve AUC. Reverting changes.
Training on augumented user 29240 16/50 current_auc = 0.5551739926739927
User 29240 AUC after training: 0.5549450549450549
User 29240 does not improve AUC. Reverting changes.
Training on augumented user 91425 17/50 current_auc = 0.5551739926739927
User 91425 AUC after training: 0.5547161172161172
User 91425 does not improve AUC. Reverting changes.
Training on augumented user 136012 18/50 current_auc = 0.5551739926739927
User 136012 AUC after training: 0.5546398046398047
User 136012 does not improve AUC. Reverting changes.
Training on augumented user 31275 19/50 current_auc = 0.5551739926739927
User 31275 AUC after training: 0.5551739926739927
User 31275 does not improve AUC. Reverting changes.
Training on augumented user 120559 20/50 current_auc = 0.5551739926739927
User 120559 AUC after training: 0.555479242979243
User 120559 improves AUC. Keeping the model.
Training on augumented user 117215 21/50 current_auc = 0.555479242979243
User 117215 AUC after training: 0.5550213675213675
User 117215 does not improve AUC. Reverting changes.
Training on augumented user 50737 22/50 current_auc = 0.555479242979243
User 50737 AUC after training: 0.5550213675213675
User 50737 does not improve AUC. Reverting changes.
Training on augumented user 124230 23/50 current_auc = 0.555479242979243
User 124230 AUC after training: 0.5551739926739927
User 124230 does not improve AUC. Reverting changes.
Training on augumented user 27522 24/50 current_auc = 0.555479242979243
User 27522 AUC after training: 0.5552503052503053
User 27522 does not improve AUC. Reverting changes.
Training on augumented user 6536 25/50 current_auc = 0.555479242979243
User 6536 AUC after training: 0.555479242979243
User 6536 does not improve AUC. Reverting changes.
Training on augumented user 129102 26/50 current_auc = 0.555479242979243
User 129102 AUC after training: 0.5553266178266179
User 129102 does not improve AUC. Reverting changes.
Training on augumented user 80422 27/50 current_auc = 0.555479242979243
User 80422 AUC after training: 0.5554029304029304
User 80422 does not improve AUC. Reverting changes.
Training on augumented user 65765 28/50 current_auc = 0.555479242979243
User 65765 AUC after training: 0.5550213675213675
User 65765 does not improve AUC. Reverting changes.
Training on augumented user 67637 29/50 current_auc = 0.555479242979243
User 67637 AUC after training: 0.5549450549450549
User 67637 does not improve AUC. Reverting changes.
Training on augumented user 34588 30/50 current_auc = 0.555479242979243
User 34588 AUC after training: 0.5555555555555557
User 34588 improves AUC. Keeping the model.
Training on augumented user 80885 31/50 current_auc = 0.5555555555555557
User 80885 AUC after training: 0.5551739926739927
User 80885 does not improve AUC. Reverting changes.
Training on augumented user 63867 32/50 current_auc = 0.5555555555555557
User 63867 AUC after training: 0.5552503052503053
User 63867 does not improve AUC. Reverting changes.
Training on augumented user 133871 33/50 current_auc = 0.5555555555555557
User 133871 AUC after training: 0.5556318681318682
User 133871 improves AUC. Keeping the model.
Training on augumented user 51017 34/50 current_auc = 0.5556318681318682
User 51017 AUC after training: 0.555479242979243
User 51017 does not improve AUC. Reverting changes.
Training on augumented user 112431 35/50 current_auc = 0.5556318681318682
User 112431 AUC after training: 0.5555555555555556
User 112431 does not improve AUC. Reverting changes.
Training on augumented user 71612 36/50 current_auc = 0.5556318681318682
User 71612 AUC after training: 0.5552503052503053
User 71612 does not improve AUC. Reverting changes.
Training on augumented user 52591 37/50 current_auc = 0.5556318681318682
User 52591 AUC after training: 0.5558608058608059
User 52591 improves AUC. Keeping the model.
Training on augumented user 94621 38/50 current_auc = 0.5558608058608059
User 94621 AUC after training: 0.5558608058608059
User 94621 does not improve AUC. Reverting changes.
Training on augumented user 77217 39/50 current_auc = 0.5558608058608059
User 77217 AUC after training: 0.5558608058608059
User 77217 does not improve AUC. Reverting changes.
Training on augumented user 95587 40/50 current_auc = 0.5558608058608059
User 95587 AUC after training: 0.5557081807081806
User 95587 does not improve AUC. Reverting changes.
Training on augumented user 25905 41/50 current_auc = 0.5558608058608059
User 25905 AUC after training: 0.5558608058608059
User 25905 does not improve AUC. Reverting changes.
Training on augumented user 83132 42/50 current_auc = 0.5558608058608059
User 83132 AUC after training: 0.5559371184371185
User 83132 improves AUC. Keeping the model.
Training on augumented user 119386 43/50 current_auc = 0.5559371184371185
User 119386 AUC after training: 0.5552503052503053
User 119386 does not improve AUC. Reverting changes.
Training on augumented user 1230 44/50 current_auc = 0.5559371184371185
User 1230 AUC after training: 0.5552503052503053
User 1230 does not improve AUC. Reverting changes.
Training on augumented user 56367 45/50 current_auc = 0.5559371184371185
User 56367 AUC after training: 0.5566239316239316
User 56367 improves AUC. Keeping the model.
Training on augumented user 123365 46/50 current_auc = 0.5566239316239316
User 123365 AUC after training: 0.5561660561660562
User 123365 does not improve AUC. Reverting changes.
Training on augumented user 126320 47/50 current_auc = 0.5566239316239316
User 126320 AUC after training: 0.5557081807081807
User 126320 does not improve AUC. Reverting changes.
Training on augumented user 134133 48/50 current_auc = 0.5566239316239316
User 134133 AUC after training: 0.5556318681318682
User 134133 does not improve AUC. Reverting changes.
Training on augumented user 96426 49/50 current_auc = 0.5566239316239316
User 96426 AUC after training: 0.5563949938949939
User 96426 does not improve AUC. Reverting changes.
[2024-12-02 19:47:38.811957] start test user 5384 238/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:47:39.221879] start test user 5384 238/568 recall augumented users by random, augumented_users = [118310, 21248, 66537, 114517, 115878, 41834, 11141, 12287, 82960, 2075, 73372, 75428, 47075, 24168, 83531, 77028, 47069, 103857, 32078, 82723, 58676, 99697, 93415, 107571, 44632, 9412, 122309, 93259, 135800, 56107, 20252, 11343, 54230, 45872, 122549, 129879, 41314, 78027, 49527, 33220, 114706, 14340, 105708, 76621, 136556, 29594, 83922, 16397, 133124, 88494]
[2024-12-02 19:47:39.235815] user = 5384 Cloud 238/568
[2024-12-02 19:47:39.244973] user = 5384 Local 238/568
[2024-12-02 19:47:39.311751] user = 5384 Local+ 238/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:47:41.317800] user = 5384 MPDA- 238/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6000000000000001
Training on augumented user 118310 0/50 current_auc = 0.6000000000000001
User 118310 AUC after training: 0.6000000000000001
User 118310 does not improve AUC. Reverting changes.
Training on augumented user 21248 1/50 current_auc = 0.6000000000000001
User 21248 AUC after training: 0.6000000000000001
User 21248 does not improve AUC. Reverting changes.
Training on augumented user 66537 2/50 current_auc = 0.6000000000000001
User 66537 AUC after training: 0.6000000000000001
User 66537 does not improve AUC. Reverting changes.
Training on augumented user 114517 3/50 current_auc = 0.6000000000000001
User 114517 AUC after training: 0.6000000000000001
User 114517 does not improve AUC. Reverting changes.
Training on augumented user 115878 4/50 current_auc = 0.6000000000000001
User 115878 AUC after training: 0.6000000000000001
User 115878 does not improve AUC. Reverting changes.
Training on augumented user 41834 5/50 current_auc = 0.6000000000000001
User 41834 AUC after training: 0.6000000000000001
User 41834 does not improve AUC. Reverting changes.
Training on augumented user 11141 6/50 current_auc = 0.6000000000000001
User 11141 AUC after training: 0.6000000000000001
User 11141 does not improve AUC. Reverting changes.
Training on augumented user 12287 7/50 current_auc = 0.6000000000000001
User 12287 AUC after training: 0.6000000000000001
User 12287 does not improve AUC. Reverting changes.
Training on augumented user 82960 8/50 current_auc = 0.6000000000000001
User 82960 AUC after training: 0.6000000000000001
User 82960 does not improve AUC. Reverting changes.
Training on augumented user 2075 9/50 current_auc = 0.6000000000000001
User 2075 AUC after training: 0.6000000000000001
User 2075 does not improve AUC. Reverting changes.
Training on augumented user 73372 10/50 current_auc = 0.6000000000000001
User 73372 AUC after training: 0.6000000000000001
User 73372 does not improve AUC. Reverting changes.
Training on augumented user 75428 11/50 current_auc = 0.6000000000000001
User 75428 AUC after training: 0.6000000000000001
User 75428 does not improve AUC. Reverting changes.
Training on augumented user 47075 12/50 current_auc = 0.6000000000000001
User 47075 AUC after training: 0.6000000000000001
User 47075 does not improve AUC. Reverting changes.
Training on augumented user 24168 13/50 current_auc = 0.6000000000000001
User 24168 AUC after training: 0.6000000000000001
User 24168 does not improve AUC. Reverting changes.
Training on augumented user 83531 14/50 current_auc = 0.6000000000000001
User 83531 AUC after training: 0.6000000000000001
User 83531 does not improve AUC. Reverting changes.
Training on augumented user 77028 15/50 current_auc = 0.6000000000000001
User 77028 AUC after training: 0.6000000000000001
User 77028 does not improve AUC. Reverting changes.
Training on augumented user 47069 16/50 current_auc = 0.6000000000000001
User 47069 AUC after training: 0.6000000000000001
User 47069 does not improve AUC. Reverting changes.
Training on augumented user 103857 17/50 current_auc = 0.6000000000000001
User 103857 AUC after training: 0.6000000000000001
User 103857 does not improve AUC. Reverting changes.
Training on augumented user 32078 18/50 current_auc = 0.6000000000000001
User 32078 AUC after training: 0.6000000000000001
User 32078 does not improve AUC. Reverting changes.
Training on augumented user 82723 19/50 current_auc = 0.6000000000000001
User 82723 AUC after training: 0.6000000000000001
User 82723 does not improve AUC. Reverting changes.
Training on augumented user 58676 20/50 current_auc = 0.6000000000000001
User 58676 AUC after training: 0.6000000000000001
User 58676 does not improve AUC. Reverting changes.
Training on augumented user 99697 21/50 current_auc = 0.6000000000000001
User 99697 AUC after training: 0.6000000000000001
User 99697 does not improve AUC. Reverting changes.
Training on augumented user 93415 22/50 current_auc = 0.6000000000000001
User 93415 AUC after training: 0.6000000000000001
User 93415 does not improve AUC. Reverting changes.
Training on augumented user 107571 23/50 current_auc = 0.6000000000000001
User 107571 AUC after training: 0.6000000000000001
User 107571 does not improve AUC. Reverting changes.
Training on augumented user 44632 24/50 current_auc = 0.6000000000000001
User 44632 AUC after training: 0.6000000000000001
User 44632 does not improve AUC. Reverting changes.
Training on augumented user 9412 25/50 current_auc = 0.6000000000000001
User 9412 AUC after training: 0.6000000000000001
User 9412 does not improve AUC. Reverting changes.
Training on augumented user 122309 26/50 current_auc = 0.6000000000000001
User 122309 AUC after training: 0.6000000000000001
User 122309 does not improve AUC. Reverting changes.
Training on augumented user 93259 27/50 current_auc = 0.6000000000000001
User 93259 AUC after training: 0.6000000000000001
User 93259 does not improve AUC. Reverting changes.
Training on augumented user 135800 28/50 current_auc = 0.6000000000000001
User 135800 AUC after training: 0.6000000000000001
User 135800 does not improve AUC. Reverting changes.
Training on augumented user 56107 29/50 current_auc = 0.6000000000000001
User 56107 AUC after training: 0.6000000000000001
User 56107 does not improve AUC. Reverting changes.
Training on augumented user 20252 30/50 current_auc = 0.6000000000000001
User 20252 AUC after training: 0.6000000000000001
User 20252 does not improve AUC. Reverting changes.
Training on augumented user 11343 31/50 current_auc = 0.6000000000000001
User 11343 AUC after training: 0.6000000000000001
User 11343 does not improve AUC. Reverting changes.
Training on augumented user 54230 32/50 current_auc = 0.6000000000000001
User 54230 AUC after training: 0.6000000000000001
User 54230 does not improve AUC. Reverting changes.
Training on augumented user 45872 33/50 current_auc = 0.6000000000000001
User 45872 AUC after training: 0.6000000000000001
User 45872 does not improve AUC. Reverting changes.
Training on augumented user 122549 34/50 current_auc = 0.6000000000000001
User 122549 AUC after training: 0.6000000000000001
User 122549 does not improve AUC. Reverting changes.
Training on augumented user 129879 35/50 current_auc = 0.6000000000000001
User 129879 AUC after training: 0.6000000000000001
User 129879 does not improve AUC. Reverting changes.
Training on augumented user 41314 36/50 current_auc = 0.6000000000000001
User 41314 AUC after training: 0.6000000000000001
User 41314 does not improve AUC. Reverting changes.
Training on augumented user 78027 37/50 current_auc = 0.6000000000000001
User 78027 AUC after training: 0.6000000000000001
User 78027 does not improve AUC. Reverting changes.
Training on augumented user 49527 38/50 current_auc = 0.6000000000000001
User 49527 AUC after training: 0.6000000000000001
User 49527 does not improve AUC. Reverting changes.
Training on augumented user 33220 39/50 current_auc = 0.6000000000000001
User 33220 AUC after training: 0.6000000000000001
User 33220 does not improve AUC. Reverting changes.
Training on augumented user 114706 40/50 current_auc = 0.6000000000000001
User 114706 AUC after training: 0.6000000000000001
User 114706 does not improve AUC. Reverting changes.
Training on augumented user 14340 41/50 current_auc = 0.6000000000000001
User 14340 AUC after training: 0.6000000000000001
User 14340 does not improve AUC. Reverting changes.
Training on augumented user 105708 42/50 current_auc = 0.6000000000000001
User 105708 AUC after training: 0.6000000000000001
User 105708 does not improve AUC. Reverting changes.
Training on augumented user 76621 43/50 current_auc = 0.6000000000000001
User 76621 AUC after training: 0.6000000000000001
User 76621 does not improve AUC. Reverting changes.
Training on augumented user 136556 44/50 current_auc = 0.6000000000000001
User 136556 AUC after training: 0.6000000000000001
User 136556 does not improve AUC. Reverting changes.
Training on augumented user 29594 45/50 current_auc = 0.6000000000000001
User 29594 AUC after training: 0.6000000000000001
User 29594 does not improve AUC. Reverting changes.
Training on augumented user 83922 46/50 current_auc = 0.6000000000000001
User 83922 AUC after training: 0.6000000000000001
User 83922 does not improve AUC. Reverting changes.
Training on augumented user 16397 47/50 current_auc = 0.6000000000000001
User 16397 AUC after training: 0.6000000000000001
User 16397 does not improve AUC. Reverting changes.
Training on augumented user 133124 48/50 current_auc = 0.6000000000000001
User 133124 AUC after training: 0.6000000000000001
User 133124 does not improve AUC. Reverting changes.
Training on augumented user 88494 49/50 current_auc = 0.6000000000000001
User 88494 AUC after training: 0.6000000000000001
User 88494 does not improve AUC. Reverting changes.
[2024-12-02 19:48:10.253578] start test user 5393 239/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:48:10.760316] start test user 5393 239/568 recall augumented users by random, augumented_users = [114024, 133307, 37998, 116580, 81559, 89161, 60879, 113066, 116109, 137146, 78101, 53772, 2689, 80593, 68806, 80550, 39903, 64798, 134663, 28213, 51188, 3777, 126977, 108873, 87255, 20498, 268, 121712, 68286, 55848, 65358, 128303, 101306, 137326, 81277, 37534, 105501, 76508, 106838, 22305, 132772, 71510, 113666, 52180, 83612, 115937, 64845, 84775, 129851, 80119]
[2024-12-02 19:48:10.776134] user = 5393 Cloud 239/568
[2024-12-02 19:48:10.795705] user = 5393 Local 239/568
[2024-12-02 19:48:10.989979] user = 5393 Local+ 239/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:48:13.142205] user = 5393 MPDA- 239/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7113836360232166
Training on augumented user 114024 0/50 current_auc = 0.7113836360232166
User 114024 AUC after training: 0.7112900205953943
User 114024 does not improve AUC. Reverting changes.
Training on augumented user 133307 1/50 current_auc = 0.7113836360232166
User 133307 AUC after training: 0.7112900205953943
User 133307 does not improve AUC. Reverting changes.
Training on augumented user 37998 2/50 current_auc = 0.7113836360232166
User 37998 AUC after training: 0.7115708668788616
User 37998 improves AUC. Keeping the model.
Training on augumented user 116580 3/50 current_auc = 0.7115708668788616
User 116580 AUC after training: 0.7115708668788616
User 116580 does not improve AUC. Reverting changes.
Training on augumented user 81559 4/50 current_auc = 0.7115708668788616
User 81559 AUC after training: 0.7114772514510392
User 81559 does not improve AUC. Reverting changes.
Training on augumented user 89161 5/50 current_auc = 0.7115708668788616
User 89161 AUC after training: 0.7112900205953943
User 89161 does not improve AUC. Reverting changes.
Training on augumented user 60879 6/50 current_auc = 0.7115708668788616
User 60879 AUC after training: 0.7115708668788616
User 60879 does not improve AUC. Reverting changes.
Training on augumented user 113066 7/50 current_auc = 0.7115708668788616
User 113066 AUC after training: 0.7113836360232166
User 113066 does not improve AUC. Reverting changes.
Training on augumented user 116109 8/50 current_auc = 0.7115708668788616
User 116109 AUC after training: 0.7113836360232166
User 116109 does not improve AUC. Reverting changes.
Training on augumented user 137146 9/50 current_auc = 0.7115708668788616
User 137146 AUC after training: 0.7115708668788616
User 137146 does not improve AUC. Reverting changes.
Training on augumented user 78101 10/50 current_auc = 0.7115708668788616
User 78101 AUC after training: 0.7117580977345066
User 78101 improves AUC. Keeping the model.
Training on augumented user 53772 11/50 current_auc = 0.7117580977345066
User 53772 AUC after training: 0.7120389440179742
User 53772 improves AUC. Keeping the model.
Training on augumented user 2689 12/50 current_auc = 0.7120389440179742
User 2689 AUC after training: 0.7113836360232166
User 2689 does not improve AUC. Reverting changes.
Training on augumented user 80593 13/50 current_auc = 0.7120389440179742
User 80593 AUC after training: 0.7118517131623292
User 80593 does not improve AUC. Reverting changes.
Training on augumented user 68806 14/50 current_auc = 0.7120389440179742
User 68806 AUC after training: 0.7120389440179742
User 68806 does not improve AUC. Reverting changes.
Training on augumented user 80550 15/50 current_auc = 0.7120389440179742
User 80550 AUC after training: 0.7115708668788616
User 80550 does not improve AUC. Reverting changes.
Training on augumented user 39903 16/50 current_auc = 0.7120389440179742
User 39903 AUC after training: 0.7113836360232166
User 39903 does not improve AUC. Reverting changes.
Training on augumented user 64798 17/50 current_auc = 0.7120389440179742
User 64798 AUC after training: 0.7113836360232166
User 64798 does not improve AUC. Reverting changes.
Training on augumented user 134663 18/50 current_auc = 0.7120389440179742
User 134663 AUC after training: 0.7113836360232166
User 134663 does not improve AUC. Reverting changes.
Training on augumented user 28213 19/50 current_auc = 0.7120389440179742
User 28213 AUC after training: 0.7119453285901518
User 28213 does not improve AUC. Reverting changes.
Training on augumented user 51188 20/50 current_auc = 0.7120389440179742
User 51188 AUC after training: 0.7114772514510392
User 51188 does not improve AUC. Reverting changes.
Training on augumented user 3777 21/50 current_auc = 0.7120389440179742
User 3777 AUC after training: 0.7116644823066842
User 3777 does not improve AUC. Reverting changes.
Training on augumented user 126977 22/50 current_auc = 0.7120389440179742
User 126977 AUC after training: 0.7103538663171691
User 126977 does not improve AUC. Reverting changes.
Training on augumented user 108873 23/50 current_auc = 0.7120389440179742
User 108873 AUC after training: 0.7115708668788616
User 108873 does not improve AUC. Reverting changes.
Training on augumented user 87255 24/50 current_auc = 0.7120389440179742
User 87255 AUC after training: 0.7114772514510392
User 87255 does not improve AUC. Reverting changes.
Training on augumented user 20498 25/50 current_auc = 0.7120389440179742
User 20498 AUC after training: 0.7118517131623292
User 20498 does not improve AUC. Reverting changes.
Training on augumented user 268 26/50 current_auc = 0.7120389440179742
User 268 AUC after training: 0.7114772514510391
User 268 does not improve AUC. Reverting changes.
Training on augumented user 121712 27/50 current_auc = 0.7120389440179742
User 121712 AUC after training: 0.7121325594457966
User 121712 improves AUC. Keeping the model.
Training on augumented user 68286 28/50 current_auc = 0.7121325594457966
User 68286 AUC after training: 0.7108219434562815
User 68286 does not improve AUC. Reverting changes.
Training on augumented user 55848 29/50 current_auc = 0.7121325594457966
User 55848 AUC after training: 0.7106347126006365
User 55848 does not improve AUC. Reverting changes.
Training on augumented user 65358 30/50 current_auc = 0.7121325594457966
User 65358 AUC after training: 0.7120389440179742
User 65358 does not improve AUC. Reverting changes.
Training on augumented user 128303 31/50 current_auc = 0.7121325594457966
User 128303 AUC after training: 0.7122261748736193
User 128303 improves AUC. Keeping the model.
Training on augumented user 101306 32/50 current_auc = 0.7122261748736193
User 101306 AUC after training: 0.7119453285901516
User 101306 does not improve AUC. Reverting changes.
Training on augumented user 137326 33/50 current_auc = 0.7122261748736193
User 137326 AUC after training: 0.7123197903014418
User 137326 improves AUC. Keeping the model.
Training on augumented user 81277 34/50 current_auc = 0.7123197903014418
User 81277 AUC after training: 0.7120389440179742
User 81277 does not improve AUC. Reverting changes.
Training on augumented user 37534 35/50 current_auc = 0.7123197903014418
User 37534 AUC after training: 0.7125070211570868
User 37534 improves AUC. Keeping the model.
Training on augumented user 105501 36/50 current_auc = 0.7125070211570868
User 105501 AUC after training: 0.7119453285901517
User 105501 does not improve AUC. Reverting changes.
Training on augumented user 76508 37/50 current_auc = 0.7125070211570868
User 76508 AUC after training: 0.7121325594457966
User 76508 does not improve AUC. Reverting changes.
Training on augumented user 106838 38/50 current_auc = 0.7125070211570868
User 106838 AUC after training: 0.7133495600074893
User 106838 improves AUC. Keeping the model.
Training on augumented user 22305 39/50 current_auc = 0.7133495600074893
User 22305 AUC after training: 0.7138176371466018
User 22305 improves AUC. Keeping the model.
Training on augumented user 132772 40/50 current_auc = 0.7138176371466018
User 132772 AUC after training: 0.7137240217187792
User 132772 does not improve AUC. Reverting changes.
Training on augumented user 71510 41/50 current_auc = 0.7138176371466018
User 71510 AUC after training: 0.7138176371466018
User 71510 does not improve AUC. Reverting changes.
Training on augumented user 113666 42/50 current_auc = 0.7138176371466018
User 113666 AUC after training: 0.7141920988578918
User 113666 improves AUC. Keeping the model.
Training on augumented user 52180 43/50 current_auc = 0.7141920988578918
User 52180 AUC after training: 0.7138176371466018
User 52180 does not improve AUC. Reverting changes.
Training on augumented user 83612 44/50 current_auc = 0.7141920988578918
User 83612 AUC after training: 0.7140048680022468
User 83612 does not improve AUC. Reverting changes.
Training on augumented user 115937 45/50 current_auc = 0.7141920988578918
User 115937 AUC after training: 0.7136304062909568
User 115937 does not improve AUC. Reverting changes.
Training on augumented user 64845 46/50 current_auc = 0.7141920988578918
User 64845 AUC after training: 0.7138176371466018
User 64845 does not improve AUC. Reverting changes.
Training on augumented user 84775 47/50 current_auc = 0.7141920988578918
User 84775 AUC after training: 0.7143793297135368
User 84775 improves AUC. Keeping the model.
Training on augumented user 129851 48/50 current_auc = 0.7143793297135368
User 129851 AUC after training: 0.7134431754353118
User 129851 does not improve AUC. Reverting changes.
Training on augumented user 80119 49/50 current_auc = 0.7143793297135368
User 80119 AUC after training: 0.713677214004868
User 80119 does not improve AUC. Reverting changes.
[2024-12-02 19:48:40.837242] start test user 5412 240/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:48:41.268053] start test user 5412 240/568 recall augumented users by random, augumented_users = [132477, 104825, 94991, 121165, 91347, 127872, 26876, 82855, 15898, 19224, 25239, 3929, 89579, 51840, 124727, 74021, 32596, 115878, 76419, 120755, 3103, 68627, 95406, 10707, 69974, 105312, 105981, 10888, 59739, 48948, 49307, 57046, 23492, 132469, 111525, 64434, 113976, 30135, 133990, 23160, 48400, 108055, 74479, 53711, 121198, 23951, 45397, 107109, 28116, 104241]
[2024-12-02 19:48:41.282478] user = 5412 Cloud 240/568
[2024-12-02 19:48:41.291779] user = 5412 Local 240/568
[2024-12-02 19:48:41.347376] user = 5412 Local+ 240/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:48:42.684599] user = 5412 MPDA- 240/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6785714285714286
Training on augumented user 132477 0/50 current_auc = 0.6785714285714286
User 132477 AUC after training: 0.6785714285714286
User 132477 does not improve AUC. Reverting changes.
Training on augumented user 104825 1/50 current_auc = 0.6785714285714286
User 104825 AUC after training: 0.6785714285714286
User 104825 does not improve AUC. Reverting changes.
Training on augumented user 94991 2/50 current_auc = 0.6785714285714286
User 94991 AUC after training: 0.6785714285714286
User 94991 does not improve AUC. Reverting changes.
Training on augumented user 121165 3/50 current_auc = 0.6785714285714286
User 121165 AUC after training: 0.6785714285714286
User 121165 does not improve AUC. Reverting changes.
Training on augumented user 91347 4/50 current_auc = 0.6785714285714286
User 91347 AUC after training: 0.6785714285714286
User 91347 does not improve AUC. Reverting changes.
Training on augumented user 127872 5/50 current_auc = 0.6785714285714286
User 127872 AUC after training: 0.6785714285714286
User 127872 does not improve AUC. Reverting changes.
Training on augumented user 26876 6/50 current_auc = 0.6785714285714286
User 26876 AUC after training: 0.6785714285714286
User 26876 does not improve AUC. Reverting changes.
Training on augumented user 82855 7/50 current_auc = 0.6785714285714286
User 82855 AUC after training: 0.6785714285714286
User 82855 does not improve AUC. Reverting changes.
Training on augumented user 15898 8/50 current_auc = 0.6785714285714286
User 15898 AUC after training: 0.6785714285714286
User 15898 does not improve AUC. Reverting changes.
Training on augumented user 19224 9/50 current_auc = 0.6785714285714286
User 19224 AUC after training: 0.6785714285714286
User 19224 does not improve AUC. Reverting changes.
Training on augumented user 25239 10/50 current_auc = 0.6785714285714286
User 25239 AUC after training: 0.6785714285714286
User 25239 does not improve AUC. Reverting changes.
Training on augumented user 3929 11/50 current_auc = 0.6785714285714286
User 3929 AUC after training: 0.6785714285714286
User 3929 does not improve AUC. Reverting changes.
Training on augumented user 89579 12/50 current_auc = 0.6785714285714286
User 89579 AUC after training: 0.6785714285714286
User 89579 does not improve AUC. Reverting changes.
Training on augumented user 51840 13/50 current_auc = 0.6785714285714286
User 51840 AUC after training: 0.6785714285714286
User 51840 does not improve AUC. Reverting changes.
Training on augumented user 124727 14/50 current_auc = 0.6785714285714286
User 124727 AUC after training: 0.6785714285714286
User 124727 does not improve AUC. Reverting changes.
Training on augumented user 74021 15/50 current_auc = 0.6785714285714286
User 74021 AUC after training: 0.6785714285714286
User 74021 does not improve AUC. Reverting changes.
Training on augumented user 32596 16/50 current_auc = 0.6785714285714286
User 32596 AUC after training: 0.6785714285714286
User 32596 does not improve AUC. Reverting changes.
Training on augumented user 115878 17/50 current_auc = 0.6785714285714286
User 115878 AUC after training: 0.6785714285714286
User 115878 does not improve AUC. Reverting changes.
Training on augumented user 76419 18/50 current_auc = 0.6785714285714286
User 76419 AUC after training: 0.6785714285714286
User 76419 does not improve AUC. Reverting changes.
Training on augumented user 120755 19/50 current_auc = 0.6785714285714286
User 120755 AUC after training: 0.6785714285714286
User 120755 does not improve AUC. Reverting changes.
Training on augumented user 3103 20/50 current_auc = 0.6785714285714286
User 3103 AUC after training: 0.6785714285714286
User 3103 does not improve AUC. Reverting changes.
Training on augumented user 68627 21/50 current_auc = 0.6785714285714286
User 68627 AUC after training: 0.6785714285714286
User 68627 does not improve AUC. Reverting changes.
Training on augumented user 95406 22/50 current_auc = 0.6785714285714286
User 95406 AUC after training: 0.6785714285714286
User 95406 does not improve AUC. Reverting changes.
Training on augumented user 10707 23/50 current_auc = 0.6785714285714286
User 10707 AUC after training: 0.6785714285714286
User 10707 does not improve AUC. Reverting changes.
Training on augumented user 69974 24/50 current_auc = 0.6785714285714286
User 69974 AUC after training: 0.6785714285714286
User 69974 does not improve AUC. Reverting changes.
Training on augumented user 105312 25/50 current_auc = 0.6785714285714286
User 105312 AUC after training: 0.6785714285714286
User 105312 does not improve AUC. Reverting changes.
Training on augumented user 105981 26/50 current_auc = 0.6785714285714286
User 105981 AUC after training: 0.6785714285714286
User 105981 does not improve AUC. Reverting changes.
Training on augumented user 10888 27/50 current_auc = 0.6785714285714286
User 10888 AUC after training: 0.6785714285714286
User 10888 does not improve AUC. Reverting changes.
Training on augumented user 59739 28/50 current_auc = 0.6785714285714286
User 59739 AUC after training: 0.6785714285714286
User 59739 does not improve AUC. Reverting changes.
Training on augumented user 48948 29/50 current_auc = 0.6785714285714286
User 48948 AUC after training: 0.6785714285714286
User 48948 does not improve AUC. Reverting changes.
Training on augumented user 49307 30/50 current_auc = 0.6785714285714286
User 49307 AUC after training: 0.6785714285714286
User 49307 does not improve AUC. Reverting changes.
Training on augumented user 57046 31/50 current_auc = 0.6785714285714286
User 57046 AUC after training: 0.6785714285714286
User 57046 does not improve AUC. Reverting changes.
Training on augumented user 23492 32/50 current_auc = 0.6785714285714286
User 23492 AUC after training: 0.6785714285714286
User 23492 does not improve AUC. Reverting changes.
Training on augumented user 132469 33/50 current_auc = 0.6785714285714286
User 132469 AUC after training: 0.6785714285714286
User 132469 does not improve AUC. Reverting changes.
Training on augumented user 111525 34/50 current_auc = 0.6785714285714286
User 111525 AUC after training: 0.6785714285714286
User 111525 does not improve AUC. Reverting changes.
Training on augumented user 64434 35/50 current_auc = 0.6785714285714286
User 64434 AUC after training: 0.6785714285714286
User 64434 does not improve AUC. Reverting changes.
Training on augumented user 113976 36/50 current_auc = 0.6785714285714286
User 113976 AUC after training: 0.6785714285714286
User 113976 does not improve AUC. Reverting changes.
Training on augumented user 30135 37/50 current_auc = 0.6785714285714286
User 30135 AUC after training: 0.6785714285714286
User 30135 does not improve AUC. Reverting changes.
Training on augumented user 133990 38/50 current_auc = 0.6785714285714286
User 133990 AUC after training: 0.6785714285714286
User 133990 does not improve AUC. Reverting changes.
Training on augumented user 23160 39/50 current_auc = 0.6785714285714286
User 23160 AUC after training: 0.6785714285714286
User 23160 does not improve AUC. Reverting changes.
Training on augumented user 48400 40/50 current_auc = 0.6785714285714286
User 48400 AUC after training: 0.6785714285714286
User 48400 does not improve AUC. Reverting changes.
Training on augumented user 108055 41/50 current_auc = 0.6785714285714286
User 108055 AUC after training: 0.6785714285714286
User 108055 does not improve AUC. Reverting changes.
Training on augumented user 74479 42/50 current_auc = 0.6785714285714286
User 74479 AUC after training: 0.6785714285714286
User 74479 does not improve AUC. Reverting changes.
Training on augumented user 53711 43/50 current_auc = 0.6785714285714286
User 53711 AUC after training: 0.6785714285714286
User 53711 does not improve AUC. Reverting changes.
Training on augumented user 121198 44/50 current_auc = 0.6785714285714286
User 121198 AUC after training: 0.6785714285714286
User 121198 does not improve AUC. Reverting changes.
Training on augumented user 23951 45/50 current_auc = 0.6785714285714286
User 23951 AUC after training: 0.6785714285714286
User 23951 does not improve AUC. Reverting changes.
Training on augumented user 45397 46/50 current_auc = 0.6785714285714286
User 45397 AUC after training: 0.6785714285714286
User 45397 does not improve AUC. Reverting changes.
Training on augumented user 107109 47/50 current_auc = 0.6785714285714286
User 107109 AUC after training: 0.6785714285714286
User 107109 does not improve AUC. Reverting changes.
Training on augumented user 28116 48/50 current_auc = 0.6785714285714286
User 28116 AUC after training: 0.6785714285714286
User 28116 does not improve AUC. Reverting changes.
Training on augumented user 104241 49/50 current_auc = 0.6785714285714286
User 104241 AUC after training: 0.6785714285714286
User 104241 does not improve AUC. Reverting changes.
[2024-12-02 19:49:05.086722] start test user 5450 241/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:49:05.633151] start test user 5450 241/568 recall augumented users by random, augumented_users = [63796, 49522, 92471, 1601, 82182, 135540, 88943, 31471, 34850, 126143, 52344, 15382, 88867, 121133, 137373, 73763, 52129, 34877, 115722, 65169, 104145, 107488, 79630, 46329, 37662, 8118, 134330, 133436, 7609, 11911, 46445, 37962, 23286, 125620, 131607, 23312, 100648, 101526, 17854, 18240, 111032, 87478, 118956, 58448, 14511, 47616, 98844, 56514, 23330, 102802]
[2024-12-02 19:49:05.662321] user = 5450 Cloud 241/568
[2024-12-02 19:49:05.672413] user = 5450 Local 241/568
[2024-12-02 19:49:05.732787] user = 5450 Local+ 241/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:49:08.157999] user = 5450 MPDA- 241/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 63796 0/50 current_auc = 1.0
User 63796 AUC after training: 1.0
User 63796 does not improve AUC. Reverting changes.
Training on augumented user 49522 1/50 current_auc = 1.0
User 49522 AUC after training: 1.0
User 49522 does not improve AUC. Reverting changes.
Training on augumented user 92471 2/50 current_auc = 1.0
User 92471 AUC after training: 1.0
User 92471 does not improve AUC. Reverting changes.
Training on augumented user 1601 3/50 current_auc = 1.0
User 1601 AUC after training: 1.0
User 1601 does not improve AUC. Reverting changes.
Training on augumented user 82182 4/50 current_auc = 1.0
User 82182 AUC after training: 1.0
User 82182 does not improve AUC. Reverting changes.
Training on augumented user 135540 5/50 current_auc = 1.0
User 135540 AUC after training: 1.0
User 135540 does not improve AUC. Reverting changes.
Training on augumented user 88943 6/50 current_auc = 1.0
User 88943 AUC after training: 1.0
User 88943 does not improve AUC. Reverting changes.
Training on augumented user 31471 7/50 current_auc = 1.0
User 31471 AUC after training: 1.0
User 31471 does not improve AUC. Reverting changes.
Training on augumented user 34850 8/50 current_auc = 1.0
User 34850 AUC after training: 1.0
User 34850 does not improve AUC. Reverting changes.
Training on augumented user 126143 9/50 current_auc = 1.0
User 126143 AUC after training: 1.0
User 126143 does not improve AUC. Reverting changes.
Training on augumented user 52344 10/50 current_auc = 1.0
User 52344 AUC after training: 1.0
User 52344 does not improve AUC. Reverting changes.
Training on augumented user 15382 11/50 current_auc = 1.0
User 15382 AUC after training: 1.0
User 15382 does not improve AUC. Reverting changes.
Training on augumented user 88867 12/50 current_auc = 1.0
User 88867 AUC after training: 1.0
User 88867 does not improve AUC. Reverting changes.
Training on augumented user 121133 13/50 current_auc = 1.0
User 121133 AUC after training: 1.0
User 121133 does not improve AUC. Reverting changes.
Training on augumented user 137373 14/50 current_auc = 1.0
User 137373 AUC after training: 1.0
User 137373 does not improve AUC. Reverting changes.
Training on augumented user 73763 15/50 current_auc = 1.0
User 73763 AUC after training: 1.0
User 73763 does not improve AUC. Reverting changes.
Training on augumented user 52129 16/50 current_auc = 1.0
User 52129 AUC after training: 1.0
User 52129 does not improve AUC. Reverting changes.
Training on augumented user 34877 17/50 current_auc = 1.0
User 34877 AUC after training: 1.0
User 34877 does not improve AUC. Reverting changes.
Training on augumented user 115722 18/50 current_auc = 1.0
User 115722 AUC after training: 1.0
User 115722 does not improve AUC. Reverting changes.
Training on augumented user 65169 19/50 current_auc = 1.0
User 65169 AUC after training: 1.0
User 65169 does not improve AUC. Reverting changes.
Training on augumented user 104145 20/50 current_auc = 1.0
User 104145 AUC after training: 1.0
User 104145 does not improve AUC. Reverting changes.
Training on augumented user 107488 21/50 current_auc = 1.0
User 107488 AUC after training: 1.0
User 107488 does not improve AUC. Reverting changes.
Training on augumented user 79630 22/50 current_auc = 1.0
User 79630 AUC after training: 1.0
User 79630 does not improve AUC. Reverting changes.
Training on augumented user 46329 23/50 current_auc = 1.0
User 46329 AUC after training: 1.0
User 46329 does not improve AUC. Reverting changes.
Training on augumented user 37662 24/50 current_auc = 1.0
User 37662 AUC after training: 1.0
User 37662 does not improve AUC. Reverting changes.
Training on augumented user 8118 25/50 current_auc = 1.0
User 8118 AUC after training: 1.0
User 8118 does not improve AUC. Reverting changes.
Training on augumented user 134330 26/50 current_auc = 1.0
User 134330 AUC after training: 1.0
User 134330 does not improve AUC. Reverting changes.
Training on augumented user 133436 27/50 current_auc = 1.0
User 133436 AUC after training: 1.0
User 133436 does not improve AUC. Reverting changes.
Training on augumented user 7609 28/50 current_auc = 1.0
User 7609 AUC after training: 1.0
User 7609 does not improve AUC. Reverting changes.
Training on augumented user 11911 29/50 current_auc = 1.0
User 11911 AUC after training: 1.0
User 11911 does not improve AUC. Reverting changes.
Training on augumented user 46445 30/50 current_auc = 1.0
User 46445 AUC after training: 1.0
User 46445 does not improve AUC. Reverting changes.
Training on augumented user 37962 31/50 current_auc = 1.0
User 37962 AUC after training: 1.0
User 37962 does not improve AUC. Reverting changes.
Training on augumented user 23286 32/50 current_auc = 1.0
User 23286 AUC after training: 1.0
User 23286 does not improve AUC. Reverting changes.
Training on augumented user 125620 33/50 current_auc = 1.0
User 125620 AUC after training: 1.0
User 125620 does not improve AUC. Reverting changes.
Training on augumented user 131607 34/50 current_auc = 1.0
User 131607 AUC after training: 1.0
User 131607 does not improve AUC. Reverting changes.
Training on augumented user 23312 35/50 current_auc = 1.0
User 23312 AUC after training: 1.0
User 23312 does not improve AUC. Reverting changes.
Training on augumented user 100648 36/50 current_auc = 1.0
User 100648 AUC after training: 1.0
User 100648 does not improve AUC. Reverting changes.
Training on augumented user 101526 37/50 current_auc = 1.0
User 101526 AUC after training: 1.0
User 101526 does not improve AUC. Reverting changes.
Training on augumented user 17854 38/50 current_auc = 1.0
User 17854 AUC after training: 1.0
User 17854 does not improve AUC. Reverting changes.
Training on augumented user 18240 39/50 current_auc = 1.0
User 18240 AUC after training: 1.0
User 18240 does not improve AUC. Reverting changes.
Training on augumented user 111032 40/50 current_auc = 1.0
User 111032 AUC after training: 1.0
User 111032 does not improve AUC. Reverting changes.
Training on augumented user 87478 41/50 current_auc = 1.0
User 87478 AUC after training: 1.0
User 87478 does not improve AUC. Reverting changes.
Training on augumented user 118956 42/50 current_auc = 1.0
User 118956 AUC after training: 1.0
User 118956 does not improve AUC. Reverting changes.
Training on augumented user 58448 43/50 current_auc = 1.0
User 58448 AUC after training: 1.0
User 58448 does not improve AUC. Reverting changes.
Training on augumented user 14511 44/50 current_auc = 1.0
User 14511 AUC after training: 1.0
User 14511 does not improve AUC. Reverting changes.
Training on augumented user 47616 45/50 current_auc = 1.0
User 47616 AUC after training: 1.0
User 47616 does not improve AUC. Reverting changes.
Training on augumented user 98844 46/50 current_auc = 1.0
User 98844 AUC after training: 1.0
User 98844 does not improve AUC. Reverting changes.
Training on augumented user 56514 47/50 current_auc = 1.0
User 56514 AUC after training: 1.0
User 56514 does not improve AUC. Reverting changes.
Training on augumented user 23330 48/50 current_auc = 1.0
User 23330 AUC after training: 1.0
User 23330 does not improve AUC. Reverting changes.
Training on augumented user 102802 49/50 current_auc = 1.0
User 102802 AUC after training: 1.0
User 102802 does not improve AUC. Reverting changes.
[2024-12-02 19:49:36.420805] start test user 5465 242/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:49:36.844196] start test user 5465 242/568 recall augumented users by random, augumented_users = [91682, 67296, 14658, 91153, 35514, 86479, 101602, 46786, 2178, 104248, 79320, 47551, 110682, 10857, 97114, 33916, 34597, 79735, 76953, 28392, 129539, 96790, 113915, 54770, 42046, 85137, 93020, 6314, 61610, 102686, 26835, 101686, 94709, 16937, 122854, 51669, 79949, 3333, 66583, 39673, 133990, 52160, 129440, 131115, 9974, 86826, 72220, 22924, 971, 118212]
[2024-12-02 19:49:36.859270] user = 5465 Cloud 242/568
[2024-12-02 19:49:36.869472] user = 5465 Local 242/568
[2024-12-02 19:49:36.942941] user = 5465 Local+ 242/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:49:39.919942] user = 5465 MPDA- 242/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8400000000000001
Training on augumented user 91682 0/50 current_auc = 0.8400000000000001
User 91682 AUC after training: 0.8400000000000001
User 91682 does not improve AUC. Reverting changes.
Training on augumented user 67296 1/50 current_auc = 0.8400000000000001
User 67296 AUC after training: 0.8400000000000001
User 67296 does not improve AUC. Reverting changes.
Training on augumented user 14658 2/50 current_auc = 0.8400000000000001
User 14658 AUC after training: 0.8400000000000001
User 14658 does not improve AUC. Reverting changes.
Training on augumented user 91153 3/50 current_auc = 0.8400000000000001
User 91153 AUC after training: 0.8400000000000001
User 91153 does not improve AUC. Reverting changes.
Training on augumented user 35514 4/50 current_auc = 0.8400000000000001
User 35514 AUC after training: 0.8400000000000001
User 35514 does not improve AUC. Reverting changes.
Training on augumented user 86479 5/50 current_auc = 0.8400000000000001
User 86479 AUC after training: 0.8400000000000001
User 86479 does not improve AUC. Reverting changes.
Training on augumented user 101602 6/50 current_auc = 0.8400000000000001
User 101602 AUC after training: 0.8400000000000001
User 101602 does not improve AUC. Reverting changes.
Training on augumented user 46786 7/50 current_auc = 0.8400000000000001
User 46786 AUC after training: 0.8400000000000001
User 46786 does not improve AUC. Reverting changes.
Training on augumented user 2178 8/50 current_auc = 0.8400000000000001
User 2178 AUC after training: 0.8400000000000001
User 2178 does not improve AUC. Reverting changes.
Training on augumented user 104248 9/50 current_auc = 0.8400000000000001
User 104248 AUC after training: 0.8400000000000001
User 104248 does not improve AUC. Reverting changes.
Training on augumented user 79320 10/50 current_auc = 0.8400000000000001
User 79320 AUC after training: 0.8400000000000001
User 79320 does not improve AUC. Reverting changes.
Training on augumented user 47551 11/50 current_auc = 0.8400000000000001
User 47551 AUC after training: 0.8400000000000001
User 47551 does not improve AUC. Reverting changes.
Training on augumented user 110682 12/50 current_auc = 0.8400000000000001
User 110682 AUC after training: 0.8400000000000001
User 110682 does not improve AUC. Reverting changes.
Training on augumented user 10857 13/50 current_auc = 0.8400000000000001
User 10857 AUC after training: 0.8400000000000001
User 10857 does not improve AUC. Reverting changes.
Training on augumented user 97114 14/50 current_auc = 0.8400000000000001
User 97114 AUC after training: 0.8400000000000001
User 97114 does not improve AUC. Reverting changes.
Training on augumented user 33916 15/50 current_auc = 0.8400000000000001
User 33916 AUC after training: 0.8400000000000001
User 33916 does not improve AUC. Reverting changes.
Training on augumented user 34597 16/50 current_auc = 0.8400000000000001
User 34597 AUC after training: 0.8400000000000001
User 34597 does not improve AUC. Reverting changes.
Training on augumented user 79735 17/50 current_auc = 0.8400000000000001
User 79735 AUC after training: 0.8400000000000001
User 79735 does not improve AUC. Reverting changes.
Training on augumented user 76953 18/50 current_auc = 0.8400000000000001
User 76953 AUC after training: 0.8400000000000001
User 76953 does not improve AUC. Reverting changes.
Training on augumented user 28392 19/50 current_auc = 0.8400000000000001
User 28392 AUC after training: 0.8400000000000001
User 28392 does not improve AUC. Reverting changes.
Training on augumented user 129539 20/50 current_auc = 0.8400000000000001
User 129539 AUC after training: 0.8400000000000001
User 129539 does not improve AUC. Reverting changes.
Training on augumented user 96790 21/50 current_auc = 0.8400000000000001
User 96790 AUC after training: 0.8400000000000001
User 96790 does not improve AUC. Reverting changes.
Training on augumented user 113915 22/50 current_auc = 0.8400000000000001
User 113915 AUC after training: 0.8400000000000001
User 113915 does not improve AUC. Reverting changes.
Training on augumented user 54770 23/50 current_auc = 0.8400000000000001
User 54770 AUC after training: 0.8400000000000001
User 54770 does not improve AUC. Reverting changes.
Training on augumented user 42046 24/50 current_auc = 0.8400000000000001
User 42046 AUC after training: 0.8400000000000001
User 42046 does not improve AUC. Reverting changes.
Training on augumented user 85137 25/50 current_auc = 0.8400000000000001
User 85137 AUC after training: 0.8400000000000001
User 85137 does not improve AUC. Reverting changes.
Training on augumented user 93020 26/50 current_auc = 0.8400000000000001
User 93020 AUC after training: 0.8400000000000001
User 93020 does not improve AUC. Reverting changes.
Training on augumented user 6314 27/50 current_auc = 0.8400000000000001
User 6314 AUC after training: 0.8400000000000001
User 6314 does not improve AUC. Reverting changes.
Training on augumented user 61610 28/50 current_auc = 0.8400000000000001
User 61610 AUC after training: 0.8400000000000001
User 61610 does not improve AUC. Reverting changes.
Training on augumented user 102686 29/50 current_auc = 0.8400000000000001
User 102686 AUC after training: 0.8400000000000001
User 102686 does not improve AUC. Reverting changes.
Training on augumented user 26835 30/50 current_auc = 0.8400000000000001
User 26835 AUC after training: 0.8400000000000001
User 26835 does not improve AUC. Reverting changes.
Training on augumented user 101686 31/50 current_auc = 0.8400000000000001
User 101686 AUC after training: 0.8400000000000001
User 101686 does not improve AUC. Reverting changes.
Training on augumented user 94709 32/50 current_auc = 0.8400000000000001
User 94709 AUC after training: 0.8400000000000001
User 94709 does not improve AUC. Reverting changes.
Training on augumented user 16937 33/50 current_auc = 0.8400000000000001
User 16937 AUC after training: 0.8400000000000001
User 16937 does not improve AUC. Reverting changes.
Training on augumented user 122854 34/50 current_auc = 0.8400000000000001
User 122854 AUC after training: 0.8400000000000001
User 122854 does not improve AUC. Reverting changes.
Training on augumented user 51669 35/50 current_auc = 0.8400000000000001
User 51669 AUC after training: 0.8400000000000001
User 51669 does not improve AUC. Reverting changes.
Training on augumented user 79949 36/50 current_auc = 0.8400000000000001
User 79949 AUC after training: 0.8400000000000001
User 79949 does not improve AUC. Reverting changes.
Training on augumented user 3333 37/50 current_auc = 0.8400000000000001
User 3333 AUC after training: 0.8400000000000001
User 3333 does not improve AUC. Reverting changes.
Training on augumented user 66583 38/50 current_auc = 0.8400000000000001
User 66583 AUC after training: 0.8400000000000001
User 66583 does not improve AUC. Reverting changes.
Training on augumented user 39673 39/50 current_auc = 0.8400000000000001
User 39673 AUC after training: 0.8400000000000001
User 39673 does not improve AUC. Reverting changes.
Training on augumented user 133990 40/50 current_auc = 0.8400000000000001
User 133990 AUC after training: 0.8400000000000001
User 133990 does not improve AUC. Reverting changes.
Training on augumented user 52160 41/50 current_auc = 0.8400000000000001
User 52160 AUC after training: 0.8400000000000001
User 52160 does not improve AUC. Reverting changes.
Training on augumented user 129440 42/50 current_auc = 0.8400000000000001
User 129440 AUC after training: 0.8400000000000001
User 129440 does not improve AUC. Reverting changes.
Training on augumented user 131115 43/50 current_auc = 0.8400000000000001
User 131115 AUC after training: 0.8400000000000001
User 131115 does not improve AUC. Reverting changes.
Training on augumented user 9974 44/50 current_auc = 0.8400000000000001
User 9974 AUC after training: 0.8400000000000001
User 9974 does not improve AUC. Reverting changes.
Training on augumented user 86826 45/50 current_auc = 0.8400000000000001
User 86826 AUC after training: 0.8400000000000001
User 86826 does not improve AUC. Reverting changes.
Training on augumented user 72220 46/50 current_auc = 0.8400000000000001
User 72220 AUC after training: 0.8400000000000001
User 72220 does not improve AUC. Reverting changes.
Training on augumented user 22924 47/50 current_auc = 0.8400000000000001
User 22924 AUC after training: 0.8400000000000001
User 22924 does not improve AUC. Reverting changes.
Training on augumented user 971 48/50 current_auc = 0.8400000000000001
User 971 AUC after training: 0.8400000000000001
User 971 does not improve AUC. Reverting changes.
Training on augumented user 118212 49/50 current_auc = 0.8400000000000001
User 118212 AUC after training: 0.8400000000000001
User 118212 does not improve AUC. Reverting changes.
[2024-12-02 19:50:08.780101] start test user 5482 243/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:50:09.274318] start test user 5482 243/568 recall augumented users by random, augumented_users = [24509, 64198, 28226, 61074, 133500, 62412, 5915, 97642, 133024, 59820, 3930, 52237, 97972, 69012, 118265, 66881, 106148, 112341, 72122, 87785, 73274, 131622, 113390, 134500, 35368, 86887, 85517, 66007, 102535, 27093, 94669, 50969, 93458, 22336, 66599, 37979, 74406, 126949, 89514, 2540, 101433, 67863, 130314, 112812, 105749, 40008, 53088, 28037, 26404, 123209]
[2024-12-02 19:50:09.302444] user = 5482 Cloud 243/568
[2024-12-02 19:50:09.331739] user = 5482 Local 243/568
[2024-12-02 19:50:09.449406] user = 5482 Local+ 243/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:50:11.077069] user = 5482 MPDA- 243/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6614583333333334
Training on augumented user 24509 0/50 current_auc = 0.6614583333333334
User 24509 AUC after training: 0.6666666666666666
User 24509 improves AUC. Keeping the model.
Training on augumented user 64198 1/50 current_auc = 0.6666666666666666
User 64198 AUC after training: 0.6614583333333333
User 64198 does not improve AUC. Reverting changes.
Training on augumented user 28226 2/50 current_auc = 0.6666666666666666
User 28226 AUC after training: 0.6588541666666667
User 28226 does not improve AUC. Reverting changes.
Training on augumented user 61074 3/50 current_auc = 0.6666666666666666
User 61074 AUC after training: 0.6588541666666667
User 61074 does not improve AUC. Reverting changes.
Training on augumented user 133500 4/50 current_auc = 0.6666666666666666
User 133500 AUC after training: 0.6666666666666666
User 133500 does not improve AUC. Reverting changes.
Training on augumented user 62412 5/50 current_auc = 0.6666666666666666
User 62412 AUC after training: 0.6640625
User 62412 does not improve AUC. Reverting changes.
Training on augumented user 5915 6/50 current_auc = 0.6666666666666666
User 5915 AUC after training: 0.6614583333333333
User 5915 does not improve AUC. Reverting changes.
Training on augumented user 97642 7/50 current_auc = 0.6666666666666666
User 97642 AUC after training: 0.6692708333333333
User 97642 improves AUC. Keeping the model.
Training on augumented user 133024 8/50 current_auc = 0.6692708333333333
User 133024 AUC after training: 0.6692708333333333
User 133024 does not improve AUC. Reverting changes.
Training on augumented user 59820 9/50 current_auc = 0.6692708333333333
User 59820 AUC after training: 0.671875
User 59820 improves AUC. Keeping the model.
Training on augumented user 3930 10/50 current_auc = 0.671875
User 3930 AUC after training: 0.6640625
User 3930 does not improve AUC. Reverting changes.
Training on augumented user 52237 11/50 current_auc = 0.671875
User 52237 AUC after training: 0.6692708333333335
User 52237 does not improve AUC. Reverting changes.
Training on augumented user 97972 12/50 current_auc = 0.671875
User 97972 AUC after training: 0.6614583333333333
User 97972 does not improve AUC. Reverting changes.
Training on augumented user 69012 13/50 current_auc = 0.671875
User 69012 AUC after training: 0.671875
User 69012 does not improve AUC. Reverting changes.
Training on augumented user 118265 14/50 current_auc = 0.671875
User 118265 AUC after training: 0.6640625
User 118265 does not improve AUC. Reverting changes.
Training on augumented user 66881 15/50 current_auc = 0.671875
User 66881 AUC after training: 0.671875
User 66881 does not improve AUC. Reverting changes.
Training on augumented user 106148 16/50 current_auc = 0.671875
User 106148 AUC after training: 0.6666666666666667
User 106148 does not improve AUC. Reverting changes.
Training on augumented user 112341 17/50 current_auc = 0.671875
User 112341 AUC after training: 0.671875
User 112341 does not improve AUC. Reverting changes.
Training on augumented user 72122 18/50 current_auc = 0.671875
User 72122 AUC after training: 0.6692708333333335
User 72122 does not improve AUC. Reverting changes.
Training on augumented user 87785 19/50 current_auc = 0.671875
User 87785 AUC after training: 0.671875
User 87785 does not improve AUC. Reverting changes.
Training on augumented user 73274 20/50 current_auc = 0.671875
User 73274 AUC after training: 0.671875
User 73274 does not improve AUC. Reverting changes.
Training on augumented user 131622 21/50 current_auc = 0.671875
User 131622 AUC after training: 0.6666666666666666
User 131622 does not improve AUC. Reverting changes.
Training on augumented user 113390 22/50 current_auc = 0.671875
User 113390 AUC after training: 0.6692708333333335
User 113390 does not improve AUC. Reverting changes.
Training on augumented user 134500 23/50 current_auc = 0.671875
User 134500 AUC after training: 0.671875
User 134500 does not improve AUC. Reverting changes.
Training on augumented user 35368 24/50 current_auc = 0.671875
User 35368 AUC after training: 0.6692708333333335
User 35368 does not improve AUC. Reverting changes.
Training on augumented user 86887 25/50 current_auc = 0.671875
User 86887 AUC after training: 0.6692708333333335
User 86887 does not improve AUC. Reverting changes.
Training on augumented user 85517 26/50 current_auc = 0.671875
User 85517 AUC after training: 0.6692708333333335
User 85517 does not improve AUC. Reverting changes.
Training on augumented user 66007 27/50 current_auc = 0.671875
User 66007 AUC after training: 0.6692708333333335
User 66007 does not improve AUC. Reverting changes.
Training on augumented user 102535 28/50 current_auc = 0.671875
User 102535 AUC after training: 0.6666666666666667
User 102535 does not improve AUC. Reverting changes.
Training on augumented user 27093 29/50 current_auc = 0.671875
User 27093 AUC after training: 0.6666666666666667
User 27093 does not improve AUC. Reverting changes.
Training on augumented user 94669 30/50 current_auc = 0.671875
User 94669 AUC after training: 0.6692708333333335
User 94669 does not improve AUC. Reverting changes.
Training on augumented user 50969 31/50 current_auc = 0.671875
User 50969 AUC after training: 0.6614583333333334
User 50969 does not improve AUC. Reverting changes.
Training on augumented user 93458 32/50 current_auc = 0.671875
User 93458 AUC after training: 0.6666666666666667
User 93458 does not improve AUC. Reverting changes.
Training on augumented user 22336 33/50 current_auc = 0.671875
User 22336 AUC after training: 0.671875
User 22336 does not improve AUC. Reverting changes.
Training on augumented user 66599 34/50 current_auc = 0.671875
User 66599 AUC after training: 0.671875
User 66599 does not improve AUC. Reverting changes.
Training on augumented user 37979 35/50 current_auc = 0.671875
User 37979 AUC after training: 0.671875
User 37979 does not improve AUC. Reverting changes.
Training on augumented user 74406 36/50 current_auc = 0.671875
User 74406 AUC after training: 0.6692708333333335
User 74406 does not improve AUC. Reverting changes.
Training on augumented user 126949 37/50 current_auc = 0.671875
User 126949 AUC after training: 0.6692708333333335
User 126949 does not improve AUC. Reverting changes.
Training on augumented user 89514 38/50 current_auc = 0.671875
User 89514 AUC after training: 0.6692708333333335
User 89514 does not improve AUC. Reverting changes.
Training on augumented user 2540 39/50 current_auc = 0.671875
User 2540 AUC after training: 0.6744791666666667
User 2540 improves AUC. Keeping the model.
Training on augumented user 101433 40/50 current_auc = 0.6744791666666667
User 101433 AUC after training: 0.6744791666666667
User 101433 does not improve AUC. Reverting changes.
Training on augumented user 67863 41/50 current_auc = 0.6744791666666667
User 67863 AUC after training: 0.671875
User 67863 does not improve AUC. Reverting changes.
Training on augumented user 130314 42/50 current_auc = 0.6744791666666667
User 130314 AUC after training: 0.6744791666666667
User 130314 does not improve AUC. Reverting changes.
Training on augumented user 112812 43/50 current_auc = 0.6744791666666667
User 112812 AUC after training: 0.6692708333333333
User 112812 does not improve AUC. Reverting changes.
Training on augumented user 105749 44/50 current_auc = 0.6744791666666667
User 105749 AUC after training: 0.6744791666666667
User 105749 does not improve AUC. Reverting changes.
Training on augumented user 40008 45/50 current_auc = 0.6744791666666667
User 40008 AUC after training: 0.6744791666666667
User 40008 does not improve AUC. Reverting changes.
Training on augumented user 53088 46/50 current_auc = 0.6744791666666667
User 53088 AUC after training: 0.6640625
User 53088 does not improve AUC. Reverting changes.
Training on augumented user 28037 47/50 current_auc = 0.6744791666666667
User 28037 AUC after training: 0.6744791666666667
User 28037 does not improve AUC. Reverting changes.
Training on augumented user 26404 48/50 current_auc = 0.6744791666666667
User 26404 AUC after training: 0.6744791666666667
User 26404 does not improve AUC. Reverting changes.
Training on augumented user 123209 49/50 current_auc = 0.6744791666666667
User 123209 AUC after training: 0.6744791666666667
User 123209 does not improve AUC. Reverting changes.
[2024-12-02 19:50:43.441494] start test user 5503 244/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:50:43.970113] start test user 5503 244/568 recall augumented users by random, augumented_users = [40616, 133601, 121777, 33780, 80474, 51236, 62548, 83322, 48845, 40711, 105825, 60721, 15404, 62361, 61371, 112351, 10116, 16396, 103037, 6314, 125681, 76962, 53645, 99232, 62596, 113110, 25535, 120779, 78866, 128483, 79828, 42944, 61425, 105216, 93057, 136427, 133902, 135731, 76181, 135361, 12756, 75596, 6860, 77248, 76512, 136679, 52352, 50950, 122809, 5675]
[2024-12-02 19:50:43.985554] user = 5503 Cloud 244/568
[2024-12-02 19:50:43.995052] user = 5503 Local 244/568
[2024-12-02 19:50:44.089395] user = 5503 Local+ 244/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:50:47.013199] user = 5503 MPDA- 244/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5812499999999999
Training on augumented user 40616 0/50 current_auc = 0.5812499999999999
User 40616 AUC after training: 0.5874999999999999
User 40616 improves AUC. Keeping the model.
Training on augumented user 133601 1/50 current_auc = 0.5874999999999999
User 133601 AUC after training: 0.5874999999999999
User 133601 does not improve AUC. Reverting changes.
Training on augumented user 121777 2/50 current_auc = 0.5874999999999999
User 121777 AUC after training: 0.5874999999999999
User 121777 does not improve AUC. Reverting changes.
Training on augumented user 33780 3/50 current_auc = 0.5874999999999999
User 33780 AUC after training: 0.5874999999999999
User 33780 does not improve AUC. Reverting changes.
Training on augumented user 80474 4/50 current_auc = 0.5874999999999999
User 80474 AUC after training: 0.5874999999999999
User 80474 does not improve AUC. Reverting changes.
Training on augumented user 51236 5/50 current_auc = 0.5874999999999999
User 51236 AUC after training: 0.5874999999999999
User 51236 does not improve AUC. Reverting changes.
Training on augumented user 62548 6/50 current_auc = 0.5874999999999999
User 62548 AUC after training: 0.5874999999999999
User 62548 does not improve AUC. Reverting changes.
Training on augumented user 83322 7/50 current_auc = 0.5874999999999999
User 83322 AUC after training: 0.5812499999999999
User 83322 does not improve AUC. Reverting changes.
Training on augumented user 48845 8/50 current_auc = 0.5874999999999999
User 48845 AUC after training: 0.59375
User 48845 improves AUC. Keeping the model.
Training on augumented user 40711 9/50 current_auc = 0.59375
User 40711 AUC after training: 0.5812499999999999
User 40711 does not improve AUC. Reverting changes.
Training on augumented user 105825 10/50 current_auc = 0.59375
User 105825 AUC after training: 0.575
User 105825 does not improve AUC. Reverting changes.
Training on augumented user 60721 11/50 current_auc = 0.59375
User 60721 AUC after training: 0.575
User 60721 does not improve AUC. Reverting changes.
Training on augumented user 15404 12/50 current_auc = 0.59375
User 15404 AUC after training: 0.5874999999999999
User 15404 does not improve AUC. Reverting changes.
Training on augumented user 62361 13/50 current_auc = 0.59375
User 62361 AUC after training: 0.59375
User 62361 does not improve AUC. Reverting changes.
Training on augumented user 61371 14/50 current_auc = 0.59375
User 61371 AUC after training: 0.59375
User 61371 does not improve AUC. Reverting changes.
Training on augumented user 112351 15/50 current_auc = 0.59375
User 112351 AUC after training: 0.59375
User 112351 does not improve AUC. Reverting changes.
Training on augumented user 10116 16/50 current_auc = 0.59375
User 10116 AUC after training: 0.5874999999999999
User 10116 does not improve AUC. Reverting changes.
Training on augumented user 16396 17/50 current_auc = 0.59375
User 16396 AUC after training: 0.59375
User 16396 does not improve AUC. Reverting changes.
Training on augumented user 103037 18/50 current_auc = 0.59375
User 103037 AUC after training: 0.59375
User 103037 does not improve AUC. Reverting changes.
Training on augumented user 6314 19/50 current_auc = 0.59375
User 6314 AUC after training: 0.5874999999999999
User 6314 does not improve AUC. Reverting changes.
Training on augumented user 125681 20/50 current_auc = 0.59375
User 125681 AUC after training: 0.5874999999999999
User 125681 does not improve AUC. Reverting changes.
Training on augumented user 76962 21/50 current_auc = 0.59375
User 76962 AUC after training: 0.575
User 76962 does not improve AUC. Reverting changes.
Training on augumented user 53645 22/50 current_auc = 0.59375
User 53645 AUC after training: 0.59375
User 53645 does not improve AUC. Reverting changes.
Training on augumented user 99232 23/50 current_auc = 0.59375
User 99232 AUC after training: 0.59375
User 99232 does not improve AUC. Reverting changes.
Training on augumented user 62596 24/50 current_auc = 0.59375
User 62596 AUC after training: 0.5874999999999999
User 62596 does not improve AUC. Reverting changes.
Training on augumented user 113110 25/50 current_auc = 0.59375
User 113110 AUC after training: 0.59375
User 113110 does not improve AUC. Reverting changes.
Training on augumented user 25535 26/50 current_auc = 0.59375
User 25535 AUC after training: 0.5874999999999999
User 25535 does not improve AUC. Reverting changes.
Training on augumented user 120779 27/50 current_auc = 0.59375
User 120779 AUC after training: 0.5874999999999999
User 120779 does not improve AUC. Reverting changes.
Training on augumented user 78866 28/50 current_auc = 0.59375
User 78866 AUC after training: 0.5812499999999999
User 78866 does not improve AUC. Reverting changes.
Training on augumented user 128483 29/50 current_auc = 0.59375
User 128483 AUC after training: 0.59375
User 128483 does not improve AUC. Reverting changes.
Training on augumented user 79828 30/50 current_auc = 0.59375
User 79828 AUC after training: 0.5874999999999999
User 79828 does not improve AUC. Reverting changes.
Training on augumented user 42944 31/50 current_auc = 0.59375
User 42944 AUC after training: 0.59375
User 42944 does not improve AUC. Reverting changes.
Training on augumented user 61425 32/50 current_auc = 0.59375
User 61425 AUC after training: 0.59375
User 61425 does not improve AUC. Reverting changes.
Training on augumented user 105216 33/50 current_auc = 0.59375
User 105216 AUC after training: 0.59375
User 105216 does not improve AUC. Reverting changes.
Training on augumented user 93057 34/50 current_auc = 0.59375
User 93057 AUC after training: 0.59375
User 93057 does not improve AUC. Reverting changes.
Training on augumented user 136427 35/50 current_auc = 0.59375
User 136427 AUC after training: 0.5874999999999999
User 136427 does not improve AUC. Reverting changes.
Training on augumented user 133902 36/50 current_auc = 0.59375
User 133902 AUC after training: 0.59375
User 133902 does not improve AUC. Reverting changes.
Training on augumented user 135731 37/50 current_auc = 0.59375
User 135731 AUC after training: 0.59375
User 135731 does not improve AUC. Reverting changes.
Training on augumented user 76181 38/50 current_auc = 0.59375
User 76181 AUC after training: 0.5874999999999999
User 76181 does not improve AUC. Reverting changes.
Training on augumented user 135361 39/50 current_auc = 0.59375
User 135361 AUC after training: 0.59375
User 135361 does not improve AUC. Reverting changes.
Training on augumented user 12756 40/50 current_auc = 0.59375
User 12756 AUC after training: 0.59375
User 12756 does not improve AUC. Reverting changes.
Training on augumented user 75596 41/50 current_auc = 0.59375
User 75596 AUC after training: 0.5812499999999999
User 75596 does not improve AUC. Reverting changes.
Training on augumented user 6860 42/50 current_auc = 0.59375
User 6860 AUC after training: 0.5874999999999999
User 6860 does not improve AUC. Reverting changes.
Training on augumented user 77248 43/50 current_auc = 0.59375
User 77248 AUC after training: 0.575
User 77248 does not improve AUC. Reverting changes.
Training on augumented user 76512 44/50 current_auc = 0.59375
User 76512 AUC after training: 0.5812499999999999
User 76512 does not improve AUC. Reverting changes.
Training on augumented user 136679 45/50 current_auc = 0.59375
User 136679 AUC after training: 0.5812499999999999
User 136679 does not improve AUC. Reverting changes.
Training on augumented user 52352 46/50 current_auc = 0.59375
User 52352 AUC after training: 0.5874999999999999
User 52352 does not improve AUC. Reverting changes.
Training on augumented user 50950 47/50 current_auc = 0.59375
User 50950 AUC after training: 0.59375
User 50950 does not improve AUC. Reverting changes.
Training on augumented user 122809 48/50 current_auc = 0.59375
User 122809 AUC after training: 0.59375
User 122809 does not improve AUC. Reverting changes.
Training on augumented user 5675 49/50 current_auc = 0.59375
User 5675 AUC after training: 0.59375
User 5675 does not improve AUC. Reverting changes.
[2024-12-02 19:51:20.642622] start test user 5515 245/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:51:21.041877] start test user 5515 245/568 recall augumented users by random, augumented_users = [83195, 108483, 103917, 39255, 122212, 66752, 5316, 63673, 119106, 96886, 107088, 36360, 114966, 72513, 63253, 13882, 36960, 110583, 87608, 129473, 126725, 778, 92939, 8016, 17895, 98276, 63343, 115911, 9410, 72595, 73354, 102518, 99706, 68913, 114816, 104896, 102353, 28091, 84353, 106912, 123501, 5656, 107600, 90658, 122445, 39131, 60296, 82237, 112149, 50362]
[2024-12-02 19:51:21.056580] user = 5515 Cloud 245/568
[2024-12-02 19:51:21.076109] user = 5515 Local 245/568
[2024-12-02 19:51:21.123569] user = 5515 Local+ 245/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:51:23.215626] user = 5515 MPDA- 245/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4600782328578003
Training on augumented user 83195 0/50 current_auc = 0.4600782328578003
User 83195 AUC after training: 0.4605384261389784
User 83195 improves AUC. Keeping the model.
Training on augumented user 108483 1/50 current_auc = 0.4605384261389784
User 108483 AUC after training: 0.46226415094339623
User 108483 improves AUC. Keeping the model.
Training on augumented user 103917 2/50 current_auc = 0.46226415094339623
User 103917 AUC after training: 0.4607685227795674
User 103917 does not improve AUC. Reverting changes.
Training on augumented user 39255 3/50 current_auc = 0.46226415094339623
User 39255 AUC after training: 0.46237919926369075
User 39255 improves AUC. Keeping the model.
Training on augumented user 122212 4/50 current_auc = 0.46237919926369075
User 122212 AUC after training: 0.4618039576622181
User 122212 does not improve AUC. Reverting changes.
Training on augumented user 66752 5/50 current_auc = 0.46237919926369075
User 66752 AUC after training: 0.461113667740451
User 66752 does not improve AUC. Reverting changes.
Training on augumented user 5316 6/50 current_auc = 0.46237919926369075
User 5316 AUC after training: 0.4621491026231017
User 5316 does not improve AUC. Reverting changes.
Training on augumented user 63673 7/50 current_auc = 0.46237919926369075
User 63673 AUC after training: 0.4620340543028072
User 63673 does not improve AUC. Reverting changes.
Training on augumented user 119106 8/50 current_auc = 0.46237919926369075
User 119106 AUC after training: 0.46191900598251273
User 119106 does not improve AUC. Reverting changes.
Training on augumented user 96886 9/50 current_auc = 0.46237919926369075
User 96886 AUC after training: 0.4607685227795674
User 96886 does not improve AUC. Reverting changes.
Training on augumented user 107088 10/50 current_auc = 0.46237919926369075
User 107088 AUC after training: 0.4616889093419236
User 107088 does not improve AUC. Reverting changes.
Training on augumented user 36360 11/50 current_auc = 0.46237919926369075
User 36360 AUC after training: 0.4613437643810401
User 36360 does not improve AUC. Reverting changes.
Training on augumented user 114966 12/50 current_auc = 0.46237919926369075
User 114966 AUC after training: 0.45892774965485506
User 114966 does not improve AUC. Reverting changes.
Training on augumented user 72513 13/50 current_auc = 0.46237919926369075
User 72513 AUC after training: 0.4609986194201565
User 72513 does not improve AUC. Reverting changes.
Training on augumented user 63253 14/50 current_auc = 0.46237919926369075
User 63253 AUC after training: 0.46375977910722505
User 63253 improves AUC. Keeping the model.
Training on augumented user 13882 15/50 current_auc = 0.46375977910722505
User 13882 AUC after training: 0.4621491026231017
User 13882 does not improve AUC. Reverting changes.
Training on augumented user 36960 16/50 current_auc = 0.46375977910722505
User 36960 AUC after training: 0.4619190059825127
User 36960 does not improve AUC. Reverting changes.
Training on augumented user 110583 17/50 current_auc = 0.46375977910722505
User 110583 AUC after training: 0.4627243442245743
User 110583 does not improve AUC. Reverting changes.
Training on augumented user 87608 18/50 current_auc = 0.46375977910722505
User 87608 AUC after training: 0.46168890934192364
User 87608 does not improve AUC. Reverting changes.
Training on augumented user 129473 19/50 current_auc = 0.46375977910722505
User 129473 AUC after training: 0.46283939254486883
User 129473 does not improve AUC. Reverting changes.
Training on augumented user 126725 20/50 current_auc = 0.46375977910722505
User 126725 AUC after training: 0.46306948918545787
User 126725 does not improve AUC. Reverting changes.
Training on augumented user 778 21/50 current_auc = 0.46375977910722505
User 778 AUC after training: 0.4626092959042798
User 778 does not improve AUC. Reverting changes.
Training on augumented user 92939 22/50 current_auc = 0.46375977910722505
User 92939 AUC after training: 0.46226415094339623
User 92939 does not improve AUC. Reverting changes.
Training on augumented user 8016 23/50 current_auc = 0.46375977910722505
User 8016 AUC after training: 0.46145881270133454
User 8016 does not improve AUC. Reverting changes.
Training on augumented user 17895 24/50 current_auc = 0.46375977910722505
User 17895 AUC after training: 0.46180395766221816
User 17895 does not improve AUC. Reverting changes.
Training on augumented user 98276 25/50 current_auc = 0.46375977910722505
User 98276 AUC after training: 0.46260929590427985
User 98276 does not improve AUC. Reverting changes.
Training on augumented user 63343 26/50 current_auc = 0.46375977910722505
User 63343 AUC after training: 0.46260929590427985
User 63343 does not improve AUC. Reverting changes.
Training on augumented user 115911 27/50 current_auc = 0.46375977910722505
User 115911 AUC after training: 0.4607685227795674
User 115911 does not improve AUC. Reverting changes.
Training on augumented user 9410 28/50 current_auc = 0.46375977910722505
User 9410 AUC after training: 0.4649102623101703
User 9410 improves AUC. Keeping the model.
Training on augumented user 72595 29/50 current_auc = 0.4649102623101703
User 72595 AUC after training: 0.4656005522319374
User 72595 improves AUC. Keeping the model.
Training on augumented user 73354 30/50 current_auc = 0.4656005522319374
User 73354 AUC after training: 0.4647952139898758
User 73354 does not improve AUC. Reverting changes.
Training on augumented user 102518 31/50 current_auc = 0.4656005522319374
User 102518 AUC after training: 0.46571560055223193
User 102518 improves AUC. Keeping the model.
Training on augumented user 99706 32/50 current_auc = 0.46571560055223193
User 99706 AUC after training: 0.4643350207086977
User 99706 does not improve AUC. Reverting changes.
Training on augumented user 68913 33/50 current_auc = 0.46571560055223193
User 68913 AUC after training: 0.4644500690289921
User 68913 does not improve AUC. Reverting changes.
Training on augumented user 114816 34/50 current_auc = 0.46571560055223193
User 114816 AUC after training: 0.4654855039116429
User 114816 does not improve AUC. Reverting changes.
Training on augumented user 104896 35/50 current_auc = 0.46571560055223193
User 104896 AUC after training: 0.46398987574781403
User 104896 does not improve AUC. Reverting changes.
Training on augumented user 102353 36/50 current_auc = 0.46571560055223193
User 102353 AUC after training: 0.46617579383341007
User 102353 improves AUC. Keeping the model.
Training on augumented user 28091 37/50 current_auc = 0.46617579383341007
User 28091 AUC after training: 0.46456511734928674
User 28091 does not improve AUC. Reverting changes.
Training on augumented user 84353 38/50 current_auc = 0.46617579383341007
User 84353 AUC after training: 0.46583064887252645
User 84353 does not improve AUC. Reverting changes.
Training on augumented user 106912 39/50 current_auc = 0.46617579383341007
User 106912 AUC after training: 0.4605384261389784
User 106912 does not improve AUC. Reverting changes.
Training on augumented user 123501 40/50 current_auc = 0.46617579383341007
User 123501 AUC after training: 0.46583064887252645
User 123501 does not improve AUC. Reverting changes.
Training on augumented user 5656 41/50 current_auc = 0.46617579383341007
User 5656 AUC after training: 0.4647952139898757
User 5656 does not improve AUC. Reverting changes.
Training on augumented user 107600 42/50 current_auc = 0.46617579383341007
User 107600 AUC after training: 0.4644500690289922
User 107600 does not improve AUC. Reverting changes.
Training on augumented user 90658 43/50 current_auc = 0.46617579383341007
User 90658 AUC after training: 0.46571560055223193
User 90658 does not improve AUC. Reverting changes.
Training on augumented user 122445 44/50 current_auc = 0.46617579383341007
User 122445 AUC after training: 0.46571560055223193
User 122445 does not improve AUC. Reverting changes.
Training on augumented user 39131 45/50 current_auc = 0.46617579383341007
User 39131 AUC after training: 0.4650253106304648
User 39131 does not improve AUC. Reverting changes.
Training on augumented user 60296 46/50 current_auc = 0.46617579383341007
User 60296 AUC after training: 0.4653704555913484
User 60296 does not improve AUC. Reverting changes.
Training on augumented user 82237 47/50 current_auc = 0.46617579383341007
User 82237 AUC after training: 0.46456511734928674
User 82237 does not improve AUC. Reverting changes.
Training on augumented user 112149 48/50 current_auc = 0.46617579383341007
User 112149 AUC after training: 0.46502531063046487
User 112149 does not improve AUC. Reverting changes.
Training on augumented user 50362 49/50 current_auc = 0.46617579383341007
User 50362 AUC after training: 0.46226415094339623
User 50362 does not improve AUC. Reverting changes.
[2024-12-02 19:51:54.447259] start test user 5584 246/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:51:54.870747] start test user 5584 246/568 recall augumented users by random, augumented_users = [9847, 18503, 126135, 72353, 130103, 109095, 74919, 65536, 112697, 65718, 1938, 110731, 112383, 99980, 25554, 26495, 120926, 42144, 105448, 103875, 90381, 26572, 44816, 12634, 65355, 48702, 21327, 137912, 65739, 82063, 93904, 74808, 57820, 41991, 120997, 54132, 84998, 57248, 76596, 99361, 78347, 1254, 8468, 125465, 34058, 77857, 126562, 92350, 102489, 90295]
[2024-12-02 19:51:54.889153] user = 5584 Cloud 246/568
[2024-12-02 19:51:54.903061] user = 5584 Local 246/568
[2024-12-02 19:51:54.927512] user = 5584 Local+ 246/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:51:57.705616] user = 5584 MPDA- 246/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.9008620689655172
Training on augumented user 9847 0/50 current_auc = 0.9008620689655172
User 9847 AUC after training: 0.9008620689655172
User 9847 does not improve AUC. Reverting changes.
Training on augumented user 18503 1/50 current_auc = 0.9008620689655172
User 18503 AUC after training: 0.9008620689655172
User 18503 does not improve AUC. Reverting changes.
Training on augumented user 126135 2/50 current_auc = 0.9008620689655172
User 126135 AUC after training: 0.9008620689655172
User 126135 does not improve AUC. Reverting changes.
Training on augumented user 72353 3/50 current_auc = 0.9008620689655172
User 72353 AUC after training: 0.8987068965517242
User 72353 does not improve AUC. Reverting changes.
Training on augumented user 130103 4/50 current_auc = 0.9008620689655172
User 130103 AUC after training: 0.8987068965517242
User 130103 does not improve AUC. Reverting changes.
Training on augumented user 109095 5/50 current_auc = 0.9008620689655172
User 109095 AUC after training: 0.896551724137931
User 109095 does not improve AUC. Reverting changes.
Training on augumented user 74919 6/50 current_auc = 0.9008620689655172
User 74919 AUC after training: 0.8987068965517242
User 74919 does not improve AUC. Reverting changes.
Training on augumented user 65536 7/50 current_auc = 0.9008620689655172
User 65536 AUC after training: 0.8987068965517242
User 65536 does not improve AUC. Reverting changes.
Training on augumented user 112697 8/50 current_auc = 0.9008620689655172
User 112697 AUC after training: 0.8987068965517242
User 112697 does not improve AUC. Reverting changes.
Training on augumented user 65718 9/50 current_auc = 0.9008620689655172
User 65718 AUC after training: 0.8987068965517242
User 65718 does not improve AUC. Reverting changes.
Training on augumented user 1938 10/50 current_auc = 0.9008620689655172
User 1938 AUC after training: 0.8987068965517242
User 1938 does not improve AUC. Reverting changes.
Training on augumented user 110731 11/50 current_auc = 0.9008620689655172
User 110731 AUC after training: 0.9008620689655172
User 110731 does not improve AUC. Reverting changes.
Training on augumented user 112383 12/50 current_auc = 0.9008620689655172
User 112383 AUC after training: 0.9008620689655172
User 112383 does not improve AUC. Reverting changes.
Training on augumented user 99980 13/50 current_auc = 0.9008620689655172
User 99980 AUC after training: 0.8987068965517242
User 99980 does not improve AUC. Reverting changes.
Training on augumented user 25554 14/50 current_auc = 0.9008620689655172
User 25554 AUC after training: 0.9008620689655172
User 25554 does not improve AUC. Reverting changes.
Training on augumented user 26495 15/50 current_auc = 0.9008620689655172
User 26495 AUC after training: 0.9008620689655172
User 26495 does not improve AUC. Reverting changes.
Training on augumented user 120926 16/50 current_auc = 0.9008620689655172
User 120926 AUC after training: 0.8987068965517242
User 120926 does not improve AUC. Reverting changes.
Training on augumented user 42144 17/50 current_auc = 0.9008620689655172
User 42144 AUC after training: 0.8987068965517242
User 42144 does not improve AUC. Reverting changes.
Training on augumented user 105448 18/50 current_auc = 0.9008620689655172
User 105448 AUC after training: 0.9008620689655172
User 105448 does not improve AUC. Reverting changes.
Training on augumented user 103875 19/50 current_auc = 0.9008620689655172
User 103875 AUC after training: 0.9008620689655172
User 103875 does not improve AUC. Reverting changes.
Training on augumented user 90381 20/50 current_auc = 0.9008620689655172
User 90381 AUC after training: 0.8987068965517242
User 90381 does not improve AUC. Reverting changes.
Training on augumented user 26572 21/50 current_auc = 0.9008620689655172
User 26572 AUC after training: 0.9008620689655172
User 26572 does not improve AUC. Reverting changes.
Training on augumented user 44816 22/50 current_auc = 0.9008620689655172
User 44816 AUC after training: 0.9030172413793103
User 44816 improves AUC. Keeping the model.
Training on augumented user 12634 23/50 current_auc = 0.9030172413793103
User 12634 AUC after training: 0.9030172413793103
User 12634 does not improve AUC. Reverting changes.
Training on augumented user 65355 24/50 current_auc = 0.9030172413793103
User 65355 AUC after training: 0.9008620689655172
User 65355 does not improve AUC. Reverting changes.
Training on augumented user 48702 25/50 current_auc = 0.9030172413793103
User 48702 AUC after training: 0.9030172413793103
User 48702 does not improve AUC. Reverting changes.
Training on augumented user 21327 26/50 current_auc = 0.9030172413793103
User 21327 AUC after training: 0.9030172413793103
User 21327 does not improve AUC. Reverting changes.
Training on augumented user 137912 27/50 current_auc = 0.9030172413793103
User 137912 AUC after training: 0.9008620689655172
User 137912 does not improve AUC. Reverting changes.
Training on augumented user 65739 28/50 current_auc = 0.9030172413793103
User 65739 AUC after training: 0.9030172413793103
User 65739 does not improve AUC. Reverting changes.
Training on augumented user 82063 29/50 current_auc = 0.9030172413793103
User 82063 AUC after training: 0.9030172413793103
User 82063 does not improve AUC. Reverting changes.
Training on augumented user 93904 30/50 current_auc = 0.9030172413793103
User 93904 AUC after training: 0.9030172413793103
User 93904 does not improve AUC. Reverting changes.
Training on augumented user 74808 31/50 current_auc = 0.9030172413793103
User 74808 AUC after training: 0.9030172413793103
User 74808 does not improve AUC. Reverting changes.
Training on augumented user 57820 32/50 current_auc = 0.9030172413793103
User 57820 AUC after training: 0.9030172413793103
User 57820 does not improve AUC. Reverting changes.
Training on augumented user 41991 33/50 current_auc = 0.9030172413793103
User 41991 AUC after training: 0.9030172413793103
User 41991 does not improve AUC. Reverting changes.
Training on augumented user 120997 34/50 current_auc = 0.9030172413793103
User 120997 AUC after training: 0.9008620689655172
User 120997 does not improve AUC. Reverting changes.
Training on augumented user 54132 35/50 current_auc = 0.9030172413793103
User 54132 AUC after training: 0.9030172413793103
User 54132 does not improve AUC. Reverting changes.
Training on augumented user 84998 36/50 current_auc = 0.9030172413793103
User 84998 AUC after training: 0.9008620689655172
User 84998 does not improve AUC. Reverting changes.
Training on augumented user 57248 37/50 current_auc = 0.9030172413793103
User 57248 AUC after training: 0.8987068965517242
User 57248 does not improve AUC. Reverting changes.
Training on augumented user 76596 38/50 current_auc = 0.9030172413793103
User 76596 AUC after training: 0.9008620689655172
User 76596 does not improve AUC. Reverting changes.
Training on augumented user 99361 39/50 current_auc = 0.9030172413793103
User 99361 AUC after training: 0.9030172413793103
User 99361 does not improve AUC. Reverting changes.
Training on augumented user 78347 40/50 current_auc = 0.9030172413793103
User 78347 AUC after training: 0.9030172413793103
User 78347 does not improve AUC. Reverting changes.
Training on augumented user 1254 41/50 current_auc = 0.9030172413793103
User 1254 AUC after training: 0.9008620689655172
User 1254 does not improve AUC. Reverting changes.
Training on augumented user 8468 42/50 current_auc = 0.9030172413793103
User 8468 AUC after training: 0.9030172413793103
User 8468 does not improve AUC. Reverting changes.
Training on augumented user 125465 43/50 current_auc = 0.9030172413793103
User 125465 AUC after training: 0.9030172413793103
User 125465 does not improve AUC. Reverting changes.
Training on augumented user 34058 44/50 current_auc = 0.9030172413793103
User 34058 AUC after training: 0.9030172413793103
User 34058 does not improve AUC. Reverting changes.
Training on augumented user 77857 45/50 current_auc = 0.9030172413793103
User 77857 AUC after training: 0.9030172413793103
User 77857 does not improve AUC. Reverting changes.
Training on augumented user 126562 46/50 current_auc = 0.9030172413793103
User 126562 AUC after training: 0.9008620689655172
User 126562 does not improve AUC. Reverting changes.
Training on augumented user 92350 47/50 current_auc = 0.9030172413793103
User 92350 AUC after training: 0.9008620689655172
User 92350 does not improve AUC. Reverting changes.
Training on augumented user 102489 48/50 current_auc = 0.9030172413793103
User 102489 AUC after training: 0.9030172413793103
User 102489 does not improve AUC. Reverting changes.
Training on augumented user 90295 49/50 current_auc = 0.9030172413793103
User 90295 AUC after training: 0.8987068965517242
User 90295 does not improve AUC. Reverting changes.
[2024-12-02 19:52:29.529629] start test user 5613 247/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:52:30.325672] start test user 5613 247/568 recall augumented users by random, augumented_users = [14997, 27419, 100736, 53264, 112098, 23543, 50414, 113764, 97864, 92301, 131160, 77660, 69524, 39616, 52663, 105040, 30565, 107393, 39888, 66918, 5888, 73205, 26814, 29496, 138382, 103617, 106582, 5682, 136553, 3361, 82715, 29346, 86536, 71068, 3910, 64718, 24184, 133269, 7766, 39695, 129685, 88050, 114147, 58826, 103252, 42814, 79874, 33835, 70914, 50970]
[2024-12-02 19:52:30.391870] user = 5613 Cloud 247/568
[2024-12-02 19:52:30.408959] user = 5613 Local 247/568
[2024-12-02 19:52:30.561413] user = 5613 Local+ 247/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:52:32.361248] user = 5613 MPDA- 247/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.9117647058823529
Training on augumented user 14997 0/50 current_auc = 0.9117647058823529
User 14997 AUC after training: 0.9117647058823529
User 14997 does not improve AUC. Reverting changes.
Training on augumented user 27419 1/50 current_auc = 0.9117647058823529
User 27419 AUC after training: 0.9117647058823529
User 27419 does not improve AUC. Reverting changes.
Training on augumented user 100736 2/50 current_auc = 0.9117647058823529
User 100736 AUC after training: 0.9117647058823529
User 100736 does not improve AUC. Reverting changes.
Training on augumented user 53264 3/50 current_auc = 0.9117647058823529
User 53264 AUC after training: 0.9117647058823529
User 53264 does not improve AUC. Reverting changes.
Training on augumented user 112098 4/50 current_auc = 0.9117647058823529
User 112098 AUC after training: 0.9117647058823529
User 112098 does not improve AUC. Reverting changes.
Training on augumented user 23543 5/50 current_auc = 0.9117647058823529
User 23543 AUC after training: 0.9117647058823529
User 23543 does not improve AUC. Reverting changes.
Training on augumented user 50414 6/50 current_auc = 0.9117647058823529
User 50414 AUC after training: 0.9117647058823529
User 50414 does not improve AUC. Reverting changes.
Training on augumented user 113764 7/50 current_auc = 0.9117647058823529
User 113764 AUC after training: 0.9117647058823529
User 113764 does not improve AUC. Reverting changes.
Training on augumented user 97864 8/50 current_auc = 0.9117647058823529
User 97864 AUC after training: 0.9117647058823529
User 97864 does not improve AUC. Reverting changes.
Training on augumented user 92301 9/50 current_auc = 0.9117647058823529
User 92301 AUC after training: 0.9117647058823529
User 92301 does not improve AUC. Reverting changes.
Training on augumented user 131160 10/50 current_auc = 0.9117647058823529
User 131160 AUC after training: 0.9117647058823529
User 131160 does not improve AUC. Reverting changes.
Training on augumented user 77660 11/50 current_auc = 0.9117647058823529
User 77660 AUC after training: 0.9117647058823529
User 77660 does not improve AUC. Reverting changes.
Training on augumented user 69524 12/50 current_auc = 0.9117647058823529
User 69524 AUC after training: 0.9117647058823529
User 69524 does not improve AUC. Reverting changes.
Training on augumented user 39616 13/50 current_auc = 0.9117647058823529
User 39616 AUC after training: 0.9117647058823529
User 39616 does not improve AUC. Reverting changes.
Training on augumented user 52663 14/50 current_auc = 0.9117647058823529
User 52663 AUC after training: 0.9117647058823529
User 52663 does not improve AUC. Reverting changes.
Training on augumented user 105040 15/50 current_auc = 0.9117647058823529
User 105040 AUC after training: 0.9117647058823529
User 105040 does not improve AUC. Reverting changes.
Training on augumented user 30565 16/50 current_auc = 0.9117647058823529
User 30565 AUC after training: 0.9117647058823529
User 30565 does not improve AUC. Reverting changes.
Training on augumented user 107393 17/50 current_auc = 0.9117647058823529
User 107393 AUC after training: 0.9117647058823529
User 107393 does not improve AUC. Reverting changes.
Training on augumented user 39888 18/50 current_auc = 0.9117647058823529
User 39888 AUC after training: 0.9117647058823529
User 39888 does not improve AUC. Reverting changes.
Training on augumented user 66918 19/50 current_auc = 0.9117647058823529
User 66918 AUC after training: 0.9117647058823529
User 66918 does not improve AUC. Reverting changes.
Training on augumented user 5888 20/50 current_auc = 0.9117647058823529
User 5888 AUC after training: 0.9117647058823529
User 5888 does not improve AUC. Reverting changes.
Training on augumented user 73205 21/50 current_auc = 0.9117647058823529
User 73205 AUC after training: 0.9117647058823529
User 73205 does not improve AUC. Reverting changes.
Training on augumented user 26814 22/50 current_auc = 0.9117647058823529
User 26814 AUC after training: 0.9117647058823529
User 26814 does not improve AUC. Reverting changes.
Training on augumented user 29496 23/50 current_auc = 0.9117647058823529
User 29496 AUC after training: 0.9117647058823529
User 29496 does not improve AUC. Reverting changes.
Training on augumented user 138382 24/50 current_auc = 0.9117647058823529
User 138382 AUC after training: 0.9117647058823529
User 138382 does not improve AUC. Reverting changes.
Training on augumented user 103617 25/50 current_auc = 0.9117647058823529
User 103617 AUC after training: 0.9117647058823529
User 103617 does not improve AUC. Reverting changes.
Training on augumented user 106582 26/50 current_auc = 0.9117647058823529
User 106582 AUC after training: 0.9117647058823529
User 106582 does not improve AUC. Reverting changes.
Training on augumented user 5682 27/50 current_auc = 0.9117647058823529
User 5682 AUC after training: 0.9117647058823529
User 5682 does not improve AUC. Reverting changes.
Training on augumented user 136553 28/50 current_auc = 0.9117647058823529
User 136553 AUC after training: 0.9117647058823529
User 136553 does not improve AUC. Reverting changes.
Training on augumented user 3361 29/50 current_auc = 0.9117647058823529
User 3361 AUC after training: 0.9117647058823529
User 3361 does not improve AUC. Reverting changes.
Training on augumented user 82715 30/50 current_auc = 0.9117647058823529
User 82715 AUC after training: 0.9117647058823529
User 82715 does not improve AUC. Reverting changes.
Training on augumented user 29346 31/50 current_auc = 0.9117647058823529
User 29346 AUC after training: 0.9117647058823529
User 29346 does not improve AUC. Reverting changes.
Training on augumented user 86536 32/50 current_auc = 0.9117647058823529
User 86536 AUC after training: 0.9117647058823529
User 86536 does not improve AUC. Reverting changes.
Training on augumented user 71068 33/50 current_auc = 0.9117647058823529
User 71068 AUC after training: 0.9117647058823529
User 71068 does not improve AUC. Reverting changes.
Training on augumented user 3910 34/50 current_auc = 0.9117647058823529
User 3910 AUC after training: 0.9117647058823529
User 3910 does not improve AUC. Reverting changes.
Training on augumented user 64718 35/50 current_auc = 0.9117647058823529
User 64718 AUC after training: 0.9117647058823529
User 64718 does not improve AUC. Reverting changes.
Training on augumented user 24184 36/50 current_auc = 0.9117647058823529
User 24184 AUC after training: 0.9117647058823529
User 24184 does not improve AUC. Reverting changes.
Training on augumented user 133269 37/50 current_auc = 0.9117647058823529
User 133269 AUC after training: 0.9117647058823529
User 133269 does not improve AUC. Reverting changes.
Training on augumented user 7766 38/50 current_auc = 0.9117647058823529
User 7766 AUC after training: 0.9117647058823529
User 7766 does not improve AUC. Reverting changes.
Training on augumented user 39695 39/50 current_auc = 0.9117647058823529
User 39695 AUC after training: 0.9117647058823529
User 39695 does not improve AUC. Reverting changes.
Training on augumented user 129685 40/50 current_auc = 0.9117647058823529
User 129685 AUC after training: 0.9117647058823529
User 129685 does not improve AUC. Reverting changes.
Training on augumented user 88050 41/50 current_auc = 0.9117647058823529
User 88050 AUC after training: 0.9117647058823529
User 88050 does not improve AUC. Reverting changes.
Training on augumented user 114147 42/50 current_auc = 0.9117647058823529
User 114147 AUC after training: 0.9117647058823529
User 114147 does not improve AUC. Reverting changes.
Training on augumented user 58826 43/50 current_auc = 0.9117647058823529
User 58826 AUC after training: 0.9117647058823529
User 58826 does not improve AUC. Reverting changes.
Training on augumented user 103252 44/50 current_auc = 0.9117647058823529
User 103252 AUC after training: 0.9117647058823529
User 103252 does not improve AUC. Reverting changes.
Training on augumented user 42814 45/50 current_auc = 0.9117647058823529
User 42814 AUC after training: 0.9117647058823529
User 42814 does not improve AUC. Reverting changes.
Training on augumented user 79874 46/50 current_auc = 0.9117647058823529
User 79874 AUC after training: 0.9117647058823529
User 79874 does not improve AUC. Reverting changes.
Training on augumented user 33835 47/50 current_auc = 0.9117647058823529
User 33835 AUC after training: 0.9117647058823529
User 33835 does not improve AUC. Reverting changes.
Training on augumented user 70914 48/50 current_auc = 0.9117647058823529
User 70914 AUC after training: 0.9117647058823529
User 70914 does not improve AUC. Reverting changes.
Training on augumented user 50970 49/50 current_auc = 0.9117647058823529
User 50970 AUC after training: 0.9117647058823529
User 50970 does not improve AUC. Reverting changes.
[2024-12-02 19:53:02.929498] start test user 5616 248/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:53:03.690825] start test user 5616 248/568 recall augumented users by random, augumented_users = [90498, 45574, 67459, 42790, 56534, 37609, 128596, 107460, 111681, 69277, 127111, 123016, 120428, 38728, 111260, 14388, 97999, 40112, 74463, 110309, 17658, 105877, 23160, 103987, 96592, 47126, 115714, 35064, 44597, 3048, 86388, 87902, 128758, 41022, 46515, 90495, 110729, 117969, 100693, 10099, 137711, 30863, 64141, 10118, 44687, 122660, 116227, 136719, 89436, 115028]
[2024-12-02 19:53:03.718572] user = 5616 Cloud 248/568
[2024-12-02 19:53:03.728123] user = 5616 Local 248/568
[2024-12-02 19:53:03.791974] user = 5616 Local+ 248/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:53:05.901332] user = 5616 MPDA- 248/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8846153846153847
Training on augumented user 90498 0/50 current_auc = 0.8846153846153847
User 90498 AUC after training: 0.8846153846153847
User 90498 does not improve AUC. Reverting changes.
Training on augumented user 45574 1/50 current_auc = 0.8846153846153847
User 45574 AUC after training: 0.8846153846153847
User 45574 does not improve AUC. Reverting changes.
Training on augumented user 67459 2/50 current_auc = 0.8846153846153847
User 67459 AUC after training: 0.8846153846153847
User 67459 does not improve AUC. Reverting changes.
Training on augumented user 42790 3/50 current_auc = 0.8846153846153847
User 42790 AUC after training: 0.8846153846153847
User 42790 does not improve AUC. Reverting changes.
Training on augumented user 56534 4/50 current_auc = 0.8846153846153847
User 56534 AUC after training: 0.8846153846153847
User 56534 does not improve AUC. Reverting changes.
Training on augumented user 37609 5/50 current_auc = 0.8846153846153847
User 37609 AUC after training: 0.8846153846153847
User 37609 does not improve AUC. Reverting changes.
Training on augumented user 128596 6/50 current_auc = 0.8846153846153847
User 128596 AUC after training: 0.8846153846153847
User 128596 does not improve AUC. Reverting changes.
Training on augumented user 107460 7/50 current_auc = 0.8846153846153847
User 107460 AUC after training: 0.8791208791208792
User 107460 does not improve AUC. Reverting changes.
Training on augumented user 111681 8/50 current_auc = 0.8846153846153847
User 111681 AUC after training: 0.8846153846153847
User 111681 does not improve AUC. Reverting changes.
Training on augumented user 69277 9/50 current_auc = 0.8846153846153847
User 69277 AUC after training: 0.8846153846153847
User 69277 does not improve AUC. Reverting changes.
Training on augumented user 127111 10/50 current_auc = 0.8846153846153847
User 127111 AUC after training: 0.8846153846153847
User 127111 does not improve AUC. Reverting changes.
Training on augumented user 123016 11/50 current_auc = 0.8846153846153847
User 123016 AUC after training: 0.8846153846153847
User 123016 does not improve AUC. Reverting changes.
Training on augumented user 120428 12/50 current_auc = 0.8846153846153847
User 120428 AUC after training: 0.8846153846153847
User 120428 does not improve AUC. Reverting changes.
Training on augumented user 38728 13/50 current_auc = 0.8846153846153847
User 38728 AUC after training: 0.8846153846153847
User 38728 does not improve AUC. Reverting changes.
Training on augumented user 111260 14/50 current_auc = 0.8846153846153847
User 111260 AUC after training: 0.8846153846153847
User 111260 does not improve AUC. Reverting changes.
Training on augumented user 14388 15/50 current_auc = 0.8846153846153847
User 14388 AUC after training: 0.8846153846153847
User 14388 does not improve AUC. Reverting changes.
Training on augumented user 97999 16/50 current_auc = 0.8846153846153847
User 97999 AUC after training: 0.8846153846153847
User 97999 does not improve AUC. Reverting changes.
Training on augumented user 40112 17/50 current_auc = 0.8846153846153847
User 40112 AUC after training: 0.8846153846153847
User 40112 does not improve AUC. Reverting changes.
Training on augumented user 74463 18/50 current_auc = 0.8846153846153847
User 74463 AUC after training: 0.8846153846153847
User 74463 does not improve AUC. Reverting changes.
Training on augumented user 110309 19/50 current_auc = 0.8846153846153847
User 110309 AUC after training: 0.8846153846153847
User 110309 does not improve AUC. Reverting changes.
Training on augumented user 17658 20/50 current_auc = 0.8846153846153847
User 17658 AUC after training: 0.8846153846153847
User 17658 does not improve AUC. Reverting changes.
Training on augumented user 105877 21/50 current_auc = 0.8846153846153847
User 105877 AUC after training: 0.8846153846153847
User 105877 does not improve AUC. Reverting changes.
Training on augumented user 23160 22/50 current_auc = 0.8846153846153847
User 23160 AUC after training: 0.8846153846153847
User 23160 does not improve AUC. Reverting changes.
Training on augumented user 103987 23/50 current_auc = 0.8846153846153847
User 103987 AUC after training: 0.8846153846153847
User 103987 does not improve AUC. Reverting changes.
Training on augumented user 96592 24/50 current_auc = 0.8846153846153847
User 96592 AUC after training: 0.8846153846153847
User 96592 does not improve AUC. Reverting changes.
Training on augumented user 47126 25/50 current_auc = 0.8846153846153847
User 47126 AUC after training: 0.8846153846153847
User 47126 does not improve AUC. Reverting changes.
Training on augumented user 115714 26/50 current_auc = 0.8846153846153847
User 115714 AUC after training: 0.8846153846153847
User 115714 does not improve AUC. Reverting changes.
Training on augumented user 35064 27/50 current_auc = 0.8846153846153847
User 35064 AUC after training: 0.8846153846153847
User 35064 does not improve AUC. Reverting changes.
Training on augumented user 44597 28/50 current_auc = 0.8846153846153847
User 44597 AUC after training: 0.8846153846153847
User 44597 does not improve AUC. Reverting changes.
Training on augumented user 3048 29/50 current_auc = 0.8846153846153847
User 3048 AUC after training: 0.8846153846153847
User 3048 does not improve AUC. Reverting changes.
Training on augumented user 86388 30/50 current_auc = 0.8846153846153847
User 86388 AUC after training: 0.8846153846153847
User 86388 does not improve AUC. Reverting changes.
Training on augumented user 87902 31/50 current_auc = 0.8846153846153847
User 87902 AUC after training: 0.8846153846153847
User 87902 does not improve AUC. Reverting changes.
Training on augumented user 128758 32/50 current_auc = 0.8846153846153847
User 128758 AUC after training: 0.8846153846153847
User 128758 does not improve AUC. Reverting changes.
Training on augumented user 41022 33/50 current_auc = 0.8846153846153847
User 41022 AUC after training: 0.8846153846153847
User 41022 does not improve AUC. Reverting changes.
Training on augumented user 46515 34/50 current_auc = 0.8846153846153847
User 46515 AUC after training: 0.8846153846153847
User 46515 does not improve AUC. Reverting changes.
Training on augumented user 90495 35/50 current_auc = 0.8846153846153847
User 90495 AUC after training: 0.8791208791208792
User 90495 does not improve AUC. Reverting changes.
Training on augumented user 110729 36/50 current_auc = 0.8846153846153847
User 110729 AUC after training: 0.8846153846153847
User 110729 does not improve AUC. Reverting changes.
Training on augumented user 117969 37/50 current_auc = 0.8846153846153847
User 117969 AUC after training: 0.8846153846153847
User 117969 does not improve AUC. Reverting changes.
Training on augumented user 100693 38/50 current_auc = 0.8846153846153847
User 100693 AUC after training: 0.8846153846153847
User 100693 does not improve AUC. Reverting changes.
Training on augumented user 10099 39/50 current_auc = 0.8846153846153847
User 10099 AUC after training: 0.8846153846153847
User 10099 does not improve AUC. Reverting changes.
Training on augumented user 137711 40/50 current_auc = 0.8846153846153847
User 137711 AUC after training: 0.8846153846153847
User 137711 does not improve AUC. Reverting changes.
Training on augumented user 30863 41/50 current_auc = 0.8846153846153847
User 30863 AUC after training: 0.8846153846153847
User 30863 does not improve AUC. Reverting changes.
Training on augumented user 64141 42/50 current_auc = 0.8846153846153847
User 64141 AUC after training: 0.8846153846153847
User 64141 does not improve AUC. Reverting changes.
Training on augumented user 10118 43/50 current_auc = 0.8846153846153847
User 10118 AUC after training: 0.8846153846153847
User 10118 does not improve AUC. Reverting changes.
Training on augumented user 44687 44/50 current_auc = 0.8846153846153847
User 44687 AUC after training: 0.8846153846153847
User 44687 does not improve AUC. Reverting changes.
Training on augumented user 122660 45/50 current_auc = 0.8846153846153847
User 122660 AUC after training: 0.8846153846153847
User 122660 does not improve AUC. Reverting changes.
Training on augumented user 116227 46/50 current_auc = 0.8846153846153847
User 116227 AUC after training: 0.8846153846153847
User 116227 does not improve AUC. Reverting changes.
Training on augumented user 136719 47/50 current_auc = 0.8846153846153847
User 136719 AUC after training: 0.8846153846153847
User 136719 does not improve AUC. Reverting changes.
Training on augumented user 89436 48/50 current_auc = 0.8846153846153847
User 89436 AUC after training: 0.8791208791208792
User 89436 does not improve AUC. Reverting changes.
Training on augumented user 115028 49/50 current_auc = 0.8846153846153847
User 115028 AUC after training: 0.8846153846153847
User 115028 does not improve AUC. Reverting changes.
[2024-12-02 19:53:35.705616] start test user 5643 249/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:53:36.209788] start test user 5643 249/568 recall augumented users by random, augumented_users = [65804, 105262, 13964, 69294, 50492, 44570, 116341, 41970, 125997, 124208, 14086, 109743, 128451, 3097, 133591, 100796, 4501, 36539, 27390, 108195, 118102, 2045, 99532, 16364, 80296, 6208, 39126, 131397, 5645, 134680, 84360, 130280, 59867, 80070, 30677, 119089, 111749, 18633, 106655, 71570, 10282, 82774, 23792, 71825, 42167, 77311, 81714, 77180, 7300, 45582]
[2024-12-02 19:53:36.224817] user = 5643 Cloud 249/568
[2024-12-02 19:53:36.258110] user = 5643 Local 249/568
[2024-12-02 19:53:36.324277] user = 5643 Local+ 249/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:53:38.776690] user = 5643 MPDA- 249/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5704761904761905
Training on augumented user 65804 0/50 current_auc = 0.5704761904761905
User 65804 AUC after training: 0.5704761904761905
User 65804 does not improve AUC. Reverting changes.
Training on augumented user 105262 1/50 current_auc = 0.5704761904761905
User 105262 AUC after training: 0.5714285714285714
User 105262 improves AUC. Keeping the model.
Training on augumented user 13964 2/50 current_auc = 0.5714285714285714
User 13964 AUC after training: 0.5733333333333334
User 13964 improves AUC. Keeping the model.
Training on augumented user 69294 3/50 current_auc = 0.5733333333333334
User 69294 AUC after training: 0.5704761904761905
User 69294 does not improve AUC. Reverting changes.
Training on augumented user 50492 4/50 current_auc = 0.5733333333333334
User 50492 AUC after training: 0.5733333333333333
User 50492 does not improve AUC. Reverting changes.
Training on augumented user 44570 5/50 current_auc = 0.5733333333333334
User 44570 AUC after training: 0.5733333333333333
User 44570 does not improve AUC. Reverting changes.
Training on augumented user 116341 6/50 current_auc = 0.5733333333333334
User 116341 AUC after training: 0.5733333333333333
User 116341 does not improve AUC. Reverting changes.
Training on augumented user 41970 7/50 current_auc = 0.5733333333333334
User 41970 AUC after training: 0.5733333333333334
User 41970 does not improve AUC. Reverting changes.
Training on augumented user 125997 8/50 current_auc = 0.5733333333333334
User 125997 AUC after training: 0.5752380952380953
User 125997 improves AUC. Keeping the model.
Training on augumented user 124208 9/50 current_auc = 0.5752380952380953
User 124208 AUC after training: 0.5742857142857143
User 124208 does not improve AUC. Reverting changes.
Training on augumented user 14086 10/50 current_auc = 0.5752380952380953
User 14086 AUC after training: 0.5742857142857143
User 14086 does not improve AUC. Reverting changes.
Training on augumented user 109743 11/50 current_auc = 0.5752380952380953
User 109743 AUC after training: 0.5742857142857143
User 109743 does not improve AUC. Reverting changes.
Training on augumented user 128451 12/50 current_auc = 0.5752380952380953
User 128451 AUC after training: 0.5714285714285714
User 128451 does not improve AUC. Reverting changes.
Training on augumented user 3097 13/50 current_auc = 0.5752380952380953
User 3097 AUC after training: 0.5742857142857143
User 3097 does not improve AUC. Reverting changes.
Training on augumented user 133591 14/50 current_auc = 0.5752380952380953
User 133591 AUC after training: 0.5752380952380952
User 133591 does not improve AUC. Reverting changes.
Training on augumented user 100796 15/50 current_auc = 0.5752380952380953
User 100796 AUC after training: 0.5752380952380953
User 100796 does not improve AUC. Reverting changes.
Training on augumented user 4501 16/50 current_auc = 0.5752380952380953
User 4501 AUC after training: 0.5723809523809523
User 4501 does not improve AUC. Reverting changes.
Training on augumented user 36539 17/50 current_auc = 0.5752380952380953
User 36539 AUC after training: 0.5742857142857143
User 36539 does not improve AUC. Reverting changes.
Training on augumented user 27390 18/50 current_auc = 0.5752380952380953
User 27390 AUC after training: 0.5752380952380953
User 27390 does not improve AUC. Reverting changes.
Training on augumented user 108195 19/50 current_auc = 0.5752380952380953
User 108195 AUC after training: 0.5714285714285714
User 108195 does not improve AUC. Reverting changes.
Training on augumented user 118102 20/50 current_auc = 0.5752380952380953
User 118102 AUC after training: 0.5752380952380953
User 118102 does not improve AUC. Reverting changes.
Training on augumented user 2045 21/50 current_auc = 0.5752380952380953
User 2045 AUC after training: 0.5752380952380953
User 2045 does not improve AUC. Reverting changes.
Training on augumented user 99532 22/50 current_auc = 0.5752380952380953
User 99532 AUC after training: 0.5752380952380953
User 99532 does not improve AUC. Reverting changes.
Training on augumented user 16364 23/50 current_auc = 0.5752380952380953
User 16364 AUC after training: 0.5742857142857143
User 16364 does not improve AUC. Reverting changes.
Training on augumented user 80296 24/50 current_auc = 0.5752380952380953
User 80296 AUC after training: 0.5752380952380953
User 80296 does not improve AUC. Reverting changes.
Training on augumented user 6208 25/50 current_auc = 0.5752380952380953
User 6208 AUC after training: 0.5752380952380953
User 6208 does not improve AUC. Reverting changes.
Training on augumented user 39126 26/50 current_auc = 0.5752380952380953
User 39126 AUC after training: 0.5752380952380953
User 39126 does not improve AUC. Reverting changes.
Training on augumented user 131397 27/50 current_auc = 0.5752380952380953
User 131397 AUC after training: 0.5733333333333333
User 131397 does not improve AUC. Reverting changes.
Training on augumented user 5645 28/50 current_auc = 0.5752380952380953
User 5645 AUC after training: 0.5742857142857143
User 5645 does not improve AUC. Reverting changes.
Training on augumented user 134680 29/50 current_auc = 0.5752380952380953
User 134680 AUC after training: 0.5733333333333333
User 134680 does not improve AUC. Reverting changes.
Training on augumented user 84360 30/50 current_auc = 0.5752380952380953
User 84360 AUC after training: 0.5733333333333334
User 84360 does not improve AUC. Reverting changes.
Training on augumented user 130280 31/50 current_auc = 0.5752380952380953
User 130280 AUC after training: 0.5733333333333333
User 130280 does not improve AUC. Reverting changes.
Training on augumented user 59867 32/50 current_auc = 0.5752380952380953
User 59867 AUC after training: 0.5733333333333334
User 59867 does not improve AUC. Reverting changes.
Training on augumented user 80070 33/50 current_auc = 0.5752380952380953
User 80070 AUC after training: 0.5742857142857143
User 80070 does not improve AUC. Reverting changes.
Training on augumented user 30677 34/50 current_auc = 0.5752380952380953
User 30677 AUC after training: 0.5752380952380953
User 30677 does not improve AUC. Reverting changes.
Training on augumented user 119089 35/50 current_auc = 0.5752380952380953
User 119089 AUC after training: 0.5742857142857143
User 119089 does not improve AUC. Reverting changes.
Training on augumented user 111749 36/50 current_auc = 0.5752380952380953
User 111749 AUC after training: 0.5752380952380953
User 111749 does not improve AUC. Reverting changes.
Training on augumented user 18633 37/50 current_auc = 0.5752380952380953
User 18633 AUC after training: 0.5752380952380953
User 18633 does not improve AUC. Reverting changes.
Training on augumented user 106655 38/50 current_auc = 0.5752380952380953
User 106655 AUC after training: 0.5723809523809524
User 106655 does not improve AUC. Reverting changes.
Training on augumented user 71570 39/50 current_auc = 0.5752380952380953
User 71570 AUC after training: 0.5742857142857143
User 71570 does not improve AUC. Reverting changes.
Training on augumented user 10282 40/50 current_auc = 0.5752380952380953
User 10282 AUC after training: 0.5752380952380953
User 10282 does not improve AUC. Reverting changes.
Training on augumented user 82774 41/50 current_auc = 0.5752380952380953
User 82774 AUC after training: 0.5733333333333333
User 82774 does not improve AUC. Reverting changes.
Training on augumented user 23792 42/50 current_auc = 0.5752380952380953
User 23792 AUC after training: 0.5752380952380953
User 23792 does not improve AUC. Reverting changes.
Training on augumented user 71825 43/50 current_auc = 0.5752380952380953
User 71825 AUC after training: 0.5723809523809523
User 71825 does not improve AUC. Reverting changes.
Training on augumented user 42167 44/50 current_auc = 0.5752380952380953
User 42167 AUC after training: 0.5742857142857143
User 42167 does not improve AUC. Reverting changes.
Training on augumented user 77311 45/50 current_auc = 0.5752380952380953
User 77311 AUC after training: 0.5714285714285714
User 77311 does not improve AUC. Reverting changes.
Training on augumented user 81714 46/50 current_auc = 0.5752380952380953
User 81714 AUC after training: 0.5752380952380953
User 81714 does not improve AUC. Reverting changes.
Training on augumented user 77180 47/50 current_auc = 0.5752380952380953
User 77180 AUC after training: 0.5752380952380953
User 77180 does not improve AUC. Reverting changes.
Training on augumented user 7300 48/50 current_auc = 0.5752380952380953
User 7300 AUC after training: 0.5752380952380953
User 7300 does not improve AUC. Reverting changes.
Training on augumented user 45582 49/50 current_auc = 0.5752380952380953
User 45582 AUC after training: 0.5752380952380953
User 45582 does not improve AUC. Reverting changes.
[2024-12-02 19:54:06.692198] start test user 5655 250/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:54:07.141205] start test user 5655 250/568 recall augumented users by random, augumented_users = [41862, 85827, 45413, 34006, 67547, 107995, 10085, 88163, 46098, 93341, 114885, 19171, 129197, 47678, 51723, 134325, 100978, 23876, 83248, 12200, 8648, 99823, 57632, 32465, 32319, 5400, 25833, 88341, 50831, 39980, 5104, 73137, 20523, 130597, 107382, 18705, 104761, 2836, 97851, 18955, 14283, 15624, 68838, 119501, 12138, 60009, 98957, 91193, 23378, 41652]
[2024-12-02 19:54:07.155726] user = 5655 Cloud 250/568
[2024-12-02 19:54:07.165365] user = 5655 Local 250/568
[2024-12-02 19:54:07.192322] user = 5655 Local+ 250/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:54:09.127597] user = 5655 MPDA- 250/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6374269005847953
Training on augumented user 41862 0/50 current_auc = 0.6374269005847953
User 41862 AUC after training: 0.6432748538011696
User 41862 improves AUC. Keeping the model.
Training on augumented user 85827 1/50 current_auc = 0.6432748538011696
User 85827 AUC after training: 0.631578947368421
User 85827 does not improve AUC. Reverting changes.
Training on augumented user 45413 2/50 current_auc = 0.6432748538011696
User 45413 AUC after training: 0.6432748538011696
User 45413 does not improve AUC. Reverting changes.
Training on augumented user 34006 3/50 current_auc = 0.6432748538011696
User 34006 AUC after training: 0.6374269005847953
User 34006 does not improve AUC. Reverting changes.
Training on augumented user 67547 4/50 current_auc = 0.6432748538011696
User 67547 AUC after training: 0.6374269005847953
User 67547 does not improve AUC. Reverting changes.
Training on augumented user 107995 5/50 current_auc = 0.6432748538011696
User 107995 AUC after training: 0.631578947368421
User 107995 does not improve AUC. Reverting changes.
Training on augumented user 10085 6/50 current_auc = 0.6432748538011696
User 10085 AUC after training: 0.6432748538011696
User 10085 does not improve AUC. Reverting changes.
Training on augumented user 88163 7/50 current_auc = 0.6432748538011696
User 88163 AUC after training: 0.631578947368421
User 88163 does not improve AUC. Reverting changes.
Training on augumented user 46098 8/50 current_auc = 0.6432748538011696
User 46098 AUC after training: 0.631578947368421
User 46098 does not improve AUC. Reverting changes.
Training on augumented user 93341 9/50 current_auc = 0.6432748538011696
User 93341 AUC after training: 0.6374269005847953
User 93341 does not improve AUC. Reverting changes.
Training on augumented user 114885 10/50 current_auc = 0.6432748538011696
User 114885 AUC after training: 0.631578947368421
User 114885 does not improve AUC. Reverting changes.
Training on augumented user 19171 11/50 current_auc = 0.6432748538011696
User 19171 AUC after training: 0.6257309941520468
User 19171 does not improve AUC. Reverting changes.
Training on augumented user 129197 12/50 current_auc = 0.6432748538011696
User 129197 AUC after training: 0.6432748538011696
User 129197 does not improve AUC. Reverting changes.
Training on augumented user 47678 13/50 current_auc = 0.6432748538011696
User 47678 AUC after training: 0.631578947368421
User 47678 does not improve AUC. Reverting changes.
Training on augumented user 51723 14/50 current_auc = 0.6432748538011696
User 51723 AUC after training: 0.6374269005847953
User 51723 does not improve AUC. Reverting changes.
Training on augumented user 134325 15/50 current_auc = 0.6432748538011696
User 134325 AUC after training: 0.631578947368421
User 134325 does not improve AUC. Reverting changes.
Training on augumented user 100978 16/50 current_auc = 0.6432748538011696
User 100978 AUC after training: 0.631578947368421
User 100978 does not improve AUC. Reverting changes.
Training on augumented user 23876 17/50 current_auc = 0.6432748538011696
User 23876 AUC after training: 0.6374269005847953
User 23876 does not improve AUC. Reverting changes.
Training on augumented user 83248 18/50 current_auc = 0.6432748538011696
User 83248 AUC after training: 0.6432748538011696
User 83248 does not improve AUC. Reverting changes.
Training on augumented user 12200 19/50 current_auc = 0.6432748538011696
User 12200 AUC after training: 0.631578947368421
User 12200 does not improve AUC. Reverting changes.
Training on augumented user 8648 20/50 current_auc = 0.6432748538011696
User 8648 AUC after training: 0.6432748538011696
User 8648 does not improve AUC. Reverting changes.
Training on augumented user 99823 21/50 current_auc = 0.6432748538011696
User 99823 AUC after training: 0.6374269005847953
User 99823 does not improve AUC. Reverting changes.
Training on augumented user 57632 22/50 current_auc = 0.6432748538011696
User 57632 AUC after training: 0.6374269005847953
User 57632 does not improve AUC. Reverting changes.
Training on augumented user 32465 23/50 current_auc = 0.6432748538011696
User 32465 AUC after training: 0.6374269005847953
User 32465 does not improve AUC. Reverting changes.
Training on augumented user 32319 24/50 current_auc = 0.6432748538011696
User 32319 AUC after training: 0.6257309941520468
User 32319 does not improve AUC. Reverting changes.
Training on augumented user 5400 25/50 current_auc = 0.6432748538011696
User 5400 AUC after training: 0.6374269005847953
User 5400 does not improve AUC. Reverting changes.
Training on augumented user 25833 26/50 current_auc = 0.6432748538011696
User 25833 AUC after training: 0.6257309941520468
User 25833 does not improve AUC. Reverting changes.
Training on augumented user 88341 27/50 current_auc = 0.6432748538011696
User 88341 AUC after training: 0.6374269005847953
User 88341 does not improve AUC. Reverting changes.
Training on augumented user 50831 28/50 current_auc = 0.6432748538011696
User 50831 AUC after training: 0.6374269005847953
User 50831 does not improve AUC. Reverting changes.
Training on augumented user 39980 29/50 current_auc = 0.6432748538011696
User 39980 AUC after training: 0.6432748538011696
User 39980 does not improve AUC. Reverting changes.
Training on augumented user 5104 30/50 current_auc = 0.6432748538011696
User 5104 AUC after training: 0.631578947368421
User 5104 does not improve AUC. Reverting changes.
Training on augumented user 73137 31/50 current_auc = 0.6432748538011696
User 73137 AUC after training: 0.6315789473684211
User 73137 does not improve AUC. Reverting changes.
Training on augumented user 20523 32/50 current_auc = 0.6432748538011696
User 20523 AUC after training: 0.631578947368421
User 20523 does not improve AUC. Reverting changes.
Training on augumented user 130597 33/50 current_auc = 0.6432748538011696
User 130597 AUC after training: 0.6432748538011696
User 130597 does not improve AUC. Reverting changes.
Training on augumented user 107382 34/50 current_auc = 0.6432748538011696
User 107382 AUC after training: 0.631578947368421
User 107382 does not improve AUC. Reverting changes.
Training on augumented user 18705 35/50 current_auc = 0.6432748538011696
User 18705 AUC after training: 0.6374269005847953
User 18705 does not improve AUC. Reverting changes.
Training on augumented user 104761 36/50 current_auc = 0.6432748538011696
User 104761 AUC after training: 0.6374269005847953
User 104761 does not improve AUC. Reverting changes.
Training on augumented user 2836 37/50 current_auc = 0.6432748538011696
User 2836 AUC after training: 0.6374269005847953
User 2836 does not improve AUC. Reverting changes.
Training on augumented user 97851 38/50 current_auc = 0.6432748538011696
User 97851 AUC after training: 0.631578947368421
User 97851 does not improve AUC. Reverting changes.
Training on augumented user 18955 39/50 current_auc = 0.6432748538011696
User 18955 AUC after training: 0.6432748538011696
User 18955 does not improve AUC. Reverting changes.
Training on augumented user 14283 40/50 current_auc = 0.6432748538011696
User 14283 AUC after training: 0.6374269005847953
User 14283 does not improve AUC. Reverting changes.
Training on augumented user 15624 41/50 current_auc = 0.6432748538011696
User 15624 AUC after training: 0.6374269005847953
User 15624 does not improve AUC. Reverting changes.
Training on augumented user 68838 42/50 current_auc = 0.6432748538011696
User 68838 AUC after training: 0.6374269005847953
User 68838 does not improve AUC. Reverting changes.
Training on augumented user 119501 43/50 current_auc = 0.6432748538011696
User 119501 AUC after training: 0.631578947368421
User 119501 does not improve AUC. Reverting changes.
Training on augumented user 12138 44/50 current_auc = 0.6432748538011696
User 12138 AUC after training: 0.6257309941520468
User 12138 does not improve AUC. Reverting changes.
Training on augumented user 60009 45/50 current_auc = 0.6432748538011696
User 60009 AUC after training: 0.6374269005847953
User 60009 does not improve AUC. Reverting changes.
Training on augumented user 98957 46/50 current_auc = 0.6432748538011696
User 98957 AUC after training: 0.631578947368421
User 98957 does not improve AUC. Reverting changes.
Training on augumented user 91193 47/50 current_auc = 0.6432748538011696
User 91193 AUC after training: 0.631578947368421
User 91193 does not improve AUC. Reverting changes.
Training on augumented user 23378 48/50 current_auc = 0.6432748538011696
User 23378 AUC after training: 0.6374269005847953
User 23378 does not improve AUC. Reverting changes.
Training on augumented user 41652 49/50 current_auc = 0.6432748538011696
User 41652 AUC after training: 0.6432748538011696
User 41652 does not improve AUC. Reverting changes.
[2024-12-02 19:54:35.225197] start test user 5665 251/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:54:35.621250] start test user 5665 251/568 recall augumented users by random, augumented_users = [106952, 64713, 94228, 12076, 10393, 131910, 19331, 44474, 45300, 81735, 2746, 42498, 104896, 12691, 22082, 79143, 128665, 22981, 84816, 30801, 119415, 92493, 125282, 17018, 55663, 41599, 116530, 91747, 97774, 48281, 39508, 12323, 115408, 29753, 126448, 11687, 74684, 32843, 42356, 116502, 98664, 84834, 109896, 77388, 12721, 39541, 62535, 14470, 119933, 129272]
[2024-12-02 19:54:35.636641] user = 5665 Cloud 251/568
[2024-12-02 19:54:35.646263] user = 5665 Local 251/568
[2024-12-02 19:54:35.666341] user = 5665 Local+ 251/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:54:37.999728] user = 5665 MPDA- 251/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5555555555555556
Training on augumented user 106952 0/50 current_auc = 0.5555555555555556
User 106952 AUC after training: 0.5555555555555556
User 106952 does not improve AUC. Reverting changes.
Training on augumented user 64713 1/50 current_auc = 0.5555555555555556
User 64713 AUC after training: 0.6666666666666667
User 64713 improves AUC. Keeping the model.
Training on augumented user 94228 2/50 current_auc = 0.6666666666666667
User 94228 AUC after training: 0.6111111111111112
User 94228 does not improve AUC. Reverting changes.
Training on augumented user 12076 3/50 current_auc = 0.6666666666666667
User 12076 AUC after training: 0.6666666666666667
User 12076 does not improve AUC. Reverting changes.
Training on augumented user 10393 4/50 current_auc = 0.6666666666666667
User 10393 AUC after training: 0.5
User 10393 does not improve AUC. Reverting changes.
Training on augumented user 131910 5/50 current_auc = 0.6666666666666667
User 131910 AUC after training: 0.6111111111111112
User 131910 does not improve AUC. Reverting changes.
Training on augumented user 19331 6/50 current_auc = 0.6666666666666667
User 19331 AUC after training: 0.6111111111111112
User 19331 does not improve AUC. Reverting changes.
Training on augumented user 44474 7/50 current_auc = 0.6666666666666667
User 44474 AUC after training: 0.6666666666666667
User 44474 does not improve AUC. Reverting changes.
Training on augumented user 45300 8/50 current_auc = 0.6666666666666667
User 45300 AUC after training: 0.5555555555555556
User 45300 does not improve AUC. Reverting changes.
Training on augumented user 81735 9/50 current_auc = 0.6666666666666667
User 81735 AUC after training: 0.5555555555555556
User 81735 does not improve AUC. Reverting changes.
Training on augumented user 2746 10/50 current_auc = 0.6666666666666667
User 2746 AUC after training: 0.6111111111111112
User 2746 does not improve AUC. Reverting changes.
Training on augumented user 42498 11/50 current_auc = 0.6666666666666667
User 42498 AUC after training: 0.6111111111111112
User 42498 does not improve AUC. Reverting changes.
Training on augumented user 104896 12/50 current_auc = 0.6666666666666667
User 104896 AUC after training: 0.6666666666666667
User 104896 does not improve AUC. Reverting changes.
Training on augumented user 12691 13/50 current_auc = 0.6666666666666667
User 12691 AUC after training: 0.6111111111111112
User 12691 does not improve AUC. Reverting changes.
Training on augumented user 22082 14/50 current_auc = 0.6666666666666667
User 22082 AUC after training: 0.6111111111111112
User 22082 does not improve AUC. Reverting changes.
Training on augumented user 79143 15/50 current_auc = 0.6666666666666667
User 79143 AUC after training: 0.5
User 79143 does not improve AUC. Reverting changes.
Training on augumented user 128665 16/50 current_auc = 0.6666666666666667
User 128665 AUC after training: 0.6666666666666667
User 128665 does not improve AUC. Reverting changes.
Training on augumented user 22981 17/50 current_auc = 0.6666666666666667
User 22981 AUC after training: 0.5
User 22981 does not improve AUC. Reverting changes.
Training on augumented user 84816 18/50 current_auc = 0.6666666666666667
User 84816 AUC after training: 0.6666666666666667
User 84816 does not improve AUC. Reverting changes.
Training on augumented user 30801 19/50 current_auc = 0.6666666666666667
User 30801 AUC after training: 0.6666666666666667
User 30801 does not improve AUC. Reverting changes.
Training on augumented user 119415 20/50 current_auc = 0.6666666666666667
User 119415 AUC after training: 0.6111111111111112
User 119415 does not improve AUC. Reverting changes.
Training on augumented user 92493 21/50 current_auc = 0.6666666666666667
User 92493 AUC after training: 0.5555555555555556
User 92493 does not improve AUC. Reverting changes.
Training on augumented user 125282 22/50 current_auc = 0.6666666666666667
User 125282 AUC after training: 0.5555555555555556
User 125282 does not improve AUC. Reverting changes.
Training on augumented user 17018 23/50 current_auc = 0.6666666666666667
User 17018 AUC after training: 0.5555555555555556
User 17018 does not improve AUC. Reverting changes.
Training on augumented user 55663 24/50 current_auc = 0.6666666666666667
User 55663 AUC after training: 0.5
User 55663 does not improve AUC. Reverting changes.
Training on augumented user 41599 25/50 current_auc = 0.6666666666666667
User 41599 AUC after training: 0.6666666666666667
User 41599 does not improve AUC. Reverting changes.
Training on augumented user 116530 26/50 current_auc = 0.6666666666666667
User 116530 AUC after training: 0.6666666666666667
User 116530 does not improve AUC. Reverting changes.
Training on augumented user 91747 27/50 current_auc = 0.6666666666666667
User 91747 AUC after training: 0.6111111111111112
User 91747 does not improve AUC. Reverting changes.
Training on augumented user 97774 28/50 current_auc = 0.6666666666666667
User 97774 AUC after training: 0.5555555555555556
User 97774 does not improve AUC. Reverting changes.
Training on augumented user 48281 29/50 current_auc = 0.6666666666666667
User 48281 AUC after training: 0.6666666666666667
User 48281 does not improve AUC. Reverting changes.
Training on augumented user 39508 30/50 current_auc = 0.6666666666666667
User 39508 AUC after training: 0.6111111111111112
User 39508 does not improve AUC. Reverting changes.
Training on augumented user 12323 31/50 current_auc = 0.6666666666666667
User 12323 AUC after training: 0.6666666666666667
User 12323 does not improve AUC. Reverting changes.
Training on augumented user 115408 32/50 current_auc = 0.6666666666666667
User 115408 AUC after training: 0.6666666666666667
User 115408 does not improve AUC. Reverting changes.
Training on augumented user 29753 33/50 current_auc = 0.6666666666666667
User 29753 AUC after training: 0.7777777777777779
User 29753 improves AUC. Keeping the model.
Training on augumented user 126448 34/50 current_auc = 0.7777777777777779
User 126448 AUC after training: 0.5555555555555556
User 126448 does not improve AUC. Reverting changes.
Training on augumented user 11687 35/50 current_auc = 0.7777777777777779
User 11687 AUC after training: 0.5555555555555556
User 11687 does not improve AUC. Reverting changes.
Training on augumented user 74684 36/50 current_auc = 0.7777777777777779
User 74684 AUC after training: 0.6666666666666667
User 74684 does not improve AUC. Reverting changes.
Training on augumented user 32843 37/50 current_auc = 0.7777777777777779
User 32843 AUC after training: 0.6666666666666667
User 32843 does not improve AUC. Reverting changes.
Training on augumented user 42356 38/50 current_auc = 0.7777777777777779
User 42356 AUC after training: 0.6666666666666667
User 42356 does not improve AUC. Reverting changes.
Training on augumented user 116502 39/50 current_auc = 0.7777777777777779
User 116502 AUC after training: 0.6666666666666667
User 116502 does not improve AUC. Reverting changes.
Training on augumented user 98664 40/50 current_auc = 0.7777777777777779
User 98664 AUC after training: 0.7777777777777779
User 98664 does not improve AUC. Reverting changes.
Training on augumented user 84834 41/50 current_auc = 0.7777777777777779
User 84834 AUC after training: 0.7777777777777779
User 84834 does not improve AUC. Reverting changes.
Training on augumented user 109896 42/50 current_auc = 0.7777777777777779
User 109896 AUC after training: 0.6666666666666667
User 109896 does not improve AUC. Reverting changes.
Training on augumented user 77388 43/50 current_auc = 0.7777777777777779
User 77388 AUC after training: 0.6666666666666667
User 77388 does not improve AUC. Reverting changes.
Training on augumented user 12721 44/50 current_auc = 0.7777777777777779
User 12721 AUC after training: 0.6666666666666667
User 12721 does not improve AUC. Reverting changes.
Training on augumented user 39541 45/50 current_auc = 0.7777777777777779
User 39541 AUC after training: 0.6666666666666667
User 39541 does not improve AUC. Reverting changes.
Training on augumented user 62535 46/50 current_auc = 0.7777777777777779
User 62535 AUC after training: 0.6666666666666667
User 62535 does not improve AUC. Reverting changes.
Training on augumented user 14470 47/50 current_auc = 0.7777777777777779
User 14470 AUC after training: 0.6666666666666667
User 14470 does not improve AUC. Reverting changes.
Training on augumented user 119933 48/50 current_auc = 0.7777777777777779
User 119933 AUC after training: 0.7777777777777779
User 119933 does not improve AUC. Reverting changes.
Training on augumented user 129272 49/50 current_auc = 0.7777777777777779
User 129272 AUC after training: 0.6666666666666667
User 129272 does not improve AUC. Reverting changes.
[2024-12-02 19:55:04.400667] start test user 5691 252/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:55:05.114358] start test user 5691 252/568 recall augumented users by random, augumented_users = [125595, 46470, 92208, 84748, 21523, 55871, 7413, 67109, 15851, 26420, 130077, 121170, 87577, 135392, 79393, 46721, 68728, 137559, 64779, 126263, 26618, 18034, 32757, 37743, 98965, 73064, 74050, 114530, 102892, 130219, 124565, 1299, 63313, 121887, 89309, 97571, 62933, 616, 111816, 55857, 70864, 18718, 36898, 51859, 120693, 59642, 66099, 106216, 32221, 56911]
[2024-12-02 19:55:05.135570] user = 5691 Cloud 252/568
[2024-12-02 19:55:05.163022] user = 5691 Local 252/568
[2024-12-02 19:55:05.277255] user = 5691 Local+ 252/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:55:08.027472] user = 5691 MPDA- 252/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5782268578878749
Training on augumented user 125595 0/50 current_auc = 0.5782268578878749
User 125595 AUC after training: 0.5788787483702738
User 125595 improves AUC. Keeping the model.
Training on augumented user 46470 1/50 current_auc = 0.5788787483702738
User 46470 AUC after training: 0.5736636245110821
User 46470 does not improve AUC. Reverting changes.
Training on augumented user 92208 2/50 current_auc = 0.5788787483702738
User 92208 AUC after training: 0.5827900912646675
User 92208 improves AUC. Keeping the model.
Training on augumented user 84748 3/50 current_auc = 0.5827900912646675
User 84748 AUC after training: 0.5821382007822686
User 84748 does not improve AUC. Reverting changes.
Training on augumented user 21523 4/50 current_auc = 0.5827900912646675
User 21523 AUC after training: 0.5814863102998696
User 21523 does not improve AUC. Reverting changes.
Training on augumented user 55871 5/50 current_auc = 0.5827900912646675
User 55871 AUC after training: 0.5821382007822686
User 55871 does not improve AUC. Reverting changes.
Training on augumented user 7413 6/50 current_auc = 0.5827900912646675
User 7413 AUC after training: 0.5827900912646675
User 7413 does not improve AUC. Reverting changes.
Training on augumented user 67109 7/50 current_auc = 0.5827900912646675
User 67109 AUC after training: 0.5834419817470664
User 67109 improves AUC. Keeping the model.
Training on augumented user 15851 8/50 current_auc = 0.5834419817470664
User 15851 AUC after training: 0.5834419817470664
User 15851 does not improve AUC. Reverting changes.
Training on augumented user 26420 9/50 current_auc = 0.5834419817470664
User 26420 AUC after training: 0.5834419817470664
User 26420 does not improve AUC. Reverting changes.
Training on augumented user 130077 10/50 current_auc = 0.5834419817470664
User 130077 AUC after training: 0.5834419817470664
User 130077 does not improve AUC. Reverting changes.
Training on augumented user 121170 11/50 current_auc = 0.5834419817470664
User 121170 AUC after training: 0.5834419817470664
User 121170 does not improve AUC. Reverting changes.
Training on augumented user 87577 12/50 current_auc = 0.5834419817470664
User 87577 AUC after training: 0.5847457627118644
User 87577 improves AUC. Keeping the model.
Training on augumented user 135392 13/50 current_auc = 0.5847457627118644
User 135392 AUC after training: 0.5847457627118644
User 135392 does not improve AUC. Reverting changes.
Training on augumented user 79393 14/50 current_auc = 0.5847457627118644
User 79393 AUC after training: 0.5782268578878749
User 79393 does not improve AUC. Reverting changes.
Training on augumented user 46721 15/50 current_auc = 0.5847457627118644
User 46721 AUC after training: 0.5860495436766624
User 46721 improves AUC. Keeping the model.
Training on augumented user 68728 16/50 current_auc = 0.5860495436766624
User 68728 AUC after training: 0.5867014341590613
User 68728 improves AUC. Keeping the model.
Training on augumented user 137559 17/50 current_auc = 0.5867014341590613
User 137559 AUC after training: 0.5880052151238592
User 137559 improves AUC. Keeping the model.
Training on augumented user 64779 18/50 current_auc = 0.5880052151238592
User 64779 AUC after training: 0.5840938722294655
User 64779 does not improve AUC. Reverting changes.
Training on augumented user 126263 19/50 current_auc = 0.5880052151238592
User 126263 AUC after training: 0.5880052151238592
User 126263 does not improve AUC. Reverting changes.
Training on augumented user 26618 20/50 current_auc = 0.5880052151238592
User 26618 AUC after training: 0.5880052151238592
User 26618 does not improve AUC. Reverting changes.
Training on augumented user 18034 21/50 current_auc = 0.5880052151238592
User 18034 AUC after training: 0.5880052151238592
User 18034 does not improve AUC. Reverting changes.
Training on augumented user 32757 22/50 current_auc = 0.5880052151238592
User 32757 AUC after training: 0.5886571056062582
User 32757 improves AUC. Keeping the model.
Training on augumented user 37743 23/50 current_auc = 0.5886571056062582
User 37743 AUC after training: 0.5873533246414602
User 37743 does not improve AUC. Reverting changes.
Training on augumented user 98965 24/50 current_auc = 0.5886571056062582
User 98965 AUC after training: 0.5886571056062582
User 98965 does not improve AUC. Reverting changes.
Training on augumented user 73064 25/50 current_auc = 0.5886571056062582
User 73064 AUC after training: 0.5893089960886571
User 73064 improves AUC. Keeping the model.
Training on augumented user 74050 26/50 current_auc = 0.5893089960886571
User 74050 AUC after training: 0.5893089960886571
User 74050 does not improve AUC. Reverting changes.
Training on augumented user 114530 27/50 current_auc = 0.5893089960886571
User 114530 AUC after training: 0.5893089960886571
User 114530 does not improve AUC. Reverting changes.
Training on augumented user 102892 28/50 current_auc = 0.5893089960886571
User 102892 AUC after training: 0.5886571056062582
User 102892 does not improve AUC. Reverting changes.
Training on augumented user 130219 29/50 current_auc = 0.5893089960886571
User 130219 AUC after training: 0.5880052151238593
User 130219 does not improve AUC. Reverting changes.
Training on augumented user 124565 30/50 current_auc = 0.5893089960886571
User 124565 AUC after training: 0.5886571056062582
User 124565 does not improve AUC. Reverting changes.
Training on augumented user 1299 31/50 current_auc = 0.5893089960886571
User 1299 AUC after training: 0.5893089960886571
User 1299 does not improve AUC. Reverting changes.
Training on augumented user 63313 32/50 current_auc = 0.5893089960886571
User 63313 AUC after training: 0.5880052151238592
User 63313 does not improve AUC. Reverting changes.
Training on augumented user 121887 33/50 current_auc = 0.5893089960886571
User 121887 AUC after training: 0.5886571056062582
User 121887 does not improve AUC. Reverting changes.
Training on augumented user 89309 34/50 current_auc = 0.5893089960886571
User 89309 AUC after training: 0.5886571056062582
User 89309 does not improve AUC. Reverting changes.
Training on augumented user 97571 35/50 current_auc = 0.5893089960886571
User 97571 AUC after training: 0.5893089960886572
User 97571 improves AUC. Keeping the model.
Training on augumented user 62933 36/50 current_auc = 0.5893089960886572
User 62933 AUC after training: 0.589960886571056
User 62933 improves AUC. Keeping the model.
Training on augumented user 616 37/50 current_auc = 0.589960886571056
User 616 AUC after training: 0.590612777053455
User 616 improves AUC. Keeping the model.
Training on augumented user 111816 38/50 current_auc = 0.590612777053455
User 111816 AUC after training: 0.589960886571056
User 111816 does not improve AUC. Reverting changes.
Training on augumented user 55857 39/50 current_auc = 0.590612777053455
User 55857 AUC after training: 0.5893089960886572
User 55857 does not improve AUC. Reverting changes.
Training on augumented user 70864 40/50 current_auc = 0.590612777053455
User 70864 AUC after training: 0.590612777053455
User 70864 does not improve AUC. Reverting changes.
Training on augumented user 18718 41/50 current_auc = 0.590612777053455
User 18718 AUC after training: 0.589960886571056
User 18718 does not improve AUC. Reverting changes.
Training on augumented user 36898 42/50 current_auc = 0.590612777053455
User 36898 AUC after training: 0.5886571056062582
User 36898 does not improve AUC. Reverting changes.
Training on augumented user 51859 43/50 current_auc = 0.590612777053455
User 51859 AUC after training: 0.5893089960886571
User 51859 does not improve AUC. Reverting changes.
Training on augumented user 120693 44/50 current_auc = 0.590612777053455
User 120693 AUC after training: 0.5886571056062582
User 120693 does not improve AUC. Reverting changes.
Training on augumented user 59642 45/50 current_auc = 0.590612777053455
User 59642 AUC after training: 0.590612777053455
User 59642 does not improve AUC. Reverting changes.
Training on augumented user 66099 46/50 current_auc = 0.590612777053455
User 66099 AUC after training: 0.5886571056062582
User 66099 does not improve AUC. Reverting changes.
Training on augumented user 106216 47/50 current_auc = 0.590612777053455
User 106216 AUC after training: 0.589960886571056
User 106216 does not improve AUC. Reverting changes.
Training on augumented user 32221 48/50 current_auc = 0.590612777053455
User 32221 AUC after training: 0.5893089960886571
User 32221 does not improve AUC. Reverting changes.
Training on augumented user 56911 49/50 current_auc = 0.590612777053455
User 56911 AUC after training: 0.589960886571056
User 56911 does not improve AUC. Reverting changes.
[2024-12-02 19:55:39.750028] start test user 5693 253/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:55:40.303808] start test user 5693 253/568 recall augumented users by random, augumented_users = [133729, 127709, 79607, 54953, 127907, 95527, 120828, 67244, 43050, 93872, 43218, 5925, 137454, 30886, 41055, 569, 55509, 126140, 13247, 51924, 13915, 125875, 93575, 78633, 119402, 59976, 128784, 94249, 105708, 105072, 36498, 115480, 53654, 76195, 58230, 92688, 29943, 75549, 84413, 18687, 54731, 101538, 134435, 92825, 134978, 50820, 113910, 117750, 15362, 131549]
[2024-12-02 19:55:40.318398] user = 5693 Cloud 253/568
[2024-12-02 19:55:40.333692] user = 5693 Local 253/568
[2024-12-02 19:55:40.352812] user = 5693 Local+ 253/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:55:42.803320] user = 5693 MPDA- 253/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.0625
Training on augumented user 133729 0/50 current_auc = 0.0625
User 133729 AUC after training: 0.0625
User 133729 does not improve AUC. Reverting changes.
Training on augumented user 127709 1/50 current_auc = 0.0625
User 127709 AUC after training: 0.0625
User 127709 does not improve AUC. Reverting changes.
Training on augumented user 79607 2/50 current_auc = 0.0625
User 79607 AUC after training: 0.0625
User 79607 does not improve AUC. Reverting changes.
Training on augumented user 54953 3/50 current_auc = 0.0625
User 54953 AUC after training: 0.0625
User 54953 does not improve AUC. Reverting changes.
Training on augumented user 127907 4/50 current_auc = 0.0625
User 127907 AUC after training: 0.125
User 127907 improves AUC. Keeping the model.
Training on augumented user 95527 5/50 current_auc = 0.125
User 95527 AUC after training: 0.0625
User 95527 does not improve AUC. Reverting changes.
Training on augumented user 120828 6/50 current_auc = 0.125
User 120828 AUC after training: 0.125
User 120828 does not improve AUC. Reverting changes.
Training on augumented user 67244 7/50 current_auc = 0.125
User 67244 AUC after training: 0.0625
User 67244 does not improve AUC. Reverting changes.
Training on augumented user 43050 8/50 current_auc = 0.125
User 43050 AUC after training: 0.0625
User 43050 does not improve AUC. Reverting changes.
Training on augumented user 93872 9/50 current_auc = 0.125
User 93872 AUC after training: 0.125
User 93872 does not improve AUC. Reverting changes.
Training on augumented user 43218 10/50 current_auc = 0.125
User 43218 AUC after training: 0.125
User 43218 does not improve AUC. Reverting changes.
Training on augumented user 5925 11/50 current_auc = 0.125
User 5925 AUC after training: 0.125
User 5925 does not improve AUC. Reverting changes.
Training on augumented user 137454 12/50 current_auc = 0.125
User 137454 AUC after training: 0.0625
User 137454 does not improve AUC. Reverting changes.
Training on augumented user 30886 13/50 current_auc = 0.125
User 30886 AUC after training: 0.0625
User 30886 does not improve AUC. Reverting changes.
Training on augumented user 41055 14/50 current_auc = 0.125
User 41055 AUC after training: 0.0625
User 41055 does not improve AUC. Reverting changes.
Training on augumented user 569 15/50 current_auc = 0.125
User 569 AUC after training: 0.125
User 569 does not improve AUC. Reverting changes.
Training on augumented user 55509 16/50 current_auc = 0.125
User 55509 AUC after training: 0.0625
User 55509 does not improve AUC. Reverting changes.
Training on augumented user 126140 17/50 current_auc = 0.125
User 126140 AUC after training: 0.0625
User 126140 does not improve AUC. Reverting changes.
Training on augumented user 13247 18/50 current_auc = 0.125
User 13247 AUC after training: 0.125
User 13247 does not improve AUC. Reverting changes.
Training on augumented user 51924 19/50 current_auc = 0.125
User 51924 AUC after training: 0.0625
User 51924 does not improve AUC. Reverting changes.
Training on augumented user 13915 20/50 current_auc = 0.125
User 13915 AUC after training: 0.125
User 13915 does not improve AUC. Reverting changes.
Training on augumented user 125875 21/50 current_auc = 0.125
User 125875 AUC after training: 0.125
User 125875 does not improve AUC. Reverting changes.
Training on augumented user 93575 22/50 current_auc = 0.125
User 93575 AUC after training: 0.0625
User 93575 does not improve AUC. Reverting changes.
Training on augumented user 78633 23/50 current_auc = 0.125
User 78633 AUC after training: 0.0625
User 78633 does not improve AUC. Reverting changes.
Training on augumented user 119402 24/50 current_auc = 0.125
User 119402 AUC after training: 0.125
User 119402 does not improve AUC. Reverting changes.
Training on augumented user 59976 25/50 current_auc = 0.125
User 59976 AUC after training: 0.125
User 59976 does not improve AUC. Reverting changes.
Training on augumented user 128784 26/50 current_auc = 0.125
User 128784 AUC after training: 0.0625
User 128784 does not improve AUC. Reverting changes.
Training on augumented user 94249 27/50 current_auc = 0.125
User 94249 AUC after training: 0.125
User 94249 does not improve AUC. Reverting changes.
Training on augumented user 105708 28/50 current_auc = 0.125
User 105708 AUC after training: 0.0625
User 105708 does not improve AUC. Reverting changes.
Training on augumented user 105072 29/50 current_auc = 0.125
User 105072 AUC after training: 0.0625
User 105072 does not improve AUC. Reverting changes.
Training on augumented user 36498 30/50 current_auc = 0.125
User 36498 AUC after training: 0.0625
User 36498 does not improve AUC. Reverting changes.
Training on augumented user 115480 31/50 current_auc = 0.125
User 115480 AUC after training: 0.0625
User 115480 does not improve AUC. Reverting changes.
Training on augumented user 53654 32/50 current_auc = 0.125
User 53654 AUC after training: 0.0625
User 53654 does not improve AUC. Reverting changes.
Training on augumented user 76195 33/50 current_auc = 0.125
User 76195 AUC after training: 0.125
User 76195 does not improve AUC. Reverting changes.
Training on augumented user 58230 34/50 current_auc = 0.125
User 58230 AUC after training: 0.125
User 58230 does not improve AUC. Reverting changes.
Training on augumented user 92688 35/50 current_auc = 0.125
User 92688 AUC after training: 0.0625
User 92688 does not improve AUC. Reverting changes.
Training on augumented user 29943 36/50 current_auc = 0.125
User 29943 AUC after training: 0.0625
User 29943 does not improve AUC. Reverting changes.
Training on augumented user 75549 37/50 current_auc = 0.125
User 75549 AUC after training: 0.0625
User 75549 does not improve AUC. Reverting changes.
Training on augumented user 84413 38/50 current_auc = 0.125
User 84413 AUC after training: 0.0625
User 84413 does not improve AUC. Reverting changes.
Training on augumented user 18687 39/50 current_auc = 0.125
User 18687 AUC after training: 0.125
User 18687 does not improve AUC. Reverting changes.
Training on augumented user 54731 40/50 current_auc = 0.125
User 54731 AUC after training: 0.0625
User 54731 does not improve AUC. Reverting changes.
Training on augumented user 101538 41/50 current_auc = 0.125
User 101538 AUC after training: 0.125
User 101538 does not improve AUC. Reverting changes.
Training on augumented user 134435 42/50 current_auc = 0.125
User 134435 AUC after training: 0.125
User 134435 does not improve AUC. Reverting changes.
Training on augumented user 92825 43/50 current_auc = 0.125
User 92825 AUC after training: 0.0625
User 92825 does not improve AUC. Reverting changes.
Training on augumented user 134978 44/50 current_auc = 0.125
User 134978 AUC after training: 0.0625
User 134978 does not improve AUC. Reverting changes.
Training on augumented user 50820 45/50 current_auc = 0.125
User 50820 AUC after training: 0.0625
User 50820 does not improve AUC. Reverting changes.
Training on augumented user 113910 46/50 current_auc = 0.125
User 113910 AUC after training: 0.0625
User 113910 does not improve AUC. Reverting changes.
Training on augumented user 117750 47/50 current_auc = 0.125
User 117750 AUC after training: 0.0625
User 117750 does not improve AUC. Reverting changes.
Training on augumented user 15362 48/50 current_auc = 0.125
User 15362 AUC after training: 0.0625
User 15362 does not improve AUC. Reverting changes.
Training on augumented user 131549 49/50 current_auc = 0.125
User 131549 AUC after training: 0.0625
User 131549 does not improve AUC. Reverting changes.
[2024-12-02 19:56:08.221498] start test user 5696 254/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:56:08.624408] start test user 5696 254/568 recall augumented users by random, augumented_users = [101994, 95235, 89603, 71775, 60726, 134234, 66372, 52197, 24410, 34297, 52547, 51224, 29804, 60029, 28155, 132819, 82758, 38590, 105919, 117625, 8962, 130813, 47309, 138418, 62124, 6844, 53757, 7238, 49374, 99532, 130074, 63479, 135785, 92173, 34602, 64143, 28779, 52415, 40435, 137257, 1176, 14519, 106339, 93580, 27635, 35197, 100305, 107033, 4180, 128687]
[2024-12-02 19:56:08.638532] user = 5696 Cloud 254/568
[2024-12-02 19:56:08.650019] user = 5696 Local 254/568
[2024-12-02 19:56:08.670691] user = 5696 Local+ 254/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:56:10.383511] user = 5696 MPDA- 254/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.696969696969697
Training on augumented user 101994 0/50 current_auc = 0.696969696969697
User 101994 AUC after training: 0.6948051948051948
User 101994 does not improve AUC. Reverting changes.
Training on augumented user 95235 1/50 current_auc = 0.696969696969697
User 95235 AUC after training: 0.6948051948051948
User 95235 does not improve AUC. Reverting changes.
Training on augumented user 89603 2/50 current_auc = 0.696969696969697
User 89603 AUC after training: 0.696969696969697
User 89603 does not improve AUC. Reverting changes.
Training on augumented user 71775 3/50 current_auc = 0.696969696969697
User 71775 AUC after training: 0.696969696969697
User 71775 does not improve AUC. Reverting changes.
Training on augumented user 60726 4/50 current_auc = 0.696969696969697
User 60726 AUC after training: 0.696969696969697
User 60726 does not improve AUC. Reverting changes.
Training on augumented user 134234 5/50 current_auc = 0.696969696969697
User 134234 AUC after training: 0.696969696969697
User 134234 does not improve AUC. Reverting changes.
Training on augumented user 66372 6/50 current_auc = 0.696969696969697
User 66372 AUC after training: 0.696969696969697
User 66372 does not improve AUC. Reverting changes.
Training on augumented user 52197 7/50 current_auc = 0.696969696969697
User 52197 AUC after training: 0.696969696969697
User 52197 does not improve AUC. Reverting changes.
Training on augumented user 24410 8/50 current_auc = 0.696969696969697
User 24410 AUC after training: 0.696969696969697
User 24410 does not improve AUC. Reverting changes.
Training on augumented user 34297 9/50 current_auc = 0.696969696969697
User 34297 AUC after training: 0.696969696969697
User 34297 does not improve AUC. Reverting changes.
Training on augumented user 52547 10/50 current_auc = 0.696969696969697
User 52547 AUC after training: 0.696969696969697
User 52547 does not improve AUC. Reverting changes.
Training on augumented user 51224 11/50 current_auc = 0.696969696969697
User 51224 AUC after training: 0.696969696969697
User 51224 does not improve AUC. Reverting changes.
Training on augumented user 29804 12/50 current_auc = 0.696969696969697
User 29804 AUC after training: 0.696969696969697
User 29804 does not improve AUC. Reverting changes.
Training on augumented user 60029 13/50 current_auc = 0.696969696969697
User 60029 AUC after training: 0.696969696969697
User 60029 does not improve AUC. Reverting changes.
Training on augumented user 28155 14/50 current_auc = 0.696969696969697
User 28155 AUC after training: 0.696969696969697
User 28155 does not improve AUC. Reverting changes.
Training on augumented user 132819 15/50 current_auc = 0.696969696969697
User 132819 AUC after training: 0.696969696969697
User 132819 does not improve AUC. Reverting changes.
Training on augumented user 82758 16/50 current_auc = 0.696969696969697
User 82758 AUC after training: 0.696969696969697
User 82758 does not improve AUC. Reverting changes.
Training on augumented user 38590 17/50 current_auc = 0.696969696969697
User 38590 AUC after training: 0.696969696969697
User 38590 does not improve AUC. Reverting changes.
Training on augumented user 105919 18/50 current_auc = 0.696969696969697
User 105919 AUC after training: 0.696969696969697
User 105919 does not improve AUC. Reverting changes.
Training on augumented user 117625 19/50 current_auc = 0.696969696969697
User 117625 AUC after training: 0.6948051948051948
User 117625 does not improve AUC. Reverting changes.
Training on augumented user 8962 20/50 current_auc = 0.696969696969697
User 8962 AUC after training: 0.696969696969697
User 8962 does not improve AUC. Reverting changes.
Training on augumented user 130813 21/50 current_auc = 0.696969696969697
User 130813 AUC after training: 0.696969696969697
User 130813 does not improve AUC. Reverting changes.
Training on augumented user 47309 22/50 current_auc = 0.696969696969697
User 47309 AUC after training: 0.696969696969697
User 47309 does not improve AUC. Reverting changes.
Training on augumented user 138418 23/50 current_auc = 0.696969696969697
User 138418 AUC after training: 0.696969696969697
User 138418 does not improve AUC. Reverting changes.
Training on augumented user 62124 24/50 current_auc = 0.696969696969697
User 62124 AUC after training: 0.696969696969697
User 62124 does not improve AUC. Reverting changes.
Training on augumented user 6844 25/50 current_auc = 0.696969696969697
User 6844 AUC after training: 0.696969696969697
User 6844 does not improve AUC. Reverting changes.
Training on augumented user 53757 26/50 current_auc = 0.696969696969697
User 53757 AUC after training: 0.696969696969697
User 53757 does not improve AUC. Reverting changes.
Training on augumented user 7238 27/50 current_auc = 0.696969696969697
User 7238 AUC after training: 0.696969696969697
User 7238 does not improve AUC. Reverting changes.
Training on augumented user 49374 28/50 current_auc = 0.696969696969697
User 49374 AUC after training: 0.6926406926406927
User 49374 does not improve AUC. Reverting changes.
Training on augumented user 99532 29/50 current_auc = 0.696969696969697
User 99532 AUC after training: 0.696969696969697
User 99532 does not improve AUC. Reverting changes.
Training on augumented user 130074 30/50 current_auc = 0.696969696969697
User 130074 AUC after training: 0.696969696969697
User 130074 does not improve AUC. Reverting changes.
Training on augumented user 63479 31/50 current_auc = 0.696969696969697
User 63479 AUC after training: 0.6948051948051948
User 63479 does not improve AUC. Reverting changes.
Training on augumented user 135785 32/50 current_auc = 0.696969696969697
User 135785 AUC after training: 0.696969696969697
User 135785 does not improve AUC. Reverting changes.
Training on augumented user 92173 33/50 current_auc = 0.696969696969697
User 92173 AUC after training: 0.696969696969697
User 92173 does not improve AUC. Reverting changes.
Training on augumented user 34602 34/50 current_auc = 0.696969696969697
User 34602 AUC after training: 0.696969696969697
User 34602 does not improve AUC. Reverting changes.
Training on augumented user 64143 35/50 current_auc = 0.696969696969697
User 64143 AUC after training: 0.696969696969697
User 64143 does not improve AUC. Reverting changes.
Training on augumented user 28779 36/50 current_auc = 0.696969696969697
User 28779 AUC after training: 0.6926406926406927
User 28779 does not improve AUC. Reverting changes.
Training on augumented user 52415 37/50 current_auc = 0.696969696969697
User 52415 AUC after training: 0.696969696969697
User 52415 does not improve AUC. Reverting changes.
Training on augumented user 40435 38/50 current_auc = 0.696969696969697
User 40435 AUC after training: 0.696969696969697
User 40435 does not improve AUC. Reverting changes.
Training on augumented user 137257 39/50 current_auc = 0.696969696969697
User 137257 AUC after training: 0.696969696969697
User 137257 does not improve AUC. Reverting changes.
Training on augumented user 1176 40/50 current_auc = 0.696969696969697
User 1176 AUC after training: 0.6948051948051948
User 1176 does not improve AUC. Reverting changes.
Training on augumented user 14519 41/50 current_auc = 0.696969696969697
User 14519 AUC after training: 0.696969696969697
User 14519 does not improve AUC. Reverting changes.
Training on augumented user 106339 42/50 current_auc = 0.696969696969697
User 106339 AUC after training: 0.696969696969697
User 106339 does not improve AUC. Reverting changes.
Training on augumented user 93580 43/50 current_auc = 0.696969696969697
User 93580 AUC after training: 0.7034632034632035
User 93580 improves AUC. Keeping the model.
Training on augumented user 27635 44/50 current_auc = 0.7034632034632035
User 27635 AUC after training: 0.7012987012987013
User 27635 does not improve AUC. Reverting changes.
Training on augumented user 35197 45/50 current_auc = 0.7034632034632035
User 35197 AUC after training: 0.7034632034632035
User 35197 does not improve AUC. Reverting changes.
Training on augumented user 100305 46/50 current_auc = 0.7034632034632035
User 100305 AUC after training: 0.7034632034632035
User 100305 does not improve AUC. Reverting changes.
Training on augumented user 107033 47/50 current_auc = 0.7034632034632035
User 107033 AUC after training: 0.7034632034632035
User 107033 does not improve AUC. Reverting changes.
Training on augumented user 4180 48/50 current_auc = 0.7034632034632035
User 4180 AUC after training: 0.7034632034632035
User 4180 does not improve AUC. Reverting changes.
Training on augumented user 128687 49/50 current_auc = 0.7034632034632035
User 128687 AUC after training: 0.7012987012987013
User 128687 does not improve AUC. Reverting changes.
[2024-12-02 19:56:36.830100] start test user 5725 255/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:56:37.319706] start test user 5725 255/568 recall augumented users by random, augumented_users = [90763, 6966, 17023, 107388, 64184, 61504, 98440, 13541, 96631, 66155, 68040, 127012, 89208, 87194, 120068, 98744, 11385, 571, 9101, 32718, 19351, 33109, 26083, 38915, 10790, 129001, 103195, 11987, 104025, 1514, 81687, 84269, 42887, 12789, 41257, 118182, 83745, 92477, 69476, 6728, 95018, 15299, 17190, 61001, 65008, 80177, 129957, 113251, 101457, 98459]
[2024-12-02 19:56:37.335804] user = 5725 Cloud 255/568
[2024-12-02 19:56:37.362520] user = 5725 Local 255/568
[2024-12-02 19:56:37.535316] user = 5725 Local+ 255/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:56:39.303072] user = 5725 MPDA- 255/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6483931376102452
Training on augumented user 90763 0/50 current_auc = 0.6483931376102452
User 90763 AUC after training: 0.6479702790866256
User 90763 does not improve AUC. Reverting changes.
Training on augumented user 6966 1/50 current_auc = 0.6483931376102452
User 6966 AUC after training: 0.6479702790866255
User 6966 does not improve AUC. Reverting changes.
Training on augumented user 17023 2/50 current_auc = 0.6483931376102452
User 17023 AUC after training: 0.6479702790866256
User 17023 does not improve AUC. Reverting changes.
Training on augumented user 107388 3/50 current_auc = 0.6483931376102452
User 107388 AUC after training: 0.6485743626917966
User 107388 improves AUC. Keeping the model.
Training on augumented user 64184 4/50 current_auc = 0.6485743626917966
User 64184 AUC after training: 0.6480306874471427
User 64184 does not improve AUC. Reverting changes.
Training on augumented user 61504 5/50 current_auc = 0.6485743626917966
User 61504 AUC after training: 0.6479098707261085
User 61504 does not improve AUC. Reverting changes.
Training on augumented user 98440 6/50 current_auc = 0.6485743626917966
User 98440 AUC after training: 0.6489972212154163
User 98440 improves AUC. Keeping the model.
Training on augumented user 13541 7/50 current_auc = 0.6489972212154163
User 13541 AUC after training: 0.6491180379364504
User 13541 improves AUC. Keeping the model.
Training on augumented user 96631 8/50 current_auc = 0.6491180379364504
User 96631 AUC after training: 0.6477890540050744
User 96631 does not improve AUC. Reverting changes.
Training on augumented user 66155 9/50 current_auc = 0.6491180379364504
User 66155 AUC after training: 0.6497825299021385
User 66155 improves AUC. Keeping the model.
Training on augumented user 68040 10/50 current_auc = 0.6497825299021385
User 68040 AUC after training: 0.6505074302283437
User 68040 improves AUC. Keeping the model.
Training on augumented user 127012 11/50 current_auc = 0.6505074302283437
User 127012 AUC after training: 0.6503866135073094
User 127012 does not improve AUC. Reverting changes.
Training on augumented user 89208 12/50 current_auc = 0.6505074302283437
User 89208 AUC after training: 0.6519270267004954
User 89208 improves AUC. Keeping the model.
Training on augumented user 87194 13/50 current_auc = 0.6519270267004954
User 87194 AUC after training: 0.6525915186661834
User 87194 improves AUC. Keeping the model.
Training on augumented user 120068 14/50 current_auc = 0.6525915186661834
User 120068 AUC after training: 0.6524102935846322
User 120068 does not improve AUC. Reverting changes.
Training on augumented user 98744 15/50 current_auc = 0.6525915186661834
User 98744 AUC after training: 0.6521082517820467
User 98744 does not improve AUC. Reverting changes.
Training on augumented user 11385 16/50 current_auc = 0.6525915186661834
User 11385 AUC after training: 0.6525311103056664
User 11385 does not improve AUC. Reverting changes.
Training on augumented user 571 17/50 current_auc = 0.6525915186661834
User 571 AUC after training: 0.6525915186661835
User 571 improves AUC. Keeping the model.
Training on augumented user 9101 18/50 current_auc = 0.6525915186661835
User 9101 AUC after training: 0.6513229430953245
User 9101 does not improve AUC. Reverting changes.
Training on augumented user 32718 19/50 current_auc = 0.6525915186661835
User 32718 AUC after training: 0.6521082517820467
User 32718 does not improve AUC. Reverting changes.
Training on augumented user 19351 20/50 current_auc = 0.6525915186661835
User 19351 AUC after training: 0.6518666183399782
User 19351 does not improve AUC. Reverting changes.
Training on augumented user 33109 21/50 current_auc = 0.6525915186661835
User 33109 AUC after training: 0.6524707019451493
User 33109 does not improve AUC. Reverting changes.
Training on augumented user 26083 22/50 current_auc = 0.6525915186661835
User 26083 AUC after training: 0.6527727437477346
User 26083 improves AUC. Keeping the model.
Training on augumented user 38915 23/50 current_auc = 0.6527727437477346
User 38915 AUC after training: 0.6522894768635978
User 38915 does not improve AUC. Reverting changes.
Training on augumented user 10790 24/50 current_auc = 0.6527727437477346
User 10790 AUC after training: 0.6530747855503202
User 10790 improves AUC. Keeping the model.
Training on augumented user 129001 25/50 current_auc = 0.6530747855503202
User 129001 AUC after training: 0.652349885224115
User 129001 does not improve AUC. Reverting changes.
Training on augumented user 103195 26/50 current_auc = 0.6530747855503202
User 103195 AUC after training: 0.6537392775160082
User 103195 improves AUC. Keeping the model.
Training on augumented user 11987 27/50 current_auc = 0.6537392775160082
User 11987 AUC after training: 0.6541017276791108
User 11987 improves AUC. Keeping the model.
Training on augumented user 104025 28/50 current_auc = 0.6541017276791108
User 104025 AUC after training: 0.6534976440739398
User 104025 does not improve AUC. Reverting changes.
Training on augumented user 1514 29/50 current_auc = 0.6541017276791108
User 1514 AUC after training: 0.6542829527606621
User 1514 improves AUC. Keeping the model.
Training on augumented user 81687 30/50 current_auc = 0.6542829527606621
User 81687 AUC after training: 0.6538600942370424
User 81687 does not improve AUC. Reverting changes.
Training on augumented user 84269 31/50 current_auc = 0.6542829527606621
User 84269 AUC after training: 0.6539205025975594
User 84269 does not improve AUC. Reverting changes.
Training on augumented user 42887 32/50 current_auc = 0.6542829527606621
User 42887 AUC after training: 0.6537996858765254
User 42887 does not improve AUC. Reverting changes.
Training on augumented user 12789 33/50 current_auc = 0.6542829527606621
User 12789 AUC after training: 0.6537392775160082
User 12789 does not improve AUC. Reverting changes.
Training on augumented user 41257 34/50 current_auc = 0.6542829527606621
User 41257 AUC after training: 0.6536184607949741
User 41257 does not improve AUC. Reverting changes.
Training on augumented user 118182 35/50 current_auc = 0.6542829527606621
User 118182 AUC after training: 0.653618460794974
User 118182 does not improve AUC. Reverting changes.
Training on augumented user 83745 36/50 current_auc = 0.6542829527606621
User 83745 AUC after training: 0.654222544400145
User 83745 does not improve AUC. Reverting changes.
Training on augumented user 92477 37/50 current_auc = 0.6542829527606621
User 92477 AUC after training: 0.6542829527606621
User 92477 does not improve AUC. Reverting changes.
Training on augumented user 69476 38/50 current_auc = 0.6542829527606621
User 69476 AUC after training: 0.6537996858765254
User 69476 does not improve AUC. Reverting changes.
Training on augumented user 6728 39/50 current_auc = 0.6542829527606621
User 6728 AUC after training: 0.6534372357134228
User 6728 does not improve AUC. Reverting changes.
Training on augumented user 95018 40/50 current_auc = 0.6542829527606621
User 95018 AUC after training: 0.6542829527606621
User 95018 does not improve AUC. Reverting changes.
Training on augumented user 15299 41/50 current_auc = 0.6542829527606621
User 15299 AUC after training: 0.6499939591639482
User 15299 does not improve AUC. Reverting changes.
Training on augumented user 17190 42/50 current_auc = 0.6542829527606621
User 17190 AUC after training: 0.6524707019451492
User 17190 does not improve AUC. Reverting changes.
Training on augumented user 61001 43/50 current_auc = 0.6542829527606621
User 61001 AUC after training: 0.6539809109580766
User 61001 does not improve AUC. Reverting changes.
Training on augumented user 65008 44/50 current_auc = 0.6542829527606621
User 65008 AUC after training: 0.6539809109580765
User 65008 does not improve AUC. Reverting changes.
Training on augumented user 80177 45/50 current_auc = 0.6542829527606621
User 80177 AUC after training: 0.6541017276791108
User 80177 does not improve AUC. Reverting changes.
Training on augumented user 129957 46/50 current_auc = 0.6542829527606621
User 129957 AUC after training: 0.6544641778422133
User 129957 improves AUC. Keeping the model.
Training on augumented user 113251 47/50 current_auc = 0.6544641778422133
User 113251 AUC after training: 0.6546454029237647
User 113251 improves AUC. Keeping the model.
Training on augumented user 101457 48/50 current_auc = 0.6546454029237647
User 101457 AUC after training: 0.6533768273529056
User 101457 does not improve AUC. Reverting changes.
Training on augumented user 98459 49/50 current_auc = 0.6546454029237647
User 98459 AUC after training: 0.6550682614473844
User 98459 improves AUC. Keeping the model.
[2024-12-02 19:57:05.937527] start test user 5731 256/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:57:06.363422] start test user 5731 256/568 recall augumented users by random, augumented_users = [95444, 63312, 5694, 85153, 5745, 103967, 104756, 73205, 136011, 11838, 79292, 25308, 126827, 16520, 11014, 87354, 107988, 49555, 8598, 127467, 25640, 56930, 122845, 50848, 127993, 111447, 16364, 49121, 96893, 129278, 67432, 117065, 50770, 1893, 45893, 103206, 30116, 90237, 124062, 98203, 98650, 90206, 57564, 61305, 54356, 113426, 61636, 38190, 85562, 7378]
[2024-12-02 19:57:06.378203] user = 5731 Cloud 256/568
[2024-12-02 19:57:06.393516] user = 5731 Local 256/568
[2024-12-02 19:57:06.446860] user = 5731 Local+ 256/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:57:08.599460] user = 5731 MPDA- 256/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7897609147609148
Training on augumented user 95444 0/50 current_auc = 0.7897609147609148
User 95444 AUC after training: 0.7905405405405406
User 95444 improves AUC. Keeping the model.
Training on augumented user 63312 1/50 current_auc = 0.7905405405405406
User 63312 AUC after training: 0.7902806652806654
User 63312 does not improve AUC. Reverting changes.
Training on augumented user 5694 2/50 current_auc = 0.7905405405405406
User 5694 AUC after training: 0.7905405405405406
User 5694 does not improve AUC. Reverting changes.
Training on augumented user 85153 3/50 current_auc = 0.7905405405405406
User 85153 AUC after training: 0.7923596673596672
User 85153 improves AUC. Keeping the model.
Training on augumented user 5745 4/50 current_auc = 0.7923596673596672
User 5745 AUC after training: 0.7920997920997922
User 5745 does not improve AUC. Reverting changes.
Training on augumented user 103967 5/50 current_auc = 0.7923596673596672
User 103967 AUC after training: 0.7915800415800416
User 103967 does not improve AUC. Reverting changes.
Training on augumented user 104756 6/50 current_auc = 0.7923596673596672
User 104756 AUC after training: 0.7923596673596672
User 104756 does not improve AUC. Reverting changes.
Training on augumented user 73205 7/50 current_auc = 0.7923596673596672
User 73205 AUC after training: 0.7918399168399168
User 73205 does not improve AUC. Reverting changes.
Training on augumented user 136011 8/50 current_auc = 0.7923596673596672
User 136011 AUC after training: 0.7915800415800415
User 136011 does not improve AUC. Reverting changes.
Training on augumented user 11838 9/50 current_auc = 0.7923596673596672
User 11838 AUC after training: 0.7928794178794177
User 11838 improves AUC. Keeping the model.
Training on augumented user 79292 10/50 current_auc = 0.7928794178794177
User 79292 AUC after training: 0.7908004158004159
User 79292 does not improve AUC. Reverting changes.
Training on augumented user 25308 11/50 current_auc = 0.7928794178794177
User 25308 AUC after training: 0.7923596673596675
User 25308 does not improve AUC. Reverting changes.
Training on augumented user 126827 12/50 current_auc = 0.7928794178794177
User 126827 AUC after training: 0.7920997920997922
User 126827 does not improve AUC. Reverting changes.
Training on augumented user 16520 13/50 current_auc = 0.7928794178794177
User 16520 AUC after training: 0.7920997920997922
User 16520 does not improve AUC. Reverting changes.
Training on augumented user 11014 14/50 current_auc = 0.7928794178794177
User 11014 AUC after training: 0.7908004158004158
User 11014 does not improve AUC. Reverting changes.
Training on augumented user 87354 15/50 current_auc = 0.7928794178794177
User 87354 AUC after training: 0.7928794178794177
User 87354 does not improve AUC. Reverting changes.
Training on augumented user 107988 16/50 current_auc = 0.7928794178794177
User 107988 AUC after training: 0.7926195426195427
User 107988 does not improve AUC. Reverting changes.
Training on augumented user 49555 17/50 current_auc = 0.7928794178794177
User 49555 AUC after training: 0.7923596673596675
User 49555 does not improve AUC. Reverting changes.
Training on augumented user 8598 18/50 current_auc = 0.7928794178794177
User 8598 AUC after training: 0.792099792099792
User 8598 does not improve AUC. Reverting changes.
Training on augumented user 127467 19/50 current_auc = 0.7928794178794177
User 127467 AUC after training: 0.7918399168399167
User 127467 does not improve AUC. Reverting changes.
Training on augumented user 25640 20/50 current_auc = 0.7928794178794177
User 25640 AUC after training: 0.7923596673596675
User 25640 does not improve AUC. Reverting changes.
Training on augumented user 56930 21/50 current_auc = 0.7928794178794177
User 56930 AUC after training: 0.791060291060291
User 56930 does not improve AUC. Reverting changes.
Training on augumented user 122845 22/50 current_auc = 0.7928794178794177
User 122845 AUC after training: 0.7936590436590437
User 122845 improves AUC. Keeping the model.
Training on augumented user 50848 23/50 current_auc = 0.7936590436590437
User 50848 AUC after training: 0.7936590436590437
User 50848 does not improve AUC. Reverting changes.
Training on augumented user 127993 24/50 current_auc = 0.7936590436590437
User 127993 AUC after training: 0.7931392931392932
User 127993 does not improve AUC. Reverting changes.
Training on augumented user 111447 25/50 current_auc = 0.7936590436590437
User 111447 AUC after training: 0.7933991683991685
User 111447 does not improve AUC. Reverting changes.
Training on augumented user 16364 26/50 current_auc = 0.7936590436590437
User 16364 AUC after training: 0.7931392931392932
User 16364 does not improve AUC. Reverting changes.
Training on augumented user 49121 27/50 current_auc = 0.7936590436590437
User 49121 AUC after training: 0.791839916839917
User 49121 does not improve AUC. Reverting changes.
Training on augumented user 96893 28/50 current_auc = 0.7936590436590437
User 96893 AUC after training: 0.7933991683991685
User 96893 does not improve AUC. Reverting changes.
Training on augumented user 129278 29/50 current_auc = 0.7936590436590437
User 129278 AUC after training: 0.7933991683991685
User 129278 does not improve AUC. Reverting changes.
Training on augumented user 67432 30/50 current_auc = 0.7936590436590437
User 67432 AUC after training: 0.7931392931392932
User 67432 does not improve AUC. Reverting changes.
Training on augumented user 117065 31/50 current_auc = 0.7936590436590437
User 117065 AUC after training: 0.792879417879418
User 117065 does not improve AUC. Reverting changes.
Training on augumented user 50770 32/50 current_auc = 0.7936590436590437
User 50770 AUC after training: 0.7931392931392932
User 50770 does not improve AUC. Reverting changes.
Training on augumented user 1893 33/50 current_auc = 0.7936590436590437
User 1893 AUC after training: 0.7936590436590437
User 1893 does not improve AUC. Reverting changes.
Training on augumented user 45893 34/50 current_auc = 0.7936590436590437
User 45893 AUC after training: 0.7936590436590437
User 45893 does not improve AUC. Reverting changes.
Training on augumented user 103206 35/50 current_auc = 0.7936590436590437
User 103206 AUC after training: 0.7936590436590437
User 103206 does not improve AUC. Reverting changes.
Training on augumented user 30116 36/50 current_auc = 0.7936590436590437
User 30116 AUC after training: 0.7931392931392932
User 30116 does not improve AUC. Reverting changes.
Training on augumented user 90237 37/50 current_auc = 0.7936590436590437
User 90237 AUC after training: 0.7931392931392932
User 90237 does not improve AUC. Reverting changes.
Training on augumented user 124062 38/50 current_auc = 0.7936590436590437
User 124062 AUC after training: 0.7936590436590437
User 124062 does not improve AUC. Reverting changes.
Training on augumented user 98203 39/50 current_auc = 0.7936590436590437
User 98203 AUC after training: 0.7908004158004157
User 98203 does not improve AUC. Reverting changes.
Training on augumented user 98650 40/50 current_auc = 0.7936590436590437
User 98650 AUC after training: 0.793918918918919
User 98650 improves AUC. Keeping the model.
Training on augumented user 90206 41/50 current_auc = 0.793918918918919
User 90206 AUC after training: 0.7939189189189187
User 90206 does not improve AUC. Reverting changes.
Training on augumented user 57564 42/50 current_auc = 0.793918918918919
User 57564 AUC after training: 0.7933991683991685
User 57564 does not improve AUC. Reverting changes.
Training on augumented user 61305 43/50 current_auc = 0.793918918918919
User 61305 AUC after training: 0.7915800415800415
User 61305 does not improve AUC. Reverting changes.
Training on augumented user 54356 44/50 current_auc = 0.793918918918919
User 54356 AUC after training: 0.7936590436590437
User 54356 does not improve AUC. Reverting changes.
Training on augumented user 113426 45/50 current_auc = 0.793918918918919
User 113426 AUC after training: 0.793918918918919
User 113426 does not improve AUC. Reverting changes.
Training on augumented user 61636 46/50 current_auc = 0.793918918918919
User 61636 AUC after training: 0.7933991683991685
User 61636 does not improve AUC. Reverting changes.
Training on augumented user 38190 47/50 current_auc = 0.793918918918919
User 38190 AUC after training: 0.7920997920997922
User 38190 does not improve AUC. Reverting changes.
Training on augumented user 85562 48/50 current_auc = 0.793918918918919
User 85562 AUC after training: 0.7915800415800417
User 85562 does not improve AUC. Reverting changes.
Training on augumented user 7378 49/50 current_auc = 0.793918918918919
User 7378 AUC after training: 0.7918399168399167
User 7378 does not improve AUC. Reverting changes.
[2024-12-02 19:57:36.723823] start test user 5741 257/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:57:37.260472] start test user 5741 257/568 recall augumented users by random, augumented_users = [88267, 6579, 14468, 130679, 54941, 82563, 34024, 97691, 123399, 28443, 75811, 16158, 20072, 86248, 10583, 17943, 88376, 79296, 15478, 102037, 60743, 82383, 113888, 50166, 31075, 73442, 99883, 47548, 34669, 128939, 67544, 69291, 27013, 43139, 11861, 94931, 117513, 20693, 77006, 89281, 63536, 30768, 107755, 1332, 121842, 16125, 53977, 11354, 74592, 76928]
[2024-12-02 19:57:37.281431] user = 5741 Cloud 257/568
[2024-12-02 19:57:37.326966] user = 5741 Local 257/568
[2024-12-02 19:57:37.402103] user = 5741 Local+ 257/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:57:40.008168] user = 5741 MPDA- 257/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7242366412213741
Training on augumented user 88267 0/50 current_auc = 0.7242366412213741
User 88267 AUC after training: 0.7256281806615776
User 88267 improves AUC. Keeping the model.
Training on augumented user 6579 1/50 current_auc = 0.7256281806615776
User 6579 AUC after training: 0.7256281806615775
User 6579 does not improve AUC. Reverting changes.
Training on augumented user 14468 2/50 current_auc = 0.7256281806615776
User 14468 AUC after training: 0.7256281806615776
User 14468 does not improve AUC. Reverting changes.
Training on augumented user 130679 3/50 current_auc = 0.7256281806615776
User 130679 AUC after training: 0.7249522900763359
User 130679 does not improve AUC. Reverting changes.
Training on augumented user 54941 4/50 current_auc = 0.7256281806615776
User 54941 AUC after training: 0.7257076972010178
User 54941 improves AUC. Keeping the model.
Training on augumented user 82563 5/50 current_auc = 0.7257076972010178
User 82563 AUC after training: 0.7252305979643766
User 82563 does not improve AUC. Reverting changes.
Training on augumented user 34024 6/50 current_auc = 0.7257076972010178
User 34024 AUC after training: 0.7258269720101781
User 34024 improves AUC. Keeping the model.
Training on augumented user 97691 7/50 current_auc = 0.7258269720101781
User 97691 AUC after training: 0.7262245547073791
User 97691 improves AUC. Keeping the model.
Training on augumented user 123399 8/50 current_auc = 0.7262245547073791
User 123399 AUC after training: 0.7255884223918575
User 123399 does not improve AUC. Reverting changes.
Training on augumented user 28443 9/50 current_auc = 0.7262245547073791
User 28443 AUC after training: 0.7262245547073791
User 28443 does not improve AUC. Reverting changes.
Training on augumented user 75811 10/50 current_auc = 0.7262245547073791
User 75811 AUC after training: 0.7255884223918576
User 75811 does not improve AUC. Reverting changes.
Training on augumented user 16158 11/50 current_auc = 0.7262245547073791
User 16158 AUC after training: 0.7245547073791349
User 16158 does not improve AUC. Reverting changes.
Training on augumented user 20072 12/50 current_auc = 0.7262245547073791
User 20072 AUC after training: 0.7259064885496184
User 20072 does not improve AUC. Reverting changes.
Training on augumented user 86248 13/50 current_auc = 0.7262245547073791
User 86248 AUC after training: 0.7258269720101781
User 86248 does not improve AUC. Reverting changes.
Training on augumented user 10583 14/50 current_auc = 0.7262245547073791
User 10583 AUC after training: 0.7261450381679391
User 10583 does not improve AUC. Reverting changes.
Training on augumented user 17943 15/50 current_auc = 0.7262245547073791
User 17943 AUC after training: 0.7253498727735369
User 17943 does not improve AUC. Reverting changes.
Training on augumented user 88376 16/50 current_auc = 0.7262245547073791
User 88376 AUC after training: 0.7260655216284987
User 88376 does not improve AUC. Reverting changes.
Training on augumented user 79296 17/50 current_auc = 0.7262245547073791
User 79296 AUC after training: 0.7263040712468194
User 79296 improves AUC. Keeping the model.
Training on augumented user 15478 18/50 current_auc = 0.7263040712468194
User 15478 AUC after training: 0.7263040712468193
User 15478 does not improve AUC. Reverting changes.
Training on augumented user 102037 19/50 current_auc = 0.7263040712468194
User 102037 AUC after training: 0.7258269720101781
User 102037 does not improve AUC. Reverting changes.
Training on augumented user 60743 20/50 current_auc = 0.7263040712468194
User 60743 AUC after training: 0.7259860050890585
User 60743 does not improve AUC. Reverting changes.
Training on augumented user 82383 21/50 current_auc = 0.7263040712468194
User 82383 AUC after training: 0.7260655216284987
User 82383 does not improve AUC. Reverting changes.
Training on augumented user 113888 22/50 current_auc = 0.7263040712468194
User 113888 AUC after training: 0.7264631043256998
User 113888 improves AUC. Keeping the model.
Training on augumented user 50166 23/50 current_auc = 0.7264631043256998
User 50166 AUC after training: 0.7252703562340969
User 50166 does not improve AUC. Reverting changes.
Training on augumented user 31075 24/50 current_auc = 0.7264631043256998
User 31075 AUC after training: 0.7260655216284987
User 31075 does not improve AUC. Reverting changes.
Training on augumented user 73442 25/50 current_auc = 0.7264631043256998
User 73442 AUC after training: 0.7263040712468194
User 73442 does not improve AUC. Reverting changes.
Training on augumented user 99883 26/50 current_auc = 0.7264631043256998
User 99883 AUC after training: 0.7259462468193385
User 99883 does not improve AUC. Reverting changes.
Training on augumented user 47548 27/50 current_auc = 0.7264631043256998
User 47548 AUC after training: 0.7257474554707378
User 47548 does not improve AUC. Reverting changes.
Training on augumented user 34669 28/50 current_auc = 0.7264631043256998
User 34669 AUC after training: 0.726145038167939
User 34669 does not improve AUC. Reverting changes.
Training on augumented user 128939 29/50 current_auc = 0.7264631043256998
User 128939 AUC after training: 0.7263040712468193
User 128939 does not improve AUC. Reverting changes.
Training on augumented user 67544 30/50 current_auc = 0.7264631043256998
User 67544 AUC after training: 0.7257474554707379
User 67544 does not improve AUC. Reverting changes.
Training on augumented user 69291 31/50 current_auc = 0.7264631043256998
User 69291 AUC after training: 0.7258667302798982
User 69291 does not improve AUC. Reverting changes.
Training on augumented user 27013 32/50 current_auc = 0.7264631043256998
User 27013 AUC after training: 0.7262245547073791
User 27013 does not improve AUC. Reverting changes.
Training on augumented user 43139 33/50 current_auc = 0.7264631043256998
User 43139 AUC after training: 0.7262245547073791
User 43139 does not improve AUC. Reverting changes.
Training on augumented user 11861 34/50 current_auc = 0.7264631043256998
User 11861 AUC after training: 0.7259860050890585
User 11861 does not improve AUC. Reverting changes.
Training on augumented user 94931 35/50 current_auc = 0.7264631043256998
User 94931 AUC after training: 0.7263040712468193
User 94931 does not improve AUC. Reverting changes.
Training on augumented user 117513 36/50 current_auc = 0.7264631043256998
User 117513 AUC after training: 0.726145038167939
User 117513 does not improve AUC. Reverting changes.
Training on augumented user 20693 37/50 current_auc = 0.7264631043256998
User 20693 AUC after training: 0.7254293893129771
User 20693 does not improve AUC. Reverting changes.
Training on augumented user 77006 38/50 current_auc = 0.7264631043256998
User 77006 AUC after training: 0.7263835877862596
User 77006 does not improve AUC. Reverting changes.
Training on augumented user 89281 39/50 current_auc = 0.7264631043256998
User 89281 AUC after training: 0.726145038167939
User 89281 does not improve AUC. Reverting changes.
Training on augumented user 63536 40/50 current_auc = 0.7264631043256998
User 63536 AUC after training: 0.7255486641221374
User 63536 does not improve AUC. Reverting changes.
Training on augumented user 30768 41/50 current_auc = 0.7264631043256998
User 30768 AUC after training: 0.7257474554707379
User 30768 does not improve AUC. Reverting changes.
Training on augumented user 107755 42/50 current_auc = 0.7264631043256998
User 107755 AUC after training: 0.726145038167939
User 107755 does not improve AUC. Reverting changes.
Training on augumented user 1332 43/50 current_auc = 0.7264631043256998
User 1332 AUC after training: 0.7265426208651399
User 1332 improves AUC. Keeping the model.
Training on augumented user 121842 44/50 current_auc = 0.7265426208651399
User 121842 AUC after training: 0.7263835877862596
User 121842 does not improve AUC. Reverting changes.
Training on augumented user 16125 45/50 current_auc = 0.7265426208651399
User 16125 AUC after training: 0.7263835877862596
User 16125 does not improve AUC. Reverting changes.
Training on augumented user 53977 46/50 current_auc = 0.7265426208651399
User 53977 AUC after training: 0.7259064885496184
User 53977 does not improve AUC. Reverting changes.
Training on augumented user 11354 47/50 current_auc = 0.7265426208651399
User 11354 AUC after training: 0.7261450381679391
User 11354 does not improve AUC. Reverting changes.
Training on augumented user 74592 48/50 current_auc = 0.7265426208651399
User 74592 AUC after training: 0.7264631043256998
User 74592 does not improve AUC. Reverting changes.
Training on augumented user 76928 49/50 current_auc = 0.7265426208651399
User 76928 AUC after training: 0.7254691475826972
User 76928 does not improve AUC. Reverting changes.
[2024-12-02 19:58:07.602415] start test user 5743 258/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:58:08.122692] start test user 5743 258/568 recall augumented users by random, augumented_users = [128713, 30240, 19849, 46689, 85318, 79564, 59216, 4530, 4892, 96257, 55871, 14857, 23187, 24054, 31966, 130072, 77935, 135202, 3430, 70228, 127525, 74275, 75921, 120876, 63223, 47231, 49851, 41118, 94294, 76528, 130793, 32717, 119261, 56620, 79227, 41361, 43073, 78228, 10371, 104081, 52731, 59232, 3872, 1021, 7400, 48169, 100779, 29565, 68422, 110766]
[2024-12-02 19:58:08.137932] user = 5743 Cloud 258/568
[2024-12-02 19:58:08.154321] user = 5743 Local 258/568
[2024-12-02 19:58:08.313975] user = 5743 Local+ 258/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:58:10.858243] user = 5743 MPDA- 258/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5904923599320883
Training on augumented user 128713 0/50 current_auc = 0.5904923599320883
User 128713 AUC after training: 0.5904923599320883
User 128713 does not improve AUC. Reverting changes.
Training on augumented user 30240 1/50 current_auc = 0.5904923599320883
User 30240 AUC after training: 0.5894736842105264
User 30240 does not improve AUC. Reverting changes.
Training on augumented user 19849 2/50 current_auc = 0.5904923599320883
User 19849 AUC after training: 0.5904923599320883
User 19849 does not improve AUC. Reverting changes.
Training on augumented user 46689 3/50 current_auc = 0.5904923599320883
User 46689 AUC after training: 0.5904923599320883
User 46689 does not improve AUC. Reverting changes.
Training on augumented user 85318 4/50 current_auc = 0.5904923599320883
User 85318 AUC after training: 0.5911714770797963
User 85318 improves AUC. Keeping the model.
Training on augumented user 79564 5/50 current_auc = 0.5911714770797963
User 79564 AUC after training: 0.5911714770797962
User 79564 does not improve AUC. Reverting changes.
Training on augumented user 59216 6/50 current_auc = 0.5911714770797963
User 59216 AUC after training: 0.5894736842105263
User 59216 does not improve AUC. Reverting changes.
Training on augumented user 4530 7/50 current_auc = 0.5911714770797963
User 4530 AUC after training: 0.5894736842105263
User 4530 does not improve AUC. Reverting changes.
Training on augumented user 4892 8/50 current_auc = 0.5911714770797963
User 4892 AUC after training: 0.5894736842105263
User 4892 does not improve AUC. Reverting changes.
Training on augumented user 96257 9/50 current_auc = 0.5911714770797963
User 96257 AUC after training: 0.5898132427843803
User 96257 does not improve AUC. Reverting changes.
Training on augumented user 55871 10/50 current_auc = 0.5911714770797963
User 55871 AUC after training: 0.5908319185059423
User 55871 does not improve AUC. Reverting changes.
Training on augumented user 14857 11/50 current_auc = 0.5911714770797963
User 14857 AUC after training: 0.5894736842105263
User 14857 does not improve AUC. Reverting changes.
Training on augumented user 23187 12/50 current_auc = 0.5911714770797963
User 23187 AUC after training: 0.5891341256366723
User 23187 does not improve AUC. Reverting changes.
Training on augumented user 24054 13/50 current_auc = 0.5911714770797963
User 24054 AUC after training: 0.5901528013582343
User 24054 does not improve AUC. Reverting changes.
Training on augumented user 31966 14/50 current_auc = 0.5911714770797963
User 31966 AUC after training: 0.5918505942275043
User 31966 improves AUC. Keeping the model.
Training on augumented user 130072 15/50 current_auc = 0.5918505942275043
User 130072 AUC after training: 0.5918505942275043
User 130072 does not improve AUC. Reverting changes.
Training on augumented user 77935 16/50 current_auc = 0.5918505942275043
User 77935 AUC after training: 0.5891341256366723
User 77935 does not improve AUC. Reverting changes.
Training on augumented user 135202 17/50 current_auc = 0.5918505942275043
User 135202 AUC after training: 0.5904923599320883
User 135202 does not improve AUC. Reverting changes.
Training on augumented user 3430 18/50 current_auc = 0.5918505942275043
User 3430 AUC after training: 0.5904923599320883
User 3430 does not improve AUC. Reverting changes.
Training on augumented user 70228 19/50 current_auc = 0.5918505942275043
User 70228 AUC after training: 0.5891341256366723
User 70228 does not improve AUC. Reverting changes.
Training on augumented user 127525 20/50 current_auc = 0.5918505942275043
User 127525 AUC after training: 0.5904923599320884
User 127525 does not improve AUC. Reverting changes.
Training on augumented user 74275 21/50 current_auc = 0.5918505942275043
User 74275 AUC after training: 0.5894736842105264
User 74275 does not improve AUC. Reverting changes.
Training on augumented user 75921 22/50 current_auc = 0.5918505942275043
User 75921 AUC after training: 0.5918505942275042
User 75921 does not improve AUC. Reverting changes.
Training on augumented user 120876 23/50 current_auc = 0.5918505942275043
User 120876 AUC after training: 0.5870967741935484
User 120876 does not improve AUC. Reverting changes.
Training on augumented user 63223 24/50 current_auc = 0.5918505942275043
User 63223 AUC after training: 0.5928692699490662
User 63223 improves AUC. Keeping the model.
Training on augumented user 47231 25/50 current_auc = 0.5928692699490662
User 47231 AUC after training: 0.5918505942275043
User 47231 does not improve AUC. Reverting changes.
Training on augumented user 49851 26/50 current_auc = 0.5928692699490662
User 49851 AUC after training: 0.5908319185059423
User 49851 does not improve AUC. Reverting changes.
Training on augumented user 41118 27/50 current_auc = 0.5928692699490662
User 41118 AUC after training: 0.5911714770797963
User 41118 does not improve AUC. Reverting changes.
Training on augumented user 94294 28/50 current_auc = 0.5928692699490662
User 94294 AUC after training: 0.5894736842105264
User 94294 does not improve AUC. Reverting changes.
Training on augumented user 76528 29/50 current_auc = 0.5928692699490662
User 76528 AUC after training: 0.5918505942275042
User 76528 does not improve AUC. Reverting changes.
Training on augumented user 130793 30/50 current_auc = 0.5928692699490662
User 130793 AUC after training: 0.5915110356536503
User 130793 does not improve AUC. Reverting changes.
Training on augumented user 32717 31/50 current_auc = 0.5928692699490662
User 32717 AUC after training: 0.5850594227504244
User 32717 does not improve AUC. Reverting changes.
Training on augumented user 119261 32/50 current_auc = 0.5928692699490662
User 119261 AUC after training: 0.5925297113752122
User 119261 does not improve AUC. Reverting changes.
Training on augumented user 56620 33/50 current_auc = 0.5928692699490662
User 56620 AUC after training: 0.5932088285229202
User 56620 improves AUC. Keeping the model.
Training on augumented user 79227 34/50 current_auc = 0.5932088285229202
User 79227 AUC after training: 0.5918505942275043
User 79227 does not improve AUC. Reverting changes.
Training on augumented user 41361 35/50 current_auc = 0.5932088285229202
User 41361 AUC after training: 0.5915110356536503
User 41361 does not improve AUC. Reverting changes.
Training on augumented user 43073 36/50 current_auc = 0.5932088285229202
User 43073 AUC after training: 0.5928692699490662
User 43073 does not improve AUC. Reverting changes.
Training on augumented user 78228 37/50 current_auc = 0.5932088285229202
User 78228 AUC after training: 0.5921901528013582
User 78228 does not improve AUC. Reverting changes.
Training on augumented user 10371 38/50 current_auc = 0.5932088285229202
User 10371 AUC after training: 0.5911714770797963
User 10371 does not improve AUC. Reverting changes.
Training on augumented user 104081 39/50 current_auc = 0.5932088285229202
User 104081 AUC after training: 0.5915110356536503
User 104081 does not improve AUC. Reverting changes.
Training on augumented user 52731 40/50 current_auc = 0.5932088285229202
User 52731 AUC after training: 0.5928692699490662
User 52731 does not improve AUC. Reverting changes.
Training on augumented user 59232 41/50 current_auc = 0.5932088285229202
User 59232 AUC after training: 0.5911714770797962
User 59232 does not improve AUC. Reverting changes.
Training on augumented user 3872 42/50 current_auc = 0.5932088285229202
User 3872 AUC after training: 0.5918505942275043
User 3872 does not improve AUC. Reverting changes.
Training on augumented user 1021 43/50 current_auc = 0.5932088285229202
User 1021 AUC after training: 0.5915110356536503
User 1021 does not improve AUC. Reverting changes.
Training on augumented user 7400 44/50 current_auc = 0.5932088285229202
User 7400 AUC after training: 0.5918505942275043
User 7400 does not improve AUC. Reverting changes.
Training on augumented user 48169 45/50 current_auc = 0.5932088285229202
User 48169 AUC after training: 0.5908319185059423
User 48169 does not improve AUC. Reverting changes.
Training on augumented user 100779 46/50 current_auc = 0.5932088285229202
User 100779 AUC after training: 0.5925297113752123
User 100779 does not improve AUC. Reverting changes.
Training on augumented user 29565 47/50 current_auc = 0.5932088285229202
User 29565 AUC after training: 0.5908319185059423
User 29565 does not improve AUC. Reverting changes.
Training on augumented user 68422 48/50 current_auc = 0.5932088285229202
User 68422 AUC after training: 0.5921901528013582
User 68422 does not improve AUC. Reverting changes.
Training on augumented user 110766 49/50 current_auc = 0.5932088285229202
User 110766 AUC after training: 0.5894736842105264
User 110766 does not improve AUC. Reverting changes.
[2024-12-02 19:58:38.535776] start test user 5768 259/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:58:39.338031] start test user 5768 259/568 recall augumented users by random, augumented_users = [42148, 27005, 3766, 136092, 37965, 45873, 132350, 44568, 3711, 102995, 137937, 36478, 67337, 89731, 136981, 97118, 99817, 113363, 126949, 89218, 37822, 81481, 2042, 57988, 1802, 112321, 63136, 6617, 65693, 119717, 40218, 95467, 67827, 83998, 23069, 39553, 124032, 94788, 10630, 34512, 29271, 54186, 8449, 5727, 102331, 10114, 67976, 118575, 49287, 106591]
[2024-12-02 19:58:39.359934] user = 5768 Cloud 259/568
[2024-12-02 19:58:39.425414] user = 5768 Local 259/568
[2024-12-02 19:58:39.659752] user = 5768 Local+ 259/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:58:42.076706] user = 5768 MPDA- 259/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8533296810323838
Training on augumented user 42148 0/50 current_auc = 0.8533296810323838
User 42148 AUC after training: 0.8535122960798637
User 42148 improves AUC. Keeping the model.
Training on augumented user 27005 1/50 current_auc = 0.8535122960798637
User 27005 AUC after training: 0.853299245191137
User 27005 does not improve AUC. Reverting changes.
Training on augumented user 3766 2/50 current_auc = 0.8535122960798637
User 3766 AUC after training: 0.8535427319211102
User 3766 improves AUC. Keeping the model.
Training on augumented user 136092 3/50 current_auc = 0.8535427319211102
User 136092 AUC after training: 0.8533601168736304
User 136092 does not improve AUC. Reverting changes.
Training on augumented user 37965 4/50 current_auc = 0.8535427319211102
User 37965 AUC after training: 0.8537253469685901
User 37965 improves AUC. Keeping the model.
Training on augumented user 45873 5/50 current_auc = 0.8537253469685901
User 45873 AUC after training: 0.8535731677623569
User 45873 does not improve AUC. Reverting changes.
Training on augumented user 132350 6/50 current_auc = 0.8537253469685901
User 132350 AUC after training: 0.8539383978573167
User 132350 improves AUC. Keeping the model.
Training on augumented user 44568 7/50 current_auc = 0.8539383978573167
User 44568 AUC after training: 0.85395361577794
User 44568 improves AUC. Keeping the model.
Training on augumented user 3711 8/50 current_auc = 0.85395361577794
User 3711 AUC after training: 0.85399926953981
User 3711 improves AUC. Keeping the model.
Training on augumented user 102995 9/50 current_auc = 0.85399926953981
User 102995 AUC after training: 0.85399926953981
User 102995 does not improve AUC. Reverting changes.
Training on augumented user 137937 10/50 current_auc = 0.85399926953981
User 137937 AUC after training: 0.8541514487460433
User 137937 improves AUC. Keeping the model.
Training on augumented user 36478 11/50 current_auc = 0.8541514487460433
User 36478 AUC after training: 0.8541210129047967
User 36478 does not improve AUC. Reverting changes.
Training on augumented user 67337 12/50 current_auc = 0.8541514487460433
User 67337 AUC after training: 0.8540297053810567
User 67337 does not improve AUC. Reverting changes.
Training on augumented user 89731 13/50 current_auc = 0.8541514487460433
User 89731 AUC after training: 0.8541666666666665
User 89731 improves AUC. Keeping the model.
Training on augumented user 136981 14/50 current_auc = 0.8541666666666665
User 136981 AUC after training: 0.8541666666666666
User 136981 improves AUC. Keeping the model.
Training on augumented user 97118 15/50 current_auc = 0.8541666666666666
User 97118 AUC after training: 0.8541057949841733
User 97118 does not improve AUC. Reverting changes.
Training on augumented user 99817 16/50 current_auc = 0.8541666666666666
User 99817 AUC after training: 0.8541210129047967
User 99817 does not improve AUC. Reverting changes.
Training on augumented user 113363 17/50 current_auc = 0.8541666666666666
User 113363 AUC after training: 0.8537405648892136
User 113363 does not improve AUC. Reverting changes.
Training on augumented user 126949 18/50 current_auc = 0.8541666666666666
User 126949 AUC after training: 0.8541210129047967
User 126949 does not improve AUC. Reverting changes.
Training on augumented user 89218 19/50 current_auc = 0.8541666666666666
User 89218 AUC after training: 0.8540297053810567
User 89218 does not improve AUC. Reverting changes.
Training on augumented user 37822 20/50 current_auc = 0.8541666666666666
User 37822 AUC after training: 0.85404492330168
User 37822 does not improve AUC. Reverting changes.
Training on augumented user 81481 21/50 current_auc = 0.8541666666666666
User 81481 AUC after training: 0.8542427562697832
User 81481 improves AUC. Keeping the model.
Training on augumented user 2042 22/50 current_auc = 0.8542427562697832
User 2042 AUC after training: 0.8542427562697833
User 2042 improves AUC. Keeping the model.
Training on augumented user 57988 23/50 current_auc = 0.8542427562697833
User 57988 AUC after training: 0.8541210129047967
User 57988 does not improve AUC. Reverting changes.
Training on augumented user 1802 24/50 current_auc = 0.8542427562697833
User 1802 AUC after training: 0.8541514487460433
User 1802 does not improve AUC. Reverting changes.
Training on augumented user 112321 25/50 current_auc = 0.8542427562697833
User 112321 AUC after training: 0.8540601412223034
User 112321 does not improve AUC. Reverting changes.
Training on augumented user 63136 26/50 current_auc = 0.8542427562697833
User 63136 AUC after training: 0.8541210129047967
User 63136 does not improve AUC. Reverting changes.
Training on augumented user 6617 27/50 current_auc = 0.8542427562697833
User 6617 AUC after training: 0.85418188458729
User 6617 does not improve AUC. Reverting changes.
Training on augumented user 65693 28/50 current_auc = 0.8542427562697833
User 65693 AUC after training: 0.8540905770635501
User 65693 does not improve AUC. Reverting changes.
Training on augumented user 119717 29/50 current_auc = 0.8542427562697833
User 119717 AUC after training: 0.8541210129047967
User 119717 does not improve AUC. Reverting changes.
Training on augumented user 40218 30/50 current_auc = 0.8542427562697833
User 40218 AUC after training: 0.8542427562697832
User 40218 does not improve AUC. Reverting changes.
Training on augumented user 95467 31/50 current_auc = 0.8542427562697833
User 95467 AUC after training: 0.8540905770635501
User 95467 does not improve AUC. Reverting changes.
Training on augumented user 67827 32/50 current_auc = 0.8542427562697833
User 67827 AUC after training: 0.8538775261748235
User 67827 does not improve AUC. Reverting changes.
Training on augumented user 83998 33/50 current_auc = 0.8542427562697833
User 83998 AUC after training: 0.8542427562697833
User 83998 does not improve AUC. Reverting changes.
Training on augumented user 23069 34/50 current_auc = 0.8542427562697833
User 23069 AUC after training: 0.8542427562697833
User 23069 does not improve AUC. Reverting changes.
Training on augumented user 39553 35/50 current_auc = 0.8542427562697833
User 39553 AUC after training: 0.8540144874604334
User 39553 does not improve AUC. Reverting changes.
Training on augumented user 124032 36/50 current_auc = 0.8542427562697833
User 124032 AUC after training: 0.8543340637935233
User 124032 improves AUC. Keeping the model.
Training on augumented user 94788 37/50 current_auc = 0.8543340637935233
User 94788 AUC after training: 0.8543340637935233
User 94788 does not improve AUC. Reverting changes.
Training on augumented user 10630 38/50 current_auc = 0.8543340637935233
User 10630 AUC after training: 0.8540905770635501
User 10630 does not improve AUC. Reverting changes.
Training on augumented user 34512 39/50 current_auc = 0.8543340637935233
User 34512 AUC after training: 0.85427319211103
User 34512 does not improve AUC. Reverting changes.
Training on augumented user 29271 40/50 current_auc = 0.8543340637935233
User 29271 AUC after training: 0.8541514487460433
User 29271 does not improve AUC. Reverting changes.
Training on augumented user 54186 41/50 current_auc = 0.8543340637935233
User 54186 AUC after training: 0.8539992695398101
User 54186 does not improve AUC. Reverting changes.
Training on augumented user 8449 42/50 current_auc = 0.8543340637935233
User 8449 AUC after training: 0.8539536157779402
User 8449 does not improve AUC. Reverting changes.
Training on augumented user 5727 43/50 current_auc = 0.8543340637935233
User 5727 AUC after training: 0.8543644996347699
User 5727 improves AUC. Keeping the model.
Training on augumented user 102331 44/50 current_auc = 0.8543644996347699
User 102331 AUC after training: 0.8542731921110299
User 102331 does not improve AUC. Reverting changes.
Training on augumented user 10114 45/50 current_auc = 0.8543644996347699
User 10114 AUC after training: 0.8541514487460433
User 10114 does not improve AUC. Reverting changes.
Training on augumented user 67976 46/50 current_auc = 0.8543644996347699
User 67976 AUC after training: 0.8542123204285366
User 67976 does not improve AUC. Reverting changes.
Training on augumented user 118575 47/50 current_auc = 0.8543644996347699
User 118575 AUC after training: 0.8539383978573167
User 118575 does not improve AUC. Reverting changes.
Training on augumented user 49287 48/50 current_auc = 0.8543644996347699
User 49287 AUC after training: 0.8541514487460433
User 49287 does not improve AUC. Reverting changes.
Training on augumented user 106591 49/50 current_auc = 0.8543644996347699
User 106591 AUC after training: 0.8541818845872899
User 106591 does not improve AUC. Reverting changes.
[2024-12-02 19:59:12.694830] start test user 5832 260/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:59:13.351563] start test user 5832 260/568 recall augumented users by random, augumented_users = [132781, 36033, 87007, 14570, 102413, 73301, 120239, 116377, 49679, 110517, 47685, 123797, 61407, 51840, 65078, 108132, 9879, 12762, 71690, 7566, 12378, 44157, 33603, 6424, 120866, 56635, 72887, 26228, 93195, 118766, 68905, 99549, 31285, 115813, 124659, 115141, 27374, 49571, 57318, 37094, 97348, 107470, 134784, 15618, 98955, 116823, 28498, 13155, 30538, 59616]
[2024-12-02 19:59:13.366955] user = 5832 Cloud 260/568
[2024-12-02 19:59:13.387099] user = 5832 Local 260/568
[2024-12-02 19:59:13.524381] user = 5832 Local+ 260/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:59:15.561107] user = 5832 MPDA- 260/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4465937762825904
Training on augumented user 132781 0/50 current_auc = 0.4465937762825904
User 132781 AUC after training: 0.4432296047098402
User 132781 does not improve AUC. Reverting changes.
Training on augumented user 36033 1/50 current_auc = 0.4465937762825904
User 36033 AUC after training: 0.44659377628259045
User 36033 improves AUC. Keeping the model.
Training on augumented user 87007 2/50 current_auc = 0.44659377628259045
User 87007 AUC after training: 0.4482758620689655
User 87007 improves AUC. Keeping the model.
Training on augumented user 14570 3/50 current_auc = 0.4482758620689655
User 14570 AUC after training: 0.447434819175778
User 14570 does not improve AUC. Reverting changes.
Training on augumented user 102413 4/50 current_auc = 0.4482758620689655
User 102413 AUC after training: 0.447434819175778
User 102413 does not improve AUC. Reverting changes.
Training on augumented user 73301 5/50 current_auc = 0.4482758620689655
User 73301 AUC after training: 0.4381833473507149
User 73301 does not improve AUC. Reverting changes.
Training on augumented user 120239 6/50 current_auc = 0.4482758620689655
User 120239 AUC after training: 0.44238856181665265
User 120239 does not improve AUC. Reverting changes.
Training on augumented user 116377 7/50 current_auc = 0.4482758620689655
User 116377 AUC after training: 0.447434819175778
User 116377 does not improve AUC. Reverting changes.
Training on augumented user 49679 8/50 current_auc = 0.4482758620689655
User 49679 AUC after training: 0.44575273338940286
User 49679 does not improve AUC. Reverting changes.
Training on augumented user 110517 9/50 current_auc = 0.4482758620689655
User 110517 AUC after training: 0.447434819175778
User 110517 does not improve AUC. Reverting changes.
Training on augumented user 47685 10/50 current_auc = 0.4482758620689655
User 47685 AUC after training: 0.4482758620689655
User 47685 does not improve AUC. Reverting changes.
Training on augumented user 123797 11/50 current_auc = 0.4482758620689655
User 123797 AUC after training: 0.4482758620689655
User 123797 does not improve AUC. Reverting changes.
Training on augumented user 61407 12/50 current_auc = 0.4482758620689655
User 61407 AUC after training: 0.4457527333894029
User 61407 does not improve AUC. Reverting changes.
Training on augumented user 51840 13/50 current_auc = 0.4482758620689655
User 51840 AUC after training: 0.4449116904962153
User 51840 does not improve AUC. Reverting changes.
Training on augumented user 65078 14/50 current_auc = 0.4482758620689655
User 65078 AUC after training: 0.44911690496215306
User 65078 improves AUC. Keeping the model.
Training on augumented user 108132 15/50 current_auc = 0.44911690496215306
User 108132 AUC after training: 0.447434819175778
User 108132 does not improve AUC. Reverting changes.
Training on augumented user 9879 16/50 current_auc = 0.44911690496215306
User 9879 AUC after training: 0.4499579478553406
User 9879 improves AUC. Keeping the model.
Training on augumented user 12762 17/50 current_auc = 0.4499579478553406
User 12762 AUC after training: 0.4499579478553406
User 12762 does not improve AUC. Reverting changes.
Training on augumented user 71690 18/50 current_auc = 0.4499579478553406
User 71690 AUC after training: 0.45248107653490327
User 71690 improves AUC. Keeping the model.
Training on augumented user 7566 19/50 current_auc = 0.45248107653490327
User 7566 AUC after training: 0.4499579478553406
User 7566 does not improve AUC. Reverting changes.
Training on augumented user 12378 20/50 current_auc = 0.45248107653490327
User 12378 AUC after training: 0.4516400336417157
User 12378 does not improve AUC. Reverting changes.
Training on augumented user 44157 21/50 current_auc = 0.45248107653490327
User 44157 AUC after training: 0.4499579478553406
User 44157 does not improve AUC. Reverting changes.
Training on augumented user 33603 22/50 current_auc = 0.45248107653490327
User 33603 AUC after training: 0.45079899074852814
User 33603 does not improve AUC. Reverting changes.
Training on augumented user 6424 23/50 current_auc = 0.45248107653490327
User 6424 AUC after training: 0.4558452481076535
User 6424 improves AUC. Keeping the model.
Training on augumented user 120866 24/50 current_auc = 0.4558452481076535
User 120866 AUC after training: 0.4575273338940286
User 120866 improves AUC. Keeping the model.
Training on augumented user 56635 25/50 current_auc = 0.4575273338940286
User 56635 AUC after training: 0.45248107653490327
User 56635 does not improve AUC. Reverting changes.
Training on augumented user 72887 26/50 current_auc = 0.4575273338940286
User 72887 AUC after training: 0.4541631623212784
User 72887 does not improve AUC. Reverting changes.
Training on augumented user 26228 27/50 current_auc = 0.4575273338940286
User 26228 AUC after training: 0.45500420521446594
User 26228 does not improve AUC. Reverting changes.
Training on augumented user 93195 28/50 current_auc = 0.4575273338940286
User 93195 AUC after training: 0.45416316232127835
User 93195 does not improve AUC. Reverting changes.
Training on augumented user 118766 29/50 current_auc = 0.4575273338940286
User 118766 AUC after training: 0.4541631623212784
User 118766 does not improve AUC. Reverting changes.
Training on augumented user 68905 30/50 current_auc = 0.4575273338940286
User 68905 AUC after training: 0.456686291000841
User 68905 does not improve AUC. Reverting changes.
Training on augumented user 99549 31/50 current_auc = 0.4575273338940286
User 99549 AUC after training: 0.44743481917577793
User 99549 does not improve AUC. Reverting changes.
Training on augumented user 31285 32/50 current_auc = 0.4575273338940286
User 31285 AUC after training: 0.4541631623212784
User 31285 does not improve AUC. Reverting changes.
Training on augumented user 115813 33/50 current_auc = 0.4575273338940286
User 115813 AUC after training: 0.45248107653490327
User 115813 does not improve AUC. Reverting changes.
Training on augumented user 124659 34/50 current_auc = 0.4575273338940286
User 124659 AUC after training: 0.4415475189234651
User 124659 does not improve AUC. Reverting changes.
Training on augumented user 115141 35/50 current_auc = 0.4575273338940286
User 115141 AUC after training: 0.4541631623212784
User 115141 does not improve AUC. Reverting changes.
Training on augumented user 27374 36/50 current_auc = 0.4575273338940286
User 27374 AUC after training: 0.4533221194280908
User 27374 does not improve AUC. Reverting changes.
Training on augumented user 49571 37/50 current_auc = 0.4575273338940286
User 49571 AUC after training: 0.45668629100084107
User 49571 does not improve AUC. Reverting changes.
Training on augumented user 57318 38/50 current_auc = 0.4575273338940286
User 57318 AUC after training: 0.4592094196804037
User 57318 improves AUC. Keeping the model.
Training on augumented user 37094 39/50 current_auc = 0.4592094196804037
User 37094 AUC after training: 0.4608915054667788
User 37094 improves AUC. Keeping the model.
Training on augumented user 97348 40/50 current_auc = 0.4608915054667788
User 97348 AUC after training: 0.46341463414634143
User 97348 improves AUC. Keeping the model.
Training on augumented user 107470 41/50 current_auc = 0.46341463414634143
User 107470 AUC after training: 0.4625735912531539
User 107470 does not improve AUC. Reverting changes.
Training on augumented user 134784 42/50 current_auc = 0.46341463414634143
User 134784 AUC after training: 0.46341463414634143
User 134784 does not improve AUC. Reverting changes.
Training on augumented user 15618 43/50 current_auc = 0.46341463414634143
User 15618 AUC after training: 0.4592094196804037
User 15618 does not improve AUC. Reverting changes.
Training on augumented user 98955 44/50 current_auc = 0.46341463414634143
User 98955 AUC after training: 0.4625735912531539
User 98955 does not improve AUC. Reverting changes.
Training on augumented user 116823 45/50 current_auc = 0.46341463414634143
User 116823 AUC after training: 0.4608915054667788
User 116823 does not improve AUC. Reverting changes.
Training on augumented user 28498 46/50 current_auc = 0.46341463414634143
User 28498 AUC after training: 0.4608915054667788
User 28498 does not improve AUC. Reverting changes.
Training on augumented user 13155 47/50 current_auc = 0.46341463414634143
User 13155 AUC after training: 0.4457527333894029
User 13155 does not improve AUC. Reverting changes.
Training on augumented user 30538 48/50 current_auc = 0.46341463414634143
User 30538 AUC after training: 0.46173254835996635
User 30538 does not improve AUC. Reverting changes.
Training on augumented user 59616 49/50 current_auc = 0.46341463414634143
User 59616 AUC after training: 0.4600504625735913
User 59616 does not improve AUC. Reverting changes.
[2024-12-02 19:59:43.699155] start test user 5850 261/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:59:44.495368] start test user 5850 261/568 recall augumented users by random, augumented_users = [45421, 101026, 60094, 61128, 107163, 49176, 7936, 6239, 54602, 100406, 100375, 113332, 77285, 35942, 119933, 54217, 2609, 32967, 130360, 89379, 93380, 56767, 33605, 79933, 489, 137770, 63853, 81863, 67026, 36200, 90379, 52715, 133885, 55772, 15207, 5471, 115457, 113224, 126111, 135222, 14058, 5464, 4669, 10835, 119361, 62735, 52495, 27977, 18384, 70493]
[2024-12-02 19:59:44.535636] user = 5850 Cloud 261/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:59:44.556267] user = 5850 Local 261/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:59:44.602200] user = 5850 Local+ 261/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:59:46.963712] user = 5850 MPDA- 261/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 45421 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45421 AUC after training: 0.5
User 45421 does not improve AUC. Reverting changes.
Training on augumented user 101026 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101026 AUC after training: 0.5
User 101026 does not improve AUC. Reverting changes.
Training on augumented user 60094 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60094 AUC after training: 0.5
User 60094 does not improve AUC. Reverting changes.
Training on augumented user 61128 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61128 AUC after training: 0.5
User 61128 does not improve AUC. Reverting changes.
Training on augumented user 107163 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107163 AUC after training: 0.5
User 107163 does not improve AUC. Reverting changes.
Training on augumented user 49176 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49176 AUC after training: 0.5
User 49176 does not improve AUC. Reverting changes.
Training on augumented user 7936 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7936 AUC after training: 0.5
User 7936 does not improve AUC. Reverting changes.
Training on augumented user 6239 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6239 AUC after training: 0.5
User 6239 does not improve AUC. Reverting changes.
Training on augumented user 54602 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54602 AUC after training: 0.5
User 54602 does not improve AUC. Reverting changes.
Training on augumented user 100406 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100406 AUC after training: 0.5
User 100406 does not improve AUC. Reverting changes.
Training on augumented user 100375 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100375 AUC after training: 0.5
User 100375 does not improve AUC. Reverting changes.
Training on augumented user 113332 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113332 AUC after training: 0.5
User 113332 does not improve AUC. Reverting changes.
Training on augumented user 77285 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77285 AUC after training: 0.5
User 77285 does not improve AUC. Reverting changes.
Training on augumented user 35942 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35942 AUC after training: 0.5
User 35942 does not improve AUC. Reverting changes.
Training on augumented user 119933 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119933 AUC after training: 0.5
User 119933 does not improve AUC. Reverting changes.
Training on augumented user 54217 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54217 AUC after training: 0.5
User 54217 does not improve AUC. Reverting changes.
Training on augumented user 2609 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2609 AUC after training: 0.5
User 2609 does not improve AUC. Reverting changes.
Training on augumented user 32967 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32967 AUC after training: 0.5
User 32967 does not improve AUC. Reverting changes.
Training on augumented user 130360 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130360 AUC after training: 0.5
User 130360 does not improve AUC. Reverting changes.
Training on augumented user 89379 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89379 AUC after training: 0.5
User 89379 does not improve AUC. Reverting changes.
Training on augumented user 93380 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93380 AUC after training: 0.5
User 93380 does not improve AUC. Reverting changes.
Training on augumented user 56767 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56767 AUC after training: 0.5
User 56767 does not improve AUC. Reverting changes.
Training on augumented user 33605 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33605 AUC after training: 0.5
User 33605 does not improve AUC. Reverting changes.
Training on augumented user 79933 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79933 AUC after training: 0.5
User 79933 does not improve AUC. Reverting changes.
Training on augumented user 489 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 489 AUC after training: 0.5
User 489 does not improve AUC. Reverting changes.
Training on augumented user 137770 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137770 AUC after training: 0.5
User 137770 does not improve AUC. Reverting changes.
Training on augumented user 63853 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63853 AUC after training: 0.5
User 63853 does not improve AUC. Reverting changes.
Training on augumented user 81863 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81863 AUC after training: 0.5
User 81863 does not improve AUC. Reverting changes.
Training on augumented user 67026 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67026 AUC after training: 0.5
User 67026 does not improve AUC. Reverting changes.
Training on augumented user 36200 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36200 AUC after training: 0.5
User 36200 does not improve AUC. Reverting changes.
Training on augumented user 90379 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90379 AUC after training: 0.5
User 90379 does not improve AUC. Reverting changes.
Training on augumented user 52715 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52715 AUC after training: 0.5
User 52715 does not improve AUC. Reverting changes.
Training on augumented user 133885 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133885 AUC after training: 0.5
User 133885 does not improve AUC. Reverting changes.
Training on augumented user 55772 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55772 AUC after training: 0.5
User 55772 does not improve AUC. Reverting changes.
Training on augumented user 15207 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15207 AUC after training: 0.5
User 15207 does not improve AUC. Reverting changes.
Training on augumented user 5471 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5471 AUC after training: 0.5
User 5471 does not improve AUC. Reverting changes.
Training on augumented user 115457 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115457 AUC after training: 0.5
User 115457 does not improve AUC. Reverting changes.
Training on augumented user 113224 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113224 AUC after training: 0.5
User 113224 does not improve AUC. Reverting changes.
Training on augumented user 126111 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126111 AUC after training: 0.5
User 126111 does not improve AUC. Reverting changes.
Training on augumented user 135222 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135222 AUC after training: 0.5
User 135222 does not improve AUC. Reverting changes.
Training on augumented user 14058 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14058 AUC after training: 0.5
User 14058 does not improve AUC. Reverting changes.
Training on augumented user 5464 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5464 AUC after training: 0.5
User 5464 does not improve AUC. Reverting changes.
Training on augumented user 4669 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4669 AUC after training: 0.5
User 4669 does not improve AUC. Reverting changes.
Training on augumented user 10835 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10835 AUC after training: 0.5
User 10835 does not improve AUC. Reverting changes.
Training on augumented user 119361 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119361 AUC after training: 0.5
User 119361 does not improve AUC. Reverting changes.
Training on augumented user 62735 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62735 AUC after training: 0.5
User 62735 does not improve AUC. Reverting changes.
Training on augumented user 52495 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52495 AUC after training: 0.5
User 52495 does not improve AUC. Reverting changes.
Training on augumented user 27977 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27977 AUC after training: 0.5
User 27977 does not improve AUC. Reverting changes.
Training on augumented user 18384 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18384 AUC after training: 0.5
User 18384 does not improve AUC. Reverting changes.
Training on augumented user 70493 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70493 AUC after training: 0.5
User 70493 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:00:17.060272] start test user 5929 262/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:00:17.479611] start test user 5929 262/568 recall augumented users by random, augumented_users = [54689, 81327, 39677, 137919, 11615, 59386, 26260, 15825, 105867, 32356, 95900, 16016, 42307, 103734, 11739, 11669, 93928, 83411, 7060, 62074, 84773, 110958, 34169, 95944, 56770, 89435, 96237, 5769, 122273, 72083, 20067, 42782, 111141, 108102, 42207, 107959, 125758, 128533, 86986, 102568, 99411, 131888, 64414, 76144, 84220, 45047, 74006, 903, 11658, 13893]
[2024-12-02 20:00:17.494747] user = 5929 Cloud 262/568
[2024-12-02 20:00:17.504753] user = 5929 Local 262/568
[2024-12-02 20:00:17.595015] user = 5929 Local+ 262/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:00:19.920412] user = 5929 MPDA- 262/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5714285714285714
Training on augumented user 54689 0/50 current_auc = 0.5714285714285714
User 54689 AUC after training: 0.5714285714285714
User 54689 does not improve AUC. Reverting changes.
Training on augumented user 81327 1/50 current_auc = 0.5714285714285714
User 81327 AUC after training: 0.5714285714285714
User 81327 does not improve AUC. Reverting changes.
Training on augumented user 39677 2/50 current_auc = 0.5714285714285714
User 39677 AUC after training: 0.5714285714285714
User 39677 does not improve AUC. Reverting changes.
Training on augumented user 137919 3/50 current_auc = 0.5714285714285714
User 137919 AUC after training: 0.5952380952380952
User 137919 improves AUC. Keeping the model.
Training on augumented user 11615 4/50 current_auc = 0.5952380952380952
User 11615 AUC after training: 0.5952380952380952
User 11615 does not improve AUC. Reverting changes.
Training on augumented user 59386 5/50 current_auc = 0.5952380952380952
User 59386 AUC after training: 0.5952380952380952
User 59386 does not improve AUC. Reverting changes.
Training on augumented user 26260 6/50 current_auc = 0.5952380952380952
User 26260 AUC after training: 0.5952380952380952
User 26260 does not improve AUC. Reverting changes.
Training on augumented user 15825 7/50 current_auc = 0.5952380952380952
User 15825 AUC after training: 0.5952380952380952
User 15825 does not improve AUC. Reverting changes.
Training on augumented user 105867 8/50 current_auc = 0.5952380952380952
User 105867 AUC after training: 0.5952380952380952
User 105867 does not improve AUC. Reverting changes.
Training on augumented user 32356 9/50 current_auc = 0.5952380952380952
User 32356 AUC after training: 0.5952380952380952
User 32356 does not improve AUC. Reverting changes.
Training on augumented user 95900 10/50 current_auc = 0.5952380952380952
User 95900 AUC after training: 0.5714285714285714
User 95900 does not improve AUC. Reverting changes.
Training on augumented user 16016 11/50 current_auc = 0.5952380952380952
User 16016 AUC after training: 0.5714285714285714
User 16016 does not improve AUC. Reverting changes.
Training on augumented user 42307 12/50 current_auc = 0.5952380952380952
User 42307 AUC after training: 0.5714285714285714
User 42307 does not improve AUC. Reverting changes.
Training on augumented user 103734 13/50 current_auc = 0.5952380952380952
User 103734 AUC after training: 0.5952380952380952
User 103734 does not improve AUC. Reverting changes.
Training on augumented user 11739 14/50 current_auc = 0.5952380952380952
User 11739 AUC after training: 0.5952380952380952
User 11739 does not improve AUC. Reverting changes.
Training on augumented user 11669 15/50 current_auc = 0.5952380952380952
User 11669 AUC after training: 0.5952380952380952
User 11669 does not improve AUC. Reverting changes.
Training on augumented user 93928 16/50 current_auc = 0.5952380952380952
User 93928 AUC after training: 0.5714285714285714
User 93928 does not improve AUC. Reverting changes.
Training on augumented user 83411 17/50 current_auc = 0.5952380952380952
User 83411 AUC after training: 0.5476190476190477
User 83411 does not improve AUC. Reverting changes.
Training on augumented user 7060 18/50 current_auc = 0.5952380952380952
User 7060 AUC after training: 0.5952380952380952
User 7060 does not improve AUC. Reverting changes.
Training on augumented user 62074 19/50 current_auc = 0.5952380952380952
User 62074 AUC after training: 0.5952380952380952
User 62074 does not improve AUC. Reverting changes.
Training on augumented user 84773 20/50 current_auc = 0.5952380952380952
User 84773 AUC after training: 0.5476190476190477
User 84773 does not improve AUC. Reverting changes.
Training on augumented user 110958 21/50 current_auc = 0.5952380952380952
User 110958 AUC after training: 0.5714285714285714
User 110958 does not improve AUC. Reverting changes.
Training on augumented user 34169 22/50 current_auc = 0.5952380952380952
User 34169 AUC after training: 0.5952380952380952
User 34169 does not improve AUC. Reverting changes.
Training on augumented user 95944 23/50 current_auc = 0.5952380952380952
User 95944 AUC after training: 0.5952380952380952
User 95944 does not improve AUC. Reverting changes.
Training on augumented user 56770 24/50 current_auc = 0.5952380952380952
User 56770 AUC after training: 0.5952380952380952
User 56770 does not improve AUC. Reverting changes.
Training on augumented user 89435 25/50 current_auc = 0.5952380952380952
User 89435 AUC after training: 0.5952380952380952
User 89435 does not improve AUC. Reverting changes.
Training on augumented user 96237 26/50 current_auc = 0.5952380952380952
User 96237 AUC after training: 0.5952380952380952
User 96237 does not improve AUC. Reverting changes.
Training on augumented user 5769 27/50 current_auc = 0.5952380952380952
User 5769 AUC after training: 0.5952380952380952
User 5769 does not improve AUC. Reverting changes.
Training on augumented user 122273 28/50 current_auc = 0.5952380952380952
User 122273 AUC after training: 0.5952380952380952
User 122273 does not improve AUC. Reverting changes.
Training on augumented user 72083 29/50 current_auc = 0.5952380952380952
User 72083 AUC after training: 0.5952380952380952
User 72083 does not improve AUC. Reverting changes.
Training on augumented user 20067 30/50 current_auc = 0.5952380952380952
User 20067 AUC after training: 0.5714285714285714
User 20067 does not improve AUC. Reverting changes.
Training on augumented user 42782 31/50 current_auc = 0.5952380952380952
User 42782 AUC after training: 0.5714285714285714
User 42782 does not improve AUC. Reverting changes.
Training on augumented user 111141 32/50 current_auc = 0.5952380952380952
User 111141 AUC after training: 0.6190476190476191
User 111141 improves AUC. Keeping the model.
Training on augumented user 108102 33/50 current_auc = 0.6190476190476191
User 108102 AUC after training: 0.6190476190476191
User 108102 does not improve AUC. Reverting changes.
Training on augumented user 42207 34/50 current_auc = 0.6190476190476191
User 42207 AUC after training: 0.6190476190476191
User 42207 does not improve AUC. Reverting changes.
Training on augumented user 107959 35/50 current_auc = 0.6190476190476191
User 107959 AUC after training: 0.6190476190476191
User 107959 does not improve AUC. Reverting changes.
Training on augumented user 125758 36/50 current_auc = 0.6190476190476191
User 125758 AUC after training: 0.6190476190476191
User 125758 does not improve AUC. Reverting changes.
Training on augumented user 128533 37/50 current_auc = 0.6190476190476191
User 128533 AUC after training: 0.5952380952380952
User 128533 does not improve AUC. Reverting changes.
Training on augumented user 86986 38/50 current_auc = 0.6190476190476191
User 86986 AUC after training: 0.6190476190476191
User 86986 does not improve AUC. Reverting changes.
Training on augumented user 102568 39/50 current_auc = 0.6190476190476191
User 102568 AUC after training: 0.6190476190476191
User 102568 does not improve AUC. Reverting changes.
Training on augumented user 99411 40/50 current_auc = 0.6190476190476191
User 99411 AUC after training: 0.6190476190476191
User 99411 does not improve AUC. Reverting changes.
Training on augumented user 131888 41/50 current_auc = 0.6190476190476191
User 131888 AUC after training: 0.6190476190476191
User 131888 does not improve AUC. Reverting changes.
Training on augumented user 64414 42/50 current_auc = 0.6190476190476191
User 64414 AUC after training: 0.6190476190476191
User 64414 does not improve AUC. Reverting changes.
Training on augumented user 76144 43/50 current_auc = 0.6190476190476191
User 76144 AUC after training: 0.5952380952380952
User 76144 does not improve AUC. Reverting changes.
Training on augumented user 84220 44/50 current_auc = 0.6190476190476191
User 84220 AUC after training: 0.6190476190476191
User 84220 does not improve AUC. Reverting changes.
Training on augumented user 45047 45/50 current_auc = 0.6190476190476191
User 45047 AUC after training: 0.6190476190476191
User 45047 does not improve AUC. Reverting changes.
Training on augumented user 74006 46/50 current_auc = 0.6190476190476191
User 74006 AUC after training: 0.6190476190476191
User 74006 does not improve AUC. Reverting changes.
Training on augumented user 903 47/50 current_auc = 0.6190476190476191
User 903 AUC after training: 0.5952380952380952
User 903 does not improve AUC. Reverting changes.
Training on augumented user 11658 48/50 current_auc = 0.6190476190476191
User 11658 AUC after training: 0.6190476190476191
User 11658 does not improve AUC. Reverting changes.
Training on augumented user 13893 49/50 current_auc = 0.6190476190476191
User 13893 AUC after training: 0.6190476190476191
User 13893 does not improve AUC. Reverting changes.
[2024-12-02 20:00:43.465590] start test user 5952 263/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:00:43.921453] start test user 5952 263/568 recall augumented users by random, augumented_users = [134464, 125668, 91070, 98676, 1389, 74221, 122133, 73169, 101047, 104321, 53777, 4620, 102866, 117046, 27328, 52163, 51194, 8614, 127504, 79563, 120685, 49902, 85606, 20934, 37865, 42325, 4482, 37181, 7026, 90755, 112061, 117839, 21741, 42902, 136986, 67117, 64253, 94533, 9106, 9707, 122806, 137082, 79252, 1334, 129717, 47450, 90656, 93760, 124039, 29034]
[2024-12-02 20:00:43.936550] user = 5952 Cloud 263/568
[2024-12-02 20:00:43.950733] user = 5952 Local 263/568
[2024-12-02 20:00:44.010049] user = 5952 Local+ 263/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:00:46.778994] user = 5952 MPDA- 263/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.71875
Training on augumented user 134464 0/50 current_auc = 0.71875
User 134464 AUC after training: 0.71875
User 134464 does not improve AUC. Reverting changes.
Training on augumented user 125668 1/50 current_auc = 0.71875
User 125668 AUC after training: 0.71875
User 125668 does not improve AUC. Reverting changes.
Training on augumented user 91070 2/50 current_auc = 0.71875
User 91070 AUC after training: 0.7210648148148149
User 91070 improves AUC. Keeping the model.
Training on augumented user 98676 3/50 current_auc = 0.7210648148148149
User 98676 AUC after training: 0.7214506172839505
User 98676 improves AUC. Keeping the model.
Training on augumented user 1389 4/50 current_auc = 0.7214506172839505
User 1389 AUC after training: 0.7202932098765432
User 1389 does not improve AUC. Reverting changes.
Training on augumented user 74221 5/50 current_auc = 0.7214506172839505
User 74221 AUC after training: 0.7202932098765431
User 74221 does not improve AUC. Reverting changes.
Training on augumented user 122133 6/50 current_auc = 0.7214506172839505
User 122133 AUC after training: 0.7210648148148149
User 122133 does not improve AUC. Reverting changes.
Training on augumented user 73169 7/50 current_auc = 0.7214506172839505
User 73169 AUC after training: 0.7229938271604939
User 73169 improves AUC. Keeping the model.
Training on augumented user 101047 8/50 current_auc = 0.7229938271604939
User 101047 AUC after training: 0.7210648148148148
User 101047 does not improve AUC. Reverting changes.
Training on augumented user 104321 9/50 current_auc = 0.7229938271604939
User 104321 AUC after training: 0.7202932098765432
User 104321 does not improve AUC. Reverting changes.
Training on augumented user 53777 10/50 current_auc = 0.7229938271604939
User 53777 AUC after training: 0.7214506172839507
User 53777 does not improve AUC. Reverting changes.
Training on augumented user 4620 11/50 current_auc = 0.7229938271604939
User 4620 AUC after training: 0.720679012345679
User 4620 does not improve AUC. Reverting changes.
Training on augumented user 102866 12/50 current_auc = 0.7229938271604939
User 102866 AUC after training: 0.7210648148148149
User 102866 does not improve AUC. Reverting changes.
Training on augumented user 117046 13/50 current_auc = 0.7229938271604939
User 117046 AUC after training: 0.720679012345679
User 117046 does not improve AUC. Reverting changes.
Training on augumented user 27328 14/50 current_auc = 0.7229938271604939
User 27328 AUC after training: 0.720679012345679
User 27328 does not improve AUC. Reverting changes.
Training on augumented user 52163 15/50 current_auc = 0.7229938271604939
User 52163 AUC after training: 0.7218364197530864
User 52163 does not improve AUC. Reverting changes.
Training on augumented user 51194 16/50 current_auc = 0.7229938271604939
User 51194 AUC after training: 0.7195216049382716
User 51194 does not improve AUC. Reverting changes.
Training on augumented user 8614 17/50 current_auc = 0.7229938271604939
User 8614 AUC after training: 0.7210648148148149
User 8614 does not improve AUC. Reverting changes.
Training on augumented user 127504 18/50 current_auc = 0.7229938271604939
User 127504 AUC after training: 0.7214506172839505
User 127504 does not improve AUC. Reverting changes.
Training on augumented user 79563 19/50 current_auc = 0.7229938271604939
User 79563 AUC after training: 0.7202932098765432
User 79563 does not improve AUC. Reverting changes.
Training on augumented user 120685 20/50 current_auc = 0.7229938271604939
User 120685 AUC after training: 0.7229938271604939
User 120685 does not improve AUC. Reverting changes.
Training on augumented user 49902 21/50 current_auc = 0.7229938271604939
User 49902 AUC after training: 0.720679012345679
User 49902 does not improve AUC. Reverting changes.
Training on augumented user 85606 22/50 current_auc = 0.7229938271604939
User 85606 AUC after training: 0.720679012345679
User 85606 does not improve AUC. Reverting changes.
Training on augumented user 20934 23/50 current_auc = 0.7229938271604939
User 20934 AUC after training: 0.720679012345679
User 20934 does not improve AUC. Reverting changes.
Training on augumented user 37865 24/50 current_auc = 0.7229938271604939
User 37865 AUC after training: 0.7199074074074073
User 37865 does not improve AUC. Reverting changes.
Training on augumented user 42325 25/50 current_auc = 0.7229938271604939
User 42325 AUC after training: 0.720679012345679
User 42325 does not improve AUC. Reverting changes.
Training on augumented user 4482 26/50 current_auc = 0.7229938271604939
User 4482 AUC after training: 0.7222222222222222
User 4482 does not improve AUC. Reverting changes.
Training on augumented user 37181 27/50 current_auc = 0.7229938271604939
User 37181 AUC after training: 0.7202932098765432
User 37181 does not improve AUC. Reverting changes.
Training on augumented user 7026 28/50 current_auc = 0.7229938271604939
User 7026 AUC after training: 0.720679012345679
User 7026 does not improve AUC. Reverting changes.
Training on augumented user 90755 29/50 current_auc = 0.7229938271604939
User 90755 AUC after training: 0.7199074074074074
User 90755 does not improve AUC. Reverting changes.
Training on augumented user 112061 30/50 current_auc = 0.7229938271604939
User 112061 AUC after training: 0.720679012345679
User 112061 does not improve AUC. Reverting changes.
Training on augumented user 117839 31/50 current_auc = 0.7229938271604939
User 117839 AUC after training: 0.720679012345679
User 117839 does not improve AUC. Reverting changes.
Training on augumented user 21741 32/50 current_auc = 0.7229938271604939
User 21741 AUC after training: 0.7214506172839505
User 21741 does not improve AUC. Reverting changes.
Training on augumented user 42902 33/50 current_auc = 0.7229938271604939
User 42902 AUC after training: 0.7202932098765432
User 42902 does not improve AUC. Reverting changes.
Training on augumented user 136986 34/50 current_auc = 0.7229938271604939
User 136986 AUC after training: 0.7210648148148149
User 136986 does not improve AUC. Reverting changes.
Training on augumented user 67117 35/50 current_auc = 0.7229938271604939
User 67117 AUC after training: 0.7199074074074074
User 67117 does not improve AUC. Reverting changes.
Training on augumented user 64253 36/50 current_auc = 0.7229938271604939
User 64253 AUC after training: 0.7191358024691358
User 64253 does not improve AUC. Reverting changes.
Training on augumented user 94533 37/50 current_auc = 0.7229938271604939
User 94533 AUC after training: 0.7199074074074074
User 94533 does not improve AUC. Reverting changes.
Training on augumented user 9106 38/50 current_auc = 0.7229938271604939
User 9106 AUC after training: 0.71875
User 9106 does not improve AUC. Reverting changes.
Training on augumented user 9707 39/50 current_auc = 0.7229938271604939
User 9707 AUC after training: 0.7202932098765432
User 9707 does not improve AUC. Reverting changes.
Training on augumented user 122806 40/50 current_auc = 0.7229938271604939
User 122806 AUC after training: 0.7191358024691358
User 122806 does not improve AUC. Reverting changes.
Training on augumented user 137082 41/50 current_auc = 0.7229938271604939
User 137082 AUC after training: 0.7202932098765432
User 137082 does not improve AUC. Reverting changes.
Training on augumented user 79252 42/50 current_auc = 0.7229938271604939
User 79252 AUC after training: 0.720679012345679
User 79252 does not improve AUC. Reverting changes.
Training on augumented user 1334 43/50 current_auc = 0.7229938271604939
User 1334 AUC after training: 0.7191358024691359
User 1334 does not improve AUC. Reverting changes.
Training on augumented user 129717 44/50 current_auc = 0.7229938271604939
User 129717 AUC after training: 0.7210648148148149
User 129717 does not improve AUC. Reverting changes.
Training on augumented user 47450 45/50 current_auc = 0.7229938271604939
User 47450 AUC after training: 0.7172067901234568
User 47450 does not improve AUC. Reverting changes.
Training on augumented user 90656 46/50 current_auc = 0.7229938271604939
User 90656 AUC after training: 0.720679012345679
User 90656 does not improve AUC. Reverting changes.
Training on augumented user 93760 47/50 current_auc = 0.7229938271604939
User 93760 AUC after training: 0.7195216049382716
User 93760 does not improve AUC. Reverting changes.
Training on augumented user 124039 48/50 current_auc = 0.7229938271604939
User 124039 AUC after training: 0.7202932098765432
User 124039 does not improve AUC. Reverting changes.
Training on augumented user 29034 49/50 current_auc = 0.7229938271604939
User 29034 AUC after training: 0.7229938271604939
User 29034 does not improve AUC. Reverting changes.
[2024-12-02 20:01:18.293898] start test user 5991 264/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:01:18.829097] start test user 5991 264/568 recall augumented users by random, augumented_users = [43970, 34092, 6226, 9880, 98777, 36177, 40589, 57602, 13584, 68657, 34399, 43551, 41048, 87058, 10141, 95188, 54973, 96944, 18206, 116977, 135253, 52139, 14064, 17810, 39273, 124991, 44754, 10003, 131622, 5694, 80923, 115345, 54590, 40056, 81530, 132352, 105866, 135795, 52208, 59524, 126239, 27262, 21235, 85468, 71031, 455, 118175, 94737, 2345, 53908]
[2024-12-02 20:01:18.851009] user = 5991 Cloud 264/568
[2024-12-02 20:01:18.872147] user = 5991 Local 264/568
[2024-12-02 20:01:18.934535] user = 5991 Local+ 264/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:01:21.799489] user = 5991 MPDA- 264/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7616279069767442
Training on augumented user 43970 0/50 current_auc = 0.7616279069767442
User 43970 AUC after training: 0.7629198966408268
User 43970 improves AUC. Keeping the model.
Training on augumented user 34092 1/50 current_auc = 0.7629198966408268
User 34092 AUC after training: 0.7622739018087855
User 34092 does not improve AUC. Reverting changes.
Training on augumented user 6226 2/50 current_auc = 0.7629198966408268
User 6226 AUC after training: 0.7629198966408269
User 6226 improves AUC. Keeping the model.
Training on augumented user 9880 3/50 current_auc = 0.7629198966408269
User 9880 AUC after training: 0.7616279069767441
User 9880 does not improve AUC. Reverting changes.
Training on augumented user 98777 4/50 current_auc = 0.7629198966408269
User 98777 AUC after training: 0.7609819121447029
User 98777 does not improve AUC. Reverting changes.
Training on augumented user 36177 5/50 current_auc = 0.7629198966408269
User 36177 AUC after training: 0.7635658914728682
User 36177 improves AUC. Keeping the model.
Training on augumented user 40589 6/50 current_auc = 0.7635658914728682
User 40589 AUC after training: 0.7635658914728682
User 40589 does not improve AUC. Reverting changes.
Training on augumented user 57602 7/50 current_auc = 0.7635658914728682
User 57602 AUC after training: 0.7629198966408269
User 57602 does not improve AUC. Reverting changes.
Training on augumented user 13584 8/50 current_auc = 0.7635658914728682
User 13584 AUC after training: 0.7642118863049095
User 13584 improves AUC. Keeping the model.
Training on augumented user 68657 9/50 current_auc = 0.7642118863049095
User 68657 AUC after training: 0.7629198966408269
User 68657 does not improve AUC. Reverting changes.
Training on augumented user 34399 10/50 current_auc = 0.7642118863049095
User 34399 AUC after training: 0.7622739018087855
User 34399 does not improve AUC. Reverting changes.
Training on augumented user 43551 11/50 current_auc = 0.7642118863049095
User 43551 AUC after training: 0.7642118863049095
User 43551 does not improve AUC. Reverting changes.
Training on augumented user 41048 12/50 current_auc = 0.7642118863049095
User 41048 AUC after training: 0.7635658914728682
User 41048 does not improve AUC. Reverting changes.
Training on augumented user 87058 13/50 current_auc = 0.7642118863049095
User 87058 AUC after training: 0.7642118863049095
User 87058 does not improve AUC. Reverting changes.
Training on augumented user 10141 14/50 current_auc = 0.7642118863049095
User 10141 AUC after training: 0.7609819121447029
User 10141 does not improve AUC. Reverting changes.
Training on augumented user 95188 15/50 current_auc = 0.7642118863049095
User 95188 AUC after training: 0.7642118863049095
User 95188 does not improve AUC. Reverting changes.
Training on augumented user 54973 16/50 current_auc = 0.7642118863049095
User 54973 AUC after training: 0.7642118863049095
User 54973 does not improve AUC. Reverting changes.
Training on augumented user 96944 17/50 current_auc = 0.7642118863049095
User 96944 AUC after training: 0.7655038759689923
User 96944 improves AUC. Keeping the model.
Training on augumented user 18206 18/50 current_auc = 0.7655038759689923
User 18206 AUC after training: 0.7642118863049095
User 18206 does not improve AUC. Reverting changes.
Training on augumented user 116977 19/50 current_auc = 0.7655038759689923
User 116977 AUC after training: 0.7648578811369509
User 116977 does not improve AUC. Reverting changes.
Training on augumented user 135253 20/50 current_auc = 0.7655038759689923
User 135253 AUC after training: 0.7642118863049095
User 135253 does not improve AUC. Reverting changes.
Training on augumented user 52139 21/50 current_auc = 0.7655038759689923
User 52139 AUC after training: 0.7629198966408269
User 52139 does not improve AUC. Reverting changes.
Training on augumented user 14064 22/50 current_auc = 0.7655038759689923
User 14064 AUC after training: 0.7648578811369509
User 14064 does not improve AUC. Reverting changes.
Training on augumented user 17810 23/50 current_auc = 0.7655038759689923
User 17810 AUC after training: 0.7642118863049095
User 17810 does not improve AUC. Reverting changes.
Training on augumented user 39273 24/50 current_auc = 0.7655038759689923
User 39273 AUC after training: 0.7629198966408269
User 39273 does not improve AUC. Reverting changes.
Training on augumented user 124991 25/50 current_auc = 0.7655038759689923
User 124991 AUC after training: 0.7629198966408268
User 124991 does not improve AUC. Reverting changes.
Training on augumented user 44754 26/50 current_auc = 0.7655038759689923
User 44754 AUC after training: 0.7629198966408269
User 44754 does not improve AUC. Reverting changes.
Training on augumented user 10003 27/50 current_auc = 0.7655038759689923
User 10003 AUC after training: 0.7642118863049097
User 10003 does not improve AUC. Reverting changes.
Training on augumented user 131622 28/50 current_auc = 0.7655038759689923
User 131622 AUC after training: 0.7642118863049095
User 131622 does not improve AUC. Reverting changes.
Training on augumented user 5694 29/50 current_auc = 0.7655038759689923
User 5694 AUC after training: 0.7629198966408269
User 5694 does not improve AUC. Reverting changes.
Training on augumented user 80923 30/50 current_auc = 0.7655038759689923
User 80923 AUC after training: 0.7629198966408268
User 80923 does not improve AUC. Reverting changes.
Training on augumented user 115345 31/50 current_auc = 0.7655038759689923
User 115345 AUC after training: 0.7648578811369509
User 115345 does not improve AUC. Reverting changes.
Training on augumented user 54590 32/50 current_auc = 0.7655038759689923
User 54590 AUC after training: 0.7609819121447028
User 54590 does not improve AUC. Reverting changes.
Training on augumented user 40056 33/50 current_auc = 0.7655038759689923
User 40056 AUC after training: 0.7648578811369509
User 40056 does not improve AUC. Reverting changes.
Training on augumented user 81530 34/50 current_auc = 0.7655038759689923
User 81530 AUC after training: 0.7648578811369509
User 81530 does not improve AUC. Reverting changes.
Training on augumented user 132352 35/50 current_auc = 0.7655038759689923
User 132352 AUC after training: 0.7642118863049095
User 132352 does not improve AUC. Reverting changes.
Training on augumented user 105866 36/50 current_auc = 0.7655038759689923
User 105866 AUC after training: 0.7635658914728681
User 105866 does not improve AUC. Reverting changes.
Training on augumented user 135795 37/50 current_auc = 0.7655038759689923
User 135795 AUC after training: 0.7616279069767442
User 135795 does not improve AUC. Reverting changes.
Training on augumented user 52208 38/50 current_auc = 0.7655038759689923
User 52208 AUC after training: 0.7635658914728682
User 52208 does not improve AUC. Reverting changes.
Training on augumented user 59524 39/50 current_auc = 0.7655038759689923
User 59524 AUC after training: 0.7622739018087855
User 59524 does not improve AUC. Reverting changes.
Training on augumented user 126239 40/50 current_auc = 0.7655038759689923
User 126239 AUC after training: 0.764857881136951
User 126239 does not improve AUC. Reverting changes.
Training on augumented user 27262 41/50 current_auc = 0.7655038759689923
User 27262 AUC after training: 0.7635658914728681
User 27262 does not improve AUC. Reverting changes.
Training on augumented user 21235 42/50 current_auc = 0.7655038759689923
User 21235 AUC after training: 0.7648578811369509
User 21235 does not improve AUC. Reverting changes.
Training on augumented user 85468 43/50 current_auc = 0.7655038759689923
User 85468 AUC after training: 0.7622739018087855
User 85468 does not improve AUC. Reverting changes.
Training on augumented user 71031 44/50 current_auc = 0.7655038759689923
User 71031 AUC after training: 0.7596899224806202
User 71031 does not improve AUC. Reverting changes.
Training on augumented user 455 45/50 current_auc = 0.7655038759689923
User 455 AUC after training: 0.7622739018087855
User 455 does not improve AUC. Reverting changes.
Training on augumented user 118175 46/50 current_auc = 0.7655038759689923
User 118175 AUC after training: 0.7635658914728682
User 118175 does not improve AUC. Reverting changes.
Training on augumented user 94737 47/50 current_auc = 0.7655038759689923
User 94737 AUC after training: 0.7635658914728682
User 94737 does not improve AUC. Reverting changes.
Training on augumented user 2345 48/50 current_auc = 0.7655038759689923
User 2345 AUC after training: 0.7642118863049095
User 2345 does not improve AUC. Reverting changes.
Training on augumented user 53908 49/50 current_auc = 0.7655038759689923
User 53908 AUC after training: 0.7629198966408268
User 53908 does not improve AUC. Reverting changes.
[2024-12-02 20:01:49.457903] start test user 5995 265/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:01:49.872721] start test user 5995 265/568 recall augumented users by random, augumented_users = [138330, 49413, 88299, 30468, 9655, 13551, 16416, 57600, 42575, 68418, 134142, 17980, 47535, 70241, 81487, 125633, 7625, 959, 83313, 34726, 54200, 60315, 57469, 55738, 12692, 21620, 64983, 1264, 17499, 14221, 4719, 92004, 93873, 32134, 120181, 76694, 112968, 75376, 82934, 82000, 116809, 107038, 7822, 5334, 86527, 24223, 73505, 110117, 133987, 117317]
[2024-12-02 20:01:49.887689] user = 5995 Cloud 265/568
[2024-12-02 20:01:49.898214] user = 5995 Local 265/568
[2024-12-02 20:01:49.966737] user = 5995 Local+ 265/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:01:52.261153] user = 5995 MPDA- 265/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8991596638655461
Training on augumented user 138330 0/50 current_auc = 0.8991596638655461
User 138330 AUC after training: 0.8991596638655461
User 138330 does not improve AUC. Reverting changes.
Training on augumented user 49413 1/50 current_auc = 0.8991596638655461
User 49413 AUC after training: 0.8991596638655461
User 49413 does not improve AUC. Reverting changes.
Training on augumented user 88299 2/50 current_auc = 0.8991596638655461
User 88299 AUC after training: 0.8991596638655461
User 88299 does not improve AUC. Reverting changes.
Training on augumented user 30468 3/50 current_auc = 0.8991596638655461
User 30468 AUC after training: 0.8991596638655461
User 30468 does not improve AUC. Reverting changes.
Training on augumented user 9655 4/50 current_auc = 0.8991596638655461
User 9655 AUC after training: 0.8907563025210083
User 9655 does not improve AUC. Reverting changes.
Training on augumented user 13551 5/50 current_auc = 0.8991596638655461
User 13551 AUC after training: 0.8991596638655461
User 13551 does not improve AUC. Reverting changes.
Training on augumented user 16416 6/50 current_auc = 0.8991596638655461
User 16416 AUC after training: 0.8907563025210083
User 16416 does not improve AUC. Reverting changes.
Training on augumented user 57600 7/50 current_auc = 0.8991596638655461
User 57600 AUC after training: 0.8991596638655461
User 57600 does not improve AUC. Reverting changes.
Training on augumented user 42575 8/50 current_auc = 0.8991596638655461
User 42575 AUC after training: 0.8991596638655461
User 42575 does not improve AUC. Reverting changes.
Training on augumented user 68418 9/50 current_auc = 0.8991596638655461
User 68418 AUC after training: 0.8991596638655461
User 68418 does not improve AUC. Reverting changes.
Training on augumented user 134142 10/50 current_auc = 0.8991596638655461
User 134142 AUC after training: 0.8991596638655461
User 134142 does not improve AUC. Reverting changes.
Training on augumented user 17980 11/50 current_auc = 0.8991596638655461
User 17980 AUC after training: 0.8991596638655461
User 17980 does not improve AUC. Reverting changes.
Training on augumented user 47535 12/50 current_auc = 0.8991596638655461
User 47535 AUC after training: 0.8991596638655461
User 47535 does not improve AUC. Reverting changes.
Training on augumented user 70241 13/50 current_auc = 0.8991596638655461
User 70241 AUC after training: 0.8907563025210083
User 70241 does not improve AUC. Reverting changes.
Training on augumented user 81487 14/50 current_auc = 0.8991596638655461
User 81487 AUC after training: 0.8991596638655461
User 81487 does not improve AUC. Reverting changes.
Training on augumented user 125633 15/50 current_auc = 0.8991596638655461
User 125633 AUC after training: 0.8907563025210083
User 125633 does not improve AUC. Reverting changes.
Training on augumented user 7625 16/50 current_auc = 0.8991596638655461
User 7625 AUC after training: 0.8991596638655461
User 7625 does not improve AUC. Reverting changes.
Training on augumented user 959 17/50 current_auc = 0.8991596638655461
User 959 AUC after training: 0.8907563025210083
User 959 does not improve AUC. Reverting changes.
Training on augumented user 83313 18/50 current_auc = 0.8991596638655461
User 83313 AUC after training: 0.8991596638655461
User 83313 does not improve AUC. Reverting changes.
Training on augumented user 34726 19/50 current_auc = 0.8991596638655461
User 34726 AUC after training: 0.8991596638655461
User 34726 does not improve AUC. Reverting changes.
Training on augumented user 54200 20/50 current_auc = 0.8991596638655461
User 54200 AUC after training: 0.8907563025210083
User 54200 does not improve AUC. Reverting changes.
Training on augumented user 60315 21/50 current_auc = 0.8991596638655461
User 60315 AUC after training: 0.8991596638655461
User 60315 does not improve AUC. Reverting changes.
Training on augumented user 57469 22/50 current_auc = 0.8991596638655461
User 57469 AUC after training: 0.8907563025210083
User 57469 does not improve AUC. Reverting changes.
Training on augumented user 55738 23/50 current_auc = 0.8991596638655461
User 55738 AUC after training: 0.8991596638655461
User 55738 does not improve AUC. Reverting changes.
Training on augumented user 12692 24/50 current_auc = 0.8991596638655461
User 12692 AUC after training: 0.8991596638655461
User 12692 does not improve AUC. Reverting changes.
Training on augumented user 21620 25/50 current_auc = 0.8991596638655461
User 21620 AUC after training: 0.8991596638655461
User 21620 does not improve AUC. Reverting changes.
Training on augumented user 64983 26/50 current_auc = 0.8991596638655461
User 64983 AUC after training: 0.8991596638655461
User 64983 does not improve AUC. Reverting changes.
Training on augumented user 1264 27/50 current_auc = 0.8991596638655461
User 1264 AUC after training: 0.8907563025210083
User 1264 does not improve AUC. Reverting changes.
Training on augumented user 17499 28/50 current_auc = 0.8991596638655461
User 17499 AUC after training: 0.8991596638655461
User 17499 does not improve AUC. Reverting changes.
Training on augumented user 14221 29/50 current_auc = 0.8991596638655461
User 14221 AUC after training: 0.8907563025210083
User 14221 does not improve AUC. Reverting changes.
Training on augumented user 4719 30/50 current_auc = 0.8991596638655461
User 4719 AUC after training: 0.8991596638655461
User 4719 does not improve AUC. Reverting changes.
Training on augumented user 92004 31/50 current_auc = 0.8991596638655461
User 92004 AUC after training: 0.8991596638655461
User 92004 does not improve AUC. Reverting changes.
Training on augumented user 93873 32/50 current_auc = 0.8991596638655461
User 93873 AUC after training: 0.8991596638655461
User 93873 does not improve AUC. Reverting changes.
Training on augumented user 32134 33/50 current_auc = 0.8991596638655461
User 32134 AUC after training: 0.8991596638655461
User 32134 does not improve AUC. Reverting changes.
Training on augumented user 120181 34/50 current_auc = 0.8991596638655461
User 120181 AUC after training: 0.8907563025210083
User 120181 does not improve AUC. Reverting changes.
Training on augumented user 76694 35/50 current_auc = 0.8991596638655461
User 76694 AUC after training: 0.8991596638655461
User 76694 does not improve AUC. Reverting changes.
Training on augumented user 112968 36/50 current_auc = 0.8991596638655461
User 112968 AUC after training: 0.8907563025210083
User 112968 does not improve AUC. Reverting changes.
Training on augumented user 75376 37/50 current_auc = 0.8991596638655461
User 75376 AUC after training: 0.8991596638655461
User 75376 does not improve AUC. Reverting changes.
Training on augumented user 82934 38/50 current_auc = 0.8991596638655461
User 82934 AUC after training: 0.8907563025210083
User 82934 does not improve AUC. Reverting changes.
Training on augumented user 82000 39/50 current_auc = 0.8991596638655461
User 82000 AUC after training: 0.8991596638655461
User 82000 does not improve AUC. Reverting changes.
Training on augumented user 116809 40/50 current_auc = 0.8991596638655461
User 116809 AUC after training: 0.8991596638655461
User 116809 does not improve AUC. Reverting changes.
Training on augumented user 107038 41/50 current_auc = 0.8991596638655461
User 107038 AUC after training: 0.8991596638655461
User 107038 does not improve AUC. Reverting changes.
Training on augumented user 7822 42/50 current_auc = 0.8991596638655461
User 7822 AUC after training: 0.8991596638655461
User 7822 does not improve AUC. Reverting changes.
Training on augumented user 5334 43/50 current_auc = 0.8991596638655461
User 5334 AUC after training: 0.8991596638655461
User 5334 does not improve AUC. Reverting changes.
Training on augumented user 86527 44/50 current_auc = 0.8991596638655461
User 86527 AUC after training: 0.8991596638655461
User 86527 does not improve AUC. Reverting changes.
Training on augumented user 24223 45/50 current_auc = 0.8991596638655461
User 24223 AUC after training: 0.8991596638655461
User 24223 does not improve AUC. Reverting changes.
Training on augumented user 73505 46/50 current_auc = 0.8991596638655461
User 73505 AUC after training: 0.8991596638655461
User 73505 does not improve AUC. Reverting changes.
Training on augumented user 110117 47/50 current_auc = 0.8991596638655461
User 110117 AUC after training: 0.8991596638655461
User 110117 does not improve AUC. Reverting changes.
Training on augumented user 133987 48/50 current_auc = 0.8991596638655461
User 133987 AUC after training: 0.8991596638655461
User 133987 does not improve AUC. Reverting changes.
Training on augumented user 117317 49/50 current_auc = 0.8991596638655461
User 117317 AUC after training: 0.8991596638655461
User 117317 does not improve AUC. Reverting changes.
[2024-12-02 20:02:20.882675] start test user 5996 266/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:02:21.318262] start test user 5996 266/568 recall augumented users by random, augumented_users = [44729, 23113, 10321, 10109, 57840, 14173, 99842, 80298, 111251, 50089, 25726, 84178, 29633, 54627, 56905, 33130, 21736, 129591, 51510, 70092, 7454, 111393, 105298, 135373, 36461, 137183, 138074, 70513, 87240, 22417, 137092, 72537, 21140, 37725, 51742, 77448, 64731, 88405, 67445, 93186, 133280, 89286, 95183, 114259, 68657, 39820, 69876, 118966, 111310, 106311]
[2024-12-02 20:02:21.332945] user = 5996 Cloud 266/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:02:21.339261] user = 5996 Local 266/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:02:21.361671] user = 5996 Local+ 266/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:02:23.321010] user = 5996 MPDA- 266/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 44729 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44729 AUC after training: 0.5
User 44729 does not improve AUC. Reverting changes.
Training on augumented user 23113 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23113 AUC after training: 0.5
User 23113 does not improve AUC. Reverting changes.
Training on augumented user 10321 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10321 AUC after training: 0.5
User 10321 does not improve AUC. Reverting changes.
Training on augumented user 10109 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10109 AUC after training: 0.5
User 10109 does not improve AUC. Reverting changes.
Training on augumented user 57840 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57840 AUC after training: 0.5
User 57840 does not improve AUC. Reverting changes.
Training on augumented user 14173 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14173 AUC after training: 0.5
User 14173 does not improve AUC. Reverting changes.
Training on augumented user 99842 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99842 AUC after training: 0.5
User 99842 does not improve AUC. Reverting changes.
Training on augumented user 80298 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80298 AUC after training: 0.5
User 80298 does not improve AUC. Reverting changes.
Training on augumented user 111251 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111251 AUC after training: 0.5
User 111251 does not improve AUC. Reverting changes.
Training on augumented user 50089 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50089 AUC after training: 0.5
User 50089 does not improve AUC. Reverting changes.
Training on augumented user 25726 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25726 AUC after training: 0.5
User 25726 does not improve AUC. Reverting changes.
Training on augumented user 84178 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84178 AUC after training: 0.5
User 84178 does not improve AUC. Reverting changes.
Training on augumented user 29633 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29633 AUC after training: 0.5
User 29633 does not improve AUC. Reverting changes.
Training on augumented user 54627 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54627 AUC after training: 0.5
User 54627 does not improve AUC. Reverting changes.
Training on augumented user 56905 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56905 AUC after training: 0.5
User 56905 does not improve AUC. Reverting changes.
Training on augumented user 33130 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33130 AUC after training: 0.5
User 33130 does not improve AUC. Reverting changes.
Training on augumented user 21736 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21736 AUC after training: 0.5
User 21736 does not improve AUC. Reverting changes.
Training on augumented user 129591 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129591 AUC after training: 0.5
User 129591 does not improve AUC. Reverting changes.
Training on augumented user 51510 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51510 AUC after training: 0.5
User 51510 does not improve AUC. Reverting changes.
Training on augumented user 70092 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70092 AUC after training: 0.5
User 70092 does not improve AUC. Reverting changes.
Training on augumented user 7454 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7454 AUC after training: 0.5
User 7454 does not improve AUC. Reverting changes.
Training on augumented user 111393 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111393 AUC after training: 0.5
User 111393 does not improve AUC. Reverting changes.
Training on augumented user 105298 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105298 AUC after training: 0.5
User 105298 does not improve AUC. Reverting changes.
Training on augumented user 135373 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135373 AUC after training: 0.5
User 135373 does not improve AUC. Reverting changes.
Training on augumented user 36461 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36461 AUC after training: 0.5
User 36461 does not improve AUC. Reverting changes.
Training on augumented user 137183 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137183 AUC after training: 0.5
User 137183 does not improve AUC. Reverting changes.
Training on augumented user 138074 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138074 AUC after training: 0.5
User 138074 does not improve AUC. Reverting changes.
Training on augumented user 70513 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70513 AUC after training: 0.5
User 70513 does not improve AUC. Reverting changes.
Training on augumented user 87240 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87240 AUC after training: 0.5
User 87240 does not improve AUC. Reverting changes.
Training on augumented user 22417 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22417 AUC after training: 0.5
User 22417 does not improve AUC. Reverting changes.
Training on augumented user 137092 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137092 AUC after training: 0.5
User 137092 does not improve AUC. Reverting changes.
Training on augumented user 72537 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72537 AUC after training: 0.5
User 72537 does not improve AUC. Reverting changes.
Training on augumented user 21140 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21140 AUC after training: 0.5
User 21140 does not improve AUC. Reverting changes.
Training on augumented user 37725 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37725 AUC after training: 0.5
User 37725 does not improve AUC. Reverting changes.
Training on augumented user 51742 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51742 AUC after training: 0.5
User 51742 does not improve AUC. Reverting changes.
Training on augumented user 77448 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77448 AUC after training: 0.5
User 77448 does not improve AUC. Reverting changes.
Training on augumented user 64731 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64731 AUC after training: 0.5
User 64731 does not improve AUC. Reverting changes.
Training on augumented user 88405 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88405 AUC after training: 0.5
User 88405 does not improve AUC. Reverting changes.
Training on augumented user 67445 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67445 AUC after training: 0.5
User 67445 does not improve AUC. Reverting changes.
Training on augumented user 93186 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93186 AUC after training: 0.5
User 93186 does not improve AUC. Reverting changes.
Training on augumented user 133280 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133280 AUC after training: 0.5
User 133280 does not improve AUC. Reverting changes.
Training on augumented user 89286 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89286 AUC after training: 0.5
User 89286 does not improve AUC. Reverting changes.
Training on augumented user 95183 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95183 AUC after training: 0.5
User 95183 does not improve AUC. Reverting changes.
Training on augumented user 114259 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114259 AUC after training: 0.5
User 114259 does not improve AUC. Reverting changes.
Training on augumented user 68657 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68657 AUC after training: 0.5
User 68657 does not improve AUC. Reverting changes.
Training on augumented user 39820 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39820 AUC after training: 0.5
User 39820 does not improve AUC. Reverting changes.
Training on augumented user 69876 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69876 AUC after training: 0.5
User 69876 does not improve AUC. Reverting changes.
Training on augumented user 118966 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118966 AUC after training: 0.5
User 118966 does not improve AUC. Reverting changes.
Training on augumented user 111310 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111310 AUC after training: 0.5
User 111310 does not improve AUC. Reverting changes.
Training on augumented user 106311 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106311 AUC after training: 0.5
User 106311 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:02:55.350967] start test user 6002 267/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:02:55.941461] start test user 6002 267/568 recall augumented users by random, augumented_users = [68194, 21873, 130913, 39829, 52537, 44992, 115496, 105925, 114435, 52665, 122281, 53688, 121521, 88905, 133518, 61969, 53481, 14374, 16476, 40921, 9184, 59386, 137136, 24580, 88027, 7713, 20673, 130956, 113796, 82345, 109520, 133063, 68611, 111766, 120326, 138089, 35209, 75026, 109186, 50970, 127480, 135562, 83238, 62158, 83953, 59424, 13486, 348, 126535, 64347]
[2024-12-02 20:02:55.957370] user = 6002 Cloud 267/568
[2024-12-02 20:02:55.977251] user = 6002 Local 267/568
[2024-12-02 20:02:56.100741] user = 6002 Local+ 267/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:02:58.525778] user = 6002 MPDA- 267/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5012135922330098
Training on augumented user 68194 0/50 current_auc = 0.5012135922330098
User 68194 AUC after training: 0.5012135922330098
User 68194 does not improve AUC. Reverting changes.
Training on augumented user 21873 1/50 current_auc = 0.5012135922330098
User 21873 AUC after training: 0.5036407766990292
User 21873 improves AUC. Keeping the model.
Training on augumented user 130913 2/50 current_auc = 0.5036407766990292
User 130913 AUC after training: 0.49514563106796117
User 130913 does not improve AUC. Reverting changes.
Training on augumented user 39829 3/50 current_auc = 0.5036407766990292
User 39829 AUC after training: 0.5012135922330097
User 39829 does not improve AUC. Reverting changes.
Training on augumented user 52537 4/50 current_auc = 0.5036407766990292
User 52537 AUC after training: 0.5012135922330097
User 52537 does not improve AUC. Reverting changes.
Training on augumented user 44992 5/50 current_auc = 0.5036407766990292
User 44992 AUC after training: 0.5
User 44992 does not improve AUC. Reverting changes.
Training on augumented user 115496 6/50 current_auc = 0.5036407766990292
User 115496 AUC after training: 0.5048543689320388
User 115496 improves AUC. Keeping the model.
Training on augumented user 105925 7/50 current_auc = 0.5048543689320388
User 105925 AUC after training: 0.5060679611650485
User 105925 improves AUC. Keeping the model.
Training on augumented user 114435 8/50 current_auc = 0.5060679611650485
User 114435 AUC after training: 0.5036407766990292
User 114435 does not improve AUC. Reverting changes.
Training on augumented user 52665 9/50 current_auc = 0.5060679611650485
User 52665 AUC after training: 0.5133495145631067
User 52665 improves AUC. Keeping the model.
Training on augumented user 122281 10/50 current_auc = 0.5133495145631067
User 122281 AUC after training: 0.5133495145631067
User 122281 does not improve AUC. Reverting changes.
Training on augumented user 53688 11/50 current_auc = 0.5133495145631067
User 53688 AUC after training: 0.5121359223300971
User 53688 does not improve AUC. Reverting changes.
Training on augumented user 121521 12/50 current_auc = 0.5133495145631067
User 121521 AUC after training: 0.5121359223300971
User 121521 does not improve AUC. Reverting changes.
Training on augumented user 88905 13/50 current_auc = 0.5133495145631067
User 88905 AUC after training: 0.5145631067961165
User 88905 improves AUC. Keeping the model.
Training on augumented user 133518 14/50 current_auc = 0.5145631067961165
User 133518 AUC after training: 0.5133495145631067
User 133518 does not improve AUC. Reverting changes.
Training on augumented user 61969 15/50 current_auc = 0.5145631067961165
User 61969 AUC after training: 0.5133495145631068
User 61969 does not improve AUC. Reverting changes.
Training on augumented user 53481 16/50 current_auc = 0.5145631067961165
User 53481 AUC after training: 0.5157766990291262
User 53481 improves AUC. Keeping the model.
Training on augumented user 14374 17/50 current_auc = 0.5157766990291262
User 14374 AUC after training: 0.5194174757281553
User 14374 improves AUC. Keeping the model.
Training on augumented user 16476 18/50 current_auc = 0.5194174757281553
User 16476 AUC after training: 0.5097087378640777
User 16476 does not improve AUC. Reverting changes.
Training on augumented user 40921 19/50 current_auc = 0.5194174757281553
User 40921 AUC after training: 0.5169902912621359
User 40921 does not improve AUC. Reverting changes.
Training on augumented user 9184 20/50 current_auc = 0.5194174757281553
User 9184 AUC after training: 0.5145631067961165
User 9184 does not improve AUC. Reverting changes.
Training on augumented user 59386 21/50 current_auc = 0.5194174757281553
User 59386 AUC after training: 0.5121359223300971
User 59386 does not improve AUC. Reverting changes.
Training on augumented user 137136 22/50 current_auc = 0.5194174757281553
User 137136 AUC after training: 0.5157766990291262
User 137136 does not improve AUC. Reverting changes.
Training on augumented user 24580 23/50 current_auc = 0.5194174757281553
User 24580 AUC after training: 0.5157766990291262
User 24580 does not improve AUC. Reverting changes.
Training on augumented user 88027 24/50 current_auc = 0.5194174757281553
User 88027 AUC after training: 0.5157766990291262
User 88027 does not improve AUC. Reverting changes.
Training on augumented user 7713 25/50 current_auc = 0.5194174757281553
User 7713 AUC after training: 0.5109223300970873
User 7713 does not improve AUC. Reverting changes.
Training on augumented user 20673 26/50 current_auc = 0.5194174757281553
User 20673 AUC after training: 0.5194174757281553
User 20673 does not improve AUC. Reverting changes.
Training on augumented user 130956 27/50 current_auc = 0.5194174757281553
User 130956 AUC after training: 0.5157766990291262
User 130956 does not improve AUC. Reverting changes.
Training on augumented user 113796 28/50 current_auc = 0.5194174757281553
User 113796 AUC after training: 0.5145631067961165
User 113796 does not improve AUC. Reverting changes.
Training on augumented user 82345 29/50 current_auc = 0.5194174757281553
User 82345 AUC after training: 0.520631067961165
User 82345 improves AUC. Keeping the model.
Training on augumented user 109520 30/50 current_auc = 0.520631067961165
User 109520 AUC after training: 0.5133495145631067
User 109520 does not improve AUC. Reverting changes.
Training on augumented user 133063 31/50 current_auc = 0.520631067961165
User 133063 AUC after training: 0.5109223300970873
User 133063 does not improve AUC. Reverting changes.
Training on augumented user 68611 32/50 current_auc = 0.520631067961165
User 68611 AUC after training: 0.5133495145631068
User 68611 does not improve AUC. Reverting changes.
Training on augumented user 111766 33/50 current_auc = 0.520631067961165
User 111766 AUC after training: 0.5157766990291262
User 111766 does not improve AUC. Reverting changes.
Training on augumented user 120326 34/50 current_auc = 0.520631067961165
User 120326 AUC after training: 0.5145631067961165
User 120326 does not improve AUC. Reverting changes.
Training on augumented user 138089 35/50 current_auc = 0.520631067961165
User 138089 AUC after training: 0.5182038834951457
User 138089 does not improve AUC. Reverting changes.
Training on augumented user 35209 36/50 current_auc = 0.520631067961165
User 35209 AUC after training: 0.5169902912621359
User 35209 does not improve AUC. Reverting changes.
Training on augumented user 75026 37/50 current_auc = 0.520631067961165
User 75026 AUC after training: 0.5133495145631068
User 75026 does not improve AUC. Reverting changes.
Training on augumented user 109186 38/50 current_auc = 0.520631067961165
User 109186 AUC after training: 0.5182038834951457
User 109186 does not improve AUC. Reverting changes.
Training on augumented user 50970 39/50 current_auc = 0.520631067961165
User 50970 AUC after training: 0.5145631067961165
User 50970 does not improve AUC. Reverting changes.
Training on augumented user 127480 40/50 current_auc = 0.520631067961165
User 127480 AUC after training: 0.508495145631068
User 127480 does not improve AUC. Reverting changes.
Training on augumented user 135562 41/50 current_auc = 0.520631067961165
User 135562 AUC after training: 0.5097087378640777
User 135562 does not improve AUC. Reverting changes.
Training on augumented user 83238 42/50 current_auc = 0.520631067961165
User 83238 AUC after training: 0.520631067961165
User 83238 does not improve AUC. Reverting changes.
Training on augumented user 62158 43/50 current_auc = 0.520631067961165
User 62158 AUC after training: 0.5157766990291262
User 62158 does not improve AUC. Reverting changes.
Training on augumented user 83953 44/50 current_auc = 0.520631067961165
User 83953 AUC after training: 0.5145631067961165
User 83953 does not improve AUC. Reverting changes.
Training on augumented user 59424 45/50 current_auc = 0.520631067961165
User 59424 AUC after training: 0.5121359223300971
User 59424 does not improve AUC. Reverting changes.
Training on augumented user 13486 46/50 current_auc = 0.520631067961165
User 13486 AUC after training: 0.5182038834951457
User 13486 does not improve AUC. Reverting changes.
Training on augumented user 348 47/50 current_auc = 0.520631067961165
User 348 AUC after training: 0.5097087378640777
User 348 does not improve AUC. Reverting changes.
Training on augumented user 126535 48/50 current_auc = 0.520631067961165
User 126535 AUC after training: 0.5145631067961165
User 126535 does not improve AUC. Reverting changes.
Training on augumented user 64347 49/50 current_auc = 0.520631067961165
User 64347 AUC after training: 0.5169902912621359
User 64347 does not improve AUC. Reverting changes.
[2024-12-02 20:03:32.226562] start test user 6099 268/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:03:32.628855] start test user 6099 268/568 recall augumented users by random, augumented_users = [65732, 44043, 12354, 25338, 18227, 101737, 124549, 64306, 50980, 100361, 100349, 108671, 92393, 110627, 38490, 133317, 8596, 4644, 134046, 55497, 113235, 102897, 104156, 123181, 71122, 13115, 15472, 104604, 71909, 136966, 94174, 95624, 99207, 22699, 40697, 19705, 117982, 110885, 129205, 137461, 3642, 120887, 111486, 84469, 34733, 76332, 10304, 49872, 45643, 9145]
[2024-12-02 20:03:32.645400] user = 6099 Cloud 268/568
[2024-12-02 20:03:32.688159] user = 6099 Local 268/568
[2024-12-02 20:03:32.948357] user = 6099 Local+ 268/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:03:35.950773] user = 6099 MPDA- 268/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8304709995886467
Training on augumented user 65732 0/50 current_auc = 0.8304709995886467
User 65732 AUC after training: 0.8308823529411764
User 65732 improves AUC. Keeping the model.
Training on augumented user 44043 1/50 current_auc = 0.8308823529411764
User 44043 AUC after training: 0.830779514603044
User 44043 does not improve AUC. Reverting changes.
Training on augumented user 12354 2/50 current_auc = 0.8308823529411764
User 12354 AUC after training: 0.8310880296174413
User 12354 improves AUC. Keeping the model.
Training on augumented user 25338 3/50 current_auc = 0.8310880296174413
User 25338 AUC after training: 0.830779514603044
User 25338 does not improve AUC. Reverting changes.
Training on augumented user 18227 4/50 current_auc = 0.8310880296174413
User 18227 AUC after training: 0.8309166323872206
User 18227 does not improve AUC. Reverting changes.
Training on augumented user 101737 5/50 current_auc = 0.8310880296174413
User 101737 AUC after training: 0.8309166323872207
User 101737 does not improve AUC. Reverting changes.
Training on augumented user 124549 6/50 current_auc = 0.8310880296174413
User 124549 AUC after training: 0.8309337721102427
User 124549 does not improve AUC. Reverting changes.
Training on augumented user 64306 7/50 current_auc = 0.8310880296174413
User 64306 AUC after training: 0.8307109557109558
User 64306 does not improve AUC. Reverting changes.
Training on augumented user 50980 8/50 current_auc = 0.8310880296174413
User 50980 AUC after training: 0.8307109557109558
User 50980 does not improve AUC. Reverting changes.
Training on augumented user 100361 9/50 current_auc = 0.8310880296174413
User 100361 AUC after training: 0.8308480734951323
User 100361 does not improve AUC. Reverting changes.
Training on augumented user 100349 10/50 current_auc = 0.8310880296174413
User 100349 AUC after training: 0.8298711092828741
User 100349 does not improve AUC. Reverting changes.
Training on augumented user 108671 11/50 current_auc = 0.8310880296174413
User 108671 AUC after training: 0.8304024406965583
User 108671 does not improve AUC. Reverting changes.
Training on augumented user 92393 12/50 current_auc = 0.8310880296174413
User 92393 AUC after training: 0.8308480734951323
User 92393 does not improve AUC. Reverting changes.
Training on augumented user 110627 13/50 current_auc = 0.8310880296174413
User 110627 AUC after training: 0.8313108460167283
User 110627 improves AUC. Keeping the model.
Training on augumented user 38490 14/50 current_auc = 0.8313108460167283
User 38490 AUC after training: 0.8312080076785959
User 38490 does not improve AUC. Reverting changes.
Training on augumented user 133317 15/50 current_auc = 0.8313108460167283
User 133317 AUC after training: 0.8314308240778828
User 133317 improves AUC. Keeping the model.
Training on augumented user 8596 16/50 current_auc = 0.8314308240778828
User 8596 AUC after training: 0.8307452351569998
User 8596 does not improve AUC. Reverting changes.
Training on augumented user 4644 17/50 current_auc = 0.8314308240778828
User 4644 AUC after training: 0.8307623748800219
User 4644 does not improve AUC. Reverting changes.
Training on augumented user 134046 18/50 current_auc = 0.8314308240778828
User 134046 AUC after training: 0.8308137940490882
User 134046 does not improve AUC. Reverting changes.
Training on augumented user 55497 19/50 current_auc = 0.8314308240778828
User 55497 AUC after training: 0.8312080076785959
User 55497 does not improve AUC. Reverting changes.
Training on augumented user 113235 20/50 current_auc = 0.8314308240778828
User 113235 AUC after training: 0.8313794049088167
User 113235 does not improve AUC. Reverting changes.
Training on augumented user 102897 21/50 current_auc = 0.8314308240778828
User 102897 AUC after training: 0.8312937062937062
User 102897 does not improve AUC. Reverting changes.
Training on augumented user 104156 22/50 current_auc = 0.8314308240778828
User 104156 AUC after training: 0.8313451254627725
User 104156 does not improve AUC. Reverting changes.
Training on augumented user 123181 23/50 current_auc = 0.8314308240778828
User 123181 AUC after training: 0.8314308240778828
User 123181 does not improve AUC. Reverting changes.
Training on augumented user 71122 24/50 current_auc = 0.8314308240778828
User 71122 AUC after training: 0.8308994926641986
User 71122 does not improve AUC. Reverting changes.
Training on augumented user 13115 25/50 current_auc = 0.8314308240778828
User 13115 AUC after training: 0.830779514603044
User 13115 does not improve AUC. Reverting changes.
Training on augumented user 15472 26/50 current_auc = 0.8314308240778828
User 15472 AUC after training: 0.8312765665706842
User 15472 does not improve AUC. Reverting changes.
Training on augumented user 104604 27/50 current_auc = 0.8314308240778828
User 104604 AUC after training: 0.8310708898944192
User 104604 does not improve AUC. Reverting changes.
Training on augumented user 71909 28/50 current_auc = 0.8314308240778828
User 71909 AUC after training: 0.8309680515562868
User 71909 does not improve AUC. Reverting changes.
Training on augumented user 136966 29/50 current_auc = 0.8314308240778828
User 136966 AUC after training: 0.8307966543260661
User 136966 does not improve AUC. Reverting changes.
Training on augumented user 94174 30/50 current_auc = 0.8314308240778828
User 94174 AUC after training: 0.8316193610311257
User 94174 improves AUC. Keeping the model.
Training on augumented user 95624 31/50 current_auc = 0.8316193610311257
User 95624 AUC after training: 0.8316365007541477
User 95624 improves AUC. Keeping the model.
Training on augumented user 99207 32/50 current_auc = 0.8316365007541477
User 99207 AUC after training: 0.8313622651857946
User 99207 does not improve AUC. Reverting changes.
Training on augumented user 22699 33/50 current_auc = 0.8316365007541477
User 22699 AUC after training: 0.831225147401618
User 22699 does not improve AUC. Reverting changes.
Training on augumented user 40697 34/50 current_auc = 0.8316365007541477
User 40697 AUC after training: 0.8311565885095297
User 40697 does not improve AUC. Reverting changes.
Training on augumented user 19705 35/50 current_auc = 0.8316365007541477
User 19705 AUC after training: 0.8309680515562868
User 19705 does not improve AUC. Reverting changes.
Training on augumented user 117982 36/50 current_auc = 0.8316365007541477
User 117982 AUC after training: 0.8313279857397504
User 117982 does not improve AUC. Reverting changes.
Training on augumented user 110885 37/50 current_auc = 0.8316365007541477
User 110885 AUC after training: 0.8304195804195804
User 110885 does not improve AUC. Reverting changes.
Training on augumented user 129205 38/50 current_auc = 0.8316365007541477
User 129205 AUC after training: 0.8315850815850816
User 129205 does not improve AUC. Reverting changes.
Training on augumented user 137461 39/50 current_auc = 0.8316365007541477
User 137461 AUC after training: 0.8309509118332647
User 137461 does not improve AUC. Reverting changes.
Training on augumented user 3642 40/50 current_auc = 0.8316365007541477
User 3642 AUC after training: 0.8314993829699711
User 3642 does not improve AUC. Reverting changes.
Training on augumented user 120887 41/50 current_auc = 0.8316365007541477
User 120887 AUC after training: 0.8309851912793089
User 120887 does not improve AUC. Reverting changes.
Training on augumented user 111486 42/50 current_auc = 0.8316365007541477
User 111486 AUC after training: 0.8314308240778829
User 111486 does not improve AUC. Reverting changes.
Training on augumented user 84469 43/50 current_auc = 0.8316365007541477
User 84469 AUC after training: 0.8317736185383244
User 84469 improves AUC. Keeping the model.
Training on augumented user 34733 44/50 current_auc = 0.8317736185383244
User 34733 AUC after training: 0.8312251474016179
User 34733 does not improve AUC. Reverting changes.
Training on augumented user 76332 45/50 current_auc = 0.8317736185383244
User 76332 AUC after training: 0.8314308240778829
User 76332 does not improve AUC. Reverting changes.
Training on augumented user 10304 46/50 current_auc = 0.8317736185383244
User 10304 AUC after training: 0.8320649938296997
User 10304 improves AUC. Keeping the model.
Training on augumented user 49872 47/50 current_auc = 0.8320649938296997
User 49872 AUC after training: 0.8297339914986973
User 49872 does not improve AUC. Reverting changes.
Training on augumented user 45643 48/50 current_auc = 0.8320649938296997
User 45643 AUC after training: 0.8298368298368298
User 45643 does not improve AUC. Reverting changes.
Training on augumented user 9145 49/50 current_auc = 0.8320649938296997
User 9145 AUC after training: 0.8307623748800219
User 9145 does not improve AUC. Reverting changes.
[2024-12-02 20:04:06.569942] start test user 6108 269/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:04:07.056885] start test user 6108 269/568 recall augumented users by random, augumented_users = [11141, 10826, 85094, 37573, 96389, 50866, 52882, 99547, 97074, 1357, 16407, 104074, 73061, 28904, 76047, 91701, 40102, 135008, 78885, 107924, 137418, 89278, 99656, 66262, 25777, 35831, 90981, 20029, 10576, 79719, 95966, 60072, 132680, 14415, 3515, 1966, 73139, 19448, 120181, 137790, 97920, 132974, 37274, 24693, 118383, 25691, 70948, 12390, 136555, 35094]
[2024-12-02 20:04:07.084870] user = 6108 Cloud 269/568
[2024-12-02 20:04:07.157559] user = 6108 Local 269/568
[2024-12-02 20:04:07.291680] user = 6108 Local+ 269/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:04:09.410049] user = 6108 MPDA- 269/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7190197716513504
Training on augumented user 11141 0/50 current_auc = 0.7190197716513504
User 11141 AUC after training: 0.7190704032809296
User 11141 improves AUC. Keeping the model.
Training on augumented user 10826 1/50 current_auc = 0.7190704032809296
User 10826 AUC after training: 0.719146350725298
User 10826 improves AUC. Keeping the model.
Training on augumented user 85094 2/50 current_auc = 0.719146350725298
User 85094 AUC after training: 0.7189691400217716
User 85094 does not improve AUC. Reverting changes.
Training on augumented user 37573 3/50 current_auc = 0.719146350725298
User 37573 AUC after training: 0.7192222981696664
User 37573 improves AUC. Keeping the model.
Training on augumented user 96389 4/50 current_auc = 0.7192222981696664
User 96389 AUC after training: 0.7191463507252981
User 96389 does not improve AUC. Reverting changes.
Training on augumented user 50866 5/50 current_auc = 0.7192222981696664
User 50866 AUC after training: 0.7192729297992455
User 50866 improves AUC. Keeping the model.
Training on augumented user 52882 6/50 current_auc = 0.7192729297992455
User 52882 AUC after training: 0.7193235614288246
User 52882 improves AUC. Keeping the model.
Training on augumented user 99547 7/50 current_auc = 0.7193235614288246
User 99547 AUC after training: 0.7193235614288245
User 99547 does not improve AUC. Reverting changes.
Training on augumented user 97074 8/50 current_auc = 0.7193235614288246
User 97074 AUC after training: 0.7192729297992456
User 97074 does not improve AUC. Reverting changes.
Training on augumented user 1357 9/50 current_auc = 0.7193235614288246
User 1357 AUC after training: 0.719348877243614
User 1357 improves AUC. Keeping the model.
Training on augumented user 16407 10/50 current_auc = 0.719348877243614
User 16407 AUC after training: 0.7193235614288246
User 16407 does not improve AUC. Reverting changes.
Training on augumented user 104074 11/50 current_auc = 0.719348877243614
User 104074 AUC after training: 0.719399508873193
User 104074 improves AUC. Keeping the model.
Training on augumented user 73061 12/50 current_auc = 0.719399508873193
User 73061 AUC after training: 0.7192982456140351
User 73061 does not improve AUC. Reverting changes.
Training on augumented user 28904 13/50 current_auc = 0.719399508873193
User 28904 AUC after training: 0.7184881395407711
User 28904 does not improve AUC. Reverting changes.
Training on augumented user 76047 14/50 current_auc = 0.719399508873193
User 76047 AUC after training: 0.7191716665400876
User 76047 does not improve AUC. Reverting changes.
Training on augumented user 91701 15/50 current_auc = 0.719399508873193
User 91701 AUC after training: 0.7195260879471406
User 91701 improves AUC. Keeping the model.
Training on augumented user 40102 16/50 current_auc = 0.7195260879471406
User 40102 AUC after training: 0.719652667021088
User 40102 improves AUC. Keeping the model.
Training on augumented user 135008 17/50 current_auc = 0.719652667021088
User 135008 AUC after training: 0.719450140502772
User 135008 does not improve AUC. Reverting changes.
Training on augumented user 78885 18/50 current_auc = 0.719652667021088
User 78885 AUC after training: 0.719602035391509
User 78885 does not improve AUC. Reverting changes.
Training on augumented user 107924 19/50 current_auc = 0.719652667021088
User 107924 AUC after training: 0.7193741930584036
User 107924 does not improve AUC. Reverting changes.
Training on augumented user 137418 20/50 current_auc = 0.719652667021088
User 137418 AUC after training: 0.7194248246879824
User 137418 does not improve AUC. Reverting changes.
Training on augumented user 89278 21/50 current_auc = 0.719652667021088
User 89278 AUC after training: 0.7196273512062986
User 89278 does not improve AUC. Reverting changes.
Training on augumented user 99656 22/50 current_auc = 0.719652667021088
User 99656 AUC after training: 0.7195007721323511
User 99656 does not improve AUC. Reverting changes.
Training on augumented user 66262 23/50 current_auc = 0.719652667021088
User 66262 AUC after training: 0.7196273512062986
User 66262 does not improve AUC. Reverting changes.
Training on augumented user 25777 24/50 current_auc = 0.719652667021088
User 25777 AUC after training: 0.7192222981696665
User 25777 does not improve AUC. Reverting changes.
Training on augumented user 35831 25/50 current_auc = 0.719652667021088
User 35831 AUC after training: 0.7194754563175615
User 35831 does not improve AUC. Reverting changes.
Training on augumented user 90981 26/50 current_auc = 0.719652667021088
User 90981 AUC after training: 0.7195260879471406
User 90981 does not improve AUC. Reverting changes.
Training on augumented user 20029 27/50 current_auc = 0.719652667021088
User 20029 AUC after training: 0.7197792460950355
User 20029 improves AUC. Keeping the model.
Training on augumented user 10576 28/50 current_auc = 0.7197792460950355
User 10576 AUC after training: 0.7195514037619302
User 10576 does not improve AUC. Reverting changes.
Training on augumented user 79719 29/50 current_auc = 0.7197792460950355
User 79719 AUC after training: 0.7198805093541936
User 79719 improves AUC. Keeping the model.
Training on augumented user 95966 30/50 current_auc = 0.7198805093541936
User 95966 AUC after training: 0.7198298777246146
User 95966 does not improve AUC. Reverting changes.
Training on augumented user 60072 31/50 current_auc = 0.7198805093541936
User 60072 AUC after training: 0.719855193539404
User 60072 does not improve AUC. Reverting changes.
Training on augumented user 132680 32/50 current_auc = 0.7198805093541936
User 132680 AUC after training: 0.719804561909825
User 132680 does not improve AUC. Reverting changes.
Training on augumented user 14415 33/50 current_auc = 0.7198805093541936
User 14415 AUC after training: 0.719956456798562
User 14415 improves AUC. Keeping the model.
Training on augumented user 3515 34/50 current_auc = 0.719956456798562
User 3515 AUC after training: 0.7192476139844561
User 3515 does not improve AUC. Reverting changes.
Training on augumented user 1966 35/50 current_auc = 0.719956456798562
User 1966 AUC after training: 0.7192982456140351
User 1966 does not improve AUC. Reverting changes.
Training on augumented user 73139 36/50 current_auc = 0.719956456798562
User 73139 AUC after training: 0.7199817726133516
User 73139 improves AUC. Keeping the model.
Training on augumented user 19448 37/50 current_auc = 0.7199817726133516
User 19448 AUC after training: 0.7195767195767196
User 19448 does not improve AUC. Reverting changes.
Training on augumented user 120181 38/50 current_auc = 0.7199817726133516
User 120181 AUC after training: 0.719703298650667
User 120181 does not improve AUC. Reverting changes.
Training on augumented user 137790 39/50 current_auc = 0.7199817726133516
User 137790 AUC after training: 0.7196273512062985
User 137790 does not improve AUC. Reverting changes.
Training on augumented user 97920 40/50 current_auc = 0.7199817726133516
User 97920 AUC after training: 0.719753930280246
User 97920 does not improve AUC. Reverting changes.
Training on augumented user 132974 41/50 current_auc = 0.7199817726133516
User 132974 AUC after training: 0.719753930280246
User 132974 does not improve AUC. Reverting changes.
Training on augumented user 37274 42/50 current_auc = 0.7199817726133516
User 37274 AUC after training: 0.720108351687299
User 37274 improves AUC. Keeping the model.
Training on augumented user 24693 43/50 current_auc = 0.720108351687299
User 24693 AUC after training: 0.7200577200577201
User 24693 does not improve AUC. Reverting changes.
Training on augumented user 118383 44/50 current_auc = 0.720108351687299
User 118383 AUC after training: 0.7199564567985621
User 118383 does not improve AUC. Reverting changes.
Training on augumented user 25691 45/50 current_auc = 0.720108351687299
User 25691 AUC after training: 0.719804561909825
User 25691 does not improve AUC. Reverting changes.
Training on augumented user 70948 46/50 current_auc = 0.720108351687299
User 70948 AUC after training: 0.7201336675020886
User 70948 improves AUC. Keeping the model.
Training on augumented user 12390 47/50 current_auc = 0.7201336675020886
User 12390 AUC after training: 0.7190704032809296
User 12390 does not improve AUC. Reverting changes.
Training on augumented user 136555 48/50 current_auc = 0.7201336675020886
User 136555 AUC after training: 0.7196020353915091
User 136555 does not improve AUC. Reverting changes.
Training on augumented user 35094 49/50 current_auc = 0.7201336675020886
User 35094 AUC after training: 0.7194754563175616
User 35094 does not improve AUC. Reverting changes.
[2024-12-02 20:04:40.601528] start test user 6112 270/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:04:41.017202] start test user 6112 270/568 recall augumented users by random, augumented_users = [74339, 54731, 57951, 96062, 87541, 19386, 75583, 60680, 65885, 132252, 121355, 31952, 87451, 5338, 75039, 11861, 92388, 109376, 85008, 122620, 59286, 54754, 106913, 118165, 49641, 77205, 62024, 137697, 94255, 38446, 71218, 60796, 74722, 83175, 83502, 72159, 92152, 38495, 64862, 76968, 24929, 12660, 56108, 18552, 95138, 48900, 126550, 115995, 127784, 59262]
[2024-12-02 20:04:41.033498] user = 6112 Cloud 270/568
[2024-12-02 20:04:41.052065] user = 6112 Local 270/568
[2024-12-02 20:04:41.215077] user = 6112 Local+ 270/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:04:42.597882] user = 6112 MPDA- 270/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5311654782394886
Training on augumented user 74339 0/50 current_auc = 0.5311654782394886
User 74339 AUC after training: 0.5316572412097369
User 74339 improves AUC. Keeping the model.
Training on augumented user 54731 1/50 current_auc = 0.5316572412097369
User 54731 AUC after training: 0.531903122694861
User 54731 improves AUC. Keeping the model.
Training on augumented user 57951 2/50 current_auc = 0.531903122694861
User 57951 AUC after training: 0.5315957708384558
User 57951 does not improve AUC. Reverting changes.
Training on augumented user 96062 3/50 current_auc = 0.531903122694861
User 96062 AUC after training: 0.5323948856651095
User 96062 improves AUC. Keeping the model.
Training on augumented user 87541 4/50 current_auc = 0.5323948856651095
User 87541 AUC after training: 0.5330095893779199
User 87541 improves AUC. Keeping the model.
Training on augumented user 19386 5/50 current_auc = 0.5330095893779199
User 19386 AUC after training: 0.533255470863044
User 19386 improves AUC. Keeping the model.
Training on augumented user 75583 6/50 current_auc = 0.533255470863044
User 75583 AUC after training: 0.5343619375461028
User 75583 improves AUC. Keeping the model.
Training on augumented user 60680 7/50 current_auc = 0.5343619375461028
User 60680 AUC after training: 0.5328866486353577
User 60680 does not improve AUC. Reverting changes.
Training on augumented user 65885 8/50 current_auc = 0.5343619375461028
User 65885 AUC after training: 0.5343619375461028
User 65885 does not improve AUC. Reverting changes.
Training on augumented user 132252 9/50 current_auc = 0.5343619375461028
User 132252 AUC after training: 0.5335013523481682
User 132252 does not improve AUC. Reverting changes.
Training on augumented user 121355 10/50 current_auc = 0.5343619375461028
User 121355 AUC after training: 0.5350995820014753
User 121355 improves AUC. Keeping the model.
Training on augumented user 31952 11/50 current_auc = 0.5350995820014753
User 31952 AUC after training: 0.5353454634865995
User 31952 improves AUC. Keeping the model.
Training on augumented user 87451 12/50 current_auc = 0.5353454634865995
User 87451 AUC after training: 0.5335013523481682
User 87451 does not improve AUC. Reverting changes.
Training on augumented user 5338 13/50 current_auc = 0.5353454634865995
User 5338 AUC after training: 0.5351610523727564
User 5338 does not improve AUC. Reverting changes.
Training on augumented user 75039 14/50 current_auc = 0.5353454634865995
User 75039 AUC after training: 0.5343004671748217
User 75039 does not improve AUC. Reverting changes.
Training on augumented user 11861 15/50 current_auc = 0.5353454634865995
User 11861 AUC after training: 0.5350381116301942
User 11861 does not improve AUC. Reverting changes.
Training on augumented user 92388 16/50 current_auc = 0.5353454634865995
User 92388 AUC after training: 0.5354684042291615
User 92388 improves AUC. Keeping the model.
Training on augumented user 109376 17/50 current_auc = 0.5354684042291615
User 109376 AUC after training: 0.5352225227440374
User 109376 does not improve AUC. Reverting changes.
Training on augumented user 85008 18/50 current_auc = 0.5354684042291615
User 85008 AUC after training: 0.5359601671994099
User 85008 improves AUC. Keeping the model.
Training on augumented user 122620 19/50 current_auc = 0.5359601671994099
User 122620 AUC after training: 0.5350381116301942
User 122620 does not improve AUC. Reverting changes.
Training on augumented user 59286 20/50 current_auc = 0.5359601671994099
User 59286 AUC after training: 0.5352839931153185
User 59286 does not improve AUC. Reverting changes.
Training on augumented user 54754 21/50 current_auc = 0.5359601671994099
User 54754 AUC after training: 0.5349766412589132
User 54754 does not improve AUC. Reverting changes.
Training on augumented user 106913 22/50 current_auc = 0.5359601671994099
User 106913 AUC after training: 0.5351610523727564
User 106913 does not improve AUC. Reverting changes.
Training on augumented user 118165 23/50 current_auc = 0.5359601671994099
User 118165 AUC after training: 0.5349151708876322
User 118165 does not improve AUC. Reverting changes.
Training on augumented user 49641 24/50 current_auc = 0.5359601671994099
User 49641 AUC after training: 0.5353454634865995
User 49641 does not improve AUC. Reverting changes.
Training on augumented user 77205 25/50 current_auc = 0.5359601671994099
User 77205 AUC after training: 0.5363904597983772
User 77205 improves AUC. Keeping the model.
Training on augumented user 62024 26/50 current_auc = 0.5363904597983772
User 62024 AUC after training: 0.5363904597983773
User 62024 improves AUC. Keeping the model.
Training on augumented user 137697 27/50 current_auc = 0.5363904597983773
User 137697 AUC after training: 0.536021637570691
User 137697 does not improve AUC. Reverting changes.
Training on augumented user 94255 28/50 current_auc = 0.5363904597983773
User 94255 AUC after training: 0.5362675190558152
User 94255 does not improve AUC. Reverting changes.
Training on augumented user 38446 29/50 current_auc = 0.5363904597983773
User 38446 AUC after training: 0.5368822227686255
User 38446 improves AUC. Keeping the model.
Training on augumented user 71218 30/50 current_auc = 0.5368822227686255
User 71218 AUC after training: 0.5368822227686255
User 71218 does not improve AUC. Reverting changes.
Training on augumented user 60796 31/50 current_auc = 0.5368822227686255
User 60796 AUC after training: 0.5367592820260635
User 60796 does not improve AUC. Reverting changes.
Training on augumented user 74722 32/50 current_auc = 0.5368822227686255
User 74722 AUC after training: 0.5366363412835014
User 74722 does not improve AUC. Reverting changes.
Training on augumented user 83175 33/50 current_auc = 0.5368822227686255
User 83175 AUC after training: 0.536021637570691
User 83175 does not improve AUC. Reverting changes.
Training on augumented user 83502 34/50 current_auc = 0.5368822227686255
User 83502 AUC after training: 0.5365134005409393
User 83502 does not improve AUC. Reverting changes.
Training on augumented user 72159 35/50 current_auc = 0.5368822227686255
User 72159 AUC after training: 0.5368822227686255
User 72159 does not improve AUC. Reverting changes.
Training on augumented user 92152 36/50 current_auc = 0.5368822227686255
User 92152 AUC after training: 0.5367592820260634
User 92152 does not improve AUC. Reverting changes.
Training on augumented user 38495 37/50 current_auc = 0.5368822227686255
User 38495 AUC after training: 0.540324563560364
User 38495 improves AUC. Keeping the model.
Training on augumented user 64862 38/50 current_auc = 0.540324563560364
User 64862 AUC after training: 0.5405704450454881
User 64862 improves AUC. Keeping the model.
Training on augumented user 76968 39/50 current_auc = 0.5405704450454881
User 76968 AUC after training: 0.541922793213671
User 76968 improves AUC. Keeping the model.
Training on augumented user 24929 40/50 current_auc = 0.541922793213671
User 24929 AUC after training: 0.541922793213671
User 24929 does not improve AUC. Reverting changes.
Training on augumented user 12660 41/50 current_auc = 0.541922793213671
User 12660 AUC after training: 0.5426604376690436
User 12660 improves AUC. Keeping the model.
Training on augumented user 56108 42/50 current_auc = 0.5426604376690436
User 56108 AUC after training: 0.541799852471109
User 56108 does not improve AUC. Reverting changes.
Training on augumented user 18552 43/50 current_auc = 0.5426604376690436
User 18552 AUC after training: 0.541922793213671
User 18552 does not improve AUC. Reverting changes.
Training on augumented user 95138 44/50 current_auc = 0.5426604376690436
User 95138 AUC after training: 0.5440127858372266
User 95138 improves AUC. Keeping the model.
Training on augumented user 48900 45/50 current_auc = 0.5440127858372266
User 48900 AUC after training: 0.543275141381854
User 48900 does not improve AUC. Reverting changes.
Training on augumented user 126550 46/50 current_auc = 0.5440127858372266
User 126550 AUC after training: 0.5436439636095403
User 126550 does not improve AUC. Reverting changes.
Training on augumented user 115995 47/50 current_auc = 0.5440127858372266
User 115995 AUC after training: 0.5429063191541676
User 115995 does not improve AUC. Reverting changes.
Training on augumented user 127784 48/50 current_auc = 0.5440127858372266
User 127784 AUC after training: 0.543275141381854
User 127784 does not improve AUC. Reverting changes.
Training on augumented user 59262 49/50 current_auc = 0.5440127858372266
User 59262 AUC after training: 0.5441357265797886
User 59262 improves AUC. Keeping the model.
[2024-12-02 20:05:09.256411] start test user 6116 271/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:05:09.829396] start test user 6116 271/568 recall augumented users by random, augumented_users = [73226, 88249, 102967, 97176, 68829, 128592, 3581, 62993, 26675, 82231, 9106, 84138, 33280, 23100, 71680, 82089, 74428, 18161, 106484, 48244, 51325, 109696, 110348, 46143, 128854, 6110, 42547, 100054, 78423, 86949, 7973, 13103, 73256, 113578, 57127, 78746, 78387, 90881, 32960, 25864, 39425, 18247, 63316, 118956, 41435, 46662, 20039, 4614, 82246, 95051]
[2024-12-02 20:05:09.844314] user = 6116 Cloud 271/568
[2024-12-02 20:05:09.858874] user = 6116 Local 271/568
[2024-12-02 20:05:09.895923] user = 6116 Local+ 271/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:05:12.529890] user = 6116 MPDA- 271/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6829268292682927
Training on augumented user 73226 0/50 current_auc = 0.6829268292682927
User 73226 AUC after training: 0.6802900461437047
User 73226 does not improve AUC. Reverting changes.
Training on augumented user 88249 1/50 current_auc = 0.6829268292682927
User 88249 AUC after training: 0.6822676334871456
User 88249 does not improve AUC. Reverting changes.
Training on augumented user 102967 2/50 current_auc = 0.6829268292682927
User 102967 AUC after training: 0.6773236651285431
User 102967 does not improve AUC. Reverting changes.
Training on augumented user 97176 3/50 current_auc = 0.6829268292682927
User 97176 AUC after training: 0.6898483849703362
User 97176 improves AUC. Keeping the model.
Training on augumented user 68829 4/50 current_auc = 0.6898483849703362
User 68829 AUC after training: 0.6872116018457483
User 68829 does not improve AUC. Reverting changes.
Training on augumented user 128592 5/50 current_auc = 0.6898483849703362
User 128592 AUC after training: 0.6901779828609097
User 128592 improves AUC. Keeping the model.
Training on augumented user 3581 6/50 current_auc = 0.6901779828609097
User 3581 AUC after training: 0.6812788398154251
User 3581 does not improve AUC. Reverting changes.
Training on augumented user 62993 7/50 current_auc = 0.6901779828609097
User 62993 AUC after training: 0.6756756756756757
User 62993 does not improve AUC. Reverting changes.
Training on augumented user 26675 8/50 current_auc = 0.6901779828609097
User 26675 AUC after training: 0.6858932102834542
User 26675 does not improve AUC. Reverting changes.
Training on augumented user 82231 9/50 current_auc = 0.6901779828609097
User 82231 AUC after training: 0.6918259723137772
User 82231 improves AUC. Keeping the model.
Training on augumented user 9106 10/50 current_auc = 0.6918259723137772
User 9106 AUC after training: 0.6891891891891891
User 9106 does not improve AUC. Reverting changes.
Training on augumented user 84138 11/50 current_auc = 0.6918259723137772
User 84138 AUC after training: 0.6872116018457483
User 84138 does not improve AUC. Reverting changes.
Training on augumented user 33280 12/50 current_auc = 0.6918259723137772
User 33280 AUC after training: 0.6862228081740277
User 33280 does not improve AUC. Reverting changes.
Training on augumented user 23100 13/50 current_auc = 0.6918259723137772
User 23100 AUC after training: 0.6862228081740277
User 23100 does not improve AUC. Reverting changes.
Training on augumented user 71680 14/50 current_auc = 0.6918259723137772
User 71680 AUC after training: 0.6812788398154253
User 71680 does not improve AUC. Reverting changes.
Training on augumented user 82089 15/50 current_auc = 0.6918259723137772
User 82089 AUC after training: 0.6934739617666448
User 82089 improves AUC. Keeping the model.
Training on augumented user 74428 16/50 current_auc = 0.6934739617666448
User 74428 AUC after training: 0.6842452208305867
User 74428 does not improve AUC. Reverting changes.
Training on augumented user 18161 17/50 current_auc = 0.6934739617666448
User 18161 AUC after training: 0.6901779828609098
User 18161 does not improve AUC. Reverting changes.
Training on augumented user 106484 18/50 current_auc = 0.6934739617666448
User 106484 AUC after training: 0.6931443638760713
User 106484 does not improve AUC. Reverting changes.
Training on augumented user 48244 19/50 current_auc = 0.6934739617666448
User 48244 AUC after training: 0.6878707976268952
User 48244 does not improve AUC. Reverting changes.
Training on augumented user 51325 20/50 current_auc = 0.6934739617666448
User 51325 AUC after training: 0.6872116018457481
User 51325 does not improve AUC. Reverting changes.
Training on augumented user 109696 21/50 current_auc = 0.6934739617666448
User 109696 AUC after training: 0.6756756756756757
User 109696 does not improve AUC. Reverting changes.
Training on augumented user 110348 22/50 current_auc = 0.6934739617666448
User 110348 AUC after training: 0.6891891891891893
User 110348 does not improve AUC. Reverting changes.
Training on augumented user 46143 23/50 current_auc = 0.6934739617666448
User 46143 AUC after training: 0.6812788398154253
User 46143 does not improve AUC. Reverting changes.
Training on augumented user 128854 24/50 current_auc = 0.6934739617666448
User 128854 AUC after training: 0.6885299934080422
User 128854 does not improve AUC. Reverting changes.
Training on augumented user 6110 25/50 current_auc = 0.6934739617666448
User 6110 AUC after training: 0.6842452208305867
User 6110 does not improve AUC. Reverting changes.
Training on augumented user 42547 26/50 current_auc = 0.6934739617666448
User 42547 AUC after training: 0.6931443638760713
User 42547 does not improve AUC. Reverting changes.
Training on augumented user 100054 27/50 current_auc = 0.6934739617666448
User 100054 AUC after training: 0.6832564271588661
User 100054 does not improve AUC. Reverting changes.
Training on augumented user 78423 28/50 current_auc = 0.6934739617666448
User 78423 AUC after training: 0.6816084377059987
User 78423 does not improve AUC. Reverting changes.
Training on augumented user 86949 29/50 current_auc = 0.6934739617666448
User 86949 AUC after training: 0.6862228081740277
User 86949 does not improve AUC. Reverting changes.
Training on augumented user 7973 30/50 current_auc = 0.6934739617666448
User 7973 AUC after training: 0.6901779828609097
User 7973 does not improve AUC. Reverting changes.
Training on augumented user 13103 31/50 current_auc = 0.6934739617666448
User 13103 AUC after training: 0.6895187870797628
User 13103 does not improve AUC. Reverting changes.
Training on augumented user 73256 32/50 current_auc = 0.6934739617666448
User 73256 AUC after training: 0.6882003955174687
User 73256 does not improve AUC. Reverting changes.
Training on augumented user 113578 33/50 current_auc = 0.6934739617666448
User 113578 AUC after training: 0.6885299934080422
User 113578 does not improve AUC. Reverting changes.
Training on augumented user 57127 34/50 current_auc = 0.6934739617666448
User 57127 AUC after training: 0.6743572841133818
User 57127 does not improve AUC. Reverting changes.
Training on augumented user 78746 35/50 current_auc = 0.6934739617666448
User 78746 AUC after training: 0.6799604482531313
User 78746 does not improve AUC. Reverting changes.
Training on augumented user 78387 36/50 current_auc = 0.6934739617666448
User 78387 AUC after training: 0.6931443638760713
User 78387 does not improve AUC. Reverting changes.
Training on augumented user 90881 37/50 current_auc = 0.6934739617666448
User 90881 AUC after training: 0.6895187870797627
User 90881 does not improve AUC. Reverting changes.
Training on augumented user 32960 38/50 current_auc = 0.6934739617666448
User 32960 AUC after training: 0.6868820039551747
User 32960 does not improve AUC. Reverting changes.
Training on augumented user 25864 39/50 current_auc = 0.6934739617666448
User 25864 AUC after training: 0.6905075807514831
User 25864 does not improve AUC. Reverting changes.
Training on augumented user 39425 40/50 current_auc = 0.6934739617666448
User 39425 AUC after training: 0.6760052735662492
User 39425 does not improve AUC. Reverting changes.
Training on augumented user 18247 41/50 current_auc = 0.6934739617666448
User 18247 AUC after training: 0.6918259723137773
User 18247 does not improve AUC. Reverting changes.
Training on augumented user 63316 42/50 current_auc = 0.6934739617666448
User 63316 AUC after training: 0.6924851680949242
User 63316 does not improve AUC. Reverting changes.
Training on augumented user 118956 43/50 current_auc = 0.6934739617666448
User 118956 AUC after training: 0.6852340145023073
User 118956 does not improve AUC. Reverting changes.
Training on augumented user 41435 44/50 current_auc = 0.6934739617666448
User 41435 AUC after training: 0.6891891891891893
User 41435 does not improve AUC. Reverting changes.
Training on augumented user 46662 45/50 current_auc = 0.6934739617666448
User 46662 AUC after training: 0.6908371786420567
User 46662 does not improve AUC. Reverting changes.
Training on augumented user 20039 46/50 current_auc = 0.6934739617666448
User 20039 AUC after training: 0.6878707976268952
User 20039 does not improve AUC. Reverting changes.
Training on augumented user 4614 47/50 current_auc = 0.6934739617666448
User 4614 AUC after training: 0.6878707976268952
User 4614 does not improve AUC. Reverting changes.
Training on augumented user 82246 48/50 current_auc = 0.6934739617666448
User 82246 AUC after training: 0.6872116018457481
User 82246 does not improve AUC. Reverting changes.
Training on augumented user 95051 49/50 current_auc = 0.6934739617666448
User 95051 AUC after training: 0.6911667765326303
User 95051 does not improve AUC. Reverting changes.
[2024-12-02 20:05:37.443972] start test user 6166 272/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:05:37.846188] start test user 6166 272/568 recall augumented users by random, augumented_users = [111621, 40411, 67842, 50890, 42679, 90343, 85661, 68624, 124740, 79102, 135262, 104247, 28761, 82715, 3567, 126852, 73800, 127793, 18308, 16232, 87161, 121459, 89297, 109533, 19219, 60188, 41774, 111380, 101042, 54910, 99778, 132458, 72448, 47950, 102217, 90398, 132351, 40309, 56853, 24490, 27842, 78733, 67504, 92629, 17551, 104684, 31738, 118408, 123861, 60075]
[2024-12-02 20:05:37.862624] user = 6166 Cloud 272/568
[2024-12-02 20:05:37.875114] user = 6166 Local 272/568
[2024-12-02 20:05:38.011785] user = 6166 Local+ 272/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:05:39.800421] user = 6166 MPDA- 272/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7675619834710744
Training on augumented user 111621 0/50 current_auc = 0.7675619834710744
User 111621 AUC after training: 0.7665289256198348
User 111621 does not improve AUC. Reverting changes.
Training on augumented user 40411 1/50 current_auc = 0.7675619834710744
User 40411 AUC after training: 0.7665289256198348
User 40411 does not improve AUC. Reverting changes.
Training on augumented user 67842 2/50 current_auc = 0.7675619834710744
User 67842 AUC after training: 0.7665289256198348
User 67842 does not improve AUC. Reverting changes.
Training on augumented user 50890 3/50 current_auc = 0.7675619834710744
User 50890 AUC after training: 0.7654958677685951
User 50890 does not improve AUC. Reverting changes.
Training on augumented user 42679 4/50 current_auc = 0.7675619834710744
User 42679 AUC after training: 0.7665289256198348
User 42679 does not improve AUC. Reverting changes.
Training on augumented user 90343 5/50 current_auc = 0.7675619834710744
User 90343 AUC after training: 0.7644628099173554
User 90343 does not improve AUC. Reverting changes.
Training on augumented user 85661 6/50 current_auc = 0.7675619834710744
User 85661 AUC after training: 0.7644628099173554
User 85661 does not improve AUC. Reverting changes.
Training on augumented user 68624 7/50 current_auc = 0.7675619834710744
User 68624 AUC after training: 0.7675619834710744
User 68624 does not improve AUC. Reverting changes.
Training on augumented user 124740 8/50 current_auc = 0.7675619834710744
User 124740 AUC after training: 0.7675619834710744
User 124740 does not improve AUC. Reverting changes.
Training on augumented user 79102 9/50 current_auc = 0.7675619834710744
User 79102 AUC after training: 0.7644628099173554
User 79102 does not improve AUC. Reverting changes.
Training on augumented user 135262 10/50 current_auc = 0.7675619834710744
User 135262 AUC after training: 0.7644628099173554
User 135262 does not improve AUC. Reverting changes.
Training on augumented user 104247 11/50 current_auc = 0.7675619834710744
User 104247 AUC after training: 0.765495867768595
User 104247 does not improve AUC. Reverting changes.
Training on augumented user 28761 12/50 current_auc = 0.7675619834710744
User 28761 AUC after training: 0.768595041322314
User 28761 improves AUC. Keeping the model.
Training on augumented user 82715 13/50 current_auc = 0.768595041322314
User 82715 AUC after training: 0.7665289256198348
User 82715 does not improve AUC. Reverting changes.
Training on augumented user 3567 14/50 current_auc = 0.768595041322314
User 3567 AUC after training: 0.7665289256198348
User 3567 does not improve AUC. Reverting changes.
Training on augumented user 126852 15/50 current_auc = 0.768595041322314
User 126852 AUC after training: 0.768595041322314
User 126852 does not improve AUC. Reverting changes.
Training on augumented user 73800 16/50 current_auc = 0.768595041322314
User 73800 AUC after training: 0.768595041322314
User 73800 does not improve AUC. Reverting changes.
Training on augumented user 127793 17/50 current_auc = 0.768595041322314
User 127793 AUC after training: 0.7665289256198348
User 127793 does not improve AUC. Reverting changes.
Training on augumented user 18308 18/50 current_auc = 0.768595041322314
User 18308 AUC after training: 0.7665289256198348
User 18308 does not improve AUC. Reverting changes.
Training on augumented user 16232 19/50 current_auc = 0.768595041322314
User 16232 AUC after training: 0.765495867768595
User 16232 does not improve AUC. Reverting changes.
Training on augumented user 87161 20/50 current_auc = 0.768595041322314
User 87161 AUC after training: 0.768595041322314
User 87161 does not improve AUC. Reverting changes.
Training on augumented user 121459 21/50 current_auc = 0.768595041322314
User 121459 AUC after training: 0.768595041322314
User 121459 does not improve AUC. Reverting changes.
Training on augumented user 89297 22/50 current_auc = 0.768595041322314
User 89297 AUC after training: 0.7675619834710744
User 89297 does not improve AUC. Reverting changes.
Training on augumented user 109533 23/50 current_auc = 0.768595041322314
User 109533 AUC after training: 0.7675619834710744
User 109533 does not improve AUC. Reverting changes.
Training on augumented user 19219 24/50 current_auc = 0.768595041322314
User 19219 AUC after training: 0.768595041322314
User 19219 does not improve AUC. Reverting changes.
Training on augumented user 60188 25/50 current_auc = 0.768595041322314
User 60188 AUC after training: 0.7665289256198348
User 60188 does not improve AUC. Reverting changes.
Training on augumented user 41774 26/50 current_auc = 0.768595041322314
User 41774 AUC after training: 0.7675619834710744
User 41774 does not improve AUC. Reverting changes.
Training on augumented user 111380 27/50 current_auc = 0.768595041322314
User 111380 AUC after training: 0.7675619834710744
User 111380 does not improve AUC. Reverting changes.
Training on augumented user 101042 28/50 current_auc = 0.768595041322314
User 101042 AUC after training: 0.7675619834710744
User 101042 does not improve AUC. Reverting changes.
Training on augumented user 54910 29/50 current_auc = 0.768595041322314
User 54910 AUC after training: 0.7665289256198348
User 54910 does not improve AUC. Reverting changes.
Training on augumented user 99778 30/50 current_auc = 0.768595041322314
User 99778 AUC after training: 0.768595041322314
User 99778 does not improve AUC. Reverting changes.
Training on augumented user 132458 31/50 current_auc = 0.768595041322314
User 132458 AUC after training: 0.768595041322314
User 132458 does not improve AUC. Reverting changes.
Training on augumented user 72448 32/50 current_auc = 0.768595041322314
User 72448 AUC after training: 0.7675619834710744
User 72448 does not improve AUC. Reverting changes.
Training on augumented user 47950 33/50 current_auc = 0.768595041322314
User 47950 AUC after training: 0.7665289256198348
User 47950 does not improve AUC. Reverting changes.
Training on augumented user 102217 34/50 current_auc = 0.768595041322314
User 102217 AUC after training: 0.7665289256198348
User 102217 does not improve AUC. Reverting changes.
Training on augumented user 90398 35/50 current_auc = 0.768595041322314
User 90398 AUC after training: 0.768595041322314
User 90398 does not improve AUC. Reverting changes.
Training on augumented user 132351 36/50 current_auc = 0.768595041322314
User 132351 AUC after training: 0.7665289256198348
User 132351 does not improve AUC. Reverting changes.
Training on augumented user 40309 37/50 current_auc = 0.768595041322314
User 40309 AUC after training: 0.768595041322314
User 40309 does not improve AUC. Reverting changes.
Training on augumented user 56853 38/50 current_auc = 0.768595041322314
User 56853 AUC after training: 0.7675619834710744
User 56853 does not improve AUC. Reverting changes.
Training on augumented user 24490 39/50 current_auc = 0.768595041322314
User 24490 AUC after training: 0.7665289256198348
User 24490 does not improve AUC. Reverting changes.
Training on augumented user 27842 40/50 current_auc = 0.768595041322314
User 27842 AUC after training: 0.765495867768595
User 27842 does not improve AUC. Reverting changes.
Training on augumented user 78733 41/50 current_auc = 0.768595041322314
User 78733 AUC after training: 0.768595041322314
User 78733 does not improve AUC. Reverting changes.
Training on augumented user 67504 42/50 current_auc = 0.768595041322314
User 67504 AUC after training: 0.768595041322314
User 67504 does not improve AUC. Reverting changes.
Training on augumented user 92629 43/50 current_auc = 0.768595041322314
User 92629 AUC after training: 0.768595041322314
User 92629 does not improve AUC. Reverting changes.
Training on augumented user 17551 44/50 current_auc = 0.768595041322314
User 17551 AUC after training: 0.7675619834710744
User 17551 does not improve AUC. Reverting changes.
Training on augumented user 104684 45/50 current_auc = 0.768595041322314
User 104684 AUC after training: 0.7675619834710744
User 104684 does not improve AUC. Reverting changes.
Training on augumented user 31738 46/50 current_auc = 0.768595041322314
User 31738 AUC after training: 0.768595041322314
User 31738 does not improve AUC. Reverting changes.
Training on augumented user 118408 47/50 current_auc = 0.768595041322314
User 118408 AUC after training: 0.7675619834710744
User 118408 does not improve AUC. Reverting changes.
Training on augumented user 123861 48/50 current_auc = 0.768595041322314
User 123861 AUC after training: 0.7675619834710744
User 123861 does not improve AUC. Reverting changes.
Training on augumented user 60075 49/50 current_auc = 0.768595041322314
User 60075 AUC after training: 0.768595041322314
User 60075 does not improve AUC. Reverting changes.
[2024-12-02 20:06:06.941982] start test user 6175 273/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:06:07.471067] start test user 6175 273/568 recall augumented users by random, augumented_users = [108655, 120789, 16445, 40583, 37778, 52783, 109862, 13006, 77861, 87658, 89900, 18990, 45567, 35366, 137682, 94261, 123177, 102593, 21644, 57896, 110934, 41844, 124141, 100914, 44993, 137562, 99076, 32639, 120894, 110328, 3034, 33123, 64261, 63677, 136844, 128960, 19820, 11309, 34182, 28327, 95721, 18963, 72662, 129303, 36715, 7080, 47531, 19240, 138264, 30661]
[2024-12-02 20:06:07.487583] user = 6175 Cloud 273/568
[2024-12-02 20:06:07.552448] user = 6175 Local 273/568
[2024-12-02 20:06:07.701618] user = 6175 Local+ 273/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:06:09.782236] user = 6175 MPDA- 273/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5540128473028403
Training on augumented user 108655 0/50 current_auc = 0.5540128473028403
User 108655 AUC after training: 0.5540979800325052
User 108655 improves AUC. Keeping the model.
Training on augumented user 120789 1/50 current_auc = 0.5540979800325052
User 120789 AUC after training: 0.5540747620153239
User 120789 does not improve AUC. Reverting changes.
Training on augumented user 16445 2/50 current_auc = 0.5540979800325052
User 16445 AUC after training: 0.5543146815261977
User 16445 improves AUC. Keeping the model.
Training on augumented user 40583 3/50 current_auc = 0.5543146815261977
User 40583 AUC after training: 0.554268245491835
User 40583 does not improve AUC. Reverting changes.
Training on augumented user 37778 4/50 current_auc = 0.5543146815261977
User 37778 AUC after training: 0.5541753734231097
User 37778 does not improve AUC. Reverting changes.
Training on augumented user 52783 5/50 current_auc = 0.5543146815261977
User 52783 AUC after training: 0.554128937388747
User 52783 does not improve AUC. Reverting changes.
Training on augumented user 109862 6/50 current_auc = 0.5543146815261977
User 109862 AUC after training: 0.5542992028480769
User 109862 does not improve AUC. Reverting changes.
Training on augumented user 13006 7/50 current_auc = 0.5543146815261977
User 13006 AUC after training: 0.5541211980496865
User 13006 does not improve AUC. Reverting changes.
Training on augumented user 77861 8/50 current_auc = 0.5543146815261977
User 77861 AUC after training: 0.5545391223589505
User 77861 improves AUC. Keeping the model.
Training on augumented user 87658 9/50 current_auc = 0.5545391223589505
User 87658 AUC after training: 0.5537961458091479
User 87658 does not improve AUC. Reverting changes.
Training on augumented user 89900 10/50 current_auc = 0.5545391223589505
User 89900 AUC after training: 0.554337899543379
User 89900 does not improve AUC. Reverting changes.
Training on augumented user 18990 11/50 current_auc = 0.5545391223589505
User 18990 AUC after training: 0.5545700797151923
User 18990 improves AUC. Keeping the model.
Training on augumented user 45567 12/50 current_auc = 0.5545700797151923
User 45567 AUC after training: 0.5546706911229782
User 45567 improves AUC. Keeping the model.
Training on augumented user 35366 13/50 current_auc = 0.5546706911229782
User 35366 AUC after training: 0.5544385109511647
User 35366 does not improve AUC. Reverting changes.
Training on augumented user 137682 14/50 current_auc = 0.5546706911229782
User 137682 AUC after training: 0.5551118334494234
User 137682 improves AUC. Keeping the model.
Training on augumented user 94261 15/50 current_auc = 0.5551118334494234
User 94261 AUC after training: 0.5547248664964012
User 94261 does not improve AUC. Reverting changes.
Training on augumented user 123177 16/50 current_auc = 0.5551118334494234
User 123177 AUC after training: 0.5550189613806981
User 123177 does not improve AUC. Reverting changes.
Training on augumented user 102593 17/50 current_auc = 0.5551118334494234
User 102593 AUC after training: 0.5550499187369399
User 102593 does not improve AUC. Reverting changes.
Training on augumented user 21644 18/50 current_auc = 0.5551118334494234
User 21644 AUC after training: 0.5544694683074065
User 21644 does not improve AUC. Reverting changes.
Training on augumented user 57896 19/50 current_auc = 0.5551118334494234
User 57896 AUC after training: 0.5548641745994892
User 57896 does not improve AUC. Reverting changes.
Training on augumented user 110934 20/50 current_auc = 0.5551118334494234
User 110934 AUC after training: 0.554546861698011
User 110934 does not improve AUC. Reverting changes.
Training on augumented user 41844 21/50 current_auc = 0.5551118334494234
User 41844 AUC after training: 0.5543146815261977
User 41844 does not improve AUC. Reverting changes.
Training on augumented user 124141 22/50 current_auc = 0.5551118334494234
User 124141 AUC after training: 0.5550499187369399
User 124141 does not improve AUC. Reverting changes.
Training on augumented user 100914 23/50 current_auc = 0.5551118334494234
User 100914 AUC after training: 0.5548641745994892
User 100914 does not improve AUC. Reverting changes.
Training on augumented user 44993 24/50 current_auc = 0.5551118334494234
User 44993 AUC after training: 0.5547867812088848
User 44993 does not improve AUC. Reverting changes.
Training on augumented user 137562 25/50 current_auc = 0.5551118334494234
User 137562 AUC after training: 0.5552047055181487
User 137562 improves AUC. Keeping the model.
Training on augumented user 99076 26/50 current_auc = 0.5552047055181487
User 99076 AUC after training: 0.5551814875009675
User 99076 does not improve AUC. Reverting changes.
Training on augumented user 32639 27/50 current_auc = 0.5552047055181487
User 32639 AUC after training: 0.5552124448572092
User 32639 improves AUC. Keeping the model.
Training on augumented user 120894 28/50 current_auc = 0.5552124448572092
User 120894 AUC after training: 0.5554988004024457
User 120894 improves AUC. Keeping the model.
Training on augumented user 110328 29/50 current_auc = 0.5554988004024457
User 110328 AUC after training: 0.5551273121275444
User 110328 does not improve AUC. Reverting changes.
Training on augumented user 3034 30/50 current_auc = 0.5554988004024457
User 3034 AUC after training: 0.555382710316539
User 3034 does not improve AUC. Reverting changes.
Training on augumented user 33123 31/50 current_auc = 0.5554988004024457
User 33123 AUC after training: 0.5554988004024456
User 33123 does not improve AUC. Reverting changes.
Training on augumented user 64261 32/50 current_auc = 0.5554988004024457
User 64261 AUC after training: 0.5549106106338519
User 64261 does not improve AUC. Reverting changes.
Training on augumented user 63677 33/50 current_auc = 0.5554988004024457
User 63677 AUC after training: 0.5552975775868741
User 63677 does not improve AUC. Reverting changes.
Training on augumented user 136844 34/50 current_auc = 0.5554988004024457
User 136844 AUC after training: 0.5552820989087532
User 136844 does not improve AUC. Reverting changes.
Training on augumented user 128960 35/50 current_auc = 0.5554988004024457
User 128960 AUC after training: 0.5553904496555995
User 128960 does not improve AUC. Reverting changes.
Training on augumented user 19820 36/50 current_auc = 0.5554988004024457
User 19820 AUC after training: 0.5553362742821764
User 19820 does not improve AUC. Reverting changes.
Training on augumented user 11309 37/50 current_auc = 0.5554988004024457
User 11309 AUC after training: 0.5561024688491603
User 11309 improves AUC. Keeping the model.
Training on augumented user 34182 38/50 current_auc = 0.5561024688491603
User 34182 AUC after training: 0.5557541985914403
User 34182 does not improve AUC. Reverting changes.
Training on augumented user 28327 39/50 current_auc = 0.5561024688491603
User 28327 AUC after training: 0.5557464592523798
User 28327 does not improve AUC. Reverting changes.
Training on augumented user 95721 40/50 current_auc = 0.5561024688491603
User 95721 AUC after training: 0.5560250754585558
User 95721 does not improve AUC. Reverting changes.
Training on augumented user 18963 41/50 current_auc = 0.5561024688491603
User 18963 AUC after training: 0.5557077625570777
User 18963 does not improve AUC. Reverting changes.
Training on augumented user 72662 42/50 current_auc = 0.5561024688491603
User 72662 AUC after training: 0.5556071511492919
User 72662 does not improve AUC. Reverting changes.
Training on augumented user 129303 43/50 current_auc = 0.5561024688491603
User 129303 AUC after training: 0.5557774166086216
User 129303 does not improve AUC. Reverting changes.
Training on augumented user 36715 44/50 current_auc = 0.5561024688491603
User 36715 AUC after training: 0.5553749709774785
User 36715 does not improve AUC. Reverting changes.
Training on augumented user 7080 45/50 current_auc = 0.5561024688491603
User 7080 AUC after training: 0.5560869901710395
User 7080 does not improve AUC. Reverting changes.
Training on augumented user 47531 46/50 current_auc = 0.5561024688491603
User 47531 AUC after training: 0.5561179475272812
User 47531 improves AUC. Keeping the model.
Training on augumented user 19240 47/50 current_auc = 0.5561179475272812
User 19240 AUC after training: 0.5554678430462038
User 19240 does not improve AUC. Reverting changes.
Training on augumented user 138264 48/50 current_auc = 0.5561179475272812
User 138264 AUC after training: 0.5561179475272812
User 138264 does not improve AUC. Reverting changes.
Training on augumented user 30661 49/50 current_auc = 0.5561179475272812
User 30661 AUC after training: 0.5561179475272812
User 30661 does not improve AUC. Reverting changes.
[2024-12-02 20:06:37.501804] start test user 6180 274/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:06:37.917841] start test user 6180 274/568 recall augumented users by random, augumented_users = [112653, 52103, 127396, 94615, 31497, 54156, 12526, 104363, 112109, 31886, 136765, 107070, 29379, 22950, 49921, 46568, 25606, 80250, 94931, 96762, 29681, 46240, 113718, 42264, 25415, 68683, 89841, 70995, 76792, 21345, 68742, 48010, 103158, 25658, 137238, 60896, 16868, 87787, 61589, 49152, 62647, 132271, 50553, 42732, 44555, 94506, 129443, 92634, 71011, 121641]
[2024-12-02 20:06:37.932420] user = 6180 Cloud 274/568
[2024-12-02 20:06:37.941974] user = 6180 Local 274/568
[2024-12-02 20:06:37.981514] user = 6180 Local+ 274/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:06:39.531137] user = 6180 MPDA- 274/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 112653 0/50 current_auc = 1.0
User 112653 AUC after training: 1.0
User 112653 does not improve AUC. Reverting changes.
Training on augumented user 52103 1/50 current_auc = 1.0
User 52103 AUC after training: 1.0
User 52103 does not improve AUC. Reverting changes.
Training on augumented user 127396 2/50 current_auc = 1.0
User 127396 AUC after training: 1.0
User 127396 does not improve AUC. Reverting changes.
Training on augumented user 94615 3/50 current_auc = 1.0
User 94615 AUC after training: 1.0
User 94615 does not improve AUC. Reverting changes.
Training on augumented user 31497 4/50 current_auc = 1.0
User 31497 AUC after training: 1.0
User 31497 does not improve AUC. Reverting changes.
Training on augumented user 54156 5/50 current_auc = 1.0
User 54156 AUC after training: 1.0
User 54156 does not improve AUC. Reverting changes.
Training on augumented user 12526 6/50 current_auc = 1.0
User 12526 AUC after training: 1.0
User 12526 does not improve AUC. Reverting changes.
Training on augumented user 104363 7/50 current_auc = 1.0
User 104363 AUC after training: 1.0
User 104363 does not improve AUC. Reverting changes.
Training on augumented user 112109 8/50 current_auc = 1.0
User 112109 AUC after training: 1.0
User 112109 does not improve AUC. Reverting changes.
Training on augumented user 31886 9/50 current_auc = 1.0
User 31886 AUC after training: 1.0
User 31886 does not improve AUC. Reverting changes.
Training on augumented user 136765 10/50 current_auc = 1.0
User 136765 AUC after training: 1.0
User 136765 does not improve AUC. Reverting changes.
Training on augumented user 107070 11/50 current_auc = 1.0
User 107070 AUC after training: 1.0
User 107070 does not improve AUC. Reverting changes.
Training on augumented user 29379 12/50 current_auc = 1.0
User 29379 AUC after training: 1.0
User 29379 does not improve AUC. Reverting changes.
Training on augumented user 22950 13/50 current_auc = 1.0
User 22950 AUC after training: 1.0
User 22950 does not improve AUC. Reverting changes.
Training on augumented user 49921 14/50 current_auc = 1.0
User 49921 AUC after training: 1.0
User 49921 does not improve AUC. Reverting changes.
Training on augumented user 46568 15/50 current_auc = 1.0
User 46568 AUC after training: 1.0
User 46568 does not improve AUC. Reverting changes.
Training on augumented user 25606 16/50 current_auc = 1.0
User 25606 AUC after training: 1.0
User 25606 does not improve AUC. Reverting changes.
Training on augumented user 80250 17/50 current_auc = 1.0
User 80250 AUC after training: 1.0
User 80250 does not improve AUC. Reverting changes.
Training on augumented user 94931 18/50 current_auc = 1.0
User 94931 AUC after training: 1.0
User 94931 does not improve AUC. Reverting changes.
Training on augumented user 96762 19/50 current_auc = 1.0
User 96762 AUC after training: 1.0
User 96762 does not improve AUC. Reverting changes.
Training on augumented user 29681 20/50 current_auc = 1.0
User 29681 AUC after training: 1.0
User 29681 does not improve AUC. Reverting changes.
Training on augumented user 46240 21/50 current_auc = 1.0
User 46240 AUC after training: 1.0
User 46240 does not improve AUC. Reverting changes.
Training on augumented user 113718 22/50 current_auc = 1.0
User 113718 AUC after training: 1.0
User 113718 does not improve AUC. Reverting changes.
Training on augumented user 42264 23/50 current_auc = 1.0
User 42264 AUC after training: 1.0
User 42264 does not improve AUC. Reverting changes.
Training on augumented user 25415 24/50 current_auc = 1.0
User 25415 AUC after training: 1.0
User 25415 does not improve AUC. Reverting changes.
Training on augumented user 68683 25/50 current_auc = 1.0
User 68683 AUC after training: 1.0
User 68683 does not improve AUC. Reverting changes.
Training on augumented user 89841 26/50 current_auc = 1.0
User 89841 AUC after training: 1.0
User 89841 does not improve AUC. Reverting changes.
Training on augumented user 70995 27/50 current_auc = 1.0
User 70995 AUC after training: 1.0
User 70995 does not improve AUC. Reverting changes.
Training on augumented user 76792 28/50 current_auc = 1.0
User 76792 AUC after training: 1.0
User 76792 does not improve AUC. Reverting changes.
Training on augumented user 21345 29/50 current_auc = 1.0
User 21345 AUC after training: 1.0
User 21345 does not improve AUC. Reverting changes.
Training on augumented user 68742 30/50 current_auc = 1.0
User 68742 AUC after training: 1.0
User 68742 does not improve AUC. Reverting changes.
Training on augumented user 48010 31/50 current_auc = 1.0
User 48010 AUC after training: 1.0
User 48010 does not improve AUC. Reverting changes.
Training on augumented user 103158 32/50 current_auc = 1.0
User 103158 AUC after training: 1.0
User 103158 does not improve AUC. Reverting changes.
Training on augumented user 25658 33/50 current_auc = 1.0
User 25658 AUC after training: 1.0
User 25658 does not improve AUC. Reverting changes.
Training on augumented user 137238 34/50 current_auc = 1.0
User 137238 AUC after training: 1.0
User 137238 does not improve AUC. Reverting changes.
Training on augumented user 60896 35/50 current_auc = 1.0
User 60896 AUC after training: 1.0
User 60896 does not improve AUC. Reverting changes.
Training on augumented user 16868 36/50 current_auc = 1.0
User 16868 AUC after training: 1.0
User 16868 does not improve AUC. Reverting changes.
Training on augumented user 87787 37/50 current_auc = 1.0
User 87787 AUC after training: 1.0
User 87787 does not improve AUC. Reverting changes.
Training on augumented user 61589 38/50 current_auc = 1.0
User 61589 AUC after training: 1.0
User 61589 does not improve AUC. Reverting changes.
Training on augumented user 49152 39/50 current_auc = 1.0
User 49152 AUC after training: 1.0
User 49152 does not improve AUC. Reverting changes.
Training on augumented user 62647 40/50 current_auc = 1.0
User 62647 AUC after training: 1.0
User 62647 does not improve AUC. Reverting changes.
Training on augumented user 132271 41/50 current_auc = 1.0
User 132271 AUC after training: 1.0
User 132271 does not improve AUC. Reverting changes.
Training on augumented user 50553 42/50 current_auc = 1.0
User 50553 AUC after training: 1.0
User 50553 does not improve AUC. Reverting changes.
Training on augumented user 42732 43/50 current_auc = 1.0
User 42732 AUC after training: 1.0
User 42732 does not improve AUC. Reverting changes.
Training on augumented user 44555 44/50 current_auc = 1.0
User 44555 AUC after training: 1.0
User 44555 does not improve AUC. Reverting changes.
Training on augumented user 94506 45/50 current_auc = 1.0
User 94506 AUC after training: 1.0
User 94506 does not improve AUC. Reverting changes.
Training on augumented user 129443 46/50 current_auc = 1.0
User 129443 AUC after training: 1.0
User 129443 does not improve AUC. Reverting changes.
Training on augumented user 92634 47/50 current_auc = 1.0
User 92634 AUC after training: 1.0
User 92634 does not improve AUC. Reverting changes.
Training on augumented user 71011 48/50 current_auc = 1.0
User 71011 AUC after training: 1.0
User 71011 does not improve AUC. Reverting changes.
Training on augumented user 121641 49/50 current_auc = 1.0
User 121641 AUC after training: 1.0
User 121641 does not improve AUC. Reverting changes.
[2024-12-02 20:07:09.284553] start test user 6236 275/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:07:09.997750] start test user 6236 275/568 recall augumented users by random, augumented_users = [88842, 56762, 13893, 28345, 73102, 71438, 28048, 131890, 12499, 70715, 87164, 90243, 21101, 39667, 45577, 10927, 134833, 19500, 2665, 79143, 12389, 122885, 15107, 60938, 36031, 55724, 22793, 99635, 58018, 7419, 18066, 31274, 103039, 40929, 129550, 82106, 41443, 90574, 59420, 92591, 65193, 131929, 81718, 77801, 13230, 29291, 15552, 24957, 20832, 30496]
[2024-12-02 20:07:10.020949] user = 6236 Cloud 275/568
[2024-12-02 20:07:10.060992] user = 6236 Local 275/568
[2024-12-02 20:07:10.196550] user = 6236 Local+ 275/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:07:12.581274] user = 6236 MPDA- 275/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6220095693779903
Training on augumented user 88842 0/50 current_auc = 0.6220095693779903
User 88842 AUC after training: 0.6172248803827751
User 88842 does not improve AUC. Reverting changes.
Training on augumented user 56762 1/50 current_auc = 0.6220095693779903
User 56762 AUC after training: 0.6220095693779903
User 56762 does not improve AUC. Reverting changes.
Training on augumented user 13893 2/50 current_auc = 0.6220095693779903
User 13893 AUC after training: 0.6220095693779903
User 13893 does not improve AUC. Reverting changes.
Training on augumented user 28345 3/50 current_auc = 0.6220095693779903
User 28345 AUC after training: 0.6172248803827751
User 28345 does not improve AUC. Reverting changes.
Training on augumented user 73102 4/50 current_auc = 0.6220095693779903
User 73102 AUC after training: 0.6220095693779903
User 73102 does not improve AUC. Reverting changes.
Training on augumented user 71438 5/50 current_auc = 0.6220095693779903
User 71438 AUC after training: 0.6172248803827751
User 71438 does not improve AUC. Reverting changes.
Training on augumented user 28048 6/50 current_auc = 0.6220095693779903
User 28048 AUC after training: 0.6220095693779903
User 28048 does not improve AUC. Reverting changes.
Training on augumented user 131890 7/50 current_auc = 0.6220095693779903
User 131890 AUC after training: 0.6220095693779903
User 131890 does not improve AUC. Reverting changes.
Training on augumented user 12499 8/50 current_auc = 0.6220095693779903
User 12499 AUC after training: 0.6220095693779903
User 12499 does not improve AUC. Reverting changes.
Training on augumented user 70715 9/50 current_auc = 0.6220095693779903
User 70715 AUC after training: 0.6220095693779903
User 70715 does not improve AUC. Reverting changes.
Training on augumented user 87164 10/50 current_auc = 0.6220095693779903
User 87164 AUC after training: 0.6172248803827751
User 87164 does not improve AUC. Reverting changes.
Training on augumented user 90243 11/50 current_auc = 0.6220095693779903
User 90243 AUC after training: 0.6220095693779903
User 90243 does not improve AUC. Reverting changes.
Training on augumented user 21101 12/50 current_auc = 0.6220095693779903
User 21101 AUC after training: 0.6220095693779903
User 21101 does not improve AUC. Reverting changes.
Training on augumented user 39667 13/50 current_auc = 0.6220095693779903
User 39667 AUC after training: 0.6220095693779903
User 39667 does not improve AUC. Reverting changes.
Training on augumented user 45577 14/50 current_auc = 0.6220095693779903
User 45577 AUC after training: 0.6172248803827751
User 45577 does not improve AUC. Reverting changes.
Training on augumented user 10927 15/50 current_auc = 0.6220095693779903
User 10927 AUC after training: 0.6220095693779903
User 10927 does not improve AUC. Reverting changes.
Training on augumented user 134833 16/50 current_auc = 0.6220095693779903
User 134833 AUC after training: 0.6220095693779903
User 134833 does not improve AUC. Reverting changes.
Training on augumented user 19500 17/50 current_auc = 0.6220095693779903
User 19500 AUC after training: 0.6220095693779903
User 19500 does not improve AUC. Reverting changes.
Training on augumented user 2665 18/50 current_auc = 0.6220095693779903
User 2665 AUC after training: 0.6172248803827751
User 2665 does not improve AUC. Reverting changes.
Training on augumented user 79143 19/50 current_auc = 0.6220095693779903
User 79143 AUC after training: 0.6172248803827751
User 79143 does not improve AUC. Reverting changes.
Training on augumented user 12389 20/50 current_auc = 0.6220095693779903
User 12389 AUC after training: 0.6220095693779903
User 12389 does not improve AUC. Reverting changes.
Training on augumented user 122885 21/50 current_auc = 0.6220095693779903
User 122885 AUC after training: 0.6220095693779903
User 122885 does not improve AUC. Reverting changes.
Training on augumented user 15107 22/50 current_auc = 0.6220095693779903
User 15107 AUC after training: 0.6220095693779903
User 15107 does not improve AUC. Reverting changes.
Training on augumented user 60938 23/50 current_auc = 0.6220095693779903
User 60938 AUC after training: 0.6220095693779903
User 60938 does not improve AUC. Reverting changes.
Training on augumented user 36031 24/50 current_auc = 0.6220095693779903
User 36031 AUC after training: 0.6220095693779903
User 36031 does not improve AUC. Reverting changes.
Training on augumented user 55724 25/50 current_auc = 0.6220095693779903
User 55724 AUC after training: 0.6172248803827751
User 55724 does not improve AUC. Reverting changes.
Training on augumented user 22793 26/50 current_auc = 0.6220095693779903
User 22793 AUC after training: 0.6220095693779903
User 22793 does not improve AUC. Reverting changes.
Training on augumented user 99635 27/50 current_auc = 0.6220095693779903
User 99635 AUC after training: 0.6172248803827751
User 99635 does not improve AUC. Reverting changes.
Training on augumented user 58018 28/50 current_auc = 0.6220095693779903
User 58018 AUC after training: 0.6220095693779903
User 58018 does not improve AUC. Reverting changes.
Training on augumented user 7419 29/50 current_auc = 0.6220095693779903
User 7419 AUC after training: 0.6220095693779903
User 7419 does not improve AUC. Reverting changes.
Training on augumented user 18066 30/50 current_auc = 0.6220095693779903
User 18066 AUC after training: 0.6220095693779903
User 18066 does not improve AUC. Reverting changes.
Training on augumented user 31274 31/50 current_auc = 0.6220095693779903
User 31274 AUC after training: 0.6172248803827751
User 31274 does not improve AUC. Reverting changes.
Training on augumented user 103039 32/50 current_auc = 0.6220095693779903
User 103039 AUC after training: 0.6220095693779903
User 103039 does not improve AUC. Reverting changes.
Training on augumented user 40929 33/50 current_auc = 0.6220095693779903
User 40929 AUC after training: 0.6172248803827751
User 40929 does not improve AUC. Reverting changes.
Training on augumented user 129550 34/50 current_auc = 0.6220095693779903
User 129550 AUC after training: 0.6220095693779903
User 129550 does not improve AUC. Reverting changes.
Training on augumented user 82106 35/50 current_auc = 0.6220095693779903
User 82106 AUC after training: 0.6172248803827751
User 82106 does not improve AUC. Reverting changes.
Training on augumented user 41443 36/50 current_auc = 0.6220095693779903
User 41443 AUC after training: 0.6172248803827751
User 41443 does not improve AUC. Reverting changes.
Training on augumented user 90574 37/50 current_auc = 0.6220095693779903
User 90574 AUC after training: 0.6220095693779903
User 90574 does not improve AUC. Reverting changes.
Training on augumented user 59420 38/50 current_auc = 0.6220095693779903
User 59420 AUC after training: 0.6172248803827751
User 59420 does not improve AUC. Reverting changes.
Training on augumented user 92591 39/50 current_auc = 0.6220095693779903
User 92591 AUC after training: 0.6220095693779903
User 92591 does not improve AUC. Reverting changes.
Training on augumented user 65193 40/50 current_auc = 0.6220095693779903
User 65193 AUC after training: 0.6220095693779903
User 65193 does not improve AUC. Reverting changes.
Training on augumented user 131929 41/50 current_auc = 0.6220095693779903
User 131929 AUC after training: 0.6220095693779903
User 131929 does not improve AUC. Reverting changes.
Training on augumented user 81718 42/50 current_auc = 0.6220095693779903
User 81718 AUC after training: 0.6220095693779903
User 81718 does not improve AUC. Reverting changes.
Training on augumented user 77801 43/50 current_auc = 0.6220095693779903
User 77801 AUC after training: 0.6172248803827751
User 77801 does not improve AUC. Reverting changes.
Training on augumented user 13230 44/50 current_auc = 0.6220095693779903
User 13230 AUC after training: 0.6220095693779903
User 13230 does not improve AUC. Reverting changes.
Training on augumented user 29291 45/50 current_auc = 0.6220095693779903
User 29291 AUC after training: 0.6220095693779903
User 29291 does not improve AUC. Reverting changes.
Training on augumented user 15552 46/50 current_auc = 0.6220095693779903
User 15552 AUC after training: 0.6220095693779903
User 15552 does not improve AUC. Reverting changes.
Training on augumented user 24957 47/50 current_auc = 0.6220095693779903
User 24957 AUC after training: 0.6172248803827751
User 24957 does not improve AUC. Reverting changes.
Training on augumented user 20832 48/50 current_auc = 0.6220095693779903
User 20832 AUC after training: 0.6172248803827751
User 20832 does not improve AUC. Reverting changes.
Training on augumented user 30496 49/50 current_auc = 0.6220095693779903
User 30496 AUC after training: 0.6220095693779903
User 30496 does not improve AUC. Reverting changes.
[2024-12-02 20:07:38.254384] start test user 6252 276/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:07:38.669383] start test user 6252 276/568 recall augumented users by random, augumented_users = [83285, 110839, 24294, 34635, 101896, 113420, 101693, 18534, 62451, 59905, 1681, 41671, 21731, 1150, 46092, 86852, 3811, 99542, 128928, 134924, 61481, 49632, 114717, 23843, 125100, 100675, 41006, 49544, 98679, 99868, 77841, 94695, 137935, 78764, 61645, 78405, 102791, 8711, 131650, 119975, 108963, 101828, 123154, 100805, 66434, 117812, 108556, 68760, 91192, 25187]
[2024-12-02 20:07:38.683396] user = 6252 Cloud 276/568
[2024-12-02 20:07:38.695278] user = 6252 Local 276/568
[2024-12-02 20:07:38.722369] user = 6252 Local+ 276/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:07:40.676116] user = 6252 MPDA- 276/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6356107660455487
Training on augumented user 83285 0/50 current_auc = 0.6356107660455487
User 83285 AUC after training: 0.6376811594202899
User 83285 improves AUC. Keeping the model.
Training on augumented user 110839 1/50 current_auc = 0.6376811594202899
User 110839 AUC after training: 0.6363008971704625
User 110839 does not improve AUC. Reverting changes.
Training on augumented user 24294 2/50 current_auc = 0.6376811594202899
User 24294 AUC after training: 0.6363008971704625
User 24294 does not improve AUC. Reverting changes.
Training on augumented user 34635 3/50 current_auc = 0.6376811594202899
User 34635 AUC after training: 0.6356107660455487
User 34635 does not improve AUC. Reverting changes.
Training on augumented user 101896 4/50 current_auc = 0.6376811594202899
User 101896 AUC after training: 0.6376811594202899
User 101896 does not improve AUC. Reverting changes.
Training on augumented user 113420 5/50 current_auc = 0.6376811594202899
User 113420 AUC after training: 0.634920634920635
User 113420 does not improve AUC. Reverting changes.
Training on augumented user 101693 6/50 current_auc = 0.6376811594202899
User 101693 AUC after training: 0.6369910282953761
User 101693 does not improve AUC. Reverting changes.
Training on augumented user 18534 7/50 current_auc = 0.6376811594202899
User 18534 AUC after training: 0.6349206349206349
User 18534 does not improve AUC. Reverting changes.
Training on augumented user 62451 8/50 current_auc = 0.6376811594202899
User 62451 AUC after training: 0.6376811594202899
User 62451 does not improve AUC. Reverting changes.
Training on augumented user 59905 9/50 current_auc = 0.6376811594202899
User 59905 AUC after training: 0.6356107660455487
User 59905 does not improve AUC. Reverting changes.
Training on augumented user 1681 10/50 current_auc = 0.6376811594202899
User 1681 AUC after training: 0.6369910282953761
User 1681 does not improve AUC. Reverting changes.
Training on augumented user 41671 11/50 current_auc = 0.6376811594202899
User 41671 AUC after training: 0.6376811594202899
User 41671 does not improve AUC. Reverting changes.
Training on augumented user 21731 12/50 current_auc = 0.6376811594202899
User 21731 AUC after training: 0.6376811594202899
User 21731 does not improve AUC. Reverting changes.
Training on augumented user 1150 13/50 current_auc = 0.6376811594202899
User 1150 AUC after training: 0.6349206349206349
User 1150 does not improve AUC. Reverting changes.
Training on augumented user 46092 14/50 current_auc = 0.6376811594202899
User 46092 AUC after training: 0.6369910282953761
User 46092 does not improve AUC. Reverting changes.
Training on augumented user 86852 15/50 current_auc = 0.6376811594202899
User 86852 AUC after training: 0.6342305037957212
User 86852 does not improve AUC. Reverting changes.
Training on augumented user 3811 16/50 current_auc = 0.6376811594202899
User 3811 AUC after training: 0.6369910282953761
User 3811 does not improve AUC. Reverting changes.
Training on augumented user 99542 17/50 current_auc = 0.6376811594202899
User 99542 AUC after training: 0.6342305037957212
User 99542 does not improve AUC. Reverting changes.
Training on augumented user 128928 18/50 current_auc = 0.6376811594202899
User 128928 AUC after training: 0.6356107660455487
User 128928 does not improve AUC. Reverting changes.
Training on augumented user 134924 19/50 current_auc = 0.6376811594202899
User 134924 AUC after training: 0.6356107660455487
User 134924 does not improve AUC. Reverting changes.
Training on augumented user 61481 20/50 current_auc = 0.6376811594202899
User 61481 AUC after training: 0.6390614216701173
User 61481 improves AUC. Keeping the model.
Training on augumented user 49632 21/50 current_auc = 0.6390614216701173
User 49632 AUC after training: 0.6369910282953761
User 49632 does not improve AUC. Reverting changes.
Training on augumented user 114717 22/50 current_auc = 0.6390614216701173
User 114717 AUC after training: 0.639751552795031
User 114717 improves AUC. Keeping the model.
Training on augumented user 23843 23/50 current_auc = 0.639751552795031
User 23843 AUC after training: 0.6383712905452037
User 23843 does not improve AUC. Reverting changes.
Training on augumented user 125100 24/50 current_auc = 0.639751552795031
User 125100 AUC after training: 0.639751552795031
User 125100 does not improve AUC. Reverting changes.
Training on augumented user 100675 25/50 current_auc = 0.639751552795031
User 100675 AUC after training: 0.6383712905452036
User 100675 does not improve AUC. Reverting changes.
Training on augumented user 41006 26/50 current_auc = 0.639751552795031
User 41006 AUC after training: 0.6376811594202898
User 41006 does not improve AUC. Reverting changes.
Training on augumented user 49544 27/50 current_auc = 0.639751552795031
User 49544 AUC after training: 0.6404416839199448
User 49544 improves AUC. Keeping the model.
Training on augumented user 98679 28/50 current_auc = 0.6404416839199448
User 98679 AUC after training: 0.6397515527950312
User 98679 does not improve AUC. Reverting changes.
Training on augumented user 99868 29/50 current_auc = 0.6404416839199448
User 99868 AUC after training: 0.6390614216701174
User 99868 does not improve AUC. Reverting changes.
Training on augumented user 77841 30/50 current_auc = 0.6404416839199448
User 77841 AUC after training: 0.6383712905452036
User 77841 does not improve AUC. Reverting changes.
Training on augumented user 94695 31/50 current_auc = 0.6404416839199448
User 94695 AUC after training: 0.6349206349206349
User 94695 does not improve AUC. Reverting changes.
Training on augumented user 137935 32/50 current_auc = 0.6404416839199448
User 137935 AUC after training: 0.6369910282953761
User 137935 does not improve AUC. Reverting changes.
Training on augumented user 78764 33/50 current_auc = 0.6404416839199448
User 78764 AUC after training: 0.6376811594202899
User 78764 does not improve AUC. Reverting changes.
Training on augumented user 61645 34/50 current_auc = 0.6404416839199448
User 61645 AUC after training: 0.6418219461697723
User 61645 improves AUC. Keeping the model.
Training on augumented user 78405 35/50 current_auc = 0.6418219461697723
User 78405 AUC after training: 0.639751552795031
User 78405 does not improve AUC. Reverting changes.
Training on augumented user 102791 36/50 current_auc = 0.6418219461697723
User 102791 AUC after training: 0.6404416839199448
User 102791 does not improve AUC. Reverting changes.
Training on augumented user 8711 37/50 current_auc = 0.6418219461697723
User 8711 AUC after training: 0.6418219461697723
User 8711 does not improve AUC. Reverting changes.
Training on augumented user 131650 38/50 current_auc = 0.6418219461697723
User 131650 AUC after training: 0.639751552795031
User 131650 does not improve AUC. Reverting changes.
Training on augumented user 119975 39/50 current_auc = 0.6418219461697723
User 119975 AUC after training: 0.639751552795031
User 119975 does not improve AUC. Reverting changes.
Training on augumented user 108963 40/50 current_auc = 0.6418219461697723
User 108963 AUC after training: 0.6418219461697723
User 108963 does not improve AUC. Reverting changes.
Training on augumented user 101828 41/50 current_auc = 0.6418219461697723
User 101828 AUC after training: 0.6390614216701173
User 101828 does not improve AUC. Reverting changes.
Training on augumented user 123154 42/50 current_auc = 0.6418219461697723
User 123154 AUC after training: 0.6411318150448585
User 123154 does not improve AUC. Reverting changes.
Training on augumented user 100805 43/50 current_auc = 0.6418219461697723
User 100805 AUC after training: 0.6369910282953761
User 100805 does not improve AUC. Reverting changes.
Training on augumented user 66434 44/50 current_auc = 0.6418219461697723
User 66434 AUC after training: 0.639751552795031
User 66434 does not improve AUC. Reverting changes.
Training on augumented user 117812 45/50 current_auc = 0.6418219461697723
User 117812 AUC after training: 0.6369910282953761
User 117812 does not improve AUC. Reverting changes.
Training on augumented user 108556 46/50 current_auc = 0.6418219461697723
User 108556 AUC after training: 0.6418219461697723
User 108556 does not improve AUC. Reverting changes.
Training on augumented user 68760 47/50 current_auc = 0.6418219461697723
User 68760 AUC after training: 0.6404416839199448
User 68760 does not improve AUC. Reverting changes.
Training on augumented user 91192 48/50 current_auc = 0.6418219461697723
User 91192 AUC after training: 0.6404416839199448
User 91192 does not improve AUC. Reverting changes.
Training on augumented user 25187 49/50 current_auc = 0.6418219461697723
User 25187 AUC after training: 0.6411318150448585
User 25187 does not improve AUC. Reverting changes.
[2024-12-02 20:08:06.738304] start test user 6272 277/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:08:07.159704] start test user 6272 277/568 recall augumented users by random, augumented_users = [28020, 16521, 64275, 118916, 68536, 31260, 127160, 134817, 1069, 80978, 133337, 92794, 56926, 82589, 36894, 111988, 126145, 87945, 19030, 60823, 125913, 71848, 86071, 72877, 78299, 103, 27496, 9633, 72210, 74844, 38296, 21585, 11220, 15551, 88478, 109089, 10420, 17719, 73855, 26650, 96360, 54029, 22504, 137398, 6790, 68667, 7909, 48583, 43611, 1600]
[2024-12-02 20:08:07.173964] user = 6272 Cloud 277/568
[2024-12-02 20:08:07.186652] user = 6272 Local 277/568
[2024-12-02 20:08:07.233250] user = 6272 Local+ 277/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:08:09.124864] user = 6272 MPDA- 277/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7770270270270271
Training on augumented user 28020 0/50 current_auc = 0.7770270270270271
User 28020 AUC after training: 0.7770270270270271
User 28020 does not improve AUC. Reverting changes.
Training on augumented user 16521 1/50 current_auc = 0.7770270270270271
User 16521 AUC after training: 0.7770270270270271
User 16521 does not improve AUC. Reverting changes.
Training on augumented user 64275 2/50 current_auc = 0.7770270270270271
User 64275 AUC after training: 0.7770270270270271
User 64275 does not improve AUC. Reverting changes.
Training on augumented user 118916 3/50 current_auc = 0.7770270270270271
User 118916 AUC after training: 0.7747747747747749
User 118916 does not improve AUC. Reverting changes.
Training on augumented user 68536 4/50 current_auc = 0.7770270270270271
User 68536 AUC after training: 0.7770270270270271
User 68536 does not improve AUC. Reverting changes.
Training on augumented user 31260 5/50 current_auc = 0.7770270270270271
User 31260 AUC after training: 0.7770270270270271
User 31260 does not improve AUC. Reverting changes.
Training on augumented user 127160 6/50 current_auc = 0.7770270270270271
User 127160 AUC after training: 0.7770270270270271
User 127160 does not improve AUC. Reverting changes.
Training on augumented user 134817 7/50 current_auc = 0.7770270270270271
User 134817 AUC after training: 0.7770270270270271
User 134817 does not improve AUC. Reverting changes.
Training on augumented user 1069 8/50 current_auc = 0.7770270270270271
User 1069 AUC after training: 0.7770270270270271
User 1069 does not improve AUC. Reverting changes.
Training on augumented user 80978 9/50 current_auc = 0.7770270270270271
User 80978 AUC after training: 0.7770270270270271
User 80978 does not improve AUC. Reverting changes.
Training on augumented user 133337 10/50 current_auc = 0.7770270270270271
User 133337 AUC after training: 0.7770270270270271
User 133337 does not improve AUC. Reverting changes.
Training on augumented user 92794 11/50 current_auc = 0.7770270270270271
User 92794 AUC after training: 0.7770270270270271
User 92794 does not improve AUC. Reverting changes.
Training on augumented user 56926 12/50 current_auc = 0.7770270270270271
User 56926 AUC after training: 0.7792792792792793
User 56926 improves AUC. Keeping the model.
Training on augumented user 82589 13/50 current_auc = 0.7792792792792793
User 82589 AUC after training: 0.7770270270270271
User 82589 does not improve AUC. Reverting changes.
Training on augumented user 36894 14/50 current_auc = 0.7792792792792793
User 36894 AUC after training: 0.7770270270270271
User 36894 does not improve AUC. Reverting changes.
Training on augumented user 111988 15/50 current_auc = 0.7792792792792793
User 111988 AUC after training: 0.7747747747747749
User 111988 does not improve AUC. Reverting changes.
Training on augumented user 126145 16/50 current_auc = 0.7792792792792793
User 126145 AUC after training: 0.7770270270270271
User 126145 does not improve AUC. Reverting changes.
Training on augumented user 87945 17/50 current_auc = 0.7792792792792793
User 87945 AUC after training: 0.7792792792792794
User 87945 improves AUC. Keeping the model.
Training on augumented user 19030 18/50 current_auc = 0.7792792792792794
User 19030 AUC after training: 0.7792792792792794
User 19030 does not improve AUC. Reverting changes.
Training on augumented user 60823 19/50 current_auc = 0.7792792792792794
User 60823 AUC after training: 0.7792792792792794
User 60823 does not improve AUC. Reverting changes.
Training on augumented user 125913 20/50 current_auc = 0.7792792792792794
User 125913 AUC after training: 0.7792792792792794
User 125913 does not improve AUC. Reverting changes.
Training on augumented user 71848 21/50 current_auc = 0.7792792792792794
User 71848 AUC after training: 0.7792792792792794
User 71848 does not improve AUC. Reverting changes.
Training on augumented user 86071 22/50 current_auc = 0.7792792792792794
User 86071 AUC after training: 0.7792792792792794
User 86071 does not improve AUC. Reverting changes.
Training on augumented user 72877 23/50 current_auc = 0.7792792792792794
User 72877 AUC after training: 0.7792792792792794
User 72877 does not improve AUC. Reverting changes.
Training on augumented user 78299 24/50 current_auc = 0.7792792792792794
User 78299 AUC after training: 0.7792792792792794
User 78299 does not improve AUC. Reverting changes.
Training on augumented user 103 25/50 current_auc = 0.7792792792792794
User 103 AUC after training: 0.7792792792792794
User 103 does not improve AUC. Reverting changes.
Training on augumented user 27496 26/50 current_auc = 0.7792792792792794
User 27496 AUC after training: 0.7792792792792794
User 27496 does not improve AUC. Reverting changes.
Training on augumented user 9633 27/50 current_auc = 0.7792792792792794
User 9633 AUC after training: 0.7792792792792794
User 9633 does not improve AUC. Reverting changes.
Training on augumented user 72210 28/50 current_auc = 0.7792792792792794
User 72210 AUC after training: 0.7792792792792794
User 72210 does not improve AUC. Reverting changes.
Training on augumented user 74844 29/50 current_auc = 0.7792792792792794
User 74844 AUC after training: 0.7792792792792794
User 74844 does not improve AUC. Reverting changes.
Training on augumented user 38296 30/50 current_auc = 0.7792792792792794
User 38296 AUC after training: 0.7792792792792794
User 38296 does not improve AUC. Reverting changes.
Training on augumented user 21585 31/50 current_auc = 0.7792792792792794
User 21585 AUC after training: 0.7792792792792794
User 21585 does not improve AUC. Reverting changes.
Training on augumented user 11220 32/50 current_auc = 0.7792792792792794
User 11220 AUC after training: 0.7792792792792794
User 11220 does not improve AUC. Reverting changes.
Training on augumented user 15551 33/50 current_auc = 0.7792792792792794
User 15551 AUC after training: 0.7792792792792794
User 15551 does not improve AUC. Reverting changes.
Training on augumented user 88478 34/50 current_auc = 0.7792792792792794
User 88478 AUC after training: 0.7792792792792794
User 88478 does not improve AUC. Reverting changes.
Training on augumented user 109089 35/50 current_auc = 0.7792792792792794
User 109089 AUC after training: 0.7792792792792794
User 109089 does not improve AUC. Reverting changes.
Training on augumented user 10420 36/50 current_auc = 0.7792792792792794
User 10420 AUC after training: 0.7792792792792794
User 10420 does not improve AUC. Reverting changes.
Training on augumented user 17719 37/50 current_auc = 0.7792792792792794
User 17719 AUC after training: 0.7792792792792794
User 17719 does not improve AUC. Reverting changes.
Training on augumented user 73855 38/50 current_auc = 0.7792792792792794
User 73855 AUC after training: 0.7792792792792794
User 73855 does not improve AUC. Reverting changes.
Training on augumented user 26650 39/50 current_auc = 0.7792792792792794
User 26650 AUC after training: 0.7792792792792794
User 26650 does not improve AUC. Reverting changes.
Training on augumented user 96360 40/50 current_auc = 0.7792792792792794
User 96360 AUC after training: 0.7792792792792794
User 96360 does not improve AUC. Reverting changes.
Training on augumented user 54029 41/50 current_auc = 0.7792792792792794
User 54029 AUC after training: 0.7792792792792794
User 54029 does not improve AUC. Reverting changes.
Training on augumented user 22504 42/50 current_auc = 0.7792792792792794
User 22504 AUC after training: 0.7792792792792794
User 22504 does not improve AUC. Reverting changes.
Training on augumented user 137398 43/50 current_auc = 0.7792792792792794
User 137398 AUC after training: 0.7792792792792794
User 137398 does not improve AUC. Reverting changes.
Training on augumented user 6790 44/50 current_auc = 0.7792792792792794
User 6790 AUC after training: 0.7792792792792794
User 6790 does not improve AUC. Reverting changes.
Training on augumented user 68667 45/50 current_auc = 0.7792792792792794
User 68667 AUC after training: 0.7792792792792794
User 68667 does not improve AUC. Reverting changes.
Training on augumented user 7909 46/50 current_auc = 0.7792792792792794
User 7909 AUC after training: 0.7792792792792794
User 7909 does not improve AUC. Reverting changes.
Training on augumented user 48583 47/50 current_auc = 0.7792792792792794
User 48583 AUC after training: 0.7792792792792794
User 48583 does not improve AUC. Reverting changes.
Training on augumented user 43611 48/50 current_auc = 0.7792792792792794
User 43611 AUC after training: 0.7792792792792794
User 43611 does not improve AUC. Reverting changes.
Training on augumented user 1600 49/50 current_auc = 0.7792792792792794
User 1600 AUC after training: 0.7792792792792794
User 1600 does not improve AUC. Reverting changes.
[2024-12-02 20:08:37.201256] start test user 6369 278/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:08:37.710409] start test user 6369 278/568 recall augumented users by random, augumented_users = [105494, 37636, 122652, 112546, 102101, 65323, 4683, 109805, 33174, 3396, 30412, 11342, 53725, 20473, 87502, 60670, 74753, 56617, 10425, 77049, 49985, 33332, 665, 29632, 133729, 134762, 66321, 50524, 103433, 122038, 113091, 43944, 66347, 5232, 6534, 5575, 55542, 45532, 25288, 54576, 50060, 110373, 137556, 75229, 4436, 117564, 86256, 118875, 556, 89827]
[2024-12-02 20:08:37.725731] user = 6369 Cloud 278/568
[2024-12-02 20:08:37.736683] user = 6369 Local 278/568
[2024-12-02 20:08:37.861521] user = 6369 Local+ 278/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:08:40.075299] user = 6369 MPDA- 278/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6363636363636364
Training on augumented user 105494 0/50 current_auc = 0.6363636363636364
User 105494 AUC after training: 0.6382978723404256
User 105494 improves AUC. Keeping the model.
Training on augumented user 37636 1/50 current_auc = 0.6382978723404256
User 37636 AUC after training: 0.6382978723404256
User 37636 does not improve AUC. Reverting changes.
Training on augumented user 122652 2/50 current_auc = 0.6382978723404256
User 122652 AUC after training: 0.6382978723404256
User 122652 does not improve AUC. Reverting changes.
Training on augumented user 112546 3/50 current_auc = 0.6382978723404256
User 112546 AUC after training: 0.6382978723404256
User 112546 does not improve AUC. Reverting changes.
Training on augumented user 102101 4/50 current_auc = 0.6382978723404256
User 102101 AUC after training: 0.6382978723404256
User 102101 does not improve AUC. Reverting changes.
Training on augumented user 65323 5/50 current_auc = 0.6382978723404256
User 65323 AUC after training: 0.6363636363636364
User 65323 does not improve AUC. Reverting changes.
Training on augumented user 4683 6/50 current_auc = 0.6382978723404256
User 4683 AUC after training: 0.6382978723404256
User 4683 does not improve AUC. Reverting changes.
Training on augumented user 109805 7/50 current_auc = 0.6382978723404256
User 109805 AUC after training: 0.6382978723404256
User 109805 does not improve AUC. Reverting changes.
Training on augumented user 33174 8/50 current_auc = 0.6382978723404256
User 33174 AUC after training: 0.6382978723404256
User 33174 does not improve AUC. Reverting changes.
Training on augumented user 3396 9/50 current_auc = 0.6382978723404256
User 3396 AUC after training: 0.6382978723404256
User 3396 does not improve AUC. Reverting changes.
Training on augumented user 30412 10/50 current_auc = 0.6382978723404256
User 30412 AUC after training: 0.6382978723404256
User 30412 does not improve AUC. Reverting changes.
Training on augumented user 11342 11/50 current_auc = 0.6382978723404256
User 11342 AUC after training: 0.6363636363636364
User 11342 does not improve AUC. Reverting changes.
Training on augumented user 53725 12/50 current_auc = 0.6382978723404256
User 53725 AUC after training: 0.6382978723404256
User 53725 does not improve AUC. Reverting changes.
Training on augumented user 20473 13/50 current_auc = 0.6382978723404256
User 20473 AUC after training: 0.6382978723404256
User 20473 does not improve AUC. Reverting changes.
Training on augumented user 87502 14/50 current_auc = 0.6382978723404256
User 87502 AUC after training: 0.6344294003868471
User 87502 does not improve AUC. Reverting changes.
Training on augumented user 60670 15/50 current_auc = 0.6382978723404256
User 60670 AUC after training: 0.6382978723404256
User 60670 does not improve AUC. Reverting changes.
Training on augumented user 74753 16/50 current_auc = 0.6382978723404256
User 74753 AUC after training: 0.6344294003868471
User 74753 does not improve AUC. Reverting changes.
Training on augumented user 56617 17/50 current_auc = 0.6382978723404256
User 56617 AUC after training: 0.6382978723404256
User 56617 does not improve AUC. Reverting changes.
Training on augumented user 10425 18/50 current_auc = 0.6382978723404256
User 10425 AUC after training: 0.6363636363636364
User 10425 does not improve AUC. Reverting changes.
Training on augumented user 77049 19/50 current_auc = 0.6382978723404256
User 77049 AUC after training: 0.6382978723404256
User 77049 does not improve AUC. Reverting changes.
Training on augumented user 49985 20/50 current_auc = 0.6382978723404256
User 49985 AUC after training: 0.6382978723404256
User 49985 does not improve AUC. Reverting changes.
Training on augumented user 33332 21/50 current_auc = 0.6382978723404256
User 33332 AUC after training: 0.6382978723404256
User 33332 does not improve AUC. Reverting changes.
Training on augumented user 665 22/50 current_auc = 0.6382978723404256
User 665 AUC after training: 0.6363636363636362
User 665 does not improve AUC. Reverting changes.
Training on augumented user 29632 23/50 current_auc = 0.6382978723404256
User 29632 AUC after training: 0.6382978723404256
User 29632 does not improve AUC. Reverting changes.
Training on augumented user 133729 24/50 current_auc = 0.6382978723404256
User 133729 AUC after training: 0.6382978723404256
User 133729 does not improve AUC. Reverting changes.
Training on augumented user 134762 25/50 current_auc = 0.6382978723404256
User 134762 AUC after training: 0.6363636363636362
User 134762 does not improve AUC. Reverting changes.
Training on augumented user 66321 26/50 current_auc = 0.6382978723404256
User 66321 AUC after training: 0.6363636363636364
User 66321 does not improve AUC. Reverting changes.
Training on augumented user 50524 27/50 current_auc = 0.6382978723404256
User 50524 AUC after training: 0.6382978723404256
User 50524 does not improve AUC. Reverting changes.
Training on augumented user 103433 28/50 current_auc = 0.6382978723404256
User 103433 AUC after training: 0.6363636363636364
User 103433 does not improve AUC. Reverting changes.
Training on augumented user 122038 29/50 current_auc = 0.6382978723404256
User 122038 AUC after training: 0.6363636363636362
User 122038 does not improve AUC. Reverting changes.
Training on augumented user 113091 30/50 current_auc = 0.6382978723404256
User 113091 AUC after training: 0.6382978723404256
User 113091 does not improve AUC. Reverting changes.
Training on augumented user 43944 31/50 current_auc = 0.6382978723404256
User 43944 AUC after training: 0.6363636363636364
User 43944 does not improve AUC. Reverting changes.
Training on augumented user 66347 32/50 current_auc = 0.6382978723404256
User 66347 AUC after training: 0.6382978723404256
User 66347 does not improve AUC. Reverting changes.
Training on augumented user 5232 33/50 current_auc = 0.6382978723404256
User 5232 AUC after training: 0.6363636363636362
User 5232 does not improve AUC. Reverting changes.
Training on augumented user 6534 34/50 current_auc = 0.6382978723404256
User 6534 AUC after training: 0.6363636363636364
User 6534 does not improve AUC. Reverting changes.
Training on augumented user 5575 35/50 current_auc = 0.6382978723404256
User 5575 AUC after training: 0.6363636363636362
User 5575 does not improve AUC. Reverting changes.
Training on augumented user 55542 36/50 current_auc = 0.6382978723404256
User 55542 AUC after training: 0.6363636363636362
User 55542 does not improve AUC. Reverting changes.
Training on augumented user 45532 37/50 current_auc = 0.6382978723404256
User 45532 AUC after training: 0.6382978723404256
User 45532 does not improve AUC. Reverting changes.
Training on augumented user 25288 38/50 current_auc = 0.6382978723404256
User 25288 AUC after training: 0.6382978723404256
User 25288 does not improve AUC. Reverting changes.
Training on augumented user 54576 39/50 current_auc = 0.6382978723404256
User 54576 AUC after training: 0.6382978723404256
User 54576 does not improve AUC. Reverting changes.
Training on augumented user 50060 40/50 current_auc = 0.6382978723404256
User 50060 AUC after training: 0.6363636363636362
User 50060 does not improve AUC. Reverting changes.
Training on augumented user 110373 41/50 current_auc = 0.6382978723404256
User 110373 AUC after training: 0.6382978723404256
User 110373 does not improve AUC. Reverting changes.
Training on augumented user 137556 42/50 current_auc = 0.6382978723404256
User 137556 AUC after training: 0.6363636363636364
User 137556 does not improve AUC. Reverting changes.
Training on augumented user 75229 43/50 current_auc = 0.6382978723404256
User 75229 AUC after training: 0.6382978723404256
User 75229 does not improve AUC. Reverting changes.
Training on augumented user 4436 44/50 current_auc = 0.6382978723404256
User 4436 AUC after training: 0.6382978723404256
User 4436 does not improve AUC. Reverting changes.
Training on augumented user 117564 45/50 current_auc = 0.6382978723404256
User 117564 AUC after training: 0.6382978723404256
User 117564 does not improve AUC. Reverting changes.
Training on augumented user 86256 46/50 current_auc = 0.6382978723404256
User 86256 AUC after training: 0.6363636363636364
User 86256 does not improve AUC. Reverting changes.
Training on augumented user 118875 47/50 current_auc = 0.6382978723404256
User 118875 AUC after training: 0.6344294003868471
User 118875 does not improve AUC. Reverting changes.
Training on augumented user 556 48/50 current_auc = 0.6382978723404256
User 556 AUC after training: 0.6382978723404256
User 556 does not improve AUC. Reverting changes.
Training on augumented user 89827 49/50 current_auc = 0.6382978723404256
User 89827 AUC after training: 0.6363636363636362
User 89827 does not improve AUC. Reverting changes.
[2024-12-02 20:09:09.511541] start test user 6379 279/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:09:10.458171] start test user 6379 279/568 recall augumented users by random, augumented_users = [35071, 15682, 38494, 96225, 95456, 92872, 77568, 37721, 47783, 8515, 68131, 21331, 7886, 132798, 106524, 78398, 23053, 56747, 104635, 34721, 77067, 130447, 81392, 122857, 91705, 22931, 108019, 128623, 51659, 4846, 97626, 19836, 22492, 10511, 105603, 53351, 41715, 75167, 25765, 1385, 90579, 43080, 10487, 95977, 128319, 114781, 127190, 38232, 122212, 69383]
[2024-12-02 20:09:10.478833] user = 6379 Cloud 279/568
[2024-12-02 20:09:10.510582] user = 6379 Local 279/568
[2024-12-02 20:09:10.652422] user = 6379 Local+ 279/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:09:13.445095] user = 6379 MPDA- 279/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6336996336996337
Training on augumented user 35071 0/50 current_auc = 0.6336996336996337
User 35071 AUC after training: 0.6336996336996337
User 35071 does not improve AUC. Reverting changes.
Training on augumented user 15682 1/50 current_auc = 0.6336996336996337
User 15682 AUC after training: 0.6336996336996337
User 15682 does not improve AUC. Reverting changes.
Training on augumented user 38494 2/50 current_auc = 0.6336996336996337
User 38494 AUC after training: 0.6318681318681318
User 38494 does not improve AUC. Reverting changes.
Training on augumented user 96225 3/50 current_auc = 0.6336996336996337
User 96225 AUC after training: 0.6336996336996337
User 96225 does not improve AUC. Reverting changes.
Training on augumented user 95456 4/50 current_auc = 0.6336996336996337
User 95456 AUC after training: 0.6318681318681318
User 95456 does not improve AUC. Reverting changes.
Training on augumented user 92872 5/50 current_auc = 0.6336996336996337
User 92872 AUC after training: 0.6373626373626373
User 92872 improves AUC. Keeping the model.
Training on augumented user 77568 6/50 current_auc = 0.6373626373626373
User 77568 AUC after training: 0.6336996336996337
User 77568 does not improve AUC. Reverting changes.
Training on augumented user 37721 7/50 current_auc = 0.6373626373626373
User 37721 AUC after training: 0.6336996336996337
User 37721 does not improve AUC. Reverting changes.
Training on augumented user 47783 8/50 current_auc = 0.6373626373626373
User 47783 AUC after training: 0.6336996336996337
User 47783 does not improve AUC. Reverting changes.
Training on augumented user 8515 9/50 current_auc = 0.6373626373626373
User 8515 AUC after training: 0.6336996336996337
User 8515 does not improve AUC. Reverting changes.
Training on augumented user 68131 10/50 current_auc = 0.6373626373626373
User 68131 AUC after training: 0.6336996336996337
User 68131 does not improve AUC. Reverting changes.
Training on augumented user 21331 11/50 current_auc = 0.6373626373626373
User 21331 AUC after training: 0.6373626373626373
User 21331 does not improve AUC. Reverting changes.
Training on augumented user 7886 12/50 current_auc = 0.6373626373626373
User 7886 AUC after training: 0.6336996336996337
User 7886 does not improve AUC. Reverting changes.
Training on augumented user 132798 13/50 current_auc = 0.6373626373626373
User 132798 AUC after training: 0.6373626373626373
User 132798 does not improve AUC. Reverting changes.
Training on augumented user 106524 14/50 current_auc = 0.6373626373626373
User 106524 AUC after training: 0.6373626373626373
User 106524 does not improve AUC. Reverting changes.
Training on augumented user 78398 15/50 current_auc = 0.6373626373626373
User 78398 AUC after training: 0.6373626373626373
User 78398 does not improve AUC. Reverting changes.
Training on augumented user 23053 16/50 current_auc = 0.6373626373626373
User 23053 AUC after training: 0.6336996336996337
User 23053 does not improve AUC. Reverting changes.
Training on augumented user 56747 17/50 current_auc = 0.6373626373626373
User 56747 AUC after training: 0.6373626373626373
User 56747 does not improve AUC. Reverting changes.
Training on augumented user 104635 18/50 current_auc = 0.6373626373626373
User 104635 AUC after training: 0.6336996336996337
User 104635 does not improve AUC. Reverting changes.
Training on augumented user 34721 19/50 current_auc = 0.6373626373626373
User 34721 AUC after training: 0.6336996336996337
User 34721 does not improve AUC. Reverting changes.
Training on augumented user 77067 20/50 current_auc = 0.6373626373626373
User 77067 AUC after training: 0.6336996336996337
User 77067 does not improve AUC. Reverting changes.
Training on augumented user 130447 21/50 current_auc = 0.6373626373626373
User 130447 AUC after training: 0.6336996336996337
User 130447 does not improve AUC. Reverting changes.
Training on augumented user 81392 22/50 current_auc = 0.6373626373626373
User 81392 AUC after training: 0.6373626373626373
User 81392 does not improve AUC. Reverting changes.
Training on augumented user 122857 23/50 current_auc = 0.6373626373626373
User 122857 AUC after training: 0.6373626373626373
User 122857 does not improve AUC. Reverting changes.
Training on augumented user 91705 24/50 current_auc = 0.6373626373626373
User 91705 AUC after training: 0.6336996336996337
User 91705 does not improve AUC. Reverting changes.
Training on augumented user 22931 25/50 current_auc = 0.6373626373626373
User 22931 AUC after training: 0.6336996336996337
User 22931 does not improve AUC. Reverting changes.
Training on augumented user 108019 26/50 current_auc = 0.6373626373626373
User 108019 AUC after training: 0.6373626373626373
User 108019 does not improve AUC. Reverting changes.
Training on augumented user 128623 27/50 current_auc = 0.6373626373626373
User 128623 AUC after training: 0.6373626373626373
User 128623 does not improve AUC. Reverting changes.
Training on augumented user 51659 28/50 current_auc = 0.6373626373626373
User 51659 AUC after training: 0.6373626373626373
User 51659 does not improve AUC. Reverting changes.
Training on augumented user 4846 29/50 current_auc = 0.6373626373626373
User 4846 AUC after training: 0.6373626373626373
User 4846 does not improve AUC. Reverting changes.
Training on augumented user 97626 30/50 current_auc = 0.6373626373626373
User 97626 AUC after training: 0.6373626373626373
User 97626 does not improve AUC. Reverting changes.
Training on augumented user 19836 31/50 current_auc = 0.6373626373626373
User 19836 AUC after training: 0.6336996336996337
User 19836 does not improve AUC. Reverting changes.
Training on augumented user 22492 32/50 current_auc = 0.6373626373626373
User 22492 AUC after training: 0.6336996336996337
User 22492 does not improve AUC. Reverting changes.
Training on augumented user 10511 33/50 current_auc = 0.6373626373626373
User 10511 AUC after training: 0.6336996336996337
User 10511 does not improve AUC. Reverting changes.
Training on augumented user 105603 34/50 current_auc = 0.6373626373626373
User 105603 AUC after training: 0.6373626373626373
User 105603 does not improve AUC. Reverting changes.
Training on augumented user 53351 35/50 current_auc = 0.6373626373626373
User 53351 AUC after training: 0.6373626373626373
User 53351 does not improve AUC. Reverting changes.
Training on augumented user 41715 36/50 current_auc = 0.6373626373626373
User 41715 AUC after training: 0.6373626373626373
User 41715 does not improve AUC. Reverting changes.
Training on augumented user 75167 37/50 current_auc = 0.6373626373626373
User 75167 AUC after training: 0.6336996336996337
User 75167 does not improve AUC. Reverting changes.
Training on augumented user 25765 38/50 current_auc = 0.6373626373626373
User 25765 AUC after training: 0.6373626373626373
User 25765 does not improve AUC. Reverting changes.
Training on augumented user 1385 39/50 current_auc = 0.6373626373626373
User 1385 AUC after training: 0.6336996336996337
User 1385 does not improve AUC. Reverting changes.
Training on augumented user 90579 40/50 current_auc = 0.6373626373626373
User 90579 AUC after training: 0.6336996336996337
User 90579 does not improve AUC. Reverting changes.
Training on augumented user 43080 41/50 current_auc = 0.6373626373626373
User 43080 AUC after training: 0.6373626373626373
User 43080 does not improve AUC. Reverting changes.
Training on augumented user 10487 42/50 current_auc = 0.6373626373626373
User 10487 AUC after training: 0.6318681318681318
User 10487 does not improve AUC. Reverting changes.
Training on augumented user 95977 43/50 current_auc = 0.6373626373626373
User 95977 AUC after training: 0.6336996336996337
User 95977 does not improve AUC. Reverting changes.
Training on augumented user 128319 44/50 current_auc = 0.6373626373626373
User 128319 AUC after training: 0.6336996336996337
User 128319 does not improve AUC. Reverting changes.
Training on augumented user 114781 45/50 current_auc = 0.6373626373626373
User 114781 AUC after training: 0.6373626373626373
User 114781 does not improve AUC. Reverting changes.
Training on augumented user 127190 46/50 current_auc = 0.6373626373626373
User 127190 AUC after training: 0.6336996336996337
User 127190 does not improve AUC. Reverting changes.
Training on augumented user 38232 47/50 current_auc = 0.6373626373626373
User 38232 AUC after training: 0.6336996336996337
User 38232 does not improve AUC. Reverting changes.
Training on augumented user 122212 48/50 current_auc = 0.6373626373626373
User 122212 AUC after training: 0.6373626373626373
User 122212 does not improve AUC. Reverting changes.
Training on augumented user 69383 49/50 current_auc = 0.6373626373626373
User 69383 AUC after training: 0.6336996336996337
User 69383 does not improve AUC. Reverting changes.
[2024-12-02 20:09:36.417874] start test user 6390 280/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:09:36.818002] start test user 6390 280/568 recall augumented users by random, augumented_users = [31702, 136896, 122850, 39336, 19817, 34937, 115764, 4923, 88119, 108188, 14456, 58517, 46884, 9327, 133268, 103554, 94823, 53230, 62358, 112583, 64449, 20022, 39375, 98112, 45857, 88044, 58615, 72766, 102035, 9264, 54471, 126048, 33948, 135735, 95334, 103269, 109363, 82058, 64730, 121434, 62199, 121763, 60506, 38766, 24096, 86725, 38410, 53508, 70384, 113883]
[2024-12-02 20:09:36.833094] user = 6390 Cloud 280/568
[2024-12-02 20:09:36.858070] user = 6390 Local 280/568
[2024-12-02 20:09:36.928230] user = 6390 Local+ 280/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:09:38.974281] user = 6390 MPDA- 280/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5786617544558399
Training on augumented user 31702 0/50 current_auc = 0.5786617544558399
User 31702 AUC after training: 0.5777158219655482
User 31702 does not improve AUC. Reverting changes.
Training on augumented user 136896 1/50 current_auc = 0.5786617544558399
User 136896 AUC after training: 0.5805038335158816
User 136896 improves AUC. Keeping the model.
Training on augumented user 122850 2/50 current_auc = 0.5805038335158816
User 122850 AUC after training: 0.5807029771980484
User 122850 improves AUC. Keeping the model.
Training on augumented user 39336 3/50 current_auc = 0.5807029771980484
User 39336 AUC after training: 0.5803046898337151
User 39336 does not improve AUC. Reverting changes.
Training on augumented user 19817 4/50 current_auc = 0.5807029771980484
User 19817 AUC after training: 0.5802051179926316
User 19817 does not improve AUC. Reverting changes.
Training on augumented user 34937 5/50 current_auc = 0.5807029771980484
User 34937 AUC after training: 0.5804042616747983
User 34937 does not improve AUC. Reverting changes.
Training on augumented user 115764 6/50 current_auc = 0.5807029771980484
User 115764 AUC after training: 0.5810016927212984
User 115764 improves AUC. Keeping the model.
Training on augumented user 4923 7/50 current_auc = 0.5810016927212984
User 4923 AUC after training: 0.5810016927212984
User 4923 does not improve AUC. Reverting changes.
Training on augumented user 88119 8/50 current_auc = 0.5810016927212984
User 88119 AUC after training: 0.5810016927212984
User 88119 does not improve AUC. Reverting changes.
Training on augumented user 108188 9/50 current_auc = 0.5810016927212984
User 108188 AUC after training: 0.5816986956088819
User 108188 improves AUC. Keeping the model.
Training on augumented user 14456 10/50 current_auc = 0.5816986956088819
User 14456 AUC after training: 0.5810514786418401
User 14456 does not improve AUC. Reverting changes.
Training on augumented user 58517 11/50 current_auc = 0.5816986956088819
User 58517 AUC after training: 0.5813999800856318
User 58517 does not improve AUC. Reverting changes.
Training on augumented user 46884 12/50 current_auc = 0.5816986956088819
User 46884 AUC after training: 0.5816986956088819
User 46884 does not improve AUC. Reverting changes.
Training on augumented user 9327 13/50 current_auc = 0.5816986956088819
User 9327 AUC after training: 0.5807029771980483
User 9327 does not improve AUC. Reverting changes.
Training on augumented user 133268 14/50 current_auc = 0.5816986956088819
User 133268 AUC after training: 0.5804042616747984
User 133268 does not improve AUC. Reverting changes.
Training on augumented user 103554 15/50 current_auc = 0.5816986956088819
User 103554 AUC after training: 0.5814995519267152
User 103554 does not improve AUC. Reverting changes.
Training on augumented user 94823 16/50 current_auc = 0.5816986956088819
User 94823 AUC after training: 0.580304689833715
User 94823 does not improve AUC. Reverting changes.
Training on augumented user 53230 17/50 current_auc = 0.5816986956088819
User 53230 AUC after training: 0.5812008364034652
User 53230 does not improve AUC. Reverting changes.
Training on augumented user 62358 18/50 current_auc = 0.5816986956088819
User 62358 AUC after training: 0.5817982674499651
User 62358 improves AUC. Keeping the model.
Training on augumented user 112583 19/50 current_auc = 0.5817982674499651
User 112583 AUC after training: 0.5813999800856318
User 112583 does not improve AUC. Reverting changes.
Training on augumented user 64449 20/50 current_auc = 0.5817982674499651
User 64449 AUC after training: 0.5821965548142986
User 64449 improves AUC. Keeping the model.
Training on augumented user 20022 21/50 current_auc = 0.5821965548142986
User 20022 AUC after training: 0.582893557701882
User 20022 improves AUC. Keeping the model.
Training on augumented user 39375 22/50 current_auc = 0.582893557701882
User 39375 AUC after training: 0.5820969829732152
User 39375 does not improve AUC. Reverting changes.
Training on augumented user 98112 23/50 current_auc = 0.582893557701882
User 98112 AUC after training: 0.5826944140197152
User 98112 does not improve AUC. Reverting changes.
Training on augumented user 45857 24/50 current_auc = 0.582893557701882
User 45857 AUC after training: 0.5815991237677984
User 45857 does not improve AUC. Reverting changes.
Training on augumented user 88044 25/50 current_auc = 0.582893557701882
User 88044 AUC after training: 0.5818978392910485
User 88044 does not improve AUC. Reverting changes.
Training on augumented user 58615 26/50 current_auc = 0.582893557701882
User 58615 AUC after training: 0.5830927013840487
User 58615 improves AUC. Keeping the model.
Training on augumented user 72766 27/50 current_auc = 0.5830927013840487
User 72766 AUC after training: 0.5790102558996317
User 72766 does not improve AUC. Reverting changes.
Training on augumented user 102035 28/50 current_auc = 0.5830927013840487
User 102035 AUC after training: 0.5817982674499652
User 102035 does not improve AUC. Reverting changes.
Training on augumented user 9264 29/50 current_auc = 0.5830927013840487
User 9264 AUC after training: 0.5813999800856318
User 9264 does not improve AUC. Reverting changes.
Training on augumented user 54471 30/50 current_auc = 0.5830927013840487
User 54471 AUC after training: 0.5817982674499651
User 54471 does not improve AUC. Reverting changes.
Training on augumented user 126048 31/50 current_auc = 0.5830927013840487
User 126048 AUC after training: 0.5822961266553819
User 126048 does not improve AUC. Reverting changes.
Training on augumented user 33948 32/50 current_auc = 0.5830927013840487
User 33948 AUC after training: 0.5825948421786319
User 33948 does not improve AUC. Reverting changes.
Training on augumented user 135735 33/50 current_auc = 0.5830927013840487
User 135735 AUC after training: 0.5801055461515483
User 135735 does not improve AUC. Reverting changes.
Training on augumented user 95334 34/50 current_auc = 0.5830927013840487
User 95334 AUC after training: 0.5824952703375486
User 95334 does not improve AUC. Reverting changes.
Training on augumented user 103269 35/50 current_auc = 0.5830927013840487
User 103269 AUC after training: 0.5821965548142986
User 103269 does not improve AUC. Reverting changes.
Training on augumented user 109363 36/50 current_auc = 0.5830927013840487
User 109363 AUC after training: 0.5826944140197152
User 109363 does not improve AUC. Reverting changes.
Training on augumented user 82058 37/50 current_auc = 0.5830927013840487
User 82058 AUC after training: 0.5822961266553819
User 82058 does not improve AUC. Reverting changes.
Training on augumented user 64730 38/50 current_auc = 0.5830927013840487
User 64730 AUC after training: 0.5814995519267152
User 64730 does not improve AUC. Reverting changes.
Training on augumented user 121434 39/50 current_auc = 0.5830927013840487
User 121434 AUC after training: 0.5819974111321319
User 121434 does not improve AUC. Reverting changes.
Training on augumented user 62199 40/50 current_auc = 0.5830927013840487
User 62199 AUC after training: 0.5825948421786319
User 62199 does not improve AUC. Reverting changes.
Training on augumented user 121763 41/50 current_auc = 0.5830927013840487
User 121763 AUC after training: 0.582893557701882
User 121763 does not improve AUC. Reverting changes.
Training on augumented user 60506 42/50 current_auc = 0.5830927013840487
User 60506 AUC after training: 0.5814995519267151
User 60506 does not improve AUC. Reverting changes.
Training on augumented user 38766 43/50 current_auc = 0.5830927013840487
User 38766 AUC after training: 0.5828935577018819
User 38766 does not improve AUC. Reverting changes.
Training on augumented user 24096 44/50 current_auc = 0.5830927013840487
User 24096 AUC after training: 0.5826944140197152
User 24096 does not improve AUC. Reverting changes.
Training on augumented user 86725 45/50 current_auc = 0.5830927013840487
User 86725 AUC after training: 0.582594842178632
User 86725 does not improve AUC. Reverting changes.
Training on augumented user 38410 46/50 current_auc = 0.5830927013840487
User 38410 AUC after training: 0.5822961266553819
User 38410 does not improve AUC. Reverting changes.
Training on augumented user 53508 47/50 current_auc = 0.5830927013840487
User 53508 AUC after training: 0.5830927013840487
User 53508 does not improve AUC. Reverting changes.
Training on augumented user 70384 48/50 current_auc = 0.5830927013840487
User 70384 AUC after training: 0.5823956984964652
User 70384 does not improve AUC. Reverting changes.
Training on augumented user 113883 49/50 current_auc = 0.5830927013840487
User 113883 AUC after training: 0.5826944140197152
User 113883 does not improve AUC. Reverting changes.
[2024-12-02 20:10:10.645083] start test user 6440 281/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:10:11.104488] start test user 6440 281/568 recall augumented users by random, augumented_users = [53788, 113536, 122806, 108056, 41199, 52723, 93346, 88002, 94056, 90446, 29296, 108364, 6240, 117575, 13352, 68105, 134766, 131867, 47369, 111137, 111718, 105631, 25755, 113494, 26959, 72377, 42503, 98377, 37681, 113657, 93422, 45054, 34946, 42606, 15222, 115162, 106372, 103267, 89209, 27706, 75753, 60143, 60646, 7215, 107002, 28959, 75520, 55338, 117856, 131897]
[2024-12-02 20:10:11.119490] user = 6440 Cloud 281/568
[2024-12-02 20:10:11.129611] user = 6440 Local 281/568
[2024-12-02 20:10:11.163606] user = 6440 Local+ 281/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:10:13.431363] user = 6440 MPDA- 281/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 53788 0/50 current_auc = 1.0
User 53788 AUC after training: 1.0
User 53788 does not improve AUC. Reverting changes.
Training on augumented user 113536 1/50 current_auc = 1.0
User 113536 AUC after training: 1.0
User 113536 does not improve AUC. Reverting changes.
Training on augumented user 122806 2/50 current_auc = 1.0
User 122806 AUC after training: 1.0
User 122806 does not improve AUC. Reverting changes.
Training on augumented user 108056 3/50 current_auc = 1.0
User 108056 AUC after training: 1.0
User 108056 does not improve AUC. Reverting changes.
Training on augumented user 41199 4/50 current_auc = 1.0
User 41199 AUC after training: 1.0
User 41199 does not improve AUC. Reverting changes.
Training on augumented user 52723 5/50 current_auc = 1.0
User 52723 AUC after training: 1.0
User 52723 does not improve AUC. Reverting changes.
Training on augumented user 93346 6/50 current_auc = 1.0
User 93346 AUC after training: 1.0
User 93346 does not improve AUC. Reverting changes.
Training on augumented user 88002 7/50 current_auc = 1.0
User 88002 AUC after training: 1.0
User 88002 does not improve AUC. Reverting changes.
Training on augumented user 94056 8/50 current_auc = 1.0
User 94056 AUC after training: 1.0
User 94056 does not improve AUC. Reverting changes.
Training on augumented user 90446 9/50 current_auc = 1.0
User 90446 AUC after training: 1.0
User 90446 does not improve AUC. Reverting changes.
Training on augumented user 29296 10/50 current_auc = 1.0
User 29296 AUC after training: 1.0
User 29296 does not improve AUC. Reverting changes.
Training on augumented user 108364 11/50 current_auc = 1.0
User 108364 AUC after training: 1.0
User 108364 does not improve AUC. Reverting changes.
Training on augumented user 6240 12/50 current_auc = 1.0
User 6240 AUC after training: 1.0
User 6240 does not improve AUC. Reverting changes.
Training on augumented user 117575 13/50 current_auc = 1.0
User 117575 AUC after training: 1.0
User 117575 does not improve AUC. Reverting changes.
Training on augumented user 13352 14/50 current_auc = 1.0
User 13352 AUC after training: 1.0
User 13352 does not improve AUC. Reverting changes.
Training on augumented user 68105 15/50 current_auc = 1.0
User 68105 AUC after training: 1.0
User 68105 does not improve AUC. Reverting changes.
Training on augumented user 134766 16/50 current_auc = 1.0
User 134766 AUC after training: 1.0
User 134766 does not improve AUC. Reverting changes.
Training on augumented user 131867 17/50 current_auc = 1.0
User 131867 AUC after training: 1.0
User 131867 does not improve AUC. Reverting changes.
Training on augumented user 47369 18/50 current_auc = 1.0
User 47369 AUC after training: 1.0
User 47369 does not improve AUC. Reverting changes.
Training on augumented user 111137 19/50 current_auc = 1.0
User 111137 AUC after training: 1.0
User 111137 does not improve AUC. Reverting changes.
Training on augumented user 111718 20/50 current_auc = 1.0
User 111718 AUC after training: 1.0
User 111718 does not improve AUC. Reverting changes.
Training on augumented user 105631 21/50 current_auc = 1.0
User 105631 AUC after training: 1.0
User 105631 does not improve AUC. Reverting changes.
Training on augumented user 25755 22/50 current_auc = 1.0
User 25755 AUC after training: 1.0
User 25755 does not improve AUC. Reverting changes.
Training on augumented user 113494 23/50 current_auc = 1.0
User 113494 AUC after training: 1.0
User 113494 does not improve AUC. Reverting changes.
Training on augumented user 26959 24/50 current_auc = 1.0
User 26959 AUC after training: 1.0
User 26959 does not improve AUC. Reverting changes.
Training on augumented user 72377 25/50 current_auc = 1.0
User 72377 AUC after training: 1.0
User 72377 does not improve AUC. Reverting changes.
Training on augumented user 42503 26/50 current_auc = 1.0
User 42503 AUC after training: 1.0
User 42503 does not improve AUC. Reverting changes.
Training on augumented user 98377 27/50 current_auc = 1.0
User 98377 AUC after training: 1.0
User 98377 does not improve AUC. Reverting changes.
Training on augumented user 37681 28/50 current_auc = 1.0
User 37681 AUC after training: 1.0
User 37681 does not improve AUC. Reverting changes.
Training on augumented user 113657 29/50 current_auc = 1.0
User 113657 AUC after training: 1.0
User 113657 does not improve AUC. Reverting changes.
Training on augumented user 93422 30/50 current_auc = 1.0
User 93422 AUC after training: 1.0
User 93422 does not improve AUC. Reverting changes.
Training on augumented user 45054 31/50 current_auc = 1.0
User 45054 AUC after training: 1.0
User 45054 does not improve AUC. Reverting changes.
Training on augumented user 34946 32/50 current_auc = 1.0
User 34946 AUC after training: 1.0
User 34946 does not improve AUC. Reverting changes.
Training on augumented user 42606 33/50 current_auc = 1.0
User 42606 AUC after training: 1.0
User 42606 does not improve AUC. Reverting changes.
Training on augumented user 15222 34/50 current_auc = 1.0
User 15222 AUC after training: 1.0
User 15222 does not improve AUC. Reverting changes.
Training on augumented user 115162 35/50 current_auc = 1.0
User 115162 AUC after training: 1.0
User 115162 does not improve AUC. Reverting changes.
Training on augumented user 106372 36/50 current_auc = 1.0
User 106372 AUC after training: 1.0
User 106372 does not improve AUC. Reverting changes.
Training on augumented user 103267 37/50 current_auc = 1.0
User 103267 AUC after training: 1.0
User 103267 does not improve AUC. Reverting changes.
Training on augumented user 89209 38/50 current_auc = 1.0
User 89209 AUC after training: 1.0
User 89209 does not improve AUC. Reverting changes.
Training on augumented user 27706 39/50 current_auc = 1.0
User 27706 AUC after training: 1.0
User 27706 does not improve AUC. Reverting changes.
Training on augumented user 75753 40/50 current_auc = 1.0
User 75753 AUC after training: 1.0
User 75753 does not improve AUC. Reverting changes.
Training on augumented user 60143 41/50 current_auc = 1.0
User 60143 AUC after training: 1.0
User 60143 does not improve AUC. Reverting changes.
Training on augumented user 60646 42/50 current_auc = 1.0
User 60646 AUC after training: 1.0
User 60646 does not improve AUC. Reverting changes.
Training on augumented user 7215 43/50 current_auc = 1.0
User 7215 AUC after training: 1.0
User 7215 does not improve AUC. Reverting changes.
Training on augumented user 107002 44/50 current_auc = 1.0
User 107002 AUC after training: 1.0
User 107002 does not improve AUC. Reverting changes.
Training on augumented user 28959 45/50 current_auc = 1.0
User 28959 AUC after training: 1.0
User 28959 does not improve AUC. Reverting changes.
Training on augumented user 75520 46/50 current_auc = 1.0
User 75520 AUC after training: 1.0
User 75520 does not improve AUC. Reverting changes.
Training on augumented user 55338 47/50 current_auc = 1.0
User 55338 AUC after training: 1.0
User 55338 does not improve AUC. Reverting changes.
Training on augumented user 117856 48/50 current_auc = 1.0
User 117856 AUC after training: 1.0
User 117856 does not improve AUC. Reverting changes.
Training on augumented user 131897 49/50 current_auc = 1.0
User 131897 AUC after training: 1.0
User 131897 does not improve AUC. Reverting changes.
[2024-12-02 20:10:44.383863] start test user 6449 282/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:10:44.962019] start test user 6449 282/568 recall augumented users by random, augumented_users = [112545, 89662, 89451, 61656, 7699, 21435, 111194, 106250, 57909, 65417, 119378, 123735, 63214, 69122, 14601, 100825, 126396, 86084, 40366, 89135, 105140, 106882, 54070, 80918, 114521, 20231, 34127, 15584, 74958, 66732, 17290, 84670, 122051, 61988, 87905, 89129, 131476, 48115, 42719, 8358, 39727, 111193, 79862, 80833, 1365, 95942, 46694, 22099, 43599, 47695]
[2024-12-02 20:10:44.977321] user = 6449 Cloud 282/568
[2024-12-02 20:10:45.006428] user = 6449 Local 282/568
[2024-12-02 20:10:45.102990] user = 6449 Local+ 282/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:10:47.803471] user = 6449 MPDA- 282/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6636363636363637
Training on augumented user 112545 0/50 current_auc = 0.6636363636363637
User 112545 AUC after training: 0.6639553429027114
User 112545 improves AUC. Keeping the model.
Training on augumented user 89662 1/50 current_auc = 0.6639553429027114
User 89662 AUC after training: 0.664274322169059
User 89662 improves AUC. Keeping the model.
Training on augumented user 89451 2/50 current_auc = 0.664274322169059
User 89451 AUC after training: 0.6649122807017545
User 89451 improves AUC. Keeping the model.
Training on augumented user 61656 3/50 current_auc = 0.6649122807017545
User 61656 AUC after training: 0.664274322169059
User 61656 does not improve AUC. Reverting changes.
Training on augumented user 7699 4/50 current_auc = 0.6649122807017545
User 7699 AUC after training: 0.6610845295055822
User 7699 does not improve AUC. Reverting changes.
Training on augumented user 21435 5/50 current_auc = 0.6649122807017545
User 21435 AUC after training: 0.6658692185007974
User 21435 improves AUC. Keeping the model.
Training on augumented user 111194 6/50 current_auc = 0.6658692185007974
User 111194 AUC after training: 0.6655502392344498
User 111194 does not improve AUC. Reverting changes.
Training on augumented user 106250 7/50 current_auc = 0.6658692185007974
User 106250 AUC after training: 0.6658692185007975
User 106250 improves AUC. Keeping the model.
Training on augumented user 57909 8/50 current_auc = 0.6658692185007975
User 57909 AUC after training: 0.664274322169059
User 57909 does not improve AUC. Reverting changes.
Training on augumented user 65417 9/50 current_auc = 0.6658692185007975
User 65417 AUC after training: 0.6652312599681021
User 65417 does not improve AUC. Reverting changes.
Training on augumented user 119378 10/50 current_auc = 0.6658692185007975
User 119378 AUC after training: 0.6658692185007975
User 119378 does not improve AUC. Reverting changes.
Training on augumented user 123735 11/50 current_auc = 0.6658692185007975
User 123735 AUC after training: 0.6658692185007975
User 123735 does not improve AUC. Reverting changes.
Training on augumented user 63214 12/50 current_auc = 0.6658692185007975
User 63214 AUC after training: 0.6655502392344497
User 63214 does not improve AUC. Reverting changes.
Training on augumented user 69122 13/50 current_auc = 0.6658692185007975
User 69122 AUC after training: 0.6658692185007975
User 69122 does not improve AUC. Reverting changes.
Training on augumented user 14601 14/50 current_auc = 0.6658692185007975
User 14601 AUC after training: 0.6655502392344498
User 14601 does not improve AUC. Reverting changes.
Training on augumented user 100825 15/50 current_auc = 0.6658692185007975
User 100825 AUC after training: 0.6645933014354066
User 100825 does not improve AUC. Reverting changes.
Training on augumented user 126396 16/50 current_auc = 0.6658692185007975
User 126396 AUC after training: 0.6658692185007975
User 126396 does not improve AUC. Reverting changes.
Training on augumented user 86084 17/50 current_auc = 0.6658692185007975
User 86084 AUC after training: 0.6668261562998405
User 86084 improves AUC. Keeping the model.
Training on augumented user 40366 18/50 current_auc = 0.6668261562998405
User 40366 AUC after training: 0.6674641148325359
User 40366 improves AUC. Keeping the model.
Training on augumented user 89135 19/50 current_auc = 0.6674641148325359
User 89135 AUC after training: 0.6665071770334928
User 89135 does not improve AUC. Reverting changes.
Training on augumented user 105140 20/50 current_auc = 0.6674641148325359
User 105140 AUC after training: 0.667464114832536
User 105140 improves AUC. Keeping the model.
Training on augumented user 106882 21/50 current_auc = 0.667464114832536
User 106882 AUC after training: 0.6668261562998405
User 106882 does not improve AUC. Reverting changes.
Training on augumented user 54070 22/50 current_auc = 0.667464114832536
User 54070 AUC after training: 0.6652312599681021
User 54070 does not improve AUC. Reverting changes.
Training on augumented user 80918 23/50 current_auc = 0.667464114832536
User 80918 AUC after training: 0.6645933014354066
User 80918 does not improve AUC. Reverting changes.
Training on augumented user 114521 24/50 current_auc = 0.667464114832536
User 114521 AUC after training: 0.6652312599681021
User 114521 does not improve AUC. Reverting changes.
Training on augumented user 20231 25/50 current_auc = 0.667464114832536
User 20231 AUC after training: 0.6665071770334928
User 20231 does not improve AUC. Reverting changes.
Training on augumented user 34127 26/50 current_auc = 0.667464114832536
User 34127 AUC after training: 0.6666666666666667
User 34127 does not improve AUC. Reverting changes.
Training on augumented user 15584 27/50 current_auc = 0.667464114832536
User 15584 AUC after training: 0.6658692185007974
User 15584 does not improve AUC. Reverting changes.
Training on augumented user 74958 28/50 current_auc = 0.667464114832536
User 74958 AUC after training: 0.6661881977671452
User 74958 does not improve AUC. Reverting changes.
Training on augumented user 66732 29/50 current_auc = 0.667464114832536
User 66732 AUC after training: 0.6658692185007974
User 66732 does not improve AUC. Reverting changes.
Training on augumented user 17290 30/50 current_auc = 0.667464114832536
User 17290 AUC after training: 0.667464114832536
User 17290 does not improve AUC. Reverting changes.
Training on augumented user 84670 31/50 current_auc = 0.667464114832536
User 84670 AUC after training: 0.6658692185007974
User 84670 does not improve AUC. Reverting changes.
Training on augumented user 122051 32/50 current_auc = 0.667464114832536
User 122051 AUC after training: 0.6661881977671451
User 122051 does not improve AUC. Reverting changes.
Training on augumented user 61988 33/50 current_auc = 0.667464114832536
User 61988 AUC after training: 0.6677830940988836
User 61988 improves AUC. Keeping the model.
Training on augumented user 87905 34/50 current_auc = 0.6677830940988836
User 87905 AUC after training: 0.6677830940988836
User 87905 does not improve AUC. Reverting changes.
Training on augumented user 89129 35/50 current_auc = 0.6677830940988836
User 89129 AUC after training: 0.6668261562998405
User 89129 does not improve AUC. Reverting changes.
Training on augumented user 131476 36/50 current_auc = 0.6677830940988836
User 131476 AUC after training: 0.6665071770334928
User 131476 does not improve AUC. Reverting changes.
Training on augumented user 48115 37/50 current_auc = 0.6677830940988836
User 48115 AUC after training: 0.6674641148325359
User 48115 does not improve AUC. Reverting changes.
Training on augumented user 42719 38/50 current_auc = 0.6677830940988836
User 42719 AUC after training: 0.6639553429027113
User 42719 does not improve AUC. Reverting changes.
Training on augumented user 8358 39/50 current_auc = 0.6677830940988836
User 8358 AUC after training: 0.6668261562998405
User 8358 does not improve AUC. Reverting changes.
Training on augumented user 39727 40/50 current_auc = 0.6677830940988836
User 39727 AUC after training: 0.667464114832536
User 39727 does not improve AUC. Reverting changes.
Training on augumented user 111193 41/50 current_auc = 0.6677830940988836
User 111193 AUC after training: 0.6658692185007975
User 111193 does not improve AUC. Reverting changes.
Training on augumented user 79862 42/50 current_auc = 0.6677830940988836
User 79862 AUC after training: 0.6681020733652313
User 79862 improves AUC. Keeping the model.
Training on augumented user 80833 43/50 current_auc = 0.6681020733652313
User 80833 AUC after training: 0.6681020733652312
User 80833 does not improve AUC. Reverting changes.
Training on augumented user 1365 44/50 current_auc = 0.6681020733652313
User 1365 AUC after training: 0.6665071770334928
User 1365 does not improve AUC. Reverting changes.
Training on augumented user 95942 45/50 current_auc = 0.6681020733652313
User 95942 AUC after training: 0.6681020733652313
User 95942 does not improve AUC. Reverting changes.
Training on augumented user 46694 46/50 current_auc = 0.6681020733652313
User 46694 AUC after training: 0.6681020733652313
User 46694 does not improve AUC. Reverting changes.
Training on augumented user 22099 47/50 current_auc = 0.6681020733652313
User 22099 AUC after training: 0.6665071770334928
User 22099 does not improve AUC. Reverting changes.
Training on augumented user 43599 48/50 current_auc = 0.6681020733652313
User 43599 AUC after training: 0.6617224880382775
User 43599 does not improve AUC. Reverting changes.
Training on augumented user 47695 49/50 current_auc = 0.6681020733652313
User 47695 AUC after training: 0.6655502392344497
User 47695 does not improve AUC. Reverting changes.
[2024-12-02 20:11:19.963810] start test user 6465 283/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:11:20.441889] start test user 6465 283/568 recall augumented users by random, augumented_users = [56169, 108112, 122711, 82679, 20592, 127239, 96580, 27098, 77007, 97799, 54548, 65339, 103281, 99848, 36861, 104980, 128885, 128239, 128696, 9362, 35923, 45010, 49154, 96698, 65664, 89030, 13210, 79069, 81789, 87164, 89711, 90288, 42911, 807, 78995, 133227, 99581, 127596, 90844, 42140, 76187, 11032, 68919, 80828, 103808, 134843, 44209, 85889, 58239, 104111]
[2024-12-02 20:11:20.457350] user = 6465 Cloud 283/568
[2024-12-02 20:11:20.471543] user = 6465 Local 283/568
[2024-12-02 20:11:20.556425] user = 6465 Local+ 283/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:11:24.180068] user = 6465 MPDA- 283/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5653846153846154
Training on augumented user 56169 0/50 current_auc = 0.5653846153846154
User 56169 AUC after training: 0.5660839160839161
User 56169 improves AUC. Keeping the model.
Training on augumented user 108112 1/50 current_auc = 0.5660839160839161
User 108112 AUC after training: 0.563986013986014
User 108112 does not improve AUC. Reverting changes.
Training on augumented user 122711 2/50 current_auc = 0.5660839160839161
User 122711 AUC after training: 0.5660839160839161
User 122711 does not improve AUC. Reverting changes.
Training on augumented user 82679 3/50 current_auc = 0.5660839160839161
User 82679 AUC after training: 0.5667832167832169
User 82679 improves AUC. Keeping the model.
Training on augumented user 20592 4/50 current_auc = 0.5667832167832169
User 20592 AUC after training: 0.5653846153846155
User 20592 does not improve AUC. Reverting changes.
Training on augumented user 127239 5/50 current_auc = 0.5667832167832169
User 127239 AUC after training: 0.5660839160839162
User 127239 does not improve AUC. Reverting changes.
Training on augumented user 96580 6/50 current_auc = 0.5667832167832169
User 96580 AUC after training: 0.5653846153846155
User 96580 does not improve AUC. Reverting changes.
Training on augumented user 27098 7/50 current_auc = 0.5667832167832169
User 27098 AUC after training: 0.5671328671328671
User 27098 improves AUC. Keeping the model.
Training on augumented user 77007 8/50 current_auc = 0.5671328671328671
User 77007 AUC after training: 0.570979020979021
User 77007 improves AUC. Keeping the model.
Training on augumented user 97799 9/50 current_auc = 0.570979020979021
User 97799 AUC after training: 0.570979020979021
User 97799 does not improve AUC. Reverting changes.
Training on augumented user 54548 10/50 current_auc = 0.570979020979021
User 54548 AUC after training: 0.5737762237762238
User 54548 improves AUC. Keeping the model.
Training on augumented user 65339 11/50 current_auc = 0.5737762237762238
User 65339 AUC after training: 0.5783216783216784
User 65339 improves AUC. Keeping the model.
Training on augumented user 103281 12/50 current_auc = 0.5783216783216784
User 103281 AUC after training: 0.5762237762237763
User 103281 does not improve AUC. Reverting changes.
Training on augumented user 99848 13/50 current_auc = 0.5783216783216784
User 99848 AUC after training: 0.579020979020979
User 99848 improves AUC. Keeping the model.
Training on augumented user 36861 14/50 current_auc = 0.579020979020979
User 36861 AUC after training: 0.5783216783216784
User 36861 does not improve AUC. Reverting changes.
Training on augumented user 104980 15/50 current_auc = 0.579020979020979
User 104980 AUC after training: 0.579020979020979
User 104980 does not improve AUC. Reverting changes.
Training on augumented user 128885 16/50 current_auc = 0.579020979020979
User 128885 AUC after training: 0.576923076923077
User 128885 does not improve AUC. Reverting changes.
Training on augumented user 128239 17/50 current_auc = 0.579020979020979
User 128239 AUC after training: 0.5783216783216784
User 128239 does not improve AUC. Reverting changes.
Training on augumented user 128696 18/50 current_auc = 0.579020979020979
User 128696 AUC after training: 0.5783216783216784
User 128696 does not improve AUC. Reverting changes.
Training on augumented user 9362 19/50 current_auc = 0.579020979020979
User 9362 AUC after training: 0.576923076923077
User 9362 does not improve AUC. Reverting changes.
Training on augumented user 35923 20/50 current_auc = 0.579020979020979
User 35923 AUC after training: 0.579020979020979
User 35923 does not improve AUC. Reverting changes.
Training on augumented user 45010 21/50 current_auc = 0.579020979020979
User 45010 AUC after training: 0.579020979020979
User 45010 does not improve AUC. Reverting changes.
Training on augumented user 49154 22/50 current_auc = 0.579020979020979
User 49154 AUC after training: 0.5797202797202797
User 49154 improves AUC. Keeping the model.
Training on augumented user 96698 23/50 current_auc = 0.5797202797202797
User 96698 AUC after training: 0.5758741258741259
User 96698 does not improve AUC. Reverting changes.
Training on augumented user 65664 24/50 current_auc = 0.5797202797202797
User 65664 AUC after training: 0.5783216783216784
User 65664 does not improve AUC. Reverting changes.
Training on augumented user 89030 25/50 current_auc = 0.5797202797202797
User 89030 AUC after training: 0.5797202797202797
User 89030 does not improve AUC. Reverting changes.
Training on augumented user 13210 26/50 current_auc = 0.5797202797202797
User 13210 AUC after training: 0.579020979020979
User 13210 does not improve AUC. Reverting changes.
Training on augumented user 79069 27/50 current_auc = 0.5797202797202797
User 79069 AUC after training: 0.579020979020979
User 79069 does not improve AUC. Reverting changes.
Training on augumented user 81789 28/50 current_auc = 0.5797202797202797
User 81789 AUC after training: 0.5762237762237763
User 81789 does not improve AUC. Reverting changes.
Training on augumented user 87164 29/50 current_auc = 0.5797202797202797
User 87164 AUC after training: 0.5793706293706293
User 87164 does not improve AUC. Reverting changes.
Training on augumented user 89711 30/50 current_auc = 0.5797202797202797
User 89711 AUC after training: 0.5783216783216784
User 89711 does not improve AUC. Reverting changes.
Training on augumented user 90288 31/50 current_auc = 0.5797202797202797
User 90288 AUC after training: 0.5797202797202797
User 90288 does not improve AUC. Reverting changes.
Training on augumented user 42911 32/50 current_auc = 0.5797202797202797
User 42911 AUC after training: 0.579020979020979
User 42911 does not improve AUC. Reverting changes.
Training on augumented user 807 33/50 current_auc = 0.5797202797202797
User 807 AUC after training: 0.5783216783216784
User 807 does not improve AUC. Reverting changes.
Training on augumented user 78995 34/50 current_auc = 0.5797202797202797
User 78995 AUC after training: 0.5804195804195804
User 78995 improves AUC. Keeping the model.
Training on augumented user 133227 35/50 current_auc = 0.5804195804195804
User 133227 AUC after training: 0.5783216783216784
User 133227 does not improve AUC. Reverting changes.
Training on augumented user 99581 36/50 current_auc = 0.5804195804195804
User 99581 AUC after training: 0.579020979020979
User 99581 does not improve AUC. Reverting changes.
Training on augumented user 127596 37/50 current_auc = 0.5804195804195804
User 127596 AUC after training: 0.5765734265734266
User 127596 does not improve AUC. Reverting changes.
Training on augumented user 90844 38/50 current_auc = 0.5804195804195804
User 90844 AUC after training: 0.5762237762237763
User 90844 does not improve AUC. Reverting changes.
Training on augumented user 42140 39/50 current_auc = 0.5804195804195804
User 42140 AUC after training: 0.5783216783216784
User 42140 does not improve AUC. Reverting changes.
Training on augumented user 76187 40/50 current_auc = 0.5804195804195804
User 76187 AUC after training: 0.579020979020979
User 76187 does not improve AUC. Reverting changes.
Training on augumented user 11032 41/50 current_auc = 0.5804195804195804
User 11032 AUC after training: 0.5797202797202797
User 11032 does not improve AUC. Reverting changes.
Training on augumented user 68919 42/50 current_auc = 0.5804195804195804
User 68919 AUC after training: 0.579020979020979
User 68919 does not improve AUC. Reverting changes.
Training on augumented user 80828 43/50 current_auc = 0.5804195804195804
User 80828 AUC after training: 0.5755244755244755
User 80828 does not improve AUC. Reverting changes.
Training on augumented user 103808 44/50 current_auc = 0.5804195804195804
User 103808 AUC after training: 0.5720279720279721
User 103808 does not improve AUC. Reverting changes.
Training on augumented user 134843 45/50 current_auc = 0.5804195804195804
User 134843 AUC after training: 0.5804195804195804
User 134843 does not improve AUC. Reverting changes.
Training on augumented user 44209 46/50 current_auc = 0.5804195804195804
User 44209 AUC after training: 0.5783216783216784
User 44209 does not improve AUC. Reverting changes.
Training on augumented user 85889 47/50 current_auc = 0.5804195804195804
User 85889 AUC after training: 0.5744755244755245
User 85889 does not improve AUC. Reverting changes.
Training on augumented user 58239 48/50 current_auc = 0.5804195804195804
User 58239 AUC after training: 0.5804195804195804
User 58239 does not improve AUC. Reverting changes.
Training on augumented user 104111 49/50 current_auc = 0.5804195804195804
User 104111 AUC after training: 0.579020979020979
User 104111 does not improve AUC. Reverting changes.
[2024-12-02 20:11:52.900407] start test user 6569 284/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:11:53.347956] start test user 6569 284/568 recall augumented users by random, augumented_users = [29615, 105771, 118474, 111106, 109685, 58734, 53161, 81981, 96101, 115088, 39213, 59532, 50294, 38130, 80247, 126153, 103851, 12458, 21160, 25176, 106121, 37967, 11964, 63796, 128292, 112603, 12490, 128811, 5454, 36990, 82569, 73162, 76872, 19112, 114701, 88040, 108928, 99251, 53578, 87488, 107646, 111001, 73050, 70874, 131828, 134577, 62858, 66152, 24418, 106446]
[2024-12-02 20:11:53.363891] user = 6569 Cloud 284/568
[2024-12-02 20:11:53.383838] user = 6569 Local 284/568
[2024-12-02 20:11:53.480714] user = 6569 Local+ 284/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:11:56.089428] user = 6569 MPDA- 284/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7209951174145548
Training on augumented user 29615 0/50 current_auc = 0.7209951174145548
User 29615 AUC after training: 0.7214601255521971
User 29615 improves AUC. Keeping the model.
Training on augumented user 105771 1/50 current_auc = 0.7214601255521971
User 105771 AUC after training: 0.7214601255521973
User 105771 improves AUC. Keeping the model.
Training on augumented user 118474 2/50 current_auc = 0.7214601255521973
User 118474 AUC after training: 0.7212276214833759
User 118474 does not improve AUC. Reverting changes.
Training on augumented user 111106 3/50 current_auc = 0.7214601255521973
User 111106 AUC after training: 0.7216926296210184
User 111106 improves AUC. Keeping the model.
Training on augumented user 109685 4/50 current_auc = 0.7216926296210184
User 109685 AUC after training: 0.7212276214833759
User 109685 does not improve AUC. Reverting changes.
Training on augumented user 58734 5/50 current_auc = 0.7216926296210184
User 58734 AUC after training: 0.7216926296210183
User 58734 does not improve AUC. Reverting changes.
Training on augumented user 53161 6/50 current_auc = 0.7216926296210184
User 53161 AUC after training: 0.7216926296210184
User 53161 does not improve AUC. Reverting changes.
Training on augumented user 81981 7/50 current_auc = 0.7216926296210184
User 81981 AUC after training: 0.7214601255521972
User 81981 does not improve AUC. Reverting changes.
Training on augumented user 96101 8/50 current_auc = 0.7216926296210184
User 96101 AUC after training: 0.7214601255521972
User 96101 does not improve AUC. Reverting changes.
Training on augumented user 115088 9/50 current_auc = 0.7216926296210184
User 115088 AUC after training: 0.7214601255521971
User 115088 does not improve AUC. Reverting changes.
Training on augumented user 39213 10/50 current_auc = 0.7216926296210184
User 39213 AUC after training: 0.7209951174145548
User 39213 does not improve AUC. Reverting changes.
Training on augumented user 59532 11/50 current_auc = 0.7216926296210184
User 59532 AUC after training: 0.7216926296210184
User 59532 does not improve AUC. Reverting changes.
Training on augumented user 50294 12/50 current_auc = 0.7216926296210184
User 50294 AUC after training: 0.7230876540339456
User 50294 improves AUC. Keeping the model.
Training on augumented user 38130 13/50 current_auc = 0.7230876540339456
User 38130 AUC after training: 0.7233201581027668
User 38130 improves AUC. Keeping the model.
Training on augumented user 80247 14/50 current_auc = 0.7233201581027668
User 80247 AUC after training: 0.7233201581027668
User 80247 does not improve AUC. Reverting changes.
Training on augumented user 126153 15/50 current_auc = 0.7233201581027668
User 126153 AUC after training: 0.7233201581027668
User 126153 does not improve AUC. Reverting changes.
Training on augumented user 103851 16/50 current_auc = 0.7233201581027668
User 103851 AUC after training: 0.723552662171588
User 103851 improves AUC. Keeping the model.
Training on augumented user 12458 17/50 current_auc = 0.723552662171588
User 12458 AUC after training: 0.723552662171588
User 12458 does not improve AUC. Reverting changes.
Training on augumented user 21160 18/50 current_auc = 0.723552662171588
User 21160 AUC after training: 0.723552662171588
User 21160 does not improve AUC. Reverting changes.
Training on augumented user 25176 19/50 current_auc = 0.723552662171588
User 25176 AUC after training: 0.7228551499651243
User 25176 does not improve AUC. Reverting changes.
Training on augumented user 106121 20/50 current_auc = 0.723552662171588
User 106121 AUC after training: 0.723552662171588
User 106121 does not improve AUC. Reverting changes.
Training on augumented user 37967 21/50 current_auc = 0.723552662171588
User 37967 AUC after training: 0.7230876540339456
User 37967 does not improve AUC. Reverting changes.
Training on augumented user 11964 22/50 current_auc = 0.723552662171588
User 11964 AUC after training: 0.7227388979307137
User 11964 does not improve AUC. Reverting changes.
Training on augumented user 63796 23/50 current_auc = 0.723552662171588
User 63796 AUC after training: 0.723552662171588
User 63796 does not improve AUC. Reverting changes.
Training on augumented user 128292 24/50 current_auc = 0.723552662171588
User 128292 AUC after training: 0.7237851662404092
User 128292 improves AUC. Keeping the model.
Training on augumented user 112603 25/50 current_auc = 0.7237851662404092
User 112603 AUC after training: 0.7237851662404092
User 112603 does not improve AUC. Reverting changes.
Training on augumented user 12490 26/50 current_auc = 0.7237851662404092
User 12490 AUC after training: 0.7219251336898396
User 12490 does not improve AUC. Reverting changes.
Training on augumented user 128811 27/50 current_auc = 0.7237851662404092
User 128811 AUC after training: 0.7242501743780516
User 128811 improves AUC. Keeping the model.
Training on augumented user 5454 28/50 current_auc = 0.7242501743780516
User 5454 AUC after training: 0.7240176703092305
User 5454 does not improve AUC. Reverting changes.
Training on augumented user 36990 29/50 current_auc = 0.7242501743780516
User 36990 AUC after training: 0.7242501743780516
User 36990 does not improve AUC. Reverting changes.
Training on augumented user 82569 30/50 current_auc = 0.7242501743780516
User 82569 AUC after training: 0.7235526621715881
User 82569 does not improve AUC. Reverting changes.
Training on augumented user 73162 31/50 current_auc = 0.7242501743780516
User 73162 AUC after training: 0.7240176703092305
User 73162 does not improve AUC. Reverting changes.
Training on augumented user 76872 32/50 current_auc = 0.7242501743780516
User 76872 AUC after training: 0.7242501743780516
User 76872 does not improve AUC. Reverting changes.
Training on augumented user 19112 33/50 current_auc = 0.7242501743780516
User 19112 AUC after training: 0.723552662171588
User 19112 does not improve AUC. Reverting changes.
Training on augumented user 114701 34/50 current_auc = 0.7242501743780516
User 114701 AUC after training: 0.7249476865845152
User 114701 improves AUC. Keeping the model.
Training on augumented user 88040 35/50 current_auc = 0.7249476865845152
User 88040 AUC after training: 0.7242501743780516
User 88040 does not improve AUC. Reverting changes.
Training on augumented user 108928 36/50 current_auc = 0.7249476865845152
User 108928 AUC after training: 0.7244826784468728
User 108928 does not improve AUC. Reverting changes.
Training on augumented user 99251 37/50 current_auc = 0.7249476865845152
User 99251 AUC after training: 0.7249476865845152
User 99251 does not improve AUC. Reverting changes.
Training on augumented user 53578 38/50 current_auc = 0.7249476865845152
User 53578 AUC after training: 0.7242501743780516
User 53578 does not improve AUC. Reverting changes.
Training on augumented user 87488 39/50 current_auc = 0.7249476865845152
User 87488 AUC after training: 0.7241339223436409
User 87488 does not improve AUC. Reverting changes.
Training on augumented user 107646 40/50 current_auc = 0.7249476865845152
User 107646 AUC after training: 0.7237851662404092
User 107646 does not improve AUC. Reverting changes.
Training on augumented user 111001 41/50 current_auc = 0.7249476865845152
User 111001 AUC after training: 0.724715182515694
User 111001 does not improve AUC. Reverting changes.
Training on augumented user 73050 42/50 current_auc = 0.7249476865845152
User 73050 AUC after training: 0.7244826784468729
User 73050 does not improve AUC. Reverting changes.
Training on augumented user 70874 43/50 current_auc = 0.7249476865845152
User 70874 AUC after training: 0.7240176703092305
User 70874 does not improve AUC. Reverting changes.
Training on augumented user 131828 44/50 current_auc = 0.7249476865845152
User 131828 AUC after training: 0.7244826784468728
User 131828 does not improve AUC. Reverting changes.
Training on augumented user 134577 45/50 current_auc = 0.7249476865845152
User 134577 AUC after training: 0.7242501743780516
User 134577 does not improve AUC. Reverting changes.
Training on augumented user 62858 46/50 current_auc = 0.7249476865845152
User 62858 AUC after training: 0.7247151825156941
User 62858 does not improve AUC. Reverting changes.
Training on augumented user 66152 47/50 current_auc = 0.7249476865845152
User 66152 AUC after training: 0.724715182515694
User 66152 does not improve AUC. Reverting changes.
Training on augumented user 24418 48/50 current_auc = 0.7249476865845152
User 24418 AUC after training: 0.7247151825156941
User 24418 does not improve AUC. Reverting changes.
Training on augumented user 106446 49/50 current_auc = 0.7249476865845152
User 106446 AUC after training: 0.7244826784468729
User 106446 does not improve AUC. Reverting changes.
[2024-12-02 20:12:26.134872] start test user 6597 285/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:12:26.933312] start test user 6597 285/568 recall augumented users by random, augumented_users = [135020, 104406, 11257, 52316, 126267, 56044, 86174, 118395, 123540, 4796, 104593, 43631, 125443, 64113, 16324, 49112, 95772, 52554, 10676, 101609, 39305, 64317, 57154, 2130, 121193, 81352, 7145, 9723, 122548, 76717, 92078, 136252, 75325, 86117, 33578, 23800, 50598, 18791, 13896, 101966, 108513, 68799, 85182, 71174, 137493, 43829, 109195, 33656, 41806, 133623]
[2024-12-02 20:12:26.992588] user = 6597 Cloud 285/568
[2024-12-02 20:12:27.046889] user = 6597 Local 285/568
[2024-12-02 20:12:27.236091] user = 6597 Local+ 285/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:12:29.322780] user = 6597 MPDA- 285/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5787878787878789
Training on augumented user 135020 0/50 current_auc = 0.5787878787878789
User 135020 AUC after training: 0.5696969696969697
User 135020 does not improve AUC. Reverting changes.
Training on augumented user 104406 1/50 current_auc = 0.5787878787878789
User 104406 AUC after training: 0.5772727272727273
User 104406 does not improve AUC. Reverting changes.
Training on augumented user 11257 2/50 current_auc = 0.5787878787878789
User 11257 AUC after training: 0.5787878787878787
User 11257 does not improve AUC. Reverting changes.
Training on augumented user 52316 3/50 current_auc = 0.5787878787878789
User 52316 AUC after training: 0.5772727272727273
User 52316 does not improve AUC. Reverting changes.
Training on augumented user 126267 4/50 current_auc = 0.5787878787878789
User 126267 AUC after training: 0.5772727272727273
User 126267 does not improve AUC. Reverting changes.
Training on augumented user 56044 5/50 current_auc = 0.5787878787878789
User 56044 AUC after training: 0.5787878787878787
User 56044 does not improve AUC. Reverting changes.
Training on augumented user 86174 6/50 current_auc = 0.5787878787878789
User 86174 AUC after training: 0.5803030303030302
User 86174 improves AUC. Keeping the model.
Training on augumented user 118395 7/50 current_auc = 0.5803030303030302
User 118395 AUC after training: 0.5757575757575757
User 118395 does not improve AUC. Reverting changes.
Training on augumented user 123540 8/50 current_auc = 0.5803030303030302
User 123540 AUC after training: 0.5772727272727273
User 123540 does not improve AUC. Reverting changes.
Training on augumented user 4796 9/50 current_auc = 0.5803030303030302
User 4796 AUC after training: 0.5787878787878787
User 4796 does not improve AUC. Reverting changes.
Training on augumented user 104593 10/50 current_auc = 0.5803030303030302
User 104593 AUC after training: 0.5787878787878787
User 104593 does not improve AUC. Reverting changes.
Training on augumented user 43631 11/50 current_auc = 0.5803030303030302
User 43631 AUC after training: 0.5803030303030303
User 43631 improves AUC. Keeping the model.
Training on augumented user 125443 12/50 current_auc = 0.5803030303030303
User 125443 AUC after training: 0.5787878787878787
User 125443 does not improve AUC. Reverting changes.
Training on augumented user 64113 13/50 current_auc = 0.5803030303030303
User 64113 AUC after training: 0.5803030303030303
User 64113 does not improve AUC. Reverting changes.
Training on augumented user 16324 14/50 current_auc = 0.5803030303030303
User 16324 AUC after training: 0.5772727272727272
User 16324 does not improve AUC. Reverting changes.
Training on augumented user 49112 15/50 current_auc = 0.5803030303030303
User 49112 AUC after training: 0.5803030303030303
User 49112 does not improve AUC. Reverting changes.
Training on augumented user 95772 16/50 current_auc = 0.5803030303030303
User 95772 AUC after training: 0.5818181818181818
User 95772 improves AUC. Keeping the model.
Training on augumented user 52554 17/50 current_auc = 0.5818181818181818
User 52554 AUC after training: 0.5803030303030303
User 52554 does not improve AUC. Reverting changes.
Training on augumented user 10676 18/50 current_auc = 0.5818181818181818
User 10676 AUC after training: 0.5787878787878789
User 10676 does not improve AUC. Reverting changes.
Training on augumented user 101609 19/50 current_auc = 0.5818181818181818
User 101609 AUC after training: 0.5818181818181818
User 101609 does not improve AUC. Reverting changes.
Training on augumented user 39305 20/50 current_auc = 0.5818181818181818
User 39305 AUC after training: 0.5818181818181818
User 39305 does not improve AUC. Reverting changes.
Training on augumented user 64317 21/50 current_auc = 0.5818181818181818
User 64317 AUC after training: 0.5833333333333333
User 64317 improves AUC. Keeping the model.
Training on augumented user 57154 22/50 current_auc = 0.5833333333333333
User 57154 AUC after training: 0.5803030303030303
User 57154 does not improve AUC. Reverting changes.
Training on augumented user 2130 23/50 current_auc = 0.5833333333333333
User 2130 AUC after training: 0.5787878787878789
User 2130 does not improve AUC. Reverting changes.
Training on augumented user 121193 24/50 current_auc = 0.5833333333333333
User 121193 AUC after training: 0.5848484848484848
User 121193 improves AUC. Keeping the model.
Training on augumented user 81352 25/50 current_auc = 0.5848484848484848
User 81352 AUC after training: 0.5848484848484848
User 81352 does not improve AUC. Reverting changes.
Training on augumented user 7145 26/50 current_auc = 0.5848484848484848
User 7145 AUC after training: 0.5848484848484848
User 7145 does not improve AUC. Reverting changes.
Training on augumented user 9723 27/50 current_auc = 0.5848484848484848
User 9723 AUC after training: 0.5833333333333333
User 9723 does not improve AUC. Reverting changes.
Training on augumented user 122548 28/50 current_auc = 0.5848484848484848
User 122548 AUC after training: 0.5848484848484848
User 122548 does not improve AUC. Reverting changes.
Training on augumented user 76717 29/50 current_auc = 0.5848484848484848
User 76717 AUC after training: 0.5833333333333333
User 76717 does not improve AUC. Reverting changes.
Training on augumented user 92078 30/50 current_auc = 0.5848484848484848
User 92078 AUC after training: 0.5833333333333333
User 92078 does not improve AUC. Reverting changes.
Training on augumented user 136252 31/50 current_auc = 0.5848484848484848
User 136252 AUC after training: 0.5833333333333333
User 136252 does not improve AUC. Reverting changes.
Training on augumented user 75325 32/50 current_auc = 0.5848484848484848
User 75325 AUC after training: 0.5818181818181818
User 75325 does not improve AUC. Reverting changes.
Training on augumented user 86117 33/50 current_auc = 0.5848484848484848
User 86117 AUC after training: 0.5833333333333333
User 86117 does not improve AUC. Reverting changes.
Training on augumented user 33578 34/50 current_auc = 0.5848484848484848
User 33578 AUC after training: 0.5818181818181818
User 33578 does not improve AUC. Reverting changes.
Training on augumented user 23800 35/50 current_auc = 0.5848484848484848
User 23800 AUC after training: 0.5878787878787879
User 23800 improves AUC. Keeping the model.
Training on augumented user 50598 36/50 current_auc = 0.5878787878787879
User 50598 AUC after training: 0.5848484848484848
User 50598 does not improve AUC. Reverting changes.
Training on augumented user 18791 37/50 current_auc = 0.5878787878787879
User 18791 AUC after training: 0.5818181818181818
User 18791 does not improve AUC. Reverting changes.
Training on augumented user 13896 38/50 current_auc = 0.5878787878787879
User 13896 AUC after training: 0.5833333333333334
User 13896 does not improve AUC. Reverting changes.
Training on augumented user 101966 39/50 current_auc = 0.5878787878787879
User 101966 AUC after training: 0.5848484848484848
User 101966 does not improve AUC. Reverting changes.
Training on augumented user 108513 40/50 current_auc = 0.5878787878787879
User 108513 AUC after training: 0.5833333333333334
User 108513 does not improve AUC. Reverting changes.
Training on augumented user 68799 41/50 current_auc = 0.5878787878787879
User 68799 AUC after training: 0.5833333333333333
User 68799 does not improve AUC. Reverting changes.
Training on augumented user 85182 42/50 current_auc = 0.5878787878787879
User 85182 AUC after training: 0.5848484848484848
User 85182 does not improve AUC. Reverting changes.
Training on augumented user 71174 43/50 current_auc = 0.5878787878787879
User 71174 AUC after training: 0.5863636363636363
User 71174 does not improve AUC. Reverting changes.
Training on augumented user 137493 44/50 current_auc = 0.5878787878787879
User 137493 AUC after training: 0.5848484848484848
User 137493 does not improve AUC. Reverting changes.
Training on augumented user 43829 45/50 current_auc = 0.5878787878787879
User 43829 AUC after training: 0.5848484848484848
User 43829 does not improve AUC. Reverting changes.
Training on augumented user 109195 46/50 current_auc = 0.5878787878787879
User 109195 AUC after training: 0.5803030303030303
User 109195 does not improve AUC. Reverting changes.
Training on augumented user 33656 47/50 current_auc = 0.5878787878787879
User 33656 AUC after training: 0.5893939393939394
User 33656 improves AUC. Keeping the model.
Training on augumented user 41806 48/50 current_auc = 0.5893939393939394
User 41806 AUC after training: 0.5878787878787879
User 41806 does not improve AUC. Reverting changes.
Training on augumented user 133623 49/50 current_auc = 0.5893939393939394
User 133623 AUC after training: 0.5848484848484848
User 133623 does not improve AUC. Reverting changes.
[2024-12-02 20:13:00.871997] start test user 6662 286/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:13:01.281314] start test user 6662 286/568 recall augumented users by random, augumented_users = [133297, 84451, 82749, 112442, 39043, 73966, 87140, 27853, 72834, 52963, 37190, 37409, 96967, 58018, 73921, 67519, 17541, 82860, 34829, 60458, 76600, 72165, 34558, 113048, 76549, 59634, 110874, 118045, 71806, 83357, 12660, 62670, 24136, 5097, 32967, 55869, 66220, 116434, 48182, 19048, 120384, 5921, 108020, 97477, 124105, 136676, 91201, 106200, 86446, 121736]
[2024-12-02 20:13:01.295948] user = 6662 Cloud 286/568
[2024-12-02 20:13:01.306447] user = 6662 Local 286/568
[2024-12-02 20:13:01.343299] user = 6662 Local+ 286/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:13:03.770234] user = 6662 MPDA- 286/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8417508417508417
Training on augumented user 133297 0/50 current_auc = 0.8417508417508417
User 133297 AUC after training: 0.8417508417508417
User 133297 does not improve AUC. Reverting changes.
Training on augumented user 84451 1/50 current_auc = 0.8417508417508417
User 84451 AUC after training: 0.8417508417508417
User 84451 does not improve AUC. Reverting changes.
Training on augumented user 82749 2/50 current_auc = 0.8417508417508417
User 82749 AUC after training: 0.8434343434343434
User 82749 improves AUC. Keeping the model.
Training on augumented user 112442 3/50 current_auc = 0.8434343434343434
User 112442 AUC after training: 0.8434343434343434
User 112442 does not improve AUC. Reverting changes.
Training on augumented user 39043 4/50 current_auc = 0.8434343434343434
User 39043 AUC after training: 0.8434343434343434
User 39043 does not improve AUC. Reverting changes.
Training on augumented user 73966 5/50 current_auc = 0.8434343434343434
User 73966 AUC after training: 0.8434343434343434
User 73966 does not improve AUC. Reverting changes.
Training on augumented user 87140 6/50 current_auc = 0.8434343434343434
User 87140 AUC after training: 0.8417508417508417
User 87140 does not improve AUC. Reverting changes.
Training on augumented user 27853 7/50 current_auc = 0.8434343434343434
User 27853 AUC after training: 0.8417508417508417
User 27853 does not improve AUC. Reverting changes.
Training on augumented user 72834 8/50 current_auc = 0.8434343434343434
User 72834 AUC after training: 0.8468013468013468
User 72834 improves AUC. Keeping the model.
Training on augumented user 52963 9/50 current_auc = 0.8468013468013468
User 52963 AUC after training: 0.8434343434343433
User 52963 does not improve AUC. Reverting changes.
Training on augumented user 37190 10/50 current_auc = 0.8468013468013468
User 37190 AUC after training: 0.8468013468013468
User 37190 does not improve AUC. Reverting changes.
Training on augumented user 37409 11/50 current_auc = 0.8468013468013468
User 37409 AUC after training: 0.8434343434343433
User 37409 does not improve AUC. Reverting changes.
Training on augumented user 96967 12/50 current_auc = 0.8468013468013468
User 96967 AUC after training: 0.8468013468013468
User 96967 does not improve AUC. Reverting changes.
Training on augumented user 58018 13/50 current_auc = 0.8468013468013468
User 58018 AUC after training: 0.8417508417508417
User 58018 does not improve AUC. Reverting changes.
Training on augumented user 73921 14/50 current_auc = 0.8468013468013468
User 73921 AUC after training: 0.845117845117845
User 73921 does not improve AUC. Reverting changes.
Training on augumented user 67519 15/50 current_auc = 0.8468013468013468
User 67519 AUC after training: 0.845117845117845
User 67519 does not improve AUC. Reverting changes.
Training on augumented user 17541 16/50 current_auc = 0.8468013468013468
User 17541 AUC after training: 0.8484848484848484
User 17541 improves AUC. Keeping the model.
Training on augumented user 82860 17/50 current_auc = 0.8484848484848484
User 82860 AUC after training: 0.8434343434343434
User 82860 does not improve AUC. Reverting changes.
Training on augumented user 34829 18/50 current_auc = 0.8484848484848484
User 34829 AUC after training: 0.8434343434343433
User 34829 does not improve AUC. Reverting changes.
Training on augumented user 60458 19/50 current_auc = 0.8484848484848484
User 60458 AUC after training: 0.8484848484848484
User 60458 does not improve AUC. Reverting changes.
Training on augumented user 76600 20/50 current_auc = 0.8484848484848484
User 76600 AUC after training: 0.8484848484848484
User 76600 does not improve AUC. Reverting changes.
Training on augumented user 72165 21/50 current_auc = 0.8484848484848484
User 72165 AUC after training: 0.8484848484848484
User 72165 does not improve AUC. Reverting changes.
Training on augumented user 34558 22/50 current_auc = 0.8484848484848484
User 34558 AUC after training: 0.8501683501683501
User 34558 improves AUC. Keeping the model.
Training on augumented user 113048 23/50 current_auc = 0.8501683501683501
User 113048 AUC after training: 0.8501683501683501
User 113048 does not improve AUC. Reverting changes.
Training on augumented user 76549 24/50 current_auc = 0.8501683501683501
User 76549 AUC after training: 0.8501683501683501
User 76549 does not improve AUC. Reverting changes.
Training on augumented user 59634 25/50 current_auc = 0.8501683501683501
User 59634 AUC after training: 0.8484848484848484
User 59634 does not improve AUC. Reverting changes.
Training on augumented user 110874 26/50 current_auc = 0.8501683501683501
User 110874 AUC after training: 0.8434343434343433
User 110874 does not improve AUC. Reverting changes.
Training on augumented user 118045 27/50 current_auc = 0.8501683501683501
User 118045 AUC after training: 0.8484848484848484
User 118045 does not improve AUC. Reverting changes.
Training on augumented user 71806 28/50 current_auc = 0.8501683501683501
User 71806 AUC after training: 0.8417508417508417
User 71806 does not improve AUC. Reverting changes.
Training on augumented user 83357 29/50 current_auc = 0.8501683501683501
User 83357 AUC after training: 0.8501683501683501
User 83357 does not improve AUC. Reverting changes.
Training on augumented user 12660 30/50 current_auc = 0.8501683501683501
User 12660 AUC after training: 0.8501683501683501
User 12660 does not improve AUC. Reverting changes.
Training on augumented user 62670 31/50 current_auc = 0.8501683501683501
User 62670 AUC after training: 0.8501683501683501
User 62670 does not improve AUC. Reverting changes.
Training on augumented user 24136 32/50 current_auc = 0.8501683501683501
User 24136 AUC after training: 0.845117845117845
User 24136 does not improve AUC. Reverting changes.
Training on augumented user 5097 33/50 current_auc = 0.8501683501683501
User 5097 AUC after training: 0.8484848484848485
User 5097 does not improve AUC. Reverting changes.
Training on augumented user 32967 34/50 current_auc = 0.8501683501683501
User 32967 AUC after training: 0.8501683501683501
User 32967 does not improve AUC. Reverting changes.
Training on augumented user 55869 35/50 current_auc = 0.8501683501683501
User 55869 AUC after training: 0.8501683501683501
User 55869 does not improve AUC. Reverting changes.
Training on augumented user 66220 36/50 current_auc = 0.8501683501683501
User 66220 AUC after training: 0.845117845117845
User 66220 does not improve AUC. Reverting changes.
Training on augumented user 116434 37/50 current_auc = 0.8501683501683501
User 116434 AUC after training: 0.8501683501683501
User 116434 does not improve AUC. Reverting changes.
Training on augumented user 48182 38/50 current_auc = 0.8501683501683501
User 48182 AUC after training: 0.8501683501683501
User 48182 does not improve AUC. Reverting changes.
Training on augumented user 19048 39/50 current_auc = 0.8501683501683501
User 19048 AUC after training: 0.8484848484848484
User 19048 does not improve AUC. Reverting changes.
Training on augumented user 120384 40/50 current_auc = 0.8501683501683501
User 120384 AUC after training: 0.8484848484848485
User 120384 does not improve AUC. Reverting changes.
Training on augumented user 5921 41/50 current_auc = 0.8501683501683501
User 5921 AUC after training: 0.845117845117845
User 5921 does not improve AUC. Reverting changes.
Training on augumented user 108020 42/50 current_auc = 0.8501683501683501
User 108020 AUC after training: 0.8501683501683501
User 108020 does not improve AUC. Reverting changes.
Training on augumented user 97477 43/50 current_auc = 0.8501683501683501
User 97477 AUC after training: 0.845117845117845
User 97477 does not improve AUC. Reverting changes.
Training on augumented user 124105 44/50 current_auc = 0.8501683501683501
User 124105 AUC after training: 0.8501683501683501
User 124105 does not improve AUC. Reverting changes.
Training on augumented user 136676 45/50 current_auc = 0.8501683501683501
User 136676 AUC after training: 0.8484848484848485
User 136676 does not improve AUC. Reverting changes.
Training on augumented user 91201 46/50 current_auc = 0.8501683501683501
User 91201 AUC after training: 0.8468013468013468
User 91201 does not improve AUC. Reverting changes.
Training on augumented user 106200 47/50 current_auc = 0.8501683501683501
User 106200 AUC after training: 0.8468013468013468
User 106200 does not improve AUC. Reverting changes.
Training on augumented user 86446 48/50 current_auc = 0.8501683501683501
User 86446 AUC after training: 0.8484848484848485
User 86446 does not improve AUC. Reverting changes.
Training on augumented user 121736 49/50 current_auc = 0.8501683501683501
User 121736 AUC after training: 0.8501683501683501
User 121736 does not improve AUC. Reverting changes.
[2024-12-02 20:13:34.061668] start test user 6686 287/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:13:34.684502] start test user 6686 287/568 recall augumented users by random, augumented_users = [73478, 103969, 26169, 5479, 75987, 100840, 45893, 18035, 47587, 32464, 59859, 5969, 19263, 109149, 67505, 118918, 63548, 111086, 59934, 88478, 106452, 126464, 36643, 29037, 120778, 55716, 127067, 42829, 89752, 116930, 108383, 32111, 90099, 113980, 115303, 96449, 101596, 83536, 7722, 28773, 65910, 22299, 84122, 18332, 60234, 33294, 95257, 35074, 32012, 114839]
[2024-12-02 20:13:34.700073] user = 6686 Cloud 287/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:13:34.706678] user = 6686 Local 287/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:13:34.791218] user = 6686 Local+ 287/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:13:37.475388] user = 6686 MPDA- 287/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 73478 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73478 AUC after training: 0.5
User 73478 does not improve AUC. Reverting changes.
Training on augumented user 103969 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103969 AUC after training: 0.5
User 103969 does not improve AUC. Reverting changes.
Training on augumented user 26169 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26169 AUC after training: 0.5
User 26169 does not improve AUC. Reverting changes.
Training on augumented user 5479 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5479 AUC after training: 0.5
User 5479 does not improve AUC. Reverting changes.
Training on augumented user 75987 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75987 AUC after training: 0.5
User 75987 does not improve AUC. Reverting changes.
Training on augumented user 100840 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100840 AUC after training: 0.5
User 100840 does not improve AUC. Reverting changes.
Training on augumented user 45893 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45893 AUC after training: 0.5
User 45893 does not improve AUC. Reverting changes.
Training on augumented user 18035 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18035 AUC after training: 0.5
User 18035 does not improve AUC. Reverting changes.
Training on augumented user 47587 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47587 AUC after training: 0.5
User 47587 does not improve AUC. Reverting changes.
Training on augumented user 32464 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32464 AUC after training: 0.5
User 32464 does not improve AUC. Reverting changes.
Training on augumented user 59859 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59859 AUC after training: 0.5
User 59859 does not improve AUC. Reverting changes.
Training on augumented user 5969 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5969 AUC after training: 0.5
User 5969 does not improve AUC. Reverting changes.
Training on augumented user 19263 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19263 AUC after training: 0.5
User 19263 does not improve AUC. Reverting changes.
Training on augumented user 109149 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109149 AUC after training: 0.5
User 109149 does not improve AUC. Reverting changes.
Training on augumented user 67505 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67505 AUC after training: 0.5
User 67505 does not improve AUC. Reverting changes.
Training on augumented user 118918 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118918 AUC after training: 0.5
User 118918 does not improve AUC. Reverting changes.
Training on augumented user 63548 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63548 AUC after training: 0.5
User 63548 does not improve AUC. Reverting changes.
Training on augumented user 111086 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111086 AUC after training: 0.5
User 111086 does not improve AUC. Reverting changes.
Training on augumented user 59934 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59934 AUC after training: 0.5
User 59934 does not improve AUC. Reverting changes.
Training on augumented user 88478 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88478 AUC after training: 0.5
User 88478 does not improve AUC. Reverting changes.
Training on augumented user 106452 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106452 AUC after training: 0.5
User 106452 does not improve AUC. Reverting changes.
Training on augumented user 126464 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126464 AUC after training: 0.5
User 126464 does not improve AUC. Reverting changes.
Training on augumented user 36643 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36643 AUC after training: 0.5
User 36643 does not improve AUC. Reverting changes.
Training on augumented user 29037 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29037 AUC after training: 0.5
User 29037 does not improve AUC. Reverting changes.
Training on augumented user 120778 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120778 AUC after training: 0.5
User 120778 does not improve AUC. Reverting changes.
Training on augumented user 55716 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55716 AUC after training: 0.5
User 55716 does not improve AUC. Reverting changes.
Training on augumented user 127067 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127067 AUC after training: 0.5
User 127067 does not improve AUC. Reverting changes.
Training on augumented user 42829 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42829 AUC after training: 0.5
User 42829 does not improve AUC. Reverting changes.
Training on augumented user 89752 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89752 AUC after training: 0.5
User 89752 does not improve AUC. Reverting changes.
Training on augumented user 116930 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116930 AUC after training: 0.5
User 116930 does not improve AUC. Reverting changes.
Training on augumented user 108383 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108383 AUC after training: 0.5
User 108383 does not improve AUC. Reverting changes.
Training on augumented user 32111 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32111 AUC after training: 0.5
User 32111 does not improve AUC. Reverting changes.
Training on augumented user 90099 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90099 AUC after training: 0.5
User 90099 does not improve AUC. Reverting changes.
Training on augumented user 113980 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113980 AUC after training: 0.5
User 113980 does not improve AUC. Reverting changes.
Training on augumented user 115303 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115303 AUC after training: 0.5
User 115303 does not improve AUC. Reverting changes.
Training on augumented user 96449 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96449 AUC after training: 0.5
User 96449 does not improve AUC. Reverting changes.
Training on augumented user 101596 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101596 AUC after training: 0.5
User 101596 does not improve AUC. Reverting changes.
Training on augumented user 83536 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83536 AUC after training: 0.5
User 83536 does not improve AUC. Reverting changes.
Training on augumented user 7722 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7722 AUC after training: 0.5
User 7722 does not improve AUC. Reverting changes.
Training on augumented user 28773 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28773 AUC after training: 0.5
User 28773 does not improve AUC. Reverting changes.
Training on augumented user 65910 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65910 AUC after training: 0.5
User 65910 does not improve AUC. Reverting changes.
Training on augumented user 22299 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22299 AUC after training: 0.5
User 22299 does not improve AUC. Reverting changes.
Training on augumented user 84122 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84122 AUC after training: 0.5
User 84122 does not improve AUC. Reverting changes.
Training on augumented user 18332 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18332 AUC after training: 0.5
User 18332 does not improve AUC. Reverting changes.
Training on augumented user 60234 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60234 AUC after training: 0.5
User 60234 does not improve AUC. Reverting changes.
Training on augumented user 33294 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33294 AUC after training: 0.5
User 33294 does not improve AUC. Reverting changes.
Training on augumented user 95257 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95257 AUC after training: 0.5
User 95257 does not improve AUC. Reverting changes.
Training on augumented user 35074 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35074 AUC after training: 0.5
User 35074 does not improve AUC. Reverting changes.
Training on augumented user 32012 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32012 AUC after training: 0.5
User 32012 does not improve AUC. Reverting changes.
Training on augumented user 114839 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114839 AUC after training: 0.5
User 114839 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:14:08.857031] start test user 6715 288/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:14:09.311297] start test user 6715 288/568 recall augumented users by random, augumented_users = [2177, 137566, 95047, 71898, 63805, 72514, 63956, 82213, 14985, 18211, 63742, 32973, 105391, 20949, 52961, 24096, 14221, 62291, 17594, 665, 85609, 104817, 62513, 26327, 106245, 84878, 1706, 128288, 30084, 88142, 100617, 14832, 77599, 15822, 18151, 74806, 75572, 27948, 96932, 30326, 111419, 60633, 9386, 15386, 17566, 70881, 39113, 17143, 122542, 138081]
[2024-12-02 20:14:09.326227] user = 6715 Cloud 288/568
[2024-12-02 20:14:09.340769] user = 6715 Local 288/568
[2024-12-02 20:14:09.398100] user = 6715 Local+ 288/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:14:12.194613] user = 6715 MPDA- 288/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6044444444444443
Training on augumented user 2177 0/50 current_auc = 0.6044444444444443
User 2177 AUC after training: 0.6057142857142856
User 2177 improves AUC. Keeping the model.
Training on augumented user 137566 1/50 current_auc = 0.6057142857142856
User 137566 AUC after training: 0.6038095238095238
User 137566 does not improve AUC. Reverting changes.
Training on augumented user 95047 2/50 current_auc = 0.6057142857142856
User 95047 AUC after training: 0.6025396825396825
User 95047 does not improve AUC. Reverting changes.
Training on augumented user 71898 3/50 current_auc = 0.6057142857142856
User 71898 AUC after training: 0.6076190476190476
User 71898 improves AUC. Keeping the model.
Training on augumented user 63805 4/50 current_auc = 0.6076190476190476
User 63805 AUC after training: 0.6019047619047619
User 63805 does not improve AUC. Reverting changes.
Training on augumented user 72514 5/50 current_auc = 0.6076190476190476
User 72514 AUC after training: 0.5993650793650794
User 72514 does not improve AUC. Reverting changes.
Training on augumented user 63956 6/50 current_auc = 0.6076190476190476
User 63956 AUC after training: 0.6057142857142856
User 63956 does not improve AUC. Reverting changes.
Training on augumented user 82213 7/50 current_auc = 0.6076190476190476
User 82213 AUC after training: 0.6076190476190476
User 82213 does not improve AUC. Reverting changes.
Training on augumented user 14985 8/50 current_auc = 0.6076190476190476
User 14985 AUC after training: 0.606984126984127
User 14985 does not improve AUC. Reverting changes.
Training on augumented user 18211 9/50 current_auc = 0.6076190476190476
User 18211 AUC after training: 0.606984126984127
User 18211 does not improve AUC. Reverting changes.
Training on augumented user 63742 10/50 current_auc = 0.6076190476190476
User 63742 AUC after training: 0.6095238095238096
User 63742 improves AUC. Keeping the model.
Training on augumented user 32973 11/50 current_auc = 0.6095238095238096
User 32973 AUC after training: 0.6057142857142858
User 32973 does not improve AUC. Reverting changes.
Training on augumented user 105391 12/50 current_auc = 0.6095238095238096
User 105391 AUC after training: 0.6076190476190476
User 105391 does not improve AUC. Reverting changes.
Training on augumented user 20949 13/50 current_auc = 0.6095238095238096
User 20949 AUC after training: 0.6114285714285714
User 20949 improves AUC. Keeping the model.
Training on augumented user 52961 14/50 current_auc = 0.6114285714285714
User 52961 AUC after training: 0.6101587301587302
User 52961 does not improve AUC. Reverting changes.
Training on augumented user 24096 15/50 current_auc = 0.6114285714285714
User 24096 AUC after training: 0.6082539682539683
User 24096 does not improve AUC. Reverting changes.
Training on augumented user 14221 16/50 current_auc = 0.6114285714285714
User 14221 AUC after training: 0.6120634920634921
User 14221 improves AUC. Keeping the model.
Training on augumented user 62291 17/50 current_auc = 0.6120634920634921
User 62291 AUC after training: 0.6126984126984127
User 62291 improves AUC. Keeping the model.
Training on augumented user 17594 18/50 current_auc = 0.6126984126984127
User 17594 AUC after training: 0.6120634920634921
User 17594 does not improve AUC. Reverting changes.
Training on augumented user 665 19/50 current_auc = 0.6126984126984127
User 665 AUC after training: 0.6146031746031746
User 665 improves AUC. Keeping the model.
Training on augumented user 85609 20/50 current_auc = 0.6146031746031746
User 85609 AUC after training: 0.6082539682539683
User 85609 does not improve AUC. Reverting changes.
Training on augumented user 104817 21/50 current_auc = 0.6146031746031746
User 104817 AUC after training: 0.6120634920634921
User 104817 does not improve AUC. Reverting changes.
Training on augumented user 62513 22/50 current_auc = 0.6146031746031746
User 62513 AUC after training: 0.6133333333333333
User 62513 does not improve AUC. Reverting changes.
Training on augumented user 26327 23/50 current_auc = 0.6146031746031746
User 26327 AUC after training: 0.6126984126984126
User 26327 does not improve AUC. Reverting changes.
Training on augumented user 106245 24/50 current_auc = 0.6146031746031746
User 106245 AUC after training: 0.6133333333333334
User 106245 does not improve AUC. Reverting changes.
Training on augumented user 84878 25/50 current_auc = 0.6146031746031746
User 84878 AUC after training: 0.6139682539682539
User 84878 does not improve AUC. Reverting changes.
Training on augumented user 1706 26/50 current_auc = 0.6146031746031746
User 1706 AUC after training: 0.6088888888888889
User 1706 does not improve AUC. Reverting changes.
Training on augumented user 128288 27/50 current_auc = 0.6146031746031746
User 128288 AUC after training: 0.6095238095238096
User 128288 does not improve AUC. Reverting changes.
Training on augumented user 30084 28/50 current_auc = 0.6146031746031746
User 30084 AUC after training: 0.6139682539682539
User 30084 does not improve AUC. Reverting changes.
Training on augumented user 88142 29/50 current_auc = 0.6146031746031746
User 88142 AUC after training: 0.6114285714285714
User 88142 does not improve AUC. Reverting changes.
Training on augumented user 100617 30/50 current_auc = 0.6146031746031746
User 100617 AUC after training: 0.6120634920634921
User 100617 does not improve AUC. Reverting changes.
Training on augumented user 14832 31/50 current_auc = 0.6146031746031746
User 14832 AUC after training: 0.6190476190476191
User 14832 improves AUC. Keeping the model.
Training on augumented user 77599 32/50 current_auc = 0.6190476190476191
User 77599 AUC after training: 0.6107936507936509
User 77599 does not improve AUC. Reverting changes.
Training on augumented user 15822 33/50 current_auc = 0.6190476190476191
User 15822 AUC after training: 0.6063492063492064
User 15822 does not improve AUC. Reverting changes.
Training on augumented user 18151 34/50 current_auc = 0.6190476190476191
User 18151 AUC after training: 0.6184126984126984
User 18151 does not improve AUC. Reverting changes.
Training on augumented user 74806 35/50 current_auc = 0.6190476190476191
User 74806 AUC after training: 0.6190476190476191
User 74806 does not improve AUC. Reverting changes.
Training on augumented user 75572 36/50 current_auc = 0.6190476190476191
User 75572 AUC after training: 0.6298412698412699
User 75572 improves AUC. Keeping the model.
Training on augumented user 27948 37/50 current_auc = 0.6298412698412699
User 27948 AUC after training: 0.6279365079365079
User 27948 does not improve AUC. Reverting changes.
Training on augumented user 96932 38/50 current_auc = 0.6298412698412699
User 96932 AUC after training: 0.6247619047619047
User 96932 does not improve AUC. Reverting changes.
Training on augumented user 30326 39/50 current_auc = 0.6298412698412699
User 30326 AUC after training: 0.6317460317460317
User 30326 improves AUC. Keeping the model.
Training on augumented user 111419 40/50 current_auc = 0.6317460317460317
User 111419 AUC after training: 0.6304761904761904
User 111419 does not improve AUC. Reverting changes.
Training on augumented user 60633 41/50 current_auc = 0.6317460317460317
User 60633 AUC after training: 0.6279365079365079
User 60633 does not improve AUC. Reverting changes.
Training on augumented user 9386 42/50 current_auc = 0.6317460317460317
User 9386 AUC after training: 0.6215873015873016
User 9386 does not improve AUC. Reverting changes.
Training on augumented user 15386 43/50 current_auc = 0.6317460317460317
User 15386 AUC after training: 0.6266666666666667
User 15386 does not improve AUC. Reverting changes.
Training on augumented user 17566 44/50 current_auc = 0.6317460317460317
User 17566 AUC after training: 0.6292063492063492
User 17566 does not improve AUC. Reverting changes.
Training on augumented user 70881 45/50 current_auc = 0.6317460317460317
User 70881 AUC after training: 0.6330158730158729
User 70881 improves AUC. Keeping the model.
Training on augumented user 39113 46/50 current_auc = 0.6330158730158729
User 39113 AUC after training: 0.6361904761904762
User 39113 improves AUC. Keeping the model.
Training on augumented user 17143 47/50 current_auc = 0.6361904761904762
User 17143 AUC after training: 0.6247619047619047
User 17143 does not improve AUC. Reverting changes.
Training on augumented user 122542 48/50 current_auc = 0.6361904761904762
User 122542 AUC after training: 0.6311111111111111
User 122542 does not improve AUC. Reverting changes.
Training on augumented user 138081 49/50 current_auc = 0.6361904761904762
User 138081 AUC after training: 0.6215873015873016
User 138081 does not improve AUC. Reverting changes.
[2024-12-02 20:14:41.983216] start test user 6719 289/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:14:42.577328] start test user 6719 289/568 recall augumented users by random, augumented_users = [107658, 28944, 132920, 55362, 137235, 386, 83093, 127037, 116416, 35972, 21614, 37277, 47366, 136534, 108024, 89433, 64624, 129038, 85120, 76808, 26432, 42019, 105427, 82894, 33992, 107172, 93450, 3501, 124199, 52398, 99500, 14495, 107775, 14200, 131099, 74733, 31825, 123783, 94027, 99724, 117555, 39144, 4139, 9738, 86085, 5811, 48825, 87510, 74736, 26610]
[2024-12-02 20:14:42.601982] user = 6719 Cloud 289/568
[2024-12-02 20:14:42.651037] user = 6719 Local 289/568
[2024-12-02 20:14:42.941670] user = 6719 Local+ 289/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:14:44.854634] user = 6719 MPDA- 289/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6671674077634899
Training on augumented user 107658 0/50 current_auc = 0.6671674077634899
User 107658 AUC after training: 0.6666866963105396
User 107658 does not improve AUC. Reverting changes.
Training on augumented user 28944 1/50 current_auc = 0.6671674077634899
User 28944 AUC after training: 0.6675880302848215
User 28944 improves AUC. Keeping the model.
Training on augumented user 132920 2/50 current_auc = 0.6675880302848215
User 132920 AUC after training: 0.6676481192164403
User 132920 improves AUC. Keeping the model.
Training on augumented user 55362 3/50 current_auc = 0.6676481192164403
User 55362 AUC after training: 0.6678283860112967
User 55362 improves AUC. Keeping the model.
Training on augumented user 137235 4/50 current_auc = 0.6678283860112967
User 137235 AUC after training: 0.6674678524215839
User 137235 does not improve AUC. Reverting changes.
Training on augumented user 386 5/50 current_auc = 0.6678283860112967
User 386 AUC after training: 0.668909986780435
User 386 improves AUC. Keeping the model.
Training on augumented user 83093 6/50 current_auc = 0.668909986780435
User 83093 AUC after training: 0.6691803869727195
User 83093 improves AUC. Keeping the model.
Training on augumented user 127037 7/50 current_auc = 0.6691803869727195
User 127037 AUC after training: 0.6688198533830069
User 127037 does not improve AUC. Reverting changes.
Training on augumented user 116416 8/50 current_auc = 0.6691803869727195
User 116416 AUC after training: 0.6705323879341425
User 116416 improves AUC. Keeping the model.
Training on augumented user 35972 9/50 current_auc = 0.6705323879341425
User 35972 AUC after training: 0.6700516764811921
User 35972 does not improve AUC. Reverting changes.
Training on augumented user 21614 10/50 current_auc = 0.6705323879341425
User 21614 AUC after training: 0.6696310539598606
User 21614 does not improve AUC. Reverting changes.
Training on augumented user 37277 11/50 current_auc = 0.6705323879341425
User 37277 AUC after training: 0.669510876096623
User 37277 does not improve AUC. Reverting changes.
Training on augumented user 47366 12/50 current_auc = 0.6705323879341425
User 47366 AUC after training: 0.6696310539598606
User 47366 does not improve AUC. Reverting changes.
Training on augumented user 136534 13/50 current_auc = 0.6705323879341425
User 136534 AUC after training: 0.6695108760966231
User 136534 does not improve AUC. Reverting changes.
Training on augumented user 108024 14/50 current_auc = 0.6705323879341425
User 108024 AUC after training: 0.6698714096863357
User 108024 does not improve AUC. Reverting changes.
Training on augumented user 89433 15/50 current_auc = 0.6705323879341425
User 89433 AUC after training: 0.6699915875495734
User 89433 does not improve AUC. Reverting changes.
Training on augumented user 64624 16/50 current_auc = 0.6705323879341425
User 64624 AUC after training: 0.6683691863958658
User 64624 does not improve AUC. Reverting changes.
Training on augumented user 129038 17/50 current_auc = 0.6705323879341425
User 129038 AUC after training: 0.6701117654128109
User 129038 does not improve AUC. Reverting changes.
Training on augumented user 85120 18/50 current_auc = 0.6705323879341425
User 85120 AUC after training: 0.6693306093017666
User 85120 does not improve AUC. Reverting changes.
Training on augumented user 76808 19/50 current_auc = 0.6705323879341425
User 76808 AUC after training: 0.6698714096863359
User 76808 does not improve AUC. Reverting changes.
Training on augumented user 26432 20/50 current_auc = 0.6705323879341425
User 26432 AUC after training: 0.6702319432760485
User 26432 does not improve AUC. Reverting changes.
Training on augumented user 42019 21/50 current_auc = 0.6705323879341425
User 42019 AUC after training: 0.6693906982333854
User 42019 does not improve AUC. Reverting changes.
Training on augumented user 105427 22/50 current_auc = 0.6705323879341425
User 105427 AUC after training: 0.6698714096863357
User 105427 does not improve AUC. Reverting changes.
Training on augumented user 82894 23/50 current_auc = 0.6705323879341425
User 82894 AUC after training: 0.6704722990025237
User 82894 does not improve AUC. Reverting changes.
Training on augumented user 33992 24/50 current_auc = 0.6705323879341425
User 33992 AUC after training: 0.6694507871650042
User 33992 does not improve AUC. Reverting changes.
Training on augumented user 107172 25/50 current_auc = 0.6705323879341425
User 107172 AUC after training: 0.6699314986179545
User 107172 does not improve AUC. Reverting changes.
Training on augumented user 93450 26/50 current_auc = 0.6705323879341425
User 93450 AUC after training: 0.6700516764811921
User 93450 does not improve AUC. Reverting changes.
Training on augumented user 3501 27/50 current_auc = 0.6705323879341425
User 3501 AUC after training: 0.6704122100709049
User 3501 does not improve AUC. Reverting changes.
Training on augumented user 124199 28/50 current_auc = 0.6705323879341425
User 124199 AUC after training: 0.6701718543444297
User 124199 does not improve AUC. Reverting changes.
Training on augumented user 52398 29/50 current_auc = 0.6705323879341425
User 52398 AUC after training: 0.6702920322076673
User 52398 does not improve AUC. Reverting changes.
Training on augumented user 99500 30/50 current_auc = 0.6705323879341425
User 99500 AUC after training: 0.6702319432760485
User 99500 does not improve AUC. Reverting changes.
Training on augumented user 14495 31/50 current_auc = 0.6705323879341425
User 14495 AUC after training: 0.6685794976565316
User 14495 does not improve AUC. Reverting changes.
Training on augumented user 107775 32/50 current_auc = 0.6705323879341425
User 107775 AUC after training: 0.6699915875495734
User 107775 does not improve AUC. Reverting changes.
Training on augumented user 14200 33/50 current_auc = 0.6705323879341425
User 14200 AUC after training: 0.6706525657973801
User 14200 improves AUC. Keeping the model.
Training on augumented user 131099 34/50 current_auc = 0.6706525657973801
User 131099 AUC after training: 0.6687898089171975
User 131099 does not improve AUC. Reverting changes.
Training on augumented user 74733 35/50 current_auc = 0.6706525657973801
User 74733 AUC after training: 0.6689700757120538
User 74733 does not improve AUC. Reverting changes.
Training on augumented user 31825 36/50 current_auc = 0.6706525657973801
User 31825 AUC after training: 0.6703521211392861
User 31825 does not improve AUC. Reverting changes.
Training on augumented user 123783 37/50 current_auc = 0.6706525657973801
User 123783 AUC after training: 0.6706525657973801
User 123783 does not improve AUC. Reverting changes.
Training on augumented user 94027 38/50 current_auc = 0.6706525657973801
User 94027 AUC after training: 0.6705924768657613
User 94027 does not improve AUC. Reverting changes.
Training on augumented user 99724 39/50 current_auc = 0.6706525657973801
User 99724 AUC after training: 0.6696911428914794
User 99724 does not improve AUC. Reverting changes.
Training on augumented user 117555 40/50 current_auc = 0.6706525657973801
User 117555 AUC after training: 0.6709530104554741
User 117555 improves AUC. Keeping the model.
Training on augumented user 39144 41/50 current_auc = 0.6709530104554741
User 39144 AUC after training: 0.6703521211392862
User 39144 does not improve AUC. Reverting changes.
Training on augumented user 4139 42/50 current_auc = 0.6709530104554741
User 4139 AUC after training: 0.6708328325922366
User 4139 does not improve AUC. Reverting changes.
Training on augumented user 9738 43/50 current_auc = 0.6709530104554741
User 9738 AUC after training: 0.6704122100709049
User 9738 does not improve AUC. Reverting changes.
Training on augumented user 86085 44/50 current_auc = 0.6709530104554741
User 86085 AUC after training: 0.6696911428914794
User 86085 does not improve AUC. Reverting changes.
Training on augumented user 5811 45/50 current_auc = 0.6709530104554741
User 5811 AUC after training: 0.6701117654128109
User 5811 does not improve AUC. Reverting changes.
Training on augumented user 48825 46/50 current_auc = 0.6709530104554741
User 48825 AUC after training: 0.6705924768657614
User 48825 does not improve AUC. Reverting changes.
Training on augumented user 87510 47/50 current_auc = 0.6709530104554741
User 87510 AUC after training: 0.6708328325922366
User 87510 does not improve AUC. Reverting changes.
Training on augumented user 74736 48/50 current_auc = 0.6709530104554741
User 74736 AUC after training: 0.6708328325922366
User 74736 does not improve AUC. Reverting changes.
Training on augumented user 26610 49/50 current_auc = 0.6709530104554741
User 26610 AUC after training: 0.6708328325922365
User 26610 does not improve AUC. Reverting changes.
[2024-12-02 20:15:16.046860] start test user 6720 290/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:15:16.881087] start test user 6720 290/568 recall augumented users by random, augumented_users = [56600, 93241, 40775, 83247, 936, 11003, 98323, 116054, 81731, 124338, 50248, 58522, 102081, 61102, 26274, 78520, 97173, 50537, 102177, 40359, 23568, 97242, 75505, 131466, 36628, 78298, 55788, 65891, 106841, 41763, 93887, 131734, 79297, 124963, 3108, 42401, 97945, 64345, 125959, 67489, 93272, 99922, 94216, 123581, 53705, 89187, 14028, 75886, 95200, 133056]
[2024-12-02 20:15:16.909099] user = 6720 Cloud 290/568
[2024-12-02 20:15:16.933081] user = 6720 Local 290/568
[2024-12-02 20:15:16.988793] user = 6720 Local+ 290/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:15:19.735472] user = 6720 MPDA- 290/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8368123505109807
Training on augumented user 56600 0/50 current_auc = 0.8368123505109807
User 56600 AUC after training: 0.8372472276581866
User 56600 improves AUC. Keeping the model.
Training on augumented user 93241 1/50 current_auc = 0.8372472276581866
User 93241 AUC after training: 0.837355946944988
User 93241 improves AUC. Keeping the model.
Training on augumented user 40775 2/50 current_auc = 0.837355946944988
User 40775 AUC after training: 0.836921069797782
User 40775 does not improve AUC. Reverting changes.
Training on augumented user 83247 3/50 current_auc = 0.837355946944988
User 83247 AUC after training: 0.8365949119373777
User 83247 does not improve AUC. Reverting changes.
Training on augumented user 936 4/50 current_auc = 0.837355946944988
User 936 AUC after training: 0.8370297890845836
User 936 does not improve AUC. Reverting changes.
Training on augumented user 11003 5/50 current_auc = 0.837355946944988
User 11003 AUC after training: 0.8372472276581866
User 11003 does not improve AUC. Reverting changes.
Training on augumented user 98323 6/50 current_auc = 0.837355946944988
User 98323 AUC after training: 0.8369210697977821
User 98323 does not improve AUC. Reverting changes.
Training on augumented user 116054 7/50 current_auc = 0.837355946944988
User 116054 AUC after training: 0.836921069797782
User 116054 does not improve AUC. Reverting changes.
Training on augumented user 81731 8/50 current_auc = 0.837355946944988
User 81731 AUC after training: 0.837355946944988
User 81731 does not improve AUC. Reverting changes.
Training on augumented user 124338 9/50 current_auc = 0.837355946944988
User 124338 AUC after training: 0.8370297890845837
User 124338 does not improve AUC. Reverting changes.
Training on augumented user 50248 10/50 current_auc = 0.837355946944988
User 50248 AUC after training: 0.837573385518591
User 50248 improves AUC. Keeping the model.
Training on augumented user 58522 11/50 current_auc = 0.837573385518591
User 58522 AUC after training: 0.8382257012393999
User 58522 improves AUC. Keeping the model.
Training on augumented user 102081 12/50 current_auc = 0.8382257012393999
User 102081 AUC after training: 0.8367036312241791
User 102081 does not improve AUC. Reverting changes.
Training on augumented user 61102 13/50 current_auc = 0.8382257012393999
User 61102 AUC after training: 0.8378995433789953
User 61102 does not improve AUC. Reverting changes.
Training on augumented user 26274 14/50 current_auc = 0.8382257012393999
User 26274 AUC after training: 0.8370297890845837
User 26274 does not improve AUC. Reverting changes.
Training on augumented user 78520 15/50 current_auc = 0.8382257012393999
User 78520 AUC after training: 0.8377908240921939
User 78520 does not improve AUC. Reverting changes.
Training on augumented user 97173 16/50 current_auc = 0.8382257012393999
User 97173 AUC after training: 0.8377908240921939
User 97173 does not improve AUC. Reverting changes.
Training on augumented user 50537 17/50 current_auc = 0.8382257012393999
User 50537 AUC after training: 0.8384431398130028
User 50537 improves AUC. Keeping the model.
Training on augumented user 102177 18/50 current_auc = 0.8384431398130028
User 102177 AUC after training: 0.8374646662317895
User 102177 does not improve AUC. Reverting changes.
Training on augumented user 40359 19/50 current_auc = 0.8384431398130028
User 40359 AUC after training: 0.837355946944988
User 40359 does not improve AUC. Reverting changes.
Training on augumented user 23568 20/50 current_auc = 0.8384431398130028
User 23568 AUC after training: 0.838008262665797
User 23568 does not improve AUC. Reverting changes.
Training on augumented user 97242 21/50 current_auc = 0.8384431398130028
User 97242 AUC after training: 0.838008262665797
User 97242 does not improve AUC. Reverting changes.
Training on augumented user 75505 22/50 current_auc = 0.8384431398130028
User 75505 AUC after training: 0.8382257012393999
User 75505 does not improve AUC. Reverting changes.
Training on augumented user 131466 23/50 current_auc = 0.8384431398130028
User 131466 AUC after training: 0.8365949119373777
User 131466 does not improve AUC. Reverting changes.
Training on augumented user 36628 24/50 current_auc = 0.8384431398130028
User 36628 AUC after training: 0.8376821048053924
User 36628 does not improve AUC. Reverting changes.
Training on augumented user 78298 25/50 current_auc = 0.8384431398130028
User 78298 AUC after training: 0.8384431398130028
User 78298 does not improve AUC. Reverting changes.
Training on augumented user 55788 26/50 current_auc = 0.8384431398130028
User 55788 AUC after training: 0.8377908240921939
User 55788 does not improve AUC. Reverting changes.
Training on augumented user 65891 27/50 current_auc = 0.8384431398130028
User 65891 AUC after training: 0.8363774733637748
User 65891 does not improve AUC. Reverting changes.
Training on augumented user 106841 28/50 current_auc = 0.8384431398130028
User 106841 AUC after training: 0.8386605783866058
User 106841 improves AUC. Keeping the model.
Training on augumented user 41763 29/50 current_auc = 0.8386605783866058
User 41763 AUC after training: 0.8378995433789955
User 41763 does not improve AUC. Reverting changes.
Training on augumented user 93887 30/50 current_auc = 0.8386605783866058
User 93887 AUC after training: 0.8382257012393999
User 93887 does not improve AUC. Reverting changes.
Training on augumented user 131734 31/50 current_auc = 0.8386605783866058
User 131734 AUC after training: 0.8378995433789955
User 131734 does not improve AUC. Reverting changes.
Training on augumented user 79297 32/50 current_auc = 0.8386605783866058
User 79297 AUC after training: 0.8374646662317895
User 79297 does not improve AUC. Reverting changes.
Training on augumented user 124963 33/50 current_auc = 0.8386605783866058
User 124963 AUC after training: 0.8378995433789954
User 124963 does not improve AUC. Reverting changes.
Training on augumented user 3108 34/50 current_auc = 0.8386605783866058
User 3108 AUC after training: 0.8381169819525984
User 3108 does not improve AUC. Reverting changes.
Training on augumented user 42401 35/50 current_auc = 0.8386605783866058
User 42401 AUC after training: 0.838008262665797
User 42401 does not improve AUC. Reverting changes.
Training on augumented user 97945 36/50 current_auc = 0.8386605783866058
User 97945 AUC after training: 0.8384431398130028
User 97945 does not improve AUC. Reverting changes.
Training on augumented user 64345 37/50 current_auc = 0.8386605783866058
User 64345 AUC after training: 0.8386605783866058
User 64345 does not improve AUC. Reverting changes.
Training on augumented user 125959 38/50 current_auc = 0.8386605783866058
User 125959 AUC after training: 0.8371385083713851
User 125959 does not improve AUC. Reverting changes.
Training on augumented user 67489 39/50 current_auc = 0.8386605783866058
User 67489 AUC after training: 0.8384431398130028
User 67489 does not improve AUC. Reverting changes.
Training on augumented user 93272 40/50 current_auc = 0.8386605783866058
User 93272 AUC after training: 0.8386605783866057
User 93272 does not improve AUC. Reverting changes.
Training on augumented user 99922 41/50 current_auc = 0.8386605783866058
User 99922 AUC after training: 0.8382257012393999
User 99922 does not improve AUC. Reverting changes.
Training on augumented user 94216 42/50 current_auc = 0.8386605783866058
User 94216 AUC after training: 0.8384431398130028
User 94216 does not improve AUC. Reverting changes.
Training on augumented user 123581 43/50 current_auc = 0.8386605783866058
User 123581 AUC after training: 0.8384431398130028
User 123581 does not improve AUC. Reverting changes.
Training on augumented user 53705 44/50 current_auc = 0.8386605783866058
User 53705 AUC after training: 0.837790824092194
User 53705 does not improve AUC. Reverting changes.
Training on augumented user 89187 45/50 current_auc = 0.8386605783866058
User 89187 AUC after training: 0.8382257012393999
User 89187 does not improve AUC. Reverting changes.
Training on augumented user 14028 46/50 current_auc = 0.8386605783866058
User 14028 AUC after training: 0.8383344205262013
User 14028 does not improve AUC. Reverting changes.
Training on augumented user 75886 47/50 current_auc = 0.8386605783866058
User 75886 AUC after training: 0.838008262665797
User 75886 does not improve AUC. Reverting changes.
Training on augumented user 95200 48/50 current_auc = 0.8386605783866058
User 95200 AUC after training: 0.8359425962165687
User 95200 does not improve AUC. Reverting changes.
Training on augumented user 133056 49/50 current_auc = 0.8386605783866058
User 133056 AUC after training: 0.8372472276581866
User 133056 does not improve AUC. Reverting changes.
[2024-12-02 20:15:48.232227] start test user 6727 291/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:15:48.673945] start test user 6727 291/568 recall augumented users by random, augumented_users = [97313, 59658, 40245, 82965, 6965, 114525, 127110, 45032, 81602, 84616, 43330, 104068, 17658, 121771, 112258, 4034, 57288, 29611, 8911, 48758, 3510, 83933, 137646, 110104, 107997, 1988, 29386, 132480, 113820, 37931, 81501, 74800, 15206, 24818, 78281, 132349, 107103, 127766, 96698, 54617, 56772, 84155, 3527, 10470, 87441, 132684, 45983, 82059, 6580, 43762]
[2024-12-02 20:15:48.688270] user = 6727 Cloud 291/568
[2024-12-02 20:15:48.697860] user = 6727 Local 291/568
[2024-12-02 20:15:48.754789] user = 6727 Local+ 291/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:15:50.951370] user = 6727 MPDA- 291/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7619047619047619
Training on augumented user 97313 0/50 current_auc = 0.7619047619047619
User 97313 AUC after training: 0.7619047619047619
User 97313 does not improve AUC. Reverting changes.
Training on augumented user 59658 1/50 current_auc = 0.7619047619047619
User 59658 AUC after training: 0.7619047619047619
User 59658 does not improve AUC. Reverting changes.
Training on augumented user 40245 2/50 current_auc = 0.7619047619047619
User 40245 AUC after training: 0.7619047619047619
User 40245 does not improve AUC. Reverting changes.
Training on augumented user 82965 3/50 current_auc = 0.7619047619047619
User 82965 AUC after training: 0.7619047619047619
User 82965 does not improve AUC. Reverting changes.
Training on augumented user 6965 4/50 current_auc = 0.7619047619047619
User 6965 AUC after training: 0.7619047619047619
User 6965 does not improve AUC. Reverting changes.
Training on augumented user 114525 5/50 current_auc = 0.7619047619047619
User 114525 AUC after training: 0.7619047619047619
User 114525 does not improve AUC. Reverting changes.
Training on augumented user 127110 6/50 current_auc = 0.7619047619047619
User 127110 AUC after training: 0.7619047619047619
User 127110 does not improve AUC. Reverting changes.
Training on augumented user 45032 7/50 current_auc = 0.7619047619047619
User 45032 AUC after training: 0.7619047619047619
User 45032 does not improve AUC. Reverting changes.
Training on augumented user 81602 8/50 current_auc = 0.7619047619047619
User 81602 AUC after training: 0.7619047619047619
User 81602 does not improve AUC. Reverting changes.
Training on augumented user 84616 9/50 current_auc = 0.7619047619047619
User 84616 AUC after training: 0.7619047619047619
User 84616 does not improve AUC. Reverting changes.
Training on augumented user 43330 10/50 current_auc = 0.7619047619047619
User 43330 AUC after training: 0.7619047619047619
User 43330 does not improve AUC. Reverting changes.
Training on augumented user 104068 11/50 current_auc = 0.7619047619047619
User 104068 AUC after training: 0.7619047619047619
User 104068 does not improve AUC. Reverting changes.
Training on augumented user 17658 12/50 current_auc = 0.7619047619047619
User 17658 AUC after training: 0.7619047619047619
User 17658 does not improve AUC. Reverting changes.
Training on augumented user 121771 13/50 current_auc = 0.7619047619047619
User 121771 AUC after training: 0.7619047619047619
User 121771 does not improve AUC. Reverting changes.
Training on augumented user 112258 14/50 current_auc = 0.7619047619047619
User 112258 AUC after training: 0.7619047619047619
User 112258 does not improve AUC. Reverting changes.
Training on augumented user 4034 15/50 current_auc = 0.7619047619047619
User 4034 AUC after training: 0.7619047619047619
User 4034 does not improve AUC. Reverting changes.
Training on augumented user 57288 16/50 current_auc = 0.7619047619047619
User 57288 AUC after training: 0.7619047619047619
User 57288 does not improve AUC. Reverting changes.
Training on augumented user 29611 17/50 current_auc = 0.7619047619047619
User 29611 AUC after training: 0.7619047619047619
User 29611 does not improve AUC. Reverting changes.
Training on augumented user 8911 18/50 current_auc = 0.7619047619047619
User 8911 AUC after training: 0.7619047619047619
User 8911 does not improve AUC. Reverting changes.
Training on augumented user 48758 19/50 current_auc = 0.7619047619047619
User 48758 AUC after training: 0.7619047619047619
User 48758 does not improve AUC. Reverting changes.
Training on augumented user 3510 20/50 current_auc = 0.7619047619047619
User 3510 AUC after training: 0.7619047619047619
User 3510 does not improve AUC. Reverting changes.
Training on augumented user 83933 21/50 current_auc = 0.7619047619047619
User 83933 AUC after training: 0.7619047619047619
User 83933 does not improve AUC. Reverting changes.
Training on augumented user 137646 22/50 current_auc = 0.7619047619047619
User 137646 AUC after training: 0.7619047619047619
User 137646 does not improve AUC. Reverting changes.
Training on augumented user 110104 23/50 current_auc = 0.7619047619047619
User 110104 AUC after training: 0.7619047619047619
User 110104 does not improve AUC. Reverting changes.
Training on augumented user 107997 24/50 current_auc = 0.7619047619047619
User 107997 AUC after training: 0.7619047619047619
User 107997 does not improve AUC. Reverting changes.
Training on augumented user 1988 25/50 current_auc = 0.7619047619047619
User 1988 AUC after training: 0.7619047619047619
User 1988 does not improve AUC. Reverting changes.
Training on augumented user 29386 26/50 current_auc = 0.7619047619047619
User 29386 AUC after training: 0.7619047619047619
User 29386 does not improve AUC. Reverting changes.
Training on augumented user 132480 27/50 current_auc = 0.7619047619047619
User 132480 AUC after training: 0.7619047619047619
User 132480 does not improve AUC. Reverting changes.
Training on augumented user 113820 28/50 current_auc = 0.7619047619047619
User 113820 AUC after training: 0.7619047619047619
User 113820 does not improve AUC. Reverting changes.
Training on augumented user 37931 29/50 current_auc = 0.7619047619047619
User 37931 AUC after training: 0.7619047619047619
User 37931 does not improve AUC. Reverting changes.
Training on augumented user 81501 30/50 current_auc = 0.7619047619047619
User 81501 AUC after training: 0.7619047619047619
User 81501 does not improve AUC. Reverting changes.
Training on augumented user 74800 31/50 current_auc = 0.7619047619047619
User 74800 AUC after training: 0.7619047619047619
User 74800 does not improve AUC. Reverting changes.
Training on augumented user 15206 32/50 current_auc = 0.7619047619047619
User 15206 AUC after training: 0.7619047619047619
User 15206 does not improve AUC. Reverting changes.
Training on augumented user 24818 33/50 current_auc = 0.7619047619047619
User 24818 AUC after training: 0.7619047619047619
User 24818 does not improve AUC. Reverting changes.
Training on augumented user 78281 34/50 current_auc = 0.7619047619047619
User 78281 AUC after training: 0.7619047619047619
User 78281 does not improve AUC. Reverting changes.
Training on augumented user 132349 35/50 current_auc = 0.7619047619047619
User 132349 AUC after training: 0.7619047619047619
User 132349 does not improve AUC. Reverting changes.
Training on augumented user 107103 36/50 current_auc = 0.7619047619047619
User 107103 AUC after training: 0.7619047619047619
User 107103 does not improve AUC. Reverting changes.
Training on augumented user 127766 37/50 current_auc = 0.7619047619047619
User 127766 AUC after training: 0.7619047619047619
User 127766 does not improve AUC. Reverting changes.
Training on augumented user 96698 38/50 current_auc = 0.7619047619047619
User 96698 AUC after training: 0.7619047619047619
User 96698 does not improve AUC. Reverting changes.
Training on augumented user 54617 39/50 current_auc = 0.7619047619047619
User 54617 AUC after training: 0.7619047619047619
User 54617 does not improve AUC. Reverting changes.
Training on augumented user 56772 40/50 current_auc = 0.7619047619047619
User 56772 AUC after training: 0.7619047619047619
User 56772 does not improve AUC. Reverting changes.
Training on augumented user 84155 41/50 current_auc = 0.7619047619047619
User 84155 AUC after training: 0.7619047619047619
User 84155 does not improve AUC. Reverting changes.
Training on augumented user 3527 42/50 current_auc = 0.7619047619047619
User 3527 AUC after training: 0.7619047619047619
User 3527 does not improve AUC. Reverting changes.
Training on augumented user 10470 43/50 current_auc = 0.7619047619047619
User 10470 AUC after training: 0.7619047619047619
User 10470 does not improve AUC. Reverting changes.
Training on augumented user 87441 44/50 current_auc = 0.7619047619047619
User 87441 AUC after training: 0.7619047619047619
User 87441 does not improve AUC. Reverting changes.
Training on augumented user 132684 45/50 current_auc = 0.7619047619047619
User 132684 AUC after training: 0.7619047619047619
User 132684 does not improve AUC. Reverting changes.
Training on augumented user 45983 46/50 current_auc = 0.7619047619047619
User 45983 AUC after training: 0.7619047619047619
User 45983 does not improve AUC. Reverting changes.
Training on augumented user 82059 47/50 current_auc = 0.7619047619047619
User 82059 AUC after training: 0.7619047619047619
User 82059 does not improve AUC. Reverting changes.
Training on augumented user 6580 48/50 current_auc = 0.7619047619047619
User 6580 AUC after training: 0.7619047619047619
User 6580 does not improve AUC. Reverting changes.
Training on augumented user 43762 49/50 current_auc = 0.7619047619047619
User 43762 AUC after training: 0.7619047619047619
User 43762 does not improve AUC. Reverting changes.
[2024-12-02 20:16:17.066472] start test user 6778 292/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:16:17.744221] start test user 6778 292/568 recall augumented users by random, augumented_users = [98035, 32456, 104465, 120160, 40318, 126580, 32025, 123550, 126773, 105564, 86954, 64970, 102171, 109934, 51530, 62343, 98214, 108526, 52096, 4963, 8553, 51293, 12490, 125452, 40050, 99961, 76205, 44643, 136781, 95693, 47904, 137966, 57536, 7655, 8828, 41854, 32960, 43038, 3719, 133605, 82066, 40114, 61748, 36682, 36651, 97466, 55724, 126574, 45991, 33015]
[2024-12-02 20:16:17.783554] user = 6778 Cloud 292/568
[2024-12-02 20:16:17.810670] user = 6778 Local 292/568
[2024-12-02 20:16:17.880026] user = 6778 Local+ 292/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:16:19.747686] user = 6778 MPDA- 292/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6322150072150071
Training on augumented user 98035 0/50 current_auc = 0.6322150072150071
User 98035 AUC after training: 0.6318542568542568
User 98035 does not improve AUC. Reverting changes.
Training on augumented user 32456 1/50 current_auc = 0.6322150072150071
User 32456 AUC after training: 0.6322150072150072
User 32456 improves AUC. Keeping the model.
Training on augumented user 104465 2/50 current_auc = 0.6322150072150072
User 104465 AUC after training: 0.6320346320346321
User 104465 does not improve AUC. Reverting changes.
Training on augumented user 120160 3/50 current_auc = 0.6322150072150072
User 120160 AUC after training: 0.6320346320346321
User 120160 does not improve AUC. Reverting changes.
Training on augumented user 40318 4/50 current_auc = 0.6322150072150072
User 40318 AUC after training: 0.6316738816738817
User 40318 does not improve AUC. Reverting changes.
Training on augumented user 126580 5/50 current_auc = 0.6322150072150072
User 126580 AUC after training: 0.6336580086580087
User 126580 improves AUC. Keeping the model.
Training on augumented user 32025 6/50 current_auc = 0.6336580086580087
User 32025 AUC after training: 0.6361832611832612
User 32025 improves AUC. Keeping the model.
Training on augumented user 123550 7/50 current_auc = 0.6361832611832612
User 123550 AUC after training: 0.636904761904762
User 123550 improves AUC. Keeping the model.
Training on augumented user 126773 8/50 current_auc = 0.636904761904762
User 126773 AUC after training: 0.637987012987013
User 126773 improves AUC. Keeping the model.
Training on augumented user 105564 9/50 current_auc = 0.637987012987013
User 105564 AUC after training: 0.637987012987013
User 105564 does not improve AUC. Reverting changes.
Training on augumented user 86954 10/50 current_auc = 0.637987012987013
User 86954 AUC after training: 0.6383477633477633
User 86954 improves AUC. Keeping the model.
Training on augumented user 64970 11/50 current_auc = 0.6383477633477633
User 64970 AUC after training: 0.6381673881673882
User 64970 does not improve AUC. Reverting changes.
Training on augumented user 102171 12/50 current_auc = 0.6383477633477633
User 102171 AUC after training: 0.637987012987013
User 102171 does not improve AUC. Reverting changes.
Training on augumented user 109934 13/50 current_auc = 0.6383477633477633
User 109934 AUC after training: 0.6392496392496392
User 109934 improves AUC. Keeping the model.
Training on augumented user 51530 14/50 current_auc = 0.6392496392496392
User 51530 AUC after training: 0.6401515151515151
User 51530 improves AUC. Keeping the model.
Training on augumented user 62343 15/50 current_auc = 0.6401515151515151
User 62343 AUC after training: 0.6383477633477634
User 62343 does not improve AUC. Reverting changes.
Training on augumented user 98214 16/50 current_auc = 0.6401515151515151
User 98214 AUC after training: 0.6392496392496393
User 98214 does not improve AUC. Reverting changes.
Training on augumented user 108526 17/50 current_auc = 0.6401515151515151
User 108526 AUC after training: 0.6396103896103896
User 108526 does not improve AUC. Reverting changes.
Training on augumented user 52096 18/50 current_auc = 0.6401515151515151
User 52096 AUC after training: 0.6374458874458875
User 52096 does not improve AUC. Reverting changes.
Training on augumented user 4963 19/50 current_auc = 0.6401515151515151
User 4963 AUC after training: 0.6397907647907648
User 4963 does not improve AUC. Reverting changes.
Training on augumented user 8553 20/50 current_auc = 0.6401515151515151
User 8553 AUC after training: 0.6372655122655122
User 8553 does not improve AUC. Reverting changes.
Training on augumented user 51293 21/50 current_auc = 0.6401515151515151
User 51293 AUC after training: 0.6385281385281385
User 51293 does not improve AUC. Reverting changes.
Training on augumented user 12490 22/50 current_auc = 0.6401515151515151
User 12490 AUC after training: 0.6201298701298702
User 12490 does not improve AUC. Reverting changes.
Training on augumented user 125452 23/50 current_auc = 0.6401515151515151
User 125452 AUC after training: 0.6392496392496392
User 125452 does not improve AUC. Reverting changes.
Training on augumented user 40050 24/50 current_auc = 0.6401515151515151
User 40050 AUC after training: 0.6396103896103896
User 40050 does not improve AUC. Reverting changes.
Training on augumented user 99961 25/50 current_auc = 0.6401515151515151
User 99961 AUC after training: 0.6390692640692641
User 99961 does not improve AUC. Reverting changes.
Training on augumented user 76205 26/50 current_auc = 0.6401515151515151
User 76205 AUC after training: 0.6385281385281386
User 76205 does not improve AUC. Reverting changes.
Training on augumented user 44643 27/50 current_auc = 0.6401515151515151
User 44643 AUC after training: 0.6381673881673882
User 44643 does not improve AUC. Reverting changes.
Training on augumented user 136781 28/50 current_auc = 0.6401515151515151
User 136781 AUC after training: 0.6392496392496393
User 136781 does not improve AUC. Reverting changes.
Training on augumented user 95693 29/50 current_auc = 0.6401515151515151
User 95693 AUC after training: 0.6388888888888888
User 95693 does not improve AUC. Reverting changes.
Training on augumented user 47904 30/50 current_auc = 0.6401515151515151
User 47904 AUC after training: 0.6367243867243867
User 47904 does not improve AUC. Reverting changes.
Training on augumented user 137966 31/50 current_auc = 0.6401515151515151
User 137966 AUC after training: 0.6392496392496393
User 137966 does not improve AUC. Reverting changes.
Training on augumented user 57536 32/50 current_auc = 0.6401515151515151
User 57536 AUC after training: 0.6354617604617604
User 57536 does not improve AUC. Reverting changes.
Training on augumented user 7655 33/50 current_auc = 0.6401515151515151
User 7655 AUC after training: 0.6403318903318904
User 7655 improves AUC. Keeping the model.
Training on augumented user 8828 34/50 current_auc = 0.6403318903318904
User 8828 AUC after training: 0.6435786435786436
User 8828 improves AUC. Keeping the model.
Training on augumented user 41854 35/50 current_auc = 0.6435786435786436
User 41854 AUC after training: 0.6443001443001444
User 41854 improves AUC. Keeping the model.
Training on augumented user 32960 36/50 current_auc = 0.6443001443001444
User 32960 AUC after training: 0.6435786435786436
User 32960 does not improve AUC. Reverting changes.
Training on augumented user 43038 37/50 current_auc = 0.6443001443001444
User 43038 AUC after training: 0.643939393939394
User 43038 does not improve AUC. Reverting changes.
Training on augumented user 3719 38/50 current_auc = 0.6443001443001444
User 3719 AUC after training: 0.643939393939394
User 3719 does not improve AUC. Reverting changes.
Training on augumented user 133605 39/50 current_auc = 0.6443001443001444
User 133605 AUC after training: 0.6452020202020203
User 133605 improves AUC. Keeping the model.
Training on augumented user 82066 40/50 current_auc = 0.6452020202020203
User 82066 AUC after training: 0.6430375180375181
User 82066 does not improve AUC. Reverting changes.
Training on augumented user 40114 41/50 current_auc = 0.6452020202020203
User 40114 AUC after training: 0.6448412698412699
User 40114 does not improve AUC. Reverting changes.
Training on augumented user 61748 42/50 current_auc = 0.6452020202020203
User 61748 AUC after training: 0.6437590187590188
User 61748 does not improve AUC. Reverting changes.
Training on augumented user 36682 43/50 current_auc = 0.6452020202020203
User 36682 AUC after training: 0.6414141414141413
User 36682 does not improve AUC. Reverting changes.
Training on augumented user 36651 44/50 current_auc = 0.6452020202020203
User 36651 AUC after training: 0.6432178932178934
User 36651 does not improve AUC. Reverting changes.
Training on augumented user 97466 45/50 current_auc = 0.6452020202020203
User 97466 AUC after training: 0.6455627705627707
User 97466 improves AUC. Keeping the model.
Training on augumented user 55724 46/50 current_auc = 0.6455627705627707
User 55724 AUC after training: 0.6459235209235209
User 55724 improves AUC. Keeping the model.
Training on augumented user 126574 47/50 current_auc = 0.6459235209235209
User 126574 AUC after training: 0.6452020202020203
User 126574 does not improve AUC. Reverting changes.
Training on augumented user 45991 48/50 current_auc = 0.6459235209235209
User 45991 AUC after training: 0.6488095238095238
User 45991 improves AUC. Keeping the model.
Training on augumented user 33015 49/50 current_auc = 0.6488095238095238
User 33015 AUC after training: 0.649891774891775
User 33015 improves AUC. Keeping the model.
[2024-12-02 20:16:43.865023] start test user 6793 293/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:16:44.680898] start test user 6793 293/568 recall augumented users by random, augumented_users = [104530, 96691, 30712, 114147, 27547, 88151, 135689, 3931, 33202, 2861, 128104, 130858, 97557, 133949, 32622, 84058, 21195, 111555, 45720, 95200, 110549, 70876, 95375, 45110, 102081, 94771, 52081, 69592, 37033, 14600, 64830, 96129, 64198, 5140, 99905, 74134, 87866, 111106, 55746, 1875, 44938, 89702, 79069, 128670, 101187, 134178, 62439, 25440, 55512, 124710]
[2024-12-02 20:16:44.695417] user = 6793 Cloud 293/568
[2024-12-02 20:16:44.705134] user = 6793 Local 293/568
[2024-12-02 20:16:44.746502] user = 6793 Local+ 293/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:16:46.917146] user = 6793 MPDA- 293/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8461538461538463
Training on augumented user 104530 0/50 current_auc = 0.8461538461538463
User 104530 AUC after training: 0.8461538461538463
User 104530 does not improve AUC. Reverting changes.
Training on augumented user 96691 1/50 current_auc = 0.8461538461538463
User 96691 AUC after training: 0.8461538461538463
User 96691 does not improve AUC. Reverting changes.
Training on augumented user 30712 2/50 current_auc = 0.8461538461538463
User 30712 AUC after training: 0.8461538461538463
User 30712 does not improve AUC. Reverting changes.
Training on augumented user 114147 3/50 current_auc = 0.8461538461538463
User 114147 AUC after training: 0.8461538461538463
User 114147 does not improve AUC. Reverting changes.
Training on augumented user 27547 4/50 current_auc = 0.8461538461538463
User 27547 AUC after training: 0.8461538461538463
User 27547 does not improve AUC. Reverting changes.
Training on augumented user 88151 5/50 current_auc = 0.8461538461538463
User 88151 AUC after training: 0.8846153846153846
User 88151 improves AUC. Keeping the model.
Training on augumented user 135689 6/50 current_auc = 0.8846153846153846
User 135689 AUC after training: 0.8846153846153846
User 135689 does not improve AUC. Reverting changes.
Training on augumented user 3931 7/50 current_auc = 0.8846153846153846
User 3931 AUC after training: 0.8846153846153846
User 3931 does not improve AUC. Reverting changes.
Training on augumented user 33202 8/50 current_auc = 0.8846153846153846
User 33202 AUC after training: 0.8846153846153846
User 33202 does not improve AUC. Reverting changes.
Training on augumented user 2861 9/50 current_auc = 0.8846153846153846
User 2861 AUC after training: 0.8846153846153846
User 2861 does not improve AUC. Reverting changes.
Training on augumented user 128104 10/50 current_auc = 0.8846153846153846
User 128104 AUC after training: 0.8461538461538463
User 128104 does not improve AUC. Reverting changes.
Training on augumented user 130858 11/50 current_auc = 0.8846153846153846
User 130858 AUC after training: 0.8461538461538463
User 130858 does not improve AUC. Reverting changes.
Training on augumented user 97557 12/50 current_auc = 0.8846153846153846
User 97557 AUC after training: 0.8846153846153846
User 97557 does not improve AUC. Reverting changes.
Training on augumented user 133949 13/50 current_auc = 0.8846153846153846
User 133949 AUC after training: 0.8461538461538463
User 133949 does not improve AUC. Reverting changes.
Training on augumented user 32622 14/50 current_auc = 0.8846153846153846
User 32622 AUC after training: 0.8846153846153846
User 32622 does not improve AUC. Reverting changes.
Training on augumented user 84058 15/50 current_auc = 0.8846153846153846
User 84058 AUC after training: 0.8846153846153846
User 84058 does not improve AUC. Reverting changes.
Training on augumented user 21195 16/50 current_auc = 0.8846153846153846
User 21195 AUC after training: 0.8846153846153846
User 21195 does not improve AUC. Reverting changes.
Training on augumented user 111555 17/50 current_auc = 0.8846153846153846
User 111555 AUC after training: 0.8846153846153846
User 111555 does not improve AUC. Reverting changes.
Training on augumented user 45720 18/50 current_auc = 0.8846153846153846
User 45720 AUC after training: 0.8846153846153846
User 45720 does not improve AUC. Reverting changes.
Training on augumented user 95200 19/50 current_auc = 0.8846153846153846
User 95200 AUC after training: 0.8846153846153846
User 95200 does not improve AUC. Reverting changes.
Training on augumented user 110549 20/50 current_auc = 0.8846153846153846
User 110549 AUC after training: 0.8461538461538463
User 110549 does not improve AUC. Reverting changes.
Training on augumented user 70876 21/50 current_auc = 0.8846153846153846
User 70876 AUC after training: 0.8461538461538463
User 70876 does not improve AUC. Reverting changes.
Training on augumented user 95375 22/50 current_auc = 0.8846153846153846
User 95375 AUC after training: 0.8846153846153846
User 95375 does not improve AUC. Reverting changes.
Training on augumented user 45110 23/50 current_auc = 0.8846153846153846
User 45110 AUC after training: 0.8846153846153846
User 45110 does not improve AUC. Reverting changes.
Training on augumented user 102081 24/50 current_auc = 0.8846153846153846
User 102081 AUC after training: 0.8846153846153846
User 102081 does not improve AUC. Reverting changes.
Training on augumented user 94771 25/50 current_auc = 0.8846153846153846
User 94771 AUC after training: 0.8846153846153846
User 94771 does not improve AUC. Reverting changes.
Training on augumented user 52081 26/50 current_auc = 0.8846153846153846
User 52081 AUC after training: 0.8846153846153846
User 52081 does not improve AUC. Reverting changes.
Training on augumented user 69592 27/50 current_auc = 0.8846153846153846
User 69592 AUC after training: 0.8846153846153846
User 69592 does not improve AUC. Reverting changes.
Training on augumented user 37033 28/50 current_auc = 0.8846153846153846
User 37033 AUC after training: 0.8846153846153846
User 37033 does not improve AUC. Reverting changes.
Training on augumented user 14600 29/50 current_auc = 0.8846153846153846
User 14600 AUC after training: 0.8846153846153846
User 14600 does not improve AUC. Reverting changes.
Training on augumented user 64830 30/50 current_auc = 0.8846153846153846
User 64830 AUC after training: 0.8846153846153846
User 64830 does not improve AUC. Reverting changes.
Training on augumented user 96129 31/50 current_auc = 0.8846153846153846
User 96129 AUC after training: 0.8846153846153846
User 96129 does not improve AUC. Reverting changes.
Training on augumented user 64198 32/50 current_auc = 0.8846153846153846
User 64198 AUC after training: 0.8846153846153846
User 64198 does not improve AUC. Reverting changes.
Training on augumented user 5140 33/50 current_auc = 0.8846153846153846
User 5140 AUC after training: 0.8846153846153846
User 5140 does not improve AUC. Reverting changes.
Training on augumented user 99905 34/50 current_auc = 0.8846153846153846
User 99905 AUC after training: 0.8846153846153846
User 99905 does not improve AUC. Reverting changes.
Training on augumented user 74134 35/50 current_auc = 0.8846153846153846
User 74134 AUC after training: 0.8846153846153846
User 74134 does not improve AUC. Reverting changes.
Training on augumented user 87866 36/50 current_auc = 0.8846153846153846
User 87866 AUC after training: 0.8461538461538463
User 87866 does not improve AUC. Reverting changes.
Training on augumented user 111106 37/50 current_auc = 0.8846153846153846
User 111106 AUC after training: 0.8846153846153846
User 111106 does not improve AUC. Reverting changes.
Training on augumented user 55746 38/50 current_auc = 0.8846153846153846
User 55746 AUC after training: 0.8846153846153846
User 55746 does not improve AUC. Reverting changes.
Training on augumented user 1875 39/50 current_auc = 0.8846153846153846
User 1875 AUC after training: 0.8846153846153846
User 1875 does not improve AUC. Reverting changes.
Training on augumented user 44938 40/50 current_auc = 0.8846153846153846
User 44938 AUC after training: 0.8846153846153846
User 44938 does not improve AUC. Reverting changes.
Training on augumented user 89702 41/50 current_auc = 0.8846153846153846
User 89702 AUC after training: 0.8846153846153846
User 89702 does not improve AUC. Reverting changes.
Training on augumented user 79069 42/50 current_auc = 0.8846153846153846
User 79069 AUC after training: 0.8846153846153846
User 79069 does not improve AUC. Reverting changes.
Training on augumented user 128670 43/50 current_auc = 0.8846153846153846
User 128670 AUC after training: 0.8846153846153846
User 128670 does not improve AUC. Reverting changes.
Training on augumented user 101187 44/50 current_auc = 0.8846153846153846
User 101187 AUC after training: 0.8846153846153846
User 101187 does not improve AUC. Reverting changes.
Training on augumented user 134178 45/50 current_auc = 0.8846153846153846
User 134178 AUC after training: 0.8846153846153846
User 134178 does not improve AUC. Reverting changes.
Training on augumented user 62439 46/50 current_auc = 0.8846153846153846
User 62439 AUC after training: 0.8461538461538463
User 62439 does not improve AUC. Reverting changes.
Training on augumented user 25440 47/50 current_auc = 0.8846153846153846
User 25440 AUC after training: 0.8846153846153846
User 25440 does not improve AUC. Reverting changes.
Training on augumented user 55512 48/50 current_auc = 0.8846153846153846
User 55512 AUC after training: 0.8846153846153846
User 55512 does not improve AUC. Reverting changes.
Training on augumented user 124710 49/50 current_auc = 0.8846153846153846
User 124710 AUC after training: 0.8461538461538463
User 124710 does not improve AUC. Reverting changes.
[2024-12-02 20:17:15.808408] start test user 6799 294/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:17:16.248161] start test user 6799 294/568 recall augumented users by random, augumented_users = [114190, 3930, 38184, 115786, 92656, 105697, 6719, 79783, 61102, 32581, 129494, 59164, 73649, 88080, 91233, 114396, 38992, 79937, 124671, 105603, 104545, 20437, 55717, 70070, 42728, 10841, 76342, 16273, 9818, 44115, 112618, 120647, 135500, 54212, 87504, 99885, 103965, 121888, 52344, 119264, 138352, 85825, 85940, 4327, 74387, 122127, 73994, 26066, 101412, 135424]
[2024-12-02 20:17:16.262215] user = 6799 Cloud 294/568
[2024-12-02 20:17:16.271149] user = 6799 Local 294/568
[2024-12-02 20:17:16.290165] user = 6799 Local+ 294/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:17:18.103343] user = 6799 MPDA- 294/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 114190 0/50 current_auc = 1.0
User 114190 AUC after training: 1.0
User 114190 does not improve AUC. Reverting changes.
Training on augumented user 3930 1/50 current_auc = 1.0
User 3930 AUC after training: 1.0
User 3930 does not improve AUC. Reverting changes.
Training on augumented user 38184 2/50 current_auc = 1.0
User 38184 AUC after training: 1.0
User 38184 does not improve AUC. Reverting changes.
Training on augumented user 115786 3/50 current_auc = 1.0
User 115786 AUC after training: 1.0
User 115786 does not improve AUC. Reverting changes.
Training on augumented user 92656 4/50 current_auc = 1.0
User 92656 AUC after training: 1.0
User 92656 does not improve AUC. Reverting changes.
Training on augumented user 105697 5/50 current_auc = 1.0
User 105697 AUC after training: 1.0
User 105697 does not improve AUC. Reverting changes.
Training on augumented user 6719 6/50 current_auc = 1.0
User 6719 AUC after training: 1.0
User 6719 does not improve AUC. Reverting changes.
Training on augumented user 79783 7/50 current_auc = 1.0
User 79783 AUC after training: 1.0
User 79783 does not improve AUC. Reverting changes.
Training on augumented user 61102 8/50 current_auc = 1.0
User 61102 AUC after training: 1.0
User 61102 does not improve AUC. Reverting changes.
Training on augumented user 32581 9/50 current_auc = 1.0
User 32581 AUC after training: 1.0
User 32581 does not improve AUC. Reverting changes.
Training on augumented user 129494 10/50 current_auc = 1.0
User 129494 AUC after training: 1.0
User 129494 does not improve AUC. Reverting changes.
Training on augumented user 59164 11/50 current_auc = 1.0
User 59164 AUC after training: 1.0
User 59164 does not improve AUC. Reverting changes.
Training on augumented user 73649 12/50 current_auc = 1.0
User 73649 AUC after training: 1.0
User 73649 does not improve AUC. Reverting changes.
Training on augumented user 88080 13/50 current_auc = 1.0
User 88080 AUC after training: 1.0
User 88080 does not improve AUC. Reverting changes.
Training on augumented user 91233 14/50 current_auc = 1.0
User 91233 AUC after training: 1.0
User 91233 does not improve AUC. Reverting changes.
Training on augumented user 114396 15/50 current_auc = 1.0
User 114396 AUC after training: 1.0
User 114396 does not improve AUC. Reverting changes.
Training on augumented user 38992 16/50 current_auc = 1.0
User 38992 AUC after training: 1.0
User 38992 does not improve AUC. Reverting changes.
Training on augumented user 79937 17/50 current_auc = 1.0
User 79937 AUC after training: 1.0
User 79937 does not improve AUC. Reverting changes.
Training on augumented user 124671 18/50 current_auc = 1.0
User 124671 AUC after training: 1.0
User 124671 does not improve AUC. Reverting changes.
Training on augumented user 105603 19/50 current_auc = 1.0
User 105603 AUC after training: 1.0
User 105603 does not improve AUC. Reverting changes.
Training on augumented user 104545 20/50 current_auc = 1.0
User 104545 AUC after training: 1.0
User 104545 does not improve AUC. Reverting changes.
Training on augumented user 20437 21/50 current_auc = 1.0
User 20437 AUC after training: 1.0
User 20437 does not improve AUC. Reverting changes.
Training on augumented user 55717 22/50 current_auc = 1.0
User 55717 AUC after training: 1.0
User 55717 does not improve AUC. Reverting changes.
Training on augumented user 70070 23/50 current_auc = 1.0
User 70070 AUC after training: 1.0
User 70070 does not improve AUC. Reverting changes.
Training on augumented user 42728 24/50 current_auc = 1.0
User 42728 AUC after training: 1.0
User 42728 does not improve AUC. Reverting changes.
Training on augumented user 10841 25/50 current_auc = 1.0
User 10841 AUC after training: 1.0
User 10841 does not improve AUC. Reverting changes.
Training on augumented user 76342 26/50 current_auc = 1.0
User 76342 AUC after training: 1.0
User 76342 does not improve AUC. Reverting changes.
Training on augumented user 16273 27/50 current_auc = 1.0
User 16273 AUC after training: 1.0
User 16273 does not improve AUC. Reverting changes.
Training on augumented user 9818 28/50 current_auc = 1.0
User 9818 AUC after training: 1.0
User 9818 does not improve AUC. Reverting changes.
Training on augumented user 44115 29/50 current_auc = 1.0
User 44115 AUC after training: 1.0
User 44115 does not improve AUC. Reverting changes.
Training on augumented user 112618 30/50 current_auc = 1.0
User 112618 AUC after training: 1.0
User 112618 does not improve AUC. Reverting changes.
Training on augumented user 120647 31/50 current_auc = 1.0
User 120647 AUC after training: 1.0
User 120647 does not improve AUC. Reverting changes.
Training on augumented user 135500 32/50 current_auc = 1.0
User 135500 AUC after training: 1.0
User 135500 does not improve AUC. Reverting changes.
Training on augumented user 54212 33/50 current_auc = 1.0
User 54212 AUC after training: 1.0
User 54212 does not improve AUC. Reverting changes.
Training on augumented user 87504 34/50 current_auc = 1.0
User 87504 AUC after training: 1.0
User 87504 does not improve AUC. Reverting changes.
Training on augumented user 99885 35/50 current_auc = 1.0
User 99885 AUC after training: 1.0
User 99885 does not improve AUC. Reverting changes.
Training on augumented user 103965 36/50 current_auc = 1.0
User 103965 AUC after training: 1.0
User 103965 does not improve AUC. Reverting changes.
Training on augumented user 121888 37/50 current_auc = 1.0
User 121888 AUC after training: 1.0
User 121888 does not improve AUC. Reverting changes.
Training on augumented user 52344 38/50 current_auc = 1.0
User 52344 AUC after training: 1.0
User 52344 does not improve AUC. Reverting changes.
Training on augumented user 119264 39/50 current_auc = 1.0
User 119264 AUC after training: 1.0
User 119264 does not improve AUC. Reverting changes.
Training on augumented user 138352 40/50 current_auc = 1.0
User 138352 AUC after training: 1.0
User 138352 does not improve AUC. Reverting changes.
Training on augumented user 85825 41/50 current_auc = 1.0
User 85825 AUC after training: 1.0
User 85825 does not improve AUC. Reverting changes.
Training on augumented user 85940 42/50 current_auc = 1.0
User 85940 AUC after training: 1.0
User 85940 does not improve AUC. Reverting changes.
Training on augumented user 4327 43/50 current_auc = 1.0
User 4327 AUC after training: 1.0
User 4327 does not improve AUC. Reverting changes.
Training on augumented user 74387 44/50 current_auc = 1.0
User 74387 AUC after training: 1.0
User 74387 does not improve AUC. Reverting changes.
Training on augumented user 122127 45/50 current_auc = 1.0
User 122127 AUC after training: 1.0
User 122127 does not improve AUC. Reverting changes.
Training on augumented user 73994 46/50 current_auc = 1.0
User 73994 AUC after training: 1.0
User 73994 does not improve AUC. Reverting changes.
Training on augumented user 26066 47/50 current_auc = 1.0
User 26066 AUC after training: 1.0
User 26066 does not improve AUC. Reverting changes.
Training on augumented user 101412 48/50 current_auc = 1.0
User 101412 AUC after training: 1.0
User 101412 does not improve AUC. Reverting changes.
Training on augumented user 135424 49/50 current_auc = 1.0
User 135424 AUC after training: 1.0
User 135424 does not improve AUC. Reverting changes.
[2024-12-02 20:17:51.737966] start test user 6881 295/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:17:52.138155] start test user 6881 295/568 recall augumented users by random, augumented_users = [127732, 100854, 36223, 15932, 46542, 104075, 102751, 110671, 66606, 89911, 86711, 9933, 9173, 32099, 18957, 5456, 32806, 89735, 99807, 84334, 29216, 36027, 94007, 109078, 99438, 116955, 103515, 30755, 32744, 84608, 68134, 4765, 63863, 122644, 89125, 19339, 42298, 102177, 23680, 31391, 100048, 14415, 77886, 135999, 53329, 15137, 52643, 44577, 94273, 123541]
[2024-12-02 20:17:52.154239] user = 6881 Cloud 295/568
[2024-12-02 20:17:52.187293] user = 6881 Local 295/568
[2024-12-02 20:17:52.322854] user = 6881 Local+ 295/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:17:54.639203] user = 6881 MPDA- 295/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7540895427938618
Training on augumented user 127732 0/50 current_auc = 0.7540895427938618
User 127732 AUC after training: 0.7543110267362759
User 127732 improves AUC. Keeping the model.
Training on augumented user 100854 1/50 current_auc = 0.7543110267362759
User 100854 AUC after training: 0.7540262616674577
User 100854 does not improve AUC. Reverting changes.
Training on augumented user 36223 2/50 current_auc = 0.7543110267362759
User 36223 AUC after training: 0.7541528239202657
User 36223 does not improve AUC. Reverting changes.
Training on augumented user 15932 3/50 current_auc = 0.7543110267362759
User 15932 AUC after training: 0.7541844644834677
User 15932 does not improve AUC. Reverting changes.
Training on augumented user 46542 4/50 current_auc = 0.7543110267362759
User 46542 AUC after training: 0.7543743078626799
User 46542 improves AUC. Keeping the model.
Training on augumented user 104075 5/50 current_auc = 0.7543743078626799
User 104075 AUC after training: 0.754279386173074
User 104075 does not improve AUC. Reverting changes.
Training on augumented user 102751 6/50 current_auc = 0.7543743078626799
User 102751 AUC after training: 0.754247745609872
User 102751 does not improve AUC. Reverting changes.
Training on augumented user 110671 7/50 current_auc = 0.7543743078626799
User 110671 AUC after training: 0.7542477456098718
User 110671 does not improve AUC. Reverting changes.
Training on augumented user 66606 8/50 current_auc = 0.7543743078626799
User 66606 AUC after training: 0.7545008701154882
User 66606 improves AUC. Keeping the model.
Training on augumented user 89911 9/50 current_auc = 0.7545008701154882
User 89911 AUC after training: 0.7547223540579022
User 89911 improves AUC. Keeping the model.
Training on augumented user 86711 10/50 current_auc = 0.7547223540579022
User 86711 AUC after training: 0.754405948425882
User 86711 does not improve AUC. Reverting changes.
Training on augumented user 9933 11/50 current_auc = 0.7547223540579022
User 9933 AUC after training: 0.7547856351843062
User 9933 improves AUC. Keeping the model.
Training on augumented user 9173 12/50 current_auc = 0.7547856351843062
User 9173 AUC after training: 0.7539946211042556
User 9173 does not improve AUC. Reverting changes.
Training on augumented user 32099 13/50 current_auc = 0.7547856351843062
User 32099 AUC after training: 0.7545957918050942
User 32099 does not improve AUC. Reverting changes.
Training on augumented user 18957 14/50 current_auc = 0.7547856351843062
User 18957 AUC after training: 0.7548489163107104
User 18957 improves AUC. Keeping the model.
Training on augumented user 5456 15/50 current_auc = 0.7548489163107104
User 5456 AUC after training: 0.7547539946211042
User 5456 does not improve AUC. Reverting changes.
Training on augumented user 32806 16/50 current_auc = 0.7548489163107104
User 32806 AUC after training: 0.7542477456098718
User 32806 does not improve AUC. Reverting changes.
Training on augumented user 89735 17/50 current_auc = 0.7548489163107104
User 89735 AUC after training: 0.7549121974371145
User 89735 improves AUC. Keeping the model.
Training on augumented user 99807 18/50 current_auc = 0.7549121974371145
User 99807 AUC after training: 0.7544059484258819
User 99807 does not improve AUC. Reverting changes.
Training on augumented user 84334 19/50 current_auc = 0.7549121974371145
User 84334 AUC after training: 0.7546590729314983
User 84334 does not improve AUC. Reverting changes.
Training on augumented user 29216 20/50 current_auc = 0.7549121974371145
User 29216 AUC after training: 0.7563993039076097
User 29216 improves AUC. Keeping the model.
Training on augumented user 36027 21/50 current_auc = 0.7563993039076097
User 36027 AUC after training: 0.7565258661604177
User 36027 improves AUC. Keeping the model.
Training on augumented user 94007 22/50 current_auc = 0.7565258661604177
User 94007 AUC after training: 0.7563676633444075
User 94007 does not improve AUC. Reverting changes.
Training on augumented user 109078 23/50 current_auc = 0.7565258661604177
User 109078 AUC after training: 0.7566207878500238
User 109078 improves AUC. Keeping the model.
Training on augumented user 99438 24/50 current_auc = 0.7566207878500238
User 99438 AUC after training: 0.7567157095396299
User 99438 improves AUC. Keeping the model.
Training on augumented user 116955 25/50 current_auc = 0.7567157095396299
User 116955 AUC after training: 0.7564309444708116
User 116955 does not improve AUC. Reverting changes.
Training on augumented user 103515 26/50 current_auc = 0.7567157095396299
User 103515 AUC after training: 0.7573485208036704
User 103515 improves AUC. Keeping the model.
Training on augumented user 30755 27/50 current_auc = 0.7573485208036704
User 30755 AUC after training: 0.758107894320519
User 30755 improves AUC. Keeping the model.
Training on augumented user 32744 28/50 current_auc = 0.758107894320519
User 32744 AUC after training: 0.7580129726309127
User 32744 does not improve AUC. Reverting changes.
Training on augumented user 84608 29/50 current_auc = 0.758107894320519
User 84608 AUC after training: 0.7588989084005696
User 84608 improves AUC. Keeping the model.
Training on augumented user 68134 30/50 current_auc = 0.7588989084005696
User 68134 AUC after training: 0.7587407055845594
User 68134 does not improve AUC. Reverting changes.
Training on augumented user 4765 31/50 current_auc = 0.7588989084005696
User 4765 AUC after training: 0.7586457838949533
User 4765 does not improve AUC. Reverting changes.
Training on augumented user 63863 32/50 current_auc = 0.7588989084005696
User 63863 AUC after training: 0.7586141433317514
User 63863 does not improve AUC. Reverting changes.
Training on augumented user 122644 33/50 current_auc = 0.7588989084005696
User 122644 AUC after training: 0.7584242999525391
User 122644 does not improve AUC. Reverting changes.
Training on augumented user 89125 34/50 current_auc = 0.7588989084005696
User 89125 AUC after training: 0.7593102357221959
User 89125 improves AUC. Keeping the model.
Training on augumented user 19339 35/50 current_auc = 0.7593102357221959
User 19339 AUC after training: 0.7594051574118019
User 19339 improves AUC. Keeping the model.
Training on augumented user 42298 36/50 current_auc = 0.7594051574118019
User 42298 AUC after training: 0.7589305489637715
User 42298 does not improve AUC. Reverting changes.
Training on augumented user 102177 37/50 current_auc = 0.7594051574118019
User 102177 AUC after training: 0.7592785951589939
User 102177 does not improve AUC. Reverting changes.
Training on augumented user 23680 38/50 current_auc = 0.7594051574118019
User 23680 AUC after training: 0.7597532036070241
User 23680 improves AUC. Keeping the model.
Training on augumented user 31391 39/50 current_auc = 0.7597532036070241
User 31391 AUC after training: 0.759595000791014
User 31391 does not improve AUC. Reverting changes.
Training on augumented user 100048 40/50 current_auc = 0.7597532036070241
User 100048 AUC after training: 0.7597532036070243
User 100048 improves AUC. Keeping the model.
Training on augumented user 14415 41/50 current_auc = 0.7597532036070243
User 14415 AUC after training: 0.759595000791014
User 14415 does not improve AUC. Reverting changes.
Training on augumented user 77886 42/50 current_auc = 0.7597532036070243
User 77886 AUC after training: 0.7596899224806201
User 77886 does not improve AUC. Reverting changes.
Training on augumented user 135999 43/50 current_auc = 0.7597532036070243
User 135999 AUC after training: 0.75953171966461
User 135999 does not improve AUC. Reverting changes.
Training on augumented user 53329 44/50 current_auc = 0.7597532036070243
User 53329 AUC after training: 0.759341876285398
User 53329 does not improve AUC. Reverting changes.
Training on augumented user 15137 45/50 current_auc = 0.7597532036070243
User 15137 AUC after training: 0.7589621895269735
User 15137 does not improve AUC. Reverting changes.
Training on augumented user 52643 46/50 current_auc = 0.7597532036070243
User 52643 AUC after training: 0.7594051574118019
User 52643 does not improve AUC. Reverting changes.
Training on augumented user 44577 47/50 current_auc = 0.7597532036070243
User 44577 AUC after training: 0.7598481252966304
User 44577 improves AUC. Keeping the model.
Training on augumented user 94273 48/50 current_auc = 0.7598481252966304
User 94273 AUC after training: 0.7600696092390445
User 94273 improves AUC. Keeping the model.
Training on augumented user 123541 49/50 current_auc = 0.7600696092390445
User 123541 AUC after training: 0.7601961714918527
User 123541 improves AUC. Keeping the model.
[2024-12-02 20:18:25.544296] start test user 6976 296/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:18:26.069225] start test user 6976 296/568 recall augumented users by random, augumented_users = [23147, 91888, 107515, 35087, 39692, 97298, 928, 51330, 2913, 132809, 127504, 68669, 833, 126538, 78200, 93478, 30812, 127114, 78117, 43948, 107496, 98473, 136284, 124179, 117410, 5202, 41101, 125844, 40421, 8126, 101274, 67378, 66713, 114195, 110098, 138056, 52296, 29219, 46922, 132185, 92100, 52124, 31406, 67359, 119493, 83301, 93738, 123687, 42956, 124016]
[2024-12-02 20:18:26.085846] user = 6976 Cloud 296/568
[2024-12-02 20:18:26.105510] user = 6976 Local 296/568
[2024-12-02 20:18:26.456870] user = 6976 Local+ 296/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:18:29.479020] user = 6976 MPDA- 296/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.621007371007371
Training on augumented user 23147 0/50 current_auc = 0.621007371007371
User 23147 AUC after training: 0.6214168714168714
User 23147 improves AUC. Keeping the model.
Training on augumented user 91888 1/50 current_auc = 0.6214168714168714
User 91888 AUC after training: 0.6205978705978705
User 91888 does not improve AUC. Reverting changes.
Training on augumented user 107515 2/50 current_auc = 0.6214168714168714
User 107515 AUC after training: 0.6210073710073711
User 107515 does not improve AUC. Reverting changes.
Training on augumented user 35087 3/50 current_auc = 0.6214168714168714
User 35087 AUC after training: 0.6214168714168714
User 35087 does not improve AUC. Reverting changes.
Training on augumented user 39692 4/50 current_auc = 0.6214168714168714
User 39692 AUC after training: 0.621007371007371
User 39692 does not improve AUC. Reverting changes.
Training on augumented user 97298 5/50 current_auc = 0.6214168714168714
User 97298 AUC after training: 0.6212121212121212
User 97298 does not improve AUC. Reverting changes.
Training on augumented user 928 6/50 current_auc = 0.6214168714168714
User 928 AUC after training: 0.621007371007371
User 928 does not improve AUC. Reverting changes.
Training on augumented user 51330 7/50 current_auc = 0.6214168714168714
User 51330 AUC after training: 0.6208026208026207
User 51330 does not improve AUC. Reverting changes.
Training on augumented user 2913 8/50 current_auc = 0.6214168714168714
User 2913 AUC after training: 0.6218263718263718
User 2913 improves AUC. Keeping the model.
Training on augumented user 132809 9/50 current_auc = 0.6218263718263718
User 132809 AUC after training: 0.6214168714168714
User 132809 does not improve AUC. Reverting changes.
Training on augumented user 127504 10/50 current_auc = 0.6218263718263718
User 127504 AUC after training: 0.6212121212121211
User 127504 does not improve AUC. Reverting changes.
Training on augumented user 68669 11/50 current_auc = 0.6218263718263718
User 68669 AUC after training: 0.6218263718263719
User 68669 improves AUC. Keeping the model.
Training on augumented user 833 12/50 current_auc = 0.6218263718263719
User 833 AUC after training: 0.6212121212121211
User 833 does not improve AUC. Reverting changes.
Training on augumented user 126538 13/50 current_auc = 0.6218263718263719
User 126538 AUC after training: 0.6214168714168715
User 126538 does not improve AUC. Reverting changes.
Training on augumented user 78200 14/50 current_auc = 0.6218263718263719
User 78200 AUC after training: 0.622031122031122
User 78200 improves AUC. Keeping the model.
Training on augumented user 93478 15/50 current_auc = 0.622031122031122
User 93478 AUC after training: 0.621007371007371
User 93478 does not improve AUC. Reverting changes.
Training on augumented user 30812 16/50 current_auc = 0.622031122031122
User 30812 AUC after training: 0.6218263718263718
User 30812 does not improve AUC. Reverting changes.
Training on augumented user 127114 17/50 current_auc = 0.622031122031122
User 127114 AUC after training: 0.61998361998362
User 127114 does not improve AUC. Reverting changes.
Training on augumented user 78117 18/50 current_auc = 0.622031122031122
User 78117 AUC after training: 0.6218263718263719
User 78117 does not improve AUC. Reverting changes.
Training on augumented user 43948 19/50 current_auc = 0.622031122031122
User 43948 AUC after training: 0.6216216216216216
User 43948 does not improve AUC. Reverting changes.
Training on augumented user 107496 20/50 current_auc = 0.622031122031122
User 107496 AUC after training: 0.6218263718263718
User 107496 does not improve AUC. Reverting changes.
Training on augumented user 98473 21/50 current_auc = 0.622031122031122
User 98473 AUC after training: 0.6205978705978705
User 98473 does not improve AUC. Reverting changes.
Training on augumented user 136284 22/50 current_auc = 0.622031122031122
User 136284 AUC after training: 0.6216216216216216
User 136284 does not improve AUC. Reverting changes.
Training on augumented user 124179 23/50 current_auc = 0.622031122031122
User 124179 AUC after training: 0.6234643734643734
User 124179 improves AUC. Keeping the model.
Training on augumented user 117410 24/50 current_auc = 0.6234643734643734
User 117410 AUC after training: 0.6230548730548731
User 117410 does not improve AUC. Reverting changes.
Training on augumented user 5202 25/50 current_auc = 0.6234643734643734
User 5202 AUC after training: 0.6236691236691236
User 5202 improves AUC. Keeping the model.
Training on augumented user 41101 26/50 current_auc = 0.6236691236691236
User 41101 AUC after training: 0.6234643734643734
User 41101 does not improve AUC. Reverting changes.
Training on augumented user 125844 27/50 current_auc = 0.6236691236691236
User 125844 AUC after training: 0.6224406224406225
User 125844 does not improve AUC. Reverting changes.
Training on augumented user 40421 28/50 current_auc = 0.6236691236691236
User 40421 AUC after training: 0.6228501228501229
User 40421 does not improve AUC. Reverting changes.
Training on augumented user 8126 29/50 current_auc = 0.6236691236691236
User 8126 AUC after training: 0.6236691236691236
User 8126 does not improve AUC. Reverting changes.
Training on augumented user 101274 30/50 current_auc = 0.6236691236691236
User 101274 AUC after training: 0.6201883701883701
User 101274 does not improve AUC. Reverting changes.
Training on augumented user 67378 31/50 current_auc = 0.6236691236691236
User 67378 AUC after training: 0.6236691236691236
User 67378 does not improve AUC. Reverting changes.
Training on augumented user 66713 32/50 current_auc = 0.6236691236691236
User 66713 AUC after training: 0.6232596232596233
User 66713 does not improve AUC. Reverting changes.
Training on augumented user 114195 33/50 current_auc = 0.6236691236691236
User 114195 AUC after training: 0.6228501228501229
User 114195 does not improve AUC. Reverting changes.
Training on augumented user 110098 34/50 current_auc = 0.6236691236691236
User 110098 AUC after training: 0.6222358722358723
User 110098 does not improve AUC. Reverting changes.
Training on augumented user 138056 35/50 current_auc = 0.6236691236691236
User 138056 AUC after training: 0.6236691236691236
User 138056 does not improve AUC. Reverting changes.
Training on augumented user 52296 36/50 current_auc = 0.6236691236691236
User 52296 AUC after training: 0.6222358722358723
User 52296 does not improve AUC. Reverting changes.
Training on augumented user 29219 37/50 current_auc = 0.6236691236691236
User 29219 AUC after training: 0.6224406224406225
User 29219 does not improve AUC. Reverting changes.
Training on augumented user 46922 38/50 current_auc = 0.6236691236691236
User 46922 AUC after training: 0.6234643734643734
User 46922 does not improve AUC. Reverting changes.
Training on augumented user 132185 39/50 current_auc = 0.6236691236691236
User 132185 AUC after training: 0.6230548730548731
User 132185 does not improve AUC. Reverting changes.
Training on augumented user 92100 40/50 current_auc = 0.6236691236691236
User 92100 AUC after training: 0.6230548730548731
User 92100 does not improve AUC. Reverting changes.
Training on augumented user 52124 41/50 current_auc = 0.6236691236691236
User 52124 AUC after training: 0.6234643734643734
User 52124 does not improve AUC. Reverting changes.
Training on augumented user 31406 42/50 current_auc = 0.6236691236691236
User 31406 AUC after training: 0.6234643734643734
User 31406 does not improve AUC. Reverting changes.
Training on augumented user 67359 43/50 current_auc = 0.6236691236691236
User 67359 AUC after training: 0.6228501228501229
User 67359 does not improve AUC. Reverting changes.
Training on augumented user 119493 44/50 current_auc = 0.6236691236691236
User 119493 AUC after training: 0.624078624078624
User 119493 improves AUC. Keeping the model.
Training on augumented user 83301 45/50 current_auc = 0.624078624078624
User 83301 AUC after training: 0.6240786240786241
User 83301 improves AUC. Keeping the model.
Training on augumented user 93738 46/50 current_auc = 0.6240786240786241
User 93738 AUC after training: 0.6226453726453727
User 93738 does not improve AUC. Reverting changes.
Training on augumented user 123687 47/50 current_auc = 0.6240786240786241
User 123687 AUC after training: 0.6234643734643734
User 123687 does not improve AUC. Reverting changes.
Training on augumented user 42956 48/50 current_auc = 0.6240786240786241
User 42956 AUC after training: 0.6216216216216217
User 42956 does not improve AUC. Reverting changes.
Training on augumented user 124016 49/50 current_auc = 0.6240786240786241
User 124016 AUC after training: 0.6242833742833742
User 124016 improves AUC. Keeping the model.
[2024-12-02 20:19:00.100966] start test user 6986 297/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:19:00.500862] start test user 6986 297/568 recall augumented users by random, augumented_users = [24421, 15489, 126923, 39720, 136817, 53264, 131067, 55566, 130514, 37361, 100047, 8925, 97111, 108093, 108897, 96904, 103377, 12661, 6152, 27482, 21320, 87385, 83243, 59480, 5466, 107352, 57571, 3469, 35051, 17424, 33946, 112556, 1362, 23759, 29854, 25104, 87221, 40589, 10366, 47485, 55729, 21728, 70137, 32829, 48492, 103697, 47386, 74016, 20656, 116661]
[2024-12-02 20:19:00.515059] user = 6986 Cloud 297/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:19:00.522375] user = 6986 Local 297/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:19:00.542753] user = 6986 Local+ 297/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:19:02.516421] user = 6986 MPDA- 297/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 24421 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24421 AUC after training: 0.5
User 24421 does not improve AUC. Reverting changes.
Training on augumented user 15489 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15489 AUC after training: 0.5
User 15489 does not improve AUC. Reverting changes.
Training on augumented user 126923 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126923 AUC after training: 0.5
User 126923 does not improve AUC. Reverting changes.
Training on augumented user 39720 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39720 AUC after training: 0.5
User 39720 does not improve AUC. Reverting changes.
Training on augumented user 136817 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136817 AUC after training: 0.5
User 136817 does not improve AUC. Reverting changes.
Training on augumented user 53264 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53264 AUC after training: 0.5
User 53264 does not improve AUC. Reverting changes.
Training on augumented user 131067 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131067 AUC after training: 0.5
User 131067 does not improve AUC. Reverting changes.
Training on augumented user 55566 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55566 AUC after training: 0.5
User 55566 does not improve AUC. Reverting changes.
Training on augumented user 130514 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130514 AUC after training: 0.5
User 130514 does not improve AUC. Reverting changes.
Training on augumented user 37361 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37361 AUC after training: 0.5
User 37361 does not improve AUC. Reverting changes.
Training on augumented user 100047 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100047 AUC after training: 0.5
User 100047 does not improve AUC. Reverting changes.
Training on augumented user 8925 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8925 AUC after training: 0.5
User 8925 does not improve AUC. Reverting changes.
Training on augumented user 97111 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97111 AUC after training: 0.5
User 97111 does not improve AUC. Reverting changes.
Training on augumented user 108093 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108093 AUC after training: 0.5
User 108093 does not improve AUC. Reverting changes.
Training on augumented user 108897 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108897 AUC after training: 0.5
User 108897 does not improve AUC. Reverting changes.
Training on augumented user 96904 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96904 AUC after training: 0.5
User 96904 does not improve AUC. Reverting changes.
Training on augumented user 103377 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103377 AUC after training: 0.5
User 103377 does not improve AUC. Reverting changes.
Training on augumented user 12661 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12661 AUC after training: 0.5
User 12661 does not improve AUC. Reverting changes.
Training on augumented user 6152 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6152 AUC after training: 0.5
User 6152 does not improve AUC. Reverting changes.
Training on augumented user 27482 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27482 AUC after training: 0.5
User 27482 does not improve AUC. Reverting changes.
Training on augumented user 21320 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21320 AUC after training: 0.5
User 21320 does not improve AUC. Reverting changes.
Training on augumented user 87385 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87385 AUC after training: 0.5
User 87385 does not improve AUC. Reverting changes.
Training on augumented user 83243 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83243 AUC after training: 0.5
User 83243 does not improve AUC. Reverting changes.
Training on augumented user 59480 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59480 AUC after training: 0.5
User 59480 does not improve AUC. Reverting changes.
Training on augumented user 5466 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5466 AUC after training: 0.5
User 5466 does not improve AUC. Reverting changes.
Training on augumented user 107352 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107352 AUC after training: 0.5
User 107352 does not improve AUC. Reverting changes.
Training on augumented user 57571 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57571 AUC after training: 0.5
User 57571 does not improve AUC. Reverting changes.
Training on augumented user 3469 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3469 AUC after training: 0.5
User 3469 does not improve AUC. Reverting changes.
Training on augumented user 35051 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35051 AUC after training: 0.5
User 35051 does not improve AUC. Reverting changes.
Training on augumented user 17424 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17424 AUC after training: 0.5
User 17424 does not improve AUC. Reverting changes.
Training on augumented user 33946 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33946 AUC after training: 0.5
User 33946 does not improve AUC. Reverting changes.
Training on augumented user 112556 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112556 AUC after training: 0.5
User 112556 does not improve AUC. Reverting changes.
Training on augumented user 1362 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1362 AUC after training: 0.5
User 1362 does not improve AUC. Reverting changes.
Training on augumented user 23759 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23759 AUC after training: 0.5
User 23759 does not improve AUC. Reverting changes.
Training on augumented user 29854 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29854 AUC after training: 0.5
User 29854 does not improve AUC. Reverting changes.
Training on augumented user 25104 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25104 AUC after training: 0.5
User 25104 does not improve AUC. Reverting changes.
Training on augumented user 87221 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87221 AUC after training: 0.5
User 87221 does not improve AUC. Reverting changes.
Training on augumented user 40589 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40589 AUC after training: 0.5
User 40589 does not improve AUC. Reverting changes.
Training on augumented user 10366 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10366 AUC after training: 0.5
User 10366 does not improve AUC. Reverting changes.
Training on augumented user 47485 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47485 AUC after training: 0.5
User 47485 does not improve AUC. Reverting changes.
Training on augumented user 55729 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55729 AUC after training: 0.5
User 55729 does not improve AUC. Reverting changes.
Training on augumented user 21728 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21728 AUC after training: 0.5
User 21728 does not improve AUC. Reverting changes.
Training on augumented user 70137 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70137 AUC after training: 0.5
User 70137 does not improve AUC. Reverting changes.
Training on augumented user 32829 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32829 AUC after training: 0.5
User 32829 does not improve AUC. Reverting changes.
Training on augumented user 48492 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48492 AUC after training: 0.5
User 48492 does not improve AUC. Reverting changes.
Training on augumented user 103697 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103697 AUC after training: 0.5
User 103697 does not improve AUC. Reverting changes.
Training on augumented user 47386 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47386 AUC after training: 0.5
User 47386 does not improve AUC. Reverting changes.
Training on augumented user 74016 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74016 AUC after training: 0.5
User 74016 does not improve AUC. Reverting changes.
Training on augumented user 20656 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20656 AUC after training: 0.5
User 20656 does not improve AUC. Reverting changes.
Training on augumented user 116661 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116661 AUC after training: 0.5
User 116661 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:19:31.280857] start test user 7022 298/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:19:31.714312] start test user 7022 298/568 recall augumented users by random, augumented_users = [73391, 96947, 90697, 107053, 100665, 28598, 7345, 3555, 137549, 82011, 40258, 51311, 77303, 13094, 2598, 40804, 44233, 119196, 29868, 20766, 88985, 137794, 25688, 106234, 116294, 83621, 26660, 8171, 47627, 91609, 7406, 67282, 117786, 81924, 57672, 112482, 31437, 70019, 134834, 14031, 132010, 25735, 24601, 6644, 116601, 51466, 20995, 20690, 53011, 7072]
[2024-12-02 20:19:31.731380] user = 7022 Cloud 298/568
[2024-12-02 20:19:31.772357] user = 7022 Local 298/568
[2024-12-02 20:19:31.874373] user = 7022 Local+ 298/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:19:33.847041] user = 7022 MPDA- 298/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5032808398950132
Training on augumented user 73391 0/50 current_auc = 0.5032808398950132
User 73391 AUC after training: 0.5039370078740157
User 73391 improves AUC. Keeping the model.
Training on augumented user 96947 1/50 current_auc = 0.5039370078740157
User 96947 AUC after training: 0.5032808398950132
User 96947 does not improve AUC. Reverting changes.
Training on augumented user 90697 2/50 current_auc = 0.5039370078740157
User 90697 AUC after training: 0.5029527559055118
User 90697 does not improve AUC. Reverting changes.
Training on augumented user 107053 3/50 current_auc = 0.5039370078740157
User 107053 AUC after training: 0.5049212598425197
User 107053 improves AUC. Keeping the model.
Training on augumented user 100665 4/50 current_auc = 0.5049212598425197
User 100665 AUC after training: 0.5049212598425197
User 100665 does not improve AUC. Reverting changes.
Training on augumented user 28598 5/50 current_auc = 0.5049212598425197
User 28598 AUC after training: 0.5055774278215224
User 28598 improves AUC. Keeping the model.
Training on augumented user 7345 6/50 current_auc = 0.5055774278215224
User 7345 AUC after training: 0.5055774278215224
User 7345 does not improve AUC. Reverting changes.
Training on augumented user 3555 7/50 current_auc = 0.5055774278215224
User 3555 AUC after training: 0.5049212598425197
User 3555 does not improve AUC. Reverting changes.
Training on augumented user 137549 8/50 current_auc = 0.5055774278215224
User 137549 AUC after training: 0.506233595800525
User 137549 improves AUC. Keeping the model.
Training on augumented user 82011 9/50 current_auc = 0.506233595800525
User 82011 AUC after training: 0.5065616797900263
User 82011 improves AUC. Keeping the model.
Training on augumented user 40258 10/50 current_auc = 0.5065616797900263
User 40258 AUC after training: 0.506233595800525
User 40258 does not improve AUC. Reverting changes.
Training on augumented user 51311 11/50 current_auc = 0.5065616797900263
User 51311 AUC after training: 0.5022965879265092
User 51311 does not improve AUC. Reverting changes.
Training on augumented user 77303 12/50 current_auc = 0.5065616797900263
User 77303 AUC after training: 0.5068897637795275
User 77303 improves AUC. Keeping the model.
Training on augumented user 13094 13/50 current_auc = 0.5068897637795275
User 13094 AUC after training: 0.5049212598425197
User 13094 does not improve AUC. Reverting changes.
Training on augumented user 2598 14/50 current_auc = 0.5068897637795275
User 2598 AUC after training: 0.5065616797900262
User 2598 does not improve AUC. Reverting changes.
Training on augumented user 40804 15/50 current_auc = 0.5068897637795275
User 40804 AUC after training: 0.505249343832021
User 40804 does not improve AUC. Reverting changes.
Training on augumented user 44233 16/50 current_auc = 0.5068897637795275
User 44233 AUC after training: 0.5065616797900262
User 44233 does not improve AUC. Reverting changes.
Training on augumented user 119196 17/50 current_auc = 0.5068897637795275
User 119196 AUC after training: 0.506233595800525
User 119196 does not improve AUC. Reverting changes.
Training on augumented user 29868 18/50 current_auc = 0.5068897637795275
User 29868 AUC after training: 0.5055774278215224
User 29868 does not improve AUC. Reverting changes.
Training on augumented user 20766 19/50 current_auc = 0.5068897637795275
User 20766 AUC after training: 0.5059055118110236
User 20766 does not improve AUC. Reverting changes.
Training on augumented user 88985 20/50 current_auc = 0.5068897637795275
User 88985 AUC after training: 0.5065616797900263
User 88985 does not improve AUC. Reverting changes.
Training on augumented user 137794 21/50 current_auc = 0.5068897637795275
User 137794 AUC after training: 0.5065616797900262
User 137794 does not improve AUC. Reverting changes.
Training on augumented user 25688 22/50 current_auc = 0.5068897637795275
User 25688 AUC after training: 0.5059055118110236
User 25688 does not improve AUC. Reverting changes.
Training on augumented user 106234 23/50 current_auc = 0.5068897637795275
User 106234 AUC after training: 0.5062335958005251
User 106234 does not improve AUC. Reverting changes.
Training on augumented user 116294 24/50 current_auc = 0.5068897637795275
User 116294 AUC after training: 0.5055774278215224
User 116294 does not improve AUC. Reverting changes.
Training on augumented user 83621 25/50 current_auc = 0.5068897637795275
User 83621 AUC after training: 0.506233595800525
User 83621 does not improve AUC. Reverting changes.
Training on augumented user 26660 26/50 current_auc = 0.5068897637795275
User 26660 AUC after training: 0.5059055118110236
User 26660 does not improve AUC. Reverting changes.
Training on augumented user 8171 27/50 current_auc = 0.5068897637795275
User 8171 AUC after training: 0.506233595800525
User 8171 does not improve AUC. Reverting changes.
Training on augumented user 47627 28/50 current_auc = 0.5068897637795275
User 47627 AUC after training: 0.506233595800525
User 47627 does not improve AUC. Reverting changes.
Training on augumented user 91609 29/50 current_auc = 0.5068897637795275
User 91609 AUC after training: 0.5068897637795275
User 91609 does not improve AUC. Reverting changes.
Training on augumented user 7406 30/50 current_auc = 0.5068897637795275
User 7406 AUC after training: 0.5068897637795275
User 7406 does not improve AUC. Reverting changes.
Training on augumented user 67282 31/50 current_auc = 0.5068897637795275
User 67282 AUC after training: 0.5055774278215223
User 67282 does not improve AUC. Reverting changes.
Training on augumented user 117786 32/50 current_auc = 0.5068897637795275
User 117786 AUC after training: 0.5052493438320209
User 117786 does not improve AUC. Reverting changes.
Training on augumented user 81924 33/50 current_auc = 0.5068897637795275
User 81924 AUC after training: 0.5068897637795275
User 81924 does not improve AUC. Reverting changes.
Training on augumented user 57672 34/50 current_auc = 0.5068897637795275
User 57672 AUC after training: 0.5059055118110236
User 57672 does not improve AUC. Reverting changes.
Training on augumented user 112482 35/50 current_auc = 0.5068897637795275
User 112482 AUC after training: 0.5059055118110236
User 112482 does not improve AUC. Reverting changes.
Training on augumented user 31437 36/50 current_auc = 0.5068897637795275
User 31437 AUC after training: 0.5068897637795275
User 31437 does not improve AUC. Reverting changes.
Training on augumented user 70019 37/50 current_auc = 0.5068897637795275
User 70019 AUC after training: 0.5065616797900262
User 70019 does not improve AUC. Reverting changes.
Training on augumented user 134834 38/50 current_auc = 0.5068897637795275
User 134834 AUC after training: 0.5059055118110236
User 134834 does not improve AUC. Reverting changes.
Training on augumented user 14031 39/50 current_auc = 0.5068897637795275
User 14031 AUC after training: 0.5059055118110236
User 14031 does not improve AUC. Reverting changes.
Training on augumented user 132010 40/50 current_auc = 0.5068897637795275
User 132010 AUC after training: 0.5065616797900262
User 132010 does not improve AUC. Reverting changes.
Training on augumented user 25735 41/50 current_auc = 0.5068897637795275
User 25735 AUC after training: 0.5059055118110236
User 25735 does not improve AUC. Reverting changes.
Training on augumented user 24601 42/50 current_auc = 0.5068897637795275
User 24601 AUC after training: 0.5065616797900262
User 24601 does not improve AUC. Reverting changes.
Training on augumented user 6644 43/50 current_auc = 0.5068897637795275
User 6644 AUC after training: 0.506233595800525
User 6644 does not improve AUC. Reverting changes.
Training on augumented user 116601 44/50 current_auc = 0.5068897637795275
User 116601 AUC after training: 0.5065616797900262
User 116601 does not improve AUC. Reverting changes.
Training on augumented user 51466 45/50 current_auc = 0.5068897637795275
User 51466 AUC after training: 0.5059055118110236
User 51466 does not improve AUC. Reverting changes.
Training on augumented user 20995 46/50 current_auc = 0.5068897637795275
User 20995 AUC after training: 0.5059055118110236
User 20995 does not improve AUC. Reverting changes.
Training on augumented user 20690 47/50 current_auc = 0.5068897637795275
User 20690 AUC after training: 0.5055774278215224
User 20690 does not improve AUC. Reverting changes.
Training on augumented user 53011 48/50 current_auc = 0.5068897637795275
User 53011 AUC after training: 0.5065616797900262
User 53011 does not improve AUC. Reverting changes.
Training on augumented user 7072 49/50 current_auc = 0.5068897637795275
User 7072 AUC after training: 0.5068897637795275
User 7072 does not improve AUC. Reverting changes.
[2024-12-02 20:20:01.746428] start test user 7036 299/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:20:02.580673] start test user 7036 299/568 recall augumented users by random, augumented_users = [81039, 2527, 28683, 46963, 124457, 27101, 54003, 104295, 60881, 128103, 18102, 62994, 138456, 63210, 107118, 19629, 30091, 22842, 72053, 97730, 92247, 106006, 94498, 29434, 110374, 111023, 36044, 10683, 28626, 89792, 101118, 65394, 105324, 50043, 62273, 56484, 27587, 52066, 125590, 32092, 22204, 79310, 13344, 1784, 132580, 46223, 129017, 113666, 63207, 39744]
[2024-12-02 20:20:02.599818] user = 7036 Cloud 299/568
[2024-12-02 20:20:02.676142] user = 7036 Local 299/568
[2024-12-02 20:20:02.970844] user = 7036 Local+ 299/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:20:05.569630] user = 7036 MPDA- 299/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5988785539943268
Training on augumented user 81039 0/50 current_auc = 0.5988785539943268
User 81039 AUC after training: 0.5991028431954615
User 81039 improves AUC. Keeping the model.
Training on augumented user 2527 1/50 current_auc = 0.5991028431954615
User 2527 AUC after training: 0.5992083910548189
User 2527 improves AUC. Keeping the model.
Training on augumented user 28683 2/50 current_auc = 0.5992083910548189
User 28683 AUC after training: 0.5991556171251401
User 28683 does not improve AUC. Reverting changes.
Training on augumented user 46963 3/50 current_auc = 0.5992083910548189
User 46963 AUC after training: 0.599116036677881
User 46963 does not improve AUC. Reverting changes.
Training on augumented user 124457 4/50 current_auc = 0.5992083910548189
User 124457 AUC after training: 0.5989972953361039
User 124457 does not improve AUC. Reverting changes.
Training on augumented user 27101 5/50 current_auc = 0.5992083910548189
User 27101 AUC after training: 0.5986014908635133
User 27101 does not improve AUC. Reverting changes.
Training on augumented user 54003 6/50 current_auc = 0.5992083910548189
User 54003 AUC after training: 0.5989709083712647
User 54003 does not improve AUC. Reverting changes.
Training on augumented user 104295 7/50 current_auc = 0.5992083910548189
User 104295 AUC after training: 0.5995118411504716
User 104295 improves AUC. Keeping the model.
Training on augumented user 60881 8/50 current_auc = 0.5995118411504716
User 60881 AUC after training: 0.5992083910548188
User 60881 does not improve AUC. Reverting changes.
Training on augumented user 128103 9/50 current_auc = 0.5995118411504716
User 128103 AUC after training: 0.5994722607032126
User 128103 does not improve AUC. Reverting changes.
Training on augumented user 18102 10/50 current_auc = 0.5995118411504716
User 18102 AUC after training: 0.5990632627482025
User 18102 does not improve AUC. Reverting changes.
Training on augumented user 62994 11/50 current_auc = 0.5995118411504716
User 62994 AUC after training: 0.5991820040899796
User 62994 does not improve AUC. Reverting changes.
Training on augumented user 138456 12/50 current_auc = 0.5995118411504716
User 138456 AUC after training: 0.5998416782109638
User 138456 improves AUC. Keeping the model.
Training on augumented user 63210 13/50 current_auc = 0.5998416782109638
User 63210 AUC after training: 0.6000527739296787
User 63210 improves AUC. Keeping the model.
Training on augumented user 107118 14/50 current_auc = 0.6000527739296787
User 107118 AUC after training: 0.5999472260703212
User 107118 does not improve AUC. Reverting changes.
Training on augumented user 19629 15/50 current_auc = 0.6000527739296787
User 19629 AUC after training: 0.5999076456230623
User 19629 does not improve AUC. Reverting changes.
Training on augumented user 30091 16/50 current_auc = 0.6000527739296787
User 30091 AUC after training: 0.5999208391054819
User 30091 does not improve AUC. Reverting changes.
Training on augumented user 22842 17/50 current_auc = 0.6000527739296787
User 22842 AUC after training: 0.5997361303516063
User 22842 does not improve AUC. Reverting changes.
Training on augumented user 72053 18/50 current_auc = 0.6000527739296787
User 72053 AUC after training: 0.5997757107988655
User 72053 does not improve AUC. Reverting changes.
Training on augumented user 97730 19/50 current_auc = 0.6000527739296787
User 97730 AUC after training: 0.5995646150801504
User 97730 does not improve AUC. Reverting changes.
Training on augumented user 92247 20/50 current_auc = 0.6000527739296787
User 92247 AUC after training: 0.5998944521406425
User 92247 does not improve AUC. Reverting changes.
Training on augumented user 106006 21/50 current_auc = 0.6000527739296787
User 106006 AUC after training: 0.5999736130351606
User 106006 does not improve AUC. Reverting changes.
Training on augumented user 94498 22/50 current_auc = 0.6000527739296787
User 94498 AUC after training: 0.5996569694570882
User 94498 does not improve AUC. Reverting changes.
Training on augumented user 29434 23/50 current_auc = 0.6000527739296787
User 29434 AUC after training: 0.6001187413417772
User 29434 improves AUC. Keeping the model.
Training on augumented user 110374 24/50 current_auc = 0.6001187413417772
User 110374 AUC after training: 0.5997955010224949
User 110374 does not improve AUC. Reverting changes.
Training on augumented user 111023 25/50 current_auc = 0.6001187413417772
User 111023 AUC after training: 0.6002902566132331
User 111023 improves AUC. Keeping the model.
Training on augumented user 36044 26/50 current_auc = 0.6002902566132331
User 36044 AUC after training: 0.6002572729071838
User 36044 does not improve AUC. Reverting changes.
Training on augumented user 10683 27/50 current_auc = 0.6002902566132331
User 10683 AUC after training: 0.6001385315654066
User 10683 does not improve AUC. Reverting changes.
Training on augumented user 28626 28/50 current_auc = 0.6002902566132331
User 28626 AUC after training: 0.5998878553994327
User 28626 does not improve AUC. Reverting changes.
Training on augumented user 89792 29/50 current_auc = 0.6002902566132331
User 89792 AUC after training: 0.6000065967412099
User 89792 does not improve AUC. Reverting changes.
Training on augumented user 101118 30/50 current_auc = 0.6002902566132331
User 101118 AUC after training: 0.6000461771884689
User 101118 does not improve AUC. Reverting changes.
Training on augumented user 65394 31/50 current_auc = 0.6002902566132331
User 65394 AUC after training: 0.5999604195527409
User 65394 does not improve AUC. Reverting changes.
Training on augumented user 105324 32/50 current_auc = 0.6002902566132331
User 105324 AUC after training: 0.6000725641533083
User 105324 does not improve AUC. Reverting changes.
Training on augumented user 50043 33/50 current_auc = 0.6002902566132331
User 50043 AUC after training: 0.6002770631308134
User 50043 does not improve AUC. Reverting changes.
Training on augumented user 62273 34/50 current_auc = 0.6002902566132331
User 62273 AUC after training: 0.6001847087538755
User 62273 does not improve AUC. Reverting changes.
Training on augumented user 56484 35/50 current_auc = 0.6002902566132331
User 56484 AUC after training: 0.6008707698396993
User 56484 improves AUC. Keeping the model.
Training on augumented user 27587 36/50 current_auc = 0.6008707698396993
User 27587 AUC after training: 0.6004353849198496
User 27587 does not improve AUC. Reverting changes.
Training on augumented user 52066 37/50 current_auc = 0.6008707698396993
User 52066 AUC after training: 0.600125338082987
User 52066 does not improve AUC. Reverting changes.
Training on augumented user 125590 38/50 current_auc = 0.6008707698396993
User 125590 AUC after training: 0.6004683686258988
User 125590 does not improve AUC. Reverting changes.
Training on augumented user 32092 39/50 current_auc = 0.6008707698396993
User 32092 AUC after training: 0.6008311893924402
User 32092 does not improve AUC. Reverting changes.
Training on augumented user 22204 40/50 current_auc = 0.6008707698396993
User 22204 AUC after training: 0.6003892077313807
User 22204 does not improve AUC. Reverting changes.
Training on augumented user 79310 41/50 current_auc = 0.6008707698396993
User 79310 AUC after training: 0.6006728676034039
User 79310 does not improve AUC. Reverting changes.
Training on augumented user 13344 42/50 current_auc = 0.6008707698396993
User 13344 AUC after training: 0.6001583217890363
User 13344 does not improve AUC. Reverting changes.
Training on augumented user 1784 43/50 current_auc = 0.6008707698396993
User 1784 AUC after training: 0.6006992545682434
User 1784 does not improve AUC. Reverting changes.
Training on augumented user 132580 44/50 current_auc = 0.6008707698396993
User 132580 AUC after training: 0.6006860610858236
User 132580 does not improve AUC. Reverting changes.
Training on augumented user 46223 45/50 current_auc = 0.6008707698396993
User 46223 AUC after training: 0.6006332871561448
User 46223 does not improve AUC. Reverting changes.
Training on augumented user 129017 46/50 current_auc = 0.6008707698396993
User 129017 AUC after training: 0.6004089979550102
User 129017 does not improve AUC. Reverting changes.
Training on augumented user 113666 47/50 current_auc = 0.6008707698396993
User 113666 AUC after training: 0.6001055478593575
User 113666 does not improve AUC. Reverting changes.
Training on augumented user 63207 48/50 current_auc = 0.6008707698396993
User 63207 AUC after training: 0.6007520284979222
User 63207 does not improve AUC. Reverting changes.
Training on augumented user 39744 49/50 current_auc = 0.6008707698396993
User 39744 AUC after training: 0.6007124480506629
User 39744 does not improve AUC. Reverting changes.
[2024-12-02 20:20:36.330764] start test user 7038 300/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:20:37.020545] start test user 7038 300/568 recall augumented users by random, augumented_users = [16949, 44953, 18119, 85807, 107440, 55565, 12972, 97626, 80935, 103799, 137817, 66216, 98212, 114391, 101189, 105102, 66429, 103920, 1885, 102368, 102346, 53654, 100603, 17224, 106971, 95531, 42985, 73558, 34860, 106124, 70281, 72795, 88181, 120261, 121400, 99303, 136227, 116313, 2892, 82024, 78038, 46813, 21662, 5158, 125763, 137810, 53405, 57516, 41793, 64763]
[2024-12-02 20:20:37.035903] user = 7038 Cloud 300/568
[2024-12-02 20:20:37.058646] user = 7038 Local 300/568
[2024-12-02 20:20:37.129039] user = 7038 Local+ 300/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:20:39.308311] user = 7038 MPDA- 300/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7148867313915858
Training on augumented user 16949 0/50 current_auc = 0.7148867313915858
User 16949 AUC after training: 0.714789644012945
User 16949 does not improve AUC. Reverting changes.
Training on augumented user 44953 1/50 current_auc = 0.7148867313915858
User 44953 AUC after training: 0.713462783171521
User 44953 does not improve AUC. Reverting changes.
Training on augumented user 18119 2/50 current_auc = 0.7148867313915858
User 18119 AUC after training: 0.714757281553398
User 18119 does not improve AUC. Reverting changes.
Training on augumented user 85807 3/50 current_auc = 0.7148867313915858
User 85807 AUC after training: 0.7146925566343041
User 85807 does not improve AUC. Reverting changes.
Training on augumented user 107440 4/50 current_auc = 0.7148867313915858
User 107440 AUC after training: 0.713915857605178
User 107440 does not improve AUC. Reverting changes.
Training on augumented user 55565 5/50 current_auc = 0.7148867313915858
User 55565 AUC after training: 0.7148220064724919
User 55565 does not improve AUC. Reverting changes.
Training on augumented user 12972 6/50 current_auc = 0.7148867313915858
User 12972 AUC after training: 0.7149514563106796
User 12972 improves AUC. Keeping the model.
Training on augumented user 97626 7/50 current_auc = 0.7149514563106796
User 97626 AUC after training: 0.7148867313915859
User 97626 does not improve AUC. Reverting changes.
Training on augumented user 80935 8/50 current_auc = 0.7149514563106796
User 80935 AUC after training: 0.7148867313915858
User 80935 does not improve AUC. Reverting changes.
Training on augumented user 103799 9/50 current_auc = 0.7149514563106796
User 103799 AUC after training: 0.7144012944983819
User 103799 does not improve AUC. Reverting changes.
Training on augumented user 137817 10/50 current_auc = 0.7149514563106796
User 137817 AUC after training: 0.7138511326860842
User 137817 does not improve AUC. Reverting changes.
Training on augumented user 66216 11/50 current_auc = 0.7149514563106796
User 66216 AUC after training: 0.7146925566343041
User 66216 does not improve AUC. Reverting changes.
Training on augumented user 98212 12/50 current_auc = 0.7149514563106796
User 98212 AUC after training: 0.7145954692556635
User 98212 does not improve AUC. Reverting changes.
Training on augumented user 114391 13/50 current_auc = 0.7149514563106796
User 114391 AUC after training: 0.7146278317152104
User 114391 does not improve AUC. Reverting changes.
Training on augumented user 101189 14/50 current_auc = 0.7149514563106796
User 101189 AUC after training: 0.7148867313915858
User 101189 does not improve AUC. Reverting changes.
Training on augumented user 105102 15/50 current_auc = 0.7149514563106796
User 105102 AUC after training: 0.7146925566343042
User 105102 does not improve AUC. Reverting changes.
Training on augumented user 66429 16/50 current_auc = 0.7149514563106796
User 66429 AUC after training: 0.7144336569579288
User 66429 does not improve AUC. Reverting changes.
Training on augumented user 103920 17/50 current_auc = 0.7149514563106796
User 103920 AUC after training: 0.7146925566343041
User 103920 does not improve AUC. Reverting changes.
Training on augumented user 1885 18/50 current_auc = 0.7149514563106796
User 1885 AUC after training: 0.7140453074433657
User 1885 does not improve AUC. Reverting changes.
Training on augumented user 102368 19/50 current_auc = 0.7149514563106796
User 102368 AUC after training: 0.7151456310679611
User 102368 improves AUC. Keeping the model.
Training on augumented user 102346 20/50 current_auc = 0.7151456310679611
User 102346 AUC after training: 0.7149514563106796
User 102346 does not improve AUC. Reverting changes.
Training on augumented user 53654 21/50 current_auc = 0.7151456310679611
User 53654 AUC after training: 0.7144336569579288
User 53654 does not improve AUC. Reverting changes.
Training on augumented user 100603 22/50 current_auc = 0.7151456310679611
User 100603 AUC after training: 0.7148867313915857
User 100603 does not improve AUC. Reverting changes.
Training on augumented user 17224 23/50 current_auc = 0.7151456310679611
User 17224 AUC after training: 0.7149514563106797
User 17224 does not improve AUC. Reverting changes.
Training on augumented user 106971 24/50 current_auc = 0.7151456310679611
User 106971 AUC after training: 0.7146278317152104
User 106971 does not improve AUC. Reverting changes.
Training on augumented user 95531 25/50 current_auc = 0.7151456310679611
User 95531 AUC after training: 0.7146925566343042
User 95531 does not improve AUC. Reverting changes.
Training on augumented user 42985 26/50 current_auc = 0.7151456310679611
User 42985 AUC after training: 0.7146601941747572
User 42985 does not improve AUC. Reverting changes.
Training on augumented user 73558 27/50 current_auc = 0.7151456310679611
User 73558 AUC after training: 0.714757281553398
User 73558 does not improve AUC. Reverting changes.
Training on augumented user 34860 28/50 current_auc = 0.7151456310679611
User 34860 AUC after training: 0.7146925566343042
User 34860 does not improve AUC. Reverting changes.
Training on augumented user 106124 29/50 current_auc = 0.7151456310679611
User 106124 AUC after training: 0.7149514563106796
User 106124 does not improve AUC. Reverting changes.
Training on augumented user 70281 30/50 current_auc = 0.7151456310679611
User 70281 AUC after training: 0.7152103559870551
User 70281 improves AUC. Keeping the model.
Training on augumented user 72795 31/50 current_auc = 0.7152103559870551
User 72795 AUC after training: 0.7149514563106796
User 72795 does not improve AUC. Reverting changes.
Training on augumented user 88181 32/50 current_auc = 0.7152103559870551
User 88181 AUC after training: 0.7145631067961166
User 88181 does not improve AUC. Reverting changes.
Training on augumented user 120261 33/50 current_auc = 0.7152103559870551
User 120261 AUC after training: 0.7148220064724919
User 120261 does not improve AUC. Reverting changes.
Training on augumented user 121400 34/50 current_auc = 0.7152103559870551
User 121400 AUC after training: 0.7151779935275081
User 121400 does not improve AUC. Reverting changes.
Training on augumented user 99303 35/50 current_auc = 0.7152103559870551
User 99303 AUC after training: 0.7150161812297734
User 99303 does not improve AUC. Reverting changes.
Training on augumented user 136227 36/50 current_auc = 0.7152103559870551
User 136227 AUC after training: 0.7148543689320388
User 136227 does not improve AUC. Reverting changes.
Training on augumented user 116313 37/50 current_auc = 0.7152103559870551
User 116313 AUC after training: 0.715210355987055
User 116313 does not improve AUC. Reverting changes.
Training on augumented user 2892 38/50 current_auc = 0.7152103559870551
User 2892 AUC after training: 0.7146601941747572
User 2892 does not improve AUC. Reverting changes.
Training on augumented user 82024 39/50 current_auc = 0.7152103559870551
User 82024 AUC after training: 0.7152427184466019
User 82024 improves AUC. Keeping the model.
Training on augumented user 78038 40/50 current_auc = 0.7152427184466019
User 78038 AUC after training: 0.7150809061488674
User 78038 does not improve AUC. Reverting changes.
Training on augumented user 46813 41/50 current_auc = 0.7152427184466019
User 46813 AUC after training: 0.7144660194174758
User 46813 does not improve AUC. Reverting changes.
Training on augumented user 21662 42/50 current_auc = 0.7152427184466019
User 21662 AUC after training: 0.7148220064724919
User 21662 does not improve AUC. Reverting changes.
Training on augumented user 5158 43/50 current_auc = 0.7152427184466019
User 5158 AUC after training: 0.7151456310679613
User 5158 does not improve AUC. Reverting changes.
Training on augumented user 125763 44/50 current_auc = 0.7152427184466019
User 125763 AUC after training: 0.7148220064724919
User 125763 does not improve AUC. Reverting changes.
Training on augumented user 137810 45/50 current_auc = 0.7152427184466019
User 137810 AUC after training: 0.7144012944983817
User 137810 does not improve AUC. Reverting changes.
Training on augumented user 53405 46/50 current_auc = 0.7152427184466019
User 53405 AUC after training: 0.715242718446602
User 53405 improves AUC. Keeping the model.
Training on augumented user 57516 47/50 current_auc = 0.715242718446602
User 57516 AUC after training: 0.714336569579288
User 57516 does not improve AUC. Reverting changes.
Training on augumented user 41793 48/50 current_auc = 0.715242718446602
User 41793 AUC after training: 0.7146278317152104
User 41793 does not improve AUC. Reverting changes.
Training on augumented user 64763 49/50 current_auc = 0.715242718446602
User 64763 AUC after training: 0.7153398058252427
User 64763 improves AUC. Keeping the model.
[2024-12-02 20:21:07.760670] start test user 7110 301/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:21:08.343228] start test user 7110 301/568 recall augumented users by random, augumented_users = [113050, 22415, 80137, 1191, 15462, 82414, 117472, 128413, 125134, 104906, 15370, 80599, 43444, 4104, 4558, 10460, 57929, 108138, 58291, 73742, 106567, 45487, 42271, 51242, 127299, 50150, 46524, 33327, 62926, 4737, 12082, 13245, 16230, 90348, 118947, 92740, 10591, 63389, 42743, 76926, 116700, 119811, 7752, 112972, 60868, 20817, 43025, 39780, 15514, 112456]
[2024-12-02 20:21:08.374806] user = 7110 Cloud 301/568
[2024-12-02 20:21:08.390746] user = 7110 Local 301/568
[2024-12-02 20:21:08.433493] user = 7110 Local+ 301/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:21:11.146293] user = 7110 MPDA- 301/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.35
Training on augumented user 113050 0/50 current_auc = 0.35
User 113050 AUC after training: 0.35
User 113050 does not improve AUC. Reverting changes.
Training on augumented user 22415 1/50 current_auc = 0.35
User 22415 AUC after training: 0.35
User 22415 does not improve AUC. Reverting changes.
Training on augumented user 80137 2/50 current_auc = 0.35
User 80137 AUC after training: 0.35
User 80137 does not improve AUC. Reverting changes.
Training on augumented user 1191 3/50 current_auc = 0.35
User 1191 AUC after training: 0.35
User 1191 does not improve AUC. Reverting changes.
Training on augumented user 15462 4/50 current_auc = 0.35
User 15462 AUC after training: 0.35
User 15462 does not improve AUC. Reverting changes.
Training on augumented user 82414 5/50 current_auc = 0.35
User 82414 AUC after training: 0.35
User 82414 does not improve AUC. Reverting changes.
Training on augumented user 117472 6/50 current_auc = 0.35
User 117472 AUC after training: 0.35
User 117472 does not improve AUC. Reverting changes.
Training on augumented user 128413 7/50 current_auc = 0.35
User 128413 AUC after training: 0.35
User 128413 does not improve AUC. Reverting changes.
Training on augumented user 125134 8/50 current_auc = 0.35
User 125134 AUC after training: 0.35
User 125134 does not improve AUC. Reverting changes.
Training on augumented user 104906 9/50 current_auc = 0.35
User 104906 AUC after training: 0.35
User 104906 does not improve AUC. Reverting changes.
Training on augumented user 15370 10/50 current_auc = 0.35
User 15370 AUC after training: 0.35
User 15370 does not improve AUC. Reverting changes.
Training on augumented user 80599 11/50 current_auc = 0.35
User 80599 AUC after training: 0.35
User 80599 does not improve AUC. Reverting changes.
Training on augumented user 43444 12/50 current_auc = 0.35
User 43444 AUC after training: 0.35
User 43444 does not improve AUC. Reverting changes.
Training on augumented user 4104 13/50 current_auc = 0.35
User 4104 AUC after training: 0.35
User 4104 does not improve AUC. Reverting changes.
Training on augumented user 4558 14/50 current_auc = 0.35
User 4558 AUC after training: 0.35
User 4558 does not improve AUC. Reverting changes.
Training on augumented user 10460 15/50 current_auc = 0.35
User 10460 AUC after training: 0.35
User 10460 does not improve AUC. Reverting changes.
Training on augumented user 57929 16/50 current_auc = 0.35
User 57929 AUC after training: 0.35
User 57929 does not improve AUC. Reverting changes.
Training on augumented user 108138 17/50 current_auc = 0.35
User 108138 AUC after training: 0.35
User 108138 does not improve AUC. Reverting changes.
Training on augumented user 58291 18/50 current_auc = 0.35
User 58291 AUC after training: 0.35
User 58291 does not improve AUC. Reverting changes.
Training on augumented user 73742 19/50 current_auc = 0.35
User 73742 AUC after training: 0.35
User 73742 does not improve AUC. Reverting changes.
Training on augumented user 106567 20/50 current_auc = 0.35
User 106567 AUC after training: 0.35
User 106567 does not improve AUC. Reverting changes.
Training on augumented user 45487 21/50 current_auc = 0.35
User 45487 AUC after training: 0.35
User 45487 does not improve AUC. Reverting changes.
Training on augumented user 42271 22/50 current_auc = 0.35
User 42271 AUC after training: 0.35
User 42271 does not improve AUC. Reverting changes.
Training on augumented user 51242 23/50 current_auc = 0.35
User 51242 AUC after training: 0.35
User 51242 does not improve AUC. Reverting changes.
Training on augumented user 127299 24/50 current_auc = 0.35
User 127299 AUC after training: 0.35
User 127299 does not improve AUC. Reverting changes.
Training on augumented user 50150 25/50 current_auc = 0.35
User 50150 AUC after training: 0.35
User 50150 does not improve AUC. Reverting changes.
Training on augumented user 46524 26/50 current_auc = 0.35
User 46524 AUC after training: 0.35
User 46524 does not improve AUC. Reverting changes.
Training on augumented user 33327 27/50 current_auc = 0.35
User 33327 AUC after training: 0.35
User 33327 does not improve AUC. Reverting changes.
Training on augumented user 62926 28/50 current_auc = 0.35
User 62926 AUC after training: 0.35
User 62926 does not improve AUC. Reverting changes.
Training on augumented user 4737 29/50 current_auc = 0.35
User 4737 AUC after training: 0.35
User 4737 does not improve AUC. Reverting changes.
Training on augumented user 12082 30/50 current_auc = 0.35
User 12082 AUC after training: 0.35
User 12082 does not improve AUC. Reverting changes.
Training on augumented user 13245 31/50 current_auc = 0.35
User 13245 AUC after training: 0.35
User 13245 does not improve AUC. Reverting changes.
Training on augumented user 16230 32/50 current_auc = 0.35
User 16230 AUC after training: 0.35
User 16230 does not improve AUC. Reverting changes.
Training on augumented user 90348 33/50 current_auc = 0.35
User 90348 AUC after training: 0.35
User 90348 does not improve AUC. Reverting changes.
Training on augumented user 118947 34/50 current_auc = 0.35
User 118947 AUC after training: 0.35
User 118947 does not improve AUC. Reverting changes.
Training on augumented user 92740 35/50 current_auc = 0.35
User 92740 AUC after training: 0.35
User 92740 does not improve AUC. Reverting changes.
Training on augumented user 10591 36/50 current_auc = 0.35
User 10591 AUC after training: 0.35
User 10591 does not improve AUC. Reverting changes.
Training on augumented user 63389 37/50 current_auc = 0.35
User 63389 AUC after training: 0.35
User 63389 does not improve AUC. Reverting changes.
Training on augumented user 42743 38/50 current_auc = 0.35
User 42743 AUC after training: 0.35
User 42743 does not improve AUC. Reverting changes.
Training on augumented user 76926 39/50 current_auc = 0.35
User 76926 AUC after training: 0.35
User 76926 does not improve AUC. Reverting changes.
Training on augumented user 116700 40/50 current_auc = 0.35
User 116700 AUC after training: 0.35
User 116700 does not improve AUC. Reverting changes.
Training on augumented user 119811 41/50 current_auc = 0.35
User 119811 AUC after training: 0.35
User 119811 does not improve AUC. Reverting changes.
Training on augumented user 7752 42/50 current_auc = 0.35
User 7752 AUC after training: 0.35
User 7752 does not improve AUC. Reverting changes.
Training on augumented user 112972 43/50 current_auc = 0.35
User 112972 AUC after training: 0.35
User 112972 does not improve AUC. Reverting changes.
Training on augumented user 60868 44/50 current_auc = 0.35
User 60868 AUC after training: 0.35
User 60868 does not improve AUC. Reverting changes.
Training on augumented user 20817 45/50 current_auc = 0.35
User 20817 AUC after training: 0.35
User 20817 does not improve AUC. Reverting changes.
Training on augumented user 43025 46/50 current_auc = 0.35
User 43025 AUC after training: 0.35
User 43025 does not improve AUC. Reverting changes.
Training on augumented user 39780 47/50 current_auc = 0.35
User 39780 AUC after training: 0.35
User 39780 does not improve AUC. Reverting changes.
Training on augumented user 15514 48/50 current_auc = 0.35
User 15514 AUC after training: 0.35
User 15514 does not improve AUC. Reverting changes.
Training on augumented user 112456 49/50 current_auc = 0.35
User 112456 AUC after training: 0.35
User 112456 does not improve AUC. Reverting changes.
[2024-12-02 20:21:43.470402] start test user 7129 302/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:21:43.875387] start test user 7129 302/568 recall augumented users by random, augumented_users = [17713, 130425, 123973, 50546, 93541, 41636, 133897, 75842, 15203, 18236, 96314, 7054, 59813, 62320, 107802, 115083, 87245, 15434, 134903, 22043, 112677, 47750, 47659, 54177, 38178, 80189, 135417, 57276, 51821, 80394, 90011, 90433, 82409, 126053, 91665, 116729, 13147, 17402, 52228, 131981, 83309, 136691, 114055, 24758, 47904, 43047, 42682, 125484, 84260, 131740]
[2024-12-02 20:21:43.890275] user = 7129 Cloud 302/568
[2024-12-02 20:21:43.899488] user = 7129 Local 302/568
[2024-12-02 20:21:43.924891] user = 7129 Local+ 302/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:21:45.937749] user = 7129 MPDA- 302/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8333333333333334
Training on augumented user 17713 0/50 current_auc = 0.8333333333333334
User 17713 AUC after training: 0.8333333333333334
User 17713 does not improve AUC. Reverting changes.
Training on augumented user 130425 1/50 current_auc = 0.8333333333333334
User 130425 AUC after training: 0.8333333333333334
User 130425 does not improve AUC. Reverting changes.
Training on augumented user 123973 2/50 current_auc = 0.8333333333333334
User 123973 AUC after training: 0.8333333333333334
User 123973 does not improve AUC. Reverting changes.
Training on augumented user 50546 3/50 current_auc = 0.8333333333333334
User 50546 AUC after training: 0.8333333333333334
User 50546 does not improve AUC. Reverting changes.
Training on augumented user 93541 4/50 current_auc = 0.8333333333333334
User 93541 AUC after training: 0.8333333333333334
User 93541 does not improve AUC. Reverting changes.
Training on augumented user 41636 5/50 current_auc = 0.8333333333333334
User 41636 AUC after training: 0.8333333333333334
User 41636 does not improve AUC. Reverting changes.
Training on augumented user 133897 6/50 current_auc = 0.8333333333333334
User 133897 AUC after training: 0.8333333333333334
User 133897 does not improve AUC. Reverting changes.
Training on augumented user 75842 7/50 current_auc = 0.8333333333333334
User 75842 AUC after training: 0.8333333333333334
User 75842 does not improve AUC. Reverting changes.
Training on augumented user 15203 8/50 current_auc = 0.8333333333333334
User 15203 AUC after training: 0.8333333333333334
User 15203 does not improve AUC. Reverting changes.
Training on augumented user 18236 9/50 current_auc = 0.8333333333333334
User 18236 AUC after training: 0.8333333333333334
User 18236 does not improve AUC. Reverting changes.
Training on augumented user 96314 10/50 current_auc = 0.8333333333333334
User 96314 AUC after training: 0.8333333333333334
User 96314 does not improve AUC. Reverting changes.
Training on augumented user 7054 11/50 current_auc = 0.8333333333333334
User 7054 AUC after training: 0.8333333333333334
User 7054 does not improve AUC. Reverting changes.
Training on augumented user 59813 12/50 current_auc = 0.8333333333333334
User 59813 AUC after training: 0.8333333333333334
User 59813 does not improve AUC. Reverting changes.
Training on augumented user 62320 13/50 current_auc = 0.8333333333333334
User 62320 AUC after training: 0.8333333333333334
User 62320 does not improve AUC. Reverting changes.
Training on augumented user 107802 14/50 current_auc = 0.8333333333333334
User 107802 AUC after training: 0.8333333333333334
User 107802 does not improve AUC. Reverting changes.
Training on augumented user 115083 15/50 current_auc = 0.8333333333333334
User 115083 AUC after training: 0.8333333333333334
User 115083 does not improve AUC. Reverting changes.
Training on augumented user 87245 16/50 current_auc = 0.8333333333333334
User 87245 AUC after training: 0.8333333333333334
User 87245 does not improve AUC. Reverting changes.
Training on augumented user 15434 17/50 current_auc = 0.8333333333333334
User 15434 AUC after training: 0.8333333333333334
User 15434 does not improve AUC. Reverting changes.
Training on augumented user 134903 18/50 current_auc = 0.8333333333333334
User 134903 AUC after training: 0.8333333333333334
User 134903 does not improve AUC. Reverting changes.
Training on augumented user 22043 19/50 current_auc = 0.8333333333333334
User 22043 AUC after training: 0.8333333333333334
User 22043 does not improve AUC. Reverting changes.
Training on augumented user 112677 20/50 current_auc = 0.8333333333333334
User 112677 AUC after training: 0.8333333333333334
User 112677 does not improve AUC. Reverting changes.
Training on augumented user 47750 21/50 current_auc = 0.8333333333333334
User 47750 AUC after training: 0.8333333333333334
User 47750 does not improve AUC. Reverting changes.
Training on augumented user 47659 22/50 current_auc = 0.8333333333333334
User 47659 AUC after training: 0.8333333333333334
User 47659 does not improve AUC. Reverting changes.
Training on augumented user 54177 23/50 current_auc = 0.8333333333333334
User 54177 AUC after training: 0.8333333333333334
User 54177 does not improve AUC. Reverting changes.
Training on augumented user 38178 24/50 current_auc = 0.8333333333333334
User 38178 AUC after training: 0.8333333333333334
User 38178 does not improve AUC. Reverting changes.
Training on augumented user 80189 25/50 current_auc = 0.8333333333333334
User 80189 AUC after training: 0.8333333333333334
User 80189 does not improve AUC. Reverting changes.
Training on augumented user 135417 26/50 current_auc = 0.8333333333333334
User 135417 AUC after training: 0.8333333333333334
User 135417 does not improve AUC. Reverting changes.
Training on augumented user 57276 27/50 current_auc = 0.8333333333333334
User 57276 AUC after training: 0.8333333333333334
User 57276 does not improve AUC. Reverting changes.
Training on augumented user 51821 28/50 current_auc = 0.8333333333333334
User 51821 AUC after training: 0.8333333333333334
User 51821 does not improve AUC. Reverting changes.
Training on augumented user 80394 29/50 current_auc = 0.8333333333333334
User 80394 AUC after training: 0.8333333333333334
User 80394 does not improve AUC. Reverting changes.
Training on augumented user 90011 30/50 current_auc = 0.8333333333333334
User 90011 AUC after training: 0.8333333333333334
User 90011 does not improve AUC. Reverting changes.
Training on augumented user 90433 31/50 current_auc = 0.8333333333333334
User 90433 AUC after training: 0.8333333333333334
User 90433 does not improve AUC. Reverting changes.
Training on augumented user 82409 32/50 current_auc = 0.8333333333333334
User 82409 AUC after training: 0.8333333333333334
User 82409 does not improve AUC. Reverting changes.
Training on augumented user 126053 33/50 current_auc = 0.8333333333333334
User 126053 AUC after training: 0.8333333333333334
User 126053 does not improve AUC. Reverting changes.
Training on augumented user 91665 34/50 current_auc = 0.8333333333333334
User 91665 AUC after training: 0.8333333333333334
User 91665 does not improve AUC. Reverting changes.
Training on augumented user 116729 35/50 current_auc = 0.8333333333333334
User 116729 AUC after training: 0.8333333333333334
User 116729 does not improve AUC. Reverting changes.
Training on augumented user 13147 36/50 current_auc = 0.8333333333333334
User 13147 AUC after training: 0.8333333333333334
User 13147 does not improve AUC. Reverting changes.
Training on augumented user 17402 37/50 current_auc = 0.8333333333333334
User 17402 AUC after training: 0.8333333333333334
User 17402 does not improve AUC. Reverting changes.
Training on augumented user 52228 38/50 current_auc = 0.8333333333333334
User 52228 AUC after training: 0.8333333333333334
User 52228 does not improve AUC. Reverting changes.
Training on augumented user 131981 39/50 current_auc = 0.8333333333333334
User 131981 AUC after training: 0.8333333333333334
User 131981 does not improve AUC. Reverting changes.
Training on augumented user 83309 40/50 current_auc = 0.8333333333333334
User 83309 AUC after training: 0.8333333333333334
User 83309 does not improve AUC. Reverting changes.
Training on augumented user 136691 41/50 current_auc = 0.8333333333333334
User 136691 AUC after training: 0.8333333333333334
User 136691 does not improve AUC. Reverting changes.
Training on augumented user 114055 42/50 current_auc = 0.8333333333333334
User 114055 AUC after training: 0.8333333333333334
User 114055 does not improve AUC. Reverting changes.
Training on augumented user 24758 43/50 current_auc = 0.8333333333333334
User 24758 AUC after training: 0.8333333333333334
User 24758 does not improve AUC. Reverting changes.
Training on augumented user 47904 44/50 current_auc = 0.8333333333333334
User 47904 AUC after training: 0.8333333333333334
User 47904 does not improve AUC. Reverting changes.
Training on augumented user 43047 45/50 current_auc = 0.8333333333333334
User 43047 AUC after training: 0.8333333333333334
User 43047 does not improve AUC. Reverting changes.
Training on augumented user 42682 46/50 current_auc = 0.8333333333333334
User 42682 AUC after training: 0.8333333333333334
User 42682 does not improve AUC. Reverting changes.
Training on augumented user 125484 47/50 current_auc = 0.8333333333333334
User 125484 AUC after training: 0.8333333333333334
User 125484 does not improve AUC. Reverting changes.
Training on augumented user 84260 48/50 current_auc = 0.8333333333333334
User 84260 AUC after training: 0.8333333333333334
User 84260 does not improve AUC. Reverting changes.
Training on augumented user 131740 49/50 current_auc = 0.8333333333333334
User 131740 AUC after training: 0.8333333333333334
User 131740 does not improve AUC. Reverting changes.
[2024-12-02 20:22:11.861002] start test user 7185 303/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:22:12.789449] start test user 7185 303/568 recall augumented users by random, augumented_users = [5512, 128013, 74727, 114856, 129840, 112429, 127638, 99500, 124822, 60973, 85615, 43177, 136190, 137313, 100622, 130319, 33244, 53269, 76313, 3195, 118032, 17426, 107988, 23456, 51695, 31031, 131343, 1549, 21697, 73657, 59605, 18471, 93018, 94720, 39381, 70590, 478, 55185, 134767, 129615, 114824, 112599, 107767, 124956, 134543, 121246, 46805, 52569, 3957, 77401]
[2024-12-02 20:22:12.861745] user = 7185 Cloud 303/568
[2024-12-02 20:22:12.902889] user = 7185 Local 303/568
[2024-12-02 20:22:12.997933] user = 7185 Local+ 303/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:22:15.596781] user = 7185 MPDA- 303/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7066811909949166
Training on augumented user 5512 0/50 current_auc = 0.7066811909949166
User 5512 AUC after training: 0.7063907044299201
User 5512 does not improve AUC. Reverting changes.
Training on augumented user 128013 1/50 current_auc = 0.7066811909949166
User 128013 AUC after training: 0.7060275962236746
User 128013 does not improve AUC. Reverting changes.
Training on augumented user 74727 2/50 current_auc = 0.7066811909949166
User 74727 AUC after training: 0.7061728395061729
User 74727 does not improve AUC. Reverting changes.
Training on augumented user 114856 3/50 current_auc = 0.7066811909949166
User 114856 AUC after training: 0.706245461147422
User 114856 does not improve AUC. Reverting changes.
Training on augumented user 129840 4/50 current_auc = 0.7066811909949166
User 129840 AUC after training: 0.7061728395061727
User 129840 does not improve AUC. Reverting changes.
Training on augumented user 112429 5/50 current_auc = 0.7066811909949166
User 112429 AUC after training: 0.7061728395061729
User 112429 does not improve AUC. Reverting changes.
Training on augumented user 127638 6/50 current_auc = 0.7066811909949166
User 127638 AUC after training: 0.7058823529411765
User 127638 does not improve AUC. Reverting changes.
Training on augumented user 99500 7/50 current_auc = 0.7066811909949166
User 99500 AUC after training: 0.7065359477124183
User 99500 does not improve AUC. Reverting changes.
Training on augumented user 124822 8/50 current_auc = 0.7066811909949166
User 124822 AUC after training: 0.7058823529411765
User 124822 does not improve AUC. Reverting changes.
Training on augumented user 60973 9/50 current_auc = 0.7066811909949166
User 60973 AUC after training: 0.7068990559186638
User 60973 improves AUC. Keeping the model.
Training on augumented user 85615 10/50 current_auc = 0.7068990559186638
User 85615 AUC after training: 0.7061002178649239
User 85615 does not improve AUC. Reverting changes.
Training on augumented user 43177 11/50 current_auc = 0.7068990559186638
User 43177 AUC after training: 0.7052287581699347
User 43177 does not improve AUC. Reverting changes.
Training on augumented user 136190 12/50 current_auc = 0.7068990559186638
User 136190 AUC after training: 0.7059912854030501
User 136190 does not improve AUC. Reverting changes.
Training on augumented user 137313 13/50 current_auc = 0.7068990559186638
User 137313 AUC after training: 0.7050835148874366
User 137313 does not improve AUC. Reverting changes.
Training on augumented user 100622 14/50 current_auc = 0.7068990559186638
User 100622 AUC after training: 0.7062454611474219
User 100622 does not improve AUC. Reverting changes.
Training on augumented user 130319 15/50 current_auc = 0.7068990559186638
User 130319 AUC after training: 0.7067538126361655
User 130319 does not improve AUC. Reverting changes.
Training on augumented user 33244 16/50 current_auc = 0.7068990559186638
User 33244 AUC after training: 0.7066085693536674
User 33244 does not improve AUC. Reverting changes.
Training on augumented user 53269 17/50 current_auc = 0.7068990559186638
User 53269 AUC after training: 0.7066811909949166
User 53269 does not improve AUC. Reverting changes.
Training on augumented user 76313 18/50 current_auc = 0.7068990559186638
User 76313 AUC after training: 0.7069716775599127
User 76313 improves AUC. Keeping the model.
Training on augumented user 3195 19/50 current_auc = 0.7069716775599127
User 3195 AUC after training: 0.7058823529411764
User 3195 does not improve AUC. Reverting changes.
Training on augumented user 118032 20/50 current_auc = 0.7069716775599127
User 118032 AUC after training: 0.7061002178649237
User 118032 does not improve AUC. Reverting changes.
Training on augumented user 17426 21/50 current_auc = 0.7069716775599127
User 17426 AUC after training: 0.7068264342774148
User 17426 does not improve AUC. Reverting changes.
Training on augumented user 107988 22/50 current_auc = 0.7069716775599127
User 107988 AUC after training: 0.7062454611474219
User 107988 does not improve AUC. Reverting changes.
Training on augumented user 23456 23/50 current_auc = 0.7069716775599127
User 23456 AUC after training: 0.7059549745824256
User 23456 does not improve AUC. Reverting changes.
Training on augumented user 51695 24/50 current_auc = 0.7069716775599127
User 51695 AUC after training: 0.7066085693536674
User 51695 does not improve AUC. Reverting changes.
Training on augumented user 31031 25/50 current_auc = 0.7069716775599127
User 31031 AUC after training: 0.7064633260711692
User 31031 does not improve AUC. Reverting changes.
Training on augumented user 131343 26/50 current_auc = 0.7069716775599127
User 131343 AUC after training: 0.7066085693536673
User 131343 does not improve AUC. Reverting changes.
Training on augumented user 1549 27/50 current_auc = 0.7069716775599127
User 1549 AUC after training: 0.7066085693536673
User 1549 does not improve AUC. Reverting changes.
Training on augumented user 21697 28/50 current_auc = 0.7069716775599127
User 21697 AUC after training: 0.7066085693536674
User 21697 does not improve AUC. Reverting changes.
Training on augumented user 73657 29/50 current_auc = 0.7069716775599127
User 73657 AUC after training: 0.7067538126361657
User 73657 does not improve AUC. Reverting changes.
Training on augumented user 59605 30/50 current_auc = 0.7069716775599127
User 59605 AUC after training: 0.707044299201162
User 59605 improves AUC. Keeping the model.
Training on augumented user 18471 31/50 current_auc = 0.707044299201162
User 18471 AUC after training: 0.7037400145243281
User 18471 does not improve AUC. Reverting changes.
Training on augumented user 93018 32/50 current_auc = 0.707044299201162
User 93018 AUC after training: 0.7037037037037037
User 93018 does not improve AUC. Reverting changes.
Training on augumented user 94720 33/50 current_auc = 0.707044299201162
User 94720 AUC after training: 0.7061002178649237
User 94720 does not improve AUC. Reverting changes.
Training on augumented user 39381 34/50 current_auc = 0.707044299201162
User 39381 AUC after training: 0.7056644880174293
User 39381 does not improve AUC. Reverting changes.
Training on augumented user 70590 35/50 current_auc = 0.707044299201162
User 70590 AUC after training: 0.7072621641249093
User 70590 improves AUC. Keeping the model.
Training on augumented user 478 36/50 current_auc = 0.7072621641249093
User 478 AUC after training: 0.7071169208424112
User 478 does not improve AUC. Reverting changes.
Training on augumented user 55185 37/50 current_auc = 0.7072621641249093
User 55185 AUC after training: 0.7068990559186638
User 55185 does not improve AUC. Reverting changes.
Training on augumented user 134767 38/50 current_auc = 0.7072621641249093
User 134767 AUC after training: 0.7067538126361655
User 134767 does not improve AUC. Reverting changes.
Training on augumented user 129615 39/50 current_auc = 0.7072621641249093
User 129615 AUC after training: 0.7071169208424111
User 129615 does not improve AUC. Reverting changes.
Training on augumented user 114824 40/50 current_auc = 0.7072621641249093
User 114824 AUC after training: 0.7066085693536674
User 114824 does not improve AUC. Reverting changes.
Training on augumented user 112599 41/50 current_auc = 0.7072621641249093
User 112599 AUC after training: 0.7066811909949164
User 112599 does not improve AUC. Reverting changes.
Training on augumented user 107767 42/50 current_auc = 0.7072621641249093
User 107767 AUC after training: 0.7061002178649237
User 107767 does not improve AUC. Reverting changes.
Training on augumented user 124956 43/50 current_auc = 0.7072621641249093
User 124956 AUC after training: 0.7073347857661584
User 124956 improves AUC. Keeping the model.
Training on augumented user 134543 44/50 current_auc = 0.7073347857661584
User 134543 AUC after training: 0.7063907044299201
User 134543 does not improve AUC. Reverting changes.
Training on augumented user 121246 45/50 current_auc = 0.7073347857661584
User 121246 AUC after training: 0.7071169208424111
User 121246 does not improve AUC. Reverting changes.
Training on augumented user 46805 46/50 current_auc = 0.7073347857661584
User 46805 AUC after training: 0.7068990559186639
User 46805 does not improve AUC. Reverting changes.
Training on augumented user 52569 47/50 current_auc = 0.7073347857661584
User 52569 AUC after training: 0.7071169208424112
User 52569 does not improve AUC. Reverting changes.
Training on augumented user 3957 48/50 current_auc = 0.7073347857661584
User 3957 AUC after training: 0.707044299201162
User 3957 does not improve AUC. Reverting changes.
Training on augumented user 77401 49/50 current_auc = 0.7073347857661584
User 77401 AUC after training: 0.7067538126361655
User 77401 does not improve AUC. Reverting changes.
[2024-12-02 20:22:42.466478] start test user 7186 304/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:22:43.255715] start test user 7186 304/568 recall augumented users by random, augumented_users = [12852, 121773, 83258, 42692, 99831, 104930, 28054, 16936, 86456, 36452, 40501, 3933, 124873, 66681, 7885, 22652, 7562, 108829, 37960, 69777, 90872, 27307, 117119, 97219, 77856, 119442, 61003, 15766, 18459, 63491, 4112, 120085, 127147, 131077, 54948, 8607, 15033, 18615, 134218, 86073, 15840, 108661, 25852, 58019, 135664, 22307, 19264, 115411, 58046, 41274]
[2024-12-02 20:22:43.271325] user = 7186 Cloud 304/568
[2024-12-02 20:22:43.289556] user = 7186 Local 304/568
[2024-12-02 20:22:43.318134] user = 7186 Local+ 304/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:22:45.733109] user = 7186 MPDA- 304/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7046117148157963
Training on augumented user 12852 0/50 current_auc = 0.7046117148157963
User 12852 AUC after training: 0.7039491121123774
User 12852 does not improve AUC. Reverting changes.
Training on augumented user 121773 1/50 current_auc = 0.7046117148157963
User 121773 AUC after training: 0.7044791942751126
User 121773 does not improve AUC. Reverting changes.
Training on augumented user 83258 2/50 current_auc = 0.7046117148157963
User 83258 AUC after training: 0.7043466737344288
User 83258 does not improve AUC. Reverting changes.
Training on augumented user 42692 3/50 current_auc = 0.7046117148157963
User 42692 AUC after training: 0.7048767558971641
User 42692 improves AUC. Keeping the model.
Training on augumented user 99831 4/50 current_auc = 0.7048767558971641
User 99831 AUC after training: 0.7044791942751126
User 99831 does not improve AUC. Reverting changes.
Training on augumented user 104930 5/50 current_auc = 0.7048767558971641
User 104930 AUC after training: 0.7046117148157965
User 104930 does not improve AUC. Reverting changes.
Training on augumented user 28054 6/50 current_auc = 0.7048767558971641
User 28054 AUC after training: 0.7047442353564802
User 28054 does not improve AUC. Reverting changes.
Training on augumented user 16936 7/50 current_auc = 0.7048767558971641
User 16936 AUC after training: 0.7059369202226343
User 16936 improves AUC. Keeping the model.
Training on augumented user 86456 8/50 current_auc = 0.7059369202226343
User 86456 AUC after training: 0.7056718791412669
User 86456 does not improve AUC. Reverting changes.
Training on augumented user 36452 9/50 current_auc = 0.7059369202226343
User 36452 AUC after training: 0.7059369202226345
User 36452 improves AUC. Keeping the model.
Training on augumented user 40501 10/50 current_auc = 0.7059369202226345
User 40501 AUC after training: 0.7062019613040021
User 40501 improves AUC. Keeping the model.
Training on augumented user 3933 11/50 current_auc = 0.7062019613040021
User 3933 AUC after training: 0.7063344818446858
User 3933 improves AUC. Keeping the model.
Training on augumented user 124873 12/50 current_auc = 0.7063344818446858
User 124873 AUC after training: 0.7062019613040021
User 124873 does not improve AUC. Reverting changes.
Training on augumented user 66681 13/50 current_auc = 0.7063344818446858
User 66681 AUC after training: 0.7064670023853697
User 66681 improves AUC. Keeping the model.
Training on augumented user 7885 14/50 current_auc = 0.7064670023853697
User 7885 AUC after training: 0.7064670023853697
User 7885 does not improve AUC. Reverting changes.
Training on augumented user 22652 15/50 current_auc = 0.7064670023853697
User 22652 AUC after training: 0.7064670023853697
User 22652 does not improve AUC. Reverting changes.
Training on augumented user 7562 16/50 current_auc = 0.7064670023853697
User 7562 AUC after training: 0.7063344818446858
User 7562 does not improve AUC. Reverting changes.
Training on augumented user 108829 17/50 current_auc = 0.7064670023853697
User 108829 AUC after training: 0.7062019613040021
User 108829 does not improve AUC. Reverting changes.
Training on augumented user 37960 18/50 current_auc = 0.7064670023853697
User 37960 AUC after training: 0.7067320434667373
User 37960 improves AUC. Keeping the model.
Training on augumented user 69777 19/50 current_auc = 0.7067320434667373
User 69777 AUC after training: 0.7064670023853697
User 69777 does not improve AUC. Reverting changes.
Training on augumented user 90872 20/50 current_auc = 0.7067320434667373
User 90872 AUC after training: 0.7064670023853697
User 90872 does not improve AUC. Reverting changes.
Training on augumented user 27307 21/50 current_auc = 0.7067320434667373
User 27307 AUC after training: 0.7067320434667373
User 27307 does not improve AUC. Reverting changes.
Training on augumented user 117119 22/50 current_auc = 0.7067320434667373
User 117119 AUC after training: 0.7062019613040021
User 117119 does not improve AUC. Reverting changes.
Training on augumented user 97219 23/50 current_auc = 0.7067320434667373
User 97219 AUC after training: 0.7065995229260534
User 97219 does not improve AUC. Reverting changes.
Training on augumented user 77856 24/50 current_auc = 0.7067320434667373
User 77856 AUC after training: 0.7065995229260537
User 77856 does not improve AUC. Reverting changes.
Training on augumented user 119442 25/50 current_auc = 0.7067320434667373
User 119442 AUC after training: 0.706997084548105
User 119442 improves AUC. Keeping the model.
Training on augumented user 61003 26/50 current_auc = 0.706997084548105
User 61003 AUC after training: 0.7075271667108401
User 61003 improves AUC. Keeping the model.
Training on augumented user 15766 27/50 current_auc = 0.7075271667108401
User 15766 AUC after training: 0.706864564007421
User 15766 does not improve AUC. Reverting changes.
Training on augumented user 18459 28/50 current_auc = 0.7075271667108401
User 18459 AUC after training: 0.7071296050887886
User 18459 does not improve AUC. Reverting changes.
Training on augumented user 63491 29/50 current_auc = 0.7075271667108401
User 63491 AUC after training: 0.706864564007421
User 63491 does not improve AUC. Reverting changes.
Training on augumented user 4112 30/50 current_auc = 0.7075271667108401
User 4112 AUC after training: 0.7075271667108401
User 4112 does not improve AUC. Reverting changes.
Training on augumented user 120085 31/50 current_auc = 0.7075271667108401
User 120085 AUC after training: 0.7071296050887886
User 120085 does not improve AUC. Reverting changes.
Training on augumented user 127147 32/50 current_auc = 0.7075271667108401
User 127147 AUC after training: 0.7075271667108401
User 127147 does not improve AUC. Reverting changes.
Training on augumented user 131077 33/50 current_auc = 0.7075271667108401
User 131077 AUC after training: 0.7058043996819506
User 131077 does not improve AUC. Reverting changes.
Training on augumented user 54948 34/50 current_auc = 0.7075271667108401
User 54948 AUC after training: 0.7075271667108401
User 54948 does not improve AUC. Reverting changes.
Training on augumented user 8607 35/50 current_auc = 0.7075271667108401
User 8607 AUC after training: 0.7071296050887889
User 8607 does not improve AUC. Reverting changes.
Training on augumented user 15033 36/50 current_auc = 0.7075271667108401
User 15033 AUC after training: 0.7072621256294725
User 15033 does not improve AUC. Reverting changes.
Training on augumented user 18615 37/50 current_auc = 0.7075271667108401
User 18615 AUC after training: 0.7071296050887886
User 18615 does not improve AUC. Reverting changes.
Training on augumented user 134218 38/50 current_auc = 0.7075271667108401
User 134218 AUC after training: 0.7068645640074211
User 134218 does not improve AUC. Reverting changes.
Training on augumented user 86073 39/50 current_auc = 0.7075271667108401
User 86073 AUC after training: 0.7072621256294725
User 86073 does not improve AUC. Reverting changes.
Training on augumented user 15840 40/50 current_auc = 0.7075271667108401
User 15840 AUC after training: 0.706997084548105
User 15840 does not improve AUC. Reverting changes.
Training on augumented user 108661 41/50 current_auc = 0.7075271667108401
User 108661 AUC after training: 0.7071296050887886
User 108661 does not improve AUC. Reverting changes.
Training on augumented user 25852 42/50 current_auc = 0.7075271667108401
User 25852 AUC after training: 0.7073946461701562
User 25852 does not improve AUC. Reverting changes.
Training on augumented user 58019 43/50 current_auc = 0.7075271667108401
User 58019 AUC after training: 0.7071296050887889
User 58019 does not improve AUC. Reverting changes.
Training on augumented user 135664 44/50 current_auc = 0.7075271667108401
User 135664 AUC after training: 0.7071296050887886
User 135664 does not improve AUC. Reverting changes.
Training on augumented user 22307 45/50 current_auc = 0.7075271667108401
User 22307 AUC after training: 0.7075271667108401
User 22307 does not improve AUC. Reverting changes.
Training on augumented user 19264 46/50 current_auc = 0.7075271667108401
User 19264 AUC after training: 0.706997084548105
User 19264 does not improve AUC. Reverting changes.
Training on augumented user 115411 47/50 current_auc = 0.7075271667108401
User 115411 AUC after training: 0.7072621256294725
User 115411 does not improve AUC. Reverting changes.
Training on augumented user 58046 48/50 current_auc = 0.7075271667108401
User 58046 AUC after training: 0.706864564007421
User 58046 does not improve AUC. Reverting changes.
Training on augumented user 41274 49/50 current_auc = 0.7075271667108401
User 41274 AUC after training: 0.7077922077922078
User 41274 improves AUC. Keeping the model.
[2024-12-02 20:23:16.578283] start test user 7191 305/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:23:17.125251] start test user 7191 305/568 recall augumented users by random, augumented_users = [125226, 85949, 111330, 16999, 50659, 20761, 94789, 104050, 62846, 134978, 8042, 117825, 68535, 37395, 113076, 52874, 9125, 115121, 93181, 63630, 129569, 55604, 27565, 133344, 50408, 23417, 73637, 127014, 103236, 124634, 98102, 118842, 81400, 5764, 65474, 116427, 129016, 84855, 92820, 124674, 84988, 30923, 76992, 76091, 126094, 23704, 30064, 40770, 72342, 37092]
[2024-12-02 20:23:17.140020] user = 7191 Cloud 305/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:23:17.147109] user = 7191 Local 305/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:23:17.176014] user = 7191 Local+ 305/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:23:19.288497] user = 7191 MPDA- 305/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 125226 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125226 AUC after training: 0.5
User 125226 does not improve AUC. Reverting changes.
Training on augumented user 85949 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85949 AUC after training: 0.5
User 85949 does not improve AUC. Reverting changes.
Training on augumented user 111330 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111330 AUC after training: 0.5
User 111330 does not improve AUC. Reverting changes.
Training on augumented user 16999 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16999 AUC after training: 0.5
User 16999 does not improve AUC. Reverting changes.
Training on augumented user 50659 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50659 AUC after training: 0.5
User 50659 does not improve AUC. Reverting changes.
Training on augumented user 20761 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20761 AUC after training: 0.5
User 20761 does not improve AUC. Reverting changes.
Training on augumented user 94789 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94789 AUC after training: 0.5
User 94789 does not improve AUC. Reverting changes.
Training on augumented user 104050 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104050 AUC after training: 0.5
User 104050 does not improve AUC. Reverting changes.
Training on augumented user 62846 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62846 AUC after training: 0.5
User 62846 does not improve AUC. Reverting changes.
Training on augumented user 134978 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134978 AUC after training: 0.5
User 134978 does not improve AUC. Reverting changes.
Training on augumented user 8042 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8042 AUC after training: 0.5
User 8042 does not improve AUC. Reverting changes.
Training on augumented user 117825 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117825 AUC after training: 0.5
User 117825 does not improve AUC. Reverting changes.
Training on augumented user 68535 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68535 AUC after training: 0.5
User 68535 does not improve AUC. Reverting changes.
Training on augumented user 37395 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37395 AUC after training: 0.5
User 37395 does not improve AUC. Reverting changes.
Training on augumented user 113076 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113076 AUC after training: 0.5
User 113076 does not improve AUC. Reverting changes.
Training on augumented user 52874 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52874 AUC after training: 0.5
User 52874 does not improve AUC. Reverting changes.
Training on augumented user 9125 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9125 AUC after training: 0.5
User 9125 does not improve AUC. Reverting changes.
Training on augumented user 115121 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115121 AUC after training: 0.5
User 115121 does not improve AUC. Reverting changes.
Training on augumented user 93181 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93181 AUC after training: 0.5
User 93181 does not improve AUC. Reverting changes.
Training on augumented user 63630 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63630 AUC after training: 0.5
User 63630 does not improve AUC. Reverting changes.
Training on augumented user 129569 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129569 AUC after training: 0.5
User 129569 does not improve AUC. Reverting changes.
Training on augumented user 55604 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55604 AUC after training: 0.5
User 55604 does not improve AUC. Reverting changes.
Training on augumented user 27565 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27565 AUC after training: 0.5
User 27565 does not improve AUC. Reverting changes.
Training on augumented user 133344 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133344 AUC after training: 0.5
User 133344 does not improve AUC. Reverting changes.
Training on augumented user 50408 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50408 AUC after training: 0.5
User 50408 does not improve AUC. Reverting changes.
Training on augumented user 23417 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23417 AUC after training: 0.5
User 23417 does not improve AUC. Reverting changes.
Training on augumented user 73637 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73637 AUC after training: 0.5
User 73637 does not improve AUC. Reverting changes.
Training on augumented user 127014 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127014 AUC after training: 0.5
User 127014 does not improve AUC. Reverting changes.
Training on augumented user 103236 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103236 AUC after training: 0.5
User 103236 does not improve AUC. Reverting changes.
Training on augumented user 124634 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124634 AUC after training: 0.5
User 124634 does not improve AUC. Reverting changes.
Training on augumented user 98102 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98102 AUC after training: 0.5
User 98102 does not improve AUC. Reverting changes.
Training on augumented user 118842 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118842 AUC after training: 0.5
User 118842 does not improve AUC. Reverting changes.
Training on augumented user 81400 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81400 AUC after training: 0.5
User 81400 does not improve AUC. Reverting changes.
Training on augumented user 5764 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5764 AUC after training: 0.5
User 5764 does not improve AUC. Reverting changes.
Training on augumented user 65474 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65474 AUC after training: 0.5
User 65474 does not improve AUC. Reverting changes.
Training on augumented user 116427 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116427 AUC after training: 0.5
User 116427 does not improve AUC. Reverting changes.
Training on augumented user 129016 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129016 AUC after training: 0.5
User 129016 does not improve AUC. Reverting changes.
Training on augumented user 84855 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84855 AUC after training: 0.5
User 84855 does not improve AUC. Reverting changes.
Training on augumented user 92820 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92820 AUC after training: 0.5
User 92820 does not improve AUC. Reverting changes.
Training on augumented user 124674 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124674 AUC after training: 0.5
User 124674 does not improve AUC. Reverting changes.
Training on augumented user 84988 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84988 AUC after training: 0.5
User 84988 does not improve AUC. Reverting changes.
Training on augumented user 30923 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30923 AUC after training: 0.5
User 30923 does not improve AUC. Reverting changes.
Training on augumented user 76992 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76992 AUC after training: 0.5
User 76992 does not improve AUC. Reverting changes.
Training on augumented user 76091 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76091 AUC after training: 0.5
User 76091 does not improve AUC. Reverting changes.
Training on augumented user 126094 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126094 AUC after training: 0.5
User 126094 does not improve AUC. Reverting changes.
Training on augumented user 23704 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23704 AUC after training: 0.5
User 23704 does not improve AUC. Reverting changes.
Training on augumented user 30064 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30064 AUC after training: 0.5
User 30064 does not improve AUC. Reverting changes.
Training on augumented user 40770 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40770 AUC after training: 0.5
User 40770 does not improve AUC. Reverting changes.
Training on augumented user 72342 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72342 AUC after training: 0.5
User 72342 does not improve AUC. Reverting changes.
Training on augumented user 37092 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37092 AUC after training: 0.5
User 37092 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:23:47.739411] start test user 7201 306/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:23:48.358119] start test user 7201 306/568 recall augumented users by random, augumented_users = [128494, 26956, 80620, 15807, 60918, 28138, 7923, 51202, 24610, 45781, 120395, 2334, 84395, 39704, 93499, 31423, 869, 34829, 47122, 114409, 28779, 117497, 17871, 33411, 11816, 50398, 71644, 43427, 22075, 7274, 44650, 138112, 37588, 134934, 103880, 99173, 28231, 83289, 30958, 16629, 119303, 63647, 59021, 70627, 112069, 53977, 138031, 1511, 112977, 71692]
[2024-12-02 20:23:48.377461] user = 7201 Cloud 306/568
[2024-12-02 20:23:48.436403] user = 7201 Local 306/568
[2024-12-02 20:23:49.067575] user = 7201 Local+ 306/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:23:51.985829] user = 7201 MPDA- 306/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5155215577190543
Training on augumented user 128494 0/50 current_auc = 0.5155215577190543
User 128494 AUC after training: 0.515201668984701
User 128494 does not improve AUC. Reverting changes.
Training on augumented user 26956 1/50 current_auc = 0.5155215577190543
User 26956 AUC after training: 0.5154102920723227
User 26956 does not improve AUC. Reverting changes.
Training on augumented user 80620 2/50 current_auc = 0.5155215577190543
User 80620 AUC after training: 0.5154450625869264
User 80620 does not improve AUC. Reverting changes.
Training on augumented user 15807 3/50 current_auc = 0.5155215577190543
User 15807 AUC after training: 0.5153963838664812
User 15807 does not improve AUC. Reverting changes.
Training on augumented user 60918 4/50 current_auc = 0.5155215577190543
User 60918 AUC after training: 0.5157162726008345
User 60918 improves AUC. Keeping the model.
Training on augumented user 28138 5/50 current_auc = 0.5157162726008345
User 28138 AUC after training: 0.5153685674547983
User 28138 does not improve AUC. Reverting changes.
Training on augumented user 7923 6/50 current_auc = 0.5157162726008345
User 7923 AUC after training: 0.5159109874826148
User 7923 improves AUC. Keeping the model.
Training on augumented user 51202 7/50 current_auc = 0.5159109874826148
User 51202 AUC after training: 0.5159248956884561
User 51202 improves AUC. Keeping the model.
Training on augumented user 24610 8/50 current_auc = 0.5159248956884561
User 24610 AUC after training: 0.5156606397774687
User 24610 does not improve AUC. Reverting changes.
Training on augumented user 45781 9/50 current_auc = 0.5159248956884561
User 45781 AUC after training: 0.5158692628650905
User 45781 does not improve AUC. Reverting changes.
Training on augumented user 120395 10/50 current_auc = 0.5159248956884561
