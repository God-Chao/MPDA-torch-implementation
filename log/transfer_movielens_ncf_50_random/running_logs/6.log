[2024-12-02 17:37:35.671162] start transfer model NCF
{'recall_num': 50, 'recall_alg': 'random', 'epochs': 1, 'device': 'cuda:5', 'batch_size': 64, 'task_index': 6, 'num_task': 10, 'lr': 0.001}
test users have been loaded, len = 568
test users = ['82825' '82839' '82873' '82908' '82909' '82957' '82981' '83019' '83063'
 '83081' '83105' '83122' '83151' '83159' '83172' '83198' '83202' '83214'
 '83218' '83230' '83275' '83305' '83313' '83331' '83337' '83358' '83431'
 '83484' '83506' '83518' '83531' '83553' '83554' '83556' '83601' '83639'
 '83717' '83806' '83812' '83822' '83823' '83824' '83825' '83826' '83835'
 '83855' '83863' '83874' '83904' '83947' '83964' '83978' '83981' '83982'
 '84046' '84050' '84068' '84105' '84108' '84109' '84125' '84133' '84151'
 '84160' '84161' '84182' '84247' '84254' '84374' '84379' '84390' '84392'
 '84404' '84441' '84465' '84476' '84558' '84590' '84614' '84726' '84751'
 '84752' '84785' '84792' '84809' '84826' '84840' '84849' '84852' '84865'
 '84872' '84886' '84916' '84923' '84940' '84958' '84962' '84963' '84964'
 '84980' '85014' '85021' '85041' '85053' '85079' '85103' '85127' '85128'
 '85148' '85180' '85190' '85257' '85303' '85314' '85324' '85392' '85470'
 '85492' '85515' '85525' '85527' '85544' '85574' '85581' '85605' '85609'
 '85610' '85640' '85662' '85739' '85743' '85750' '85792' '85813' '85893'
 '85897' '85914' '85926' '85928' '85987' '86054' '86066' '86110' '86111'
 '86156' '86169' '86214' '86245' '86285' '86301' '86303' '86342' '86375'
 '86388' '86403' '86410' '86449' '86461' '86467' '86477' '86482' '86487'
 '86525' '86529' '86586' '86592' '86619' '86639' '86640' '86684' '86721'
 '86722' '86730' '86741' '86754' '86768' '86783' '86821' '86840' '86847'
 '86852' '86875' '86883' '86921' '86922' '86965' '86973' '87009' '87012'
 '87062' '87066' '87070' '87094' '87135' '87163' '87267' '87271' '87290'
 '87321' '87329' '87331' '87348' '87360' '87383' '87385' '87405' '87416'
 '87428' '87441' '87444' '87445' '87486' '87495' '87502' '87503' '87532'
 '87537' '87573' '87576' '87577' '87586' '87694' '87703' '87737' '87746'
 '87797' '87803' '87832' '87838' '87931' '87942' '87954' '87992' '88015'
 '88044' '88126' '88134' '88164' '88166' '88266' '88267' '88312' '88371'
 '88412' '88423' '88484' '88546' '88561' '88570' '88574' '88628' '88641'
 '88646' '88651' '88687' '88738' '88739' '88773' '88798' '88818' '88820'
 '88821' '88832' '88833' '88836' '88851' '88857' '88883' '88907' '88950'
 '88953' '88956' '89045' '89059' '89069' '89088' '89096' '89128' '89180'
 '89209' '89211' '89213' '89242' '89299' '89310' '89331' '89392' '89406'
 '89442' '89454' '89459' '89460' '89501' '89520' '89527' '89529' '89564'
 '89618' '89658' '89670' '89688' '89721' '89722' '89771' '89799' '89804'
 '89848' '89854' '89869' '89891' '90013' '90033' '90045' '90078' '90131'
 '90145' '90204' '90208' '90242' '90250' '90255' '90361' '90381' '90382'
 '90394' '90422' '90458' '90462' '90500' '90513' '90553' '90569' '90584'
 '90628' '90702' '90709' '90727' '90730' '90746' '90754' '90837' '90861'
 '90876' '90896' '90922' '90928' '90938' '90963' '90967' '90968' '91017'
 '91055' '91070' '91073' '91088' '91114' '91160' '91184' '91193' '91225'
 '91231' '91252' '91278' '91357' '91411' '91416' '91435' '91507' '91514'
 '91536' '91544' '91553' '91559' '91572' '91583' '91587' '91611' '91626'
 '91643' '91746' '91756' '91775' '91891' '91912' '92011' '92086' '92183'
 '92260' '92317' '92362' '92407' '92409' '92415' '92422' '92431' '92472'
 '92481' '92485' '92499' '92516' '92518' '92533' '92607' '92634' '92636'
 '92637' '92642' '92693' '92703' '92706' '92726' '92743' '92838' '92875'
 '92980' '92992' '93004' '93007' '93037' '93062' '93100' '93102' '93146'
 '93216' '93217' '93234' '93252' '93309' '93316' '93318' '93344' '93387'
 '93388' '93392' '93411' '93413' '93446' '93493' '93525' '93536' '93547'
 '93549' '93555' '93561' '93568' '93571' '93595' '93596' '93606' '93670'
 '93705' '93710' '93718' '93733' '93742' '93749' '93770' '93774' '93808'
 '93925' '93954' '93987' '93995' '94013' '94033' '94036' '94042' '94047'
 '94092' '94110' '94123' '94133' '94183' '94210' '94256' '94277' '94278'
 '94330' '94339' '94377' '94383' '94401' '94405' '94437' '94483' '94484'
 '94541' '94584' '94594' '94610' '94650' '94695' '94700' '94728' '94744'
 '94760' '94789' '94823' '94826' '94855' '94876' '94883' '94890' '94893'
 '94914' '94957' '94962' '94976' '94985' '94991' '95109' '95127' '95161'
 '95179' '95221' '95232' '95238' '95254' '95283' '95301' '95327' '95336'
 '95339' '95357' '95423' '95446' '95501' '95607' '95614' '95657' '95694'
 '95703' '95726' '95737' '95789' '95815' '95823' '95840' '95865' '95882'
 '95895' '95912' '95925' '95932' '95935' '95944' '95987' '96009' '96027'
 '96039' '96046' '96104' '96109' '96112' '96180' '96189' '96204' '96209'
 '96224' '96225' '96226' '96232' '96315' '96340' '96370' '96378' '96406'
 '96423']
[2024-12-02 17:37:35.683203] start test on test users
[2024-12-02 17:37:35.683245] start test user 82825 0/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:37:36.830553] start test user 82825 0/568 recall augumented users by random, augumented_users = [104874, 23411, 98273, 98634, 75554, 124994, 124004, 33313, 33405, 37909, 54161, 63381, 103143, 43965, 79772, 14738, 59100, 15697, 91127, 111034, 110044, 115518, 11589, 71722, 106056, 28812, 23699, 37209, 76792, 14181, 1633, 26795, 99824, 115086, 51257, 50178, 86400, 16391, 125333, 68984, 47414, 2018, 14972, 131398, 124762, 4523, 126852, 83787, 131789, 133288]
[2024-12-02 17:37:36.846166] user = 82825 Cloud 0/568
[2024-12-02 17:37:42.398315] user = 82825 Local 0/568
[2024-12-02 17:37:42.994194] user = 82825 Local+ 0/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:37:45.327118] user = 82825 MPDA- 0/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7034313725490196
Training on augumented user 104874 0/50 current_auc = 0.7034313725490196
User 104874 AUC after training: 0.7058823529411764
User 104874 improves AUC. Keeping the model.
Training on augumented user 23411 1/50 current_auc = 0.7058823529411764
User 23411 AUC after training: 0.7083333333333333
User 23411 improves AUC. Keeping the model.
Training on augumented user 98273 2/50 current_auc = 0.7083333333333333
User 98273 AUC after training: 0.7058823529411764
User 98273 does not improve AUC. Reverting changes.
Training on augumented user 98634 3/50 current_auc = 0.7083333333333333
User 98634 AUC after training: 0.7083333333333333
User 98634 does not improve AUC. Reverting changes.
Training on augumented user 75554 4/50 current_auc = 0.7083333333333333
User 75554 AUC after training: 0.7144607843137254
User 75554 improves AUC. Keeping the model.
Training on augumented user 124994 5/50 current_auc = 0.7144607843137254
User 124994 AUC after training: 0.7120098039215687
User 124994 does not improve AUC. Reverting changes.
Training on augumented user 124004 6/50 current_auc = 0.7144607843137254
User 124004 AUC after training: 0.7083333333333333
User 124004 does not improve AUC. Reverting changes.
Training on augumented user 33313 7/50 current_auc = 0.7144607843137254
User 33313 AUC after training: 0.7144607843137254
User 33313 does not improve AUC. Reverting changes.
Training on augumented user 33405 8/50 current_auc = 0.7144607843137254
User 33405 AUC after training: 0.7144607843137254
User 33405 does not improve AUC. Reverting changes.
Training on augumented user 37909 9/50 current_auc = 0.7144607843137254
User 37909 AUC after training: 0.7120098039215687
User 37909 does not improve AUC. Reverting changes.
Training on augumented user 54161 10/50 current_auc = 0.7144607843137254
User 54161 AUC after training: 0.7120098039215687
User 54161 does not improve AUC. Reverting changes.
Training on augumented user 63381 11/50 current_auc = 0.7144607843137254
User 63381 AUC after training: 0.7144607843137254
User 63381 does not improve AUC. Reverting changes.
Training on augumented user 103143 12/50 current_auc = 0.7144607843137254
User 103143 AUC after training: 0.7120098039215687
User 103143 does not improve AUC. Reverting changes.
Training on augumented user 43965 13/50 current_auc = 0.7144607843137254
User 43965 AUC after training: 0.7107843137254901
User 43965 does not improve AUC. Reverting changes.
Training on augumented user 79772 14/50 current_auc = 0.7144607843137254
User 79772 AUC after training: 0.7144607843137254
User 79772 does not improve AUC. Reverting changes.
Training on augumented user 14738 15/50 current_auc = 0.7144607843137254
User 14738 AUC after training: 0.7120098039215687
User 14738 does not improve AUC. Reverting changes.
Training on augumented user 59100 16/50 current_auc = 0.7144607843137254
User 59100 AUC after training: 0.7058823529411764
User 59100 does not improve AUC. Reverting changes.
Training on augumented user 15697 17/50 current_auc = 0.7144607843137254
User 15697 AUC after training: 0.7144607843137254
User 15697 does not improve AUC. Reverting changes.
Training on augumented user 91127 18/50 current_auc = 0.7144607843137254
User 91127 AUC after training: 0.7120098039215687
User 91127 does not improve AUC. Reverting changes.
Training on augumented user 111034 19/50 current_auc = 0.7144607843137254
User 111034 AUC after training: 0.7144607843137254
User 111034 does not improve AUC. Reverting changes.
Training on augumented user 110044 20/50 current_auc = 0.7144607843137254
User 110044 AUC after training: 0.7120098039215687
User 110044 does not improve AUC. Reverting changes.
Training on augumented user 115518 21/50 current_auc = 0.7144607843137254
User 115518 AUC after training: 0.7144607843137254
User 115518 does not improve AUC. Reverting changes.
Training on augumented user 11589 22/50 current_auc = 0.7144607843137254
User 11589 AUC after training: 0.7083333333333333
User 11589 does not improve AUC. Reverting changes.
Training on augumented user 71722 23/50 current_auc = 0.7144607843137254
User 71722 AUC after training: 0.7144607843137254
User 71722 does not improve AUC. Reverting changes.
Training on augumented user 106056 24/50 current_auc = 0.7144607843137254
User 106056 AUC after training: 0.7144607843137254
User 106056 does not improve AUC. Reverting changes.
Training on augumented user 28812 25/50 current_auc = 0.7144607843137254
User 28812 AUC after training: 0.7120098039215687
User 28812 does not improve AUC. Reverting changes.
Training on augumented user 23699 26/50 current_auc = 0.7144607843137254
User 23699 AUC after training: 0.7083333333333333
User 23699 does not improve AUC. Reverting changes.
Training on augumented user 37209 27/50 current_auc = 0.7144607843137254
User 37209 AUC after training: 0.7144607843137254
User 37209 does not improve AUC. Reverting changes.
Training on augumented user 76792 28/50 current_auc = 0.7144607843137254
User 76792 AUC after training: 0.7144607843137254
User 76792 does not improve AUC. Reverting changes.
Training on augumented user 14181 29/50 current_auc = 0.7144607843137254
User 14181 AUC after training: 0.7144607843137254
User 14181 does not improve AUC. Reverting changes.
Training on augumented user 1633 30/50 current_auc = 0.7144607843137254
User 1633 AUC after training: 0.7144607843137254
User 1633 does not improve AUC. Reverting changes.
Training on augumented user 26795 31/50 current_auc = 0.7144607843137254
User 26795 AUC after training: 0.7083333333333333
User 26795 does not improve AUC. Reverting changes.
Training on augumented user 99824 32/50 current_auc = 0.7144607843137254
User 99824 AUC after training: 0.7120098039215687
User 99824 does not improve AUC. Reverting changes.
Training on augumented user 115086 33/50 current_auc = 0.7144607843137254
User 115086 AUC after training: 0.7120098039215687
User 115086 does not improve AUC. Reverting changes.
Training on augumented user 51257 34/50 current_auc = 0.7144607843137254
User 51257 AUC after training: 0.7144607843137254
User 51257 does not improve AUC. Reverting changes.
Training on augumented user 50178 35/50 current_auc = 0.7144607843137254
User 50178 AUC after training: 0.7120098039215687
User 50178 does not improve AUC. Reverting changes.
Training on augumented user 86400 36/50 current_auc = 0.7144607843137254
User 86400 AUC after training: 0.7058823529411764
User 86400 does not improve AUC. Reverting changes.
Training on augumented user 16391 37/50 current_auc = 0.7144607843137254
User 16391 AUC after training: 0.7144607843137254
User 16391 does not improve AUC. Reverting changes.
Training on augumented user 125333 38/50 current_auc = 0.7144607843137254
User 125333 AUC after training: 0.7144607843137254
User 125333 does not improve AUC. Reverting changes.
Training on augumented user 68984 39/50 current_auc = 0.7144607843137254
User 68984 AUC after training: 0.7083333333333333
User 68984 does not improve AUC. Reverting changes.
Training on augumented user 47414 40/50 current_auc = 0.7144607843137254
User 47414 AUC after training: 0.7144607843137254
User 47414 does not improve AUC. Reverting changes.
Training on augumented user 2018 41/50 current_auc = 0.7144607843137254
User 2018 AUC after training: 0.7120098039215687
User 2018 does not improve AUC. Reverting changes.
Training on augumented user 14972 42/50 current_auc = 0.7144607843137254
User 14972 AUC after training: 0.7107843137254901
User 14972 does not improve AUC. Reverting changes.
Training on augumented user 131398 43/50 current_auc = 0.7144607843137254
User 131398 AUC after training: 0.7144607843137254
User 131398 does not improve AUC. Reverting changes.
Training on augumented user 124762 44/50 current_auc = 0.7144607843137254
User 124762 AUC after training: 0.7083333333333333
User 124762 does not improve AUC. Reverting changes.
Training on augumented user 4523 45/50 current_auc = 0.7144607843137254
User 4523 AUC after training: 0.7120098039215687
User 4523 does not improve AUC. Reverting changes.
Training on augumented user 126852 46/50 current_auc = 0.7144607843137254
User 126852 AUC after training: 0.7144607843137254
User 126852 does not improve AUC. Reverting changes.
Training on augumented user 83787 47/50 current_auc = 0.7144607843137254
User 83787 AUC after training: 0.7120098039215687
User 83787 does not improve AUC. Reverting changes.
Training on augumented user 131789 48/50 current_auc = 0.7144607843137254
User 131789 AUC after training: 0.7144607843137254
User 131789 does not improve AUC. Reverting changes.
Training on augumented user 133288 49/50 current_auc = 0.7144607843137254
User 133288 AUC after training: 0.7120098039215687
User 133288 does not improve AUC. Reverting changes.
[2024-12-02 17:38:10.930339] start test user 82839 1/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:38:11.690111] start test user 82839 1/568 recall augumented users by random, augumented_users = [52977, 92737, 46605, 108523, 10050, 19388, 59068, 65912, 60933, 53291, 117703, 46962, 54151, 29770, 67285, 45508, 114796, 111071, 26620, 120016, 133956, 71348, 89616, 103684, 85849, 3131, 110667, 48778, 26830, 44719, 83531, 50591, 54527, 101703, 128426, 113864, 93585, 984, 56797, 51746, 38253, 42156, 46554, 102914, 77329, 62087, 90598, 60922, 104323, 120575]
[2024-12-02 17:38:11.759817] user = 82839 Cloud 1/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:38:11.775413] user = 82839 Local 1/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:38:11.960959] user = 82839 Local+ 1/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:38:15.085080] user = 82839 MPDA- 1/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 52977 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52977 AUC after training: 0.5
User 52977 does not improve AUC. Reverting changes.
Training on augumented user 92737 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92737 AUC after training: 0.5
User 92737 does not improve AUC. Reverting changes.
Training on augumented user 46605 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46605 AUC after training: 0.5
User 46605 does not improve AUC. Reverting changes.
Training on augumented user 108523 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108523 AUC after training: 0.5
User 108523 does not improve AUC. Reverting changes.
Training on augumented user 10050 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10050 AUC after training: 0.5
User 10050 does not improve AUC. Reverting changes.
Training on augumented user 19388 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19388 AUC after training: 0.5
User 19388 does not improve AUC. Reverting changes.
Training on augumented user 59068 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59068 AUC after training: 0.5
User 59068 does not improve AUC. Reverting changes.
Training on augumented user 65912 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65912 AUC after training: 0.5
User 65912 does not improve AUC. Reverting changes.
Training on augumented user 60933 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60933 AUC after training: 0.5
User 60933 does not improve AUC. Reverting changes.
Training on augumented user 53291 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53291 AUC after training: 0.5
User 53291 does not improve AUC. Reverting changes.
Training on augumented user 117703 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117703 AUC after training: 0.5
User 117703 does not improve AUC. Reverting changes.
Training on augumented user 46962 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46962 AUC after training: 0.5
User 46962 does not improve AUC. Reverting changes.
Training on augumented user 54151 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54151 AUC after training: 0.5
User 54151 does not improve AUC. Reverting changes.
Training on augumented user 29770 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29770 AUC after training: 0.5
User 29770 does not improve AUC. Reverting changes.
Training on augumented user 67285 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67285 AUC after training: 0.5
User 67285 does not improve AUC. Reverting changes.
Training on augumented user 45508 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45508 AUC after training: 0.5
User 45508 does not improve AUC. Reverting changes.
Training on augumented user 114796 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114796 AUC after training: 0.5
User 114796 does not improve AUC. Reverting changes.
Training on augumented user 111071 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111071 AUC after training: 0.5
User 111071 does not improve AUC. Reverting changes.
Training on augumented user 26620 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26620 AUC after training: 0.5
User 26620 does not improve AUC. Reverting changes.
Training on augumented user 120016 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120016 AUC after training: 0.5
User 120016 does not improve AUC. Reverting changes.
Training on augumented user 133956 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133956 AUC after training: 0.5
User 133956 does not improve AUC. Reverting changes.
Training on augumented user 71348 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71348 AUC after training: 0.5
User 71348 does not improve AUC. Reverting changes.
Training on augumented user 89616 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89616 AUC after training: 0.5
User 89616 does not improve AUC. Reverting changes.
Training on augumented user 103684 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103684 AUC after training: 0.5
User 103684 does not improve AUC. Reverting changes.
Training on augumented user 85849 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85849 AUC after training: 0.5
User 85849 does not improve AUC. Reverting changes.
Training on augumented user 3131 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3131 AUC after training: 0.5
User 3131 does not improve AUC. Reverting changes.
Training on augumented user 110667 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110667 AUC after training: 0.5
User 110667 does not improve AUC. Reverting changes.
Training on augumented user 48778 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48778 AUC after training: 0.5
User 48778 does not improve AUC. Reverting changes.
Training on augumented user 26830 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26830 AUC after training: 0.5
User 26830 does not improve AUC. Reverting changes.
Training on augumented user 44719 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44719 AUC after training: 0.5
User 44719 does not improve AUC. Reverting changes.
Training on augumented user 83531 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83531 AUC after training: 0.5
User 83531 does not improve AUC. Reverting changes.
Training on augumented user 50591 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50591 AUC after training: 0.5
User 50591 does not improve AUC. Reverting changes.
Training on augumented user 54527 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54527 AUC after training: 0.5
User 54527 does not improve AUC. Reverting changes.
Training on augumented user 101703 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101703 AUC after training: 0.5
User 101703 does not improve AUC. Reverting changes.
Training on augumented user 128426 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128426 AUC after training: 0.5
User 128426 does not improve AUC. Reverting changes.
Training on augumented user 113864 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113864 AUC after training: 0.5
User 113864 does not improve AUC. Reverting changes.
Training on augumented user 93585 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93585 AUC after training: 0.5
User 93585 does not improve AUC. Reverting changes.
Training on augumented user 984 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 984 AUC after training: 0.5
User 984 does not improve AUC. Reverting changes.
Training on augumented user 56797 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56797 AUC after training: 0.5
User 56797 does not improve AUC. Reverting changes.
Training on augumented user 51746 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51746 AUC after training: 0.5
User 51746 does not improve AUC. Reverting changes.
Training on augumented user 38253 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38253 AUC after training: 0.5
User 38253 does not improve AUC. Reverting changes.
Training on augumented user 42156 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42156 AUC after training: 0.5
User 42156 does not improve AUC. Reverting changes.
Training on augumented user 46554 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46554 AUC after training: 0.5
User 46554 does not improve AUC. Reverting changes.
Training on augumented user 102914 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102914 AUC after training: 0.5
User 102914 does not improve AUC. Reverting changes.
Training on augumented user 77329 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77329 AUC after training: 0.5
User 77329 does not improve AUC. Reverting changes.
Training on augumented user 62087 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62087 AUC after training: 0.5
User 62087 does not improve AUC. Reverting changes.
Training on augumented user 90598 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90598 AUC after training: 0.5
User 90598 does not improve AUC. Reverting changes.
Training on augumented user 60922 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60922 AUC after training: 0.5
User 60922 does not improve AUC. Reverting changes.
Training on augumented user 104323 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104323 AUC after training: 0.5
User 104323 does not improve AUC. Reverting changes.
Training on augumented user 120575 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120575 AUC after training: 0.5
User 120575 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:38:44.613732] start test user 82873 2/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:38:45.372998] start test user 82873 2/568 recall augumented users by random, augumented_users = [120173, 42488, 130675, 47758, 47346, 90862, 50855, 111149, 74133, 118685, 68946, 135963, 78618, 125841, 136826, 125318, 19810, 36594, 49796, 123319, 119247, 5979, 39321, 82932, 116270, 39726, 137527, 15054, 123742, 68709, 35734, 60920, 40541, 33549, 113347, 94085, 128682, 27115, 134013, 6237, 22651, 70735, 95116, 39099, 68047, 67159, 123166, 82104, 123760, 21374]
[2024-12-02 17:38:45.388724] user = 82873 Cloud 2/568
[2024-12-02 17:38:45.415419] user = 82873 Local 2/568
[2024-12-02 17:38:45.573033] user = 82873 Local+ 2/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:38:48.385654] user = 82873 MPDA- 2/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5166369984937697
Training on augumented user 120173 0/50 current_auc = 0.5166369984937697
User 120173 AUC after training: 0.518143228810078
User 120173 improves AUC. Keeping the model.
Training on augumented user 42488 1/50 current_auc = 0.518143228810078
User 42488 AUC after training: 0.5165000684650144
User 42488 does not improve AUC. Reverting changes.
Training on augumented user 130675 2/50 current_auc = 0.518143228810078
User 130675 AUC after training: 0.516773928522525
User 130675 does not improve AUC. Reverting changes.
Training on augumented user 47758 3/50 current_auc = 0.518143228810078
User 47758 AUC after training: 0.5182801588388334
User 47758 improves AUC. Keeping the model.
Training on augumented user 47346 4/50 current_auc = 0.5182801588388334
User 47346 AUC after training: 0.5182801588388334
User 47346 does not improve AUC. Reverting changes.
Training on augumented user 90862 5/50 current_auc = 0.5182801588388334
User 90862 AUC after training: 0.5128029576886212
User 90862 does not improve AUC. Reverting changes.
Training on augumented user 50855 6/50 current_auc = 0.5182801588388334
User 50855 AUC after training: 0.5173901136519238
User 50855 does not improve AUC. Reverting changes.
Training on augumented user 111149 7/50 current_auc = 0.5182801588388334
User 111149 AUC after training: 0.5191017390113652
User 111149 improves AUC. Keeping the model.
Training on augumented user 74133 8/50 current_auc = 0.5191017390113652
User 74133 AUC after training: 0.5197863891551417
User 74133 improves AUC. Keeping the model.
Training on augumented user 118685 9/50 current_auc = 0.5197863891551417
User 118685 AUC after training: 0.519512529097631
User 118685 does not improve AUC. Reverting changes.
Training on augumented user 68946 10/50 current_auc = 0.5197863891551417
User 68946 AUC after training: 0.5172531836231685
User 68946 does not improve AUC. Reverting changes.
Training on augumented user 135963 11/50 current_auc = 0.5197863891551417
User 135963 AUC after training: 0.5192386690401205
User 135963 does not improve AUC. Reverting changes.
Training on augumented user 78618 12/50 current_auc = 0.5197863891551417
User 78618 AUC after training: 0.5204025742845406
User 78618 improves AUC. Keeping the model.
Training on augumented user 125841 13/50 current_auc = 0.5204025742845406
User 125841 AUC after training: 0.5202656442557854
User 125841 does not improve AUC. Reverting changes.
Training on augumented user 136826 14/50 current_auc = 0.5204025742845406
User 136826 AUC after training: 0.5219772696152266
User 136826 improves AUC. Keeping the model.
Training on augumented user 125318 15/50 current_auc = 0.5219772696152266
User 125318 AUC after training: 0.5219772696152266
User 125318 does not improve AUC. Reverting changes.
Training on augumented user 19810 16/50 current_auc = 0.5219772696152266
User 19810 AUC after training: 0.5218403395864714
User 19810 does not improve AUC. Reverting changes.
Training on augumented user 36594 17/50 current_auc = 0.5219772696152266
User 36594 AUC after training: 0.5193755990688758
User 36594 does not improve AUC. Reverting changes.
Training on augumented user 49796 18/50 current_auc = 0.5219772696152266
User 49796 AUC after training: 0.5219772696152266
User 49796 does not improve AUC. Reverting changes.
Training on augumented user 123319 19/50 current_auc = 0.5219772696152266
User 123319 AUC after training: 0.521703409557716
User 123319 does not improve AUC. Reverting changes.
Training on augumented user 119247 20/50 current_auc = 0.5219772696152266
User 119247 AUC after training: 0.5212926194714501
User 119247 does not improve AUC. Reverting changes.
Training on augumented user 5979 21/50 current_auc = 0.5219772696152266
User 5979 AUC after training: 0.5221141996439819
User 5979 improves AUC. Keeping the model.
Training on augumented user 39321 22/50 current_auc = 0.5221141996439819
User 39321 AUC after training: 0.52129261947145
User 39321 does not improve AUC. Reverting changes.
Training on augumented user 82932 23/50 current_auc = 0.5221141996439819
User 82932 AUC after training: 0.5212241544570724
User 82932 does not improve AUC. Reverting changes.
Training on augumented user 116270 24/50 current_auc = 0.5221141996439819
User 116270 AUC after training: 0.5215664795289608
User 116270 does not improve AUC. Reverting changes.
Training on augumented user 39726 25/50 current_auc = 0.5221141996439819
User 39726 AUC after training: 0.5221826646583596
User 39726 improves AUC. Keeping the model.
Training on augumented user 137527 26/50 current_auc = 0.5221826646583596
User 137527 AUC after training: 0.5213610844858279
User 137527 does not improve AUC. Reverting changes.
Training on augumented user 15054 27/50 current_auc = 0.5221826646583596
User 15054 AUC after training: 0.5213610844858279
User 15054 does not improve AUC. Reverting changes.
Training on augumented user 123742 28/50 current_auc = 0.5221826646583596
User 123742 AUC after training: 0.5207448993564289
User 123742 does not improve AUC. Reverting changes.
Training on augumented user 68709 29/50 current_auc = 0.5221826646583596
User 68709 AUC after training: 0.5210187594139395
User 68709 does not improve AUC. Reverting changes.
Training on augumented user 35734 30/50 current_auc = 0.5221826646583596
User 35734 AUC after training: 0.5211556894426947
User 35734 does not improve AUC. Reverting changes.
Training on augumented user 60920 31/50 current_auc = 0.5221826646583596
User 60920 AUC after training: 0.5221826646583596
User 60920 does not improve AUC. Reverting changes.
Training on augumented user 40541 32/50 current_auc = 0.5221826646583596
User 40541 AUC after training: 0.518143228810078
User 40541 does not improve AUC. Reverting changes.
Training on augumented user 33549 33/50 current_auc = 0.5221826646583596
User 33549 AUC after training: 0.5193755990688759
User 33549 does not improve AUC. Reverting changes.
Training on augumented user 113347 34/50 current_auc = 0.5221826646583596
User 113347 AUC after training: 0.5225934547446255
User 113347 improves AUC. Keeping the model.
Training on augumented user 94085 35/50 current_auc = 0.5225934547446255
User 94085 AUC after training: 0.5190332739969876
User 94085 does not improve AUC. Reverting changes.
Training on augumented user 128682 36/50 current_auc = 0.5225934547446255
User 128682 AUC after training: 0.5220457346296044
User 128682 does not improve AUC. Reverting changes.
Training on augumented user 27115 37/50 current_auc = 0.5225934547446255
User 27115 AUC after training: 0.5216349445433384
User 27115 does not improve AUC. Reverting changes.
Training on augumented user 134013 38/50 current_auc = 0.5225934547446255
User 134013 AUC after training: 0.5223195946871149
User 134013 does not improve AUC. Reverting changes.
Training on augumented user 6237 39/50 current_auc = 0.5225934547446255
User 6237 AUC after training: 0.5212241544570725
User 6237 does not improve AUC. Reverting changes.
Training on augumented user 22651 40/50 current_auc = 0.5225934547446255
User 22651 AUC after training: 0.5227303847733809
User 22651 improves AUC. Keeping the model.
Training on augumented user 70735 41/50 current_auc = 0.5227303847733809
User 70735 AUC after training: 0.521498014514583
User 70735 does not improve AUC. Reverting changes.
Training on augumented user 95116 42/50 current_auc = 0.5227303847733809
User 95116 AUC after training: 0.5212241544570725
User 95116 does not improve AUC. Reverting changes.
Training on augumented user 39099 43/50 current_auc = 0.5227303847733809
User 39099 AUC after training: 0.52012871422703
User 39099 does not improve AUC. Reverting changes.
Training on augumented user 68047 44/50 current_auc = 0.5227303847733809
User 68047 AUC after training: 0.5212241544570724
User 68047 does not improve AUC. Reverting changes.
Training on augumented user 67159 45/50 current_auc = 0.5227303847733809
User 67159 AUC after training: 0.5191702040257428
User 67159 does not improve AUC. Reverting changes.
Training on augumented user 123166 46/50 current_auc = 0.5227303847733809
User 123166 AUC after training: 0.5188963439682323
User 123166 does not improve AUC. Reverting changes.
Training on augumented user 82104 47/50 current_auc = 0.5227303847733809
User 82104 AUC after training: 0.5215664795289607
User 82104 does not improve AUC. Reverting changes.
Training on augumented user 123760 48/50 current_auc = 0.5227303847733809
User 123760 AUC after training: 0.521703409557716
User 123760 does not improve AUC. Reverting changes.
Training on augumented user 21374 49/50 current_auc = 0.5227303847733809
User 21374 AUC after training: 0.5207448993564289
User 21374 does not improve AUC. Reverting changes.
[2024-12-02 17:39:18.707475] start test user 82908 3/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:39:19.198836] start test user 82908 3/568 recall augumented users by random, augumented_users = [50514, 87521, 122928, 33062, 78673, 29771, 105825, 14473, 18817, 63695, 117968, 84506, 68950, 69567, 55712, 72612, 138096, 128275, 17374, 91183, 128347, 13718, 2902, 127288, 34324, 128246, 55703, 12247, 51588, 107682, 134616, 87931, 129178, 73859, 30358, 79443, 19679, 49744, 83246, 117664, 59928, 53010, 75629, 23749, 33407, 19342, 23003, 50377, 71822, 69296]
[2024-12-02 17:39:19.215331] user = 82908 Cloud 3/568
[2024-12-02 17:39:19.225416] user = 82908 Local 3/568
[2024-12-02 17:39:19.387081] user = 82908 Local+ 3/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:39:21.547935] user = 82908 MPDA- 3/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7043010752688172
Training on augumented user 50514 0/50 current_auc = 0.7043010752688172
User 50514 AUC after training: 0.7043010752688172
User 50514 does not improve AUC. Reverting changes.
Training on augumented user 87521 1/50 current_auc = 0.7043010752688172
User 87521 AUC after training: 0.7258064516129031
User 87521 improves AUC. Keeping the model.
Training on augumented user 122928 2/50 current_auc = 0.7258064516129031
User 122928 AUC after training: 0.7258064516129031
User 122928 does not improve AUC. Reverting changes.
Training on augumented user 33062 3/50 current_auc = 0.7258064516129031
User 33062 AUC after training: 0.7204301075268816
User 33062 does not improve AUC. Reverting changes.
Training on augumented user 78673 4/50 current_auc = 0.7258064516129031
User 78673 AUC after training: 0.7258064516129031
User 78673 does not improve AUC. Reverting changes.
Training on augumented user 29771 5/50 current_auc = 0.7258064516129031
User 29771 AUC after training: 0.7258064516129031
User 29771 does not improve AUC. Reverting changes.
Training on augumented user 105825 6/50 current_auc = 0.7258064516129031
User 105825 AUC after training: 0.7258064516129031
User 105825 does not improve AUC. Reverting changes.
Training on augumented user 14473 7/50 current_auc = 0.7258064516129031
User 14473 AUC after training: 0.7204301075268816
User 14473 does not improve AUC. Reverting changes.
Training on augumented user 18817 8/50 current_auc = 0.7258064516129031
User 18817 AUC after training: 0.7204301075268817
User 18817 does not improve AUC. Reverting changes.
Training on augumented user 63695 9/50 current_auc = 0.7258064516129031
User 63695 AUC after training: 0.7258064516129031
User 63695 does not improve AUC. Reverting changes.
Training on augumented user 117968 10/50 current_auc = 0.7258064516129031
User 117968 AUC after training: 0.7204301075268816
User 117968 does not improve AUC. Reverting changes.
Training on augumented user 84506 11/50 current_auc = 0.7258064516129031
User 84506 AUC after training: 0.7204301075268816
User 84506 does not improve AUC. Reverting changes.
Training on augumented user 68950 12/50 current_auc = 0.7258064516129031
User 68950 AUC after training: 0.7258064516129031
User 68950 does not improve AUC. Reverting changes.
Training on augumented user 69567 13/50 current_auc = 0.7258064516129031
User 69567 AUC after training: 0.7150537634408602
User 69567 does not improve AUC. Reverting changes.
Training on augumented user 55712 14/50 current_auc = 0.7258064516129031
User 55712 AUC after training: 0.7258064516129031
User 55712 does not improve AUC. Reverting changes.
Training on augumented user 72612 15/50 current_auc = 0.7258064516129031
User 72612 AUC after training: 0.7096774193548386
User 72612 does not improve AUC. Reverting changes.
Training on augumented user 138096 16/50 current_auc = 0.7258064516129031
User 138096 AUC after training: 0.7258064516129031
User 138096 does not improve AUC. Reverting changes.
Training on augumented user 128275 17/50 current_auc = 0.7258064516129031
User 128275 AUC after training: 0.7150537634408602
User 128275 does not improve AUC. Reverting changes.
Training on augumented user 17374 18/50 current_auc = 0.7258064516129031
User 17374 AUC after training: 0.7204301075268816
User 17374 does not improve AUC. Reverting changes.
Training on augumented user 91183 19/50 current_auc = 0.7258064516129031
User 91183 AUC after training: 0.7204301075268816
User 91183 does not improve AUC. Reverting changes.
Training on augumented user 128347 20/50 current_auc = 0.7258064516129031
User 128347 AUC after training: 0.7311827956989246
User 128347 improves AUC. Keeping the model.
Training on augumented user 13718 21/50 current_auc = 0.7311827956989246
User 13718 AUC after training: 0.7204301075268816
User 13718 does not improve AUC. Reverting changes.
Training on augumented user 2902 22/50 current_auc = 0.7311827956989246
User 2902 AUC after training: 0.7150537634408601
User 2902 does not improve AUC. Reverting changes.
Training on augumented user 127288 23/50 current_auc = 0.7311827956989246
User 127288 AUC after training: 0.7150537634408602
User 127288 does not improve AUC. Reverting changes.
Training on augumented user 34324 24/50 current_auc = 0.7311827956989246
User 34324 AUC after training: 0.7258064516129031
User 34324 does not improve AUC. Reverting changes.
Training on augumented user 128246 25/50 current_auc = 0.7311827956989246
User 128246 AUC after training: 0.7204301075268816
User 128246 does not improve AUC. Reverting changes.
Training on augumented user 55703 26/50 current_auc = 0.7311827956989246
User 55703 AUC after training: 0.7204301075268816
User 55703 does not improve AUC. Reverting changes.
Training on augumented user 12247 27/50 current_auc = 0.7311827956989246
User 12247 AUC after training: 0.7258064516129031
User 12247 does not improve AUC. Reverting changes.
Training on augumented user 51588 28/50 current_auc = 0.7311827956989246
User 51588 AUC after training: 0.7204301075268816
User 51588 does not improve AUC. Reverting changes.
Training on augumented user 107682 29/50 current_auc = 0.7311827956989246
User 107682 AUC after training: 0.7258064516129031
User 107682 does not improve AUC. Reverting changes.
Training on augumented user 134616 30/50 current_auc = 0.7311827956989246
User 134616 AUC after training: 0.7311827956989246
User 134616 does not improve AUC. Reverting changes.
Training on augumented user 87931 31/50 current_auc = 0.7311827956989246
User 87931 AUC after training: 0.7150537634408601
User 87931 does not improve AUC. Reverting changes.
Training on augumented user 129178 32/50 current_auc = 0.7311827956989246
User 129178 AUC after training: 0.7311827956989246
User 129178 does not improve AUC. Reverting changes.
Training on augumented user 73859 33/50 current_auc = 0.7311827956989246
User 73859 AUC after training: 0.7258064516129031
User 73859 does not improve AUC. Reverting changes.
Training on augumented user 30358 34/50 current_auc = 0.7311827956989246
User 30358 AUC after training: 0.7311827956989246
User 30358 does not improve AUC. Reverting changes.
Training on augumented user 79443 35/50 current_auc = 0.7311827956989246
User 79443 AUC after training: 0.7258064516129031
User 79443 does not improve AUC. Reverting changes.
Training on augumented user 19679 36/50 current_auc = 0.7311827956989246
User 19679 AUC after training: 0.7204301075268817
User 19679 does not improve AUC. Reverting changes.
Training on augumented user 49744 37/50 current_auc = 0.7311827956989246
User 49744 AUC after training: 0.7258064516129031
User 49744 does not improve AUC. Reverting changes.
Training on augumented user 83246 38/50 current_auc = 0.7311827956989246
User 83246 AUC after training: 0.7258064516129031
User 83246 does not improve AUC. Reverting changes.
Training on augumented user 117664 39/50 current_auc = 0.7311827956989246
User 117664 AUC after training: 0.7258064516129031
User 117664 does not improve AUC. Reverting changes.
Training on augumented user 59928 40/50 current_auc = 0.7311827956989246
User 59928 AUC after training: 0.7311827956989246
User 59928 does not improve AUC. Reverting changes.
Training on augumented user 53010 41/50 current_auc = 0.7311827956989246
User 53010 AUC after training: 0.7311827956989246
User 53010 does not improve AUC. Reverting changes.
Training on augumented user 75629 42/50 current_auc = 0.7311827956989246
User 75629 AUC after training: 0.7311827956989246
User 75629 does not improve AUC. Reverting changes.
Training on augumented user 23749 43/50 current_auc = 0.7311827956989246
User 23749 AUC after training: 0.7258064516129032
User 23749 does not improve AUC. Reverting changes.
Training on augumented user 33407 44/50 current_auc = 0.7311827956989246
User 33407 AUC after training: 0.7258064516129031
User 33407 does not improve AUC. Reverting changes.
Training on augumented user 19342 45/50 current_auc = 0.7311827956989246
User 19342 AUC after training: 0.7311827956989246
User 19342 does not improve AUC. Reverting changes.
Training on augumented user 23003 46/50 current_auc = 0.7311827956989246
User 23003 AUC after training: 0.7258064516129031
User 23003 does not improve AUC. Reverting changes.
Training on augumented user 50377 47/50 current_auc = 0.7311827956989246
User 50377 AUC after training: 0.7311827956989246
User 50377 does not improve AUC. Reverting changes.
Training on augumented user 71822 48/50 current_auc = 0.7311827956989246
User 71822 AUC after training: 0.7258064516129031
User 71822 does not improve AUC. Reverting changes.
Training on augumented user 69296 49/50 current_auc = 0.7311827956989246
User 69296 AUC after training: 0.7311827956989246
User 69296 does not improve AUC. Reverting changes.
[2024-12-02 17:39:50.661132] start test user 82909 4/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:39:51.188324] start test user 82909 4/568 recall augumented users by random, augumented_users = [130899, 59364, 48476, 129532, 9196, 70141, 126264, 127364, 83805, 1212, 117953, 92147, 15372, 127309, 75018, 25149, 85267, 129554, 49333, 16384, 136385, 102904, 12028, 12083, 10182, 113583, 83156, 63423, 61491, 93456, 35887, 6638, 7766, 80425, 103514, 108935, 83204, 29871, 65546, 129007, 4262, 62259, 34237, 85814, 40232, 1783, 10359, 9785, 12341, 132153]
[2024-12-02 17:39:51.203742] user = 82909 Cloud 4/568
[2024-12-02 17:39:51.214459] user = 82909 Local 4/568
[2024-12-02 17:39:51.278158] user = 82909 Local+ 4/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:39:53.231058] user = 82909 MPDA- 4/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6666666666666666
Training on augumented user 130899 0/50 current_auc = 0.6666666666666666
User 130899 AUC after training: 0.6666666666666666
User 130899 does not improve AUC. Reverting changes.
Training on augumented user 59364 1/50 current_auc = 0.6666666666666666
User 59364 AUC after training: 0.6666666666666666
User 59364 does not improve AUC. Reverting changes.
Training on augumented user 48476 2/50 current_auc = 0.6666666666666666
User 48476 AUC after training: 0.6666666666666666
User 48476 does not improve AUC. Reverting changes.
Training on augumented user 129532 3/50 current_auc = 0.6666666666666666
User 129532 AUC after training: 0.6666666666666666
User 129532 does not improve AUC. Reverting changes.
Training on augumented user 9196 4/50 current_auc = 0.6666666666666666
User 9196 AUC after training: 0.6666666666666666
User 9196 does not improve AUC. Reverting changes.
Training on augumented user 70141 5/50 current_auc = 0.6666666666666666
User 70141 AUC after training: 0.6714285714285714
User 70141 improves AUC. Keeping the model.
Training on augumented user 126264 6/50 current_auc = 0.6714285714285714
User 126264 AUC after training: 0.6761904761904761
User 126264 improves AUC. Keeping the model.
Training on augumented user 127364 7/50 current_auc = 0.6761904761904761
User 127364 AUC after training: 0.6761904761904761
User 127364 does not improve AUC. Reverting changes.
Training on augumented user 83805 8/50 current_auc = 0.6761904761904761
User 83805 AUC after training: 0.680952380952381
User 83805 improves AUC. Keeping the model.
Training on augumented user 1212 9/50 current_auc = 0.680952380952381
User 1212 AUC after training: 0.6857142857142857
User 1212 improves AUC. Keeping the model.
Training on augumented user 117953 10/50 current_auc = 0.6857142857142857
User 117953 AUC after training: 0.6809523809523809
User 117953 does not improve AUC. Reverting changes.
Training on augumented user 92147 11/50 current_auc = 0.6857142857142857
User 92147 AUC after training: 0.6809523809523809
User 92147 does not improve AUC. Reverting changes.
Training on augumented user 15372 12/50 current_auc = 0.6857142857142857
User 15372 AUC after training: 0.680952380952381
User 15372 does not improve AUC. Reverting changes.
Training on augumented user 127309 13/50 current_auc = 0.6857142857142857
User 127309 AUC after training: 0.680952380952381
User 127309 does not improve AUC. Reverting changes.
Training on augumented user 75018 14/50 current_auc = 0.6857142857142857
User 75018 AUC after training: 0.680952380952381
User 75018 does not improve AUC. Reverting changes.
Training on augumented user 25149 15/50 current_auc = 0.6857142857142857
User 25149 AUC after training: 0.6809523809523809
User 25149 does not improve AUC. Reverting changes.
Training on augumented user 85267 16/50 current_auc = 0.6857142857142857
User 85267 AUC after training: 0.6761904761904761
User 85267 does not improve AUC. Reverting changes.
Training on augumented user 129554 17/50 current_auc = 0.6857142857142857
User 129554 AUC after training: 0.6809523809523809
User 129554 does not improve AUC. Reverting changes.
Training on augumented user 49333 18/50 current_auc = 0.6857142857142857
User 49333 AUC after training: 0.680952380952381
User 49333 does not improve AUC. Reverting changes.
Training on augumented user 16384 19/50 current_auc = 0.6857142857142857
User 16384 AUC after training: 0.680952380952381
User 16384 does not improve AUC. Reverting changes.
Training on augumented user 136385 20/50 current_auc = 0.6857142857142857
User 136385 AUC after training: 0.680952380952381
User 136385 does not improve AUC. Reverting changes.
Training on augumented user 102904 21/50 current_auc = 0.6857142857142857
User 102904 AUC after training: 0.6666666666666666
User 102904 does not improve AUC. Reverting changes.
Training on augumented user 12028 22/50 current_auc = 0.6857142857142857
User 12028 AUC after training: 0.6761904761904761
User 12028 does not improve AUC. Reverting changes.
Training on augumented user 12083 23/50 current_auc = 0.6857142857142857
User 12083 AUC after training: 0.6761904761904761
User 12083 does not improve AUC. Reverting changes.
Training on augumented user 10182 24/50 current_auc = 0.6857142857142857
User 10182 AUC after training: 0.6857142857142857
User 10182 does not improve AUC. Reverting changes.
Training on augumented user 113583 25/50 current_auc = 0.6857142857142857
User 113583 AUC after training: 0.6761904761904761
User 113583 does not improve AUC. Reverting changes.
Training on augumented user 83156 26/50 current_auc = 0.6857142857142857
User 83156 AUC after training: 0.6761904761904761
User 83156 does not improve AUC. Reverting changes.
Training on augumented user 63423 27/50 current_auc = 0.6857142857142857
User 63423 AUC after training: 0.6809523809523809
User 63423 does not improve AUC. Reverting changes.
Training on augumented user 61491 28/50 current_auc = 0.6857142857142857
User 61491 AUC after training: 0.680952380952381
User 61491 does not improve AUC. Reverting changes.
Training on augumented user 93456 29/50 current_auc = 0.6857142857142857
User 93456 AUC after training: 0.6857142857142857
User 93456 does not improve AUC. Reverting changes.
Training on augumented user 35887 30/50 current_auc = 0.6857142857142857
User 35887 AUC after training: 0.680952380952381
User 35887 does not improve AUC. Reverting changes.
Training on augumented user 6638 31/50 current_auc = 0.6857142857142857
User 6638 AUC after training: 0.6809523809523809
User 6638 does not improve AUC. Reverting changes.
Training on augumented user 7766 32/50 current_auc = 0.6857142857142857
User 7766 AUC after training: 0.6809523809523809
User 7766 does not improve AUC. Reverting changes.
Training on augumented user 80425 33/50 current_auc = 0.6857142857142857
User 80425 AUC after training: 0.6761904761904761
User 80425 does not improve AUC. Reverting changes.
Training on augumented user 103514 34/50 current_auc = 0.6857142857142857
User 103514 AUC after training: 0.6761904761904761
User 103514 does not improve AUC. Reverting changes.
Training on augumented user 108935 35/50 current_auc = 0.6857142857142857
User 108935 AUC after training: 0.6857142857142857
User 108935 does not improve AUC. Reverting changes.
Training on augumented user 83204 36/50 current_auc = 0.6857142857142857
User 83204 AUC after training: 0.6857142857142857
User 83204 does not improve AUC. Reverting changes.
Training on augumented user 29871 37/50 current_auc = 0.6857142857142857
User 29871 AUC after training: 0.680952380952381
User 29871 does not improve AUC. Reverting changes.
Training on augumented user 65546 38/50 current_auc = 0.6857142857142857
User 65546 AUC after training: 0.6809523809523809
User 65546 does not improve AUC. Reverting changes.
Training on augumented user 129007 39/50 current_auc = 0.6857142857142857
User 129007 AUC after training: 0.6761904761904761
User 129007 does not improve AUC. Reverting changes.
Training on augumented user 4262 40/50 current_auc = 0.6857142857142857
User 4262 AUC after training: 0.6761904761904761
User 4262 does not improve AUC. Reverting changes.
Training on augumented user 62259 41/50 current_auc = 0.6857142857142857
User 62259 AUC after training: 0.6761904761904761
User 62259 does not improve AUC. Reverting changes.
Training on augumented user 34237 42/50 current_auc = 0.6857142857142857
User 34237 AUC after training: 0.6857142857142857
User 34237 does not improve AUC. Reverting changes.
Training on augumented user 85814 43/50 current_auc = 0.6857142857142857
User 85814 AUC after training: 0.6761904761904761
User 85814 does not improve AUC. Reverting changes.
Training on augumented user 40232 44/50 current_auc = 0.6857142857142857
User 40232 AUC after training: 0.6809523809523809
User 40232 does not improve AUC. Reverting changes.
Training on augumented user 1783 45/50 current_auc = 0.6857142857142857
User 1783 AUC after training: 0.680952380952381
User 1783 does not improve AUC. Reverting changes.
Training on augumented user 10359 46/50 current_auc = 0.6857142857142857
User 10359 AUC after training: 0.6809523809523809
User 10359 does not improve AUC. Reverting changes.
Training on augumented user 9785 47/50 current_auc = 0.6857142857142857
User 9785 AUC after training: 0.6857142857142857
User 9785 does not improve AUC. Reverting changes.
Training on augumented user 12341 48/50 current_auc = 0.6857142857142857
User 12341 AUC after training: 0.6857142857142857
User 12341 does not improve AUC. Reverting changes.
Training on augumented user 132153 49/50 current_auc = 0.6857142857142857
User 132153 AUC after training: 0.6809523809523809
User 132153 does not improve AUC. Reverting changes.
[2024-12-02 17:40:20.776281] start test user 82957 5/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:40:21.204505] start test user 82957 5/568 recall augumented users by random, augumented_users = [71215, 52180, 59179, 98052, 49384, 4425, 31342, 102365, 50005, 97810, 10555, 122311, 112689, 85767, 13357, 23447, 18334, 1668, 35948, 17409, 89758, 125354, 13921, 64850, 83431, 6566, 92177, 59514, 64891, 126446, 79879, 134257, 86788, 67403, 75848, 18696, 104652, 132806, 118192, 137244, 129584, 62977, 90288, 33793, 36360, 25872, 8730, 59000, 71003, 119404]
[2024-12-02 17:40:21.218940] user = 82957 Cloud 5/568
[2024-12-02 17:40:21.228693] user = 82957 Local 5/568
[2024-12-02 17:40:21.248808] user = 82957 Local+ 5/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:40:23.436916] user = 82957 MPDA- 5/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.1
Training on augumented user 71215 0/50 current_auc = 0.1
User 71215 AUC after training: 0.1
User 71215 does not improve AUC. Reverting changes.
Training on augumented user 52180 1/50 current_auc = 0.1
User 52180 AUC after training: 0.1
User 52180 does not improve AUC. Reverting changes.
Training on augumented user 59179 2/50 current_auc = 0.1
User 59179 AUC after training: 0.1
User 59179 does not improve AUC. Reverting changes.
Training on augumented user 98052 3/50 current_auc = 0.1
User 98052 AUC after training: 0.1
User 98052 does not improve AUC. Reverting changes.
Training on augumented user 49384 4/50 current_auc = 0.1
User 49384 AUC after training: 0.1
User 49384 does not improve AUC. Reverting changes.
Training on augumented user 4425 5/50 current_auc = 0.1
User 4425 AUC after training: 0.1
User 4425 does not improve AUC. Reverting changes.
Training on augumented user 31342 6/50 current_auc = 0.1
User 31342 AUC after training: 0.1
User 31342 does not improve AUC. Reverting changes.
Training on augumented user 102365 7/50 current_auc = 0.1
User 102365 AUC after training: 0.1
User 102365 does not improve AUC. Reverting changes.
Training on augumented user 50005 8/50 current_auc = 0.1
User 50005 AUC after training: 0.1
User 50005 does not improve AUC. Reverting changes.
Training on augumented user 97810 9/50 current_auc = 0.1
User 97810 AUC after training: 0.1
User 97810 does not improve AUC. Reverting changes.
Training on augumented user 10555 10/50 current_auc = 0.1
User 10555 AUC after training: 0.1
User 10555 does not improve AUC. Reverting changes.
Training on augumented user 122311 11/50 current_auc = 0.1
User 122311 AUC after training: 0.1
User 122311 does not improve AUC. Reverting changes.
Training on augumented user 112689 12/50 current_auc = 0.1
User 112689 AUC after training: 0.1
User 112689 does not improve AUC. Reverting changes.
Training on augumented user 85767 13/50 current_auc = 0.1
User 85767 AUC after training: 0.1
User 85767 does not improve AUC. Reverting changes.
Training on augumented user 13357 14/50 current_auc = 0.1
User 13357 AUC after training: 0.1
User 13357 does not improve AUC. Reverting changes.
Training on augumented user 23447 15/50 current_auc = 0.1
User 23447 AUC after training: 0.1
User 23447 does not improve AUC. Reverting changes.
Training on augumented user 18334 16/50 current_auc = 0.1
User 18334 AUC after training: 0.1
User 18334 does not improve AUC. Reverting changes.
Training on augumented user 1668 17/50 current_auc = 0.1
User 1668 AUC after training: 0.1
User 1668 does not improve AUC. Reverting changes.
Training on augumented user 35948 18/50 current_auc = 0.1
User 35948 AUC after training: 0.1
User 35948 does not improve AUC. Reverting changes.
Training on augumented user 17409 19/50 current_auc = 0.1
User 17409 AUC after training: 0.1
User 17409 does not improve AUC. Reverting changes.
Training on augumented user 89758 20/50 current_auc = 0.1
User 89758 AUC after training: 0.1
User 89758 does not improve AUC. Reverting changes.
Training on augumented user 125354 21/50 current_auc = 0.1
User 125354 AUC after training: 0.1
User 125354 does not improve AUC. Reverting changes.
Training on augumented user 13921 22/50 current_auc = 0.1
User 13921 AUC after training: 0.1
User 13921 does not improve AUC. Reverting changes.
Training on augumented user 64850 23/50 current_auc = 0.1
User 64850 AUC after training: 0.1
User 64850 does not improve AUC. Reverting changes.
Training on augumented user 83431 24/50 current_auc = 0.1
User 83431 AUC after training: 0.1
User 83431 does not improve AUC. Reverting changes.
Training on augumented user 6566 25/50 current_auc = 0.1
User 6566 AUC after training: 0.1
User 6566 does not improve AUC. Reverting changes.
Training on augumented user 92177 26/50 current_auc = 0.1
User 92177 AUC after training: 0.1
User 92177 does not improve AUC. Reverting changes.
Training on augumented user 59514 27/50 current_auc = 0.1
User 59514 AUC after training: 0.1
User 59514 does not improve AUC. Reverting changes.
Training on augumented user 64891 28/50 current_auc = 0.1
User 64891 AUC after training: 0.1
User 64891 does not improve AUC. Reverting changes.
Training on augumented user 126446 29/50 current_auc = 0.1
User 126446 AUC after training: 0.1
User 126446 does not improve AUC. Reverting changes.
Training on augumented user 79879 30/50 current_auc = 0.1
User 79879 AUC after training: 0.1
User 79879 does not improve AUC. Reverting changes.
Training on augumented user 134257 31/50 current_auc = 0.1
User 134257 AUC after training: 0.1
User 134257 does not improve AUC. Reverting changes.
Training on augumented user 86788 32/50 current_auc = 0.1
User 86788 AUC after training: 0.1
User 86788 does not improve AUC. Reverting changes.
Training on augumented user 67403 33/50 current_auc = 0.1
User 67403 AUC after training: 0.1
User 67403 does not improve AUC. Reverting changes.
Training on augumented user 75848 34/50 current_auc = 0.1
User 75848 AUC after training: 0.1
User 75848 does not improve AUC. Reverting changes.
Training on augumented user 18696 35/50 current_auc = 0.1
User 18696 AUC after training: 0.1
User 18696 does not improve AUC. Reverting changes.
Training on augumented user 104652 36/50 current_auc = 0.1
User 104652 AUC after training: 0.1
User 104652 does not improve AUC. Reverting changes.
Training on augumented user 132806 37/50 current_auc = 0.1
User 132806 AUC after training: 0.1
User 132806 does not improve AUC. Reverting changes.
Training on augumented user 118192 38/50 current_auc = 0.1
User 118192 AUC after training: 0.1
User 118192 does not improve AUC. Reverting changes.
Training on augumented user 137244 39/50 current_auc = 0.1
User 137244 AUC after training: 0.1
User 137244 does not improve AUC. Reverting changes.
Training on augumented user 129584 40/50 current_auc = 0.1
User 129584 AUC after training: 0.1
User 129584 does not improve AUC. Reverting changes.
Training on augumented user 62977 41/50 current_auc = 0.1
User 62977 AUC after training: 0.1
User 62977 does not improve AUC. Reverting changes.
Training on augumented user 90288 42/50 current_auc = 0.1
User 90288 AUC after training: 0.1
User 90288 does not improve AUC. Reverting changes.
Training on augumented user 33793 43/50 current_auc = 0.1
User 33793 AUC after training: 0.1
User 33793 does not improve AUC. Reverting changes.
Training on augumented user 36360 44/50 current_auc = 0.1
User 36360 AUC after training: 0.1
User 36360 does not improve AUC. Reverting changes.
Training on augumented user 25872 45/50 current_auc = 0.1
User 25872 AUC after training: 0.1
User 25872 does not improve AUC. Reverting changes.
Training on augumented user 8730 46/50 current_auc = 0.1
User 8730 AUC after training: 0.1
User 8730 does not improve AUC. Reverting changes.
Training on augumented user 59000 47/50 current_auc = 0.1
User 59000 AUC after training: 0.1
User 59000 does not improve AUC. Reverting changes.
Training on augumented user 71003 48/50 current_auc = 0.1
User 71003 AUC after training: 0.1
User 71003 does not improve AUC. Reverting changes.
Training on augumented user 119404 49/50 current_auc = 0.1
User 119404 AUC after training: 0.1
User 119404 does not improve AUC. Reverting changes.
[2024-12-02 17:40:56.960064] start test user 82981 6/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:40:57.610568] start test user 82981 6/568 recall augumented users by random, augumented_users = [55432, 114401, 22606, 54031, 13091, 97803, 41317, 115694, 88816, 73923, 9349, 109018, 77503, 93328, 50984, 100172, 102036, 30933, 24482, 38621, 49316, 121869, 106936, 90106, 112053, 126723, 12828, 70721, 80761, 74406, 76300, 66715, 72498, 63044, 107118, 106617, 10932, 46675, 58277, 77931, 114766, 39741, 110352, 87501, 131640, 65094, 52823, 44310, 98006, 104808]
[2024-12-02 17:40:57.638822] user = 82981 Cloud 6/568
[2024-12-02 17:40:57.691019] user = 82981 Local 6/568
[2024-12-02 17:40:57.823585] user = 82981 Local+ 6/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:40:59.673561] user = 82981 MPDA- 6/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8137566137566139
Training on augumented user 55432 0/50 current_auc = 0.8137566137566139
User 55432 AUC after training: 0.8137566137566138
User 55432 does not improve AUC. Reverting changes.
Training on augumented user 114401 1/50 current_auc = 0.8137566137566139
User 114401 AUC after training: 0.8124338624338625
User 114401 does not improve AUC. Reverting changes.
Training on augumented user 22606 2/50 current_auc = 0.8137566137566139
User 22606 AUC after training: 0.8145502645502646
User 22606 improves AUC. Keeping the model.
Training on augumented user 54031 3/50 current_auc = 0.8145502645502646
User 54031 AUC after training: 0.8148148148148149
User 54031 improves AUC. Keeping the model.
Training on augumented user 13091 4/50 current_auc = 0.8148148148148149
User 13091 AUC after training: 0.8145502645502646
User 13091 does not improve AUC. Reverting changes.
Training on augumented user 97803 5/50 current_auc = 0.8148148148148149
User 97803 AUC after training: 0.8145502645502645
User 97803 does not improve AUC. Reverting changes.
Training on augumented user 41317 6/50 current_auc = 0.8148148148148149
User 41317 AUC after training: 0.8150793650793651
User 41317 improves AUC. Keeping the model.
Training on augumented user 115694 7/50 current_auc = 0.8150793650793651
User 115694 AUC after training: 0.8132275132275133
User 115694 does not improve AUC. Reverting changes.
Training on augumented user 88816 8/50 current_auc = 0.8150793650793651
User 88816 AUC after training: 0.8150793650793651
User 88816 does not improve AUC. Reverting changes.
Training on augumented user 73923 9/50 current_auc = 0.8150793650793651
User 73923 AUC after training: 0.8164021164021165
User 73923 improves AUC. Keeping the model.
Training on augumented user 9349 10/50 current_auc = 0.8164021164021165
User 9349 AUC after training: 0.8174603174603174
User 9349 improves AUC. Keeping the model.
Training on augumented user 109018 11/50 current_auc = 0.8174603174603174
User 109018 AUC after training: 0.8177248677248676
User 109018 improves AUC. Keeping the model.
Training on augumented user 77503 12/50 current_auc = 0.8177248677248676
User 77503 AUC after training: 0.8185185185185185
User 77503 improves AUC. Keeping the model.
Training on augumented user 93328 13/50 current_auc = 0.8185185185185185
User 93328 AUC after training: 0.8185185185185185
User 93328 does not improve AUC. Reverting changes.
Training on augumented user 50984 14/50 current_auc = 0.8185185185185185
User 50984 AUC after training: 0.8171957671957673
User 50984 does not improve AUC. Reverting changes.
Training on augumented user 100172 15/50 current_auc = 0.8185185185185185
User 100172 AUC after training: 0.8187830687830688
User 100172 improves AUC. Keeping the model.
Training on augumented user 102036 16/50 current_auc = 0.8187830687830688
User 102036 AUC after training: 0.8166666666666667
User 102036 does not improve AUC. Reverting changes.
Training on augumented user 30933 17/50 current_auc = 0.8187830687830688
User 30933 AUC after training: 0.8185185185185185
User 30933 does not improve AUC. Reverting changes.
Training on augumented user 24482 18/50 current_auc = 0.8187830687830688
User 24482 AUC after training: 0.8174603174603174
User 24482 does not improve AUC. Reverting changes.
Training on augumented user 38621 19/50 current_auc = 0.8187830687830688
User 38621 AUC after training: 0.8185185185185185
User 38621 does not improve AUC. Reverting changes.
Training on augumented user 49316 20/50 current_auc = 0.8187830687830688
User 49316 AUC after training: 0.8171957671957673
User 49316 does not improve AUC. Reverting changes.
Training on augumented user 121869 21/50 current_auc = 0.8187830687830688
User 121869 AUC after training: 0.8174603174603174
User 121869 does not improve AUC. Reverting changes.
Training on augumented user 106936 22/50 current_auc = 0.8187830687830688
User 106936 AUC after training: 0.8182539682539682
User 106936 does not improve AUC. Reverting changes.
Training on augumented user 90106 23/50 current_auc = 0.8187830687830688
User 90106 AUC after training: 0.8161375661375662
User 90106 does not improve AUC. Reverting changes.
Training on augumented user 112053 24/50 current_auc = 0.8187830687830688
User 112053 AUC after training: 0.8177248677248677
User 112053 does not improve AUC. Reverting changes.
Training on augumented user 126723 25/50 current_auc = 0.8187830687830688
User 126723 AUC after training: 0.8174603174603174
User 126723 does not improve AUC. Reverting changes.
Training on augumented user 12828 26/50 current_auc = 0.8187830687830688
User 12828 AUC after training: 0.8177248677248677
User 12828 does not improve AUC. Reverting changes.
Training on augumented user 70721 27/50 current_auc = 0.8187830687830688
User 70721 AUC after training: 0.8185185185185186
User 70721 does not improve AUC. Reverting changes.
Training on augumented user 80761 28/50 current_auc = 0.8187830687830688
User 80761 AUC after training: 0.8142857142857143
User 80761 does not improve AUC. Reverting changes.
Training on augumented user 74406 29/50 current_auc = 0.8187830687830688
User 74406 AUC after training: 0.8187830687830688
User 74406 does not improve AUC. Reverting changes.
Training on augumented user 76300 30/50 current_auc = 0.8187830687830688
User 76300 AUC after training: 0.8142857142857143
User 76300 does not improve AUC. Reverting changes.
Training on augumented user 66715 31/50 current_auc = 0.8187830687830688
User 66715 AUC after training: 0.8185185185185185
User 66715 does not improve AUC. Reverting changes.
Training on augumented user 72498 32/50 current_auc = 0.8187830687830688
User 72498 AUC after training: 0.8182539682539682
User 72498 does not improve AUC. Reverting changes.
Training on augumented user 63044 33/50 current_auc = 0.8187830687830688
User 63044 AUC after training: 0.8185185185185185
User 63044 does not improve AUC. Reverting changes.
Training on augumented user 107118 34/50 current_auc = 0.8187830687830688
User 107118 AUC after training: 0.8185185185185184
User 107118 does not improve AUC. Reverting changes.
Training on augumented user 106617 35/50 current_auc = 0.8187830687830688
User 106617 AUC after training: 0.819047619047619
User 106617 improves AUC. Keeping the model.
Training on augumented user 10932 36/50 current_auc = 0.819047619047619
User 10932 AUC after training: 0.8187830687830688
User 10932 does not improve AUC. Reverting changes.
Training on augumented user 46675 37/50 current_auc = 0.819047619047619
User 46675 AUC after training: 0.819047619047619
User 46675 does not improve AUC. Reverting changes.
Training on augumented user 58277 38/50 current_auc = 0.819047619047619
User 58277 AUC after training: 0.8132275132275133
User 58277 does not improve AUC. Reverting changes.
Training on augumented user 77931 39/50 current_auc = 0.819047619047619
User 77931 AUC after training: 0.8182539682539682
User 77931 does not improve AUC. Reverting changes.
Training on augumented user 114766 40/50 current_auc = 0.819047619047619
User 114766 AUC after training: 0.8174603174603174
User 114766 does not improve AUC. Reverting changes.
Training on augumented user 39741 41/50 current_auc = 0.819047619047619
User 39741 AUC after training: 0.8169312169312168
User 39741 does not improve AUC. Reverting changes.
Training on augumented user 110352 42/50 current_auc = 0.819047619047619
User 110352 AUC after training: 0.8185185185185185
User 110352 does not improve AUC. Reverting changes.
Training on augumented user 87501 43/50 current_auc = 0.819047619047619
User 87501 AUC after training: 0.8182539682539682
User 87501 does not improve AUC. Reverting changes.
Training on augumented user 131640 44/50 current_auc = 0.819047619047619
User 131640 AUC after training: 0.8187830687830688
User 131640 does not improve AUC. Reverting changes.
Training on augumented user 65094 45/50 current_auc = 0.819047619047619
User 65094 AUC after training: 0.8164021164021165
User 65094 does not improve AUC. Reverting changes.
Training on augumented user 52823 46/50 current_auc = 0.819047619047619
User 52823 AUC after training: 0.819047619047619
User 52823 does not improve AUC. Reverting changes.
Training on augumented user 44310 47/50 current_auc = 0.819047619047619
User 44310 AUC after training: 0.8185185185185185
User 44310 does not improve AUC. Reverting changes.
Training on augumented user 98006 48/50 current_auc = 0.819047619047619
User 98006 AUC after training: 0.817989417989418
User 98006 does not improve AUC. Reverting changes.
Training on augumented user 104808 49/50 current_auc = 0.819047619047619
User 104808 AUC after training: 0.819047619047619
User 104808 does not improve AUC. Reverting changes.
[2024-12-02 17:41:27.469732] start test user 83019 7/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:41:27.880004] start test user 83019 7/568 recall augumented users by random, augumented_users = [134739, 58749, 136645, 71982, 77541, 116942, 5093, 89470, 43734, 32947, 98351, 64990, 16206, 12363, 50205, 47164, 44161, 11678, 47416, 56452, 98683, 126714, 99560, 30054, 50330, 107328, 327, 68517, 129091, 35154, 86722, 32046, 53272, 10220, 9605, 16431, 84620, 1262, 5580, 50809, 24347, 97562, 57541, 19982, 132845, 104006, 118793, 73211, 94954, 49947]
[2024-12-02 17:41:27.895328] user = 83019 Cloud 7/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:41:27.902168] user = 83019 Local 7/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:41:27.969745] user = 83019 Local+ 7/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:41:29.919115] user = 83019 MPDA- 7/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 134739 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134739 AUC after training: 0.5
User 134739 does not improve AUC. Reverting changes.
Training on augumented user 58749 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58749 AUC after training: 0.5
User 58749 does not improve AUC. Reverting changes.
Training on augumented user 136645 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136645 AUC after training: 0.5
User 136645 does not improve AUC. Reverting changes.
Training on augumented user 71982 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71982 AUC after training: 0.5
User 71982 does not improve AUC. Reverting changes.
Training on augumented user 77541 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77541 AUC after training: 0.5
User 77541 does not improve AUC. Reverting changes.
Training on augumented user 116942 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116942 AUC after training: 0.5
User 116942 does not improve AUC. Reverting changes.
Training on augumented user 5093 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5093 AUC after training: 0.5
User 5093 does not improve AUC. Reverting changes.
Training on augumented user 89470 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89470 AUC after training: 0.5
User 89470 does not improve AUC. Reverting changes.
Training on augumented user 43734 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43734 AUC after training: 0.5
User 43734 does not improve AUC. Reverting changes.
Training on augumented user 32947 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32947 AUC after training: 0.5
User 32947 does not improve AUC. Reverting changes.
Training on augumented user 98351 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98351 AUC after training: 0.5
User 98351 does not improve AUC. Reverting changes.
Training on augumented user 64990 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64990 AUC after training: 0.5
User 64990 does not improve AUC. Reverting changes.
Training on augumented user 16206 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16206 AUC after training: 0.5
User 16206 does not improve AUC. Reverting changes.
Training on augumented user 12363 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12363 AUC after training: 0.5
User 12363 does not improve AUC. Reverting changes.
Training on augumented user 50205 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50205 AUC after training: 0.5
User 50205 does not improve AUC. Reverting changes.
Training on augumented user 47164 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47164 AUC after training: 0.5
User 47164 does not improve AUC. Reverting changes.
Training on augumented user 44161 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44161 AUC after training: 0.5
User 44161 does not improve AUC. Reverting changes.
Training on augumented user 11678 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11678 AUC after training: 0.5
User 11678 does not improve AUC. Reverting changes.
Training on augumented user 47416 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47416 AUC after training: 0.5
User 47416 does not improve AUC. Reverting changes.
Training on augumented user 56452 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56452 AUC after training: 0.5
User 56452 does not improve AUC. Reverting changes.
Training on augumented user 98683 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98683 AUC after training: 0.5
User 98683 does not improve AUC. Reverting changes.
Training on augumented user 126714 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126714 AUC after training: 0.5
User 126714 does not improve AUC. Reverting changes.
Training on augumented user 99560 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99560 AUC after training: 0.5
User 99560 does not improve AUC. Reverting changes.
Training on augumented user 30054 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30054 AUC after training: 0.5
User 30054 does not improve AUC. Reverting changes.
Training on augumented user 50330 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50330 AUC after training: 0.5
User 50330 does not improve AUC. Reverting changes.
Training on augumented user 107328 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107328 AUC after training: 0.5
User 107328 does not improve AUC. Reverting changes.
Training on augumented user 327 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 327 AUC after training: 0.5
User 327 does not improve AUC. Reverting changes.
Training on augumented user 68517 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68517 AUC after training: 0.5
User 68517 does not improve AUC. Reverting changes.
Training on augumented user 129091 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129091 AUC after training: 0.5
User 129091 does not improve AUC. Reverting changes.
Training on augumented user 35154 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35154 AUC after training: 0.5
User 35154 does not improve AUC. Reverting changes.
Training on augumented user 86722 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86722 AUC after training: 0.5
User 86722 does not improve AUC. Reverting changes.
Training on augumented user 32046 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32046 AUC after training: 0.5
User 32046 does not improve AUC. Reverting changes.
Training on augumented user 53272 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53272 AUC after training: 0.5
User 53272 does not improve AUC. Reverting changes.
Training on augumented user 10220 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10220 AUC after training: 0.5
User 10220 does not improve AUC. Reverting changes.
Training on augumented user 9605 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9605 AUC after training: 0.5
User 9605 does not improve AUC. Reverting changes.
Training on augumented user 16431 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16431 AUC after training: 0.5
User 16431 does not improve AUC. Reverting changes.
Training on augumented user 84620 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84620 AUC after training: 0.5
User 84620 does not improve AUC. Reverting changes.
Training on augumented user 1262 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1262 AUC after training: 0.5
User 1262 does not improve AUC. Reverting changes.
Training on augumented user 5580 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5580 AUC after training: 0.5
User 5580 does not improve AUC. Reverting changes.
Training on augumented user 50809 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50809 AUC after training: 0.5
User 50809 does not improve AUC. Reverting changes.
Training on augumented user 24347 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24347 AUC after training: 0.5
User 24347 does not improve AUC. Reverting changes.
Training on augumented user 97562 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97562 AUC after training: 0.5
User 97562 does not improve AUC. Reverting changes.
Training on augumented user 57541 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57541 AUC after training: 0.5
User 57541 does not improve AUC. Reverting changes.
Training on augumented user 19982 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19982 AUC after training: 0.5
User 19982 does not improve AUC. Reverting changes.
Training on augumented user 132845 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132845 AUC after training: 0.5
User 132845 does not improve AUC. Reverting changes.
Training on augumented user 104006 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104006 AUC after training: 0.5
User 104006 does not improve AUC. Reverting changes.
Training on augumented user 118793 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118793 AUC after training: 0.5
User 118793 does not improve AUC. Reverting changes.
Training on augumented user 73211 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73211 AUC after training: 0.5
User 73211 does not improve AUC. Reverting changes.
Training on augumented user 94954 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94954 AUC after training: 0.5
User 94954 does not improve AUC. Reverting changes.
Training on augumented user 49947 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49947 AUC after training: 0.5
User 49947 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:41:57.885486] start test user 83063 8/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:41:58.621956] start test user 83063 8/568 recall augumented users by random, augumented_users = [132474, 65708, 74387, 74774, 8871, 71448, 135449, 14564, 30224, 49487, 83266, 105697, 32743, 108401, 107935, 80459, 104953, 15574, 88721, 97824, 51067, 131147, 122799, 120586, 129575, 116822, 7844, 128394, 38715, 67391, 56707, 84831, 62800, 118163, 23619, 3120, 243, 51791, 1390, 116607, 138401, 31475, 33967, 48046, 106855, 7274, 82659, 75607, 107965, 7729]
[2024-12-02 17:41:58.650385] user = 83063 Cloud 8/568
[2024-12-02 17:41:58.672414] user = 83063 Local 8/568
[2024-12-02 17:41:58.884270] user = 83063 Local+ 8/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:42:00.812091] user = 83063 MPDA- 8/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 132474 0/50 current_auc = 1.0
User 132474 AUC after training: 1.0
User 132474 does not improve AUC. Reverting changes.
Training on augumented user 65708 1/50 current_auc = 1.0
User 65708 AUC after training: 1.0
User 65708 does not improve AUC. Reverting changes.
Training on augumented user 74387 2/50 current_auc = 1.0
User 74387 AUC after training: 1.0
User 74387 does not improve AUC. Reverting changes.
Training on augumented user 74774 3/50 current_auc = 1.0
User 74774 AUC after training: 1.0
User 74774 does not improve AUC. Reverting changes.
Training on augumented user 8871 4/50 current_auc = 1.0
User 8871 AUC after training: 1.0
User 8871 does not improve AUC. Reverting changes.
Training on augumented user 71448 5/50 current_auc = 1.0
User 71448 AUC after training: 1.0
User 71448 does not improve AUC. Reverting changes.
Training on augumented user 135449 6/50 current_auc = 1.0
User 135449 AUC after training: 1.0
User 135449 does not improve AUC. Reverting changes.
Training on augumented user 14564 7/50 current_auc = 1.0
User 14564 AUC after training: 1.0
User 14564 does not improve AUC. Reverting changes.
Training on augumented user 30224 8/50 current_auc = 1.0
User 30224 AUC after training: 1.0
User 30224 does not improve AUC. Reverting changes.
Training on augumented user 49487 9/50 current_auc = 1.0
User 49487 AUC after training: 1.0
User 49487 does not improve AUC. Reverting changes.
Training on augumented user 83266 10/50 current_auc = 1.0
User 83266 AUC after training: 1.0
User 83266 does not improve AUC. Reverting changes.
Training on augumented user 105697 11/50 current_auc = 1.0
User 105697 AUC after training: 1.0
User 105697 does not improve AUC. Reverting changes.
Training on augumented user 32743 12/50 current_auc = 1.0
User 32743 AUC after training: 1.0
User 32743 does not improve AUC. Reverting changes.
Training on augumented user 108401 13/50 current_auc = 1.0
User 108401 AUC after training: 1.0
User 108401 does not improve AUC. Reverting changes.
Training on augumented user 107935 14/50 current_auc = 1.0
User 107935 AUC after training: 1.0
User 107935 does not improve AUC. Reverting changes.
Training on augumented user 80459 15/50 current_auc = 1.0
User 80459 AUC after training: 1.0
User 80459 does not improve AUC. Reverting changes.
Training on augumented user 104953 16/50 current_auc = 1.0
User 104953 AUC after training: 1.0
User 104953 does not improve AUC. Reverting changes.
Training on augumented user 15574 17/50 current_auc = 1.0
User 15574 AUC after training: 1.0
User 15574 does not improve AUC. Reverting changes.
Training on augumented user 88721 18/50 current_auc = 1.0
User 88721 AUC after training: 1.0
User 88721 does not improve AUC. Reverting changes.
Training on augumented user 97824 19/50 current_auc = 1.0
User 97824 AUC after training: 1.0
User 97824 does not improve AUC. Reverting changes.
Training on augumented user 51067 20/50 current_auc = 1.0
User 51067 AUC after training: 1.0
User 51067 does not improve AUC. Reverting changes.
Training on augumented user 131147 21/50 current_auc = 1.0
User 131147 AUC after training: 1.0
User 131147 does not improve AUC. Reverting changes.
Training on augumented user 122799 22/50 current_auc = 1.0
User 122799 AUC after training: 1.0
User 122799 does not improve AUC. Reverting changes.
Training on augumented user 120586 23/50 current_auc = 1.0
User 120586 AUC after training: 1.0
User 120586 does not improve AUC. Reverting changes.
Training on augumented user 129575 24/50 current_auc = 1.0
User 129575 AUC after training: 1.0
User 129575 does not improve AUC. Reverting changes.
Training on augumented user 116822 25/50 current_auc = 1.0
User 116822 AUC after training: 1.0
User 116822 does not improve AUC. Reverting changes.
Training on augumented user 7844 26/50 current_auc = 1.0
User 7844 AUC after training: 1.0
User 7844 does not improve AUC. Reverting changes.
Training on augumented user 128394 27/50 current_auc = 1.0
User 128394 AUC after training: 1.0
User 128394 does not improve AUC. Reverting changes.
Training on augumented user 38715 28/50 current_auc = 1.0
User 38715 AUC after training: 1.0
User 38715 does not improve AUC. Reverting changes.
Training on augumented user 67391 29/50 current_auc = 1.0
User 67391 AUC after training: 1.0
User 67391 does not improve AUC. Reverting changes.
Training on augumented user 56707 30/50 current_auc = 1.0
User 56707 AUC after training: 1.0
User 56707 does not improve AUC. Reverting changes.
Training on augumented user 84831 31/50 current_auc = 1.0
User 84831 AUC after training: 1.0
User 84831 does not improve AUC. Reverting changes.
Training on augumented user 62800 32/50 current_auc = 1.0
User 62800 AUC after training: 1.0
User 62800 does not improve AUC. Reverting changes.
Training on augumented user 118163 33/50 current_auc = 1.0
User 118163 AUC after training: 1.0
User 118163 does not improve AUC. Reverting changes.
Training on augumented user 23619 34/50 current_auc = 1.0
User 23619 AUC after training: 1.0
User 23619 does not improve AUC. Reverting changes.
Training on augumented user 3120 35/50 current_auc = 1.0
User 3120 AUC after training: 1.0
User 3120 does not improve AUC. Reverting changes.
Training on augumented user 243 36/50 current_auc = 1.0
User 243 AUC after training: 1.0
User 243 does not improve AUC. Reverting changes.
Training on augumented user 51791 37/50 current_auc = 1.0
User 51791 AUC after training: 1.0
User 51791 does not improve AUC. Reverting changes.
Training on augumented user 1390 38/50 current_auc = 1.0
User 1390 AUC after training: 1.0
User 1390 does not improve AUC. Reverting changes.
Training on augumented user 116607 39/50 current_auc = 1.0
User 116607 AUC after training: 1.0
User 116607 does not improve AUC. Reverting changes.
Training on augumented user 138401 40/50 current_auc = 1.0
User 138401 AUC after training: 1.0
User 138401 does not improve AUC. Reverting changes.
Training on augumented user 31475 41/50 current_auc = 1.0
User 31475 AUC after training: 1.0
User 31475 does not improve AUC. Reverting changes.
Training on augumented user 33967 42/50 current_auc = 1.0
User 33967 AUC after training: 1.0
User 33967 does not improve AUC. Reverting changes.
Training on augumented user 48046 43/50 current_auc = 1.0
User 48046 AUC after training: 1.0
User 48046 does not improve AUC. Reverting changes.
Training on augumented user 106855 44/50 current_auc = 1.0
User 106855 AUC after training: 1.0
User 106855 does not improve AUC. Reverting changes.
Training on augumented user 7274 45/50 current_auc = 1.0
User 7274 AUC after training: 1.0
User 7274 does not improve AUC. Reverting changes.
Training on augumented user 82659 46/50 current_auc = 1.0
User 82659 AUC after training: 1.0
User 82659 does not improve AUC. Reverting changes.
Training on augumented user 75607 47/50 current_auc = 1.0
User 75607 AUC after training: 1.0
User 75607 does not improve AUC. Reverting changes.
Training on augumented user 107965 48/50 current_auc = 1.0
User 107965 AUC after training: 1.0
User 107965 does not improve AUC. Reverting changes.
Training on augumented user 7729 49/50 current_auc = 1.0
User 7729 AUC after training: 1.0
User 7729 does not improve AUC. Reverting changes.
[2024-12-02 17:42:25.550551] start test user 83081 9/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:42:26.216236] start test user 83081 9/568 recall augumented users by random, augumented_users = [57138, 81925, 68677, 121623, 119411, 25949, 133362, 135248, 217, 28451, 69875, 92120, 61719, 136162, 59857, 102668, 50602, 110139, 104271, 70155, 52386, 17893, 105720, 125896, 61928, 27297, 89977, 23729, 132045, 36292, 32210, 23818, 107829, 73106, 62064, 2841, 64075, 94657, 133749, 21900, 135976, 55121, 74484, 67564, 82290, 82050, 56179, 103943, 47962, 100338]
[2024-12-02 17:42:26.256587] user = 83081 Cloud 9/568
[2024-12-02 17:42:26.338540] user = 83081 Local 9/568
[2024-12-02 17:42:26.470378] user = 83081 Local+ 9/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:42:29.349015] user = 83081 MPDA- 9/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5656754696056006
Training on augumented user 57138 0/50 current_auc = 0.5656754696056006
User 57138 AUC after training: 0.5648783530879601
User 57138 does not improve AUC. Reverting changes.
Training on augumented user 81925 1/50 current_auc = 0.5656754696056006
User 81925 AUC after training: 0.5665072433631385
User 81925 improves AUC. Keeping the model.
Training on augumented user 68677 2/50 current_auc = 0.5665072433631385
User 68677 AUC after training: 0.5668538157621126
User 68677 improves AUC. Keeping the model.
Training on augumented user 121623 3/50 current_auc = 0.5668538157621126
User 121623 AUC after training: 0.567373674360574
User 121623 improves AUC. Keeping the model.
Training on augumented user 119411 4/50 current_auc = 0.567373674360574
User 119411 AUC after training: 0.5685173632771885
User 119411 improves AUC. Keeping the model.
Training on augumented user 25949 5/50 current_auc = 0.5685173632771885
User 25949 AUC after training: 0.5687599639564704
User 25949 improves AUC. Keeping the model.
Training on augumented user 133362 6/50 current_auc = 0.5687599639564704
User 133362 AUC after training: 0.5680321619186247
User 133362 does not improve AUC. Reverting changes.
Training on augumented user 135248 7/50 current_auc = 0.5687599639564704
User 135248 AUC after training: 0.567373674360574
User 135248 does not improve AUC. Reverting changes.
Training on augumented user 217 8/50 current_auc = 0.5687599639564704
User 217 AUC after training: 0.5688985929160602
User 217 improves AUC. Keeping the model.
Training on augumented user 28451 9/50 current_auc = 0.5688985929160602
User 28451 AUC after training: 0.5690718791155472
User 28451 improves AUC. Keeping the model.
Training on augumented user 69875 10/50 current_auc = 0.5690718791155472
User 69875 AUC after training: 0.5688985929160602
User 69875 does not improve AUC. Reverting changes.
Training on augumented user 92120 11/50 current_auc = 0.5690718791155472
User 92120 AUC after training: 0.5688985929160602
User 92120 does not improve AUC. Reverting changes.
Training on augumented user 61719 12/50 current_auc = 0.5690718791155472
User 61719 AUC after training: 0.5693144797948291
User 61719 improves AUC. Keeping the model.
Training on augumented user 136162 13/50 current_auc = 0.5693144797948291
User 136162 AUC after training: 0.5696957094337007
User 136162 improves AUC. Keeping the model.
Training on augumented user 59857 14/50 current_auc = 0.5696957094337007
User 59857 AUC after training: 0.5695224232342135
User 59857 does not improve AUC. Reverting changes.
Training on augumented user 102668 15/50 current_auc = 0.5696957094337007
User 102668 AUC after training: 0.5701809107922644
User 102668 improves AUC. Keeping the model.
Training on augumented user 50602 16/50 current_auc = 0.5701809107922644
User 50602 AUC after training: 0.5694877659943162
User 50602 does not improve AUC. Reverting changes.
Training on augumented user 110139 17/50 current_auc = 0.5701809107922644
User 110139 AUC after training: 0.5689332501559576
User 110139 does not improve AUC. Reverting changes.
Training on augumented user 104271 18/50 current_auc = 0.5701809107922644
User 104271 AUC after training: 0.5696263949539058
User 104271 does not improve AUC. Reverting changes.
Training on augumented user 70155 19/50 current_auc = 0.5701809107922644
User 70155 AUC after training: 0.5700769390725722
User 70155 does not improve AUC. Reverting changes.
Training on augumented user 52386 20/50 current_auc = 0.5701809107922644
User 52386 AUC after training: 0.5696263949539059
User 52386 does not improve AUC. Reverting changes.
Training on augumented user 17893 21/50 current_auc = 0.5701809107922644
User 17893 AUC after training: 0.5702155680321619
User 17893 improves AUC. Keeping the model.
Training on augumented user 105720 22/50 current_auc = 0.5702155680321619
User 105720 AUC after training: 0.570735426630623
User 105720 improves AUC. Keeping the model.
Training on augumented user 125896 23/50 current_auc = 0.570735426630623
User 125896 AUC after training: 0.5673216885007278
User 125896 does not improve AUC. Reverting changes.
Training on augumented user 61928 24/50 current_auc = 0.570735426630623
User 61928 AUC after training: 0.5708740555902128
User 61928 improves AUC. Keeping the model.
Training on augumented user 27297 25/50 current_auc = 0.5708740555902128
User 27297 AUC after training: 0.5709433700700076
User 27297 improves AUC. Keeping the model.
Training on augumented user 89977 26/50 current_auc = 0.5709433700700076
User 89977 AUC after training: 0.5705274831912386
User 89977 does not improve AUC. Reverting changes.
Training on augumented user 23729 27/50 current_auc = 0.5709433700700076
User 23729 AUC after training: 0.5710473417896998
User 23729 improves AUC. Keeping the model.
Training on augumented user 132045 28/50 current_auc = 0.5710473417896998
User 132045 AUC after training: 0.5709433700700076
User 132045 does not improve AUC. Reverting changes.
Training on augumented user 36292 29/50 current_auc = 0.5710473417896998
User 36292 AUC after training: 0.5703541969917516
User 36292 does not improve AUC. Reverting changes.
Training on augumented user 32210 30/50 current_auc = 0.5710473417896998
User 32210 AUC after training: 0.5706487835308796
User 32210 does not improve AUC. Reverting changes.
Training on augumented user 23818 31/50 current_auc = 0.5710473417896998
User 23818 AUC after training: 0.5714805572884176
User 23818 improves AUC. Keeping the model.
Training on augumented user 107829 32/50 current_auc = 0.5714805572884176
User 107829 AUC after training: 0.5712379566091357
User 107829 does not improve AUC. Reverting changes.
Training on augumented user 73106 33/50 current_auc = 0.5714805572884176
User 73106 AUC after training: 0.5714805572884176
User 73106 does not improve AUC. Reverting changes.
Training on augumented user 62064 34/50 current_auc = 0.5714805572884176
User 62064 AUC after training: 0.5713245997088792
User 62064 does not improve AUC. Reverting changes.
Training on augumented user 2841 35/50 current_auc = 0.5714805572884176
User 2841 AUC after training: 0.5710473417896998
User 2841 does not improve AUC. Reverting changes.
Training on augumented user 64075 36/50 current_auc = 0.5714805572884176
User 64075 AUC after training: 0.5706141262909823
User 64075 does not improve AUC. Reverting changes.
Training on augumented user 94657 37/50 current_auc = 0.5714805572884176
User 94657 AUC after training: 0.5714805572884175
User 94657 does not improve AUC. Reverting changes.
Training on augumented user 133749 38/50 current_auc = 0.5714805572884176
User 133749 AUC after training: 0.5716885007278021
User 133749 improves AUC. Keeping the model.
Training on augumented user 21900 39/50 current_auc = 0.5716885007278021
User 21900 AUC after training: 0.5706487835308796
User 21900 does not improve AUC. Reverting changes.
Training on augumented user 135976 40/50 current_auc = 0.5716885007278021
User 135976 AUC after training: 0.567546960560061
User 135976 does not improve AUC. Reverting changes.
Training on augumented user 55121 41/50 current_auc = 0.5716885007278021
User 55121 AUC after training: 0.5713765855687253
User 55121 does not improve AUC. Reverting changes.
Training on augumented user 74484 42/50 current_auc = 0.5716885007278021
User 74484 AUC after training: 0.5720004158868788
User 74484 improves AUC. Keeping the model.
Training on augumented user 67564 43/50 current_auc = 0.5720004158868788
User 67564 AUC after training: 0.5719311014070839
User 67564 does not improve AUC. Reverting changes.
Training on augumented user 82290 44/50 current_auc = 0.5720004158868788
User 82290 AUC after training: 0.5720697303666736
User 82290 improves AUC. Keeping the model.
Training on augumented user 82050 45/50 current_auc = 0.5720697303666736
User 82050 AUC after training: 0.5710300131697512
User 82050 does not improve AUC. Reverting changes.
Training on augumented user 56179 46/50 current_auc = 0.5720697303666736
User 56179 AUC after training: 0.5715845290081097
User 56179 does not improve AUC. Reverting changes.
Training on augumented user 103943 47/50 current_auc = 0.5720697303666736
User 103943 AUC after training: 0.5656408123657032
User 103943 does not improve AUC. Reverting changes.
Training on augumented user 47962 48/50 current_auc = 0.5720697303666736
User 47962 AUC after training: 0.572277673806058
User 47962 improves AUC. Keeping the model.
Training on augumented user 100338 49/50 current_auc = 0.572277673806058
User 100338 AUC after training: 0.5714805572884175
User 100338 does not improve AUC. Reverting changes.
[2024-12-02 17:42:56.703953] start test user 83105 10/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:42:57.147900] start test user 83105 10/568 recall augumented users by random, augumented_users = [127100, 96305, 79387, 91073, 13048, 126787, 26723, 23426, 78168, 46972, 7710, 122688, 82815, 42108, 132654, 130573, 77215, 75901, 29668, 81368, 27311, 131648, 36186, 87035, 48789, 117036, 48718, 113690, 76008, 16515, 45364, 89750, 10901, 92253, 79299, 61719, 117432, 61391, 44873, 70036, 57890, 7233, 119858, 70418, 31016, 2840, 21759, 93752, 36596, 51885]
[2024-12-02 17:42:57.162448] user = 83105 Cloud 10/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:42:57.168523] user = 83105 Local 10/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:42:57.233852] user = 83105 Local+ 10/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:42:58.682773] user = 83105 MPDA- 10/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 127100 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127100 AUC after training: 0.5
User 127100 does not improve AUC. Reverting changes.
Training on augumented user 96305 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96305 AUC after training: 0.5
User 96305 does not improve AUC. Reverting changes.
Training on augumented user 79387 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79387 AUC after training: 0.5
User 79387 does not improve AUC. Reverting changes.
Training on augumented user 91073 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91073 AUC after training: 0.5
User 91073 does not improve AUC. Reverting changes.
Training on augumented user 13048 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13048 AUC after training: 0.5
User 13048 does not improve AUC. Reverting changes.
Training on augumented user 126787 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126787 AUC after training: 0.5
User 126787 does not improve AUC. Reverting changes.
Training on augumented user 26723 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26723 AUC after training: 0.5
User 26723 does not improve AUC. Reverting changes.
Training on augumented user 23426 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23426 AUC after training: 0.5
User 23426 does not improve AUC. Reverting changes.
Training on augumented user 78168 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78168 AUC after training: 0.5
User 78168 does not improve AUC. Reverting changes.
Training on augumented user 46972 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46972 AUC after training: 0.5
User 46972 does not improve AUC. Reverting changes.
Training on augumented user 7710 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7710 AUC after training: 0.5
User 7710 does not improve AUC. Reverting changes.
Training on augumented user 122688 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122688 AUC after training: 0.5
User 122688 does not improve AUC. Reverting changes.
Training on augumented user 82815 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82815 AUC after training: 0.5
User 82815 does not improve AUC. Reverting changes.
Training on augumented user 42108 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42108 AUC after training: 0.5
User 42108 does not improve AUC. Reverting changes.
Training on augumented user 132654 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132654 AUC after training: 0.5
User 132654 does not improve AUC. Reverting changes.
Training on augumented user 130573 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130573 AUC after training: 0.5
User 130573 does not improve AUC. Reverting changes.
Training on augumented user 77215 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77215 AUC after training: 0.5
User 77215 does not improve AUC. Reverting changes.
Training on augumented user 75901 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75901 AUC after training: 0.5
User 75901 does not improve AUC. Reverting changes.
Training on augumented user 29668 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29668 AUC after training: 0.5
User 29668 does not improve AUC. Reverting changes.
Training on augumented user 81368 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81368 AUC after training: 0.5
User 81368 does not improve AUC. Reverting changes.
Training on augumented user 27311 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27311 AUC after training: 0.5
User 27311 does not improve AUC. Reverting changes.
Training on augumented user 131648 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131648 AUC after training: 0.5
User 131648 does not improve AUC. Reverting changes.
Training on augumented user 36186 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36186 AUC after training: 0.5
User 36186 does not improve AUC. Reverting changes.
Training on augumented user 87035 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87035 AUC after training: 0.5
User 87035 does not improve AUC. Reverting changes.
Training on augumented user 48789 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48789 AUC after training: 0.5
User 48789 does not improve AUC. Reverting changes.
Training on augumented user 117036 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117036 AUC after training: 0.5
User 117036 does not improve AUC. Reverting changes.
Training on augumented user 48718 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48718 AUC after training: 0.5
User 48718 does not improve AUC. Reverting changes.
Training on augumented user 113690 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113690 AUC after training: 0.5
User 113690 does not improve AUC. Reverting changes.
Training on augumented user 76008 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76008 AUC after training: 0.5
User 76008 does not improve AUC. Reverting changes.
Training on augumented user 16515 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16515 AUC after training: 0.5
User 16515 does not improve AUC. Reverting changes.
Training on augumented user 45364 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45364 AUC after training: 0.5
User 45364 does not improve AUC. Reverting changes.
Training on augumented user 89750 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89750 AUC after training: 0.5
User 89750 does not improve AUC. Reverting changes.
Training on augumented user 10901 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10901 AUC after training: 0.5
User 10901 does not improve AUC. Reverting changes.
Training on augumented user 92253 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92253 AUC after training: 0.5
User 92253 does not improve AUC. Reverting changes.
Training on augumented user 79299 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79299 AUC after training: 0.5
User 79299 does not improve AUC. Reverting changes.
Training on augumented user 61719 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61719 AUC after training: 0.5
User 61719 does not improve AUC. Reverting changes.
Training on augumented user 117432 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117432 AUC after training: 0.5
User 117432 does not improve AUC. Reverting changes.
Training on augumented user 61391 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61391 AUC after training: 0.5
User 61391 does not improve AUC. Reverting changes.
Training on augumented user 44873 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44873 AUC after training: 0.5
User 44873 does not improve AUC. Reverting changes.
Training on augumented user 70036 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70036 AUC after training: 0.5
User 70036 does not improve AUC. Reverting changes.
Training on augumented user 57890 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57890 AUC after training: 0.5
User 57890 does not improve AUC. Reverting changes.
Training on augumented user 7233 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7233 AUC after training: 0.5
User 7233 does not improve AUC. Reverting changes.
Training on augumented user 119858 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119858 AUC after training: 0.5
User 119858 does not improve AUC. Reverting changes.
Training on augumented user 70418 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70418 AUC after training: 0.5
User 70418 does not improve AUC. Reverting changes.
Training on augumented user 31016 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31016 AUC after training: 0.5
User 31016 does not improve AUC. Reverting changes.
Training on augumented user 2840 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2840 AUC after training: 0.5
User 2840 does not improve AUC. Reverting changes.
Training on augumented user 21759 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21759 AUC after training: 0.5
User 21759 does not improve AUC. Reverting changes.
Training on augumented user 93752 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93752 AUC after training: 0.5
User 93752 does not improve AUC. Reverting changes.
Training on augumented user 36596 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36596 AUC after training: 0.5
User 36596 does not improve AUC. Reverting changes.
Training on augumented user 51885 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51885 AUC after training: 0.5
User 51885 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:43:23.558367] start test user 83122 11/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:43:23.979879] start test user 83122 11/568 recall augumented users by random, augumented_users = [52612, 133072, 78364, 36824, 111148, 135564, 82838, 118633, 121236, 11264, 125506, 35453, 119913, 115241, 125456, 85245, 102225, 22250, 109220, 54416, 87191, 71078, 37572, 5002, 68094, 95308, 81880, 62869, 107054, 135593, 1298, 25977, 10643, 43200, 54568, 109611, 66357, 38373, 77239, 35912, 107584, 78110, 30917, 82257, 97873, 109751, 34039, 39354, 48694, 53625]
[2024-12-02 17:43:23.996729] user = 83122 Cloud 11/568
[2024-12-02 17:43:24.009485] user = 83122 Local 11/568
[2024-12-02 17:43:24.095982] user = 83122 Local+ 11/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:43:26.374536] user = 83122 MPDA- 11/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6025641025641025
Training on augumented user 52612 0/50 current_auc = 0.6025641025641025
User 52612 AUC after training: 0.6025641025641025
User 52612 does not improve AUC. Reverting changes.
Training on augumented user 133072 1/50 current_auc = 0.6025641025641025
User 133072 AUC after training: 0.6
User 133072 does not improve AUC. Reverting changes.
Training on augumented user 78364 2/50 current_auc = 0.6025641025641025
User 78364 AUC after training: 0.6025641025641025
User 78364 does not improve AUC. Reverting changes.
Training on augumented user 36824 3/50 current_auc = 0.6025641025641025
User 36824 AUC after training: 0.6025641025641025
User 36824 does not improve AUC. Reverting changes.
Training on augumented user 111148 4/50 current_auc = 0.6025641025641025
User 111148 AUC after training: 0.6025641025641025
User 111148 does not improve AUC. Reverting changes.
Training on augumented user 135564 5/50 current_auc = 0.6025641025641025
User 135564 AUC after training: 0.6025641025641025
User 135564 does not improve AUC. Reverting changes.
Training on augumented user 82838 6/50 current_auc = 0.6025641025641025
User 82838 AUC after training: 0.6025641025641025
User 82838 does not improve AUC. Reverting changes.
Training on augumented user 118633 7/50 current_auc = 0.6025641025641025
User 118633 AUC after training: 0.6012820512820513
User 118633 does not improve AUC. Reverting changes.
Training on augumented user 121236 8/50 current_auc = 0.6025641025641025
User 121236 AUC after training: 0.6025641025641025
User 121236 does not improve AUC. Reverting changes.
Training on augumented user 11264 9/50 current_auc = 0.6025641025641025
User 11264 AUC after training: 0.6025641025641025
User 11264 does not improve AUC. Reverting changes.
Training on augumented user 125506 10/50 current_auc = 0.6025641025641025
User 125506 AUC after training: 0.6025641025641025
User 125506 does not improve AUC. Reverting changes.
Training on augumented user 35453 11/50 current_auc = 0.6025641025641025
User 35453 AUC after training: 0.6025641025641025
User 35453 does not improve AUC. Reverting changes.
Training on augumented user 119913 12/50 current_auc = 0.6025641025641025
User 119913 AUC after training: 0.6000000000000001
User 119913 does not improve AUC. Reverting changes.
Training on augumented user 115241 13/50 current_auc = 0.6025641025641025
User 115241 AUC after training: 0.6000000000000001
User 115241 does not improve AUC. Reverting changes.
Training on augumented user 125456 14/50 current_auc = 0.6025641025641025
User 125456 AUC after training: 0.5987179487179488
User 125456 does not improve AUC. Reverting changes.
Training on augumented user 85245 15/50 current_auc = 0.6025641025641025
User 85245 AUC after training: 0.6025641025641025
User 85245 does not improve AUC. Reverting changes.
Training on augumented user 102225 16/50 current_auc = 0.6025641025641025
User 102225 AUC after training: 0.6025641025641025
User 102225 does not improve AUC. Reverting changes.
Training on augumented user 22250 17/50 current_auc = 0.6025641025641025
User 22250 AUC after training: 0.6012820512820513
User 22250 does not improve AUC. Reverting changes.
Training on augumented user 109220 18/50 current_auc = 0.6025641025641025
User 109220 AUC after training: 0.6025641025641025
User 109220 does not improve AUC. Reverting changes.
Training on augumented user 54416 19/50 current_auc = 0.6025641025641025
User 54416 AUC after training: 0.6025641025641025
User 54416 does not improve AUC. Reverting changes.
Training on augumented user 87191 20/50 current_auc = 0.6025641025641025
User 87191 AUC after training: 0.6012820512820513
User 87191 does not improve AUC. Reverting changes.
Training on augumented user 71078 21/50 current_auc = 0.6025641025641025
User 71078 AUC after training: 0.6012820512820513
User 71078 does not improve AUC. Reverting changes.
Training on augumented user 37572 22/50 current_auc = 0.6025641025641025
User 37572 AUC after training: 0.6025641025641025
User 37572 does not improve AUC. Reverting changes.
Training on augumented user 5002 23/50 current_auc = 0.6025641025641025
User 5002 AUC after training: 0.6012820512820513
User 5002 does not improve AUC. Reverting changes.
Training on augumented user 68094 24/50 current_auc = 0.6025641025641025
User 68094 AUC after training: 0.6012820512820513
User 68094 does not improve AUC. Reverting changes.
Training on augumented user 95308 25/50 current_auc = 0.6025641025641025
User 95308 AUC after training: 0.6038461538461538
User 95308 improves AUC. Keeping the model.
Training on augumented user 81880 26/50 current_auc = 0.6038461538461538
User 81880 AUC after training: 0.6038461538461538
User 81880 does not improve AUC. Reverting changes.
Training on augumented user 62869 27/50 current_auc = 0.6038461538461538
User 62869 AUC after training: 0.6038461538461538
User 62869 does not improve AUC. Reverting changes.
Training on augumented user 107054 28/50 current_auc = 0.6038461538461538
User 107054 AUC after training: 0.6025641025641025
User 107054 does not improve AUC. Reverting changes.
Training on augumented user 135593 29/50 current_auc = 0.6038461538461538
User 135593 AUC after training: 0.6038461538461538
User 135593 does not improve AUC. Reverting changes.
Training on augumented user 1298 30/50 current_auc = 0.6038461538461538
User 1298 AUC after training: 0.6038461538461538
User 1298 does not improve AUC. Reverting changes.
Training on augumented user 25977 31/50 current_auc = 0.6038461538461538
User 25977 AUC after training: 0.6012820512820513
User 25977 does not improve AUC. Reverting changes.
Training on augumented user 10643 32/50 current_auc = 0.6038461538461538
User 10643 AUC after training: 0.6025641025641025
User 10643 does not improve AUC. Reverting changes.
Training on augumented user 43200 33/50 current_auc = 0.6038461538461538
User 43200 AUC after training: 0.6025641025641025
User 43200 does not improve AUC. Reverting changes.
Training on augumented user 54568 34/50 current_auc = 0.6038461538461538
User 54568 AUC after training: 0.6038461538461538
User 54568 does not improve AUC. Reverting changes.
Training on augumented user 109611 35/50 current_auc = 0.6038461538461538
User 109611 AUC after training: 0.6038461538461538
User 109611 does not improve AUC. Reverting changes.
Training on augumented user 66357 36/50 current_auc = 0.6038461538461538
User 66357 AUC after training: 0.6038461538461538
User 66357 does not improve AUC. Reverting changes.
Training on augumented user 38373 37/50 current_auc = 0.6038461538461538
User 38373 AUC after training: 0.6051282051282051
User 38373 improves AUC. Keeping the model.
Training on augumented user 77239 38/50 current_auc = 0.6051282051282051
User 77239 AUC after training: 0.6051282051282051
User 77239 does not improve AUC. Reverting changes.
Training on augumented user 35912 39/50 current_auc = 0.6051282051282051
User 35912 AUC after training: 0.6051282051282051
User 35912 does not improve AUC. Reverting changes.
Training on augumented user 107584 40/50 current_auc = 0.6051282051282051
User 107584 AUC after training: 0.6038461538461538
User 107584 does not improve AUC. Reverting changes.
Training on augumented user 78110 41/50 current_auc = 0.6051282051282051
User 78110 AUC after training: 0.6076923076923076
User 78110 improves AUC. Keeping the model.
Training on augumented user 30917 42/50 current_auc = 0.6076923076923076
User 30917 AUC after training: 0.6064102564102564
User 30917 does not improve AUC. Reverting changes.
Training on augumented user 82257 43/50 current_auc = 0.6076923076923076
User 82257 AUC after training: 0.6076923076923076
User 82257 does not improve AUC. Reverting changes.
Training on augumented user 97873 44/50 current_auc = 0.6076923076923076
User 97873 AUC after training: 0.5987179487179487
User 97873 does not improve AUC. Reverting changes.
Training on augumented user 109751 45/50 current_auc = 0.6076923076923076
User 109751 AUC after training: 0.6076923076923076
User 109751 does not improve AUC. Reverting changes.
Training on augumented user 34039 46/50 current_auc = 0.6076923076923076
User 34039 AUC after training: 0.6064102564102564
User 34039 does not improve AUC. Reverting changes.
Training on augumented user 39354 47/50 current_auc = 0.6076923076923076
User 39354 AUC after training: 0.6064102564102564
User 39354 does not improve AUC. Reverting changes.
Training on augumented user 48694 48/50 current_auc = 0.6076923076923076
User 48694 AUC after training: 0.6064102564102564
User 48694 does not improve AUC. Reverting changes.
Training on augumented user 53625 49/50 current_auc = 0.6076923076923076
User 53625 AUC after training: 0.6076923076923076
User 53625 does not improve AUC. Reverting changes.
[2024-12-02 17:43:57.167292] start test user 83151 12/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:43:57.578896] start test user 83151 12/568 recall augumented users by random, augumented_users = [54769, 53175, 942, 129266, 105575, 87209, 116211, 135426, 131734, 38638, 12372, 11169, 79959, 5966, 118579, 119183, 2808, 51365, 50492, 89738, 4404, 87593, 57487, 49297, 12654, 122962, 62553, 86282, 95899, 31900, 26366, 98452, 66262, 9441, 137115, 3466, 27379, 20627, 39148, 1902, 120857, 72866, 46880, 106641, 61485, 99295, 49003, 22216, 34551, 98605]
[2024-12-02 17:43:57.594156] user = 83151 Cloud 12/568
[2024-12-02 17:43:57.604341] user = 83151 Local 12/568
[2024-12-02 17:43:57.686308] user = 83151 Local+ 12/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:43:59.200305] user = 83151 MPDA- 12/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5555555555555556
Training on augumented user 54769 0/50 current_auc = 0.5555555555555556
User 54769 AUC after training: 0.5555555555555556
User 54769 does not improve AUC. Reverting changes.
Training on augumented user 53175 1/50 current_auc = 0.5555555555555556
User 53175 AUC after training: 0.5555555555555556
User 53175 does not improve AUC. Reverting changes.
Training on augumented user 942 2/50 current_auc = 0.5555555555555556
User 942 AUC after training: 0.5555555555555556
User 942 does not improve AUC. Reverting changes.
Training on augumented user 129266 3/50 current_auc = 0.5555555555555556
User 129266 AUC after training: 0.5555555555555556
User 129266 does not improve AUC. Reverting changes.
Training on augumented user 105575 4/50 current_auc = 0.5555555555555556
User 105575 AUC after training: 0.5555555555555556
User 105575 does not improve AUC. Reverting changes.
Training on augumented user 87209 5/50 current_auc = 0.5555555555555556
User 87209 AUC after training: 0.5555555555555556
User 87209 does not improve AUC. Reverting changes.
Training on augumented user 116211 6/50 current_auc = 0.5555555555555556
User 116211 AUC after training: 0.5555555555555556
User 116211 does not improve AUC. Reverting changes.
Training on augumented user 135426 7/50 current_auc = 0.5555555555555556
User 135426 AUC after training: 0.5555555555555556
User 135426 does not improve AUC. Reverting changes.
Training on augumented user 131734 8/50 current_auc = 0.5555555555555556
User 131734 AUC after training: 0.5555555555555556
User 131734 does not improve AUC. Reverting changes.
Training on augumented user 38638 9/50 current_auc = 0.5555555555555556
User 38638 AUC after training: 0.5555555555555556
User 38638 does not improve AUC. Reverting changes.
Training on augumented user 12372 10/50 current_auc = 0.5555555555555556
User 12372 AUC after training: 0.5555555555555556
User 12372 does not improve AUC. Reverting changes.
Training on augumented user 11169 11/50 current_auc = 0.5555555555555556
User 11169 AUC after training: 0.5555555555555556
User 11169 does not improve AUC. Reverting changes.
Training on augumented user 79959 12/50 current_auc = 0.5555555555555556
User 79959 AUC after training: 0.5555555555555556
User 79959 does not improve AUC. Reverting changes.
Training on augumented user 5966 13/50 current_auc = 0.5555555555555556
User 5966 AUC after training: 0.5555555555555556
User 5966 does not improve AUC. Reverting changes.
Training on augumented user 118579 14/50 current_auc = 0.5555555555555556
User 118579 AUC after training: 0.5555555555555556
User 118579 does not improve AUC. Reverting changes.
Training on augumented user 119183 15/50 current_auc = 0.5555555555555556
User 119183 AUC after training: 0.5555555555555556
User 119183 does not improve AUC. Reverting changes.
Training on augumented user 2808 16/50 current_auc = 0.5555555555555556
User 2808 AUC after training: 0.5555555555555556
User 2808 does not improve AUC. Reverting changes.
Training on augumented user 51365 17/50 current_auc = 0.5555555555555556
User 51365 AUC after training: 0.5555555555555556
User 51365 does not improve AUC. Reverting changes.
Training on augumented user 50492 18/50 current_auc = 0.5555555555555556
User 50492 AUC after training: 0.5555555555555556
User 50492 does not improve AUC. Reverting changes.
Training on augumented user 89738 19/50 current_auc = 0.5555555555555556
User 89738 AUC after training: 0.5555555555555556
User 89738 does not improve AUC. Reverting changes.
Training on augumented user 4404 20/50 current_auc = 0.5555555555555556
User 4404 AUC after training: 0.5555555555555556
User 4404 does not improve AUC. Reverting changes.
Training on augumented user 87593 21/50 current_auc = 0.5555555555555556
User 87593 AUC after training: 0.5555555555555556
User 87593 does not improve AUC. Reverting changes.
Training on augumented user 57487 22/50 current_auc = 0.5555555555555556
User 57487 AUC after training: 0.5555555555555556
User 57487 does not improve AUC. Reverting changes.
Training on augumented user 49297 23/50 current_auc = 0.5555555555555556
User 49297 AUC after training: 0.5555555555555556
User 49297 does not improve AUC. Reverting changes.
Training on augumented user 12654 24/50 current_auc = 0.5555555555555556
User 12654 AUC after training: 0.5555555555555556
User 12654 does not improve AUC. Reverting changes.
Training on augumented user 122962 25/50 current_auc = 0.5555555555555556
User 122962 AUC after training: 0.5555555555555556
User 122962 does not improve AUC. Reverting changes.
Training on augumented user 62553 26/50 current_auc = 0.5555555555555556
User 62553 AUC after training: 0.5555555555555556
User 62553 does not improve AUC. Reverting changes.
Training on augumented user 86282 27/50 current_auc = 0.5555555555555556
User 86282 AUC after training: 0.5555555555555556
User 86282 does not improve AUC. Reverting changes.
Training on augumented user 95899 28/50 current_auc = 0.5555555555555556
User 95899 AUC after training: 0.5555555555555556
User 95899 does not improve AUC. Reverting changes.
Training on augumented user 31900 29/50 current_auc = 0.5555555555555556
User 31900 AUC after training: 0.5555555555555556
User 31900 does not improve AUC. Reverting changes.
Training on augumented user 26366 30/50 current_auc = 0.5555555555555556
User 26366 AUC after training: 0.5555555555555556
User 26366 does not improve AUC. Reverting changes.
Training on augumented user 98452 31/50 current_auc = 0.5555555555555556
User 98452 AUC after training: 0.5555555555555556
User 98452 does not improve AUC. Reverting changes.
Training on augumented user 66262 32/50 current_auc = 0.5555555555555556
User 66262 AUC after training: 0.5555555555555556
User 66262 does not improve AUC. Reverting changes.
Training on augumented user 9441 33/50 current_auc = 0.5555555555555556
User 9441 AUC after training: 0.5555555555555556
User 9441 does not improve AUC. Reverting changes.
Training on augumented user 137115 34/50 current_auc = 0.5555555555555556
User 137115 AUC after training: 0.5555555555555556
User 137115 does not improve AUC. Reverting changes.
Training on augumented user 3466 35/50 current_auc = 0.5555555555555556
User 3466 AUC after training: 0.5555555555555556
User 3466 does not improve AUC. Reverting changes.
Training on augumented user 27379 36/50 current_auc = 0.5555555555555556
User 27379 AUC after training: 0.5555555555555556
User 27379 does not improve AUC. Reverting changes.
Training on augumented user 20627 37/50 current_auc = 0.5555555555555556
User 20627 AUC after training: 0.5555555555555556
User 20627 does not improve AUC. Reverting changes.
Training on augumented user 39148 38/50 current_auc = 0.5555555555555556
User 39148 AUC after training: 0.5555555555555556
User 39148 does not improve AUC. Reverting changes.
Training on augumented user 1902 39/50 current_auc = 0.5555555555555556
User 1902 AUC after training: 0.5555555555555556
User 1902 does not improve AUC. Reverting changes.
Training on augumented user 120857 40/50 current_auc = 0.5555555555555556
User 120857 AUC after training: 0.5555555555555556
User 120857 does not improve AUC. Reverting changes.
Training on augumented user 72866 41/50 current_auc = 0.5555555555555556
User 72866 AUC after training: 0.5555555555555556
User 72866 does not improve AUC. Reverting changes.
Training on augumented user 46880 42/50 current_auc = 0.5555555555555556
User 46880 AUC after training: 0.5555555555555556
User 46880 does not improve AUC. Reverting changes.
Training on augumented user 106641 43/50 current_auc = 0.5555555555555556
User 106641 AUC after training: 0.5555555555555556
User 106641 does not improve AUC. Reverting changes.
Training on augumented user 61485 44/50 current_auc = 0.5555555555555556
User 61485 AUC after training: 0.5555555555555556
User 61485 does not improve AUC. Reverting changes.
Training on augumented user 99295 45/50 current_auc = 0.5555555555555556
User 99295 AUC after training: 0.5555555555555556
User 99295 does not improve AUC. Reverting changes.
Training on augumented user 49003 46/50 current_auc = 0.5555555555555556
User 49003 AUC after training: 0.5555555555555556
User 49003 does not improve AUC. Reverting changes.
Training on augumented user 22216 47/50 current_auc = 0.5555555555555556
User 22216 AUC after training: 0.5555555555555556
User 22216 does not improve AUC. Reverting changes.
Training on augumented user 34551 48/50 current_auc = 0.5555555555555556
User 34551 AUC after training: 0.5555555555555556
User 34551 does not improve AUC. Reverting changes.
Training on augumented user 98605 49/50 current_auc = 0.5555555555555556
User 98605 AUC after training: 0.5555555555555556
User 98605 does not improve AUC. Reverting changes.
[2024-12-02 17:44:28.340573] start test user 83159 13/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:44:29.098004] start test user 83159 13/568 recall augumented users by random, augumented_users = [58838, 50686, 98999, 34198, 42461, 91206, 48343, 105014, 34419, 3109, 115138, 74033, 84866, 48989, 83745, 125763, 36964, 110601, 119821, 93683, 48661, 28591, 38829, 91599, 109615, 29720, 125251, 113436, 131288, 3364, 106442, 54037, 93721, 118805, 78688, 31778, 59694, 126329, 111683, 121436, 72721, 63066, 115169, 6935, 69362, 18878, 132616, 53360, 16806, 42614]
[2024-12-02 17:44:29.112839] user = 83159 Cloud 13/568
[2024-12-02 17:44:29.122980] user = 83159 Local 13/568
[2024-12-02 17:44:29.150337] user = 83159 Local+ 13/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:44:31.753573] user = 83159 MPDA- 13/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.47348484848484845
Training on augumented user 58838 0/50 current_auc = 0.47348484848484845
User 58838 AUC after training: 0.47348484848484845
User 58838 does not improve AUC. Reverting changes.
Training on augumented user 50686 1/50 current_auc = 0.47348484848484845
User 50686 AUC after training: 0.4715909090909091
User 50686 does not improve AUC. Reverting changes.
Training on augumented user 98999 2/50 current_auc = 0.47348484848484845
User 98999 AUC after training: 0.47159090909090906
User 98999 does not improve AUC. Reverting changes.
Training on augumented user 34198 3/50 current_auc = 0.47348484848484845
User 34198 AUC after training: 0.47159090909090906
User 34198 does not improve AUC. Reverting changes.
Training on augumented user 42461 4/50 current_auc = 0.47348484848484845
User 42461 AUC after training: 0.4659090909090909
User 42461 does not improve AUC. Reverting changes.
Training on augumented user 91206 5/50 current_auc = 0.47348484848484845
User 91206 AUC after training: 0.47348484848484845
User 91206 does not improve AUC. Reverting changes.
Training on augumented user 48343 6/50 current_auc = 0.47348484848484845
User 48343 AUC after training: 0.47159090909090906
User 48343 does not improve AUC. Reverting changes.
Training on augumented user 105014 7/50 current_auc = 0.47348484848484845
User 105014 AUC after training: 0.4715909090909091
User 105014 does not improve AUC. Reverting changes.
Training on augumented user 34419 8/50 current_auc = 0.47348484848484845
User 34419 AUC after training: 0.4706439393939394
User 34419 does not improve AUC. Reverting changes.
Training on augumented user 3109 9/50 current_auc = 0.47348484848484845
User 3109 AUC after training: 0.4725378787878788
User 3109 does not improve AUC. Reverting changes.
Training on augumented user 115138 10/50 current_auc = 0.47348484848484845
User 115138 AUC after training: 0.47159090909090906
User 115138 does not improve AUC. Reverting changes.
Training on augumented user 74033 11/50 current_auc = 0.47348484848484845
User 74033 AUC after training: 0.4753787878787879
User 74033 improves AUC. Keeping the model.
Training on augumented user 84866 12/50 current_auc = 0.4753787878787879
User 84866 AUC after training: 0.47348484848484845
User 84866 does not improve AUC. Reverting changes.
Training on augumented user 48989 13/50 current_auc = 0.4753787878787879
User 48989 AUC after training: 0.47348484848484845
User 48989 does not improve AUC. Reverting changes.
Training on augumented user 83745 14/50 current_auc = 0.4753787878787879
User 83745 AUC after training: 0.4753787878787879
User 83745 does not improve AUC. Reverting changes.
Training on augumented user 125763 15/50 current_auc = 0.4753787878787879
User 125763 AUC after training: 0.47159090909090906
User 125763 does not improve AUC. Reverting changes.
Training on augumented user 36964 16/50 current_auc = 0.4753787878787879
User 36964 AUC after training: 0.47348484848484845
User 36964 does not improve AUC. Reverting changes.
Training on augumented user 110601 17/50 current_auc = 0.4753787878787879
User 110601 AUC after training: 0.47159090909090906
User 110601 does not improve AUC. Reverting changes.
Training on augumented user 119821 18/50 current_auc = 0.4753787878787879
User 119821 AUC after training: 0.47159090909090906
User 119821 does not improve AUC. Reverting changes.
Training on augumented user 93683 19/50 current_auc = 0.4753787878787879
User 93683 AUC after training: 0.47348484848484845
User 93683 does not improve AUC. Reverting changes.
Training on augumented user 48661 20/50 current_auc = 0.4753787878787879
User 48661 AUC after training: 0.471590909090909
User 48661 does not improve AUC. Reverting changes.
Training on augumented user 28591 21/50 current_auc = 0.4753787878787879
User 28591 AUC after training: 0.46969696969696967
User 28591 does not improve AUC. Reverting changes.
Training on augumented user 38829 22/50 current_auc = 0.4753787878787879
User 38829 AUC after training: 0.47348484848484845
User 38829 does not improve AUC. Reverting changes.
Training on augumented user 91599 23/50 current_auc = 0.4753787878787879
User 91599 AUC after training: 0.47159090909090906
User 91599 does not improve AUC. Reverting changes.
Training on augumented user 109615 24/50 current_auc = 0.4753787878787879
User 109615 AUC after training: 0.47348484848484845
User 109615 does not improve AUC. Reverting changes.
Training on augumented user 29720 25/50 current_auc = 0.4753787878787879
User 29720 AUC after training: 0.47348484848484845
User 29720 does not improve AUC. Reverting changes.
Training on augumented user 125251 26/50 current_auc = 0.4753787878787879
User 125251 AUC after training: 0.47348484848484845
User 125251 does not improve AUC. Reverting changes.
Training on augumented user 113436 27/50 current_auc = 0.4753787878787879
User 113436 AUC after training: 0.47348484848484845
User 113436 does not improve AUC. Reverting changes.
Training on augumented user 131288 28/50 current_auc = 0.4753787878787879
User 131288 AUC after training: 0.47159090909090906
User 131288 does not improve AUC. Reverting changes.
Training on augumented user 3364 29/50 current_auc = 0.4753787878787879
User 3364 AUC after training: 0.47159090909090906
User 3364 does not improve AUC. Reverting changes.
Training on augumented user 106442 30/50 current_auc = 0.4753787878787879
User 106442 AUC after training: 0.47348484848484845
User 106442 does not improve AUC. Reverting changes.
Training on augumented user 54037 31/50 current_auc = 0.4753787878787879
User 54037 AUC after training: 0.47159090909090906
User 54037 does not improve AUC. Reverting changes.
Training on augumented user 93721 32/50 current_auc = 0.4753787878787879
User 93721 AUC after training: 0.47348484848484845
User 93721 does not improve AUC. Reverting changes.
Training on augumented user 118805 33/50 current_auc = 0.4753787878787879
User 118805 AUC after training: 0.4753787878787879
User 118805 does not improve AUC. Reverting changes.
Training on augumented user 78688 34/50 current_auc = 0.4753787878787879
User 78688 AUC after training: 0.46969696969696967
User 78688 does not improve AUC. Reverting changes.
Training on augumented user 31778 35/50 current_auc = 0.4753787878787879
User 31778 AUC after training: 0.47348484848484845
User 31778 does not improve AUC. Reverting changes.
Training on augumented user 59694 36/50 current_auc = 0.4753787878787879
User 59694 AUC after training: 0.47348484848484845
User 59694 does not improve AUC. Reverting changes.
Training on augumented user 126329 37/50 current_auc = 0.4753787878787879
User 126329 AUC after training: 0.47159090909090906
User 126329 does not improve AUC. Reverting changes.
Training on augumented user 111683 38/50 current_auc = 0.4753787878787879
User 111683 AUC after training: 0.47348484848484845
User 111683 does not improve AUC. Reverting changes.
Training on augumented user 121436 39/50 current_auc = 0.4753787878787879
User 121436 AUC after training: 0.46969696969696967
User 121436 does not improve AUC. Reverting changes.
Training on augumented user 72721 40/50 current_auc = 0.4753787878787879
User 72721 AUC after training: 0.47348484848484845
User 72721 does not improve AUC. Reverting changes.
Training on augumented user 63066 41/50 current_auc = 0.4753787878787879
User 63066 AUC after training: 0.47348484848484845
User 63066 does not improve AUC. Reverting changes.
Training on augumented user 115169 42/50 current_auc = 0.4753787878787879
User 115169 AUC after training: 0.4753787878787879
User 115169 does not improve AUC. Reverting changes.
Training on augumented user 6935 43/50 current_auc = 0.4753787878787879
User 6935 AUC after training: 0.47727272727272724
User 6935 improves AUC. Keeping the model.
Training on augumented user 69362 44/50 current_auc = 0.47727272727272724
User 69362 AUC after training: 0.47159090909090906
User 69362 does not improve AUC. Reverting changes.
Training on augumented user 18878 45/50 current_auc = 0.47727272727272724
User 18878 AUC after training: 0.47348484848484845
User 18878 does not improve AUC. Reverting changes.
Training on augumented user 132616 46/50 current_auc = 0.47727272727272724
User 132616 AUC after training: 0.4753787878787879
User 132616 does not improve AUC. Reverting changes.
Training on augumented user 53360 47/50 current_auc = 0.47727272727272724
User 53360 AUC after training: 0.47159090909090906
User 53360 does not improve AUC. Reverting changes.
Training on augumented user 16806 48/50 current_auc = 0.47727272727272724
User 16806 AUC after training: 0.47727272727272724
User 16806 does not improve AUC. Reverting changes.
Training on augumented user 42614 49/50 current_auc = 0.47727272727272724
User 42614 AUC after training: 0.47159090909090906
User 42614 does not improve AUC. Reverting changes.
[2024-12-02 17:45:00.187075] start test user 83172 14/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:45:00.672214] start test user 83172 14/568 recall augumented users by random, augumented_users = [131401, 55621, 11392, 29333, 95777, 63574, 132076, 30415, 134495, 72765, 51624, 132253, 35533, 39943, 11342, 28676, 17702, 165, 33053, 15380, 126636, 3091, 104708, 96789, 138150, 123286, 113590, 68912, 70251, 65771, 104739, 77169, 84389, 22262, 114578, 24528, 120467, 50963, 85624, 64219, 1316, 61919, 20872, 92908, 22471, 111897, 88563, 100613, 1435, 67840]
[2024-12-02 17:45:00.686939] user = 83172 Cloud 14/568
[2024-12-02 17:45:00.696273] user = 83172 Local 14/568
[2024-12-02 17:45:00.746212] user = 83172 Local+ 14/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:45:03.052259] user = 83172 MPDA- 14/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5833333333333334
Training on augumented user 131401 0/50 current_auc = 0.5833333333333334
User 131401 AUC after training: 0.5833333333333334
User 131401 does not improve AUC. Reverting changes.
Training on augumented user 55621 1/50 current_auc = 0.5833333333333334
User 55621 AUC after training: 0.5833333333333334
User 55621 does not improve AUC. Reverting changes.
Training on augumented user 11392 2/50 current_auc = 0.5833333333333334
User 11392 AUC after training: 0.5833333333333334
User 11392 does not improve AUC. Reverting changes.
Training on augumented user 29333 3/50 current_auc = 0.5833333333333334
User 29333 AUC after training: 0.5833333333333334
User 29333 does not improve AUC. Reverting changes.
Training on augumented user 95777 4/50 current_auc = 0.5833333333333334
User 95777 AUC after training: 0.5833333333333334
User 95777 does not improve AUC. Reverting changes.
Training on augumented user 63574 5/50 current_auc = 0.5833333333333334
User 63574 AUC after training: 0.5833333333333334
User 63574 does not improve AUC. Reverting changes.
Training on augumented user 132076 6/50 current_auc = 0.5833333333333334
User 132076 AUC after training: 0.5833333333333334
User 132076 does not improve AUC. Reverting changes.
Training on augumented user 30415 7/50 current_auc = 0.5833333333333334
User 30415 AUC after training: 0.5833333333333334
User 30415 does not improve AUC. Reverting changes.
Training on augumented user 134495 8/50 current_auc = 0.5833333333333334
User 134495 AUC after training: 0.5833333333333334
User 134495 does not improve AUC. Reverting changes.
Training on augumented user 72765 9/50 current_auc = 0.5833333333333334
User 72765 AUC after training: 0.5833333333333334
User 72765 does not improve AUC. Reverting changes.
Training on augumented user 51624 10/50 current_auc = 0.5833333333333334
User 51624 AUC after training: 0.5833333333333334
User 51624 does not improve AUC. Reverting changes.
Training on augumented user 132253 11/50 current_auc = 0.5833333333333334
User 132253 AUC after training: 0.5833333333333334
User 132253 does not improve AUC. Reverting changes.
Training on augumented user 35533 12/50 current_auc = 0.5833333333333334
User 35533 AUC after training: 0.5833333333333334
User 35533 does not improve AUC. Reverting changes.
Training on augumented user 39943 13/50 current_auc = 0.5833333333333334
User 39943 AUC after training: 0.5833333333333334
User 39943 does not improve AUC. Reverting changes.
Training on augumented user 11342 14/50 current_auc = 0.5833333333333334
User 11342 AUC after training: 0.5833333333333334
User 11342 does not improve AUC. Reverting changes.
Training on augumented user 28676 15/50 current_auc = 0.5833333333333334
User 28676 AUC after training: 0.5833333333333334
User 28676 does not improve AUC. Reverting changes.
Training on augumented user 17702 16/50 current_auc = 0.5833333333333334
User 17702 AUC after training: 0.5833333333333334
User 17702 does not improve AUC. Reverting changes.
Training on augumented user 165 17/50 current_auc = 0.5833333333333334
User 165 AUC after training: 0.5833333333333334
User 165 does not improve AUC. Reverting changes.
Training on augumented user 33053 18/50 current_auc = 0.5833333333333334
User 33053 AUC after training: 0.5833333333333334
User 33053 does not improve AUC. Reverting changes.
Training on augumented user 15380 19/50 current_auc = 0.5833333333333334
User 15380 AUC after training: 0.5833333333333334
User 15380 does not improve AUC. Reverting changes.
Training on augumented user 126636 20/50 current_auc = 0.5833333333333334
User 126636 AUC after training: 0.5833333333333334
User 126636 does not improve AUC. Reverting changes.
Training on augumented user 3091 21/50 current_auc = 0.5833333333333334
User 3091 AUC after training: 0.5833333333333334
User 3091 does not improve AUC. Reverting changes.
Training on augumented user 104708 22/50 current_auc = 0.5833333333333334
User 104708 AUC after training: 0.5833333333333334
User 104708 does not improve AUC. Reverting changes.
Training on augumented user 96789 23/50 current_auc = 0.5833333333333334
User 96789 AUC after training: 0.5833333333333334
User 96789 does not improve AUC. Reverting changes.
Training on augumented user 138150 24/50 current_auc = 0.5833333333333334
User 138150 AUC after training: 0.5833333333333334
User 138150 does not improve AUC. Reverting changes.
Training on augumented user 123286 25/50 current_auc = 0.5833333333333334
User 123286 AUC after training: 0.5833333333333334
User 123286 does not improve AUC. Reverting changes.
Training on augumented user 113590 26/50 current_auc = 0.5833333333333334
User 113590 AUC after training: 0.5833333333333334
User 113590 does not improve AUC. Reverting changes.
Training on augumented user 68912 27/50 current_auc = 0.5833333333333334
User 68912 AUC after training: 0.5833333333333334
User 68912 does not improve AUC. Reverting changes.
Training on augumented user 70251 28/50 current_auc = 0.5833333333333334
User 70251 AUC after training: 0.5833333333333334
User 70251 does not improve AUC. Reverting changes.
Training on augumented user 65771 29/50 current_auc = 0.5833333333333334
User 65771 AUC after training: 0.5833333333333334
User 65771 does not improve AUC. Reverting changes.
Training on augumented user 104739 30/50 current_auc = 0.5833333333333334
User 104739 AUC after training: 0.5833333333333334
User 104739 does not improve AUC. Reverting changes.
Training on augumented user 77169 31/50 current_auc = 0.5833333333333334
User 77169 AUC after training: 0.5833333333333334
User 77169 does not improve AUC. Reverting changes.
Training on augumented user 84389 32/50 current_auc = 0.5833333333333334
User 84389 AUC after training: 0.5833333333333334
User 84389 does not improve AUC. Reverting changes.
Training on augumented user 22262 33/50 current_auc = 0.5833333333333334
User 22262 AUC after training: 0.5833333333333334
User 22262 does not improve AUC. Reverting changes.
Training on augumented user 114578 34/50 current_auc = 0.5833333333333334
User 114578 AUC after training: 0.5833333333333334
User 114578 does not improve AUC. Reverting changes.
Training on augumented user 24528 35/50 current_auc = 0.5833333333333334
User 24528 AUC after training: 0.5833333333333334
User 24528 does not improve AUC. Reverting changes.
Training on augumented user 120467 36/50 current_auc = 0.5833333333333334
User 120467 AUC after training: 0.5833333333333334
User 120467 does not improve AUC. Reverting changes.
Training on augumented user 50963 37/50 current_auc = 0.5833333333333334
User 50963 AUC after training: 0.5833333333333334
User 50963 does not improve AUC. Reverting changes.
Training on augumented user 85624 38/50 current_auc = 0.5833333333333334
User 85624 AUC after training: 0.5833333333333334
User 85624 does not improve AUC. Reverting changes.
Training on augumented user 64219 39/50 current_auc = 0.5833333333333334
User 64219 AUC after training: 0.6666666666666666
User 64219 improves AUC. Keeping the model.
Training on augumented user 1316 40/50 current_auc = 0.6666666666666666
User 1316 AUC after training: 0.6666666666666666
User 1316 does not improve AUC. Reverting changes.
Training on augumented user 61919 41/50 current_auc = 0.6666666666666666
User 61919 AUC after training: 0.6666666666666666
User 61919 does not improve AUC. Reverting changes.
Training on augumented user 20872 42/50 current_auc = 0.6666666666666666
User 20872 AUC after training: 0.6666666666666666
User 20872 does not improve AUC. Reverting changes.
Training on augumented user 92908 43/50 current_auc = 0.6666666666666666
User 92908 AUC after training: 0.6666666666666666
User 92908 does not improve AUC. Reverting changes.
Training on augumented user 22471 44/50 current_auc = 0.6666666666666666
User 22471 AUC after training: 0.6666666666666666
User 22471 does not improve AUC. Reverting changes.
Training on augumented user 111897 45/50 current_auc = 0.6666666666666666
User 111897 AUC after training: 0.6666666666666666
User 111897 does not improve AUC. Reverting changes.
Training on augumented user 88563 46/50 current_auc = 0.6666666666666666
User 88563 AUC after training: 0.6666666666666666
User 88563 does not improve AUC. Reverting changes.
Training on augumented user 100613 47/50 current_auc = 0.6666666666666666
User 100613 AUC after training: 0.6666666666666666
User 100613 does not improve AUC. Reverting changes.
Training on augumented user 1435 48/50 current_auc = 0.6666666666666666
User 1435 AUC after training: 0.6666666666666666
User 1435 does not improve AUC. Reverting changes.
Training on augumented user 67840 49/50 current_auc = 0.6666666666666666
User 67840 AUC after training: 0.6666666666666666
User 67840 does not improve AUC. Reverting changes.
[2024-12-02 17:45:27.683437] start test user 83198 15/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:45:28.386062] start test user 83198 15/568 recall augumented users by random, augumented_users = [117213, 110868, 103567, 51236, 65523, 88780, 44798, 50708, 32169, 59277, 56883, 8877, 57998, 13505, 982, 93585, 27563, 94686, 42651, 128062, 110194, 101966, 90532, 50614, 16096, 78610, 115459, 115505, 124264, 101697, 123152, 133145, 69400, 9210, 98476, 125441, 118927, 73921, 51657, 133112, 105855, 12622, 82090, 113548, 92203, 95211, 57504, 29362, 26073, 122972]
[2024-12-02 17:45:28.417572] user = 83198 Cloud 15/568
[2024-12-02 17:45:28.429837] user = 83198 Local 15/568
[2024-12-02 17:45:28.500275] user = 83198 Local+ 15/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:45:31.246851] user = 83198 MPDA- 15/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5347222222222222
Training on augumented user 117213 0/50 current_auc = 0.5347222222222222
User 117213 AUC after training: 0.5347222222222222
User 117213 does not improve AUC. Reverting changes.
Training on augumented user 110868 1/50 current_auc = 0.5347222222222222
User 110868 AUC after training: 0.5347222222222222
User 110868 does not improve AUC. Reverting changes.
Training on augumented user 103567 2/50 current_auc = 0.5347222222222222
User 103567 AUC after training: 0.5277777777777778
User 103567 does not improve AUC. Reverting changes.
Training on augumented user 51236 3/50 current_auc = 0.5347222222222222
User 51236 AUC after training: 0.5347222222222222
User 51236 does not improve AUC. Reverting changes.
Training on augumented user 65523 4/50 current_auc = 0.5347222222222222
User 65523 AUC after training: 0.5347222222222222
User 65523 does not improve AUC. Reverting changes.
Training on augumented user 88780 5/50 current_auc = 0.5347222222222222
User 88780 AUC after training: 0.5347222222222222
User 88780 does not improve AUC. Reverting changes.
Training on augumented user 44798 6/50 current_auc = 0.5347222222222222
User 44798 AUC after training: 0.5347222222222222
User 44798 does not improve AUC. Reverting changes.
Training on augumented user 50708 7/50 current_auc = 0.5347222222222222
User 50708 AUC after training: 0.5347222222222222
User 50708 does not improve AUC. Reverting changes.
Training on augumented user 32169 8/50 current_auc = 0.5347222222222222
User 32169 AUC after training: 0.5347222222222222
User 32169 does not improve AUC. Reverting changes.
Training on augumented user 59277 9/50 current_auc = 0.5347222222222222
User 59277 AUC after training: 0.5347222222222222
User 59277 does not improve AUC. Reverting changes.
Training on augumented user 56883 10/50 current_auc = 0.5347222222222222
User 56883 AUC after training: 0.5347222222222222
User 56883 does not improve AUC. Reverting changes.
Training on augumented user 8877 11/50 current_auc = 0.5347222222222222
User 8877 AUC after training: 0.5347222222222222
User 8877 does not improve AUC. Reverting changes.
Training on augumented user 57998 12/50 current_auc = 0.5347222222222222
User 57998 AUC after training: 0.5347222222222222
User 57998 does not improve AUC. Reverting changes.
Training on augumented user 13505 13/50 current_auc = 0.5347222222222222
User 13505 AUC after training: 0.5347222222222222
User 13505 does not improve AUC. Reverting changes.
Training on augumented user 982 14/50 current_auc = 0.5347222222222222
User 982 AUC after training: 0.5347222222222222
User 982 does not improve AUC. Reverting changes.
Training on augumented user 93585 15/50 current_auc = 0.5347222222222222
User 93585 AUC after training: 0.5277777777777778
User 93585 does not improve AUC. Reverting changes.
Training on augumented user 27563 16/50 current_auc = 0.5347222222222222
User 27563 AUC after training: 0.5277777777777778
User 27563 does not improve AUC. Reverting changes.
Training on augumented user 94686 17/50 current_auc = 0.5347222222222222
User 94686 AUC after training: 0.5347222222222222
User 94686 does not improve AUC. Reverting changes.
Training on augumented user 42651 18/50 current_auc = 0.5347222222222222
User 42651 AUC after training: 0.5347222222222222
User 42651 does not improve AUC. Reverting changes.
Training on augumented user 128062 19/50 current_auc = 0.5347222222222222
User 128062 AUC after training: 0.5277777777777778
User 128062 does not improve AUC. Reverting changes.
Training on augumented user 110194 20/50 current_auc = 0.5347222222222222
User 110194 AUC after training: 0.5347222222222222
User 110194 does not improve AUC. Reverting changes.
Training on augumented user 101966 21/50 current_auc = 0.5347222222222222
User 101966 AUC after training: 0.5347222222222222
User 101966 does not improve AUC. Reverting changes.
Training on augumented user 90532 22/50 current_auc = 0.5347222222222222
User 90532 AUC after training: 0.5347222222222222
User 90532 does not improve AUC. Reverting changes.
Training on augumented user 50614 23/50 current_auc = 0.5347222222222222
User 50614 AUC after training: 0.5347222222222222
User 50614 does not improve AUC. Reverting changes.
Training on augumented user 16096 24/50 current_auc = 0.5347222222222222
User 16096 AUC after training: 0.5347222222222222
User 16096 does not improve AUC. Reverting changes.
Training on augumented user 78610 25/50 current_auc = 0.5347222222222222
User 78610 AUC after training: 0.5347222222222222
User 78610 does not improve AUC. Reverting changes.
Training on augumented user 115459 26/50 current_auc = 0.5347222222222222
User 115459 AUC after training: 0.5347222222222222
User 115459 does not improve AUC. Reverting changes.
Training on augumented user 115505 27/50 current_auc = 0.5347222222222222
User 115505 AUC after training: 0.5347222222222222
User 115505 does not improve AUC. Reverting changes.
Training on augumented user 124264 28/50 current_auc = 0.5347222222222222
User 124264 AUC after training: 0.5277777777777778
User 124264 does not improve AUC. Reverting changes.
Training on augumented user 101697 29/50 current_auc = 0.5347222222222222
User 101697 AUC after training: 0.5277777777777778
User 101697 does not improve AUC. Reverting changes.
Training on augumented user 123152 30/50 current_auc = 0.5347222222222222
User 123152 AUC after training: 0.5347222222222222
User 123152 does not improve AUC. Reverting changes.
Training on augumented user 133145 31/50 current_auc = 0.5347222222222222
User 133145 AUC after training: 0.5347222222222222
User 133145 does not improve AUC. Reverting changes.
Training on augumented user 69400 32/50 current_auc = 0.5347222222222222
User 69400 AUC after training: 0.5277777777777778
User 69400 does not improve AUC. Reverting changes.
Training on augumented user 9210 33/50 current_auc = 0.5347222222222222
User 9210 AUC after training: 0.5347222222222222
User 9210 does not improve AUC. Reverting changes.
Training on augumented user 98476 34/50 current_auc = 0.5347222222222222
User 98476 AUC after training: 0.5347222222222222
User 98476 does not improve AUC. Reverting changes.
Training on augumented user 125441 35/50 current_auc = 0.5347222222222222
User 125441 AUC after training: 0.5347222222222222
User 125441 does not improve AUC. Reverting changes.
Training on augumented user 118927 36/50 current_auc = 0.5347222222222222
User 118927 AUC after training: 0.5347222222222222
User 118927 does not improve AUC. Reverting changes.
Training on augumented user 73921 37/50 current_auc = 0.5347222222222222
User 73921 AUC after training: 0.5347222222222222
User 73921 does not improve AUC. Reverting changes.
Training on augumented user 51657 38/50 current_auc = 0.5347222222222222
User 51657 AUC after training: 0.5347222222222222
User 51657 does not improve AUC. Reverting changes.
Training on augumented user 133112 39/50 current_auc = 0.5347222222222222
User 133112 AUC after training: 0.5277777777777778
User 133112 does not improve AUC. Reverting changes.
Training on augumented user 105855 40/50 current_auc = 0.5347222222222222
User 105855 AUC after training: 0.5347222222222222
User 105855 does not improve AUC. Reverting changes.
Training on augumented user 12622 41/50 current_auc = 0.5347222222222222
User 12622 AUC after training: 0.5277777777777778
User 12622 does not improve AUC. Reverting changes.
Training on augumented user 82090 42/50 current_auc = 0.5347222222222222
User 82090 AUC after training: 0.5347222222222222
User 82090 does not improve AUC. Reverting changes.
Training on augumented user 113548 43/50 current_auc = 0.5347222222222222
User 113548 AUC after training: 0.5347222222222222
User 113548 does not improve AUC. Reverting changes.
Training on augumented user 92203 44/50 current_auc = 0.5347222222222222
User 92203 AUC after training: 0.5347222222222222
User 92203 does not improve AUC. Reverting changes.
Training on augumented user 95211 45/50 current_auc = 0.5347222222222222
User 95211 AUC after training: 0.5347222222222222
User 95211 does not improve AUC. Reverting changes.
Training on augumented user 57504 46/50 current_auc = 0.5347222222222222
User 57504 AUC after training: 0.5347222222222222
User 57504 does not improve AUC. Reverting changes.
Training on augumented user 29362 47/50 current_auc = 0.5347222222222222
User 29362 AUC after training: 0.5347222222222222
User 29362 does not improve AUC. Reverting changes.
Training on augumented user 26073 48/50 current_auc = 0.5347222222222222
User 26073 AUC after training: 0.5347222222222222
User 26073 does not improve AUC. Reverting changes.
Training on augumented user 122972 49/50 current_auc = 0.5347222222222222
User 122972 AUC after training: 0.5347222222222222
User 122972 does not improve AUC. Reverting changes.
[2024-12-02 17:46:02.285130] start test user 83202 16/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:46:02.798576] start test user 83202 16/568 recall augumented users by random, augumented_users = [51329, 67841, 46762, 42202, 117490, 128560, 8354, 77556, 1208, 9219, 50431, 114712, 12995, 36763, 125053, 64379, 50695, 51514, 125762, 73826, 134602, 34759, 97076, 41941, 79312, 136334, 8754, 27608, 71074, 138204, 29953, 81480, 65848, 17791, 82456, 103159, 1474, 40222, 5981, 101713, 10403, 82037, 1824, 12006, 82215, 65305, 130573, 8237, 81797, 34106]
[2024-12-02 17:46:02.815940] user = 83202 Cloud 16/568
[2024-12-02 17:46:02.834449] user = 83202 Local 16/568
[2024-12-02 17:46:02.911600] user = 83202 Local+ 16/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:46:05.149206] user = 83202 MPDA- 16/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.808
Training on augumented user 51329 0/50 current_auc = 0.808
User 51329 AUC after training: 0.8053333333333333
User 51329 does not improve AUC. Reverting changes.
Training on augumented user 67841 1/50 current_auc = 0.808
User 67841 AUC after training: 0.808
User 67841 does not improve AUC. Reverting changes.
Training on augumented user 46762 2/50 current_auc = 0.808
User 46762 AUC after training: 0.808
User 46762 does not improve AUC. Reverting changes.
Training on augumented user 42202 3/50 current_auc = 0.808
User 42202 AUC after training: 0.808
User 42202 does not improve AUC. Reverting changes.
Training on augumented user 117490 4/50 current_auc = 0.808
User 117490 AUC after training: 0.808
User 117490 does not improve AUC. Reverting changes.
Training on augumented user 128560 5/50 current_auc = 0.808
User 128560 AUC after training: 0.808
User 128560 does not improve AUC. Reverting changes.
Training on augumented user 8354 6/50 current_auc = 0.808
User 8354 AUC after training: 0.808
User 8354 does not improve AUC. Reverting changes.
Training on augumented user 77556 7/50 current_auc = 0.808
User 77556 AUC after training: 0.808
User 77556 does not improve AUC. Reverting changes.
Training on augumented user 1208 8/50 current_auc = 0.808
User 1208 AUC after training: 0.808
User 1208 does not improve AUC. Reverting changes.
Training on augumented user 9219 9/50 current_auc = 0.808
User 9219 AUC after training: 0.808
User 9219 does not improve AUC. Reverting changes.
Training on augumented user 50431 10/50 current_auc = 0.808
User 50431 AUC after training: 0.8133333333333334
User 50431 improves AUC. Keeping the model.
Training on augumented user 114712 11/50 current_auc = 0.8133333333333334
User 114712 AUC after training: 0.8106666666666666
User 114712 does not improve AUC. Reverting changes.
Training on augumented user 12995 12/50 current_auc = 0.8133333333333334
User 12995 AUC after training: 0.8106666666666666
User 12995 does not improve AUC. Reverting changes.
Training on augumented user 36763 13/50 current_auc = 0.8133333333333334
User 36763 AUC after training: 0.808
User 36763 does not improve AUC. Reverting changes.
Training on augumented user 125053 14/50 current_auc = 0.8133333333333334
User 125053 AUC after training: 0.8133333333333334
User 125053 does not improve AUC. Reverting changes.
Training on augumented user 64379 15/50 current_auc = 0.8133333333333334
User 64379 AUC after training: 0.8106666666666666
User 64379 does not improve AUC. Reverting changes.
Training on augumented user 50695 16/50 current_auc = 0.8133333333333334
User 50695 AUC after training: 0.8106666666666666
User 50695 does not improve AUC. Reverting changes.
Training on augumented user 51514 17/50 current_auc = 0.8133333333333334
User 51514 AUC after training: 0.8133333333333334
User 51514 does not improve AUC. Reverting changes.
Training on augumented user 125762 18/50 current_auc = 0.8133333333333334
User 125762 AUC after training: 0.8133333333333334
User 125762 does not improve AUC. Reverting changes.
Training on augumented user 73826 19/50 current_auc = 0.8133333333333334
User 73826 AUC after training: 0.8133333333333334
User 73826 does not improve AUC. Reverting changes.
Training on augumented user 134602 20/50 current_auc = 0.8133333333333334
User 134602 AUC after training: 0.8133333333333334
User 134602 does not improve AUC. Reverting changes.
Training on augumented user 34759 21/50 current_auc = 0.8133333333333334
User 34759 AUC after training: 0.8133333333333334
User 34759 does not improve AUC. Reverting changes.
Training on augumented user 97076 22/50 current_auc = 0.8133333333333334
User 97076 AUC after training: 0.8106666666666666
User 97076 does not improve AUC. Reverting changes.
Training on augumented user 41941 23/50 current_auc = 0.8133333333333334
User 41941 AUC after training: 0.8106666666666666
User 41941 does not improve AUC. Reverting changes.
Training on augumented user 79312 24/50 current_auc = 0.8133333333333334
User 79312 AUC after training: 0.808
User 79312 does not improve AUC. Reverting changes.
Training on augumented user 136334 25/50 current_auc = 0.8133333333333334
User 136334 AUC after training: 0.808
User 136334 does not improve AUC. Reverting changes.
Training on augumented user 8754 26/50 current_auc = 0.8133333333333334
User 8754 AUC after training: 0.8106666666666666
User 8754 does not improve AUC. Reverting changes.
Training on augumented user 27608 27/50 current_auc = 0.8133333333333334
User 27608 AUC after training: 0.808
User 27608 does not improve AUC. Reverting changes.
Training on augumented user 71074 28/50 current_auc = 0.8133333333333334
User 71074 AUC after training: 0.8053333333333333
User 71074 does not improve AUC. Reverting changes.
Training on augumented user 138204 29/50 current_auc = 0.8133333333333334
User 138204 AUC after training: 0.8133333333333334
User 138204 does not improve AUC. Reverting changes.
Training on augumented user 29953 30/50 current_auc = 0.8133333333333334
User 29953 AUC after training: 0.8133333333333334
User 29953 does not improve AUC. Reverting changes.
Training on augumented user 81480 31/50 current_auc = 0.8133333333333334
User 81480 AUC after training: 0.808
User 81480 does not improve AUC. Reverting changes.
Training on augumented user 65848 32/50 current_auc = 0.8133333333333334
User 65848 AUC after training: 0.8133333333333334
User 65848 does not improve AUC. Reverting changes.
Training on augumented user 17791 33/50 current_auc = 0.8133333333333334
User 17791 AUC after training: 0.8106666666666666
User 17791 does not improve AUC. Reverting changes.
Training on augumented user 82456 34/50 current_auc = 0.8133333333333334
User 82456 AUC after training: 0.8133333333333334
User 82456 does not improve AUC. Reverting changes.
Training on augumented user 103159 35/50 current_auc = 0.8133333333333334
User 103159 AUC after training: 0.8133333333333334
User 103159 does not improve AUC. Reverting changes.
Training on augumented user 1474 36/50 current_auc = 0.8133333333333334
User 1474 AUC after training: 0.8133333333333334
User 1474 does not improve AUC. Reverting changes.
Training on augumented user 40222 37/50 current_auc = 0.8133333333333334
User 40222 AUC after training: 0.8133333333333334
User 40222 does not improve AUC. Reverting changes.
Training on augumented user 5981 38/50 current_auc = 0.8133333333333334
User 5981 AUC after training: 0.8106666666666666
User 5981 does not improve AUC. Reverting changes.
Training on augumented user 101713 39/50 current_auc = 0.8133333333333334
User 101713 AUC after training: 0.808
User 101713 does not improve AUC. Reverting changes.
Training on augumented user 10403 40/50 current_auc = 0.8133333333333334
User 10403 AUC after training: 0.8106666666666666
User 10403 does not improve AUC. Reverting changes.
Training on augumented user 82037 41/50 current_auc = 0.8133333333333334
User 82037 AUC after training: 0.8133333333333334
User 82037 does not improve AUC. Reverting changes.
Training on augumented user 1824 42/50 current_auc = 0.8133333333333334
User 1824 AUC after training: 0.8133333333333334
User 1824 does not improve AUC. Reverting changes.
Training on augumented user 12006 43/50 current_auc = 0.8133333333333334
User 12006 AUC after training: 0.8133333333333334
User 12006 does not improve AUC. Reverting changes.
Training on augumented user 82215 44/50 current_auc = 0.8133333333333334
User 82215 AUC after training: 0.8106666666666666
User 82215 does not improve AUC. Reverting changes.
Training on augumented user 65305 45/50 current_auc = 0.8133333333333334
User 65305 AUC after training: 0.8133333333333334
User 65305 does not improve AUC. Reverting changes.
Training on augumented user 130573 46/50 current_auc = 0.8133333333333334
User 130573 AUC after training: 0.808
User 130573 does not improve AUC. Reverting changes.
Training on augumented user 8237 47/50 current_auc = 0.8133333333333334
User 8237 AUC after training: 0.8106666666666666
User 8237 does not improve AUC. Reverting changes.
Training on augumented user 81797 48/50 current_auc = 0.8133333333333334
User 81797 AUC after training: 0.8133333333333334
User 81797 does not improve AUC. Reverting changes.
Training on augumented user 34106 49/50 current_auc = 0.8133333333333334
User 34106 AUC after training: 0.8133333333333334
User 34106 does not improve AUC. Reverting changes.
[2024-12-02 17:46:32.475624] start test user 83214 17/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:46:33.212030] start test user 83214 17/568 recall augumented users by random, augumented_users = [46137, 117959, 59353, 78024, 29827, 53661, 23440, 54268, 136953, 94934, 115039, 118583, 101603, 48, 58389, 116103, 103758, 12144, 31177, 42322, 96720, 138133, 39286, 68775, 76907, 41897, 34466, 134114, 66108, 133362, 110859, 11672, 69398, 8186, 43780, 19108, 78768, 11428, 61367, 29326, 125861, 108310, 97465, 114399, 103730, 7363, 58212, 96567, 49881, 78568]
[2024-12-02 17:46:33.228502] user = 83214 Cloud 17/568
[2024-12-02 17:46:33.328382] user = 83214 Local 17/568
[2024-12-02 17:46:33.488371] user = 83214 Local+ 17/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:46:35.961117] user = 83214 MPDA- 17/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8370762378831544
Training on augumented user 46137 0/50 current_auc = 0.8370762378831544
User 46137 AUC after training: 0.83718103222426
User 46137 improves AUC. Keeping the model.
Training on augumented user 117959 1/50 current_auc = 0.83718103222426
User 117959 AUC after training: 0.8369085669373854
User 117959 does not improve AUC. Reverting changes.
Training on augumented user 59353 2/50 current_auc = 0.83718103222426
User 59353 AUC after training: 0.8370867173172649
User 59353 does not improve AUC. Reverting changes.
Training on augumented user 78024 3/50 current_auc = 0.83718103222426
User 78024 AUC after training: 0.8374011003405817
User 78024 improves AUC. Keeping the model.
Training on augumented user 29827 4/50 current_auc = 0.8374011003405817
User 29827 AUC after training: 0.8370238407126015
User 29827 does not improve AUC. Reverting changes.
Training on augumented user 53661 5/50 current_auc = 0.8374011003405817
User 53661 AUC after training: 0.8373277443018077
User 53661 does not improve AUC. Reverting changes.
Training on augumented user 23440 6/50 current_auc = 0.8374011003405817
User 23440 AUC after training: 0.837390620906471
User 23440 does not improve AUC. Reverting changes.
Training on augumented user 54268 7/50 current_auc = 0.8374011003405817
User 54268 AUC after training: 0.83718103222426
User 54268 does not improve AUC. Reverting changes.
Training on augumented user 136953 8/50 current_auc = 0.8374011003405817
User 136953 AUC after training: 0.8372124705265915
User 136953 does not improve AUC. Reverting changes.
Training on augumented user 94934 9/50 current_auc = 0.8374011003405817
User 94934 AUC after training: 0.8373067854335865
User 94934 does not improve AUC. Reverting changes.
Training on augumented user 115039 10/50 current_auc = 0.8374011003405817
User 115039 AUC after training: 0.8373906209064711
User 115039 does not improve AUC. Reverting changes.
Training on augumented user 118583 11/50 current_auc = 0.8374011003405817
User 118583 AUC after training: 0.8371915116583704
User 118583 does not improve AUC. Reverting changes.
Training on augumented user 101603 12/50 current_auc = 0.8374011003405817
User 101603 AUC after training: 0.83736966203825
User 101603 does not improve AUC. Reverting changes.
Training on augumented user 48 13/50 current_auc = 0.8374011003405817
User 48 AUC after training: 0.8374744563793556
User 48 improves AUC. Keeping the model.
Training on augumented user 58389 14/50 current_auc = 0.8374744563793556
User 58389 AUC after training: 0.8372858265653655
User 58389 does not improve AUC. Reverting changes.
Training on augumented user 116103 15/50 current_auc = 0.8374744563793556
User 116103 AUC after training: 0.8375058946816871
User 116103 improves AUC. Keeping the model.
Training on augumented user 103758 16/50 current_auc = 0.8375058946816871
User 103758 AUC after training: 0.8374430180770239
User 103758 does not improve AUC. Reverting changes.
Training on augumented user 12144 17/50 current_auc = 0.8375058946816871
User 12144 AUC after training: 0.8376106890227929
User 12144 improves AUC. Keeping the model.
Training on augumented user 31177 18/50 current_auc = 0.8376106890227929
User 31177 AUC after training: 0.8374849358134661
User 31177 does not improve AUC. Reverting changes.
Training on augumented user 42322 19/50 current_auc = 0.8376106890227929
User 42322 AUC after training: 0.8375058946816872
User 42322 does not improve AUC. Reverting changes.
Training on augumented user 96720 20/50 current_auc = 0.8376106890227929
User 96720 AUC after training: 0.8374220592088029
User 96720 does not improve AUC. Reverting changes.
Training on augumented user 138133 21/50 current_auc = 0.8376106890227929
User 138133 AUC after training: 0.8376840450615667
User 138133 improves AUC. Keeping the model.
Training on augumented user 39286 22/50 current_auc = 0.8376840450615667
User 39286 AUC after training: 0.8377207230809537
User 39286 improves AUC. Keeping the model.
Training on augumented user 68775 23/50 current_auc = 0.8377207230809537
User 68775 AUC after training: 0.8376578464762903
User 68775 does not improve AUC. Reverting changes.
Training on augumented user 76907 24/50 current_auc = 0.8377207230809537
User 76907 AUC after training: 0.8378307571391145
User 76907 improves AUC. Keeping the model.
Training on augumented user 41897 25/50 current_auc = 0.8378307571391145
User 41897 AUC after training: 0.8378621954414462
User 41897 improves AUC. Keeping the model.
Training on augumented user 34466 26/50 current_auc = 0.8378621954414462
User 34466 AUC after training: 0.8379617500654964
User 34466 improves AUC. Keeping the model.
Training on augumented user 134114 27/50 current_auc = 0.8379617500654964
User 134114 AUC after training: 0.8378726748755567
User 134114 does not improve AUC. Reverting changes.
Training on augumented user 66108 28/50 current_auc = 0.8379617500654964
User 66108 AUC after training: 0.8378150379879487
User 66108 does not improve AUC. Reverting changes.
Training on augumented user 133362 29/50 current_auc = 0.8379617500654964
User 133362 AUC after training: 0.8377993188367829
User 133362 does not improve AUC. Reverting changes.
Training on augumented user 110859 30/50 current_auc = 0.8379617500654964
User 110859 AUC after training: 0.8381346607283207
User 110859 improves AUC. Keeping the model.
Training on augumented user 11672 31/50 current_auc = 0.8381346607283207
User 11672 AUC after training: 0.8380508252554362
User 11672 does not improve AUC. Reverting changes.
Training on augumented user 69398 32/50 current_auc = 0.8381346607283207
User 69398 AUC after training: 0.8380927429918784
User 69398 does not improve AUC. Reverting changes.
Training on augumented user 8186 33/50 current_auc = 0.8381346607283207
User 8186 AUC after training: 0.8379984280848835
User 8186 does not improve AUC. Reverting changes.
Training on augumented user 43780 34/50 current_auc = 0.8381346607283207
User 43780 AUC after training: 0.8380403458213257
User 43780 does not improve AUC. Reverting changes.
Training on augumented user 19108 35/50 current_auc = 0.8381346607283207
User 19108 AUC after training: 0.8379565103484412
User 19108 does not improve AUC. Reverting changes.
Training on augumented user 78768 36/50 current_auc = 0.8381346607283207
User 78768 AUC after training: 0.8380508252554362
User 78768 does not improve AUC. Reverting changes.
Training on augumented user 11428 37/50 current_auc = 0.8381346607283207
User 11428 AUC after training: 0.8381451401624312
User 11428 improves AUC. Keeping the model.
Training on augumented user 61367 38/50 current_auc = 0.8381451401624312
User 61367 AUC after training: 0.8382499345035367
User 61367 improves AUC. Keeping the model.
Training on augumented user 29326 39/50 current_auc = 0.8382499345035367
User 29326 AUC after training: 0.8383337699764214
User 29326 improves AUC. Keeping the model.
Training on augumented user 125861 40/50 current_auc = 0.8383337699764214
User 125861 AUC after training: 0.8383494891275871
User 125861 improves AUC. Keeping the model.
Training on augumented user 108310 41/50 current_auc = 0.8383494891275871
User 108310 AUC after training: 0.8381975373329841
User 108310 does not improve AUC. Reverting changes.
Training on augumented user 97465 42/50 current_auc = 0.8383494891275871
User 97465 AUC after training: 0.8383232905423107
User 97465 does not improve AUC. Reverting changes.
Training on augumented user 114399 43/50 current_auc = 0.8383494891275871
User 114399 AUC after training: 0.838270893371758
User 114399 does not improve AUC. Reverting changes.
Training on augumented user 103730 44/50 current_auc = 0.8383494891275871
User 103730 AUC after training: 0.8382499345035369
User 103730 does not improve AUC. Reverting changes.
Training on augumented user 7363 45/50 current_auc = 0.8383494891275871
User 7363 AUC after training: 0.838270893371758
User 7363 does not improve AUC. Reverting changes.
Training on augumented user 58212 46/50 current_auc = 0.8383494891275871
User 58212 AUC after training: 0.8383966465810846
User 58212 improves AUC. Keeping the model.
Training on augumented user 96567 47/50 current_auc = 0.8383966465810846
User 96567 AUC after training: 0.8382551742205921
User 96567 does not improve AUC. Reverting changes.
Training on augumented user 49881 48/50 current_auc = 0.8383966465810846
User 49881 AUC after training: 0.8381660990306523
User 49881 does not improve AUC. Reverting changes.
Training on augumented user 78568 49/50 current_auc = 0.8383966465810846
User 78568 AUC after training: 0.8383075713911449
User 78568 does not improve AUC. Reverting changes.
[2024-12-02 17:47:08.709464] start test user 83218 18/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:47:09.362712] start test user 83218 18/568 recall augumented users by random, augumented_users = [70335, 27283, 5979, 126863, 4123, 40746, 41866, 14812, 130153, 91607, 126104, 35001, 58471, 10970, 101855, 111951, 130681, 78881, 108647, 94386, 63548, 63839, 114000, 131165, 117819, 45665, 4097, 17543, 19954, 135042, 107110, 76660, 116945, 117674, 25942, 68667, 13048, 15855, 42307, 37601, 128982, 39041, 71474, 49679, 103746, 4837, 131300, 85940, 9483, 37115]
[2024-12-02 17:47:09.386649] user = 83218 Cloud 18/568
[2024-12-02 17:47:09.407945] user = 83218 Local 18/568
[2024-12-02 17:47:09.498125] user = 83218 Local+ 18/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:47:11.737409] user = 83218 MPDA- 18/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5850632911392405
Training on augumented user 70335 0/50 current_auc = 0.5850632911392405
User 70335 AUC after training: 0.5850632911392405
User 70335 does not improve AUC. Reverting changes.
Training on augumented user 27283 1/50 current_auc = 0.5850632911392405
User 27283 AUC after training: 0.5858227848101265
User 27283 improves AUC. Keeping the model.
Training on augumented user 5979 2/50 current_auc = 0.5858227848101265
User 5979 AUC after training: 0.5855696202531646
User 5979 does not improve AUC. Reverting changes.
Training on augumented user 126863 3/50 current_auc = 0.5858227848101265
User 126863 AUC after training: 0.5860759493670886
User 126863 improves AUC. Keeping the model.
Training on augumented user 4123 4/50 current_auc = 0.5860759493670886
User 4123 AUC after training: 0.5860759493670886
User 4123 does not improve AUC. Reverting changes.
Training on augumented user 40746 5/50 current_auc = 0.5860759493670886
User 40746 AUC after training: 0.5860759493670885
User 40746 does not improve AUC. Reverting changes.
Training on augumented user 41866 6/50 current_auc = 0.5860759493670886
User 41866 AUC after training: 0.5870886075949368
User 41866 improves AUC. Keeping the model.
Training on augumented user 14812 7/50 current_auc = 0.5870886075949368
User 14812 AUC after training: 0.5870886075949366
User 14812 does not improve AUC. Reverting changes.
Training on augumented user 130153 8/50 current_auc = 0.5870886075949368
User 130153 AUC after training: 0.5870886075949366
User 130153 does not improve AUC. Reverting changes.
Training on augumented user 91607 9/50 current_auc = 0.5870886075949368
User 91607 AUC after training: 0.5868354430379747
User 91607 does not improve AUC. Reverting changes.
Training on augumented user 126104 10/50 current_auc = 0.5870886075949368
User 126104 AUC after training: 0.5870886075949366
User 126104 does not improve AUC. Reverting changes.
Training on augumented user 35001 11/50 current_auc = 0.5870886075949368
User 35001 AUC after training: 0.5875949367088608
User 35001 improves AUC. Keeping the model.
Training on augumented user 58471 12/50 current_auc = 0.5875949367088608
User 58471 AUC after training: 0.5886075949367089
User 58471 improves AUC. Keeping the model.
Training on augumented user 10970 13/50 current_auc = 0.5886075949367089
User 10970 AUC after training: 0.5886075949367088
User 10970 does not improve AUC. Reverting changes.
Training on augumented user 101855 14/50 current_auc = 0.5886075949367089
User 101855 AUC after training: 0.5893670886075949
User 101855 improves AUC. Keeping the model.
Training on augumented user 111951 15/50 current_auc = 0.5893670886075949
User 111951 AUC after training: 0.590126582278481
User 111951 improves AUC. Keeping the model.
Training on augumented user 130681 16/50 current_auc = 0.590126582278481
User 130681 AUC after training: 0.590126582278481
User 130681 does not improve AUC. Reverting changes.
Training on augumented user 78881 17/50 current_auc = 0.590126582278481
User 78881 AUC after training: 0.5898734177215189
User 78881 does not improve AUC. Reverting changes.
Training on augumented user 108647 18/50 current_auc = 0.590126582278481
User 108647 AUC after training: 0.590632911392405
User 108647 improves AUC. Keeping the model.
Training on augumented user 94386 19/50 current_auc = 0.590632911392405
User 94386 AUC after training: 0.5863291139240506
User 94386 does not improve AUC. Reverting changes.
Training on augumented user 63548 20/50 current_auc = 0.590632911392405
User 63548 AUC after training: 0.5893670886075949
User 63548 does not improve AUC. Reverting changes.
Training on augumented user 63839 21/50 current_auc = 0.590632911392405
User 63839 AUC after training: 0.590632911392405
User 63839 does not improve AUC. Reverting changes.
Training on augumented user 114000 22/50 current_auc = 0.590632911392405
User 114000 AUC after training: 0.590886075949367
User 114000 improves AUC. Keeping the model.
Training on augumented user 131165 23/50 current_auc = 0.590886075949367
User 131165 AUC after training: 0.590886075949367
User 131165 does not improve AUC. Reverting changes.
Training on augumented user 117819 24/50 current_auc = 0.590886075949367
User 117819 AUC after training: 0.590379746835443
User 117819 does not improve AUC. Reverting changes.
Training on augumented user 45665 25/50 current_auc = 0.590886075949367
User 45665 AUC after training: 0.5898734177215189
User 45665 does not improve AUC. Reverting changes.
Training on augumented user 4097 26/50 current_auc = 0.590886075949367
User 4097 AUC after training: 0.590632911392405
User 4097 does not improve AUC. Reverting changes.
Training on augumented user 17543 27/50 current_auc = 0.590886075949367
User 17543 AUC after training: 0.5916455696202532
User 17543 improves AUC. Keeping the model.
Training on augumented user 19954 28/50 current_auc = 0.5916455696202532
User 19954 AUC after training: 0.590379746835443
User 19954 does not improve AUC. Reverting changes.
Training on augumented user 135042 29/50 current_auc = 0.5916455696202532
User 135042 AUC after training: 0.5911392405063292
User 135042 does not improve AUC. Reverting changes.
Training on augumented user 107110 30/50 current_auc = 0.5916455696202532
User 107110 AUC after training: 0.5921518987341773
User 107110 improves AUC. Keeping the model.
Training on augumented user 76660 31/50 current_auc = 0.5921518987341773
User 76660 AUC after training: 0.5903797468354429
User 76660 does not improve AUC. Reverting changes.
Training on augumented user 116945 32/50 current_auc = 0.5921518987341773
User 116945 AUC after training: 0.5926582278481013
User 116945 improves AUC. Keeping the model.
Training on augumented user 117674 33/50 current_auc = 0.5926582278481013
User 117674 AUC after training: 0.5921518987341772
User 117674 does not improve AUC. Reverting changes.
Training on augumented user 25942 34/50 current_auc = 0.5926582278481013
User 25942 AUC after training: 0.5924050632911393
User 25942 does not improve AUC. Reverting changes.
Training on augumented user 68667 35/50 current_auc = 0.5926582278481013
User 68667 AUC after training: 0.5929113924050633
User 68667 improves AUC. Keeping the model.
Training on augumented user 13048 36/50 current_auc = 0.5929113924050633
User 13048 AUC after training: 0.5924050632911393
User 13048 does not improve AUC. Reverting changes.
Training on augumented user 15855 37/50 current_auc = 0.5929113924050633
User 15855 AUC after training: 0.589873417721519
User 15855 does not improve AUC. Reverting changes.
Training on augumented user 42307 38/50 current_auc = 0.5929113924050633
User 42307 AUC after training: 0.5918987341772152
User 42307 does not improve AUC. Reverting changes.
Training on augumented user 37601 39/50 current_auc = 0.5929113924050633
User 37601 AUC after training: 0.5926582278481013
User 37601 does not improve AUC. Reverting changes.
Training on augumented user 128982 40/50 current_auc = 0.5929113924050633
User 128982 AUC after training: 0.5926582278481013
User 128982 does not improve AUC. Reverting changes.
Training on augumented user 39041 41/50 current_auc = 0.5929113924050633
User 39041 AUC after training: 0.5916455696202532
User 39041 does not improve AUC. Reverting changes.
Training on augumented user 71474 42/50 current_auc = 0.5929113924050633
User 71474 AUC after training: 0.591645569620253
User 71474 does not improve AUC. Reverting changes.
Training on augumented user 49679 43/50 current_auc = 0.5929113924050633
User 49679 AUC after training: 0.5944303797468354
User 49679 improves AUC. Keeping the model.
Training on augumented user 103746 44/50 current_auc = 0.5944303797468354
User 103746 AUC after training: 0.5939240506329113
User 103746 does not improve AUC. Reverting changes.
Training on augumented user 4837 45/50 current_auc = 0.5944303797468354
User 4837 AUC after training: 0.5941772151898734
User 4837 does not improve AUC. Reverting changes.
Training on augumented user 131300 46/50 current_auc = 0.5944303797468354
User 131300 AUC after training: 0.5926582278481012
User 131300 does not improve AUC. Reverting changes.
Training on augumented user 85940 47/50 current_auc = 0.5944303797468354
User 85940 AUC after training: 0.5931645569620253
User 85940 does not improve AUC. Reverting changes.
Training on augumented user 9483 48/50 current_auc = 0.5944303797468354
User 9483 AUC after training: 0.5944303797468354
User 9483 does not improve AUC. Reverting changes.
Training on augumented user 37115 49/50 current_auc = 0.5944303797468354
User 37115 AUC after training: 0.5946835443037974
User 37115 improves AUC. Keeping the model.
[2024-12-02 17:47:39.198278] start test user 83230 19/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:47:39.618480] start test user 83230 19/568 recall augumented users by random, augumented_users = [98825, 100684, 104451, 88971, 134978, 32487, 18102, 129092, 125285, 19520, 41522, 95405, 61753, 134248, 119211, 92047, 69477, 67227, 19589, 78281, 107907, 82547, 124539, 83198, 84269, 89743, 94776, 82165, 127006, 77166, 74027, 113551, 70555, 1081, 100357, 31231, 20525, 28694, 68520, 20314, 79291, 109764, 37416, 30082, 61605, 10552, 59880, 43457, 135498, 35869]
[2024-12-02 17:47:39.633610] user = 83230 Cloud 19/568
[2024-12-02 17:47:39.651725] user = 83230 Local 19/568
[2024-12-02 17:47:39.782103] user = 83230 Local+ 19/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:47:41.976342] user = 83230 MPDA- 19/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4148148148148148
Training on augumented user 98825 0/50 current_auc = 0.4148148148148148
User 98825 AUC after training: 0.4148148148148148
User 98825 does not improve AUC. Reverting changes.
Training on augumented user 100684 1/50 current_auc = 0.4148148148148148
User 100684 AUC after training: 0.4148148148148148
User 100684 does not improve AUC. Reverting changes.
Training on augumented user 104451 2/50 current_auc = 0.4148148148148148
User 104451 AUC after training: 0.4148148148148148
User 104451 does not improve AUC. Reverting changes.
Training on augumented user 88971 3/50 current_auc = 0.4148148148148148
User 88971 AUC after training: 0.4148148148148148
User 88971 does not improve AUC. Reverting changes.
Training on augumented user 134978 4/50 current_auc = 0.4148148148148148
User 134978 AUC after training: 0.4148148148148148
User 134978 does not improve AUC. Reverting changes.
Training on augumented user 32487 5/50 current_auc = 0.4148148148148148
User 32487 AUC after training: 0.4148148148148148
User 32487 does not improve AUC. Reverting changes.
Training on augumented user 18102 6/50 current_auc = 0.4148148148148148
User 18102 AUC after training: 0.40740740740740744
User 18102 does not improve AUC. Reverting changes.
Training on augumented user 129092 7/50 current_auc = 0.4148148148148148
User 129092 AUC after training: 0.4222222222222222
User 129092 improves AUC. Keeping the model.
Training on augumented user 125285 8/50 current_auc = 0.4222222222222222
User 125285 AUC after training: 0.41481481481481486
User 125285 does not improve AUC. Reverting changes.
Training on augumented user 19520 9/50 current_auc = 0.4222222222222222
User 19520 AUC after training: 0.42962962962962964
User 19520 improves AUC. Keeping the model.
Training on augumented user 41522 10/50 current_auc = 0.42962962962962964
User 41522 AUC after training: 0.4222222222222223
User 41522 does not improve AUC. Reverting changes.
Training on augumented user 95405 11/50 current_auc = 0.42962962962962964
User 95405 AUC after training: 0.4222222222222223
User 95405 does not improve AUC. Reverting changes.
Training on augumented user 61753 12/50 current_auc = 0.42962962962962964
User 61753 AUC after training: 0.4222222222222222
User 61753 does not improve AUC. Reverting changes.
Training on augumented user 134248 13/50 current_auc = 0.42962962962962964
User 134248 AUC after training: 0.40740740740740744
User 134248 does not improve AUC. Reverting changes.
Training on augumented user 119211 14/50 current_auc = 0.42962962962962964
User 119211 AUC after training: 0.4148148148148148
User 119211 does not improve AUC. Reverting changes.
Training on augumented user 92047 15/50 current_auc = 0.42962962962962964
User 92047 AUC after training: 0.4222222222222222
User 92047 does not improve AUC. Reverting changes.
Training on augumented user 69477 16/50 current_auc = 0.42962962962962964
User 69477 AUC after training: 0.40740740740740744
User 69477 does not improve AUC. Reverting changes.
Training on augumented user 67227 17/50 current_auc = 0.42962962962962964
User 67227 AUC after training: 0.4148148148148148
User 67227 does not improve AUC. Reverting changes.
Training on augumented user 19589 18/50 current_auc = 0.42962962962962964
User 19589 AUC after training: 0.42962962962962964
User 19589 does not improve AUC. Reverting changes.
Training on augumented user 78281 19/50 current_auc = 0.42962962962962964
User 78281 AUC after training: 0.42962962962962964
User 78281 does not improve AUC. Reverting changes.
Training on augumented user 107907 20/50 current_auc = 0.42962962962962964
User 107907 AUC after training: 0.4148148148148148
User 107907 does not improve AUC. Reverting changes.
Training on augumented user 82547 21/50 current_auc = 0.42962962962962964
User 82547 AUC after training: 0.42962962962962964
User 82547 does not improve AUC. Reverting changes.
Training on augumented user 124539 22/50 current_auc = 0.42962962962962964
User 124539 AUC after training: 0.42962962962962964
User 124539 does not improve AUC. Reverting changes.
Training on augumented user 83198 23/50 current_auc = 0.42962962962962964
User 83198 AUC after training: 0.4148148148148148
User 83198 does not improve AUC. Reverting changes.
Training on augumented user 84269 24/50 current_auc = 0.42962962962962964
User 84269 AUC after training: 0.4222222222222222
User 84269 does not improve AUC. Reverting changes.
Training on augumented user 89743 25/50 current_auc = 0.42962962962962964
User 89743 AUC after training: 0.4222222222222222
User 89743 does not improve AUC. Reverting changes.
Training on augumented user 94776 26/50 current_auc = 0.42962962962962964
User 94776 AUC after training: 0.4222222222222222
User 94776 does not improve AUC. Reverting changes.
Training on augumented user 82165 27/50 current_auc = 0.42962962962962964
User 82165 AUC after training: 0.42962962962962964
User 82165 does not improve AUC. Reverting changes.
Training on augumented user 127006 28/50 current_auc = 0.42962962962962964
User 127006 AUC after training: 0.41481481481481486
User 127006 does not improve AUC. Reverting changes.
Training on augumented user 77166 29/50 current_auc = 0.42962962962962964
User 77166 AUC after training: 0.41481481481481486
User 77166 does not improve AUC. Reverting changes.
Training on augumented user 74027 30/50 current_auc = 0.42962962962962964
User 74027 AUC after training: 0.4222222222222222
User 74027 does not improve AUC. Reverting changes.
Training on augumented user 113551 31/50 current_auc = 0.42962962962962964
User 113551 AUC after training: 0.40740740740740744
User 113551 does not improve AUC. Reverting changes.
Training on augumented user 70555 32/50 current_auc = 0.42962962962962964
User 70555 AUC after training: 0.4148148148148148
User 70555 does not improve AUC. Reverting changes.
Training on augumented user 1081 33/50 current_auc = 0.42962962962962964
User 1081 AUC after training: 0.4148148148148148
User 1081 does not improve AUC. Reverting changes.
Training on augumented user 100357 34/50 current_auc = 0.42962962962962964
User 100357 AUC after training: 0.4222222222222222
User 100357 does not improve AUC. Reverting changes.
Training on augumented user 31231 35/50 current_auc = 0.42962962962962964
User 31231 AUC after training: 0.42962962962962964
User 31231 does not improve AUC. Reverting changes.
Training on augumented user 20525 36/50 current_auc = 0.42962962962962964
User 20525 AUC after training: 0.42962962962962964
User 20525 does not improve AUC. Reverting changes.
Training on augumented user 28694 37/50 current_auc = 0.42962962962962964
User 28694 AUC after training: 0.42962962962962964
User 28694 does not improve AUC. Reverting changes.
Training on augumented user 68520 38/50 current_auc = 0.42962962962962964
User 68520 AUC after training: 0.4148148148148148
User 68520 does not improve AUC. Reverting changes.
Training on augumented user 20314 39/50 current_auc = 0.42962962962962964
User 20314 AUC after training: 0.4148148148148148
User 20314 does not improve AUC. Reverting changes.
Training on augumented user 79291 40/50 current_auc = 0.42962962962962964
User 79291 AUC after training: 0.4148148148148148
User 79291 does not improve AUC. Reverting changes.
Training on augumented user 109764 41/50 current_auc = 0.42962962962962964
User 109764 AUC after training: 0.4222222222222222
User 109764 does not improve AUC. Reverting changes.
Training on augumented user 37416 42/50 current_auc = 0.42962962962962964
User 37416 AUC after training: 0.4148148148148148
User 37416 does not improve AUC. Reverting changes.
Training on augumented user 30082 43/50 current_auc = 0.42962962962962964
User 30082 AUC after training: 0.42962962962962964
User 30082 does not improve AUC. Reverting changes.
Training on augumented user 61605 44/50 current_auc = 0.42962962962962964
User 61605 AUC after training: 0.4222222222222222
User 61605 does not improve AUC. Reverting changes.
Training on augumented user 10552 45/50 current_auc = 0.42962962962962964
User 10552 AUC after training: 0.42962962962962964
User 10552 does not improve AUC. Reverting changes.
Training on augumented user 59880 46/50 current_auc = 0.42962962962962964
User 59880 AUC after training: 0.4222222222222222
User 59880 does not improve AUC. Reverting changes.
Training on augumented user 43457 47/50 current_auc = 0.42962962962962964
User 43457 AUC after training: 0.4148148148148148
User 43457 does not improve AUC. Reverting changes.
Training on augumented user 135498 48/50 current_auc = 0.42962962962962964
User 135498 AUC after training: 0.4222222222222222
User 135498 does not improve AUC. Reverting changes.
Training on augumented user 35869 49/50 current_auc = 0.42962962962962964
User 35869 AUC after training: 0.4222222222222222
User 35869 does not improve AUC. Reverting changes.
[2024-12-02 17:48:14.354415] start test user 83275 20/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:48:14.759959] start test user 83275 20/568 recall augumented users by random, augumented_users = [24845, 134071, 93254, 34778, 116476, 74564, 132732, 96504, 83618, 49026, 79599, 104928, 10532, 12892, 87903, 94723, 10114, 90238, 103813, 129614, 28569, 20293, 136631, 100048, 119291, 86023, 116812, 113845, 51270, 100039, 107566, 120410, 87000, 5704, 36317, 100865, 51845, 59583, 10501, 72745, 75586, 135391, 40487, 29775, 57528, 113113, 65790, 109204, 109652, 26507]
[2024-12-02 17:48:14.776881] user = 83275 Cloud 20/568
[2024-12-02 17:48:14.789648] user = 83275 Local 20/568
[2024-12-02 17:48:15.001591] user = 83275 Local+ 20/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:48:17.587605] user = 83275 MPDA- 20/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5627880184331797
Training on augumented user 24845 0/50 current_auc = 0.5627880184331797
User 24845 AUC after training: 0.5627880184331797
User 24845 does not improve AUC. Reverting changes.
Training on augumented user 134071 1/50 current_auc = 0.5627880184331797
User 134071 AUC after training: 0.564516129032258
User 134071 improves AUC. Keeping the model.
Training on augumented user 93254 2/50 current_auc = 0.564516129032258
User 93254 AUC after training: 0.5639400921658986
User 93254 does not improve AUC. Reverting changes.
Training on augumented user 34778 3/50 current_auc = 0.564516129032258
User 34778 AUC after training: 0.564516129032258
User 34778 does not improve AUC. Reverting changes.
Training on augumented user 116476 4/50 current_auc = 0.564516129032258
User 116476 AUC after training: 0.5622119815668203
User 116476 does not improve AUC. Reverting changes.
Training on augumented user 74564 5/50 current_auc = 0.564516129032258
User 74564 AUC after training: 0.5639400921658987
User 74564 does not improve AUC. Reverting changes.
Training on augumented user 132732 6/50 current_auc = 0.564516129032258
User 132732 AUC after training: 0.5627880184331797
User 132732 does not improve AUC. Reverting changes.
Training on augumented user 96504 7/50 current_auc = 0.564516129032258
User 96504 AUC after training: 0.5639400921658987
User 96504 does not improve AUC. Reverting changes.
Training on augumented user 83618 8/50 current_auc = 0.564516129032258
User 83618 AUC after training: 0.5639400921658987
User 83618 does not improve AUC. Reverting changes.
Training on augumented user 49026 9/50 current_auc = 0.564516129032258
User 49026 AUC after training: 0.564516129032258
User 49026 does not improve AUC. Reverting changes.
Training on augumented user 79599 10/50 current_auc = 0.564516129032258
User 79599 AUC after training: 0.5622119815668203
User 79599 does not improve AUC. Reverting changes.
Training on augumented user 104928 11/50 current_auc = 0.564516129032258
User 104928 AUC after training: 0.5639400921658986
User 104928 does not improve AUC. Reverting changes.
Training on augumented user 10532 12/50 current_auc = 0.564516129032258
User 10532 AUC after training: 0.5633640552995391
User 10532 does not improve AUC. Reverting changes.
Training on augumented user 12892 13/50 current_auc = 0.564516129032258
User 12892 AUC after training: 0.5627880184331797
User 12892 does not improve AUC. Reverting changes.
Training on augumented user 87903 14/50 current_auc = 0.564516129032258
User 87903 AUC after training: 0.5627880184331797
User 87903 does not improve AUC. Reverting changes.
Training on augumented user 94723 15/50 current_auc = 0.564516129032258
User 94723 AUC after training: 0.5622119815668203
User 94723 does not improve AUC. Reverting changes.
Training on augumented user 10114 16/50 current_auc = 0.564516129032258
User 10114 AUC after training: 0.5639400921658987
User 10114 does not improve AUC. Reverting changes.
Training on augumented user 90238 17/50 current_auc = 0.564516129032258
User 90238 AUC after training: 0.5633640552995391
User 90238 does not improve AUC. Reverting changes.
Training on augumented user 103813 18/50 current_auc = 0.564516129032258
User 103813 AUC after training: 0.564516129032258
User 103813 does not improve AUC. Reverting changes.
Training on augumented user 129614 19/50 current_auc = 0.564516129032258
User 129614 AUC after training: 0.5639400921658987
User 129614 does not improve AUC. Reverting changes.
Training on augumented user 28569 20/50 current_auc = 0.564516129032258
User 28569 AUC after training: 0.5633640552995393
User 28569 does not improve AUC. Reverting changes.
Training on augumented user 20293 21/50 current_auc = 0.564516129032258
User 20293 AUC after training: 0.564516129032258
User 20293 does not improve AUC. Reverting changes.
Training on augumented user 136631 22/50 current_auc = 0.564516129032258
User 136631 AUC after training: 0.5633640552995393
User 136631 does not improve AUC. Reverting changes.
Training on augumented user 100048 23/50 current_auc = 0.564516129032258
User 100048 AUC after training: 0.5639400921658987
User 100048 does not improve AUC. Reverting changes.
Training on augumented user 119291 24/50 current_auc = 0.564516129032258
User 119291 AUC after training: 0.564516129032258
User 119291 does not improve AUC. Reverting changes.
Training on augumented user 86023 25/50 current_auc = 0.564516129032258
User 86023 AUC after training: 0.5639400921658986
User 86023 does not improve AUC. Reverting changes.
Training on augumented user 116812 26/50 current_auc = 0.564516129032258
User 116812 AUC after training: 0.5639400921658986
User 116812 does not improve AUC. Reverting changes.
Training on augumented user 113845 27/50 current_auc = 0.564516129032258
User 113845 AUC after training: 0.5639400921658986
User 113845 does not improve AUC. Reverting changes.
Training on augumented user 51270 28/50 current_auc = 0.564516129032258
User 51270 AUC after training: 0.5639400921658986
User 51270 does not improve AUC. Reverting changes.
Training on augumented user 100039 29/50 current_auc = 0.564516129032258
User 100039 AUC after training: 0.5639400921658986
User 100039 does not improve AUC. Reverting changes.
Training on augumented user 107566 30/50 current_auc = 0.564516129032258
User 107566 AUC after training: 0.5639400921658986
User 107566 does not improve AUC. Reverting changes.
Training on augumented user 120410 31/50 current_auc = 0.564516129032258
User 120410 AUC after training: 0.5639400921658987
User 120410 does not improve AUC. Reverting changes.
Training on augumented user 87000 32/50 current_auc = 0.564516129032258
User 87000 AUC after training: 0.564516129032258
User 87000 does not improve AUC. Reverting changes.
Training on augumented user 5704 33/50 current_auc = 0.564516129032258
User 5704 AUC after training: 0.564516129032258
User 5704 does not improve AUC. Reverting changes.
Training on augumented user 36317 34/50 current_auc = 0.564516129032258
User 36317 AUC after training: 0.564516129032258
User 36317 does not improve AUC. Reverting changes.
Training on augumented user 100865 35/50 current_auc = 0.564516129032258
User 100865 AUC after training: 0.564516129032258
User 100865 does not improve AUC. Reverting changes.
Training on augumented user 51845 36/50 current_auc = 0.564516129032258
User 51845 AUC after training: 0.564516129032258
User 51845 does not improve AUC. Reverting changes.
Training on augumented user 59583 37/50 current_auc = 0.564516129032258
User 59583 AUC after training: 0.5668202764976958
User 59583 improves AUC. Keeping the model.
Training on augumented user 10501 38/50 current_auc = 0.5668202764976958
User 10501 AUC after training: 0.565668202764977
User 10501 does not improve AUC. Reverting changes.
Training on augumented user 72745 39/50 current_auc = 0.5668202764976958
User 72745 AUC after training: 0.5662442396313364
User 72745 does not improve AUC. Reverting changes.
Training on augumented user 75586 40/50 current_auc = 0.5668202764976958
User 75586 AUC after training: 0.5668202764976958
User 75586 does not improve AUC. Reverting changes.
Training on augumented user 135391 41/50 current_auc = 0.5668202764976958
User 135391 AUC after training: 0.565668202764977
User 135391 does not improve AUC. Reverting changes.
Training on augumented user 40487 42/50 current_auc = 0.5668202764976958
User 40487 AUC after training: 0.5662442396313364
User 40487 does not improve AUC. Reverting changes.
Training on augumented user 29775 43/50 current_auc = 0.5668202764976958
User 29775 AUC after training: 0.5662442396313364
User 29775 does not improve AUC. Reverting changes.
Training on augumented user 57528 44/50 current_auc = 0.5668202764976958
User 57528 AUC after training: 0.5668202764976958
User 57528 does not improve AUC. Reverting changes.
Training on augumented user 113113 45/50 current_auc = 0.5668202764976958
User 113113 AUC after training: 0.565668202764977
User 113113 does not improve AUC. Reverting changes.
Training on augumented user 65790 46/50 current_auc = 0.5668202764976958
User 65790 AUC after training: 0.5662442396313364
User 65790 does not improve AUC. Reverting changes.
Training on augumented user 109204 47/50 current_auc = 0.5668202764976958
User 109204 AUC after training: 0.565668202764977
User 109204 does not improve AUC. Reverting changes.
Training on augumented user 109652 48/50 current_auc = 0.5668202764976958
User 109652 AUC after training: 0.5662442396313364
User 109652 does not improve AUC. Reverting changes.
Training on augumented user 26507 49/50 current_auc = 0.5668202764976958
User 26507 AUC after training: 0.5656682027649769
User 26507 does not improve AUC. Reverting changes.
[2024-12-02 17:48:48.405728] start test user 83305 21/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:48:49.095200] start test user 83305 21/568 recall augumented users by random, augumented_users = [135109, 66461, 80328, 110634, 117411, 2766, 97935, 15412, 17971, 13784, 98643, 27057, 40817, 52933, 118438, 78610, 83021, 105226, 90586, 20875, 130620, 48458, 116737, 125544, 32306, 132773, 61506, 97873, 19136, 129280, 71006, 124020, 125396, 25929, 122009, 33997, 66294, 52593, 67078, 38758, 81911, 34990, 128173, 137449, 54807, 80666, 79535, 67064, 22888, 109520]
[2024-12-02 17:48:49.111846] user = 83305 Cloud 21/568
[2024-12-02 17:48:49.218778] user = 83305 Local 21/568
[2024-12-02 17:48:49.386990] user = 83305 Local+ 21/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:48:52.371567] user = 83305 MPDA- 21/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7875276916260522
Training on augumented user 135109 0/50 current_auc = 0.7875276916260522
User 135109 AUC after training: 0.7873726185201595
User 135109 does not improve AUC. Reverting changes.
Training on augumented user 66461 1/50 current_auc = 0.7875276916260522
User 66461 AUC after training: 0.7877049180327869
User 66461 improves AUC. Keeping the model.
Training on augumented user 80328 2/50 current_auc = 0.7877049180327869
User 80328 AUC after training: 0.7877049180327869
User 80328 does not improve AUC. Reverting changes.
Training on augumented user 110634 3/50 current_auc = 0.7877049180327869
User 110634 AUC after training: 0.7881701373504651
User 110634 improves AUC. Keeping the model.
Training on augumented user 117411 4/50 current_auc = 0.7881701373504651
User 117411 AUC after training: 0.7878821444395215
User 117411 does not improve AUC. Reverting changes.
Training on augumented user 2766 5/50 current_auc = 0.7881701373504651
User 2766 AUC after training: 0.788192290651307
User 2766 improves AUC. Keeping the model.
Training on augumented user 97935 6/50 current_auc = 0.788192290651307
User 97935 AUC after training: 0.7876163048294196
User 97935 does not improve AUC. Reverting changes.
Training on augumented user 15412 7/50 current_auc = 0.788192290651307
User 15412 AUC after training: 0.788081524147098
User 15412 does not improve AUC. Reverting changes.
Training on augumented user 17971 8/50 current_auc = 0.788192290651307
User 17971 AUC after training: 0.7880815241470979
User 17971 does not improve AUC. Reverting changes.
Training on augumented user 13784 9/50 current_auc = 0.788192290651307
User 13784 AUC after training: 0.7882365972529907
User 13784 improves AUC. Keeping the model.
Training on augumented user 98643 10/50 current_auc = 0.7882365972529907
User 98643 AUC after training: 0.7881036774479397
User 98643 does not improve AUC. Reverting changes.
Training on augumented user 27057 11/50 current_auc = 0.7882365972529907
User 27057 AUC after training: 0.7879042977403632
User 27057 does not improve AUC. Reverting changes.
Training on augumented user 40817 12/50 current_auc = 0.7882365972529907
User 40817 AUC after training: 0.7880150642445722
User 40817 does not improve AUC. Reverting changes.
Training on augumented user 52933 13/50 current_auc = 0.7882365972529907
User 52933 AUC after training: 0.7872396987151086
User 52933 does not improve AUC. Reverting changes.
Training on augumented user 118438 14/50 current_auc = 0.7882365972529907
User 118438 AUC after training: 0.7877049180327869
User 118438 does not improve AUC. Reverting changes.
Training on augumented user 78610 15/50 current_auc = 0.7882365972529907
User 78610 AUC after training: 0.7882365972529907
User 78610 does not improve AUC. Reverting changes.
Training on augumented user 83021 16/50 current_auc = 0.7882365972529907
User 83021 AUC after training: 0.7879929109437305
User 83021 does not improve AUC. Reverting changes.
Training on augumented user 105226 17/50 current_auc = 0.7882365972529907
User 105226 AUC after training: 0.7881701373504653
User 105226 does not improve AUC. Reverting changes.
Training on augumented user 90586 18/50 current_auc = 0.7882365972529907
User 90586 AUC after training: 0.7881701373504653
User 90586 does not improve AUC. Reverting changes.
Training on augumented user 20875 19/50 current_auc = 0.7882365972529907
User 20875 AUC after training: 0.7878821444395214
User 20875 does not improve AUC. Reverting changes.
Training on augumented user 130620 20/50 current_auc = 0.7882365972529907
User 130620 AUC after training: 0.7882144439521488
User 130620 does not improve AUC. Reverting changes.
Training on augumented user 48458 21/50 current_auc = 0.7882365972529907
User 48458 AUC after training: 0.7879486043420469
User 48458 does not improve AUC. Reverting changes.
Training on augumented user 116737 22/50 current_auc = 0.7882365972529907
User 116737 AUC after training: 0.7882144439521488
User 116737 does not improve AUC. Reverting changes.
Training on augumented user 125544 23/50 current_auc = 0.7882365972529907
User 125544 AUC after training: 0.7877935312361543
User 125544 does not improve AUC. Reverting changes.
Training on augumented user 32306 24/50 current_auc = 0.7882365972529907
User 32306 AUC after training: 0.7873504652193176
User 32306 does not improve AUC. Reverting changes.
Training on augumented user 132773 25/50 current_auc = 0.7882365972529907
User 132773 AUC after training: 0.7879486043420468
User 132773 does not improve AUC. Reverting changes.
Training on augumented user 61506 26/50 current_auc = 0.7882365972529907
User 61506 AUC after training: 0.7878821444395215
User 61506 does not improve AUC. Reverting changes.
Training on augumented user 97873 27/50 current_auc = 0.7882365972529907
User 97873 AUC after training: 0.7884359769605671
User 97873 improves AUC. Keeping the model.
Training on augumented user 19136 28/50 current_auc = 0.7884359769605671
User 19136 AUC after training: 0.7884138236597253
User 19136 does not improve AUC. Reverting changes.
Training on augumented user 129280 29/50 current_auc = 0.7884359769605671
User 129280 AUC after training: 0.7882809038546744
User 129280 does not improve AUC. Reverting changes.
Training on augumented user 71006 30/50 current_auc = 0.7884359769605671
User 71006 AUC after training: 0.7881036774479397
User 71006 does not improve AUC. Reverting changes.
Training on augumented user 124020 31/50 current_auc = 0.7884359769605671
User 124020 AUC after training: 0.7879486043420469
User 124020 does not improve AUC. Reverting changes.
Training on augumented user 125396 32/50 current_auc = 0.7884359769605671
User 125396 AUC after training: 0.7882587505538324
User 125396 does not improve AUC. Reverting changes.
Training on augumented user 25929 33/50 current_auc = 0.7884359769605671
User 25929 AUC after training: 0.7885467434647763
User 25929 improves AUC. Keeping the model.
Training on augumented user 122009 34/50 current_auc = 0.7885467434647763
User 122009 AUC after training: 0.7881922906513071
User 122009 does not improve AUC. Reverting changes.
Training on augumented user 33997 35/50 current_auc = 0.7885467434647763
User 33997 AUC after training: 0.7883695170580416
User 33997 does not improve AUC. Reverting changes.
Training on augumented user 66294 36/50 current_auc = 0.7885467434647763
User 66294 AUC after training: 0.7883916703588835
User 66294 does not improve AUC. Reverting changes.
Training on augumented user 52593 37/50 current_auc = 0.7885467434647763
User 52593 AUC after training: 0.78859105006646
User 52593 improves AUC. Keeping the model.
Training on augumented user 67078 38/50 current_auc = 0.78859105006646
User 67078 AUC after training: 0.7884359769605671
User 67078 does not improve AUC. Reverting changes.
Training on augumented user 38758 39/50 current_auc = 0.78859105006646
User 38758 AUC after training: 0.7885467434647763
User 38758 does not improve AUC. Reverting changes.
Training on augumented user 81911 40/50 current_auc = 0.78859105006646
User 81911 AUC after training: 0.7886575099689854
User 81911 improves AUC. Keeping the model.
Training on augumented user 34990 41/50 current_auc = 0.7886575099689854
User 34990 AUC after training: 0.7883695170580416
User 34990 does not improve AUC. Reverting changes.
Training on augumented user 128173 42/50 current_auc = 0.7886575099689854
User 128173 AUC after training: 0.7882809038546743
User 128173 does not improve AUC. Reverting changes.
Training on augumented user 137449 43/50 current_auc = 0.7886575099689854
User 137449 AUC after training: 0.7881258307487815
User 137449 does not improve AUC. Reverting changes.
Training on augumented user 54807 44/50 current_auc = 0.7886575099689854
User 54807 AUC after training: 0.7886132033673018
User 54807 does not improve AUC. Reverting changes.
Training on augumented user 80666 45/50 current_auc = 0.7886575099689854
User 80666 AUC after training: 0.7886575099689853
User 80666 does not improve AUC. Reverting changes.
Training on augumented user 79535 46/50 current_auc = 0.7886575099689854
User 79535 AUC after training: 0.7886353566681434
User 79535 does not improve AUC. Reverting changes.
Training on augumented user 67064 47/50 current_auc = 0.7886575099689854
User 67064 AUC after training: 0.7881036774479399
User 67064 does not improve AUC. Reverting changes.
Training on augumented user 22888 48/50 current_auc = 0.7886575099689854
User 22888 AUC after training: 0.7888568896765618
User 22888 improves AUC. Keeping the model.
Training on augumented user 109520 49/50 current_auc = 0.7888568896765618
User 109520 AUC after training: 0.7889233495790873
User 109520 improves AUC. Keeping the model.
[2024-12-02 17:49:26.821858] start test user 83313 22/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:49:27.223167] start test user 83313 22/568 recall augumented users by random, augumented_users = [4809, 35013, 1863, 21011, 36635, 23187, 29427, 101912, 27025, 9580, 122857, 62841, 86242, 33666, 12703, 133803, 131779, 100921, 92931, 130642, 71263, 77930, 130541, 14660, 130430, 65325, 75141, 94327, 32080, 129592, 112020, 69378, 43735, 36924, 127507, 47565, 73921, 77171, 89422, 68040, 9569, 77656, 69474, 5476, 86181, 84053, 44878, 38126, 19582, 123941]
[2024-12-02 17:49:27.237827] user = 83313 Cloud 22/568
[2024-12-02 17:49:27.247343] user = 83313 Local 22/568
[2024-12-02 17:49:27.313220] user = 83313 Local+ 22/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:49:29.173561] user = 83313 MPDA- 22/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7333333333333333
Training on augumented user 4809 0/50 current_auc = 0.7333333333333333
User 4809 AUC after training: 0.7333333333333333
User 4809 does not improve AUC. Reverting changes.
Training on augumented user 35013 1/50 current_auc = 0.7333333333333333
User 35013 AUC after training: 0.7333333333333333
User 35013 does not improve AUC. Reverting changes.
Training on augumented user 1863 2/50 current_auc = 0.7333333333333333
User 1863 AUC after training: 0.7333333333333333
User 1863 does not improve AUC. Reverting changes.
Training on augumented user 21011 3/50 current_auc = 0.7333333333333333
User 21011 AUC after training: 0.7333333333333333
User 21011 does not improve AUC. Reverting changes.
Training on augumented user 36635 4/50 current_auc = 0.7333333333333333
User 36635 AUC after training: 0.7333333333333333
User 36635 does not improve AUC. Reverting changes.
Training on augumented user 23187 5/50 current_auc = 0.7333333333333333
User 23187 AUC after training: 0.7333333333333333
User 23187 does not improve AUC. Reverting changes.
Training on augumented user 29427 6/50 current_auc = 0.7333333333333333
User 29427 AUC after training: 0.7333333333333333
User 29427 does not improve AUC. Reverting changes.
Training on augumented user 101912 7/50 current_auc = 0.7333333333333333
User 101912 AUC after training: 0.7333333333333333
User 101912 does not improve AUC. Reverting changes.
Training on augumented user 27025 8/50 current_auc = 0.7333333333333333
User 27025 AUC after training: 0.7333333333333333
User 27025 does not improve AUC. Reverting changes.
Training on augumented user 9580 9/50 current_auc = 0.7333333333333333
User 9580 AUC after training: 0.7333333333333333
User 9580 does not improve AUC. Reverting changes.
Training on augumented user 122857 10/50 current_auc = 0.7333333333333333
User 122857 AUC after training: 0.7333333333333333
User 122857 does not improve AUC. Reverting changes.
Training on augumented user 62841 11/50 current_auc = 0.7333333333333333
User 62841 AUC after training: 0.7333333333333333
User 62841 does not improve AUC. Reverting changes.
Training on augumented user 86242 12/50 current_auc = 0.7333333333333333
User 86242 AUC after training: 0.7333333333333333
User 86242 does not improve AUC. Reverting changes.
Training on augumented user 33666 13/50 current_auc = 0.7333333333333333
User 33666 AUC after training: 0.7333333333333333
User 33666 does not improve AUC. Reverting changes.
Training on augumented user 12703 14/50 current_auc = 0.7333333333333333
User 12703 AUC after training: 0.7333333333333333
User 12703 does not improve AUC. Reverting changes.
Training on augumented user 133803 15/50 current_auc = 0.7333333333333333
User 133803 AUC after training: 0.7333333333333333
User 133803 does not improve AUC. Reverting changes.
Training on augumented user 131779 16/50 current_auc = 0.7333333333333333
User 131779 AUC after training: 0.7333333333333333
User 131779 does not improve AUC. Reverting changes.
Training on augumented user 100921 17/50 current_auc = 0.7333333333333333
User 100921 AUC after training: 0.7333333333333333
User 100921 does not improve AUC. Reverting changes.
Training on augumented user 92931 18/50 current_auc = 0.7333333333333333
User 92931 AUC after training: 0.7333333333333333
User 92931 does not improve AUC. Reverting changes.
Training on augumented user 130642 19/50 current_auc = 0.7333333333333333
User 130642 AUC after training: 0.7333333333333333
User 130642 does not improve AUC. Reverting changes.
Training on augumented user 71263 20/50 current_auc = 0.7333333333333333
User 71263 AUC after training: 0.7333333333333333
User 71263 does not improve AUC. Reverting changes.
Training on augumented user 77930 21/50 current_auc = 0.7333333333333333
User 77930 AUC after training: 0.7333333333333333
User 77930 does not improve AUC. Reverting changes.
Training on augumented user 130541 22/50 current_auc = 0.7333333333333333
User 130541 AUC after training: 0.7333333333333333
User 130541 does not improve AUC. Reverting changes.
Training on augumented user 14660 23/50 current_auc = 0.7333333333333333
User 14660 AUC after training: 0.7333333333333333
User 14660 does not improve AUC. Reverting changes.
Training on augumented user 130430 24/50 current_auc = 0.7333333333333333
User 130430 AUC after training: 0.7333333333333333
User 130430 does not improve AUC. Reverting changes.
Training on augumented user 65325 25/50 current_auc = 0.7333333333333333
User 65325 AUC after training: 0.7333333333333333
User 65325 does not improve AUC. Reverting changes.
Training on augumented user 75141 26/50 current_auc = 0.7333333333333333
User 75141 AUC after training: 0.7333333333333333
User 75141 does not improve AUC. Reverting changes.
Training on augumented user 94327 27/50 current_auc = 0.7333333333333333
User 94327 AUC after training: 0.7333333333333333
User 94327 does not improve AUC. Reverting changes.
Training on augumented user 32080 28/50 current_auc = 0.7333333333333333
User 32080 AUC after training: 0.7333333333333333
User 32080 does not improve AUC. Reverting changes.
Training on augumented user 129592 29/50 current_auc = 0.7333333333333333
User 129592 AUC after training: 0.7333333333333333
User 129592 does not improve AUC. Reverting changes.
Training on augumented user 112020 30/50 current_auc = 0.7333333333333333
User 112020 AUC after training: 0.7333333333333333
User 112020 does not improve AUC. Reverting changes.
Training on augumented user 69378 31/50 current_auc = 0.7333333333333333
User 69378 AUC after training: 0.7333333333333333
User 69378 does not improve AUC. Reverting changes.
Training on augumented user 43735 32/50 current_auc = 0.7333333333333333
User 43735 AUC after training: 0.7333333333333333
User 43735 does not improve AUC. Reverting changes.
Training on augumented user 36924 33/50 current_auc = 0.7333333333333333
User 36924 AUC after training: 0.7333333333333333
User 36924 does not improve AUC. Reverting changes.
Training on augumented user 127507 34/50 current_auc = 0.7333333333333333
User 127507 AUC after training: 0.7333333333333333
User 127507 does not improve AUC. Reverting changes.
Training on augumented user 47565 35/50 current_auc = 0.7333333333333333
User 47565 AUC after training: 0.7333333333333333
User 47565 does not improve AUC. Reverting changes.
Training on augumented user 73921 36/50 current_auc = 0.7333333333333333
User 73921 AUC after training: 0.7333333333333333
User 73921 does not improve AUC. Reverting changes.
Training on augumented user 77171 37/50 current_auc = 0.7333333333333333
User 77171 AUC after training: 0.7333333333333333
User 77171 does not improve AUC. Reverting changes.
Training on augumented user 89422 38/50 current_auc = 0.7333333333333333
User 89422 AUC after training: 0.7333333333333333
User 89422 does not improve AUC. Reverting changes.
Training on augumented user 68040 39/50 current_auc = 0.7333333333333333
User 68040 AUC after training: 0.7333333333333333
User 68040 does not improve AUC. Reverting changes.
Training on augumented user 9569 40/50 current_auc = 0.7333333333333333
User 9569 AUC after training: 0.7333333333333333
User 9569 does not improve AUC. Reverting changes.
Training on augumented user 77656 41/50 current_auc = 0.7333333333333333
User 77656 AUC after training: 0.7333333333333333
User 77656 does not improve AUC. Reverting changes.
Training on augumented user 69474 42/50 current_auc = 0.7333333333333333
User 69474 AUC after training: 0.7333333333333333
User 69474 does not improve AUC. Reverting changes.
Training on augumented user 5476 43/50 current_auc = 0.7333333333333333
User 5476 AUC after training: 0.7333333333333333
User 5476 does not improve AUC. Reverting changes.
Training on augumented user 86181 44/50 current_auc = 0.7333333333333333
User 86181 AUC after training: 0.7333333333333333
User 86181 does not improve AUC. Reverting changes.
Training on augumented user 84053 45/50 current_auc = 0.7333333333333333
User 84053 AUC after training: 0.7333333333333333
User 84053 does not improve AUC. Reverting changes.
Training on augumented user 44878 46/50 current_auc = 0.7333333333333333
User 44878 AUC after training: 0.7333333333333333
User 44878 does not improve AUC. Reverting changes.
Training on augumented user 38126 47/50 current_auc = 0.7333333333333333
User 38126 AUC after training: 0.7333333333333333
User 38126 does not improve AUC. Reverting changes.
Training on augumented user 19582 48/50 current_auc = 0.7333333333333333
User 19582 AUC after training: 0.7333333333333333
User 19582 does not improve AUC. Reverting changes.
Training on augumented user 123941 49/50 current_auc = 0.7333333333333333
User 123941 AUC after training: 0.7333333333333333
User 123941 does not improve AUC. Reverting changes.
[2024-12-02 17:49:54.761237] start test user 83331 23/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:49:55.245290] start test user 83331 23/568 recall augumented users by random, augumented_users = [56865, 90597, 50482, 134043, 31965, 91595, 13488, 47471, 49696, 45094, 134079, 9531, 15427, 29542, 64654, 8951, 42403, 90410, 45170, 114228, 100101, 39591, 133170, 101693, 60256, 90450, 31549, 40822, 70220, 6549, 70423, 36467, 16792, 127393, 79765, 89915, 47866, 122755, 45518, 56083, 65165, 56984, 87600, 124386, 114388, 121710, 59623, 32376, 124037, 72816]
[2024-12-02 17:49:55.262119] user = 83331 Cloud 23/568
[2024-12-02 17:49:55.284844] user = 83331 Local 23/568
[2024-12-02 17:49:55.684488] user = 83331 Local+ 23/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:49:58.071479] user = 83331 MPDA- 23/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5551223738358241
Training on augumented user 56865 0/50 current_auc = 0.5551223738358241
User 56865 AUC after training: 0.554472601256227
User 56865 does not improve AUC. Reverting changes.
Training on augumented user 90597 1/50 current_auc = 0.5551223738358241
User 90597 AUC after training: 0.5538228286766298
User 90597 does not improve AUC. Reverting changes.
Training on augumented user 50482 2/50 current_auc = 0.5551223738358241
User 50482 AUC after training: 0.5553389646956898
User 50482 improves AUC. Keeping the model.
Training on augumented user 134043 3/50 current_auc = 0.5553389646956898
User 134043 AUC after training: 0.555988737275287
User 134043 improves AUC. Keeping the model.
Training on augumented user 31965 4/50 current_auc = 0.555988737275287
User 31965 AUC after training: 0.5555555555555556
User 31965 does not improve AUC. Reverting changes.
Training on augumented user 91595 5/50 current_auc = 0.555988737275287
User 91595 AUC after training: 0.5553389646956899
User 91595 does not improve AUC. Reverting changes.
Training on augumented user 13488 6/50 current_auc = 0.555988737275287
User 13488 AUC after training: 0.5551223738358241
User 13488 does not improve AUC. Reverting changes.
Training on augumented user 47471 7/50 current_auc = 0.555988737275287
User 47471 AUC after training: 0.5551223738358241
User 47471 does not improve AUC. Reverting changes.
Training on augumented user 49696 8/50 current_auc = 0.555988737275287
User 49696 AUC after training: 0.5549057829759585
User 49696 does not improve AUC. Reverting changes.
Training on augumented user 45094 9/50 current_auc = 0.555988737275287
User 45094 AUC after training: 0.5562053281351527
User 45094 improves AUC. Keeping the model.
Training on augumented user 134079 10/50 current_auc = 0.5562053281351527
User 134079 AUC after training: 0.5562053281351527
User 134079 does not improve AUC. Reverting changes.
Training on augumented user 9531 11/50 current_auc = 0.5562053281351527
User 9531 AUC after training: 0.5549057829759584
User 9531 does not improve AUC. Reverting changes.
Training on augumented user 15427 12/50 current_auc = 0.5562053281351527
User 15427 AUC after training: 0.5551223738358241
User 15427 does not improve AUC. Reverting changes.
Training on augumented user 29542 13/50 current_auc = 0.5562053281351527
User 29542 AUC after training: 0.5564219189950184
User 29542 improves AUC. Keeping the model.
Training on augumented user 64654 14/50 current_auc = 0.5564219189950184
User 64654 AUC after training: 0.555988737275287
User 64654 does not improve AUC. Reverting changes.
Training on augumented user 8951 15/50 current_auc = 0.5564219189950184
User 8951 AUC after training: 0.5562053281351527
User 8951 does not improve AUC. Reverting changes.
Training on augumented user 42403 16/50 current_auc = 0.5564219189950184
User 42403 AUC after training: 0.5564219189950184
User 42403 does not improve AUC. Reverting changes.
Training on augumented user 90410 17/50 current_auc = 0.5564219189950184
User 90410 AUC after training: 0.5564219189950184
User 90410 does not improve AUC. Reverting changes.
Training on augumented user 45170 18/50 current_auc = 0.5564219189950184
User 45170 AUC after training: 0.5555555555555556
User 45170 does not improve AUC. Reverting changes.
Training on augumented user 114228 19/50 current_auc = 0.5564219189950184
User 114228 AUC after training: 0.555988737275287
User 114228 does not improve AUC. Reverting changes.
Training on augumented user 100101 20/50 current_auc = 0.5564219189950184
User 100101 AUC after training: 0.5551223738358242
User 100101 does not improve AUC. Reverting changes.
Training on augumented user 39591 21/50 current_auc = 0.5564219189950184
User 39591 AUC after training: 0.5551223738358242
User 39591 does not improve AUC. Reverting changes.
Training on augumented user 133170 22/50 current_auc = 0.5564219189950184
User 133170 AUC after training: 0.5562053281351527
User 133170 does not improve AUC. Reverting changes.
Training on augumented user 101693 23/50 current_auc = 0.5564219189950184
User 101693 AUC after training: 0.5566385098548841
User 101693 improves AUC. Keeping the model.
Training on augumented user 60256 24/50 current_auc = 0.5566385098548841
User 60256 AUC after training: 0.555988737275287
User 60256 does not improve AUC. Reverting changes.
Training on augumented user 90450 25/50 current_auc = 0.5566385098548841
User 90450 AUC after training: 0.5562053281351527
User 90450 does not improve AUC. Reverting changes.
Training on augumented user 31549 26/50 current_auc = 0.5566385098548841
User 31549 AUC after training: 0.555988737275287
User 31549 does not improve AUC. Reverting changes.
Training on augumented user 40822 27/50 current_auc = 0.5566385098548841
User 40822 AUC after training: 0.5564219189950184
User 40822 does not improve AUC. Reverting changes.
Training on augumented user 70220 28/50 current_auc = 0.5566385098548841
User 70220 AUC after training: 0.5546891921160927
User 70220 does not improve AUC. Reverting changes.
Training on augumented user 6549 29/50 current_auc = 0.5566385098548841
User 6549 AUC after training: 0.5568551007147498
User 6549 improves AUC. Keeping the model.
Training on augumented user 70423 30/50 current_auc = 0.5568551007147498
User 70423 AUC after training: 0.5568551007147498
User 70423 does not improve AUC. Reverting changes.
Training on augumented user 36467 31/50 current_auc = 0.5568551007147498
User 36467 AUC after training: 0.5566385098548841
User 36467 does not improve AUC. Reverting changes.
Training on augumented user 16792 32/50 current_auc = 0.5568551007147498
User 16792 AUC after training: 0.5562053281351527
User 16792 does not improve AUC. Reverting changes.
Training on augumented user 127393 33/50 current_auc = 0.5568551007147498
User 127393 AUC after training: 0.5555555555555555
User 127393 does not improve AUC. Reverting changes.
Training on augumented user 79765 34/50 current_auc = 0.5568551007147498
User 79765 AUC after training: 0.5562053281351527
User 79765 does not improve AUC. Reverting changes.
Training on augumented user 89915 35/50 current_auc = 0.5568551007147498
User 89915 AUC after training: 0.5568551007147498
User 89915 does not improve AUC. Reverting changes.
Training on augumented user 47866 36/50 current_auc = 0.5568551007147498
User 47866 AUC after training: 0.5551223738358241
User 47866 does not improve AUC. Reverting changes.
Training on augumented user 122755 37/50 current_auc = 0.5568551007147498
User 122755 AUC after training: 0.5564219189950184
User 122755 does not improve AUC. Reverting changes.
Training on augumented user 45518 38/50 current_auc = 0.5568551007147498
User 45518 AUC after training: 0.5551223738358242
User 45518 does not improve AUC. Reverting changes.
Training on augumented user 56083 39/50 current_auc = 0.5568551007147498
User 56083 AUC after training: 0.5533896469568984
User 56083 does not improve AUC. Reverting changes.
Training on augumented user 65165 40/50 current_auc = 0.5568551007147498
User 65165 AUC after training: 0.5553389646956898
User 65165 does not improve AUC. Reverting changes.
Training on augumented user 56984 41/50 current_auc = 0.5568551007147498
User 56984 AUC after training: 0.5566385098548841
User 56984 does not improve AUC. Reverting changes.
Training on augumented user 87600 42/50 current_auc = 0.5568551007147498
User 87600 AUC after training: 0.5564219189950184
User 87600 does not improve AUC. Reverting changes.
Training on augumented user 124386 43/50 current_auc = 0.5568551007147498
User 124386 AUC after training: 0.5564219189950184
User 124386 does not improve AUC. Reverting changes.
Training on augumented user 114388 44/50 current_auc = 0.5568551007147498
User 114388 AUC after training: 0.5564219189950184
User 114388 does not improve AUC. Reverting changes.
Training on augumented user 121710 45/50 current_auc = 0.5568551007147498
User 121710 AUC after training: 0.555988737275287
User 121710 does not improve AUC. Reverting changes.
Training on augumented user 59623 46/50 current_auc = 0.5568551007147498
User 59623 AUC after training: 0.5564219189950184
User 59623 does not improve AUC. Reverting changes.
Training on augumented user 32376 47/50 current_auc = 0.5568551007147498
User 32376 AUC after training: 0.5564219189950184
User 32376 does not improve AUC. Reverting changes.
Training on augumented user 124037 48/50 current_auc = 0.5568551007147498
User 124037 AUC after training: 0.5570716915746154
User 124037 improves AUC. Keeping the model.
Training on augumented user 72816 49/50 current_auc = 0.5570716915746154
User 72816 AUC after training: 0.5564219189950184
User 72816 does not improve AUC. Reverting changes.
[2024-12-02 17:50:29.314947] start test user 83337 24/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:50:29.911357] start test user 83337 24/568 recall augumented users by random, augumented_users = [100614, 91141, 34066, 41470, 64491, 62712, 133571, 112656, 72372, 50964, 102395, 115385, 56285, 106278, 88684, 67454, 21829, 125838, 43508, 26513, 87093, 82439, 75899, 27739, 118675, 124746, 76510, 68288, 54882, 83892, 9653, 86173, 6280, 115296, 64918, 44015, 2517, 129157, 40102, 44027, 132309, 92177, 122471, 121158, 8220, 78876, 40631, 87614, 59321, 135888]
[2024-12-02 17:50:29.939654] user = 83337 Cloud 24/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:50:29.946215] user = 83337 Local 24/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:50:29.994571] user = 83337 Local+ 24/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:50:32.348030] user = 83337 MPDA- 24/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 100614 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100614 AUC after training: 0.5
User 100614 does not improve AUC. Reverting changes.
Training on augumented user 91141 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91141 AUC after training: 0.5
User 91141 does not improve AUC. Reverting changes.
Training on augumented user 34066 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34066 AUC after training: 0.5
User 34066 does not improve AUC. Reverting changes.
Training on augumented user 41470 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41470 AUC after training: 0.5
User 41470 does not improve AUC. Reverting changes.
Training on augumented user 64491 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64491 AUC after training: 0.5
User 64491 does not improve AUC. Reverting changes.
Training on augumented user 62712 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62712 AUC after training: 0.5
User 62712 does not improve AUC. Reverting changes.
Training on augumented user 133571 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133571 AUC after training: 0.5
User 133571 does not improve AUC. Reverting changes.
Training on augumented user 112656 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112656 AUC after training: 0.5
User 112656 does not improve AUC. Reverting changes.
Training on augumented user 72372 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72372 AUC after training: 0.5
User 72372 does not improve AUC. Reverting changes.
Training on augumented user 50964 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50964 AUC after training: 0.5
User 50964 does not improve AUC. Reverting changes.
Training on augumented user 102395 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102395 AUC after training: 0.5
User 102395 does not improve AUC. Reverting changes.
Training on augumented user 115385 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115385 AUC after training: 0.5
User 115385 does not improve AUC. Reverting changes.
Training on augumented user 56285 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56285 AUC after training: 0.5
User 56285 does not improve AUC. Reverting changes.
Training on augumented user 106278 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106278 AUC after training: 0.5
User 106278 does not improve AUC. Reverting changes.
Training on augumented user 88684 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88684 AUC after training: 0.5
User 88684 does not improve AUC. Reverting changes.
Training on augumented user 67454 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67454 AUC after training: 0.5
User 67454 does not improve AUC. Reverting changes.
Training on augumented user 21829 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21829 AUC after training: 0.5
User 21829 does not improve AUC. Reverting changes.
Training on augumented user 125838 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125838 AUC after training: 0.5
User 125838 does not improve AUC. Reverting changes.
Training on augumented user 43508 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43508 AUC after training: 0.5
User 43508 does not improve AUC. Reverting changes.
Training on augumented user 26513 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26513 AUC after training: 0.5
User 26513 does not improve AUC. Reverting changes.
Training on augumented user 87093 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87093 AUC after training: 0.5
User 87093 does not improve AUC. Reverting changes.
Training on augumented user 82439 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82439 AUC after training: 0.5
User 82439 does not improve AUC. Reverting changes.
Training on augumented user 75899 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75899 AUC after training: 0.5
User 75899 does not improve AUC. Reverting changes.
Training on augumented user 27739 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27739 AUC after training: 0.5
User 27739 does not improve AUC. Reverting changes.
Training on augumented user 118675 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118675 AUC after training: 0.5
User 118675 does not improve AUC. Reverting changes.
Training on augumented user 124746 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124746 AUC after training: 0.5
User 124746 does not improve AUC. Reverting changes.
Training on augumented user 76510 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76510 AUC after training: 0.5
User 76510 does not improve AUC. Reverting changes.
Training on augumented user 68288 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68288 AUC after training: 0.5
User 68288 does not improve AUC. Reverting changes.
Training on augumented user 54882 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54882 AUC after training: 0.5
User 54882 does not improve AUC. Reverting changes.
Training on augumented user 83892 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83892 AUC after training: 0.5
User 83892 does not improve AUC. Reverting changes.
Training on augumented user 9653 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9653 AUC after training: 0.5
User 9653 does not improve AUC. Reverting changes.
Training on augumented user 86173 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86173 AUC after training: 0.5
User 86173 does not improve AUC. Reverting changes.
Training on augumented user 6280 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6280 AUC after training: 0.5
User 6280 does not improve AUC. Reverting changes.
Training on augumented user 115296 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115296 AUC after training: 0.5
User 115296 does not improve AUC. Reverting changes.
Training on augumented user 64918 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64918 AUC after training: 0.5
User 64918 does not improve AUC. Reverting changes.
Training on augumented user 44015 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44015 AUC after training: 0.5
User 44015 does not improve AUC. Reverting changes.
Training on augumented user 2517 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2517 AUC after training: 0.5
User 2517 does not improve AUC. Reverting changes.
Training on augumented user 129157 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129157 AUC after training: 0.5
User 129157 does not improve AUC. Reverting changes.
Training on augumented user 40102 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40102 AUC after training: 0.5
User 40102 does not improve AUC. Reverting changes.
Training on augumented user 44027 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44027 AUC after training: 0.5
User 44027 does not improve AUC. Reverting changes.
Training on augumented user 132309 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132309 AUC after training: 0.5
User 132309 does not improve AUC. Reverting changes.
Training on augumented user 92177 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92177 AUC after training: 0.5
User 92177 does not improve AUC. Reverting changes.
Training on augumented user 122471 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122471 AUC after training: 0.5
User 122471 does not improve AUC. Reverting changes.
Training on augumented user 121158 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121158 AUC after training: 0.5
User 121158 does not improve AUC. Reverting changes.
Training on augumented user 8220 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8220 AUC after training: 0.5
User 8220 does not improve AUC. Reverting changes.
Training on augumented user 78876 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78876 AUC after training: 0.5
User 78876 does not improve AUC. Reverting changes.
Training on augumented user 40631 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40631 AUC after training: 0.5
User 40631 does not improve AUC. Reverting changes.
Training on augumented user 87614 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87614 AUC after training: 0.5
User 87614 does not improve AUC. Reverting changes.
Training on augumented user 59321 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59321 AUC after training: 0.5
User 59321 does not improve AUC. Reverting changes.
Training on augumented user 135888 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135888 AUC after training: 0.5
User 135888 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:51:02.509200] start test user 83358 25/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:51:02.948269] start test user 83358 25/568 recall augumented users by random, augumented_users = [102378, 89548, 54516, 83093, 100534, 49477, 120585, 119799, 56367, 63790, 52960, 120848, 34419, 6536, 10414, 110152, 25841, 70469, 81050, 68123, 98791, 24800, 42538, 21608, 113254, 69167, 36653, 116565, 20002, 127055, 65592, 45767, 109478, 23679, 69504, 48337, 84493, 118250, 37785, 13643, 4703, 34903, 36517, 39970, 95329, 131695, 54418, 94850, 71322, 97274]
[2024-12-02 17:51:02.963378] user = 83358 Cloud 25/568
[2024-12-02 17:51:02.986552] user = 83358 Local 25/568
[2024-12-02 17:51:03.053147] user = 83358 Local+ 25/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:51:05.126865] user = 83358 MPDA- 25/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7221377912867275
Training on augumented user 102378 0/50 current_auc = 0.7221377912867275
User 102378 AUC after training: 0.7221377912867275
User 102378 does not improve AUC. Reverting changes.
Training on augumented user 89548 1/50 current_auc = 0.7221377912867275
User 89548 AUC after training: 0.7228976697061803
User 89548 improves AUC. Keeping the model.
Training on augumented user 54516 2/50 current_auc = 0.7228976697061803
User 54516 AUC after training: 0.7223910840932117
User 54516 does not improve AUC. Reverting changes.
Training on augumented user 83093 3/50 current_auc = 0.7228976697061803
User 83093 AUC after training: 0.7218844984802432
User 83093 does not improve AUC. Reverting changes.
Training on augumented user 100534 4/50 current_auc = 0.7228976697061803
User 100534 AUC after training: 0.7216312056737589
User 100534 does not improve AUC. Reverting changes.
Training on augumented user 49477 5/50 current_auc = 0.7228976697061803
User 49477 AUC after training: 0.7213779128672746
User 49477 does not improve AUC. Reverting changes.
Training on augumented user 120585 6/50 current_auc = 0.7228976697061803
User 120585 AUC after training: 0.7228976697061803
User 120585 does not improve AUC. Reverting changes.
Training on augumented user 119799 7/50 current_auc = 0.7228976697061803
User 119799 AUC after training: 0.7221377912867275
User 119799 does not improve AUC. Reverting changes.
Training on augumented user 56367 8/50 current_auc = 0.7228976697061803
User 56367 AUC after training: 0.7188449848024315
User 56367 does not improve AUC. Reverting changes.
Training on augumented user 63790 9/50 current_auc = 0.7228976697061803
User 63790 AUC after training: 0.7218844984802432
User 63790 does not improve AUC. Reverting changes.
Training on augumented user 52960 10/50 current_auc = 0.7228976697061803
User 52960 AUC after training: 0.7213779128672746
User 52960 does not improve AUC. Reverting changes.
Training on augumented user 120848 11/50 current_auc = 0.7228976697061803
User 120848 AUC after training: 0.7254305977710233
User 120848 improves AUC. Keeping the model.
Training on augumented user 34419 12/50 current_auc = 0.7254305977710233
User 34419 AUC after training: 0.7213779128672746
User 34419 does not improve AUC. Reverting changes.
Training on augumented user 6536 13/50 current_auc = 0.7254305977710233
User 6536 AUC after training: 0.7254305977710233
User 6536 does not improve AUC. Reverting changes.
Training on augumented user 10414 14/50 current_auc = 0.7254305977710233
User 10414 AUC after training: 0.7254305977710233
User 10414 does not improve AUC. Reverting changes.
Training on augumented user 110152 15/50 current_auc = 0.7254305977710233
User 110152 AUC after training: 0.7254305977710233
User 110152 does not improve AUC. Reverting changes.
Training on augumented user 25841 16/50 current_auc = 0.7254305977710233
User 25841 AUC after training: 0.7223910840932117
User 25841 does not improve AUC. Reverting changes.
Training on augumented user 70469 17/50 current_auc = 0.7254305977710233
User 70469 AUC after training: 0.7254305977710233
User 70469 does not improve AUC. Reverting changes.
Training on augumented user 81050 18/50 current_auc = 0.7254305977710233
User 81050 AUC after training: 0.7254305977710233
User 81050 does not improve AUC. Reverting changes.
Training on augumented user 68123 19/50 current_auc = 0.7254305977710233
User 68123 AUC after training: 0.7254305977710233
User 68123 does not improve AUC. Reverting changes.
Training on augumented user 98791 20/50 current_auc = 0.7254305977710233
User 98791 AUC after training: 0.7254305977710233
User 98791 does not improve AUC. Reverting changes.
Training on augumented user 24800 21/50 current_auc = 0.7254305977710233
User 24800 AUC after training: 0.720871327254306
User 24800 does not improve AUC. Reverting changes.
Training on augumented user 42538 22/50 current_auc = 0.7254305977710233
User 42538 AUC after training: 0.7249240121580548
User 42538 does not improve AUC. Reverting changes.
Training on augumented user 21608 23/50 current_auc = 0.7254305977710233
User 21608 AUC after training: 0.7244174265450861
User 21608 does not improve AUC. Reverting changes.
Training on augumented user 113254 24/50 current_auc = 0.7254305977710233
User 113254 AUC after training: 0.7244174265450861
User 113254 does not improve AUC. Reverting changes.
Training on augumented user 69167 25/50 current_auc = 0.7254305977710233
User 69167 AUC after training: 0.7254305977710233
User 69167 does not improve AUC. Reverting changes.
Training on augumented user 36653 26/50 current_auc = 0.7254305977710233
User 36653 AUC after training: 0.7249240121580547
User 36653 does not improve AUC. Reverting changes.
Training on augumented user 116565 27/50 current_auc = 0.7254305977710233
User 116565 AUC after training: 0.7244174265450861
User 116565 does not improve AUC. Reverting changes.
Training on augumented user 20002 28/50 current_auc = 0.7254305977710233
User 20002 AUC after training: 0.7254305977710233
User 20002 does not improve AUC. Reverting changes.
Training on augumented user 127055 29/50 current_auc = 0.7254305977710233
User 127055 AUC after training: 0.7239108409321175
User 127055 does not improve AUC. Reverting changes.
Training on augumented user 65592 30/50 current_auc = 0.7254305977710233
User 65592 AUC after training: 0.7223910840932117
User 65592 does not improve AUC. Reverting changes.
Training on augumented user 45767 31/50 current_auc = 0.7254305977710233
User 45767 AUC after training: 0.725177304964539
User 45767 does not improve AUC. Reverting changes.
Training on augumented user 109478 32/50 current_auc = 0.7254305977710233
User 109478 AUC after training: 0.7249240121580547
User 109478 does not improve AUC. Reverting changes.
Training on augumented user 23679 33/50 current_auc = 0.7254305977710233
User 23679 AUC after training: 0.7241641337386018
User 23679 does not improve AUC. Reverting changes.
Training on augumented user 69504 34/50 current_auc = 0.7254305977710233
User 69504 AUC after training: 0.723404255319149
User 69504 does not improve AUC. Reverting changes.
Training on augumented user 48337 35/50 current_auc = 0.7254305977710233
User 48337 AUC after training: 0.7239108409321174
User 48337 does not improve AUC. Reverting changes.
Training on augumented user 84493 36/50 current_auc = 0.7254305977710233
User 84493 AUC after training: 0.7261904761904762
User 84493 improves AUC. Keeping the model.
Training on augumented user 118250 37/50 current_auc = 0.7261904761904762
User 118250 AUC after training: 0.7256838905775075
User 118250 does not improve AUC. Reverting changes.
Training on augumented user 37785 38/50 current_auc = 0.7261904761904762
User 37785 AUC after training: 0.7254305977710233
User 37785 does not improve AUC. Reverting changes.
Training on augumented user 13643 39/50 current_auc = 0.7261904761904762
User 13643 AUC after training: 0.7254305977710233
User 13643 does not improve AUC. Reverting changes.
Training on augumented user 4703 40/50 current_auc = 0.7261904761904762
User 4703 AUC after training: 0.7254305977710233
User 4703 does not improve AUC. Reverting changes.
Training on augumented user 34903 41/50 current_auc = 0.7261904761904762
User 34903 AUC after training: 0.7246707193515705
User 34903 does not improve AUC. Reverting changes.
Training on augumented user 36517 42/50 current_auc = 0.7261904761904762
User 36517 AUC after training: 0.7254305977710233
User 36517 does not improve AUC. Reverting changes.
Training on augumented user 39970 43/50 current_auc = 0.7261904761904762
User 39970 AUC after training: 0.7228976697061803
User 39970 does not improve AUC. Reverting changes.
Training on augumented user 95329 44/50 current_auc = 0.7261904761904762
User 95329 AUC after training: 0.7256838905775075
User 95329 does not improve AUC. Reverting changes.
Training on augumented user 131695 45/50 current_auc = 0.7261904761904762
User 131695 AUC after training: 0.7249240121580547
User 131695 does not improve AUC. Reverting changes.
Training on augumented user 54418 46/50 current_auc = 0.7261904761904762
User 54418 AUC after training: 0.7256838905775075
User 54418 does not improve AUC. Reverting changes.
Training on augumented user 94850 47/50 current_auc = 0.7261904761904762
User 94850 AUC after training: 0.7241641337386018
User 94850 does not improve AUC. Reverting changes.
Training on augumented user 71322 48/50 current_auc = 0.7261904761904762
User 71322 AUC after training: 0.7249240121580547
User 71322 does not improve AUC. Reverting changes.
Training on augumented user 97274 49/50 current_auc = 0.7261904761904762
User 97274 AUC after training: 0.7272036474164133
User 97274 improves AUC. Keeping the model.
[2024-12-02 17:51:32.524799] start test user 83431 26/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:51:32.965108] start test user 83431 26/568 recall augumented users by random, augumented_users = [76881, 45196, 3673, 74127, 134846, 5330, 60166, 15859, 41965, 30769, 31713, 110117, 32333, 70861, 34132, 17107, 13485, 99554, 94882, 92119, 54119, 11779, 94593, 15185, 107421, 84131, 1072, 120646, 77950, 46005, 116804, 17994, 91003, 96859, 58809, 61401, 94085, 74061, 72218, 55989, 37819, 119678, 53338, 106852, 95824, 46618, 8765, 41131, 112030, 30744]
[2024-12-02 17:51:32.979394] user = 83431 Cloud 26/568
[2024-12-02 17:51:32.989486] user = 83431 Local 26/568
[2024-12-02 17:51:33.016075] user = 83431 Local+ 26/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:51:35.042870] user = 83431 MPDA- 26/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6956521739130435
Training on augumented user 76881 0/50 current_auc = 0.6956521739130435
User 76881 AUC after training: 0.6956521739130435
User 76881 does not improve AUC. Reverting changes.
Training on augumented user 45196 1/50 current_auc = 0.6956521739130435
User 45196 AUC after training: 0.7018633540372671
User 45196 improves AUC. Keeping the model.
Training on augumented user 3673 2/50 current_auc = 0.7018633540372671
User 3673 AUC after training: 0.68944099378882
User 3673 does not improve AUC. Reverting changes.
Training on augumented user 74127 3/50 current_auc = 0.7018633540372671
User 74127 AUC after training: 0.7018633540372671
User 74127 does not improve AUC. Reverting changes.
Training on augumented user 134846 4/50 current_auc = 0.7018633540372671
User 134846 AUC after training: 0.7018633540372671
User 134846 does not improve AUC. Reverting changes.
Training on augumented user 5330 5/50 current_auc = 0.7018633540372671
User 5330 AUC after training: 0.6956521739130435
User 5330 does not improve AUC. Reverting changes.
Training on augumented user 60166 6/50 current_auc = 0.7018633540372671
User 60166 AUC after training: 0.6956521739130435
User 60166 does not improve AUC. Reverting changes.
Training on augumented user 15859 7/50 current_auc = 0.7018633540372671
User 15859 AUC after training: 0.6956521739130435
User 15859 does not improve AUC. Reverting changes.
Training on augumented user 41965 8/50 current_auc = 0.7018633540372671
User 41965 AUC after training: 0.6956521739130435
User 41965 does not improve AUC. Reverting changes.
Training on augumented user 30769 9/50 current_auc = 0.7018633540372671
User 30769 AUC after training: 0.7018633540372671
User 30769 does not improve AUC. Reverting changes.
Training on augumented user 31713 10/50 current_auc = 0.7018633540372671
User 31713 AUC after training: 0.7018633540372671
User 31713 does not improve AUC. Reverting changes.
Training on augumented user 110117 11/50 current_auc = 0.7018633540372671
User 110117 AUC after training: 0.7018633540372671
User 110117 does not improve AUC. Reverting changes.
Training on augumented user 32333 12/50 current_auc = 0.7018633540372671
User 32333 AUC after training: 0.7018633540372671
User 32333 does not improve AUC. Reverting changes.
Training on augumented user 70861 13/50 current_auc = 0.7018633540372671
User 70861 AUC after training: 0.7018633540372671
User 70861 does not improve AUC. Reverting changes.
Training on augumented user 34132 14/50 current_auc = 0.7018633540372671
User 34132 AUC after training: 0.6956521739130435
User 34132 does not improve AUC. Reverting changes.
Training on augumented user 17107 15/50 current_auc = 0.7018633540372671
User 17107 AUC after training: 0.7080745341614908
User 17107 improves AUC. Keeping the model.
Training on augumented user 13485 16/50 current_auc = 0.7080745341614908
User 13485 AUC after training: 0.7018633540372672
User 13485 does not improve AUC. Reverting changes.
Training on augumented user 99554 17/50 current_auc = 0.7080745341614908
User 99554 AUC after training: 0.7080745341614907
User 99554 does not improve AUC. Reverting changes.
Training on augumented user 94882 18/50 current_auc = 0.7080745341614908
User 94882 AUC after training: 0.7080745341614908
User 94882 does not improve AUC. Reverting changes.
Training on augumented user 92119 19/50 current_auc = 0.7080745341614908
User 92119 AUC after training: 0.7142857142857143
User 92119 improves AUC. Keeping the model.
Training on augumented user 54119 20/50 current_auc = 0.7142857142857143
User 54119 AUC after training: 0.7080745341614907
User 54119 does not improve AUC. Reverting changes.
Training on augumented user 11779 21/50 current_auc = 0.7142857142857143
User 11779 AUC after training: 0.7080745341614908
User 11779 does not improve AUC. Reverting changes.
Training on augumented user 94593 22/50 current_auc = 0.7142857142857143
User 94593 AUC after training: 0.7142857142857143
User 94593 does not improve AUC. Reverting changes.
Training on augumented user 15185 23/50 current_auc = 0.7142857142857143
User 15185 AUC after training: 0.7080745341614908
User 15185 does not improve AUC. Reverting changes.
Training on augumented user 107421 24/50 current_auc = 0.7142857142857143
User 107421 AUC after training: 0.7080745341614908
User 107421 does not improve AUC. Reverting changes.
Training on augumented user 84131 25/50 current_auc = 0.7142857142857143
User 84131 AUC after training: 0.7080745341614908
User 84131 does not improve AUC. Reverting changes.
Training on augumented user 1072 26/50 current_auc = 0.7142857142857143
User 1072 AUC after training: 0.7080745341614908
User 1072 does not improve AUC. Reverting changes.
Training on augumented user 120646 27/50 current_auc = 0.7142857142857143
User 120646 AUC after training: 0.7080745341614908
User 120646 does not improve AUC. Reverting changes.
Training on augumented user 77950 28/50 current_auc = 0.7142857142857143
User 77950 AUC after training: 0.7080745341614908
User 77950 does not improve AUC. Reverting changes.
Training on augumented user 46005 29/50 current_auc = 0.7142857142857143
User 46005 AUC after training: 0.7018633540372672
User 46005 does not improve AUC. Reverting changes.
Training on augumented user 116804 30/50 current_auc = 0.7142857142857143
User 116804 AUC after training: 0.7080745341614908
User 116804 does not improve AUC. Reverting changes.
Training on augumented user 17994 31/50 current_auc = 0.7142857142857143
User 17994 AUC after training: 0.7080745341614907
User 17994 does not improve AUC. Reverting changes.
Training on augumented user 91003 32/50 current_auc = 0.7142857142857143
User 91003 AUC after training: 0.7080745341614907
User 91003 does not improve AUC. Reverting changes.
Training on augumented user 96859 33/50 current_auc = 0.7142857142857143
User 96859 AUC after training: 0.7080745341614907
User 96859 does not improve AUC. Reverting changes.
Training on augumented user 58809 34/50 current_auc = 0.7142857142857143
User 58809 AUC after training: 0.7080745341614908
User 58809 does not improve AUC. Reverting changes.
Training on augumented user 61401 35/50 current_auc = 0.7142857142857143
User 61401 AUC after training: 0.7080745341614908
User 61401 does not improve AUC. Reverting changes.
Training on augumented user 94085 36/50 current_auc = 0.7142857142857143
User 94085 AUC after training: 0.7142857142857143
User 94085 does not improve AUC. Reverting changes.
Training on augumented user 74061 37/50 current_auc = 0.7142857142857143
User 74061 AUC after training: 0.7018633540372671
User 74061 does not improve AUC. Reverting changes.
Training on augumented user 72218 38/50 current_auc = 0.7142857142857143
User 72218 AUC after training: 0.7204968944099379
User 72218 improves AUC. Keeping the model.
Training on augumented user 55989 39/50 current_auc = 0.7204968944099379
User 55989 AUC after training: 0.7080745341614907
User 55989 does not improve AUC. Reverting changes.
Training on augumented user 37819 40/50 current_auc = 0.7204968944099379
User 37819 AUC after training: 0.7080745341614908
User 37819 does not improve AUC. Reverting changes.
Training on augumented user 119678 41/50 current_auc = 0.7204968944099379
User 119678 AUC after training: 0.7142857142857143
User 119678 does not improve AUC. Reverting changes.
Training on augumented user 53338 42/50 current_auc = 0.7204968944099379
User 53338 AUC after training: 0.7142857142857143
User 53338 does not improve AUC. Reverting changes.
Training on augumented user 106852 43/50 current_auc = 0.7204968944099379
User 106852 AUC after training: 0.7018633540372672
User 106852 does not improve AUC. Reverting changes.
Training on augumented user 95824 44/50 current_auc = 0.7204968944099379
User 95824 AUC after training: 0.7080745341614907
User 95824 does not improve AUC. Reverting changes.
Training on augumented user 46618 45/50 current_auc = 0.7204968944099379
User 46618 AUC after training: 0.7204968944099379
User 46618 does not improve AUC. Reverting changes.
Training on augumented user 8765 46/50 current_auc = 0.7204968944099379
User 8765 AUC after training: 0.7204968944099379
User 8765 does not improve AUC. Reverting changes.
Training on augumented user 41131 47/50 current_auc = 0.7204968944099379
User 41131 AUC after training: 0.7142857142857143
User 41131 does not improve AUC. Reverting changes.
Training on augumented user 112030 48/50 current_auc = 0.7204968944099379
User 112030 AUC after training: 0.7142857142857143
User 112030 does not improve AUC. Reverting changes.
Training on augumented user 30744 49/50 current_auc = 0.7204968944099379
User 30744 AUC after training: 0.7204968944099379
User 30744 does not improve AUC. Reverting changes.
[2024-12-02 17:52:08.458580] start test user 83484 27/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:52:09.111908] start test user 83484 27/568 recall augumented users by random, augumented_users = [75098, 117316, 123166, 88662, 116031, 72984, 75433, 15141, 18609, 105155, 80467, 94564, 41689, 10653, 26396, 83032, 93978, 27283, 70138, 116552, 127344, 12803, 120465, 120402, 116631, 119273, 36694, 67512, 1003, 71463, 28542, 82406, 122505, 80619, 8825, 46240, 17828, 138171, 18719, 35047, 17138, 116699, 109888, 128509, 115601, 127276, 118052, 12781, 61371, 67257]
[2024-12-02 17:52:09.132955] user = 83484 Cloud 27/568
[2024-12-02 17:52:09.143583] user = 83484 Local 27/568
[2024-12-02 17:52:09.196313] user = 83484 Local+ 27/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:52:10.924460] user = 83484 MPDA- 27/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7934782608695652
Training on augumented user 75098 0/50 current_auc = 0.7934782608695652
User 75098 AUC after training: 0.7926421404682275
User 75098 does not improve AUC. Reverting changes.
Training on augumented user 117316 1/50 current_auc = 0.7934782608695652
User 117316 AUC after training: 0.7926421404682275
User 117316 does not improve AUC. Reverting changes.
Training on augumented user 123166 2/50 current_auc = 0.7934782608695652
User 123166 AUC after training: 0.7934782608695652
User 123166 does not improve AUC. Reverting changes.
Training on augumented user 88662 3/50 current_auc = 0.7934782608695652
User 88662 AUC after training: 0.7926421404682275
User 88662 does not improve AUC. Reverting changes.
Training on augumented user 116031 4/50 current_auc = 0.7934782608695652
User 116031 AUC after training: 0.7926421404682275
User 116031 does not improve AUC. Reverting changes.
Training on augumented user 72984 5/50 current_auc = 0.7934782608695652
User 72984 AUC after training: 0.794314381270903
User 72984 improves AUC. Keeping the model.
Training on augumented user 75433 6/50 current_auc = 0.794314381270903
User 75433 AUC after training: 0.794314381270903
User 75433 does not improve AUC. Reverting changes.
Training on augumented user 15141 7/50 current_auc = 0.794314381270903
User 15141 AUC after training: 0.794314381270903
User 15141 does not improve AUC. Reverting changes.
Training on augumented user 18609 8/50 current_auc = 0.794314381270903
User 18609 AUC after training: 0.794314381270903
User 18609 does not improve AUC. Reverting changes.
Training on augumented user 105155 9/50 current_auc = 0.794314381270903
User 105155 AUC after training: 0.794314381270903
User 105155 does not improve AUC. Reverting changes.
Training on augumented user 80467 10/50 current_auc = 0.794314381270903
User 80467 AUC after training: 0.794314381270903
User 80467 does not improve AUC. Reverting changes.
Training on augumented user 94564 11/50 current_auc = 0.794314381270903
User 94564 AUC after training: 0.794314381270903
User 94564 does not improve AUC. Reverting changes.
Training on augumented user 41689 12/50 current_auc = 0.794314381270903
User 41689 AUC after training: 0.794314381270903
User 41689 does not improve AUC. Reverting changes.
Training on augumented user 10653 13/50 current_auc = 0.794314381270903
User 10653 AUC after training: 0.794314381270903
User 10653 does not improve AUC. Reverting changes.
Training on augumented user 26396 14/50 current_auc = 0.794314381270903
User 26396 AUC after training: 0.794314381270903
User 26396 does not improve AUC. Reverting changes.
Training on augumented user 83032 15/50 current_auc = 0.794314381270903
User 83032 AUC after training: 0.7926421404682275
User 83032 does not improve AUC. Reverting changes.
Training on augumented user 93978 16/50 current_auc = 0.794314381270903
User 93978 AUC after training: 0.794314381270903
User 93978 does not improve AUC. Reverting changes.
Training on augumented user 27283 17/50 current_auc = 0.794314381270903
User 27283 AUC after training: 0.7926421404682275
User 27283 does not improve AUC. Reverting changes.
Training on augumented user 70138 18/50 current_auc = 0.794314381270903
User 70138 AUC after training: 0.794314381270903
User 70138 does not improve AUC. Reverting changes.
Training on augumented user 116552 19/50 current_auc = 0.794314381270903
User 116552 AUC after training: 0.794314381270903
User 116552 does not improve AUC. Reverting changes.
Training on augumented user 127344 20/50 current_auc = 0.794314381270903
User 127344 AUC after training: 0.794314381270903
User 127344 does not improve AUC. Reverting changes.
Training on augumented user 12803 21/50 current_auc = 0.794314381270903
User 12803 AUC after training: 0.794314381270903
User 12803 does not improve AUC. Reverting changes.
Training on augumented user 120465 22/50 current_auc = 0.794314381270903
User 120465 AUC after training: 0.7951505016722408
User 120465 improves AUC. Keeping the model.
Training on augumented user 120402 23/50 current_auc = 0.7951505016722408
User 120402 AUC after training: 0.7909698996655519
User 120402 does not improve AUC. Reverting changes.
Training on augumented user 116631 24/50 current_auc = 0.7951505016722408
User 116631 AUC after training: 0.7951505016722408
User 116631 does not improve AUC. Reverting changes.
Training on augumented user 119273 25/50 current_auc = 0.7951505016722408
User 119273 AUC after training: 0.794314381270903
User 119273 does not improve AUC. Reverting changes.
Training on augumented user 36694 26/50 current_auc = 0.7951505016722408
User 36694 AUC after training: 0.7951505016722408
User 36694 does not improve AUC. Reverting changes.
Training on augumented user 67512 27/50 current_auc = 0.7951505016722408
User 67512 AUC after training: 0.794314381270903
User 67512 does not improve AUC. Reverting changes.
Training on augumented user 1003 28/50 current_auc = 0.7951505016722408
User 1003 AUC after training: 0.7934782608695652
User 1003 does not improve AUC. Reverting changes.
Training on augumented user 71463 29/50 current_auc = 0.7951505016722408
User 71463 AUC after training: 0.7951505016722408
User 71463 does not improve AUC. Reverting changes.
Training on augumented user 28542 30/50 current_auc = 0.7951505016722408
User 28542 AUC after training: 0.794314381270903
User 28542 does not improve AUC. Reverting changes.
Training on augumented user 82406 31/50 current_auc = 0.7951505016722408
User 82406 AUC after training: 0.794314381270903
User 82406 does not improve AUC. Reverting changes.
Training on augumented user 122505 32/50 current_auc = 0.7951505016722408
User 122505 AUC after training: 0.7951505016722408
User 122505 does not improve AUC. Reverting changes.
Training on augumented user 80619 33/50 current_auc = 0.7951505016722408
User 80619 AUC after training: 0.7951505016722408
User 80619 does not improve AUC. Reverting changes.
Training on augumented user 8825 34/50 current_auc = 0.7951505016722408
User 8825 AUC after training: 0.794314381270903
User 8825 does not improve AUC. Reverting changes.
Training on augumented user 46240 35/50 current_auc = 0.7951505016722408
User 46240 AUC after training: 0.794314381270903
User 46240 does not improve AUC. Reverting changes.
Training on augumented user 17828 36/50 current_auc = 0.7951505016722408
User 17828 AUC after training: 0.7951505016722408
User 17828 does not improve AUC. Reverting changes.
Training on augumented user 138171 37/50 current_auc = 0.7951505016722408
User 138171 AUC after training: 0.7959866220735786
User 138171 improves AUC. Keeping the model.
Training on augumented user 18719 38/50 current_auc = 0.7959866220735786
User 18719 AUC after training: 0.7959866220735786
User 18719 does not improve AUC. Reverting changes.
Training on augumented user 35047 39/50 current_auc = 0.7959866220735786
User 35047 AUC after training: 0.7959866220735786
User 35047 does not improve AUC. Reverting changes.
Training on augumented user 17138 40/50 current_auc = 0.7959866220735786
User 17138 AUC after training: 0.7959866220735786
User 17138 does not improve AUC. Reverting changes.
Training on augumented user 116699 41/50 current_auc = 0.7959866220735786
User 116699 AUC after training: 0.7951505016722408
User 116699 does not improve AUC. Reverting changes.
Training on augumented user 109888 42/50 current_auc = 0.7959866220735786
User 109888 AUC after training: 0.7926421404682275
User 109888 does not improve AUC. Reverting changes.
Training on augumented user 128509 43/50 current_auc = 0.7959866220735786
User 128509 AUC after training: 0.7959866220735786
User 128509 does not improve AUC. Reverting changes.
Training on augumented user 115601 44/50 current_auc = 0.7959866220735786
User 115601 AUC after training: 0.794314381270903
User 115601 does not improve AUC. Reverting changes.
Training on augumented user 127276 45/50 current_auc = 0.7959866220735786
User 127276 AUC after training: 0.7951505016722408
User 127276 does not improve AUC. Reverting changes.
Training on augumented user 118052 46/50 current_auc = 0.7959866220735786
User 118052 AUC after training: 0.7959866220735786
User 118052 does not improve AUC. Reverting changes.
Training on augumented user 12781 47/50 current_auc = 0.7959866220735786
User 12781 AUC after training: 0.794314381270903
User 12781 does not improve AUC. Reverting changes.
Training on augumented user 61371 48/50 current_auc = 0.7959866220735786
User 61371 AUC after training: 0.794314381270903
User 61371 does not improve AUC. Reverting changes.
Training on augumented user 67257 49/50 current_auc = 0.7959866220735786
User 67257 AUC after training: 0.794314381270903
User 67257 does not improve AUC. Reverting changes.
[2024-12-02 17:52:39.755071] start test user 83506 28/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:52:40.321912] start test user 83506 28/568 recall augumented users by random, augumented_users = [8401, 53544, 96412, 22816, 49204, 117520, 113062, 101246, 29970, 67331, 137959, 91393, 73472, 52560, 102117, 133597, 69989, 36494, 129005, 103318, 102428, 82020, 72523, 117684, 23366, 44151, 99862, 105908, 4460, 88128, 69645, 134404, 15723, 105241, 62821, 45226, 6481, 29142, 109531, 81045, 107453, 3184, 124468, 78239, 88645, 65822, 54717, 20857, 5781, 123313]
[2024-12-02 17:52:40.338575] user = 83506 Cloud 28/568
[2024-12-02 17:52:40.349243] user = 83506 Local 28/568
[2024-12-02 17:52:40.369698] user = 83506 Local+ 28/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:52:43.049726] user = 83506 MPDA- 28/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.675
Training on augumented user 8401 0/50 current_auc = 0.675
User 8401 AUC after training: 0.675
User 8401 does not improve AUC. Reverting changes.
Training on augumented user 53544 1/50 current_auc = 0.675
User 53544 AUC after training: 0.675
User 53544 does not improve AUC. Reverting changes.
Training on augumented user 96412 2/50 current_auc = 0.675
User 96412 AUC after training: 0.675
User 96412 does not improve AUC. Reverting changes.
Training on augumented user 22816 3/50 current_auc = 0.675
User 22816 AUC after training: 0.7
User 22816 improves AUC. Keeping the model.
Training on augumented user 49204 4/50 current_auc = 0.7
User 49204 AUC after training: 0.675
User 49204 does not improve AUC. Reverting changes.
Training on augumented user 117520 5/50 current_auc = 0.7
User 117520 AUC after training: 0.7
User 117520 does not improve AUC. Reverting changes.
Training on augumented user 113062 6/50 current_auc = 0.7
User 113062 AUC after training: 0.675
User 113062 does not improve AUC. Reverting changes.
Training on augumented user 101246 7/50 current_auc = 0.7
User 101246 AUC after training: 0.7
User 101246 does not improve AUC. Reverting changes.
Training on augumented user 29970 8/50 current_auc = 0.7
User 29970 AUC after training: 0.7
User 29970 does not improve AUC. Reverting changes.
Training on augumented user 67331 9/50 current_auc = 0.7
User 67331 AUC after training: 0.7
User 67331 does not improve AUC. Reverting changes.
Training on augumented user 137959 10/50 current_auc = 0.7
User 137959 AUC after training: 0.7
User 137959 does not improve AUC. Reverting changes.
Training on augumented user 91393 11/50 current_auc = 0.7
User 91393 AUC after training: 0.7
User 91393 does not improve AUC. Reverting changes.
Training on augumented user 73472 12/50 current_auc = 0.7
User 73472 AUC after training: 0.7
User 73472 does not improve AUC. Reverting changes.
Training on augumented user 52560 13/50 current_auc = 0.7
User 52560 AUC after training: 0.7
User 52560 does not improve AUC. Reverting changes.
Training on augumented user 102117 14/50 current_auc = 0.7
User 102117 AUC after training: 0.675
User 102117 does not improve AUC. Reverting changes.
Training on augumented user 133597 15/50 current_auc = 0.7
User 133597 AUC after training: 0.7
User 133597 does not improve AUC. Reverting changes.
Training on augumented user 69989 16/50 current_auc = 0.7
User 69989 AUC after training: 0.675
User 69989 does not improve AUC. Reverting changes.
Training on augumented user 36494 17/50 current_auc = 0.7
User 36494 AUC after training: 0.7
User 36494 does not improve AUC. Reverting changes.
Training on augumented user 129005 18/50 current_auc = 0.7
User 129005 AUC after training: 0.675
User 129005 does not improve AUC. Reverting changes.
Training on augumented user 103318 19/50 current_auc = 0.7
User 103318 AUC after training: 0.675
User 103318 does not improve AUC. Reverting changes.
Training on augumented user 102428 20/50 current_auc = 0.7
User 102428 AUC after training: 0.7
User 102428 does not improve AUC. Reverting changes.
Training on augumented user 82020 21/50 current_auc = 0.7
User 82020 AUC after training: 0.7
User 82020 does not improve AUC. Reverting changes.
Training on augumented user 72523 22/50 current_auc = 0.7
User 72523 AUC after training: 0.675
User 72523 does not improve AUC. Reverting changes.
Training on augumented user 117684 23/50 current_auc = 0.7
User 117684 AUC after training: 0.7
User 117684 does not improve AUC. Reverting changes.
Training on augumented user 23366 24/50 current_auc = 0.7
User 23366 AUC after training: 0.7
User 23366 does not improve AUC. Reverting changes.
Training on augumented user 44151 25/50 current_auc = 0.7
User 44151 AUC after training: 0.675
User 44151 does not improve AUC. Reverting changes.
Training on augumented user 99862 26/50 current_auc = 0.7
User 99862 AUC after training: 0.675
User 99862 does not improve AUC. Reverting changes.
Training on augumented user 105908 27/50 current_auc = 0.7
User 105908 AUC after training: 0.7
User 105908 does not improve AUC. Reverting changes.
Training on augumented user 4460 28/50 current_auc = 0.7
User 4460 AUC after training: 0.7
User 4460 does not improve AUC. Reverting changes.
Training on augumented user 88128 29/50 current_auc = 0.7
User 88128 AUC after training: 0.7
User 88128 does not improve AUC. Reverting changes.
Training on augumented user 69645 30/50 current_auc = 0.7
User 69645 AUC after training: 0.675
User 69645 does not improve AUC. Reverting changes.
Training on augumented user 134404 31/50 current_auc = 0.7
User 134404 AUC after training: 0.7
User 134404 does not improve AUC. Reverting changes.
Training on augumented user 15723 32/50 current_auc = 0.7
User 15723 AUC after training: 0.7
User 15723 does not improve AUC. Reverting changes.
Training on augumented user 105241 33/50 current_auc = 0.7
User 105241 AUC after training: 0.7
User 105241 does not improve AUC. Reverting changes.
Training on augumented user 62821 34/50 current_auc = 0.7
User 62821 AUC after training: 0.675
User 62821 does not improve AUC. Reverting changes.
Training on augumented user 45226 35/50 current_auc = 0.7
User 45226 AUC after training: 0.675
User 45226 does not improve AUC. Reverting changes.
Training on augumented user 6481 36/50 current_auc = 0.7
User 6481 AUC after training: 0.7
User 6481 does not improve AUC. Reverting changes.
Training on augumented user 29142 37/50 current_auc = 0.7
User 29142 AUC after training: 0.675
User 29142 does not improve AUC. Reverting changes.
Training on augumented user 109531 38/50 current_auc = 0.7
User 109531 AUC after training: 0.675
User 109531 does not improve AUC. Reverting changes.
Training on augumented user 81045 39/50 current_auc = 0.7
User 81045 AUC after training: 0.7
User 81045 does not improve AUC. Reverting changes.
Training on augumented user 107453 40/50 current_auc = 0.7
User 107453 AUC after training: 0.7
User 107453 does not improve AUC. Reverting changes.
Training on augumented user 3184 41/50 current_auc = 0.7
User 3184 AUC after training: 0.675
User 3184 does not improve AUC. Reverting changes.
Training on augumented user 124468 42/50 current_auc = 0.7
User 124468 AUC after training: 0.7
User 124468 does not improve AUC. Reverting changes.
Training on augumented user 78239 43/50 current_auc = 0.7
User 78239 AUC after training: 0.675
User 78239 does not improve AUC. Reverting changes.
Training on augumented user 88645 44/50 current_auc = 0.7
User 88645 AUC after training: 0.7
User 88645 does not improve AUC. Reverting changes.
Training on augumented user 65822 45/50 current_auc = 0.7
User 65822 AUC after training: 0.7
User 65822 does not improve AUC. Reverting changes.
Training on augumented user 54717 46/50 current_auc = 0.7
User 54717 AUC after training: 0.675
User 54717 does not improve AUC. Reverting changes.
Training on augumented user 20857 47/50 current_auc = 0.7
User 20857 AUC after training: 0.7
User 20857 does not improve AUC. Reverting changes.
Training on augumented user 5781 48/50 current_auc = 0.7
User 5781 AUC after training: 0.7
User 5781 does not improve AUC. Reverting changes.
Training on augumented user 123313 49/50 current_auc = 0.7
User 123313 AUC after training: 0.675
User 123313 does not improve AUC. Reverting changes.
[2024-12-02 17:53:14.021896] start test user 83518 29/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:53:14.641455] start test user 83518 29/568 recall augumented users by random, augumented_users = [50546, 112060, 113781, 10296, 3253, 29565, 91681, 33769, 55447, 12721, 35202, 84765, 48737, 118731, 69575, 17569, 112651, 99739, 93769, 69856, 15664, 58895, 133900, 119537, 49974, 96668, 12931, 16169, 82437, 80515, 121065, 42992, 52029, 63926, 53480, 133783, 5960, 108614, 39901, 113048, 34922, 51489, 112759, 96975, 33652, 85216, 107302, 78646, 82078, 127129]
[2024-12-02 17:53:14.663876] user = 83518 Cloud 29/568
[2024-12-02 17:53:14.686882] user = 83518 Local 29/568
[2024-12-02 17:53:14.812805] user = 83518 Local+ 29/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:53:16.940211] user = 83518 MPDA- 29/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4
Training on augumented user 50546 0/50 current_auc = 0.4
User 50546 AUC after training: 0.4
User 50546 does not improve AUC. Reverting changes.
Training on augumented user 112060 1/50 current_auc = 0.4
User 112060 AUC after training: 0.4
User 112060 does not improve AUC. Reverting changes.
Training on augumented user 113781 2/50 current_auc = 0.4
User 113781 AUC after training: 0.4
User 113781 does not improve AUC. Reverting changes.
Training on augumented user 10296 3/50 current_auc = 0.4
User 10296 AUC after training: 0.4
User 10296 does not improve AUC. Reverting changes.
Training on augumented user 3253 4/50 current_auc = 0.4
User 3253 AUC after training: 0.4
User 3253 does not improve AUC. Reverting changes.
Training on augumented user 29565 5/50 current_auc = 0.4
User 29565 AUC after training: 0.4
User 29565 does not improve AUC. Reverting changes.
Training on augumented user 91681 6/50 current_auc = 0.4
User 91681 AUC after training: 0.4
User 91681 does not improve AUC. Reverting changes.
Training on augumented user 33769 7/50 current_auc = 0.4
User 33769 AUC after training: 0.4
User 33769 does not improve AUC. Reverting changes.
Training on augumented user 55447 8/50 current_auc = 0.4
User 55447 AUC after training: 0.4
User 55447 does not improve AUC. Reverting changes.
Training on augumented user 12721 9/50 current_auc = 0.4
User 12721 AUC after training: 0.4
User 12721 does not improve AUC. Reverting changes.
Training on augumented user 35202 10/50 current_auc = 0.4
User 35202 AUC after training: 0.4
User 35202 does not improve AUC. Reverting changes.
Training on augumented user 84765 11/50 current_auc = 0.4
User 84765 AUC after training: 0.4
User 84765 does not improve AUC. Reverting changes.
Training on augumented user 48737 12/50 current_auc = 0.4
User 48737 AUC after training: 0.4
User 48737 does not improve AUC. Reverting changes.
Training on augumented user 118731 13/50 current_auc = 0.4
User 118731 AUC after training: 0.4
User 118731 does not improve AUC. Reverting changes.
Training on augumented user 69575 14/50 current_auc = 0.4
User 69575 AUC after training: 0.4
User 69575 does not improve AUC. Reverting changes.
Training on augumented user 17569 15/50 current_auc = 0.4
User 17569 AUC after training: 0.4
User 17569 does not improve AUC. Reverting changes.
Training on augumented user 112651 16/50 current_auc = 0.4
User 112651 AUC after training: 0.4
User 112651 does not improve AUC. Reverting changes.
Training on augumented user 99739 17/50 current_auc = 0.4
User 99739 AUC after training: 0.4
User 99739 does not improve AUC. Reverting changes.
Training on augumented user 93769 18/50 current_auc = 0.4
User 93769 AUC after training: 0.4
User 93769 does not improve AUC. Reverting changes.
Training on augumented user 69856 19/50 current_auc = 0.4
User 69856 AUC after training: 0.4
User 69856 does not improve AUC. Reverting changes.
Training on augumented user 15664 20/50 current_auc = 0.4
User 15664 AUC after training: 0.4
User 15664 does not improve AUC. Reverting changes.
Training on augumented user 58895 21/50 current_auc = 0.4
User 58895 AUC after training: 0.4
User 58895 does not improve AUC. Reverting changes.
Training on augumented user 133900 22/50 current_auc = 0.4
User 133900 AUC after training: 0.4
User 133900 does not improve AUC. Reverting changes.
Training on augumented user 119537 23/50 current_auc = 0.4
User 119537 AUC after training: 0.4
User 119537 does not improve AUC. Reverting changes.
Training on augumented user 49974 24/50 current_auc = 0.4
User 49974 AUC after training: 0.4
User 49974 does not improve AUC. Reverting changes.
Training on augumented user 96668 25/50 current_auc = 0.4
User 96668 AUC after training: 0.4
User 96668 does not improve AUC. Reverting changes.
Training on augumented user 12931 26/50 current_auc = 0.4
User 12931 AUC after training: 0.4
User 12931 does not improve AUC. Reverting changes.
Training on augumented user 16169 27/50 current_auc = 0.4
User 16169 AUC after training: 0.4
User 16169 does not improve AUC. Reverting changes.
Training on augumented user 82437 28/50 current_auc = 0.4
User 82437 AUC after training: 0.4
User 82437 does not improve AUC. Reverting changes.
Training on augumented user 80515 29/50 current_auc = 0.4
User 80515 AUC after training: 0.4
User 80515 does not improve AUC. Reverting changes.
Training on augumented user 121065 30/50 current_auc = 0.4
User 121065 AUC after training: 0.4
User 121065 does not improve AUC. Reverting changes.
Training on augumented user 42992 31/50 current_auc = 0.4
User 42992 AUC after training: 0.4
User 42992 does not improve AUC. Reverting changes.
Training on augumented user 52029 32/50 current_auc = 0.4
User 52029 AUC after training: 0.4
User 52029 does not improve AUC. Reverting changes.
Training on augumented user 63926 33/50 current_auc = 0.4
User 63926 AUC after training: 0.4
User 63926 does not improve AUC. Reverting changes.
Training on augumented user 53480 34/50 current_auc = 0.4
User 53480 AUC after training: 0.4
User 53480 does not improve AUC. Reverting changes.
Training on augumented user 133783 35/50 current_auc = 0.4
User 133783 AUC after training: 0.4
User 133783 does not improve AUC. Reverting changes.
Training on augumented user 5960 36/50 current_auc = 0.4
User 5960 AUC after training: 0.4
User 5960 does not improve AUC. Reverting changes.
Training on augumented user 108614 37/50 current_auc = 0.4
User 108614 AUC after training: 0.4
User 108614 does not improve AUC. Reverting changes.
Training on augumented user 39901 38/50 current_auc = 0.4
User 39901 AUC after training: 0.4
User 39901 does not improve AUC. Reverting changes.
Training on augumented user 113048 39/50 current_auc = 0.4
User 113048 AUC after training: 0.4
User 113048 does not improve AUC. Reverting changes.
Training on augumented user 34922 40/50 current_auc = 0.4
User 34922 AUC after training: 0.4
User 34922 does not improve AUC. Reverting changes.
Training on augumented user 51489 41/50 current_auc = 0.4
User 51489 AUC after training: 0.4
User 51489 does not improve AUC. Reverting changes.
Training on augumented user 112759 42/50 current_auc = 0.4
User 112759 AUC after training: 0.4
User 112759 does not improve AUC. Reverting changes.
Training on augumented user 96975 43/50 current_auc = 0.4
User 96975 AUC after training: 0.4
User 96975 does not improve AUC. Reverting changes.
Training on augumented user 33652 44/50 current_auc = 0.4
User 33652 AUC after training: 0.4
User 33652 does not improve AUC. Reverting changes.
Training on augumented user 85216 45/50 current_auc = 0.4
User 85216 AUC after training: 0.4
User 85216 does not improve AUC. Reverting changes.
Training on augumented user 107302 46/50 current_auc = 0.4
User 107302 AUC after training: 0.4
User 107302 does not improve AUC. Reverting changes.
Training on augumented user 78646 47/50 current_auc = 0.4
User 78646 AUC after training: 0.4
User 78646 does not improve AUC. Reverting changes.
Training on augumented user 82078 48/50 current_auc = 0.4
User 82078 AUC after training: 0.4
User 82078 does not improve AUC. Reverting changes.
Training on augumented user 127129 49/50 current_auc = 0.4
User 127129 AUC after training: 0.4
User 127129 does not improve AUC. Reverting changes.
[2024-12-02 17:53:43.192009] start test user 83531 30/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:53:43.783783] start test user 83531 30/568 recall augumented users by random, augumented_users = [61030, 15387, 75085, 65402, 134967, 101480, 90912, 132373, 2306, 42523, 76368, 79136, 119852, 79749, 105898, 7347, 25860, 12753, 105976, 87839, 60815, 105983, 74185, 78847, 90856, 15559, 55559, 93173, 77848, 116203, 7485, 104259, 41888, 1215, 27768, 42968, 122350, 93709, 111603, 48395, 15447, 119095, 23081, 92856, 124522, 4339, 31371, 69553, 62178, 108247]
[2024-12-02 17:53:43.798410] user = 83531 Cloud 30/568
[2024-12-02 17:53:43.836379] user = 83531 Local 30/568
[2024-12-02 17:53:43.925090] user = 83531 Local+ 30/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:53:46.416455] user = 83531 MPDA- 30/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6290322580645161
Training on augumented user 61030 0/50 current_auc = 0.6290322580645161
User 61030 AUC after training: 0.6344086021505376
User 61030 improves AUC. Keeping the model.
Training on augumented user 15387 1/50 current_auc = 0.6344086021505376
User 15387 AUC after training: 0.6290322580645161
User 15387 does not improve AUC. Reverting changes.
Training on augumented user 75085 2/50 current_auc = 0.6344086021505376
User 75085 AUC after training: 0.6344086021505376
User 75085 does not improve AUC. Reverting changes.
Training on augumented user 65402 3/50 current_auc = 0.6344086021505376
User 65402 AUC after training: 0.6290322580645161
User 65402 does not improve AUC. Reverting changes.
Training on augumented user 134967 4/50 current_auc = 0.6344086021505376
User 134967 AUC after training: 0.6344086021505376
User 134967 does not improve AUC. Reverting changes.
Training on augumented user 101480 5/50 current_auc = 0.6344086021505376
User 101480 AUC after training: 0.6344086021505376
User 101480 does not improve AUC. Reverting changes.
Training on augumented user 90912 6/50 current_auc = 0.6344086021505376
User 90912 AUC after training: 0.6344086021505376
User 90912 does not improve AUC. Reverting changes.
Training on augumented user 132373 7/50 current_auc = 0.6344086021505376
User 132373 AUC after training: 0.6344086021505376
User 132373 does not improve AUC. Reverting changes.
Training on augumented user 2306 8/50 current_auc = 0.6344086021505376
User 2306 AUC after training: 0.6344086021505376
User 2306 does not improve AUC. Reverting changes.
Training on augumented user 42523 9/50 current_auc = 0.6344086021505376
User 42523 AUC after training: 0.6344086021505376
User 42523 does not improve AUC. Reverting changes.
Training on augumented user 76368 10/50 current_auc = 0.6344086021505376
User 76368 AUC after training: 0.6344086021505376
User 76368 does not improve AUC. Reverting changes.
Training on augumented user 79136 11/50 current_auc = 0.6344086021505376
User 79136 AUC after training: 0.6344086021505376
User 79136 does not improve AUC. Reverting changes.
Training on augumented user 119852 12/50 current_auc = 0.6344086021505376
User 119852 AUC after training: 0.6344086021505376
User 119852 does not improve AUC. Reverting changes.
Training on augumented user 79749 13/50 current_auc = 0.6344086021505376
User 79749 AUC after training: 0.6290322580645161
User 79749 does not improve AUC. Reverting changes.
Training on augumented user 105898 14/50 current_auc = 0.6344086021505376
User 105898 AUC after training: 0.6290322580645161
User 105898 does not improve AUC. Reverting changes.
Training on augumented user 7347 15/50 current_auc = 0.6344086021505376
User 7347 AUC after training: 0.6344086021505376
User 7347 does not improve AUC. Reverting changes.
Training on augumented user 25860 16/50 current_auc = 0.6344086021505376
User 25860 AUC after training: 0.6344086021505376
User 25860 does not improve AUC. Reverting changes.
Training on augumented user 12753 17/50 current_auc = 0.6344086021505376
User 12753 AUC after training: 0.6290322580645161
User 12753 does not improve AUC. Reverting changes.
Training on augumented user 105976 18/50 current_auc = 0.6344086021505376
User 105976 AUC after training: 0.6344086021505376
User 105976 does not improve AUC. Reverting changes.
Training on augumented user 87839 19/50 current_auc = 0.6344086021505376
User 87839 AUC after training: 0.6290322580645161
User 87839 does not improve AUC. Reverting changes.
Training on augumented user 60815 20/50 current_auc = 0.6344086021505376
User 60815 AUC after training: 0.6344086021505376
User 60815 does not improve AUC. Reverting changes.
Training on augumented user 105983 21/50 current_auc = 0.6344086021505376
User 105983 AUC after training: 0.6344086021505376
User 105983 does not improve AUC. Reverting changes.
Training on augumented user 74185 22/50 current_auc = 0.6344086021505376
User 74185 AUC after training: 0.6344086021505376
User 74185 does not improve AUC. Reverting changes.
Training on augumented user 78847 23/50 current_auc = 0.6344086021505376
User 78847 AUC after training: 0.6344086021505376
User 78847 does not improve AUC. Reverting changes.
Training on augumented user 90856 24/50 current_auc = 0.6344086021505376
User 90856 AUC after training: 0.6290322580645161
User 90856 does not improve AUC. Reverting changes.
Training on augumented user 15559 25/50 current_auc = 0.6344086021505376
User 15559 AUC after training: 0.6344086021505376
User 15559 does not improve AUC. Reverting changes.
Training on augumented user 55559 26/50 current_auc = 0.6344086021505376
User 55559 AUC after training: 0.6290322580645161
User 55559 does not improve AUC. Reverting changes.
Training on augumented user 93173 27/50 current_auc = 0.6344086021505376
User 93173 AUC after training: 0.6344086021505376
User 93173 does not improve AUC. Reverting changes.
Training on augumented user 77848 28/50 current_auc = 0.6344086021505376
User 77848 AUC after training: 0.6344086021505376
User 77848 does not improve AUC. Reverting changes.
Training on augumented user 116203 29/50 current_auc = 0.6344086021505376
User 116203 AUC after training: 0.6344086021505376
User 116203 does not improve AUC. Reverting changes.
Training on augumented user 7485 30/50 current_auc = 0.6344086021505376
User 7485 AUC after training: 0.6344086021505376
User 7485 does not improve AUC. Reverting changes.
Training on augumented user 104259 31/50 current_auc = 0.6344086021505376
User 104259 AUC after training: 0.6344086021505376
User 104259 does not improve AUC. Reverting changes.
Training on augumented user 41888 32/50 current_auc = 0.6344086021505376
User 41888 AUC after training: 0.6344086021505376
User 41888 does not improve AUC. Reverting changes.
Training on augumented user 1215 33/50 current_auc = 0.6344086021505376
User 1215 AUC after training: 0.6344086021505376
User 1215 does not improve AUC. Reverting changes.
Training on augumented user 27768 34/50 current_auc = 0.6344086021505376
User 27768 AUC after training: 0.6344086021505376
User 27768 does not improve AUC. Reverting changes.
Training on augumented user 42968 35/50 current_auc = 0.6344086021505376
User 42968 AUC after training: 0.6344086021505376
User 42968 does not improve AUC. Reverting changes.
Training on augumented user 122350 36/50 current_auc = 0.6344086021505376
User 122350 AUC after training: 0.6344086021505376
User 122350 does not improve AUC. Reverting changes.
Training on augumented user 93709 37/50 current_auc = 0.6344086021505376
User 93709 AUC after training: 0.6290322580645161
User 93709 does not improve AUC. Reverting changes.
Training on augumented user 111603 38/50 current_auc = 0.6344086021505376
User 111603 AUC after training: 0.6344086021505376
User 111603 does not improve AUC. Reverting changes.
Training on augumented user 48395 39/50 current_auc = 0.6344086021505376
User 48395 AUC after training: 0.6344086021505376
User 48395 does not improve AUC. Reverting changes.
Training on augumented user 15447 40/50 current_auc = 0.6344086021505376
User 15447 AUC after training: 0.6290322580645161
User 15447 does not improve AUC. Reverting changes.
Training on augumented user 119095 41/50 current_auc = 0.6344086021505376
User 119095 AUC after training: 0.6344086021505376
User 119095 does not improve AUC. Reverting changes.
Training on augumented user 23081 42/50 current_auc = 0.6344086021505376
User 23081 AUC after training: 0.6344086021505376
User 23081 does not improve AUC. Reverting changes.
Training on augumented user 92856 43/50 current_auc = 0.6344086021505376
User 92856 AUC after training: 0.6344086021505376
User 92856 does not improve AUC. Reverting changes.
Training on augumented user 124522 44/50 current_auc = 0.6344086021505376
User 124522 AUC after training: 0.6344086021505376
User 124522 does not improve AUC. Reverting changes.
Training on augumented user 4339 45/50 current_auc = 0.6344086021505376
User 4339 AUC after training: 0.6344086021505376
User 4339 does not improve AUC. Reverting changes.
Training on augumented user 31371 46/50 current_auc = 0.6344086021505376
User 31371 AUC after training: 0.6344086021505376
User 31371 does not improve AUC. Reverting changes.
Training on augumented user 69553 47/50 current_auc = 0.6344086021505376
User 69553 AUC after training: 0.6344086021505376
User 69553 does not improve AUC. Reverting changes.
Training on augumented user 62178 48/50 current_auc = 0.6344086021505376
User 62178 AUC after training: 0.6344086021505376
User 62178 does not improve AUC. Reverting changes.
Training on augumented user 108247 49/50 current_auc = 0.6344086021505376
User 108247 AUC after training: 0.6290322580645161
User 108247 does not improve AUC. Reverting changes.
[2024-12-02 17:54:21.528123] start test user 83553 31/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:54:22.004739] start test user 83553 31/568 recall augumented users by random, augumented_users = [102043, 34098, 31939, 17888, 37453, 2868, 88153, 31210, 97505, 104633, 58307, 70532, 30059, 132408, 115725, 72725, 54815, 101906, 92930, 95074, 74026, 80789, 59644, 17041, 40614, 100815, 42984, 134148, 101260, 128916, 98583, 132319, 1636, 70085, 116245, 97839, 15168, 36603, 67557, 24904, 123893, 57751, 84841, 34631, 56488, 75811, 51973, 23222, 113341, 53398]
[2024-12-02 17:54:22.017576] user = 83553 Cloud 31/568
[2024-12-02 17:54:22.026409] user = 83553 Local 31/568
[2024-12-02 17:54:22.085108] user = 83553 Local+ 31/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:54:24.432964] user = 83553 MPDA- 31/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6458333333333333
Training on augumented user 102043 0/50 current_auc = 0.6458333333333333
User 102043 AUC after training: 0.6458333333333333
User 102043 does not improve AUC. Reverting changes.
Training on augumented user 34098 1/50 current_auc = 0.6458333333333333
User 34098 AUC after training: 0.6458333333333333
User 34098 does not improve AUC. Reverting changes.
Training on augumented user 31939 2/50 current_auc = 0.6458333333333333
User 31939 AUC after training: 0.6458333333333333
User 31939 does not improve AUC. Reverting changes.
Training on augumented user 17888 3/50 current_auc = 0.6458333333333333
User 17888 AUC after training: 0.6458333333333333
User 17888 does not improve AUC. Reverting changes.
Training on augumented user 37453 4/50 current_auc = 0.6458333333333333
User 37453 AUC after training: 0.6458333333333333
User 37453 does not improve AUC. Reverting changes.
Training on augumented user 2868 5/50 current_auc = 0.6458333333333333
User 2868 AUC after training: 0.6354166666666666
User 2868 does not improve AUC. Reverting changes.
Training on augumented user 88153 6/50 current_auc = 0.6458333333333333
User 88153 AUC after training: 0.6458333333333333
User 88153 does not improve AUC. Reverting changes.
Training on augumented user 31210 7/50 current_auc = 0.6458333333333333
User 31210 AUC after training: 0.6458333333333333
User 31210 does not improve AUC. Reverting changes.
Training on augumented user 97505 8/50 current_auc = 0.6458333333333333
User 97505 AUC after training: 0.6458333333333333
User 97505 does not improve AUC. Reverting changes.
Training on augumented user 104633 9/50 current_auc = 0.6458333333333333
User 104633 AUC after training: 0.6458333333333333
User 104633 does not improve AUC. Reverting changes.
Training on augumented user 58307 10/50 current_auc = 0.6458333333333333
User 58307 AUC after training: 0.6458333333333333
User 58307 does not improve AUC. Reverting changes.
Training on augumented user 70532 11/50 current_auc = 0.6458333333333333
User 70532 AUC after training: 0.6458333333333333
User 70532 does not improve AUC. Reverting changes.
Training on augumented user 30059 12/50 current_auc = 0.6458333333333333
User 30059 AUC after training: 0.6458333333333333
User 30059 does not improve AUC. Reverting changes.
Training on augumented user 132408 13/50 current_auc = 0.6458333333333333
User 132408 AUC after training: 0.6458333333333333
User 132408 does not improve AUC. Reverting changes.
Training on augumented user 115725 14/50 current_auc = 0.6458333333333333
User 115725 AUC after training: 0.6458333333333333
User 115725 does not improve AUC. Reverting changes.
Training on augumented user 72725 15/50 current_auc = 0.6458333333333333
User 72725 AUC after training: 0.6458333333333333
User 72725 does not improve AUC. Reverting changes.
Training on augumented user 54815 16/50 current_auc = 0.6458333333333333
User 54815 AUC after training: 0.6458333333333333
User 54815 does not improve AUC. Reverting changes.
Training on augumented user 101906 17/50 current_auc = 0.6458333333333333
User 101906 AUC after training: 0.6458333333333333
User 101906 does not improve AUC. Reverting changes.
Training on augumented user 92930 18/50 current_auc = 0.6458333333333333
User 92930 AUC after training: 0.6458333333333334
User 92930 improves AUC. Keeping the model.
Training on augumented user 95074 19/50 current_auc = 0.6458333333333334
User 95074 AUC after training: 0.6458333333333334
User 95074 does not improve AUC. Reverting changes.
Training on augumented user 74026 20/50 current_auc = 0.6458333333333334
User 74026 AUC after training: 0.6458333333333333
User 74026 does not improve AUC. Reverting changes.
Training on augumented user 80789 21/50 current_auc = 0.6458333333333334
User 80789 AUC after training: 0.6458333333333334
User 80789 does not improve AUC. Reverting changes.
Training on augumented user 59644 22/50 current_auc = 0.6458333333333334
User 59644 AUC after training: 0.6458333333333333
User 59644 does not improve AUC. Reverting changes.
Training on augumented user 17041 23/50 current_auc = 0.6458333333333334
User 17041 AUC after training: 0.6458333333333333
User 17041 does not improve AUC. Reverting changes.
Training on augumented user 40614 24/50 current_auc = 0.6458333333333334
User 40614 AUC after training: 0.6458333333333334
User 40614 does not improve AUC. Reverting changes.
Training on augumented user 100815 25/50 current_auc = 0.6458333333333334
User 100815 AUC after training: 0.6458333333333334
User 100815 does not improve AUC. Reverting changes.
Training on augumented user 42984 26/50 current_auc = 0.6458333333333334
User 42984 AUC after training: 0.6458333333333334
User 42984 does not improve AUC. Reverting changes.
Training on augumented user 134148 27/50 current_auc = 0.6458333333333334
User 134148 AUC after training: 0.6458333333333334
User 134148 does not improve AUC. Reverting changes.
Training on augumented user 101260 28/50 current_auc = 0.6458333333333334
User 101260 AUC after training: 0.6458333333333334
User 101260 does not improve AUC. Reverting changes.
Training on augumented user 128916 29/50 current_auc = 0.6458333333333334
User 128916 AUC after training: 0.6458333333333334
User 128916 does not improve AUC. Reverting changes.
Training on augumented user 98583 30/50 current_auc = 0.6458333333333334
User 98583 AUC after training: 0.6458333333333334
User 98583 does not improve AUC. Reverting changes.
Training on augumented user 132319 31/50 current_auc = 0.6458333333333334
User 132319 AUC after training: 0.6458333333333333
User 132319 does not improve AUC. Reverting changes.
Training on augumented user 1636 32/50 current_auc = 0.6458333333333334
User 1636 AUC after training: 0.6458333333333334
User 1636 does not improve AUC. Reverting changes.
Training on augumented user 70085 33/50 current_auc = 0.6458333333333334
User 70085 AUC after training: 0.6458333333333334
User 70085 does not improve AUC. Reverting changes.
Training on augumented user 116245 34/50 current_auc = 0.6458333333333334
User 116245 AUC after training: 0.6458333333333334
User 116245 does not improve AUC. Reverting changes.
Training on augumented user 97839 35/50 current_auc = 0.6458333333333334
User 97839 AUC after training: 0.6458333333333334
User 97839 does not improve AUC. Reverting changes.
Training on augumented user 15168 36/50 current_auc = 0.6458333333333334
User 15168 AUC after training: 0.6458333333333334
User 15168 does not improve AUC. Reverting changes.
Training on augumented user 36603 37/50 current_auc = 0.6458333333333334
User 36603 AUC after training: 0.6458333333333333
User 36603 does not improve AUC. Reverting changes.
Training on augumented user 67557 38/50 current_auc = 0.6458333333333334
User 67557 AUC after training: 0.6458333333333333
User 67557 does not improve AUC. Reverting changes.
Training on augumented user 24904 39/50 current_auc = 0.6458333333333334
User 24904 AUC after training: 0.6458333333333334
User 24904 does not improve AUC. Reverting changes.
Training on augumented user 123893 40/50 current_auc = 0.6458333333333334
User 123893 AUC after training: 0.6458333333333334
User 123893 does not improve AUC. Reverting changes.
Training on augumented user 57751 41/50 current_auc = 0.6458333333333334
User 57751 AUC after training: 0.6458333333333334
User 57751 does not improve AUC. Reverting changes.
Training on augumented user 84841 42/50 current_auc = 0.6458333333333334
User 84841 AUC after training: 0.6458333333333334
User 84841 does not improve AUC. Reverting changes.
Training on augumented user 34631 43/50 current_auc = 0.6458333333333334
User 34631 AUC after training: 0.6458333333333333
User 34631 does not improve AUC. Reverting changes.
Training on augumented user 56488 44/50 current_auc = 0.6458333333333334
User 56488 AUC after training: 0.6354166666666666
User 56488 does not improve AUC. Reverting changes.
Training on augumented user 75811 45/50 current_auc = 0.6458333333333334
User 75811 AUC after training: 0.6458333333333333
User 75811 does not improve AUC. Reverting changes.
Training on augumented user 51973 46/50 current_auc = 0.6458333333333334
User 51973 AUC after training: 0.6458333333333334
User 51973 does not improve AUC. Reverting changes.
Training on augumented user 23222 47/50 current_auc = 0.6458333333333334
User 23222 AUC after training: 0.6458333333333334
User 23222 does not improve AUC. Reverting changes.
Training on augumented user 113341 48/50 current_auc = 0.6458333333333334
User 113341 AUC after training: 0.6458333333333334
User 113341 does not improve AUC. Reverting changes.
Training on augumented user 53398 49/50 current_auc = 0.6458333333333334
User 53398 AUC after training: 0.6458333333333334
User 53398 does not improve AUC. Reverting changes.
[2024-12-02 17:54:56.030300] start test user 83554 32/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:54:56.716237] start test user 83554 32/568 recall augumented users by random, augumented_users = [25752, 35938, 107689, 90697, 100655, 84964, 86670, 25817, 99250, 74690, 54564, 121677, 116130, 113947, 126363, 77149, 13885, 99843, 12036, 40294, 39026, 105334, 41597, 132165, 73224, 9034, 11247, 102969, 129524, 36625, 47257, 64058, 6685, 79393, 7872, 98022, 109344, 63634, 5336, 102355, 14556, 23680, 23045, 33008, 10493, 51621, 37395, 79612, 116538, 17353]
[2024-12-02 17:54:56.731888] user = 83554 Cloud 32/568
[2024-12-02 17:54:56.813411] user = 83554 Local 32/568
[2024-12-02 17:54:56.930144] user = 83554 Local+ 32/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:54:58.923295] user = 83554 MPDA- 32/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7173182774809778
Training on augumented user 25752 0/50 current_auc = 0.7173182774809778
User 25752 AUC after training: 0.7175307592682532
User 25752 improves AUC. Keeping the model.
Training on augumented user 35938 1/50 current_auc = 0.7175307592682532
User 35938 AUC after training: 0.7176319410717176
User 35938 improves AUC. Keeping the model.
Training on augumented user 107689 2/50 current_auc = 0.7176319410717176
User 107689 AUC after training: 0.7170349684312773
User 107689 does not improve AUC. Reverting changes.
Training on augumented user 90697 3/50 current_auc = 0.7176319410717176
User 90697 AUC after training: 0.717571231989639
User 90697 does not improve AUC. Reverting changes.
Training on augumented user 100655 4/50 current_auc = 0.7176319410717176
User 100655 AUC after training: 0.7181479682693864
User 100655 improves AUC. Keeping the model.
Training on augumented user 84964 5/50 current_auc = 0.7181479682693864
User 84964 AUC after training: 0.7188511818034644
User 84964 improves AUC. Keeping the model.
Training on augumented user 86670 6/50 current_auc = 0.7188511818034644
User 86670 AUC after training: 0.7186538772867088
User 86670 does not improve AUC. Reverting changes.
Training on augumented user 25817 7/50 current_auc = 0.7188511818034644
User 25817 AUC after training: 0.7190737817710864
User 25817 improves AUC. Keeping the model.
Training on augumented user 99250 8/50 current_auc = 0.7190737817710864
User 99250 AUC after training: 0.71890683179537
User 99250 does not improve AUC. Reverting changes.
Training on augumented user 74690 9/50 current_auc = 0.7190737817710864
User 74690 AUC after training: 0.7187904727213859
User 74690 does not improve AUC. Reverting changes.
Training on augumented user 54564 10/50 current_auc = 0.7190737817710864
User 54564 AUC after training: 0.7191041363121256
User 54564 improves AUC. Keeping the model.
Training on augumented user 121677 11/50 current_auc = 0.7191041363121256
User 121677 AUC after training: 0.7185526954832442
User 121677 does not improve AUC. Reverting changes.
Training on augumented user 116130 12/50 current_auc = 0.7191041363121256
User 116130 AUC after training: 0.7190990772219524
User 116130 does not improve AUC. Reverting changes.
Training on augumented user 113947 13/50 current_auc = 0.7191041363121256
User 113947 AUC after training: 0.7191446090335114
User 113947 improves AUC. Keeping the model.
Training on augumented user 126363 14/50 current_auc = 0.7191446090335114
User 126363 AUC after training: 0.7191547272138579
User 126363 improves AUC. Keeping the model.
Training on augumented user 77149 15/50 current_auc = 0.7191547272138579
User 77149 AUC after training: 0.7188309454427716
User 77149 does not improve AUC. Reverting changes.
Training on augumented user 13885 16/50 current_auc = 0.7191547272138579
User 13885 AUC after training: 0.7190737817710863
User 13885 does not improve AUC. Reverting changes.
Training on augumented user 99843 17/50 current_auc = 0.7191547272138579
User 99843 AUC after training: 0.7184818682208192
User 99843 does not improve AUC. Reverting changes.
Training on augumented user 12036 18/50 current_auc = 0.7191547272138579
User 12036 AUC after training: 0.7195392180670228
User 12036 improves AUC. Keeping the model.
Training on augumented user 40294 19/50 current_auc = 0.7195392180670228
User 40294 AUC after training: 0.7190383681398737
User 40294 does not improve AUC. Reverting changes.
Training on augumented user 39026 20/50 current_auc = 0.7195392180670228
User 39026 AUC after training: 0.7190990772219524
User 39026 does not improve AUC. Reverting changes.
Training on augumented user 105334 21/50 current_auc = 0.7195392180670228
User 105334 AUC after training: 0.7195948680589281
User 105334 improves AUC. Keeping the model.
Training on augumented user 41597 22/50 current_auc = 0.7195948680589281
User 41597 AUC after training: 0.720176663428849
User 41597 improves AUC. Keeping the model.
Training on augumented user 132165 23/50 current_auc = 0.720176663428849
User 132165 AUC after training: 0.7199034725594948
User 132165 does not improve AUC. Reverting changes.
Training on augumented user 73224 24/50 current_auc = 0.720176663428849
User 73224 AUC after training: 0.7201766634288489
User 73224 does not improve AUC. Reverting changes.
Training on augumented user 9034 25/50 current_auc = 0.720176663428849
User 9034 AUC after training: 0.7206066860935729
User 9034 improves AUC. Keeping the model.
Training on augumented user 11247 26/50 current_auc = 0.7206066860935729
User 11247 AUC after training: 0.7202424316011009
User 11247 does not improve AUC. Reverting changes.
Training on augumented user 102969 27/50 current_auc = 0.7206066860935729
User 102969 AUC after training: 0.720495386109762
User 102969 does not improve AUC. Reverting changes.
Training on augumented user 129524 28/50 current_auc = 0.7206066860935729
User 129524 AUC after training: 0.7203840861259511
User 129524 does not improve AUC. Reverting changes.
Training on augumented user 36625 29/50 current_auc = 0.7206066860935729
User 36625 AUC after training: 0.7205510361016674
User 36625 does not improve AUC. Reverting changes.
Training on augumented user 47257 30/50 current_auc = 0.7206066860935729
User 47257 AUC after training: 0.7207078678970374
User 47257 improves AUC. Keeping the model.
Training on augumented user 64058 31/50 current_auc = 0.7207078678970374
User 64058 AUC after training: 0.7207382224380768
User 64058 improves AUC. Keeping the model.
Training on augumented user 6685 32/50 current_auc = 0.7207382224380768
User 6685 AUC after training: 0.7207786951594625
User 6685 improves AUC. Keeping the model.
Training on augumented user 79393 33/50 current_auc = 0.7207786951594625
User 79393 AUC after training: 0.7186336409260159
User 79393 does not improve AUC. Reverting changes.
Training on augumented user 7872 34/50 current_auc = 0.7207786951594625
User 7872 AUC after training: 0.7207989315201555
User 7872 improves AUC. Keeping the model.
Training on augumented user 98022 35/50 current_auc = 0.7207989315201555
User 98022 AUC after training: 0.7209203496843127
User 98022 improves AUC. Keeping the model.
Training on augumented user 109344 36/50 current_auc = 0.7209203496843127
User 109344 AUC after training: 0.7208292860611948
User 109344 does not improve AUC. Reverting changes.
Training on augumented user 63634 37/50 current_auc = 0.7209203496843127
User 63634 AUC after training: 0.7207078678970374
User 63634 does not improve AUC. Reverting changes.
Training on augumented user 5336 38/50 current_auc = 0.7209203496843127
User 5336 AUC after training: 0.7209001133236199
User 5336 does not improve AUC. Reverting changes.
Training on augumented user 102355 39/50 current_auc = 0.7209203496843127
User 102355 AUC after training: 0.7209709405860449
User 102355 improves AUC. Keeping the model.
Training on augumented user 14556 40/50 current_auc = 0.7209709405860449
User 14556 AUC after training: 0.7209001133236199
User 14556 does not improve AUC. Reverting changes.
Training on augumented user 23680 41/50 current_auc = 0.7209709405860449
User 23680 AUC after training: 0.7211328314715881
User 23680 improves AUC. Keeping the model.
Training on augumented user 23045 42/50 current_auc = 0.7211328314715881
User 23045 AUC after training: 0.7208646996924073
User 23045 does not improve AUC. Reverting changes.
Training on augumented user 33008 43/50 current_auc = 0.7211328314715881
User 33008 AUC after training: 0.7212795450866116
User 33008 improves AUC. Keeping the model.
Training on augumented user 10493 44/50 current_auc = 0.7212795450866116
User 10493 AUC after training: 0.7212947223571313
User 10493 improves AUC. Keeping the model.
Training on augumented user 51621 45/50 current_auc = 0.7212947223571313
User 51621 AUC after training: 0.7214262587016352
User 51621 improves AUC. Keeping the model.
Training on augumented user 37395 46/50 current_auc = 0.7214262587016352
User 37395 AUC after training: 0.7215021450542335
User 37395 improves AUC. Keeping the model.
Training on augumented user 79612 47/50 current_auc = 0.7215021450542335
User 79612 AUC after training: 0.7212846041767849
User 79612 does not improve AUC. Reverting changes.
Training on augumented user 116538 48/50 current_auc = 0.7215021450542335
User 116538 AUC after training: 0.7213048405374777
User 116538 does not improve AUC. Reverting changes.
Training on augumented user 17353 49/50 current_auc = 0.7215021450542335
User 17353 AUC after training: 0.721537558685446
User 17353 improves AUC. Keeping the model.
[2024-12-02 17:55:32.361393] start test user 83556 33/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:55:33.085843] start test user 83556 33/568 recall augumented users by random, augumented_users = [13947, 121772, 104761, 105927, 3318, 95781, 44885, 100159, 25142, 607, 25343, 88942, 103328, 125905, 46161, 68317, 88436, 2667, 99804, 120562, 126866, 2313, 55948, 62076, 9140, 72740, 105990, 123446, 74892, 129103, 97388, 55039, 6604, 79716, 15099, 108049, 114063, 60023, 46025, 2394, 71486, 71514, 62104, 35506, 120680, 137493, 96529, 29069, 121050, 130721]
[2024-12-02 17:55:33.150960] user = 83556 Cloud 33/568
[2024-12-02 17:55:33.235616] user = 83556 Local 33/568
[2024-12-02 17:55:33.437968] user = 83556 Local+ 33/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:55:36.661150] user = 83556 MPDA- 33/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.534635507499128
Training on augumented user 13947 0/50 current_auc = 0.534635507499128
User 13947 AUC after training: 0.5350959190791769
User 13947 improves AUC. Keeping the model.
Training on augumented user 121772 1/50 current_auc = 0.5350959190791769
User 121772 AUC after training: 0.5334077432856645
User 121772 does not improve AUC. Reverting changes.
Training on augumented user 104761 2/50 current_auc = 0.5350959190791769
User 104761 AUC after training: 0.5352075340076735
User 104761 improves AUC. Keeping the model.
Training on augumented user 105927 3/50 current_auc = 0.5352075340076735
User 105927 AUC after training: 0.5359190791768399
User 105927 improves AUC. Keeping the model.
Training on augumented user 3318 4/50 current_auc = 0.5359190791768399
User 3318 AUC after training: 0.533637949075689
User 3318 does not improve AUC. Reverting changes.
Training on augumented user 95781 5/50 current_auc = 0.5359190791768399
User 95781 AUC after training: 0.5369515172654342
User 95781 improves AUC. Keeping the model.
Training on augumented user 44885 6/50 current_auc = 0.5369515172654342
User 44885 AUC after training: 0.5366166724799442
User 44885 does not improve AUC. Reverting changes.
Training on augumented user 100159 7/50 current_auc = 0.5369515172654342
User 100159 AUC after training: 0.5368887338681549
User 100159 does not improve AUC. Reverting changes.
Training on augumented user 25142 8/50 current_auc = 0.5369515172654342
User 25142 AUC after training: 0.5374816881757936
User 25142 improves AUC. Keeping the model.
Training on augumented user 607 9/50 current_auc = 0.5374816881757936
User 607 AUC after training: 0.5379420997558424
User 607 improves AUC. Keeping the model.
Training on augumented user 25343 10/50 current_auc = 0.5379420997558424
User 25343 AUC after training: 0.5383885594698291
User 25343 improves AUC. Keeping the model.
Training on augumented user 88942 11/50 current_auc = 0.5383885594698291
User 88942 AUC after training: 0.5385280781304499
User 88942 improves AUC. Keeping the model.
Training on augumented user 103328 12/50 current_auc = 0.5385280781304499
User 103328 AUC after training: 0.5378444366934078
User 103328 does not improve AUC. Reverting changes.
Training on augumented user 125905 13/50 current_auc = 0.5385280781304499
User 125905 AUC after training: 0.538702476456226
User 125905 improves AUC. Keeping the model.
Training on augumented user 46161 14/50 current_auc = 0.538702476456226
User 46161 AUC after training: 0.5398256016742239
User 46161 improves AUC. Keeping the model.
Training on augumented user 68317 15/50 current_auc = 0.5398256016742239
User 68317 AUC after training: 0.5400627833972794
User 68317 improves AUC. Keeping the model.
Training on augumented user 88436 16/50 current_auc = 0.5400627833972794
User 88436 AUC after training: 0.5395884199511685
User 88436 does not improve AUC. Reverting changes.
Training on augumented user 2667 17/50 current_auc = 0.5400627833972794
User 2667 AUC after training: 0.5397697942099755
User 2667 does not improve AUC. Reverting changes.
Training on augumented user 99804 18/50 current_auc = 0.5400627833972794
User 99804 AUC after training: 0.5392954307638647
User 99804 does not improve AUC. Reverting changes.
Training on augumented user 120562 19/50 current_auc = 0.5400627833972794
User 120562 AUC after training: 0.5399372166027206
User 120562 does not improve AUC. Reverting changes.
Training on augumented user 126866 20/50 current_auc = 0.5400627833972794
User 126866 AUC after training: 0.5395744680851065
User 126866 does not improve AUC. Reverting changes.
Training on augumented user 2313 21/50 current_auc = 0.5400627833972794
User 2313 AUC after training: 0.5395465643529822
User 2313 does not improve AUC. Reverting changes.
Training on augumented user 55948 22/50 current_auc = 0.5400627833972794
User 55948 AUC after training: 0.5394070456923614
User 55948 does not improve AUC. Reverting changes.
Training on augumented user 62076 23/50 current_auc = 0.5400627833972794
User 62076 AUC after training: 0.5407882804325078
User 62076 improves AUC. Keeping the model.
Training on augumented user 9140 24/50 current_auc = 0.5407882804325078
User 9140 AUC after training: 0.540006975933031
User 9140 does not improve AUC. Reverting changes.
Training on augumented user 72740 25/50 current_auc = 0.5407882804325078
User 72740 AUC after training: 0.5408859434949425
User 72740 improves AUC. Keeping the model.
Training on augumented user 105990 26/50 current_auc = 0.5408859434949425
User 105990 AUC after training: 0.541297523543774
User 105990 improves AUC. Keeping the model.
Training on augumented user 123446 27/50 current_auc = 0.541297523543774
User 123446 AUC after training: 0.5408650156958493
User 123446 does not improve AUC. Reverting changes.
Training on augumented user 74892 28/50 current_auc = 0.541297523543774
User 74892 AUC after training: 0.5402511335891175
User 74892 does not improve AUC. Reverting changes.
Training on augumented user 129103 29/50 current_auc = 0.541297523543774
User 129103 AUC after training: 0.5410463899546564
User 129103 does not improve AUC. Reverting changes.
Training on augumented user 97388 30/50 current_auc = 0.541297523543774
User 97388 AUC after training: 0.5414509940704568
User 97388 improves AUC. Keeping the model.
Training on augumented user 55039 31/50 current_auc = 0.5414509940704568
User 55039 AUC after training: 0.5415277293337984
User 55039 improves AUC. Keeping the model.
Training on augumented user 6604 32/50 current_auc = 0.5415277293337984
User 6604 AUC after training: 0.5411719567492151
User 6604 does not improve AUC. Reverting changes.
Training on augumented user 79716 33/50 current_auc = 0.5415277293337984
User 79716 AUC after training: 0.5415835367980467
User 79716 improves AUC. Keeping the model.
Training on augumented user 15099 34/50 current_auc = 0.5415835367980467
User 15099 AUC after training: 0.5422950819672131
User 15099 improves AUC. Keeping the model.
Training on augumented user 108049 35/50 current_auc = 0.5422950819672131
User 108049 AUC after training: 0.5424764562260203
User 108049 improves AUC. Keeping the model.
Training on augumented user 114063 36/50 current_auc = 0.5424764562260203
User 114063 AUC after training: 0.5422950819672132
User 114063 does not improve AUC. Reverting changes.
Training on augumented user 60023 37/50 current_auc = 0.5424764562260203
User 60023 AUC after training: 0.5426857342169514
User 60023 improves AUC. Keeping the model.
Training on augumented user 46025 38/50 current_auc = 0.5426857342169514
User 46025 AUC after training: 0.5415974886641088
User 46025 does not improve AUC. Reverting changes.
Training on augumented user 2394 39/50 current_auc = 0.5426857342169514
User 2394 AUC after training: 0.5416742239274502
User 2394 does not improve AUC. Reverting changes.
Training on augumented user 71486 40/50 current_auc = 0.5426857342169514
User 71486 AUC after training: 0.54260899895361
User 71486 does not improve AUC. Reverting changes.
Training on augumented user 71514 41/50 current_auc = 0.5426857342169514
User 71514 AUC after training: 0.542622950819672
User 71514 does not improve AUC. Reverting changes.
Training on augumented user 62104 42/50 current_auc = 0.5426857342169514
User 62104 AUC after training: 0.5431182420648761
User 62104 improves AUC. Keeping the model.
Training on augumented user 35506 43/50 current_auc = 0.5431182420648761
User 35506 AUC after training: 0.5420369724450645
User 35506 does not improve AUC. Reverting changes.
Training on augumented user 120680 44/50 current_auc = 0.5431182420648761
User 120680 AUC after training: 0.5431670735960934
User 120680 improves AUC. Keeping the model.
Training on augumented user 137493 45/50 current_auc = 0.5431670735960934
User 137493 AUC after training: 0.541311475409836
User 137493 does not improve AUC. Reverting changes.
Training on augumented user 96529 46/50 current_auc = 0.5431670735960934
User 96529 AUC after training: 0.5419881409138472
User 96529 does not improve AUC. Reverting changes.
Training on augumented user 29069 47/50 current_auc = 0.5431670735960934
User 29069 AUC after training: 0.5423787931635856
User 29069 does not improve AUC. Reverting changes.
Training on augumented user 121050 48/50 current_auc = 0.5431670735960934
User 121050 AUC after training: 0.5432019532612486
User 121050 improves AUC. Keeping the model.
Training on augumented user 130721 49/50 current_auc = 0.5432019532612486
User 130721 AUC after training: 0.5415068015347053
User 130721 does not improve AUC. Reverting changes.
[2024-12-02 17:56:09.487825] start test user 83601 34/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:56:10.169756] start test user 83601 34/568 recall augumented users by random, augumented_users = [59222, 70523, 39288, 12130, 5836, 22662, 132436, 102343, 128199, 118091, 87608, 68754, 126945, 9516, 76261, 68652, 69677, 69094, 35010, 28518, 118106, 73864, 124145, 117078, 19410, 78947, 119074, 99459, 14304, 64016, 50270, 69759, 95739, 133338, 109750, 70940, 55460, 62183, 86385, 55273, 9513, 129041, 108270, 72237, 104506, 55410, 132401, 25354, 97540, 70461]
[2024-12-02 17:56:10.184513] user = 83601 Cloud 34/568
[2024-12-02 17:56:10.195845] user = 83601 Local 34/568
[2024-12-02 17:56:10.236347] user = 83601 Local+ 34/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:56:13.489143] user = 83601 MPDA- 34/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6388888888888888
Training on augumented user 59222 0/50 current_auc = 0.6388888888888888
User 59222 AUC after training: 0.6388888888888888
User 59222 does not improve AUC. Reverting changes.
Training on augumented user 70523 1/50 current_auc = 0.6388888888888888
User 70523 AUC after training: 0.6388888888888888
User 70523 does not improve AUC. Reverting changes.
Training on augumented user 39288 2/50 current_auc = 0.6388888888888888
User 39288 AUC after training: 0.6388888888888888
User 39288 does not improve AUC. Reverting changes.
Training on augumented user 12130 3/50 current_auc = 0.6388888888888888
User 12130 AUC after training: 0.6388888888888888
User 12130 does not improve AUC. Reverting changes.
Training on augumented user 5836 4/50 current_auc = 0.6388888888888888
User 5836 AUC after training: 0.6111111111111112
User 5836 does not improve AUC. Reverting changes.
Training on augumented user 22662 5/50 current_auc = 0.6388888888888888
User 22662 AUC after training: 0.6388888888888888
User 22662 does not improve AUC. Reverting changes.
Training on augumented user 132436 6/50 current_auc = 0.6388888888888888
User 132436 AUC after training: 0.6388888888888888
User 132436 does not improve AUC. Reverting changes.
Training on augumented user 102343 7/50 current_auc = 0.6388888888888888
User 102343 AUC after training: 0.6388888888888888
User 102343 does not improve AUC. Reverting changes.
Training on augumented user 128199 8/50 current_auc = 0.6388888888888888
User 128199 AUC after training: 0.6388888888888888
User 128199 does not improve AUC. Reverting changes.
Training on augumented user 118091 9/50 current_auc = 0.6388888888888888
User 118091 AUC after training: 0.6111111111111112
User 118091 does not improve AUC. Reverting changes.
Training on augumented user 87608 10/50 current_auc = 0.6388888888888888
User 87608 AUC after training: 0.6388888888888888
User 87608 does not improve AUC. Reverting changes.
Training on augumented user 68754 11/50 current_auc = 0.6388888888888888
User 68754 AUC after training: 0.6111111111111112
User 68754 does not improve AUC. Reverting changes.
Training on augumented user 126945 12/50 current_auc = 0.6388888888888888
User 126945 AUC after training: 0.6388888888888888
User 126945 does not improve AUC. Reverting changes.
Training on augumented user 9516 13/50 current_auc = 0.6388888888888888
User 9516 AUC after training: 0.6388888888888888
User 9516 does not improve AUC. Reverting changes.
Training on augumented user 76261 14/50 current_auc = 0.6388888888888888
User 76261 AUC after training: 0.6388888888888888
User 76261 does not improve AUC. Reverting changes.
Training on augumented user 68652 15/50 current_auc = 0.6388888888888888
User 68652 AUC after training: 0.6388888888888888
User 68652 does not improve AUC. Reverting changes.
Training on augumented user 69677 16/50 current_auc = 0.6388888888888888
User 69677 AUC after training: 0.6388888888888888
User 69677 does not improve AUC. Reverting changes.
Training on augumented user 69094 17/50 current_auc = 0.6388888888888888
User 69094 AUC after training: 0.6388888888888888
User 69094 does not improve AUC. Reverting changes.
Training on augumented user 35010 18/50 current_auc = 0.6388888888888888
User 35010 AUC after training: 0.6388888888888888
User 35010 does not improve AUC. Reverting changes.
Training on augumented user 28518 19/50 current_auc = 0.6388888888888888
User 28518 AUC after training: 0.6388888888888888
User 28518 does not improve AUC. Reverting changes.
Training on augumented user 118106 20/50 current_auc = 0.6388888888888888
User 118106 AUC after training: 0.5833333333333333
User 118106 does not improve AUC. Reverting changes.
Training on augumented user 73864 21/50 current_auc = 0.6388888888888888
User 73864 AUC after training: 0.6111111111111112
User 73864 does not improve AUC. Reverting changes.
Training on augumented user 124145 22/50 current_auc = 0.6388888888888888
User 124145 AUC after training: 0.6388888888888888
User 124145 does not improve AUC. Reverting changes.
Training on augumented user 117078 23/50 current_auc = 0.6388888888888888
User 117078 AUC after training: 0.6388888888888888
User 117078 does not improve AUC. Reverting changes.
Training on augumented user 19410 24/50 current_auc = 0.6388888888888888
User 19410 AUC after training: 0.6388888888888888
User 19410 does not improve AUC. Reverting changes.
Training on augumented user 78947 25/50 current_auc = 0.6388888888888888
User 78947 AUC after training: 0.6388888888888888
User 78947 does not improve AUC. Reverting changes.
Training on augumented user 119074 26/50 current_auc = 0.6388888888888888
User 119074 AUC after training: 0.6111111111111112
User 119074 does not improve AUC. Reverting changes.
Training on augumented user 99459 27/50 current_auc = 0.6388888888888888
User 99459 AUC after training: 0.6111111111111112
User 99459 does not improve AUC. Reverting changes.
Training on augumented user 14304 28/50 current_auc = 0.6388888888888888
User 14304 AUC after training: 0.6388888888888888
User 14304 does not improve AUC. Reverting changes.
Training on augumented user 64016 29/50 current_auc = 0.6388888888888888
User 64016 AUC after training: 0.6388888888888888
User 64016 does not improve AUC. Reverting changes.
Training on augumented user 50270 30/50 current_auc = 0.6388888888888888
User 50270 AUC after training: 0.6111111111111112
User 50270 does not improve AUC. Reverting changes.
Training on augumented user 69759 31/50 current_auc = 0.6388888888888888
User 69759 AUC after training: 0.6388888888888888
User 69759 does not improve AUC. Reverting changes.
Training on augumented user 95739 32/50 current_auc = 0.6388888888888888
User 95739 AUC after training: 0.6388888888888888
User 95739 does not improve AUC. Reverting changes.
Training on augumented user 133338 33/50 current_auc = 0.6388888888888888
User 133338 AUC after training: 0.6388888888888888
User 133338 does not improve AUC. Reverting changes.
Training on augumented user 109750 34/50 current_auc = 0.6388888888888888
User 109750 AUC after training: 0.6388888888888888
User 109750 does not improve AUC. Reverting changes.
Training on augumented user 70940 35/50 current_auc = 0.6388888888888888
User 70940 AUC after training: 0.6111111111111112
User 70940 does not improve AUC. Reverting changes.
Training on augumented user 55460 36/50 current_auc = 0.6388888888888888
User 55460 AUC after training: 0.6111111111111112
User 55460 does not improve AUC. Reverting changes.
Training on augumented user 62183 37/50 current_auc = 0.6388888888888888
User 62183 AUC after training: 0.6388888888888888
User 62183 does not improve AUC. Reverting changes.
Training on augumented user 86385 38/50 current_auc = 0.6388888888888888
User 86385 AUC after training: 0.6111111111111112
User 86385 does not improve AUC. Reverting changes.
Training on augumented user 55273 39/50 current_auc = 0.6388888888888888
User 55273 AUC after training: 0.6388888888888888
User 55273 does not improve AUC. Reverting changes.
Training on augumented user 9513 40/50 current_auc = 0.6388888888888888
User 9513 AUC after training: 0.6388888888888888
User 9513 does not improve AUC. Reverting changes.
Training on augumented user 129041 41/50 current_auc = 0.6388888888888888
User 129041 AUC after training: 0.6111111111111112
User 129041 does not improve AUC. Reverting changes.
Training on augumented user 108270 42/50 current_auc = 0.6388888888888888
User 108270 AUC after training: 0.6388888888888888
User 108270 does not improve AUC. Reverting changes.
Training on augumented user 72237 43/50 current_auc = 0.6388888888888888
User 72237 AUC after training: 0.6111111111111112
User 72237 does not improve AUC. Reverting changes.
Training on augumented user 104506 44/50 current_auc = 0.6388888888888888
User 104506 AUC after training: 0.6111111111111112
User 104506 does not improve AUC. Reverting changes.
Training on augumented user 55410 45/50 current_auc = 0.6388888888888888
User 55410 AUC after training: 0.5833333333333333
User 55410 does not improve AUC. Reverting changes.
Training on augumented user 132401 46/50 current_auc = 0.6388888888888888
User 132401 AUC after training: 0.6388888888888888
User 132401 does not improve AUC. Reverting changes.
Training on augumented user 25354 47/50 current_auc = 0.6388888888888888
User 25354 AUC after training: 0.6388888888888888
User 25354 does not improve AUC. Reverting changes.
Training on augumented user 97540 48/50 current_auc = 0.6388888888888888
User 97540 AUC after training: 0.6388888888888888
User 97540 does not improve AUC. Reverting changes.
Training on augumented user 70461 49/50 current_auc = 0.6388888888888888
User 70461 AUC after training: 0.6111111111111112
User 70461 does not improve AUC. Reverting changes.
[2024-12-02 17:56:42.815997] start test user 83639 35/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:56:43.239110] start test user 83639 35/568 recall augumented users by random, augumented_users = [114784, 131928, 5785, 121555, 45761, 110871, 86583, 30780, 99863, 32847, 103430, 125300, 44859, 83511, 48833, 22177, 38263, 89646, 136031, 73367, 45559, 44162, 40995, 26012, 75579, 2591, 107079, 106564, 129417, 81583, 79481, 38458, 106600, 70129, 57489, 104765, 68444, 8711, 12123, 73866, 43664, 84393, 33682, 86395, 79535, 80672, 9207, 92367, 95120, 46038]
[2024-12-02 17:56:43.254090] user = 83639 Cloud 35/568
[2024-12-02 17:56:43.272143] user = 83639 Local 35/568
[2024-12-02 17:56:43.315373] user = 83639 Local+ 35/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:56:45.052526] user = 83639 MPDA- 35/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6019736842105263
Training on augumented user 114784 0/50 current_auc = 0.6019736842105263
User 114784 AUC after training: 0.6019736842105263
User 114784 does not improve AUC. Reverting changes.
Training on augumented user 131928 1/50 current_auc = 0.6019736842105263
User 131928 AUC after training: 0.6019736842105263
User 131928 does not improve AUC. Reverting changes.
Training on augumented user 5785 2/50 current_auc = 0.6019736842105263
User 5785 AUC after training: 0.605263157894737
User 5785 improves AUC. Keeping the model.
Training on augumented user 121555 3/50 current_auc = 0.605263157894737
User 121555 AUC after training: 0.5986842105263158
User 121555 does not improve AUC. Reverting changes.
Training on augumented user 45761 4/50 current_auc = 0.605263157894737
User 45761 AUC after training: 0.605263157894737
User 45761 does not improve AUC. Reverting changes.
Training on augumented user 110871 5/50 current_auc = 0.605263157894737
User 110871 AUC after training: 0.6019736842105263
User 110871 does not improve AUC. Reverting changes.
Training on augumented user 86583 6/50 current_auc = 0.605263157894737
User 86583 AUC after training: 0.6019736842105263
User 86583 does not improve AUC. Reverting changes.
Training on augumented user 30780 7/50 current_auc = 0.605263157894737
User 30780 AUC after training: 0.6019736842105263
User 30780 does not improve AUC. Reverting changes.
Training on augumented user 99863 8/50 current_auc = 0.605263157894737
User 99863 AUC after training: 0.605263157894737
User 99863 does not improve AUC. Reverting changes.
Training on augumented user 32847 9/50 current_auc = 0.605263157894737
User 32847 AUC after training: 0.6019736842105263
User 32847 does not improve AUC. Reverting changes.
Training on augumented user 103430 10/50 current_auc = 0.605263157894737
User 103430 AUC after training: 0.6019736842105263
User 103430 does not improve AUC. Reverting changes.
Training on augumented user 125300 11/50 current_auc = 0.605263157894737
User 125300 AUC after training: 0.605263157894737
User 125300 does not improve AUC. Reverting changes.
Training on augumented user 44859 12/50 current_auc = 0.605263157894737
User 44859 AUC after training: 0.605263157894737
User 44859 does not improve AUC. Reverting changes.
Training on augumented user 83511 13/50 current_auc = 0.605263157894737
User 83511 AUC after training: 0.6019736842105263
User 83511 does not improve AUC. Reverting changes.
Training on augumented user 48833 14/50 current_auc = 0.605263157894737
User 48833 AUC after training: 0.6019736842105263
User 48833 does not improve AUC. Reverting changes.
Training on augumented user 22177 15/50 current_auc = 0.605263157894737
User 22177 AUC after training: 0.605263157894737
User 22177 does not improve AUC. Reverting changes.
Training on augumented user 38263 16/50 current_auc = 0.605263157894737
User 38263 AUC after training: 0.6019736842105263
User 38263 does not improve AUC. Reverting changes.
Training on augumented user 89646 17/50 current_auc = 0.605263157894737
User 89646 AUC after training: 0.605263157894737
User 89646 does not improve AUC. Reverting changes.
Training on augumented user 136031 18/50 current_auc = 0.605263157894737
User 136031 AUC after training: 0.5986842105263158
User 136031 does not improve AUC. Reverting changes.
Training on augumented user 73367 19/50 current_auc = 0.605263157894737
User 73367 AUC after training: 0.605263157894737
User 73367 does not improve AUC. Reverting changes.
Training on augumented user 45559 20/50 current_auc = 0.605263157894737
User 45559 AUC after training: 0.6019736842105263
User 45559 does not improve AUC. Reverting changes.
Training on augumented user 44162 21/50 current_auc = 0.605263157894737
User 44162 AUC after training: 0.6019736842105263
User 44162 does not improve AUC. Reverting changes.
Training on augumented user 40995 22/50 current_auc = 0.605263157894737
User 40995 AUC after training: 0.605263157894737
User 40995 does not improve AUC. Reverting changes.
Training on augumented user 26012 23/50 current_auc = 0.605263157894737
User 26012 AUC after training: 0.6019736842105263
User 26012 does not improve AUC. Reverting changes.
Training on augumented user 75579 24/50 current_auc = 0.605263157894737
User 75579 AUC after training: 0.6019736842105263
User 75579 does not improve AUC. Reverting changes.
Training on augumented user 2591 25/50 current_auc = 0.605263157894737
User 2591 AUC after training: 0.6019736842105263
User 2591 does not improve AUC. Reverting changes.
Training on augumented user 107079 26/50 current_auc = 0.605263157894737
User 107079 AUC after training: 0.6019736842105263
User 107079 does not improve AUC. Reverting changes.
Training on augumented user 106564 27/50 current_auc = 0.605263157894737
User 106564 AUC after training: 0.605263157894737
User 106564 does not improve AUC. Reverting changes.
Training on augumented user 129417 28/50 current_auc = 0.605263157894737
User 129417 AUC after training: 0.605263157894737
User 129417 does not improve AUC. Reverting changes.
Training on augumented user 81583 29/50 current_auc = 0.605263157894737
User 81583 AUC after training: 0.6085526315789473
User 81583 improves AUC. Keeping the model.
Training on augumented user 79481 30/50 current_auc = 0.6085526315789473
User 79481 AUC after training: 0.6085526315789473
User 79481 does not improve AUC. Reverting changes.
Training on augumented user 38458 31/50 current_auc = 0.6085526315789473
User 38458 AUC after training: 0.6085526315789473
User 38458 does not improve AUC. Reverting changes.
Training on augumented user 106600 32/50 current_auc = 0.6085526315789473
User 106600 AUC after training: 0.611842105263158
User 106600 improves AUC. Keeping the model.
Training on augumented user 70129 33/50 current_auc = 0.611842105263158
User 70129 AUC after training: 0.611842105263158
User 70129 does not improve AUC. Reverting changes.
Training on augumented user 57489 34/50 current_auc = 0.611842105263158
User 57489 AUC after training: 0.6052631578947368
User 57489 does not improve AUC. Reverting changes.
Training on augumented user 104765 35/50 current_auc = 0.611842105263158
User 104765 AUC after training: 0.6085526315789473
User 104765 does not improve AUC. Reverting changes.
Training on augumented user 68444 36/50 current_auc = 0.611842105263158
User 68444 AUC after training: 0.618421052631579
User 68444 improves AUC. Keeping the model.
Training on augumented user 8711 37/50 current_auc = 0.618421052631579
User 8711 AUC after training: 0.618421052631579
User 8711 does not improve AUC. Reverting changes.
Training on augumented user 12123 38/50 current_auc = 0.618421052631579
User 12123 AUC after training: 0.618421052631579
User 12123 does not improve AUC. Reverting changes.
Training on augumented user 73866 39/50 current_auc = 0.618421052631579
User 73866 AUC after training: 0.618421052631579
User 73866 does not improve AUC. Reverting changes.
Training on augumented user 43664 40/50 current_auc = 0.618421052631579
User 43664 AUC after training: 0.611842105263158
User 43664 does not improve AUC. Reverting changes.
Training on augumented user 84393 41/50 current_auc = 0.618421052631579
User 84393 AUC after training: 0.6085526315789473
User 84393 does not improve AUC. Reverting changes.
Training on augumented user 33682 42/50 current_auc = 0.618421052631579
User 33682 AUC after training: 0.611842105263158
User 33682 does not improve AUC. Reverting changes.
Training on augumented user 86395 43/50 current_auc = 0.618421052631579
User 86395 AUC after training: 0.6151315789473685
User 86395 does not improve AUC. Reverting changes.
Training on augumented user 79535 44/50 current_auc = 0.618421052631579
User 79535 AUC after training: 0.6151315789473684
User 79535 does not improve AUC. Reverting changes.
Training on augumented user 80672 45/50 current_auc = 0.618421052631579
User 80672 AUC after training: 0.6151315789473685
User 80672 does not improve AUC. Reverting changes.
Training on augumented user 9207 46/50 current_auc = 0.618421052631579
User 9207 AUC after training: 0.605263157894737
User 9207 does not improve AUC. Reverting changes.
Training on augumented user 92367 47/50 current_auc = 0.618421052631579
User 92367 AUC after training: 0.6151315789473685
User 92367 does not improve AUC. Reverting changes.
Training on augumented user 95120 48/50 current_auc = 0.618421052631579
User 95120 AUC after training: 0.611842105263158
User 95120 does not improve AUC. Reverting changes.
Training on augumented user 46038 49/50 current_auc = 0.618421052631579
User 46038 AUC after training: 0.6151315789473685
User 46038 does not improve AUC. Reverting changes.
[2024-12-02 17:57:12.064338] start test user 83717 36/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:57:12.961345] start test user 83717 36/568 recall augumented users by random, augumented_users = [71586, 80706, 137496, 39811, 105744, 43616, 80044, 91058, 60008, 115168, 92466, 96940, 29379, 39324, 19355, 13103, 44649, 120427, 22553, 94310, 101024, 15038, 11114, 79642, 70365, 942, 52193, 91002, 51139, 87212, 75622, 88437, 36183, 72570, 35773, 52184, 77239, 37021, 50339, 97362, 34863, 116952, 109059, 104050, 116374, 45043, 84571, 112343, 26833, 60426]
[2024-12-02 17:57:12.985976] user = 83717 Cloud 36/568
[2024-12-02 17:57:13.014521] user = 83717 Local 36/568
[2024-12-02 17:57:13.131143] user = 83717 Local+ 36/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:57:15.021253] user = 83717 MPDA- 36/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4615384615384615
Training on augumented user 71586 0/50 current_auc = 0.4615384615384615
User 71586 AUC after training: 0.4615384615384615
User 71586 does not improve AUC. Reverting changes.
Training on augumented user 80706 1/50 current_auc = 0.4615384615384615
User 80706 AUC after training: 0.4615384615384615
User 80706 does not improve AUC. Reverting changes.
Training on augumented user 137496 2/50 current_auc = 0.4615384615384615
User 137496 AUC after training: 0.4615384615384615
User 137496 does not improve AUC. Reverting changes.
Training on augumented user 39811 3/50 current_auc = 0.4615384615384615
User 39811 AUC after training: 0.4615384615384615
User 39811 does not improve AUC. Reverting changes.
Training on augumented user 105744 4/50 current_auc = 0.4615384615384615
User 105744 AUC after training: 0.4615384615384615
User 105744 does not improve AUC. Reverting changes.
Training on augumented user 43616 5/50 current_auc = 0.4615384615384615
User 43616 AUC after training: 0.4638009049773755
User 43616 improves AUC. Keeping the model.
Training on augumented user 80044 6/50 current_auc = 0.4638009049773755
User 80044 AUC after training: 0.4638009049773755
User 80044 does not improve AUC. Reverting changes.
Training on augumented user 91058 7/50 current_auc = 0.4638009049773755
User 91058 AUC after training: 0.4592760180995475
User 91058 does not improve AUC. Reverting changes.
Training on augumented user 60008 8/50 current_auc = 0.4638009049773755
User 60008 AUC after training: 0.46606334841628955
User 60008 improves AUC. Keeping the model.
Training on augumented user 115168 9/50 current_auc = 0.46606334841628955
User 115168 AUC after training: 0.4638009049773755
User 115168 does not improve AUC. Reverting changes.
Training on augumented user 92466 10/50 current_auc = 0.46606334841628955
User 92466 AUC after training: 0.4660633484162896
User 92466 improves AUC. Keeping the model.
Training on augumented user 96940 11/50 current_auc = 0.4660633484162896
User 96940 AUC after training: 0.4638009049773756
User 96940 does not improve AUC. Reverting changes.
Training on augumented user 29379 12/50 current_auc = 0.4660633484162896
User 29379 AUC after training: 0.4660633484162896
User 29379 does not improve AUC. Reverting changes.
Training on augumented user 39324 13/50 current_auc = 0.4660633484162896
User 39324 AUC after training: 0.4638009049773755
User 39324 does not improve AUC. Reverting changes.
Training on augumented user 19355 14/50 current_auc = 0.4660633484162896
User 19355 AUC after training: 0.4660633484162896
User 19355 does not improve AUC. Reverting changes.
Training on augumented user 13103 15/50 current_auc = 0.4660633484162896
User 13103 AUC after training: 0.4638009049773756
User 13103 does not improve AUC. Reverting changes.
Training on augumented user 44649 16/50 current_auc = 0.4660633484162896
User 44649 AUC after training: 0.4660633484162896
User 44649 does not improve AUC. Reverting changes.
Training on augumented user 120427 17/50 current_auc = 0.4660633484162896
User 120427 AUC after training: 0.4660633484162896
User 120427 does not improve AUC. Reverting changes.
Training on augumented user 22553 18/50 current_auc = 0.4660633484162896
User 22553 AUC after training: 0.4638009049773755
User 22553 does not improve AUC. Reverting changes.
Training on augumented user 94310 19/50 current_auc = 0.4660633484162896
User 94310 AUC after training: 0.4638009049773756
User 94310 does not improve AUC. Reverting changes.
Training on augumented user 101024 20/50 current_auc = 0.4660633484162896
User 101024 AUC after training: 0.4660633484162896
User 101024 does not improve AUC. Reverting changes.
Training on augumented user 15038 21/50 current_auc = 0.4660633484162896
User 15038 AUC after training: 0.4660633484162896
User 15038 does not improve AUC. Reverting changes.
Training on augumented user 11114 22/50 current_auc = 0.4660633484162896
User 11114 AUC after training: 0.4638009049773755
User 11114 does not improve AUC. Reverting changes.
Training on augumented user 79642 23/50 current_auc = 0.4660633484162896
User 79642 AUC after training: 0.4615384615384615
User 79642 does not improve AUC. Reverting changes.
Training on augumented user 70365 24/50 current_auc = 0.4660633484162896
User 70365 AUC after training: 0.4660633484162896
User 70365 does not improve AUC. Reverting changes.
Training on augumented user 942 25/50 current_auc = 0.4660633484162896
User 942 AUC after training: 0.4638009049773756
User 942 does not improve AUC. Reverting changes.
Training on augumented user 52193 26/50 current_auc = 0.4660633484162896
User 52193 AUC after training: 0.4615384615384615
User 52193 does not improve AUC. Reverting changes.
Training on augumented user 91002 27/50 current_auc = 0.4660633484162896
User 91002 AUC after training: 0.4660633484162896
User 91002 does not improve AUC. Reverting changes.
Training on augumented user 51139 28/50 current_auc = 0.4660633484162896
User 51139 AUC after training: 0.4638009049773756
User 51139 does not improve AUC. Reverting changes.
Training on augumented user 87212 29/50 current_auc = 0.4660633484162896
User 87212 AUC after training: 0.4660633484162896
User 87212 does not improve AUC. Reverting changes.
Training on augumented user 75622 30/50 current_auc = 0.4660633484162896
User 75622 AUC after training: 0.4638009049773755
User 75622 does not improve AUC. Reverting changes.
Training on augumented user 88437 31/50 current_auc = 0.4660633484162896
User 88437 AUC after training: 0.4615384615384615
User 88437 does not improve AUC. Reverting changes.
Training on augumented user 36183 32/50 current_auc = 0.4660633484162896
User 36183 AUC after training: 0.4638009049773756
User 36183 does not improve AUC. Reverting changes.
Training on augumented user 72570 33/50 current_auc = 0.4660633484162896
User 72570 AUC after training: 0.4660633484162896
User 72570 does not improve AUC. Reverting changes.
Training on augumented user 35773 34/50 current_auc = 0.4660633484162896
User 35773 AUC after training: 0.4660633484162896
User 35773 does not improve AUC. Reverting changes.
Training on augumented user 52184 35/50 current_auc = 0.4660633484162896
User 52184 AUC after training: 0.4615384615384615
User 52184 does not improve AUC. Reverting changes.
Training on augumented user 77239 36/50 current_auc = 0.4660633484162896
User 77239 AUC after training: 0.4638009049773755
User 77239 does not improve AUC. Reverting changes.
Training on augumented user 37021 37/50 current_auc = 0.4660633484162896
User 37021 AUC after training: 0.4638009049773755
User 37021 does not improve AUC. Reverting changes.
Training on augumented user 50339 38/50 current_auc = 0.4660633484162896
User 50339 AUC after training: 0.4660633484162896
User 50339 does not improve AUC. Reverting changes.
Training on augumented user 97362 39/50 current_auc = 0.4660633484162896
User 97362 AUC after training: 0.4660633484162896
User 97362 does not improve AUC. Reverting changes.
Training on augumented user 34863 40/50 current_auc = 0.4660633484162896
User 34863 AUC after training: 0.4615384615384615
User 34863 does not improve AUC. Reverting changes.
Training on augumented user 116952 41/50 current_auc = 0.4660633484162896
User 116952 AUC after training: 0.4615384615384615
User 116952 does not improve AUC. Reverting changes.
Training on augumented user 109059 42/50 current_auc = 0.4660633484162896
User 109059 AUC after training: 0.4660633484162896
User 109059 does not improve AUC. Reverting changes.
Training on augumented user 104050 43/50 current_auc = 0.4660633484162896
User 104050 AUC after training: 0.4638009049773755
User 104050 does not improve AUC. Reverting changes.
Training on augumented user 116374 44/50 current_auc = 0.4660633484162896
User 116374 AUC after training: 0.4660633484162896
User 116374 does not improve AUC. Reverting changes.
Training on augumented user 45043 45/50 current_auc = 0.4660633484162896
User 45043 AUC after training: 0.4660633484162896
User 45043 does not improve AUC. Reverting changes.
Training on augumented user 84571 46/50 current_auc = 0.4660633484162896
User 84571 AUC after training: 0.46153846153846156
User 84571 does not improve AUC. Reverting changes.
Training on augumented user 112343 47/50 current_auc = 0.4660633484162896
User 112343 AUC after training: 0.4660633484162896
User 112343 does not improve AUC. Reverting changes.
Training on augumented user 26833 48/50 current_auc = 0.4660633484162896
User 26833 AUC after training: 0.4683257918552036
User 26833 improves AUC. Keeping the model.
Training on augumented user 60426 49/50 current_auc = 0.4683257918552036
User 60426 AUC after training: 0.4660633484162896
User 60426 does not improve AUC. Reverting changes.
[2024-12-02 17:57:39.960257] start test user 83806 37/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:57:40.696420] start test user 83806 37/568 recall augumented users by random, augumented_users = [134249, 105961, 88197, 54036, 5638, 59956, 70219, 105908, 8559, 32589, 48286, 107151, 21789, 115633, 100635, 28721, 135255, 122776, 39690, 76139, 152, 77008, 45793, 68311, 109331, 90569, 74177, 464, 34127, 22782, 109181, 58845, 40666, 68907, 119055, 33070, 106649, 60318, 81539, 64114, 82143, 95727, 3328, 20, 6408, 89553, 37891, 107149, 75652, 97223]
[2024-12-02 17:57:40.723464] user = 83806 Cloud 37/568
[2024-12-02 17:57:40.761608] user = 83806 Local 37/568
[2024-12-02 17:57:40.858078] user = 83806 Local+ 37/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:57:43.395144] user = 83806 MPDA- 37/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 134249 0/50 current_auc = 1.0
User 134249 AUC after training: 1.0
User 134249 does not improve AUC. Reverting changes.
Training on augumented user 105961 1/50 current_auc = 1.0
User 105961 AUC after training: 1.0
User 105961 does not improve AUC. Reverting changes.
Training on augumented user 88197 2/50 current_auc = 1.0
User 88197 AUC after training: 1.0
User 88197 does not improve AUC. Reverting changes.
Training on augumented user 54036 3/50 current_auc = 1.0
User 54036 AUC after training: 1.0
User 54036 does not improve AUC. Reverting changes.
Training on augumented user 5638 4/50 current_auc = 1.0
User 5638 AUC after training: 1.0
User 5638 does not improve AUC. Reverting changes.
Training on augumented user 59956 5/50 current_auc = 1.0
User 59956 AUC after training: 1.0
User 59956 does not improve AUC. Reverting changes.
Training on augumented user 70219 6/50 current_auc = 1.0
User 70219 AUC after training: 1.0
User 70219 does not improve AUC. Reverting changes.
Training on augumented user 105908 7/50 current_auc = 1.0
User 105908 AUC after training: 1.0
User 105908 does not improve AUC. Reverting changes.
Training on augumented user 8559 8/50 current_auc = 1.0
User 8559 AUC after training: 1.0
User 8559 does not improve AUC. Reverting changes.
Training on augumented user 32589 9/50 current_auc = 1.0
User 32589 AUC after training: 1.0
User 32589 does not improve AUC. Reverting changes.
Training on augumented user 48286 10/50 current_auc = 1.0
User 48286 AUC after training: 1.0
User 48286 does not improve AUC. Reverting changes.
Training on augumented user 107151 11/50 current_auc = 1.0
User 107151 AUC after training: 1.0
User 107151 does not improve AUC. Reverting changes.
Training on augumented user 21789 12/50 current_auc = 1.0
User 21789 AUC after training: 1.0
User 21789 does not improve AUC. Reverting changes.
Training on augumented user 115633 13/50 current_auc = 1.0
User 115633 AUC after training: 1.0
User 115633 does not improve AUC. Reverting changes.
Training on augumented user 100635 14/50 current_auc = 1.0
User 100635 AUC after training: 1.0
User 100635 does not improve AUC. Reverting changes.
Training on augumented user 28721 15/50 current_auc = 1.0
User 28721 AUC after training: 1.0
User 28721 does not improve AUC. Reverting changes.
Training on augumented user 135255 16/50 current_auc = 1.0
User 135255 AUC after training: 1.0
User 135255 does not improve AUC. Reverting changes.
Training on augumented user 122776 17/50 current_auc = 1.0
User 122776 AUC after training: 1.0
User 122776 does not improve AUC. Reverting changes.
Training on augumented user 39690 18/50 current_auc = 1.0
User 39690 AUC after training: 1.0
User 39690 does not improve AUC. Reverting changes.
Training on augumented user 76139 19/50 current_auc = 1.0
User 76139 AUC after training: 1.0
User 76139 does not improve AUC. Reverting changes.
Training on augumented user 152 20/50 current_auc = 1.0
User 152 AUC after training: 1.0
User 152 does not improve AUC. Reverting changes.
Training on augumented user 77008 21/50 current_auc = 1.0
User 77008 AUC after training: 1.0
User 77008 does not improve AUC. Reverting changes.
Training on augumented user 45793 22/50 current_auc = 1.0
User 45793 AUC after training: 1.0
User 45793 does not improve AUC. Reverting changes.
Training on augumented user 68311 23/50 current_auc = 1.0
User 68311 AUC after training: 1.0
User 68311 does not improve AUC. Reverting changes.
Training on augumented user 109331 24/50 current_auc = 1.0
User 109331 AUC after training: 1.0
User 109331 does not improve AUC. Reverting changes.
Training on augumented user 90569 25/50 current_auc = 1.0
User 90569 AUC after training: 1.0
User 90569 does not improve AUC. Reverting changes.
Training on augumented user 74177 26/50 current_auc = 1.0
User 74177 AUC after training: 1.0
User 74177 does not improve AUC. Reverting changes.
Training on augumented user 464 27/50 current_auc = 1.0
User 464 AUC after training: 1.0
User 464 does not improve AUC. Reverting changes.
Training on augumented user 34127 28/50 current_auc = 1.0
User 34127 AUC after training: 1.0
User 34127 does not improve AUC. Reverting changes.
Training on augumented user 22782 29/50 current_auc = 1.0
User 22782 AUC after training: 1.0
User 22782 does not improve AUC. Reverting changes.
Training on augumented user 109181 30/50 current_auc = 1.0
User 109181 AUC after training: 1.0
User 109181 does not improve AUC. Reverting changes.
Training on augumented user 58845 31/50 current_auc = 1.0
User 58845 AUC after training: 1.0
User 58845 does not improve AUC. Reverting changes.
Training on augumented user 40666 32/50 current_auc = 1.0
User 40666 AUC after training: 1.0
User 40666 does not improve AUC. Reverting changes.
Training on augumented user 68907 33/50 current_auc = 1.0
User 68907 AUC after training: 1.0
User 68907 does not improve AUC. Reverting changes.
Training on augumented user 119055 34/50 current_auc = 1.0
User 119055 AUC after training: 1.0
User 119055 does not improve AUC. Reverting changes.
Training on augumented user 33070 35/50 current_auc = 1.0
User 33070 AUC after training: 1.0
User 33070 does not improve AUC. Reverting changes.
Training on augumented user 106649 36/50 current_auc = 1.0
User 106649 AUC after training: 1.0
User 106649 does not improve AUC. Reverting changes.
Training on augumented user 60318 37/50 current_auc = 1.0
User 60318 AUC after training: 1.0
User 60318 does not improve AUC. Reverting changes.
Training on augumented user 81539 38/50 current_auc = 1.0
User 81539 AUC after training: 1.0
User 81539 does not improve AUC. Reverting changes.
Training on augumented user 64114 39/50 current_auc = 1.0
User 64114 AUC after training: 1.0
User 64114 does not improve AUC. Reverting changes.
Training on augumented user 82143 40/50 current_auc = 1.0
User 82143 AUC after training: 1.0
User 82143 does not improve AUC. Reverting changes.
Training on augumented user 95727 41/50 current_auc = 1.0
User 95727 AUC after training: 1.0
User 95727 does not improve AUC. Reverting changes.
Training on augumented user 3328 42/50 current_auc = 1.0
User 3328 AUC after training: 1.0
User 3328 does not improve AUC. Reverting changes.
Training on augumented user 20 43/50 current_auc = 1.0
User 20 AUC after training: 1.0
User 20 does not improve AUC. Reverting changes.
Training on augumented user 6408 44/50 current_auc = 1.0
User 6408 AUC after training: 1.0
User 6408 does not improve AUC. Reverting changes.
Training on augumented user 89553 45/50 current_auc = 1.0
User 89553 AUC after training: 1.0
User 89553 does not improve AUC. Reverting changes.
Training on augumented user 37891 46/50 current_auc = 1.0
User 37891 AUC after training: 1.0
User 37891 does not improve AUC. Reverting changes.
Training on augumented user 107149 47/50 current_auc = 1.0
User 107149 AUC after training: 1.0
User 107149 does not improve AUC. Reverting changes.
Training on augumented user 75652 48/50 current_auc = 1.0
User 75652 AUC after training: 1.0
User 75652 does not improve AUC. Reverting changes.
Training on augumented user 97223 49/50 current_auc = 1.0
User 97223 AUC after training: 1.0
User 97223 does not improve AUC. Reverting changes.
[2024-12-02 17:58:16.239644] start test user 83812 38/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:58:16.913532] start test user 83812 38/568 recall augumented users by random, augumented_users = [134842, 60474, 101844, 48356, 105460, 117474, 44374, 23214, 108578, 92907, 49055, 91544, 122246, 70, 56579, 13905, 107309, 74740, 73163, 63727, 29046, 73828, 124662, 44510, 132847, 25099, 20394, 14452, 38724, 10524, 54103, 95990, 80866, 130889, 69270, 82928, 63566, 63891, 65105, 53267, 53717, 87823, 26615, 95696, 101620, 118787, 61049, 112392, 5888, 127318]
[2024-12-02 17:58:16.930398] user = 83812 Cloud 38/568
[2024-12-02 17:58:16.941443] user = 83812 Local 38/568
[2024-12-02 17:58:16.977400] user = 83812 Local+ 38/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:58:19.583974] user = 83812 MPDA- 38/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8307692307692307
Training on augumented user 134842 0/50 current_auc = 0.8307692307692307
User 134842 AUC after training: 0.8307692307692307
User 134842 does not improve AUC. Reverting changes.
Training on augumented user 60474 1/50 current_auc = 0.8307692307692307
User 60474 AUC after training: 0.8307692307692307
User 60474 does not improve AUC. Reverting changes.
Training on augumented user 101844 2/50 current_auc = 0.8307692307692307
User 101844 AUC after training: 0.8307692307692307
User 101844 does not improve AUC. Reverting changes.
Training on augumented user 48356 3/50 current_auc = 0.8307692307692307
User 48356 AUC after training: 0.8307692307692307
User 48356 does not improve AUC. Reverting changes.
Training on augumented user 105460 4/50 current_auc = 0.8307692307692307
User 105460 AUC after training: 0.8307692307692307
User 105460 does not improve AUC. Reverting changes.
Training on augumented user 117474 5/50 current_auc = 0.8307692307692307
User 117474 AUC after training: 0.8307692307692307
User 117474 does not improve AUC. Reverting changes.
Training on augumented user 44374 6/50 current_auc = 0.8307692307692307
User 44374 AUC after training: 0.8307692307692307
User 44374 does not improve AUC. Reverting changes.
Training on augumented user 23214 7/50 current_auc = 0.8307692307692307
User 23214 AUC after training: 0.8307692307692307
User 23214 does not improve AUC. Reverting changes.
Training on augumented user 108578 8/50 current_auc = 0.8307692307692307
User 108578 AUC after training: 0.8307692307692307
User 108578 does not improve AUC. Reverting changes.
Training on augumented user 92907 9/50 current_auc = 0.8307692307692307
User 92907 AUC after training: 0.8307692307692307
User 92907 does not improve AUC. Reverting changes.
Training on augumented user 49055 10/50 current_auc = 0.8307692307692307
User 49055 AUC after training: 0.8307692307692307
User 49055 does not improve AUC. Reverting changes.
Training on augumented user 91544 11/50 current_auc = 0.8307692307692307
User 91544 AUC after training: 0.8307692307692308
User 91544 improves AUC. Keeping the model.
Training on augumented user 122246 12/50 current_auc = 0.8307692307692308
User 122246 AUC after training: 0.8461538461538463
User 122246 improves AUC. Keeping the model.
Training on augumented user 70 13/50 current_auc = 0.8461538461538463
User 70 AUC after training: 0.8461538461538463
User 70 does not improve AUC. Reverting changes.
Training on augumented user 56579 14/50 current_auc = 0.8461538461538463
User 56579 AUC after training: 0.8461538461538463
User 56579 does not improve AUC. Reverting changes.
Training on augumented user 13905 15/50 current_auc = 0.8461538461538463
User 13905 AUC after training: 0.8461538461538463
User 13905 does not improve AUC. Reverting changes.
Training on augumented user 107309 16/50 current_auc = 0.8461538461538463
User 107309 AUC after training: 0.8461538461538463
User 107309 does not improve AUC. Reverting changes.
Training on augumented user 74740 17/50 current_auc = 0.8461538461538463
User 74740 AUC after training: 0.8461538461538463
User 74740 does not improve AUC. Reverting changes.
Training on augumented user 73163 18/50 current_auc = 0.8461538461538463
User 73163 AUC after training: 0.8461538461538463
User 73163 does not improve AUC. Reverting changes.
Training on augumented user 63727 19/50 current_auc = 0.8461538461538463
User 63727 AUC after training: 0.8461538461538463
User 63727 does not improve AUC. Reverting changes.
Training on augumented user 29046 20/50 current_auc = 0.8461538461538463
User 29046 AUC after training: 0.8461538461538463
User 29046 does not improve AUC. Reverting changes.
Training on augumented user 73828 21/50 current_auc = 0.8461538461538463
User 73828 AUC after training: 0.8461538461538463
User 73828 does not improve AUC. Reverting changes.
Training on augumented user 124662 22/50 current_auc = 0.8461538461538463
User 124662 AUC after training: 0.8461538461538463
User 124662 does not improve AUC. Reverting changes.
Training on augumented user 44510 23/50 current_auc = 0.8461538461538463
User 44510 AUC after training: 0.8307692307692308
User 44510 does not improve AUC. Reverting changes.
Training on augumented user 132847 24/50 current_auc = 0.8461538461538463
User 132847 AUC after training: 0.8461538461538463
User 132847 does not improve AUC. Reverting changes.
Training on augumented user 25099 25/50 current_auc = 0.8461538461538463
User 25099 AUC after training: 0.8461538461538463
User 25099 does not improve AUC. Reverting changes.
Training on augumented user 20394 26/50 current_auc = 0.8461538461538463
User 20394 AUC after training: 0.8461538461538463
User 20394 does not improve AUC. Reverting changes.
Training on augumented user 14452 27/50 current_auc = 0.8461538461538463
User 14452 AUC after training: 0.8461538461538463
User 14452 does not improve AUC. Reverting changes.
Training on augumented user 38724 28/50 current_auc = 0.8461538461538463
User 38724 AUC after training: 0.8461538461538463
User 38724 does not improve AUC. Reverting changes.
Training on augumented user 10524 29/50 current_auc = 0.8461538461538463
User 10524 AUC after training: 0.8461538461538463
User 10524 does not improve AUC. Reverting changes.
Training on augumented user 54103 30/50 current_auc = 0.8461538461538463
User 54103 AUC after training: 0.8461538461538463
User 54103 does not improve AUC. Reverting changes.
Training on augumented user 95990 31/50 current_auc = 0.8461538461538463
User 95990 AUC after training: 0.8461538461538463
User 95990 does not improve AUC. Reverting changes.
Training on augumented user 80866 32/50 current_auc = 0.8461538461538463
User 80866 AUC after training: 0.8461538461538463
User 80866 does not improve AUC. Reverting changes.
Training on augumented user 130889 33/50 current_auc = 0.8461538461538463
User 130889 AUC after training: 0.8461538461538463
User 130889 does not improve AUC. Reverting changes.
Training on augumented user 69270 34/50 current_auc = 0.8461538461538463
User 69270 AUC after training: 0.8461538461538463
User 69270 does not improve AUC. Reverting changes.
Training on augumented user 82928 35/50 current_auc = 0.8461538461538463
User 82928 AUC after training: 0.8461538461538463
User 82928 does not improve AUC. Reverting changes.
Training on augumented user 63566 36/50 current_auc = 0.8461538461538463
User 63566 AUC after training: 0.8461538461538463
User 63566 does not improve AUC. Reverting changes.
Training on augumented user 63891 37/50 current_auc = 0.8461538461538463
User 63891 AUC after training: 0.8307692307692308
User 63891 does not improve AUC. Reverting changes.
Training on augumented user 65105 38/50 current_auc = 0.8461538461538463
User 65105 AUC after training: 0.8461538461538463
User 65105 does not improve AUC. Reverting changes.
Training on augumented user 53267 39/50 current_auc = 0.8461538461538463
User 53267 AUC after training: 0.8461538461538463
User 53267 does not improve AUC. Reverting changes.
Training on augumented user 53717 40/50 current_auc = 0.8461538461538463
User 53717 AUC after training: 0.8461538461538463
User 53717 does not improve AUC. Reverting changes.
Training on augumented user 87823 41/50 current_auc = 0.8461538461538463
User 87823 AUC after training: 0.8461538461538463
User 87823 does not improve AUC. Reverting changes.
Training on augumented user 26615 42/50 current_auc = 0.8461538461538463
User 26615 AUC after training: 0.8461538461538461
User 26615 does not improve AUC. Reverting changes.
Training on augumented user 95696 43/50 current_auc = 0.8461538461538463
User 95696 AUC after training: 0.8307692307692307
User 95696 does not improve AUC. Reverting changes.
Training on augumented user 101620 44/50 current_auc = 0.8461538461538463
User 101620 AUC after training: 0.8461538461538463
User 101620 does not improve AUC. Reverting changes.
Training on augumented user 118787 45/50 current_auc = 0.8461538461538463
User 118787 AUC after training: 0.8461538461538463
User 118787 does not improve AUC. Reverting changes.
Training on augumented user 61049 46/50 current_auc = 0.8461538461538463
User 61049 AUC after training: 0.8461538461538463
User 61049 does not improve AUC. Reverting changes.
Training on augumented user 112392 47/50 current_auc = 0.8461538461538463
User 112392 AUC after training: 0.8307692307692308
User 112392 does not improve AUC. Reverting changes.
Training on augumented user 5888 48/50 current_auc = 0.8461538461538463
User 5888 AUC after training: 0.8461538461538463
User 5888 does not improve AUC. Reverting changes.
Training on augumented user 127318 49/50 current_auc = 0.8461538461538463
User 127318 AUC after training: 0.8461538461538463
User 127318 does not improve AUC. Reverting changes.
[2024-12-02 17:58:46.297667] start test user 83822 39/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:58:46.815062] start test user 83822 39/568 recall augumented users by random, augumented_users = [24279, 10895, 116012, 82539, 86577, 125903, 107453, 5036, 65525, 113795, 132747, 49819, 87263, 88811, 65919, 57601, 114995, 5675, 125461, 130727, 88972, 87169, 89123, 56302, 20668, 88176, 127459, 53914, 106279, 19958, 44924, 41825, 125485, 130996, 21848, 54534, 42782, 130770, 96238, 45856, 42328, 16454, 1625, 3976, 19463, 74634, 18718, 115640, 91127, 21745]
[2024-12-02 17:58:46.832029] user = 83822 Cloud 39/568
[2024-12-02 17:58:46.854118] user = 83822 Local 39/568
[2024-12-02 17:58:46.976011] user = 83822 Local+ 39/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:58:51.033143] user = 83822 MPDA- 39/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.49333333333333335
Training on augumented user 24279 0/50 current_auc = 0.49333333333333335
User 24279 AUC after training: 0.4866666666666666
User 24279 does not improve AUC. Reverting changes.
Training on augumented user 10895 1/50 current_auc = 0.49333333333333335
User 10895 AUC after training: 0.49333333333333335
User 10895 does not improve AUC. Reverting changes.
Training on augumented user 116012 2/50 current_auc = 0.49333333333333335
User 116012 AUC after training: 0.4766666666666666
User 116012 does not improve AUC. Reverting changes.
Training on augumented user 82539 3/50 current_auc = 0.49333333333333335
User 82539 AUC after training: 0.49333333333333335
User 82539 does not improve AUC. Reverting changes.
Training on augumented user 86577 4/50 current_auc = 0.49333333333333335
User 86577 AUC after training: 0.49
User 86577 does not improve AUC. Reverting changes.
Training on augumented user 125903 5/50 current_auc = 0.49333333333333335
User 125903 AUC after training: 0.48333333333333334
User 125903 does not improve AUC. Reverting changes.
Training on augumented user 107453 6/50 current_auc = 0.49333333333333335
User 107453 AUC after training: 0.48833333333333334
User 107453 does not improve AUC. Reverting changes.
Training on augumented user 5036 7/50 current_auc = 0.49333333333333335
User 5036 AUC after training: 0.4866666666666667
User 5036 does not improve AUC. Reverting changes.
Training on augumented user 65525 8/50 current_auc = 0.49333333333333335
User 65525 AUC after training: 0.49
User 65525 does not improve AUC. Reverting changes.
Training on augumented user 113795 9/50 current_auc = 0.49333333333333335
User 113795 AUC after training: 0.48833333333333334
User 113795 does not improve AUC. Reverting changes.
Training on augumented user 132747 10/50 current_auc = 0.49333333333333335
User 132747 AUC after training: 0.4966666666666667
User 132747 improves AUC. Keeping the model.
Training on augumented user 49819 11/50 current_auc = 0.4966666666666667
User 49819 AUC after training: 0.4966666666666667
User 49819 does not improve AUC. Reverting changes.
Training on augumented user 87263 12/50 current_auc = 0.4966666666666667
User 87263 AUC after training: 0.4966666666666667
User 87263 does not improve AUC. Reverting changes.
Training on augumented user 88811 13/50 current_auc = 0.4966666666666667
User 88811 AUC after training: 0.5
User 88811 improves AUC. Keeping the model.
Training on augumented user 65919 14/50 current_auc = 0.5
User 65919 AUC after training: 0.48833333333333334
User 65919 does not improve AUC. Reverting changes.
Training on augumented user 57601 15/50 current_auc = 0.5
User 57601 AUC after training: 0.4966666666666667
User 57601 does not improve AUC. Reverting changes.
Training on augumented user 114995 16/50 current_auc = 0.5
User 114995 AUC after training: 0.4933333333333334
User 114995 does not improve AUC. Reverting changes.
Training on augumented user 5675 17/50 current_auc = 0.5
User 5675 AUC after training: 0.4966666666666667
User 5675 does not improve AUC. Reverting changes.
Training on augumented user 125461 18/50 current_auc = 0.5
User 125461 AUC after training: 0.48833333333333334
User 125461 does not improve AUC. Reverting changes.
Training on augumented user 130727 19/50 current_auc = 0.5
User 130727 AUC after training: 0.4966666666666667
User 130727 does not improve AUC. Reverting changes.
Training on augumented user 88972 20/50 current_auc = 0.5
User 88972 AUC after training: 0.48333333333333334
User 88972 does not improve AUC. Reverting changes.
Training on augumented user 87169 21/50 current_auc = 0.5
User 87169 AUC after training: 0.48
User 87169 does not improve AUC. Reverting changes.
Training on augumented user 89123 22/50 current_auc = 0.5
User 89123 AUC after training: 0.4933333333333334
User 89123 does not improve AUC. Reverting changes.
Training on augumented user 56302 23/50 current_auc = 0.5
User 56302 AUC after training: 0.49666666666666665
User 56302 does not improve AUC. Reverting changes.
Training on augumented user 20668 24/50 current_auc = 0.5
User 20668 AUC after training: 0.4866666666666667
User 20668 does not improve AUC. Reverting changes.
Training on augumented user 88176 25/50 current_auc = 0.5
User 88176 AUC after training: 0.4933333333333334
User 88176 does not improve AUC. Reverting changes.
Training on augumented user 127459 26/50 current_auc = 0.5
User 127459 AUC after training: 0.4933333333333334
User 127459 does not improve AUC. Reverting changes.
Training on augumented user 53914 27/50 current_auc = 0.5
User 53914 AUC after training: 0.48333333333333334
User 53914 does not improve AUC. Reverting changes.
Training on augumented user 106279 28/50 current_auc = 0.5
User 106279 AUC after training: 0.48833333333333334
User 106279 does not improve AUC. Reverting changes.
Training on augumented user 19958 29/50 current_auc = 0.5
User 19958 AUC after training: 0.48
User 19958 does not improve AUC. Reverting changes.
Training on augumented user 44924 30/50 current_auc = 0.5
User 44924 AUC after training: 0.4766666666666666
User 44924 does not improve AUC. Reverting changes.
Training on augumented user 41825 31/50 current_auc = 0.5
User 41825 AUC after training: 0.49333333333333335
User 41825 does not improve AUC. Reverting changes.
Training on augumented user 125485 32/50 current_auc = 0.5
User 125485 AUC after training: 0.4966666666666667
User 125485 does not improve AUC. Reverting changes.
Training on augumented user 130996 33/50 current_auc = 0.5
User 130996 AUC after training: 0.4933333333333334
User 130996 does not improve AUC. Reverting changes.
Training on augumented user 21848 34/50 current_auc = 0.5
User 21848 AUC after training: 0.4966666666666667
User 21848 does not improve AUC. Reverting changes.
Training on augumented user 54534 35/50 current_auc = 0.5
User 54534 AUC after training: 0.4933333333333334
User 54534 does not improve AUC. Reverting changes.
Training on augumented user 42782 36/50 current_auc = 0.5
User 42782 AUC after training: 0.49333333333333335
User 42782 does not improve AUC. Reverting changes.
Training on augumented user 130770 37/50 current_auc = 0.5
User 130770 AUC after training: 0.49333333333333335
User 130770 does not improve AUC. Reverting changes.
Training on augumented user 96238 38/50 current_auc = 0.5
User 96238 AUC after training: 0.4966666666666667
User 96238 does not improve AUC. Reverting changes.
Training on augumented user 45856 39/50 current_auc = 0.5
User 45856 AUC after training: 0.4833333333333333
User 45856 does not improve AUC. Reverting changes.
Training on augumented user 42328 40/50 current_auc = 0.5
User 42328 AUC after training: 0.49666666666666665
User 42328 does not improve AUC. Reverting changes.
Training on augumented user 16454 41/50 current_auc = 0.5
User 16454 AUC after training: 0.5
User 16454 does not improve AUC. Reverting changes.
Training on augumented user 1625 42/50 current_auc = 0.5
User 1625 AUC after training: 0.4966666666666667
User 1625 does not improve AUC. Reverting changes.
Training on augumented user 3976 43/50 current_auc = 0.5
User 3976 AUC after training: 0.48333333333333334
User 3976 does not improve AUC. Reverting changes.
Training on augumented user 19463 44/50 current_auc = 0.5
User 19463 AUC after training: 0.4766666666666666
User 19463 does not improve AUC. Reverting changes.
Training on augumented user 74634 45/50 current_auc = 0.5
User 74634 AUC after training: 0.4966666666666667
User 74634 does not improve AUC. Reverting changes.
Training on augumented user 18718 46/50 current_auc = 0.5
User 18718 AUC after training: 0.4966666666666667
User 18718 does not improve AUC. Reverting changes.
Training on augumented user 115640 47/50 current_auc = 0.5
User 115640 AUC after training: 0.4866666666666667
User 115640 does not improve AUC. Reverting changes.
Training on augumented user 91127 48/50 current_auc = 0.5
User 91127 AUC after training: 0.4933333333333334
User 91127 does not improve AUC. Reverting changes.
Training on augumented user 21745 49/50 current_auc = 0.5
User 21745 AUC after training: 0.5
User 21745 does not improve AUC. Reverting changes.
[2024-12-02 17:59:18.595791] start test user 83823 40/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:59:19.063497] start test user 83823 40/568 recall augumented users by random, augumented_users = [120799, 60998, 68760, 127088, 124530, 80925, 32334, 2997, 41323, 68938, 87411, 88574, 66732, 36229, 66993, 79079, 116355, 79027, 128457, 88641, 25591, 51687, 101336, 120650, 52865, 96344, 102084, 10713, 53695, 17163, 75195, 24011, 120833, 96708, 37434, 133451, 40480, 43656, 132616, 16492, 54173, 134604, 16671, 68861, 4901, 9558, 49052, 94349, 135017, 108926]
[2024-12-02 17:59:19.081376] user = 83823 Cloud 40/568
[2024-12-02 17:59:19.103785] user = 83823 Local 40/568
[2024-12-02 17:59:19.280104] user = 83823 Local+ 40/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:59:22.179980] user = 83823 MPDA- 40/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.49674104746568515
Training on augumented user 120799 0/50 current_auc = 0.49674104746568515
User 120799 AUC after training: 0.49635764128517756
User 120799 does not improve AUC. Reverting changes.
Training on augumented user 60998 1/50 current_auc = 0.49674104746568515
User 60998 AUC after training: 0.49727781611839583
User 60998 improves AUC. Keeping the model.
Training on augumented user 68760 2/50 current_auc = 0.49727781611839583
User 68760 AUC after training: 0.49727781611839583
User 68760 does not improve AUC. Reverting changes.
Training on augumented user 127088 3/50 current_auc = 0.49727781611839583
User 127088 AUC after training: 0.4971244536461928
User 127088 does not improve AUC. Reverting changes.
Training on augumented user 124530 4/50 current_auc = 0.49727781611839583
User 124530 AUC after training: 0.49773790353500497
User 124530 improves AUC. Keeping the model.
Training on augumented user 80925 5/50 current_auc = 0.49773790353500497
User 80925 AUC after training: 0.4972011348822943
User 80925 does not improve AUC. Reverting changes.
Training on augumented user 32334 6/50 current_auc = 0.49773790353500497
User 32334 AUC after training: 0.4981213097155126
User 32334 improves AUC. Keeping the model.
Training on augumented user 2997 7/50 current_auc = 0.4981213097155126
User 2997 AUC after training: 0.4984280346599187
User 2997 improves AUC. Keeping the model.
Training on augumented user 41323 8/50 current_auc = 0.4984280346599187
User 41323 AUC after training: 0.49850471589602025
User 41323 improves AUC. Keeping the model.
Training on augumented user 68938 9/50 current_auc = 0.49850471589602025
User 68938 AUC after training: 0.4988881220765279
User 68938 improves AUC. Keeping the model.
Training on augumented user 87411 10/50 current_auc = 0.4988881220765279
User 87411 AUC after training: 0.49881144084042633
User 87411 does not improve AUC. Reverting changes.
Training on augumented user 88574 11/50 current_auc = 0.4988881220765279
User 88574 AUC after training: 0.4984280346599188
User 88574 does not improve AUC. Reverting changes.
Training on augumented user 66732 12/50 current_auc = 0.4988881220765279
User 66732 AUC after training: 0.49927152825703547
User 66732 improves AUC. Keeping the model.
Training on augumented user 36229 13/50 current_auc = 0.49927152825703547
User 36229 AUC after training: 0.49896480331262943
User 36229 does not improve AUC. Reverting changes.
Training on augumented user 66993 14/50 current_auc = 0.49927152825703547
User 66993 AUC after training: 0.4988114408404263
User 66993 does not improve AUC. Reverting changes.
Training on augumented user 79079 15/50 current_auc = 0.49927152825703547
User 79079 AUC after training: 0.4995015719653402
User 79079 improves AUC. Keeping the model.
Training on augumented user 116355 16/50 current_auc = 0.4995015719653402
User 116355 AUC after training: 0.49896480331262943
User 116355 does not improve AUC. Reverting changes.
Training on augumented user 79027 17/50 current_auc = 0.4995015719653402
User 79027 AUC after training: 0.49934820949313696
User 79027 does not improve AUC. Reverting changes.
Training on augumented user 128457 18/50 current_auc = 0.4995015719653402
User 128457 AUC after training: 0.5001150218541524
User 128457 improves AUC. Keeping the model.
Training on augumented user 88641 19/50 current_auc = 0.5001150218541524
User 88641 AUC after training: 0.4987347596043248
User 88641 does not improve AUC. Reverting changes.
Training on augumented user 25591 20/50 current_auc = 0.5001150218541524
User 25591 AUC after training: 0.4989648033126294
User 25591 does not improve AUC. Reverting changes.
Training on augumented user 51687 21/50 current_auc = 0.5001150218541524
User 51687 AUC after training: 0.5001150218541524
User 51687 does not improve AUC. Reverting changes.
Training on augumented user 101336 22/50 current_auc = 0.5001150218541524
User 101336 AUC after training: 0.5001150218541524
User 101336 does not improve AUC. Reverting changes.
Training on augumented user 120650 23/50 current_auc = 0.5001150218541524
User 120650 AUC after training: 0.49980829690974615
User 120650 does not improve AUC. Reverting changes.
Training on augumented user 52865 24/50 current_auc = 0.5001150218541524
User 52865 AUC after training: 0.49957825320144156
User 52865 does not improve AUC. Reverting changes.
Training on augumented user 96344 25/50 current_auc = 0.5001150218541524
User 96344 AUC after training: 0.5000383406180507
User 96344 does not improve AUC. Reverting changes.
Training on augumented user 102084 26/50 current_auc = 0.5001150218541524
User 102084 AUC after training: 0.4999616593819492
User 102084 does not improve AUC. Reverting changes.
Training on augumented user 10713 27/50 current_auc = 0.5001150218541524
User 10713 AUC after training: 0.5000383406180507
User 10713 does not improve AUC. Reverting changes.
Training on augumented user 53695 28/50 current_auc = 0.5001150218541524
User 53695 AUC after training: 0.5001150218541522
User 53695 does not improve AUC. Reverting changes.
Training on augumented user 17163 29/50 current_auc = 0.5001150218541524
User 17163 AUC after training: 0.49927152825703547
User 17163 does not improve AUC. Reverting changes.
Training on augumented user 75195 30/50 current_auc = 0.5001150218541524
User 75195 AUC after training: 0.49988497814584776
User 75195 does not improve AUC. Reverting changes.
Training on augumented user 24011 31/50 current_auc = 0.5001150218541524
User 24011 AUC after training: 0.49973161567364466
User 24011 does not improve AUC. Reverting changes.
Training on augumented user 120833 32/50 current_auc = 0.5001150218541524
User 120833 AUC after training: 0.4991948470209339
User 120833 does not improve AUC. Reverting changes.
Training on augumented user 96708 33/50 current_auc = 0.5001150218541524
User 96708 AUC after training: 0.49965493443754316
User 96708 does not improve AUC. Reverting changes.
Training on augumented user 37434 34/50 current_auc = 0.5001150218541524
User 37434 AUC after training: 0.5001150218541524
User 37434 does not improve AUC. Reverting changes.
Training on augumented user 133451 35/50 current_auc = 0.5001150218541524
User 133451 AUC after training: 0.49965493443754316
User 133451 does not improve AUC. Reverting changes.
Training on augumented user 40480 36/50 current_auc = 0.5001150218541524
User 40480 AUC after training: 0.5004217467985584
User 40480 improves AUC. Keeping the model.
Training on augumented user 43656 37/50 current_auc = 0.5004217467985584
User 43656 AUC after training: 0.49996165938194925
User 43656 does not improve AUC. Reverting changes.
Training on augumented user 132616 38/50 current_auc = 0.5004217467985584
User 132616 AUC after training: 0.49927152825703547
User 132616 does not improve AUC. Reverting changes.
Training on augumented user 16492 39/50 current_auc = 0.5004217467985584
User 16492 AUC after training: 0.5008818342151675
User 16492 improves AUC. Keeping the model.
Training on augumented user 54173 40/50 current_auc = 0.5008818342151675
User 54173 AUC after training: 0.500805152979066
User 54173 does not improve AUC. Reverting changes.
Training on augumented user 134604 41/50 current_auc = 0.5008818342151675
User 134604 AUC after training: 0.5013419216317767
User 134604 improves AUC. Keeping the model.
Training on augumented user 16671 42/50 current_auc = 0.5013419216317767
User 16671 AUC after training: 0.5001917030902538
User 16671 does not improve AUC. Reverting changes.
Training on augumented user 68861 43/50 current_auc = 0.5013419216317767
User 68861 AUC after training: 0.5008818342151675
User 68861 does not improve AUC. Reverting changes.
Training on augumented user 4901 44/50 current_auc = 0.5013419216317767
User 4901 AUC after training: 0.5001150218541522
User 4901 does not improve AUC. Reverting changes.
Training on augumented user 9558 45/50 current_auc = 0.5013419216317767
User 9558 AUC after training: 0.5008818342151675
User 9558 does not improve AUC. Reverting changes.
Training on augumented user 49052 46/50 current_auc = 0.5013419216317767
User 49052 AUC after training: 0.5000383406180507
User 49052 does not improve AUC. Reverting changes.
Training on augumented user 94349 47/50 current_auc = 0.5013419216317767
User 94349 AUC after training: 0.5008818342151675
User 94349 does not improve AUC. Reverting changes.
Training on augumented user 135017 48/50 current_auc = 0.5013419216317767
User 135017 AUC after training: 0.5004217467985583
User 135017 does not improve AUC. Reverting changes.
Training on augumented user 108926 49/50 current_auc = 0.5013419216317767
User 108926 AUC after training: 0.500651790506863
User 108926 does not improve AUC. Reverting changes.
[2024-12-02 17:59:54.270366] start test user 83824 41/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:59:55.113747] start test user 83824 41/568 recall augumented users by random, augumented_users = [125507, 23689, 121069, 120289, 4540, 97256, 114581, 61735, 39677, 48521, 14428, 49193, 4859, 46602, 92105, 15841, 76404, 116256, 69758, 2239, 10738, 41288, 70365, 634, 4140, 96586, 42801, 82313, 3631, 40314, 130762, 73317, 11282, 99472, 39235, 54297, 99143, 123622, 21814, 62389, 56696, 2861, 82733, 136798, 107223, 58135, 118989, 55126, 133571, 119068]
[2024-12-02 17:59:55.130169] user = 83824 Cloud 41/568
[2024-12-02 17:59:55.141627] user = 83824 Local 41/568
[2024-12-02 17:59:55.195902] user = 83824 Local+ 41/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:59:57.663976] user = 83824 MPDA- 41/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.25
Training on augumented user 125507 0/50 current_auc = 0.25
User 125507 AUC after training: 0.39999999999999997
User 125507 improves AUC. Keeping the model.
Training on augumented user 23689 1/50 current_auc = 0.39999999999999997
User 23689 AUC after training: 0.35000000000000003
User 23689 does not improve AUC. Reverting changes.
Training on augumented user 121069 2/50 current_auc = 0.39999999999999997
User 121069 AUC after training: 0.39999999999999997
User 121069 does not improve AUC. Reverting changes.
Training on augumented user 120289 3/50 current_auc = 0.39999999999999997
User 120289 AUC after training: 0.39999999999999997
User 120289 does not improve AUC. Reverting changes.
Training on augumented user 4540 4/50 current_auc = 0.39999999999999997
User 4540 AUC after training: 0.45
User 4540 improves AUC. Keeping the model.
Training on augumented user 97256 5/50 current_auc = 0.45
User 97256 AUC after training: 0.30000000000000004
User 97256 does not improve AUC. Reverting changes.
Training on augumented user 114581 6/50 current_auc = 0.45
User 114581 AUC after training: 0.45
User 114581 does not improve AUC. Reverting changes.
Training on augumented user 61735 7/50 current_auc = 0.45
User 61735 AUC after training: 0.39999999999999997
User 61735 does not improve AUC. Reverting changes.
Training on augumented user 39677 8/50 current_auc = 0.45
User 39677 AUC after training: 0.39999999999999997
User 39677 does not improve AUC. Reverting changes.
Training on augumented user 48521 9/50 current_auc = 0.45
User 48521 AUC after training: 0.39999999999999997
User 48521 does not improve AUC. Reverting changes.
Training on augumented user 14428 10/50 current_auc = 0.45
User 14428 AUC after training: 0.39999999999999997
User 14428 does not improve AUC. Reverting changes.
Training on augumented user 49193 11/50 current_auc = 0.45
User 49193 AUC after training: 0.39999999999999997
User 49193 does not improve AUC. Reverting changes.
Training on augumented user 4859 12/50 current_auc = 0.45
User 4859 AUC after training: 0.39999999999999997
User 4859 does not improve AUC. Reverting changes.
Training on augumented user 46602 13/50 current_auc = 0.45
User 46602 AUC after training: 0.39999999999999997
User 46602 does not improve AUC. Reverting changes.
Training on augumented user 92105 14/50 current_auc = 0.45
User 92105 AUC after training: 0.45
User 92105 does not improve AUC. Reverting changes.
Training on augumented user 15841 15/50 current_auc = 0.45
User 15841 AUC after training: 0.39999999999999997
User 15841 does not improve AUC. Reverting changes.
Training on augumented user 76404 16/50 current_auc = 0.45
User 76404 AUC after training: 0.39999999999999997
User 76404 does not improve AUC. Reverting changes.
Training on augumented user 116256 17/50 current_auc = 0.45
User 116256 AUC after training: 0.39999999999999997
User 116256 does not improve AUC. Reverting changes.
Training on augumented user 69758 18/50 current_auc = 0.45
User 69758 AUC after training: 0.45
User 69758 does not improve AUC. Reverting changes.
Training on augumented user 2239 19/50 current_auc = 0.45
User 2239 AUC after training: 0.39999999999999997
User 2239 does not improve AUC. Reverting changes.
Training on augumented user 10738 20/50 current_auc = 0.45
User 10738 AUC after training: 0.39999999999999997
User 10738 does not improve AUC. Reverting changes.
Training on augumented user 41288 21/50 current_auc = 0.45
User 41288 AUC after training: 0.39999999999999997
User 41288 does not improve AUC. Reverting changes.
Training on augumented user 70365 22/50 current_auc = 0.45
User 70365 AUC after training: 0.39999999999999997
User 70365 does not improve AUC. Reverting changes.
Training on augumented user 634 23/50 current_auc = 0.45
User 634 AUC after training: 0.45
User 634 does not improve AUC. Reverting changes.
Training on augumented user 4140 24/50 current_auc = 0.45
User 4140 AUC after training: 0.39999999999999997
User 4140 does not improve AUC. Reverting changes.
Training on augumented user 96586 25/50 current_auc = 0.45
User 96586 AUC after training: 0.39999999999999997
User 96586 does not improve AUC. Reverting changes.
Training on augumented user 42801 26/50 current_auc = 0.45
User 42801 AUC after training: 0.45
User 42801 does not improve AUC. Reverting changes.
Training on augumented user 82313 27/50 current_auc = 0.45
User 82313 AUC after training: 0.39999999999999997
User 82313 does not improve AUC. Reverting changes.
Training on augumented user 3631 28/50 current_auc = 0.45
User 3631 AUC after training: 0.39999999999999997
User 3631 does not improve AUC. Reverting changes.
Training on augumented user 40314 29/50 current_auc = 0.45
User 40314 AUC after training: 0.39999999999999997
User 40314 does not improve AUC. Reverting changes.
Training on augumented user 130762 30/50 current_auc = 0.45
User 130762 AUC after training: 0.39999999999999997
User 130762 does not improve AUC. Reverting changes.
Training on augumented user 73317 31/50 current_auc = 0.45
User 73317 AUC after training: 0.45
User 73317 does not improve AUC. Reverting changes.
Training on augumented user 11282 32/50 current_auc = 0.45
User 11282 AUC after training: 0.39999999999999997
User 11282 does not improve AUC. Reverting changes.
Training on augumented user 99472 33/50 current_auc = 0.45
User 99472 AUC after training: 0.30000000000000004
User 99472 does not improve AUC. Reverting changes.
Training on augumented user 39235 34/50 current_auc = 0.45
User 39235 AUC after training: 0.39999999999999997
User 39235 does not improve AUC. Reverting changes.
Training on augumented user 54297 35/50 current_auc = 0.45
User 54297 AUC after training: 0.45
User 54297 does not improve AUC. Reverting changes.
Training on augumented user 99143 36/50 current_auc = 0.45
User 99143 AUC after training: 0.45
User 99143 does not improve AUC. Reverting changes.
Training on augumented user 123622 37/50 current_auc = 0.45
User 123622 AUC after training: 0.45
User 123622 does not improve AUC. Reverting changes.
Training on augumented user 21814 38/50 current_auc = 0.45
User 21814 AUC after training: 0.39999999999999997
User 21814 does not improve AUC. Reverting changes.
Training on augumented user 62389 39/50 current_auc = 0.45
User 62389 AUC after training: 0.39999999999999997
User 62389 does not improve AUC. Reverting changes.
Training on augumented user 56696 40/50 current_auc = 0.45
User 56696 AUC after training: 0.45
User 56696 does not improve AUC. Reverting changes.
Training on augumented user 2861 41/50 current_auc = 0.45
User 2861 AUC after training: 0.39999999999999997
User 2861 does not improve AUC. Reverting changes.
Training on augumented user 82733 42/50 current_auc = 0.45
User 82733 AUC after training: 0.39999999999999997
User 82733 does not improve AUC. Reverting changes.
Training on augumented user 136798 43/50 current_auc = 0.45
User 136798 AUC after training: 0.39999999999999997
User 136798 does not improve AUC. Reverting changes.
Training on augumented user 107223 44/50 current_auc = 0.45
User 107223 AUC after training: 0.39999999999999997
User 107223 does not improve AUC. Reverting changes.
Training on augumented user 58135 45/50 current_auc = 0.45
User 58135 AUC after training: 0.45
User 58135 does not improve AUC. Reverting changes.
Training on augumented user 118989 46/50 current_auc = 0.45
User 118989 AUC after training: 0.45
User 118989 does not improve AUC. Reverting changes.
Training on augumented user 55126 47/50 current_auc = 0.45
User 55126 AUC after training: 0.39999999999999997
User 55126 does not improve AUC. Reverting changes.
Training on augumented user 133571 48/50 current_auc = 0.45
User 133571 AUC after training: 0.39999999999999997
User 133571 does not improve AUC. Reverting changes.
Training on augumented user 119068 49/50 current_auc = 0.45
User 119068 AUC after training: 0.45
User 119068 does not improve AUC. Reverting changes.
[2024-12-02 18:00:23.314587] start test user 83825 42/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:00:23.807913] start test user 83825 42/568 recall augumented users by random, augumented_users = [21673, 119632, 3146, 52751, 1458, 13717, 70659, 63995, 11721, 54196, 51300, 95700, 75669, 53402, 77719, 86174, 15841, 18545, 32396, 81228, 37487, 50048, 76318, 105342, 47157, 60170, 94763, 45900, 79158, 52776, 94370, 131070, 79895, 29818, 82592, 90187, 2050, 118710, 34127, 76010, 90070, 52735, 83441, 133772, 19430, 110462, 114005, 34346, 36089, 119058]
[2024-12-02 18:00:23.823634] user = 83825 Cloud 42/568
[2024-12-02 18:00:23.834594] user = 83825 Local 42/568
[2024-12-02 18:00:23.857094] user = 83825 Local+ 42/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:00:26.142005] user = 83825 MPDA- 42/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 21673 0/50 current_auc = 0.5
User 21673 AUC after training: 0.5
User 21673 does not improve AUC. Reverting changes.
Training on augumented user 119632 1/50 current_auc = 0.5
User 119632 AUC after training: 0.5
User 119632 does not improve AUC. Reverting changes.
Training on augumented user 3146 2/50 current_auc = 0.5
User 3146 AUC after training: 0.5
User 3146 does not improve AUC. Reverting changes.
Training on augumented user 52751 3/50 current_auc = 0.5
User 52751 AUC after training: 0.5
User 52751 does not improve AUC. Reverting changes.
Training on augumented user 1458 4/50 current_auc = 0.5
User 1458 AUC after training: 0.5
User 1458 does not improve AUC. Reverting changes.
Training on augumented user 13717 5/50 current_auc = 0.5
User 13717 AUC after training: 0.5
User 13717 does not improve AUC. Reverting changes.
Training on augumented user 70659 6/50 current_auc = 0.5
User 70659 AUC after training: 0.5
User 70659 does not improve AUC. Reverting changes.
Training on augumented user 63995 7/50 current_auc = 0.5
User 63995 AUC after training: 0.5
User 63995 does not improve AUC. Reverting changes.
Training on augumented user 11721 8/50 current_auc = 0.5
User 11721 AUC after training: 0.5
User 11721 does not improve AUC. Reverting changes.
Training on augumented user 54196 9/50 current_auc = 0.5
User 54196 AUC after training: 0.5
User 54196 does not improve AUC. Reverting changes.
Training on augumented user 51300 10/50 current_auc = 0.5
User 51300 AUC after training: 0.5
User 51300 does not improve AUC. Reverting changes.
Training on augumented user 95700 11/50 current_auc = 0.5
User 95700 AUC after training: 0.5
User 95700 does not improve AUC. Reverting changes.
Training on augumented user 75669 12/50 current_auc = 0.5
User 75669 AUC after training: 0.5
User 75669 does not improve AUC. Reverting changes.
Training on augumented user 53402 13/50 current_auc = 0.5
User 53402 AUC after training: 0.5
User 53402 does not improve AUC. Reverting changes.
Training on augumented user 77719 14/50 current_auc = 0.5
User 77719 AUC after training: 0.5
User 77719 does not improve AUC. Reverting changes.
Training on augumented user 86174 15/50 current_auc = 0.5
User 86174 AUC after training: 0.5
User 86174 does not improve AUC. Reverting changes.
Training on augumented user 15841 16/50 current_auc = 0.5
User 15841 AUC after training: 0.5
User 15841 does not improve AUC. Reverting changes.
Training on augumented user 18545 17/50 current_auc = 0.5
User 18545 AUC after training: 0.5
User 18545 does not improve AUC. Reverting changes.
Training on augumented user 32396 18/50 current_auc = 0.5
User 32396 AUC after training: 0.5
User 32396 does not improve AUC. Reverting changes.
Training on augumented user 81228 19/50 current_auc = 0.5
User 81228 AUC after training: 0.5
User 81228 does not improve AUC. Reverting changes.
Training on augumented user 37487 20/50 current_auc = 0.5
User 37487 AUC after training: 0.5
User 37487 does not improve AUC. Reverting changes.
Training on augumented user 50048 21/50 current_auc = 0.5
User 50048 AUC after training: 0.5
User 50048 does not improve AUC. Reverting changes.
Training on augumented user 76318 22/50 current_auc = 0.5
User 76318 AUC after training: 0.5
User 76318 does not improve AUC. Reverting changes.
Training on augumented user 105342 23/50 current_auc = 0.5
User 105342 AUC after training: 0.5
User 105342 does not improve AUC. Reverting changes.
Training on augumented user 47157 24/50 current_auc = 0.5
User 47157 AUC after training: 0.5
User 47157 does not improve AUC. Reverting changes.
Training on augumented user 60170 25/50 current_auc = 0.5
User 60170 AUC after training: 0.5
User 60170 does not improve AUC. Reverting changes.
Training on augumented user 94763 26/50 current_auc = 0.5
User 94763 AUC after training: 0.5
User 94763 does not improve AUC. Reverting changes.
Training on augumented user 45900 27/50 current_auc = 0.5
User 45900 AUC after training: 0.5
User 45900 does not improve AUC. Reverting changes.
Training on augumented user 79158 28/50 current_auc = 0.5
User 79158 AUC after training: 0.5
User 79158 does not improve AUC. Reverting changes.
Training on augumented user 52776 29/50 current_auc = 0.5
User 52776 AUC after training: 0.5
User 52776 does not improve AUC. Reverting changes.
Training on augumented user 94370 30/50 current_auc = 0.5
User 94370 AUC after training: 0.5
User 94370 does not improve AUC. Reverting changes.
Training on augumented user 131070 31/50 current_auc = 0.5
User 131070 AUC after training: 0.5
User 131070 does not improve AUC. Reverting changes.
Training on augumented user 79895 32/50 current_auc = 0.5
User 79895 AUC after training: 0.5
User 79895 does not improve AUC. Reverting changes.
Training on augumented user 29818 33/50 current_auc = 0.5
User 29818 AUC after training: 0.5
User 29818 does not improve AUC. Reverting changes.
Training on augumented user 82592 34/50 current_auc = 0.5
User 82592 AUC after training: 0.5
User 82592 does not improve AUC. Reverting changes.
Training on augumented user 90187 35/50 current_auc = 0.5
User 90187 AUC after training: 0.5
User 90187 does not improve AUC. Reverting changes.
Training on augumented user 2050 36/50 current_auc = 0.5
User 2050 AUC after training: 0.5
User 2050 does not improve AUC. Reverting changes.
Training on augumented user 118710 37/50 current_auc = 0.5
User 118710 AUC after training: 0.5
User 118710 does not improve AUC. Reverting changes.
Training on augumented user 34127 38/50 current_auc = 0.5
User 34127 AUC after training: 0.5
User 34127 does not improve AUC. Reverting changes.
Training on augumented user 76010 39/50 current_auc = 0.5
User 76010 AUC after training: 0.5
User 76010 does not improve AUC. Reverting changes.
Training on augumented user 90070 40/50 current_auc = 0.5
User 90070 AUC after training: 0.5
User 90070 does not improve AUC. Reverting changes.
Training on augumented user 52735 41/50 current_auc = 0.5
User 52735 AUC after training: 0.5
User 52735 does not improve AUC. Reverting changes.
Training on augumented user 83441 42/50 current_auc = 0.5
User 83441 AUC after training: 0.5
User 83441 does not improve AUC. Reverting changes.
Training on augumented user 133772 43/50 current_auc = 0.5
User 133772 AUC after training: 0.5
User 133772 does not improve AUC. Reverting changes.
Training on augumented user 19430 44/50 current_auc = 0.5
User 19430 AUC after training: 0.5
User 19430 does not improve AUC. Reverting changes.
Training on augumented user 110462 45/50 current_auc = 0.5
User 110462 AUC after training: 0.5
User 110462 does not improve AUC. Reverting changes.
Training on augumented user 114005 46/50 current_auc = 0.5
User 114005 AUC after training: 0.5
User 114005 does not improve AUC. Reverting changes.
Training on augumented user 34346 47/50 current_auc = 0.5
User 34346 AUC after training: 0.5
User 34346 does not improve AUC. Reverting changes.
Training on augumented user 36089 48/50 current_auc = 0.5
User 36089 AUC after training: 0.5
User 36089 does not improve AUC. Reverting changes.
Training on augumented user 119058 49/50 current_auc = 0.5
User 119058 AUC after training: 0.5
User 119058 does not improve AUC. Reverting changes.
[2024-12-02 18:00:54.822834] start test user 83826 43/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:00:55.336566] start test user 83826 43/568 recall augumented users by random, augumented_users = [103564, 134571, 41312, 137523, 24413, 98530, 72640, 21286, 46852, 30441, 63730, 105501, 62107, 2943, 69469, 66127, 9094, 3780, 110885, 33872, 71840, 11380, 55052, 92803, 87981, 3149, 42066, 49891, 101587, 130316, 58520, 135056, 111356, 121024, 895, 56655, 37344, 22759, 106915, 80468, 9852, 26433, 137370, 54927, 135007, 19333, 25318, 27897, 62242, 53018]
[2024-12-02 18:00:55.352727] user = 83826 Cloud 43/568
[2024-12-02 18:00:55.377111] user = 83826 Local 43/568
[2024-12-02 18:00:55.428989] user = 83826 Local+ 43/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:00:58.073317] user = 83826 MPDA- 43/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6669990029910269
Training on augumented user 103564 0/50 current_auc = 0.6669990029910269
User 103564 AUC after training: 0.6694915254237288
User 103564 improves AUC. Keeping the model.
Training on augumented user 134571 1/50 current_auc = 0.6694915254237288
User 134571 AUC after training: 0.6689930209371884
User 134571 does not improve AUC. Reverting changes.
Training on augumented user 41312 2/50 current_auc = 0.6694915254237288
User 41312 AUC after training: 0.6679960119641077
User 41312 does not improve AUC. Reverting changes.
Training on augumented user 137523 3/50 current_auc = 0.6694915254237288
User 137523 AUC after training: 0.6684945164506481
User 137523 does not improve AUC. Reverting changes.
Training on augumented user 24413 4/50 current_auc = 0.6694915254237288
User 24413 AUC after training: 0.6699900299102692
User 24413 improves AUC. Keeping the model.
Training on augumented user 98530 5/50 current_auc = 0.6699900299102692
User 98530 AUC after training: 0.6699900299102691
User 98530 does not improve AUC. Reverting changes.
Training on augumented user 72640 6/50 current_auc = 0.6699900299102692
User 72640 AUC after training: 0.6694915254237288
User 72640 does not improve AUC. Reverting changes.
Training on augumented user 21286 7/50 current_auc = 0.6699900299102692
User 21286 AUC after training: 0.6694915254237288
User 21286 does not improve AUC. Reverting changes.
Training on augumented user 46852 8/50 current_auc = 0.6699900299102692
User 46852 AUC after training: 0.6704885343968096
User 46852 improves AUC. Keeping the model.
Training on augumented user 30441 9/50 current_auc = 0.6704885343968096
User 30441 AUC after training: 0.6689930209371885
User 30441 does not improve AUC. Reverting changes.
Training on augumented user 63730 10/50 current_auc = 0.6704885343968096
User 63730 AUC after training: 0.6699900299102692
User 63730 does not improve AUC. Reverting changes.
Training on augumented user 105501 11/50 current_auc = 0.6704885343968096
User 105501 AUC after training: 0.6684945164506481
User 105501 does not improve AUC. Reverting changes.
Training on augumented user 62107 12/50 current_auc = 0.6704885343968096
User 62107 AUC after training: 0.6694915254237288
User 62107 does not improve AUC. Reverting changes.
Training on augumented user 2943 13/50 current_auc = 0.6704885343968096
User 2943 AUC after training: 0.6694915254237288
User 2943 does not improve AUC. Reverting changes.
Training on augumented user 69469 14/50 current_auc = 0.6704885343968096
User 69469 AUC after training: 0.6704885343968094
User 69469 does not improve AUC. Reverting changes.
Training on augumented user 66127 15/50 current_auc = 0.6704885343968096
User 66127 AUC after training: 0.6679960119641077
User 66127 does not improve AUC. Reverting changes.
Training on augumented user 9094 16/50 current_auc = 0.6704885343968096
User 9094 AUC after training: 0.6704885343968096
User 9094 does not improve AUC. Reverting changes.
Training on augumented user 3780 17/50 current_auc = 0.6704885343968096
User 3780 AUC after training: 0.6694915254237288
User 3780 does not improve AUC. Reverting changes.
Training on augumented user 110885 18/50 current_auc = 0.6704885343968096
User 110885 AUC after training: 0.6704885343968096
User 110885 does not improve AUC. Reverting changes.
Training on augumented user 33872 19/50 current_auc = 0.6704885343968096
User 33872 AUC after training: 0.6684945164506481
User 33872 does not improve AUC. Reverting changes.
Training on augumented user 71840 20/50 current_auc = 0.6704885343968096
User 71840 AUC after training: 0.6694915254237288
User 71840 does not improve AUC. Reverting changes.
Training on augumented user 11380 21/50 current_auc = 0.6704885343968096
User 11380 AUC after training: 0.6679960119641077
User 11380 does not improve AUC. Reverting changes.
Training on augumented user 55052 22/50 current_auc = 0.6704885343968096
User 55052 AUC after training: 0.6699900299102692
User 55052 does not improve AUC. Reverting changes.
Training on augumented user 92803 23/50 current_auc = 0.6704885343968096
User 92803 AUC after training: 0.6694915254237288
User 92803 does not improve AUC. Reverting changes.
Training on augumented user 87981 24/50 current_auc = 0.6704885343968096
User 87981 AUC after training: 0.6689930209371884
User 87981 does not improve AUC. Reverting changes.
Training on augumented user 3149 25/50 current_auc = 0.6704885343968096
User 3149 AUC after training: 0.6689930209371884
User 3149 does not improve AUC. Reverting changes.
Training on augumented user 42066 26/50 current_auc = 0.6704885343968096
User 42066 AUC after training: 0.6704885343968096
User 42066 does not improve AUC. Reverting changes.
Training on augumented user 49891 27/50 current_auc = 0.6704885343968096
User 49891 AUC after training: 0.6679960119641077
User 49891 does not improve AUC. Reverting changes.
Training on augumented user 101587 28/50 current_auc = 0.6704885343968096
User 101587 AUC after training: 0.6684945164506481
User 101587 does not improve AUC. Reverting changes.
Training on augumented user 130316 29/50 current_auc = 0.6704885343968096
User 130316 AUC after training: 0.6694915254237288
User 130316 does not improve AUC. Reverting changes.
Training on augumented user 58520 30/50 current_auc = 0.6704885343968096
User 58520 AUC after training: 0.6684945164506481
User 58520 does not improve AUC. Reverting changes.
Training on augumented user 135056 31/50 current_auc = 0.6704885343968096
User 135056 AUC after training: 0.6679960119641076
User 135056 does not improve AUC. Reverting changes.
Training on augumented user 111356 32/50 current_auc = 0.6704885343968096
User 111356 AUC after training: 0.6699900299102692
User 111356 does not improve AUC. Reverting changes.
Training on augumented user 121024 33/50 current_auc = 0.6704885343968096
User 121024 AUC after training: 0.6679960119641076
User 121024 does not improve AUC. Reverting changes.
Training on augumented user 895 34/50 current_auc = 0.6704885343968096
User 895 AUC after training: 0.6699900299102692
User 895 does not improve AUC. Reverting changes.
Training on augumented user 56655 35/50 current_auc = 0.6704885343968096
User 56655 AUC after training: 0.6704885343968096
User 56655 does not improve AUC. Reverting changes.
Training on augumented user 37344 36/50 current_auc = 0.6704885343968096
User 37344 AUC after training: 0.6694915254237288
User 37344 does not improve AUC. Reverting changes.
Training on augumented user 22759 37/50 current_auc = 0.6704885343968096
User 22759 AUC after training: 0.6699900299102692
User 22759 does not improve AUC. Reverting changes.
Training on augumented user 106915 38/50 current_auc = 0.6704885343968096
User 106915 AUC after training: 0.6689930209371885
User 106915 does not improve AUC. Reverting changes.
Training on augumented user 80468 39/50 current_auc = 0.6704885343968096
User 80468 AUC after training: 0.6694915254237288
User 80468 does not improve AUC. Reverting changes.
Training on augumented user 9852 40/50 current_auc = 0.6704885343968096
User 9852 AUC after training: 0.6704885343968096
User 9852 does not improve AUC. Reverting changes.
Training on augumented user 26433 41/50 current_auc = 0.6704885343968096
User 26433 AUC after training: 0.6684945164506481
User 26433 does not improve AUC. Reverting changes.
Training on augumented user 137370 42/50 current_auc = 0.6704885343968096
User 137370 AUC after training: 0.6699900299102692
User 137370 does not improve AUC. Reverting changes.
Training on augumented user 54927 43/50 current_auc = 0.6704885343968096
User 54927 AUC after training: 0.6704885343968096
User 54927 does not improve AUC. Reverting changes.
Training on augumented user 135007 44/50 current_auc = 0.6704885343968096
User 135007 AUC after training: 0.6689930209371885
User 135007 does not improve AUC. Reverting changes.
Training on augumented user 19333 45/50 current_auc = 0.6704885343968096
User 19333 AUC after training: 0.6704885343968097
User 19333 improves AUC. Keeping the model.
Training on augumented user 25318 46/50 current_auc = 0.6704885343968097
User 25318 AUC after training: 0.6699900299102692
User 25318 does not improve AUC. Reverting changes.
Training on augumented user 27897 47/50 current_auc = 0.6704885343968097
User 27897 AUC after training: 0.6704885343968097
User 27897 does not improve AUC. Reverting changes.
Training on augumented user 62242 48/50 current_auc = 0.6704885343968097
User 62242 AUC after training: 0.6704885343968097
User 62242 does not improve AUC. Reverting changes.
Training on augumented user 53018 49/50 current_auc = 0.6704885343968097
User 53018 AUC after training: 0.6669990029910269
User 53018 does not improve AUC. Reverting changes.
[2024-12-02 18:01:27.408891] start test user 83835 44/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:01:27.855002] start test user 83835 44/568 recall augumented users by random, augumented_users = [45436, 103486, 95993, 136216, 1833, 84883, 27735, 61430, 52001, 138171, 127291, 6929, 67690, 47385, 6630, 57755, 93085, 33614, 38317, 114506, 134657, 48686, 791, 54854, 2986, 92265, 17503, 8129, 76127, 31964, 67772, 14337, 39629, 23501, 42508, 56742, 69049, 55277, 94451, 119948, 58492, 11936, 14264, 48910, 26398, 62038, 98312, 54224, 115594, 30154]
[2024-12-02 18:01:27.869600] user = 83835 Cloud 44/568
[2024-12-02 18:01:27.878936] user = 83835 Local 44/568
[2024-12-02 18:01:27.906281] user = 83835 Local+ 44/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:01:30.713402] user = 83835 MPDA- 44/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.375
Training on augumented user 45436 0/50 current_auc = 0.375
User 45436 AUC after training: 0.375
User 45436 does not improve AUC. Reverting changes.
Training on augumented user 103486 1/50 current_auc = 0.375
User 103486 AUC after training: 0.375
User 103486 does not improve AUC. Reverting changes.
Training on augumented user 95993 2/50 current_auc = 0.375
User 95993 AUC after training: 0.375
User 95993 does not improve AUC. Reverting changes.
Training on augumented user 136216 3/50 current_auc = 0.375
User 136216 AUC after training: 0.375
User 136216 does not improve AUC. Reverting changes.
Training on augumented user 1833 4/50 current_auc = 0.375
User 1833 AUC after training: 0.375
User 1833 does not improve AUC. Reverting changes.
Training on augumented user 84883 5/50 current_auc = 0.375
User 84883 AUC after training: 0.375
User 84883 does not improve AUC. Reverting changes.
Training on augumented user 27735 6/50 current_auc = 0.375
User 27735 AUC after training: 0.375
User 27735 does not improve AUC. Reverting changes.
Training on augumented user 61430 7/50 current_auc = 0.375
User 61430 AUC after training: 0.375
User 61430 does not improve AUC. Reverting changes.
Training on augumented user 52001 8/50 current_auc = 0.375
User 52001 AUC after training: 0.375
User 52001 does not improve AUC. Reverting changes.
Training on augumented user 138171 9/50 current_auc = 0.375
User 138171 AUC after training: 0.375
User 138171 does not improve AUC. Reverting changes.
Training on augumented user 127291 10/50 current_auc = 0.375
User 127291 AUC after training: 0.375
User 127291 does not improve AUC. Reverting changes.
Training on augumented user 6929 11/50 current_auc = 0.375
User 6929 AUC after training: 0.375
User 6929 does not improve AUC. Reverting changes.
Training on augumented user 67690 12/50 current_auc = 0.375
User 67690 AUC after training: 0.375
User 67690 does not improve AUC. Reverting changes.
Training on augumented user 47385 13/50 current_auc = 0.375
User 47385 AUC after training: 0.375
User 47385 does not improve AUC. Reverting changes.
Training on augumented user 6630 14/50 current_auc = 0.375
User 6630 AUC after training: 0.375
User 6630 does not improve AUC. Reverting changes.
Training on augumented user 57755 15/50 current_auc = 0.375
User 57755 AUC after training: 0.375
User 57755 does not improve AUC. Reverting changes.
Training on augumented user 93085 16/50 current_auc = 0.375
User 93085 AUC after training: 0.375
User 93085 does not improve AUC. Reverting changes.
Training on augumented user 33614 17/50 current_auc = 0.375
User 33614 AUC after training: 0.375
User 33614 does not improve AUC. Reverting changes.
Training on augumented user 38317 18/50 current_auc = 0.375
User 38317 AUC after training: 0.375
User 38317 does not improve AUC. Reverting changes.
Training on augumented user 114506 19/50 current_auc = 0.375
User 114506 AUC after training: 0.375
User 114506 does not improve AUC. Reverting changes.
Training on augumented user 134657 20/50 current_auc = 0.375
User 134657 AUC after training: 0.375
User 134657 does not improve AUC. Reverting changes.
Training on augumented user 48686 21/50 current_auc = 0.375
User 48686 AUC after training: 0.375
User 48686 does not improve AUC. Reverting changes.
Training on augumented user 791 22/50 current_auc = 0.375
User 791 AUC after training: 0.375
User 791 does not improve AUC. Reverting changes.
Training on augumented user 54854 23/50 current_auc = 0.375
User 54854 AUC after training: 0.375
User 54854 does not improve AUC. Reverting changes.
Training on augumented user 2986 24/50 current_auc = 0.375
User 2986 AUC after training: 0.375
User 2986 does not improve AUC. Reverting changes.
Training on augumented user 92265 25/50 current_auc = 0.375
User 92265 AUC after training: 0.375
User 92265 does not improve AUC. Reverting changes.
Training on augumented user 17503 26/50 current_auc = 0.375
User 17503 AUC after training: 0.375
User 17503 does not improve AUC. Reverting changes.
Training on augumented user 8129 27/50 current_auc = 0.375
User 8129 AUC after training: 0.375
User 8129 does not improve AUC. Reverting changes.
Training on augumented user 76127 28/50 current_auc = 0.375
User 76127 AUC after training: 0.375
User 76127 does not improve AUC. Reverting changes.
Training on augumented user 31964 29/50 current_auc = 0.375
User 31964 AUC after training: 0.375
User 31964 does not improve AUC. Reverting changes.
Training on augumented user 67772 30/50 current_auc = 0.375
User 67772 AUC after training: 0.375
User 67772 does not improve AUC. Reverting changes.
Training on augumented user 14337 31/50 current_auc = 0.375
User 14337 AUC after training: 0.375
User 14337 does not improve AUC. Reverting changes.
Training on augumented user 39629 32/50 current_auc = 0.375
User 39629 AUC after training: 0.375
User 39629 does not improve AUC. Reverting changes.
Training on augumented user 23501 33/50 current_auc = 0.375
User 23501 AUC after training: 0.375
User 23501 does not improve AUC. Reverting changes.
Training on augumented user 42508 34/50 current_auc = 0.375
User 42508 AUC after training: 0.375
User 42508 does not improve AUC. Reverting changes.
Training on augumented user 56742 35/50 current_auc = 0.375
User 56742 AUC after training: 0.375
User 56742 does not improve AUC. Reverting changes.
Training on augumented user 69049 36/50 current_auc = 0.375
User 69049 AUC after training: 0.375
User 69049 does not improve AUC. Reverting changes.
Training on augumented user 55277 37/50 current_auc = 0.375
User 55277 AUC after training: 0.375
User 55277 does not improve AUC. Reverting changes.
Training on augumented user 94451 38/50 current_auc = 0.375
User 94451 AUC after training: 0.375
User 94451 does not improve AUC. Reverting changes.
Training on augumented user 119948 39/50 current_auc = 0.375
User 119948 AUC after training: 0.375
User 119948 does not improve AUC. Reverting changes.
Training on augumented user 58492 40/50 current_auc = 0.375
User 58492 AUC after training: 0.375
User 58492 does not improve AUC. Reverting changes.
Training on augumented user 11936 41/50 current_auc = 0.375
User 11936 AUC after training: 0.375
User 11936 does not improve AUC. Reverting changes.
Training on augumented user 14264 42/50 current_auc = 0.375
User 14264 AUC after training: 0.375
User 14264 does not improve AUC. Reverting changes.
Training on augumented user 48910 43/50 current_auc = 0.375
User 48910 AUC after training: 0.375
User 48910 does not improve AUC. Reverting changes.
Training on augumented user 26398 44/50 current_auc = 0.375
User 26398 AUC after training: 0.375
User 26398 does not improve AUC. Reverting changes.
Training on augumented user 62038 45/50 current_auc = 0.375
User 62038 AUC after training: 0.375
User 62038 does not improve AUC. Reverting changes.
Training on augumented user 98312 46/50 current_auc = 0.375
User 98312 AUC after training: 0.375
User 98312 does not improve AUC. Reverting changes.
Training on augumented user 54224 47/50 current_auc = 0.375
User 54224 AUC after training: 0.375
User 54224 does not improve AUC. Reverting changes.
Training on augumented user 115594 48/50 current_auc = 0.375
User 115594 AUC after training: 0.375
User 115594 does not improve AUC. Reverting changes.
Training on augumented user 30154 49/50 current_auc = 0.375
User 30154 AUC after training: 0.375
User 30154 does not improve AUC. Reverting changes.
[2024-12-02 18:01:59.588170] start test user 83855 45/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:01:59.991028] start test user 83855 45/568 recall augumented users by random, augumented_users = [75943, 41636, 70250, 12129, 107506, 81677, 132380, 124444, 83687, 82101, 80711, 46345, 13385, 4065, 8102, 107119, 75660, 2862, 17568, 99234, 78513, 109591, 108307, 114060, 21588, 85259, 88063, 11749, 127796, 41512, 21366, 124060, 51236, 118755, 70164, 69135, 66470, 43044, 106543, 109448, 78460, 6580, 94615, 27199, 62725, 71047, 6494, 22295, 52174, 113048]
[2024-12-02 18:02:00.005551] user = 83855 Cloud 45/568
[2024-12-02 18:02:00.018823] user = 83855 Local 45/568
[2024-12-02 18:02:00.107992] user = 83855 Local+ 45/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:02:02.291794] user = 83855 MPDA- 45/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7809388335704125
Training on augumented user 75943 0/50 current_auc = 0.7809388335704125
User 75943 AUC after training: 0.7809388335704125
User 75943 does not improve AUC. Reverting changes.
Training on augumented user 41636 1/50 current_auc = 0.7809388335704125
User 41636 AUC after training: 0.7816500711237553
User 41636 improves AUC. Keeping the model.
Training on augumented user 70250 2/50 current_auc = 0.7816500711237553
User 70250 AUC after training: 0.784850640113798
User 70250 improves AUC. Keeping the model.
Training on augumented user 12129 3/50 current_auc = 0.784850640113798
User 12129 AUC after training: 0.7855618776671408
User 12129 improves AUC. Keeping the model.
Training on augumented user 107506 4/50 current_auc = 0.7855618776671408
User 107506 AUC after training: 0.7855618776671408
User 107506 does not improve AUC. Reverting changes.
Training on augumented user 81677 5/50 current_auc = 0.7855618776671408
User 81677 AUC after training: 0.786628733997155
User 81677 improves AUC. Keeping the model.
Training on augumented user 132380 6/50 current_auc = 0.786628733997155
User 132380 AUC after training: 0.7834281650071124
User 132380 does not improve AUC. Reverting changes.
Training on augumented user 124444 7/50 current_auc = 0.786628733997155
User 124444 AUC after training: 0.7827169274537695
User 124444 does not improve AUC. Reverting changes.
Training on augumented user 83687 8/50 current_auc = 0.786628733997155
User 83687 AUC after training: 0.7852062588904695
User 83687 does not improve AUC. Reverting changes.
Training on augumented user 82101 9/50 current_auc = 0.786628733997155
User 82101 AUC after training: 0.7820056899004267
User 82101 does not improve AUC. Reverting changes.
Training on augumented user 80711 10/50 current_auc = 0.786628733997155
User 80711 AUC after training: 0.7837837837837838
User 80711 does not improve AUC. Reverting changes.
Training on augumented user 46345 11/50 current_auc = 0.786628733997155
User 46345 AUC after training: 0.7820056899004267
User 46345 does not improve AUC. Reverting changes.
Training on augumented user 13385 12/50 current_auc = 0.786628733997155
User 13385 AUC after training: 0.7827169274537695
User 13385 does not improve AUC. Reverting changes.
Training on augumented user 4065 13/50 current_auc = 0.786628733997155
User 4065 AUC after training: 0.7866287339971552
User 4065 improves AUC. Keeping the model.
Training on augumented user 8102 14/50 current_auc = 0.7866287339971552
User 8102 AUC after training: 0.7844950213371267
User 8102 does not improve AUC. Reverting changes.
Training on augumented user 107119 15/50 current_auc = 0.7866287339971552
User 107119 AUC after training: 0.7844950213371267
User 107119 does not improve AUC. Reverting changes.
Training on augumented user 75660 16/50 current_auc = 0.7866287339971552
User 75660 AUC after training: 0.7852062588904695
User 75660 does not improve AUC. Reverting changes.
Training on augumented user 2862 17/50 current_auc = 0.7866287339971552
User 2862 AUC after training: 0.7894736842105263
User 2862 improves AUC. Keeping the model.
Training on augumented user 17568 18/50 current_auc = 0.7894736842105263
User 17568 AUC after training: 0.7855618776671408
User 17568 does not improve AUC. Reverting changes.
Training on augumented user 99234 19/50 current_auc = 0.7894736842105263
User 99234 AUC after training: 0.7887624466571835
User 99234 does not improve AUC. Reverting changes.
Training on augumented user 78513 20/50 current_auc = 0.7894736842105263
User 78513 AUC after training: 0.7894736842105263
User 78513 does not improve AUC. Reverting changes.
Training on augumented user 109591 21/50 current_auc = 0.7894736842105263
User 109591 AUC after training: 0.7823613086770982
User 109591 does not improve AUC. Reverting changes.
Training on augumented user 108307 22/50 current_auc = 0.7894736842105263
User 108307 AUC after training: 0.7823613086770982
User 108307 does not improve AUC. Reverting changes.
Training on augumented user 114060 23/50 current_auc = 0.7894736842105263
User 114060 AUC after training: 0.7859174964438123
User 114060 does not improve AUC. Reverting changes.
Training on augumented user 21588 24/50 current_auc = 0.7894736842105263
User 21588 AUC after training: 0.7887624466571835
User 21588 does not improve AUC. Reverting changes.
Training on augumented user 85259 25/50 current_auc = 0.7894736842105263
User 85259 AUC after training: 0.783072546230441
User 85259 does not improve AUC. Reverting changes.
Training on augumented user 88063 26/50 current_auc = 0.7894736842105263
User 88063 AUC after training: 0.784850640113798
User 88063 does not improve AUC. Reverting changes.
Training on augumented user 11749 27/50 current_auc = 0.7894736842105263
User 11749 AUC after training: 0.783072546230441
User 11749 does not improve AUC. Reverting changes.
Training on augumented user 127796 28/50 current_auc = 0.7894736842105263
User 127796 AUC after training: 0.7841394025604552
User 127796 does not improve AUC. Reverting changes.
Training on augumented user 41512 29/50 current_auc = 0.7894736842105263
User 41512 AUC after training: 0.7880512091038407
User 41512 does not improve AUC. Reverting changes.
Training on augumented user 21366 30/50 current_auc = 0.7894736842105263
User 21366 AUC after training: 0.7873399715504978
User 21366 does not improve AUC. Reverting changes.
Training on augumented user 124060 31/50 current_auc = 0.7894736842105263
User 124060 AUC after training: 0.7894736842105263
User 124060 does not improve AUC. Reverting changes.
Training on augumented user 51236 32/50 current_auc = 0.7894736842105263
User 51236 AUC after training: 0.7880512091038407
User 51236 does not improve AUC. Reverting changes.
Training on augumented user 118755 33/50 current_auc = 0.7894736842105263
User 118755 AUC after training: 0.7887624466571835
User 118755 does not improve AUC. Reverting changes.
Training on augumented user 70164 34/50 current_auc = 0.7894736842105263
User 70164 AUC after training: 0.7844950213371266
User 70164 does not improve AUC. Reverting changes.
Training on augumented user 69135 35/50 current_auc = 0.7894736842105263
User 69135 AUC after training: 0.7866287339971552
User 69135 does not improve AUC. Reverting changes.
Training on augumented user 66470 36/50 current_auc = 0.7894736842105263
User 66470 AUC after training: 0.7823613086770982
User 66470 does not improve AUC. Reverting changes.
Training on augumented user 43044 37/50 current_auc = 0.7894736842105263
User 43044 AUC after training: 0.7894736842105263
User 43044 does not improve AUC. Reverting changes.
Training on augumented user 106543 38/50 current_auc = 0.7894736842105263
User 106543 AUC after training: 0.7837837837837838
User 106543 does not improve AUC. Reverting changes.
Training on augumented user 109448 39/50 current_auc = 0.7894736842105263
User 109448 AUC after training: 0.7837837837837838
User 109448 does not improve AUC. Reverting changes.
Training on augumented user 78460 40/50 current_auc = 0.7894736842105263
User 78460 AUC after training: 0.7837837837837838
User 78460 does not improve AUC. Reverting changes.
Training on augumented user 6580 41/50 current_auc = 0.7894736842105263
User 6580 AUC after training: 0.7859174964438123
User 6580 does not improve AUC. Reverting changes.
Training on augumented user 94615 42/50 current_auc = 0.7894736842105263
User 94615 AUC after training: 0.784850640113798
User 94615 does not improve AUC. Reverting changes.
Training on augumented user 27199 43/50 current_auc = 0.7894736842105263
User 27199 AUC after training: 0.7887624466571835
User 27199 does not improve AUC. Reverting changes.
Training on augumented user 62725 44/50 current_auc = 0.7894736842105263
User 62725 AUC after training: 0.784850640113798
User 62725 does not improve AUC. Reverting changes.
Training on augumented user 71047 45/50 current_auc = 0.7894736842105263
User 71047 AUC after training: 0.786628733997155
User 71047 does not improve AUC. Reverting changes.
Training on augumented user 6494 46/50 current_auc = 0.7894736842105263
User 6494 AUC after training: 0.784850640113798
User 6494 does not improve AUC. Reverting changes.
Training on augumented user 22295 47/50 current_auc = 0.7894736842105263
User 22295 AUC after training: 0.786628733997155
User 22295 does not improve AUC. Reverting changes.
Training on augumented user 52174 48/50 current_auc = 0.7894736842105263
User 52174 AUC after training: 0.7866287339971552
User 52174 does not improve AUC. Reverting changes.
Training on augumented user 113048 49/50 current_auc = 0.7894736842105263
User 113048 AUC after training: 0.7852062588904695
User 113048 does not improve AUC. Reverting changes.
[2024-12-02 18:02:26.274343] start test user 83863 46/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:02:26.703549] start test user 83863 46/568 recall augumented users by random, augumented_users = [107742, 134103, 29720, 20497, 13680, 127752, 124539, 11197, 88277, 4409, 121384, 36655, 7421, 12510, 62377, 79947, 25418, 118047, 96560, 81360, 34913, 25452, 37023, 21267, 127060, 136252, 48484, 11749, 50966, 49853, 76084, 60133, 137174, 65100, 112469, 136990, 97949, 112525, 31097, 119367, 76831, 17565, 61539, 22440, 104618, 2046, 54425, 29165, 130209, 133945]
[2024-12-02 18:02:26.718750] user = 83863 Cloud 46/568
[2024-12-02 18:02:26.735944] user = 83863 Local 46/568
[2024-12-02 18:02:26.798084] user = 83863 Local+ 46/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:02:29.071299] user = 83863 MPDA- 46/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.673913043478261
Training on augumented user 107742 0/50 current_auc = 0.673913043478261
User 107742 AUC after training: 0.6747181964573269
User 107742 improves AUC. Keeping the model.
Training on augumented user 134103 1/50 current_auc = 0.6747181964573269
User 134103 AUC after training: 0.6731078904991948
User 134103 does not improve AUC. Reverting changes.
Training on augumented user 29720 2/50 current_auc = 0.6747181964573269
User 29720 AUC after training: 0.6739130434782608
User 29720 does not improve AUC. Reverting changes.
Training on augumented user 20497 3/50 current_auc = 0.6747181964573269
User 20497 AUC after training: 0.6747181964573269
User 20497 does not improve AUC. Reverting changes.
Training on augumented user 13680 4/50 current_auc = 0.6747181964573269
User 13680 AUC after training: 0.6723027375201288
User 13680 does not improve AUC. Reverting changes.
Training on augumented user 127752 5/50 current_auc = 0.6747181964573269
User 127752 AUC after training: 0.6739130434782609
User 127752 does not improve AUC. Reverting changes.
Training on augumented user 124539 6/50 current_auc = 0.6747181964573269
User 124539 AUC after training: 0.673913043478261
User 124539 does not improve AUC. Reverting changes.
Training on augumented user 11197 7/50 current_auc = 0.6747181964573269
User 11197 AUC after training: 0.6731078904991948
User 11197 does not improve AUC. Reverting changes.
Training on augumented user 88277 8/50 current_auc = 0.6747181964573269
User 88277 AUC after training: 0.6747181964573269
User 88277 does not improve AUC. Reverting changes.
Training on augumented user 4409 9/50 current_auc = 0.6747181964573269
User 4409 AUC after training: 0.6739130434782609
User 4409 does not improve AUC. Reverting changes.
Training on augumented user 121384 10/50 current_auc = 0.6747181964573269
User 121384 AUC after training: 0.6731078904991948
User 121384 does not improve AUC. Reverting changes.
Training on augumented user 36655 11/50 current_auc = 0.6747181964573269
User 36655 AUC after training: 0.6747181964573269
User 36655 does not improve AUC. Reverting changes.
Training on augumented user 7421 12/50 current_auc = 0.6747181964573269
User 7421 AUC after training: 0.6739130434782609
User 7421 does not improve AUC. Reverting changes.
Training on augumented user 12510 13/50 current_auc = 0.6747181964573269
User 12510 AUC after training: 0.6755233494363929
User 12510 improves AUC. Keeping the model.
Training on augumented user 62377 14/50 current_auc = 0.6755233494363929
User 62377 AUC after training: 0.6747181964573269
User 62377 does not improve AUC. Reverting changes.
Training on augumented user 79947 15/50 current_auc = 0.6755233494363929
User 79947 AUC after training: 0.6747181964573268
User 79947 does not improve AUC. Reverting changes.
Training on augumented user 25418 16/50 current_auc = 0.6755233494363929
User 25418 AUC after training: 0.6755233494363929
User 25418 does not improve AUC. Reverting changes.
Training on augumented user 118047 17/50 current_auc = 0.6755233494363929
User 118047 AUC after training: 0.6739130434782608
User 118047 does not improve AUC. Reverting changes.
Training on augumented user 96560 18/50 current_auc = 0.6755233494363929
User 96560 AUC after training: 0.6739130434782609
User 96560 does not improve AUC. Reverting changes.
Training on augumented user 81360 19/50 current_auc = 0.6755233494363929
User 81360 AUC after training: 0.6747181964573269
User 81360 does not improve AUC. Reverting changes.
Training on augumented user 34913 20/50 current_auc = 0.6755233494363929
User 34913 AUC after training: 0.6739130434782609
User 34913 does not improve AUC. Reverting changes.
Training on augumented user 25452 21/50 current_auc = 0.6755233494363929
User 25452 AUC after training: 0.6747181964573268
User 25452 does not improve AUC. Reverting changes.
Training on augumented user 37023 22/50 current_auc = 0.6755233494363929
User 37023 AUC after training: 0.6747181964573269
User 37023 does not improve AUC. Reverting changes.
Training on augumented user 21267 23/50 current_auc = 0.6755233494363929
User 21267 AUC after training: 0.6739130434782609
User 21267 does not improve AUC. Reverting changes.
Training on augumented user 127060 24/50 current_auc = 0.6755233494363929
User 127060 AUC after training: 0.6739130434782609
User 127060 does not improve AUC. Reverting changes.
Training on augumented user 136252 25/50 current_auc = 0.6755233494363929
User 136252 AUC after training: 0.6747181964573268
User 136252 does not improve AUC. Reverting changes.
Training on augumented user 48484 26/50 current_auc = 0.6755233494363929
User 48484 AUC after training: 0.6739130434782609
User 48484 does not improve AUC. Reverting changes.
Training on augumented user 11749 27/50 current_auc = 0.6755233494363929
User 11749 AUC after training: 0.6755233494363929
User 11749 does not improve AUC. Reverting changes.
Training on augumented user 50966 28/50 current_auc = 0.6755233494363929
User 50966 AUC after training: 0.6723027375201288
User 50966 does not improve AUC. Reverting changes.
Training on augumented user 49853 29/50 current_auc = 0.6755233494363929
User 49853 AUC after training: 0.6739130434782609
User 49853 does not improve AUC. Reverting changes.
Training on augumented user 76084 30/50 current_auc = 0.6755233494363929
User 76084 AUC after training: 0.6747181964573268
User 76084 does not improve AUC. Reverting changes.
Training on augumented user 60133 31/50 current_auc = 0.6755233494363929
User 60133 AUC after training: 0.6747181964573268
User 60133 does not improve AUC. Reverting changes.
Training on augumented user 137174 32/50 current_auc = 0.6755233494363929
User 137174 AUC after training: 0.6755233494363929
User 137174 does not improve AUC. Reverting changes.
Training on augumented user 65100 33/50 current_auc = 0.6755233494363929
User 65100 AUC after training: 0.6747181964573268
User 65100 does not improve AUC. Reverting changes.
Training on augumented user 112469 34/50 current_auc = 0.6755233494363929
User 112469 AUC after training: 0.6747181964573268
User 112469 does not improve AUC. Reverting changes.
Training on augumented user 136990 35/50 current_auc = 0.6755233494363929
User 136990 AUC after training: 0.6755233494363929
User 136990 does not improve AUC. Reverting changes.
Training on augumented user 97949 36/50 current_auc = 0.6755233494363929
User 97949 AUC after training: 0.6755233494363929
User 97949 does not improve AUC. Reverting changes.
Training on augumented user 112525 37/50 current_auc = 0.6755233494363929
User 112525 AUC after training: 0.6723027375201288
User 112525 does not improve AUC. Reverting changes.
Training on augumented user 31097 38/50 current_auc = 0.6755233494363929
User 31097 AUC after training: 0.6739130434782609
User 31097 does not improve AUC. Reverting changes.
Training on augumented user 119367 39/50 current_auc = 0.6755233494363929
User 119367 AUC after training: 0.677133655394525
User 119367 improves AUC. Keeping the model.
Training on augumented user 76831 40/50 current_auc = 0.677133655394525
User 76831 AUC after training: 0.677133655394525
User 76831 does not improve AUC. Reverting changes.
Training on augumented user 17565 41/50 current_auc = 0.677133655394525
User 17565 AUC after training: 0.677938808373591
User 17565 improves AUC. Keeping the model.
Training on augumented user 61539 42/50 current_auc = 0.677938808373591
User 61539 AUC after training: 0.678743961352657
User 61539 improves AUC. Keeping the model.
Training on augumented user 22440 43/50 current_auc = 0.678743961352657
User 22440 AUC after training: 0.678743961352657
User 22440 does not improve AUC. Reverting changes.
Training on augumented user 104618 44/50 current_auc = 0.678743961352657
User 104618 AUC after training: 0.678743961352657
User 104618 does not improve AUC. Reverting changes.
Training on augumented user 2046 45/50 current_auc = 0.678743961352657
User 2046 AUC after training: 0.678743961352657
User 2046 does not improve AUC. Reverting changes.
Training on augumented user 54425 46/50 current_auc = 0.678743961352657
User 54425 AUC after training: 0.678743961352657
User 54425 does not improve AUC. Reverting changes.
Training on augumented user 29165 47/50 current_auc = 0.678743961352657
User 29165 AUC after training: 0.678743961352657
User 29165 does not improve AUC. Reverting changes.
Training on augumented user 130209 48/50 current_auc = 0.678743961352657
User 130209 AUC after training: 0.678743961352657
User 130209 does not improve AUC. Reverting changes.
Training on augumented user 133945 49/50 current_auc = 0.678743961352657
User 133945 AUC after training: 0.678743961352657
User 133945 does not improve AUC. Reverting changes.
[2024-12-02 18:02:57.133557] start test user 83874 47/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:02:57.560392] start test user 83874 47/568 recall augumented users by random, augumented_users = [106182, 105028, 40090, 30279, 62317, 51695, 78278, 55531, 43466, 19362, 67640, 9982, 56715, 19708, 130148, 90530, 49895, 122034, 15814, 85330, 35702, 95411, 10897, 112621, 104803, 124535, 113451, 122014, 118364, 43141, 60903, 19406, 120725, 86304, 130483, 117634, 31297, 33845, 33620, 134378, 38220, 37976, 11383, 18679, 90786, 109972, 64718, 46240, 92040, 112541]
[2024-12-02 18:02:57.575111] user = 83874 Cloud 47/568
[2024-12-02 18:02:57.584987] user = 83874 Local 47/568
[2024-12-02 18:02:57.611092] user = 83874 Local+ 47/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:02:59.972575] user = 83874 MPDA- 47/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6738461538461539
Training on augumented user 106182 0/50 current_auc = 0.6738461538461539
User 106182 AUC after training: 0.6738461538461539
User 106182 does not improve AUC. Reverting changes.
Training on augumented user 105028 1/50 current_auc = 0.6738461538461539
User 105028 AUC after training: 0.6738461538461539
User 105028 does not improve AUC. Reverting changes.
Training on augumented user 40090 2/50 current_auc = 0.6738461538461539
User 40090 AUC after training: 0.6707692307692307
User 40090 does not improve AUC. Reverting changes.
Training on augumented user 30279 3/50 current_auc = 0.6738461538461539
User 30279 AUC after training: 0.6738461538461539
User 30279 does not improve AUC. Reverting changes.
Training on augumented user 62317 4/50 current_auc = 0.6738461538461539
User 62317 AUC after training: 0.6707692307692307
User 62317 does not improve AUC. Reverting changes.
Training on augumented user 51695 5/50 current_auc = 0.6738461538461539
User 51695 AUC after training: 0.6738461538461539
User 51695 does not improve AUC. Reverting changes.
Training on augumented user 78278 6/50 current_auc = 0.6738461538461539
User 78278 AUC after training: 0.6738461538461539
User 78278 does not improve AUC. Reverting changes.
Training on augumented user 55531 7/50 current_auc = 0.6738461538461539
User 55531 AUC after training: 0.6707692307692307
User 55531 does not improve AUC. Reverting changes.
Training on augumented user 43466 8/50 current_auc = 0.6738461538461539
User 43466 AUC after training: 0.6738461538461539
User 43466 does not improve AUC. Reverting changes.
Training on augumented user 19362 9/50 current_auc = 0.6738461538461539
User 19362 AUC after training: 0.6738461538461539
User 19362 does not improve AUC. Reverting changes.
Training on augumented user 67640 10/50 current_auc = 0.6738461538461539
User 67640 AUC after training: 0.6707692307692308
User 67640 does not improve AUC. Reverting changes.
Training on augumented user 9982 11/50 current_auc = 0.6738461538461539
User 9982 AUC after training: 0.6707692307692307
User 9982 does not improve AUC. Reverting changes.
Training on augumented user 56715 12/50 current_auc = 0.6738461538461539
User 56715 AUC after training: 0.6738461538461539
User 56715 does not improve AUC. Reverting changes.
Training on augumented user 19708 13/50 current_auc = 0.6738461538461539
User 19708 AUC after training: 0.6707692307692307
User 19708 does not improve AUC. Reverting changes.
Training on augumented user 130148 14/50 current_auc = 0.6738461538461539
User 130148 AUC after training: 0.6738461538461539
User 130148 does not improve AUC. Reverting changes.
Training on augumented user 90530 15/50 current_auc = 0.6738461538461539
User 90530 AUC after training: 0.6738461538461539
User 90530 does not improve AUC. Reverting changes.
Training on augumented user 49895 16/50 current_auc = 0.6738461538461539
User 49895 AUC after training: 0.6738461538461539
User 49895 does not improve AUC. Reverting changes.
Training on augumented user 122034 17/50 current_auc = 0.6738461538461539
User 122034 AUC after training: 0.6738461538461539
User 122034 does not improve AUC. Reverting changes.
Training on augumented user 15814 18/50 current_auc = 0.6738461538461539
User 15814 AUC after training: 0.6738461538461539
User 15814 does not improve AUC. Reverting changes.
Training on augumented user 85330 19/50 current_auc = 0.6738461538461539
User 85330 AUC after training: 0.6738461538461539
User 85330 does not improve AUC. Reverting changes.
Training on augumented user 35702 20/50 current_auc = 0.6738461538461539
User 35702 AUC after training: 0.6676923076923077
User 35702 does not improve AUC. Reverting changes.
Training on augumented user 95411 21/50 current_auc = 0.6738461538461539
User 95411 AUC after training: 0.6707692307692307
User 95411 does not improve AUC. Reverting changes.
Training on augumented user 10897 22/50 current_auc = 0.6738461538461539
User 10897 AUC after training: 0.6738461538461539
User 10897 does not improve AUC. Reverting changes.
Training on augumented user 112621 23/50 current_auc = 0.6738461538461539
User 112621 AUC after training: 0.6738461538461539
User 112621 does not improve AUC. Reverting changes.
Training on augumented user 104803 24/50 current_auc = 0.6738461538461539
User 104803 AUC after training: 0.6738461538461539
User 104803 does not improve AUC. Reverting changes.
Training on augumented user 124535 25/50 current_auc = 0.6738461538461539
User 124535 AUC after training: 0.6707692307692307
User 124535 does not improve AUC. Reverting changes.
Training on augumented user 113451 26/50 current_auc = 0.6738461538461539
User 113451 AUC after training: 0.6738461538461539
User 113451 does not improve AUC. Reverting changes.
Training on augumented user 122014 27/50 current_auc = 0.6738461538461539
User 122014 AUC after training: 0.6707692307692307
User 122014 does not improve AUC. Reverting changes.
Training on augumented user 118364 28/50 current_auc = 0.6738461538461539
User 118364 AUC after training: 0.6738461538461539
User 118364 does not improve AUC. Reverting changes.
Training on augumented user 43141 29/50 current_auc = 0.6738461538461539
User 43141 AUC after training: 0.6707692307692307
User 43141 does not improve AUC. Reverting changes.
Training on augumented user 60903 30/50 current_auc = 0.6738461538461539
User 60903 AUC after training: 0.6707692307692307
User 60903 does not improve AUC. Reverting changes.
Training on augumented user 19406 31/50 current_auc = 0.6738461538461539
User 19406 AUC after training: 0.6646153846153846
User 19406 does not improve AUC. Reverting changes.
Training on augumented user 120725 32/50 current_auc = 0.6738461538461539
User 120725 AUC after training: 0.6707692307692307
User 120725 does not improve AUC. Reverting changes.
Training on augumented user 86304 33/50 current_auc = 0.6738461538461539
User 86304 AUC after training: 0.6738461538461539
User 86304 does not improve AUC. Reverting changes.
Training on augumented user 130483 34/50 current_auc = 0.6738461538461539
User 130483 AUC after training: 0.6738461538461539
User 130483 does not improve AUC. Reverting changes.
Training on augumented user 117634 35/50 current_auc = 0.6738461538461539
User 117634 AUC after training: 0.6738461538461539
User 117634 does not improve AUC. Reverting changes.
Training on augumented user 31297 36/50 current_auc = 0.6738461538461539
User 31297 AUC after training: 0.6707692307692307
User 31297 does not improve AUC. Reverting changes.
Training on augumented user 33845 37/50 current_auc = 0.6738461538461539
User 33845 AUC after training: 0.6738461538461539
User 33845 does not improve AUC. Reverting changes.
Training on augumented user 33620 38/50 current_auc = 0.6738461538461539
User 33620 AUC after training: 0.6738461538461539
User 33620 does not improve AUC. Reverting changes.
Training on augumented user 134378 39/50 current_auc = 0.6738461538461539
User 134378 AUC after training: 0.6738461538461539
User 134378 does not improve AUC. Reverting changes.
Training on augumented user 38220 40/50 current_auc = 0.6738461538461539
User 38220 AUC after training: 0.6738461538461539
User 38220 does not improve AUC. Reverting changes.
Training on augumented user 37976 41/50 current_auc = 0.6738461538461539
User 37976 AUC after training: 0.6738461538461539
User 37976 does not improve AUC. Reverting changes.
Training on augumented user 11383 42/50 current_auc = 0.6738461538461539
User 11383 AUC after training: 0.6707692307692307
User 11383 does not improve AUC. Reverting changes.
Training on augumented user 18679 43/50 current_auc = 0.6738461538461539
User 18679 AUC after training: 0.6676923076923077
User 18679 does not improve AUC. Reverting changes.
Training on augumented user 90786 44/50 current_auc = 0.6738461538461539
User 90786 AUC after training: 0.6738461538461539
User 90786 does not improve AUC. Reverting changes.
Training on augumented user 109972 45/50 current_auc = 0.6738461538461539
User 109972 AUC after training: 0.6707692307692307
User 109972 does not improve AUC. Reverting changes.
Training on augumented user 64718 46/50 current_auc = 0.6738461538461539
User 64718 AUC after training: 0.6738461538461539
User 64718 does not improve AUC. Reverting changes.
Training on augumented user 46240 47/50 current_auc = 0.6738461538461539
User 46240 AUC after training: 0.6738461538461539
User 46240 does not improve AUC. Reverting changes.
Training on augumented user 92040 48/50 current_auc = 0.6738461538461539
User 92040 AUC after training: 0.6738461538461539
User 92040 does not improve AUC. Reverting changes.
Training on augumented user 112541 49/50 current_auc = 0.6738461538461539
User 112541 AUC after training: 0.6738461538461539
User 112541 does not improve AUC. Reverting changes.
[2024-12-02 18:03:30.478991] start test user 83904 48/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:03:31.292104] start test user 83904 48/568 recall augumented users by random, augumented_users = [85710, 78346, 83016, 17709, 4579, 56251, 126629, 65496, 119891, 103981, 75020, 115505, 11135, 134579, 86583, 42182, 113016, 83446, 131253, 17962, 115627, 7099, 82576, 112248, 137232, 67400, 48574, 115751, 6301, 4797, 70670, 13483, 23508, 84905, 80991, 7540, 43916, 118008, 136447, 64255, 58423, 14082, 126833, 53908, 130218, 26090, 103371, 75293, 133562, 13546]
[2024-12-02 18:03:31.309624] user = 83904 Cloud 48/568
[2024-12-02 18:03:31.320858] user = 83904 Local 48/568
[2024-12-02 18:03:31.394031] user = 83904 Local+ 48/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:03:34.315445] user = 83904 MPDA- 48/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6875
Training on augumented user 85710 0/50 current_auc = 0.6875
User 85710 AUC after training: 0.6875
User 85710 does not improve AUC. Reverting changes.
Training on augumented user 78346 1/50 current_auc = 0.6875
User 78346 AUC after training: 0.6875
User 78346 does not improve AUC. Reverting changes.
Training on augumented user 83016 2/50 current_auc = 0.6875
User 83016 AUC after training: 0.6875
User 83016 does not improve AUC. Reverting changes.
Training on augumented user 17709 3/50 current_auc = 0.6875
User 17709 AUC after training: 0.6875
User 17709 does not improve AUC. Reverting changes.
Training on augumented user 4579 4/50 current_auc = 0.6875
User 4579 AUC after training: 0.6875
User 4579 does not improve AUC. Reverting changes.
Training on augumented user 56251 5/50 current_auc = 0.6875
User 56251 AUC after training: 0.6875
User 56251 does not improve AUC. Reverting changes.
Training on augumented user 126629 6/50 current_auc = 0.6875
User 126629 AUC after training: 0.6953125
User 126629 improves AUC. Keeping the model.
Training on augumented user 65496 7/50 current_auc = 0.6953125
User 65496 AUC after training: 0.6875
User 65496 does not improve AUC. Reverting changes.
Training on augumented user 119891 8/50 current_auc = 0.6953125
User 119891 AUC after training: 0.6875
User 119891 does not improve AUC. Reverting changes.
Training on augumented user 103981 9/50 current_auc = 0.6953125
User 103981 AUC after training: 0.6953125
User 103981 does not improve AUC. Reverting changes.
Training on augumented user 75020 10/50 current_auc = 0.6953125
User 75020 AUC after training: 0.6953125
User 75020 does not improve AUC. Reverting changes.
Training on augumented user 115505 11/50 current_auc = 0.6953125
User 115505 AUC after training: 0.6953125
User 115505 does not improve AUC. Reverting changes.
Training on augumented user 11135 12/50 current_auc = 0.6953125
User 11135 AUC after training: 0.6953125
User 11135 does not improve AUC. Reverting changes.
Training on augumented user 134579 13/50 current_auc = 0.6953125
User 134579 AUC after training: 0.6953125
User 134579 does not improve AUC. Reverting changes.
Training on augumented user 86583 14/50 current_auc = 0.6953125
User 86583 AUC after training: 0.6875
User 86583 does not improve AUC. Reverting changes.
Training on augumented user 42182 15/50 current_auc = 0.6953125
User 42182 AUC after training: 0.6875
User 42182 does not improve AUC. Reverting changes.
Training on augumented user 113016 16/50 current_auc = 0.6953125
User 113016 AUC after training: 0.6953125
User 113016 does not improve AUC. Reverting changes.
Training on augumented user 83446 17/50 current_auc = 0.6953125
User 83446 AUC after training: 0.6953125
User 83446 does not improve AUC. Reverting changes.
Training on augumented user 131253 18/50 current_auc = 0.6953125
User 131253 AUC after training: 0.6953125
User 131253 does not improve AUC. Reverting changes.
Training on augumented user 17962 19/50 current_auc = 0.6953125
User 17962 AUC after training: 0.6953125
User 17962 does not improve AUC. Reverting changes.
Training on augumented user 115627 20/50 current_auc = 0.6953125
User 115627 AUC after training: 0.6875
User 115627 does not improve AUC. Reverting changes.
Training on augumented user 7099 21/50 current_auc = 0.6953125
User 7099 AUC after training: 0.6953125
User 7099 does not improve AUC. Reverting changes.
Training on augumented user 82576 22/50 current_auc = 0.6953125
User 82576 AUC after training: 0.6875
User 82576 does not improve AUC. Reverting changes.
Training on augumented user 112248 23/50 current_auc = 0.6953125
User 112248 AUC after training: 0.6875
User 112248 does not improve AUC. Reverting changes.
Training on augumented user 137232 24/50 current_auc = 0.6953125
User 137232 AUC after training: 0.6953125
User 137232 does not improve AUC. Reverting changes.
Training on augumented user 67400 25/50 current_auc = 0.6953125
User 67400 AUC after training: 0.703125
User 67400 improves AUC. Keeping the model.
Training on augumented user 48574 26/50 current_auc = 0.703125
User 48574 AUC after training: 0.703125
User 48574 does not improve AUC. Reverting changes.
Training on augumented user 115751 27/50 current_auc = 0.703125
User 115751 AUC after training: 0.703125
User 115751 does not improve AUC. Reverting changes.
Training on augumented user 6301 28/50 current_auc = 0.703125
User 6301 AUC after training: 0.703125
User 6301 does not improve AUC. Reverting changes.
Training on augumented user 4797 29/50 current_auc = 0.703125
User 4797 AUC after training: 0.703125
User 4797 does not improve AUC. Reverting changes.
Training on augumented user 70670 30/50 current_auc = 0.703125
User 70670 AUC after training: 0.703125
User 70670 does not improve AUC. Reverting changes.
Training on augumented user 13483 31/50 current_auc = 0.703125
User 13483 AUC after training: 0.703125
User 13483 does not improve AUC. Reverting changes.
Training on augumented user 23508 32/50 current_auc = 0.703125
User 23508 AUC after training: 0.703125
User 23508 does not improve AUC. Reverting changes.
Training on augumented user 84905 33/50 current_auc = 0.703125
User 84905 AUC after training: 0.703125
User 84905 does not improve AUC. Reverting changes.
Training on augumented user 80991 34/50 current_auc = 0.703125
User 80991 AUC after training: 0.703125
User 80991 does not improve AUC. Reverting changes.
Training on augumented user 7540 35/50 current_auc = 0.703125
User 7540 AUC after training: 0.703125
User 7540 does not improve AUC. Reverting changes.
Training on augumented user 43916 36/50 current_auc = 0.703125
User 43916 AUC after training: 0.703125
User 43916 does not improve AUC. Reverting changes.
Training on augumented user 118008 37/50 current_auc = 0.703125
User 118008 AUC after training: 0.703125
User 118008 does not improve AUC. Reverting changes.
Training on augumented user 136447 38/50 current_auc = 0.703125
User 136447 AUC after training: 0.703125
User 136447 does not improve AUC. Reverting changes.
Training on augumented user 64255 39/50 current_auc = 0.703125
User 64255 AUC after training: 0.703125
User 64255 does not improve AUC. Reverting changes.
Training on augumented user 58423 40/50 current_auc = 0.703125
User 58423 AUC after training: 0.703125
User 58423 does not improve AUC. Reverting changes.
Training on augumented user 14082 41/50 current_auc = 0.703125
User 14082 AUC after training: 0.703125
User 14082 does not improve AUC. Reverting changes.
Training on augumented user 126833 42/50 current_auc = 0.703125
User 126833 AUC after training: 0.703125
User 126833 does not improve AUC. Reverting changes.
Training on augumented user 53908 43/50 current_auc = 0.703125
User 53908 AUC after training: 0.703125
User 53908 does not improve AUC. Reverting changes.
Training on augumented user 130218 44/50 current_auc = 0.703125
User 130218 AUC after training: 0.703125
User 130218 does not improve AUC. Reverting changes.
Training on augumented user 26090 45/50 current_auc = 0.703125
User 26090 AUC after training: 0.703125
User 26090 does not improve AUC. Reverting changes.
Training on augumented user 103371 46/50 current_auc = 0.703125
User 103371 AUC after training: 0.703125
User 103371 does not improve AUC. Reverting changes.
Training on augumented user 75293 47/50 current_auc = 0.703125
User 75293 AUC after training: 0.703125
User 75293 does not improve AUC. Reverting changes.
Training on augumented user 133562 48/50 current_auc = 0.703125
User 133562 AUC after training: 0.703125
User 133562 does not improve AUC. Reverting changes.
Training on augumented user 13546 49/50 current_auc = 0.703125
User 13546 AUC after training: 0.6875
User 13546 does not improve AUC. Reverting changes.
[2024-12-02 18:04:02.291824] start test user 83947 49/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:04:02.855257] start test user 83947 49/568 recall augumented users by random, augumented_users = [115280, 86641, 7629, 121284, 68618, 137342, 57878, 34783, 14820, 71873, 135500, 94166, 125778, 46771, 47404, 24939, 94505, 58778, 121394, 42946, 23333, 87949, 78025, 123903, 233, 8296, 53184, 108062, 9202, 89766, 29769, 118290, 78139, 73482, 132128, 105144, 68444, 39915, 16959, 77021, 61009, 11180, 102847, 11778, 106535, 42639, 85725, 106370, 8052, 21680]
[2024-12-02 18:04:02.871667] user = 83947 Cloud 49/568
[2024-12-02 18:04:02.987935] user = 83947 Local 49/568
[2024-12-02 18:04:03.175144] user = 83947 Local+ 49/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:04:05.870243] user = 83947 MPDA- 49/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.703290694268138
Training on augumented user 115280 0/50 current_auc = 0.703290694268138
User 115280 AUC after training: 0.7032906942681378
User 115280 does not improve AUC. Reverting changes.
Training on augumented user 86641 1/50 current_auc = 0.703290694268138
User 86641 AUC after training: 0.7032516355824626
User 86641 does not improve AUC. Reverting changes.
Training on augumented user 7629 2/50 current_auc = 0.703290694268138
User 7629 AUC after training: 0.7033492822966507
User 7629 improves AUC. Keeping the model.
Training on augumented user 121284 3/50 current_auc = 0.7033492822966507
User 121284 AUC after training: 0.70338183120138
User 121284 improves AUC. Keeping the model.
Training on augumented user 68618 4/50 current_auc = 0.70338183120138
User 68618 AUC after training: 0.7032125768967874
User 68618 does not improve AUC. Reverting changes.
Training on augumented user 137342 5/50 current_auc = 0.70338183120138
User 137342 AUC after training: 0.7028024606971974
User 137342 does not improve AUC. Reverting changes.
Training on augumented user 57878 6/50 current_auc = 0.70338183120138
User 57878 AUC after training: 0.7032451258015169
User 57878 does not improve AUC. Reverting changes.
Training on augumented user 34783 7/50 current_auc = 0.70338183120138
User 34783 AUC after training: 0.7034208898870553
User 34783 improves AUC. Keeping the model.
Training on augumented user 14820 8/50 current_auc = 0.7034208898870553
User 14820 AUC after training: 0.7033948507632718
User 14820 does not improve AUC. Reverting changes.
Training on augumented user 71873 9/50 current_auc = 0.7034208898870553
User 71873 AUC after training: 0.7033948507632718
User 71873 does not improve AUC. Reverting changes.
Training on augumented user 135500 10/50 current_auc = 0.7034208898870553
User 135500 AUC after training: 0.7034046154346907
User 135500 does not improve AUC. Reverting changes.
Training on augumented user 94166 11/50 current_auc = 0.7034208898870553
User 94166 AUC after training: 0.7031995573348957
User 94166 does not improve AUC. Reverting changes.
Training on augumented user 125778 12/50 current_auc = 0.7034208898870553
User 125778 AUC after training: 0.7033753214204341
User 125778 does not improve AUC. Reverting changes.
Training on augumented user 46771 13/50 current_auc = 0.7034208898870553
User 46771 AUC after training: 0.7034599485727304
User 46771 improves AUC. Keeping the model.
Training on augumented user 47404 14/50 current_auc = 0.7034599485727304
User 47404 AUC after training: 0.70338183120138
User 47404 does not improve AUC. Reverting changes.
Training on augumented user 24939 15/50 current_auc = 0.7034599485727304
User 24939 AUC after training: 0.7034143801061095
User 24939 does not improve AUC. Reverting changes.
Training on augumented user 94505 16/50 current_auc = 0.7034599485727304
User 94505 AUC after training: 0.7030758714969241
User 94505 does not improve AUC. Reverting changes.
Training on augumented user 58778 17/50 current_auc = 0.7034599485727304
User 58778 AUC after training: 0.7033492822966507
User 58778 does not improve AUC. Reverting changes.
Training on augumented user 121394 18/50 current_auc = 0.7034599485727304
User 121394 AUC after training: 0.703238616020571
User 121394 does not improve AUC. Reverting changes.
Training on augumented user 42946 19/50 current_auc = 0.7034599485727304
User 42946 AUC after training: 0.703186537773004
User 42946 does not improve AUC. Reverting changes.
Training on augumented user 23333 20/50 current_auc = 0.7034599485727304
User 23333 AUC after training: 0.7027080688734825
User 23333 does not improve AUC. Reverting changes.
Training on augumented user 87949 21/50 current_auc = 0.7034599485727304
User 87949 AUC after training: 0.7035087719298246
User 87949 improves AUC. Keeping the model.
Training on augumented user 78025 22/50 current_auc = 0.7035087719298246
User 78025 AUC after training: 0.703232106239625
User 78025 does not improve AUC. Reverting changes.
Training on augumented user 123903 23/50 current_auc = 0.7035087719298246
User 123903 AUC after training: 0.7035217914917162
User 123903 improves AUC. Keeping the model.
Training on augumented user 233 24/50 current_auc = 0.7035217914917162
User 233 AUC after training: 0.7034078703251636
User 233 does not improve AUC. Reverting changes.
Training on augumented user 8296 25/50 current_auc = 0.7035217914917162
User 8296 AUC after training: 0.7035217914917163
User 8296 improves AUC. Keeping the model.
Training on augumented user 53184 26/50 current_auc = 0.7035217914917163
User 53184 AUC after training: 0.7035738697392833
User 53184 improves AUC. Keeping the model.
Training on augumented user 108062 27/50 current_auc = 0.7035738697392833
User 108062 AUC after training: 0.7035152817107704
User 108062 does not improve AUC. Reverting changes.
Training on augumented user 9202 28/50 current_auc = 0.7035738697392833
User 9202 AUC after training: 0.703834260977118
User 9202 improves AUC. Keeping the model.
Training on augumented user 89766 29/50 current_auc = 0.703834260977118
User 89766 AUC after training: 0.7040393190769132
User 89766 improves AUC. Keeping the model.
Training on augumented user 29769 30/50 current_auc = 0.7040393190769132
User 29769 AUC after training: 0.704195553819614
User 29769 improves AUC. Keeping the model.
Training on augumented user 118290 31/50 current_auc = 0.704195553819614
User 118290 AUC after training: 0.7042150831624516
User 118290 improves AUC. Keeping the model.
Training on augumented user 78139 32/50 current_auc = 0.7042150831624516
User 78139 AUC after training: 0.704097907105426
User 78139 does not improve AUC. Reverting changes.
Training on augumented user 73482 33/50 current_auc = 0.7042150831624516
User 73482 AUC after training: 0.7037659082771864
User 73482 does not improve AUC. Reverting changes.
Training on augumented user 132128 34/50 current_auc = 0.7042150831624516
User 132128 AUC after training: 0.7040718679816423
User 132128 does not improve AUC. Reverting changes.
Training on augumented user 105144 35/50 current_auc = 0.7042150831624516
User 105144 AUC after training: 0.7035901441916479
User 105144 does not improve AUC. Reverting changes.
Training on augumented user 68444 36/50 current_auc = 0.7042150831624516
User 68444 AUC after training: 0.7042801809719104
User 68444 improves AUC. Keeping the model.
Training on augumented user 39915 37/50 current_auc = 0.7042801809719104
User 39915 AUC after training: 0.7040132799531296
User 39915 does not improve AUC. Reverting changes.
Training on augumented user 16959 38/50 current_auc = 0.7042801809719104
User 16959 AUC after training: 0.703941672362725
User 16959 does not improve AUC. Reverting changes.
Training on augumented user 77021 39/50 current_auc = 0.7042801809719104
User 77021 AUC after training: 0.7042085733815058
User 77021 does not improve AUC. Reverting changes.
Training on augumented user 61009 40/50 current_auc = 0.7042801809719104
User 61009 AUC after training: 0.7043127298766396
User 61009 improves AUC. Keeping the model.
Training on augumented user 11180 41/50 current_auc = 0.7043127298766396
User 11180 AUC after training: 0.7042541418481267
User 11180 does not improve AUC. Reverting changes.
Training on augumented user 102847 42/50 current_auc = 0.7043127298766396
User 102847 AUC after training: 0.704039319076913
User 102847 does not improve AUC. Reverting changes.
Training on augumented user 11778 43/50 current_auc = 0.7043127298766396
User 11778 AUC after training: 0.7041304560101552
User 11778 does not improve AUC. Reverting changes.
Training on augumented user 106535 44/50 current_auc = 0.7043127298766396
User 106535 AUC after training: 0.7041890440386681
User 106535 does not improve AUC. Reverting changes.
Training on augumented user 42639 45/50 current_auc = 0.7043127298766396
User 42639 AUC after training: 0.7034957523679328
User 42639 does not improve AUC. Reverting changes.
Training on augumented user 85725 46/50 current_auc = 0.7043127298766396
User 85725 AUC after training: 0.7040848875435342
User 85725 does not improve AUC. Reverting changes.
Training on augumented user 106370 47/50 current_auc = 0.7043127298766396
User 106370 AUC after training: 0.7042281027243433
User 106370 does not improve AUC. Reverting changes.
Training on augumented user 8052 48/50 current_auc = 0.7043127298766396
User 8052 AUC after training: 0.7042801809719104
User 8052 does not improve AUC. Reverting changes.
Training on augumented user 21680 49/50 current_auc = 0.7043127298766396
User 21680 AUC after training: 0.7042085733815057
User 21680 does not improve AUC. Reverting changes.
[2024-12-02 18:04:39.261283] start test user 83964 50/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:04:39.747842] start test user 83964 50/568 recall augumented users by random, augumented_users = [82358, 27659, 111162, 79712, 79303, 54959, 130374, 91653, 130436, 92043, 105668, 15603, 21085, 2590, 62685, 15918, 36317, 2995, 114977, 19658, 109003, 97892, 80736, 54715, 116618, 5604, 117146, 113523, 18574, 102316, 66944, 26432, 30942, 90172, 4634, 100551, 31510, 41897, 81921, 89613, 12448, 35654, 99688, 55167, 127256, 78217, 28692, 76850, 60588, 120827]
[2024-12-02 18:04:39.768795] user = 83964 Cloud 50/568
[2024-12-02 18:04:39.789345] user = 83964 Local 50/568
[2024-12-02 18:04:39.851080] user = 83964 Local+ 50/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:04:42.735360] user = 83964 MPDA- 50/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6934414148857775
Training on augumented user 82358 0/50 current_auc = 0.6934414148857775
User 82358 AUC after training: 0.6919675755342667
User 82358 does not improve AUC. Reverting changes.
Training on augumented user 27659 1/50 current_auc = 0.6934414148857775
User 27659 AUC after training: 0.6934414148857775
User 27659 does not improve AUC. Reverting changes.
Training on augumented user 111162 2/50 current_auc = 0.6934414148857775
User 111162 AUC after training: 0.6927044952100221
User 111162 does not improve AUC. Reverting changes.
Training on augumented user 79712 3/50 current_auc = 0.6934414148857775
User 79712 AUC after training: 0.6927044952100221
User 79712 does not improve AUC. Reverting changes.
Training on augumented user 79303 4/50 current_auc = 0.6934414148857775
User 79303 AUC after training: 0.6927044952100221
User 79303 does not improve AUC. Reverting changes.
Training on augumented user 54959 5/50 current_auc = 0.6934414148857775
User 54959 AUC after training: 0.6934414148857775
User 54959 does not improve AUC. Reverting changes.
Training on augumented user 130374 6/50 current_auc = 0.6934414148857775
User 130374 AUC after training: 0.6927044952100221
User 130374 does not improve AUC. Reverting changes.
Training on augumented user 91653 7/50 current_auc = 0.6934414148857775
User 91653 AUC after training: 0.6934414148857775
User 91653 does not improve AUC. Reverting changes.
Training on augumented user 130436 8/50 current_auc = 0.6934414148857775
User 130436 AUC after training: 0.6934414148857775
User 130436 does not improve AUC. Reverting changes.
Training on augumented user 92043 9/50 current_auc = 0.6934414148857775
User 92043 AUC after training: 0.6927044952100221
User 92043 does not improve AUC. Reverting changes.
Training on augumented user 105668 10/50 current_auc = 0.6934414148857775
User 105668 AUC after training: 0.6919675755342667
User 105668 does not improve AUC. Reverting changes.
Training on augumented user 15603 11/50 current_auc = 0.6934414148857775
User 15603 AUC after training: 0.6934414148857775
User 15603 does not improve AUC. Reverting changes.
Training on augumented user 21085 12/50 current_auc = 0.6934414148857775
User 21085 AUC after training: 0.6934414148857775
User 21085 does not improve AUC. Reverting changes.
Training on augumented user 2590 13/50 current_auc = 0.6934414148857775
User 2590 AUC after training: 0.6927044952100221
User 2590 does not improve AUC. Reverting changes.
Training on augumented user 62685 14/50 current_auc = 0.6934414148857775
User 62685 AUC after training: 0.6934414148857775
User 62685 does not improve AUC. Reverting changes.
Training on augumented user 15918 15/50 current_auc = 0.6934414148857775
User 15918 AUC after training: 0.6919675755342667
User 15918 does not improve AUC. Reverting changes.
Training on augumented user 36317 16/50 current_auc = 0.6934414148857775
User 36317 AUC after training: 0.6904937361827561
User 36317 does not improve AUC. Reverting changes.
Training on augumented user 2995 17/50 current_auc = 0.6934414148857775
User 2995 AUC after training: 0.6904937361827561
User 2995 does not improve AUC. Reverting changes.
Training on augumented user 114977 18/50 current_auc = 0.6934414148857775
User 114977 AUC after training: 0.6927044952100221
User 114977 does not improve AUC. Reverting changes.
Training on augumented user 19658 19/50 current_auc = 0.6934414148857775
User 19658 AUC after training: 0.6934414148857775
User 19658 does not improve AUC. Reverting changes.
Training on augumented user 109003 20/50 current_auc = 0.6934414148857775
User 109003 AUC after training: 0.6934414148857775
User 109003 does not improve AUC. Reverting changes.
Training on augumented user 97892 21/50 current_auc = 0.6934414148857775
User 97892 AUC after training: 0.6927044952100221
User 97892 does not improve AUC. Reverting changes.
Training on augumented user 80736 22/50 current_auc = 0.6934414148857775
User 80736 AUC after training: 0.6927044952100221
User 80736 does not improve AUC. Reverting changes.
Training on augumented user 54715 23/50 current_auc = 0.6934414148857775
User 54715 AUC after training: 0.6927044952100221
User 54715 does not improve AUC. Reverting changes.
Training on augumented user 116618 24/50 current_auc = 0.6934414148857775
User 116618 AUC after training: 0.6934414148857775
User 116618 does not improve AUC. Reverting changes.
Training on augumented user 5604 25/50 current_auc = 0.6934414148857775
User 5604 AUC after training: 0.6941783345615327
User 5604 improves AUC. Keeping the model.
Training on augumented user 117146 26/50 current_auc = 0.6941783345615327
User 117146 AUC after training: 0.6927044952100221
User 117146 does not improve AUC. Reverting changes.
Training on augumented user 113523 27/50 current_auc = 0.6941783345615327
User 113523 AUC after training: 0.6963890935887989
User 113523 improves AUC. Keeping the model.
Training on augumented user 18574 28/50 current_auc = 0.6963890935887989
User 18574 AUC after training: 0.6985998526160648
User 18574 improves AUC. Keeping the model.
Training on augumented user 102316 29/50 current_auc = 0.6985998526160648
User 102316 AUC after training: 0.6978629329403094
User 102316 does not improve AUC. Reverting changes.
Training on augumented user 66944 30/50 current_auc = 0.6985998526160648
User 66944 AUC after training: 0.6927044952100221
User 66944 does not improve AUC. Reverting changes.
Training on augumented user 26432 31/50 current_auc = 0.6985998526160648
User 26432 AUC after training: 0.6971260132645541
User 26432 does not improve AUC. Reverting changes.
Training on augumented user 30942 32/50 current_auc = 0.6985998526160648
User 30942 AUC after training: 0.6963890935887989
User 30942 does not improve AUC. Reverting changes.
Training on augumented user 90172 33/50 current_auc = 0.6985998526160648
User 90172 AUC after training: 0.6971260132645543
User 90172 does not improve AUC. Reverting changes.
Training on augumented user 4634 34/50 current_auc = 0.6985998526160648
User 4634 AUC after training: 0.6978629329403095
User 4634 does not improve AUC. Reverting changes.
Training on augumented user 100551 35/50 current_auc = 0.6985998526160648
User 100551 AUC after training: 0.6978629329403094
User 100551 does not improve AUC. Reverting changes.
Training on augumented user 31510 36/50 current_auc = 0.6985998526160648
User 31510 AUC after training: 0.6985998526160648
User 31510 does not improve AUC. Reverting changes.
Training on augumented user 41897 37/50 current_auc = 0.6985998526160648
User 41897 AUC after training: 0.6985998526160648
User 41897 does not improve AUC. Reverting changes.
Training on augumented user 81921 38/50 current_auc = 0.6985998526160648
User 81921 AUC after training: 0.6949152542372881
User 81921 does not improve AUC. Reverting changes.
Training on augumented user 89613 39/50 current_auc = 0.6985998526160648
User 89613 AUC after training: 0.6978629329403094
User 89613 does not improve AUC. Reverting changes.
Training on augumented user 12448 40/50 current_auc = 0.6985998526160648
User 12448 AUC after training: 0.6978629329403094
User 12448 does not improve AUC. Reverting changes.
Training on augumented user 35654 41/50 current_auc = 0.6985998526160648
User 35654 AUC after training: 0.6985998526160648
User 35654 does not improve AUC. Reverting changes.
Training on augumented user 99688 42/50 current_auc = 0.6985998526160648
User 99688 AUC after training: 0.6978629329403094
User 99688 does not improve AUC. Reverting changes.
Training on augumented user 55167 43/50 current_auc = 0.6985998526160648
User 55167 AUC after training: 0.6971260132645543
User 55167 does not improve AUC. Reverting changes.
Training on augumented user 127256 44/50 current_auc = 0.6985998526160648
User 127256 AUC after training: 0.6949152542372881
User 127256 does not improve AUC. Reverting changes.
Training on augumented user 78217 45/50 current_auc = 0.6985998526160648
User 78217 AUC after training: 0.6978629329403094
User 78217 does not improve AUC. Reverting changes.
Training on augumented user 28692 46/50 current_auc = 0.6985998526160648
User 28692 AUC after training: 0.6993367722918202
User 28692 improves AUC. Keeping the model.
Training on augumented user 76850 47/50 current_auc = 0.6993367722918202
User 76850 AUC after training: 0.6978629329403094
User 76850 does not improve AUC. Reverting changes.
Training on augumented user 60588 48/50 current_auc = 0.6993367722918202
User 60588 AUC after training: 0.6985998526160648
User 60588 does not improve AUC. Reverting changes.
Training on augumented user 120827 49/50 current_auc = 0.6993367722918202
User 120827 AUC after training: 0.6993367722918202
User 120827 does not improve AUC. Reverting changes.
[2024-12-02 18:05:12.463759] start test user 83978 51/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:05:12.904449] start test user 83978 51/568 recall augumented users by random, augumented_users = [123419, 106902, 42904, 78321, 135096, 77759, 120423, 51665, 18911, 109283, 20216, 97433, 41090, 129586, 8315, 39912, 41568, 76019, 37333, 124278, 92631, 15447, 25984, 13643, 46122, 95371, 130886, 110609, 61662, 33124, 92304, 1473, 131322, 34902, 88688, 64230, 127840, 115551, 86178, 10979, 17763, 22466, 22404, 130005, 6792, 30316, 128359, 36011, 18645, 84893]
[2024-12-02 18:05:12.918369] user = 83978 Cloud 51/568
[2024-12-02 18:05:12.929126] user = 83978 Local 51/568
[2024-12-02 18:05:12.952508] user = 83978 Local+ 51/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:05:16.354062] user = 83978 MPDA- 51/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.53515625
Training on augumented user 123419 0/50 current_auc = 0.53515625
User 123419 AUC after training: 0.537109375
User 123419 improves AUC. Keeping the model.
Training on augumented user 106902 1/50 current_auc = 0.537109375
User 106902 AUC after training: 0.537109375
User 106902 does not improve AUC. Reverting changes.
Training on augumented user 42904 2/50 current_auc = 0.537109375
User 42904 AUC after training: 0.533203125
User 42904 does not improve AUC. Reverting changes.
Training on augumented user 78321 3/50 current_auc = 0.537109375
User 78321 AUC after training: 0.537109375
User 78321 does not improve AUC. Reverting changes.
Training on augumented user 135096 4/50 current_auc = 0.537109375
User 135096 AUC after training: 0.53515625
User 135096 does not improve AUC. Reverting changes.
Training on augumented user 77759 5/50 current_auc = 0.537109375
User 77759 AUC after training: 0.537109375
User 77759 does not improve AUC. Reverting changes.
Training on augumented user 120423 6/50 current_auc = 0.537109375
User 120423 AUC after training: 0.53515625
User 120423 does not improve AUC. Reverting changes.
Training on augumented user 51665 7/50 current_auc = 0.537109375
User 51665 AUC after training: 0.537109375
User 51665 does not improve AUC. Reverting changes.
Training on augumented user 18911 8/50 current_auc = 0.537109375
User 18911 AUC after training: 0.537109375
User 18911 does not improve AUC. Reverting changes.
Training on augumented user 109283 9/50 current_auc = 0.537109375
User 109283 AUC after training: 0.53515625
User 109283 does not improve AUC. Reverting changes.
Training on augumented user 20216 10/50 current_auc = 0.537109375
User 20216 AUC after training: 0.533203125
User 20216 does not improve AUC. Reverting changes.
Training on augumented user 97433 11/50 current_auc = 0.537109375
User 97433 AUC after training: 0.533203125
User 97433 does not improve AUC. Reverting changes.
Training on augumented user 41090 12/50 current_auc = 0.537109375
User 41090 AUC after training: 0.533203125
User 41090 does not improve AUC. Reverting changes.
Training on augumented user 129586 13/50 current_auc = 0.537109375
User 129586 AUC after training: 0.53515625
User 129586 does not improve AUC. Reverting changes.
Training on augumented user 8315 14/50 current_auc = 0.537109375
User 8315 AUC after training: 0.533203125
User 8315 does not improve AUC. Reverting changes.
Training on augumented user 39912 15/50 current_auc = 0.537109375
User 39912 AUC after training: 0.53515625
User 39912 does not improve AUC. Reverting changes.
Training on augumented user 41568 16/50 current_auc = 0.537109375
User 41568 AUC after training: 0.53515625
User 41568 does not improve AUC. Reverting changes.
Training on augumented user 76019 17/50 current_auc = 0.537109375
User 76019 AUC after training: 0.53515625
User 76019 does not improve AUC. Reverting changes.
Training on augumented user 37333 18/50 current_auc = 0.537109375
User 37333 AUC after training: 0.529296875
User 37333 does not improve AUC. Reverting changes.
Training on augumented user 124278 19/50 current_auc = 0.537109375
User 124278 AUC after training: 0.537109375
User 124278 does not improve AUC. Reverting changes.
Training on augumented user 92631 20/50 current_auc = 0.537109375
User 92631 AUC after training: 0.53515625
User 92631 does not improve AUC. Reverting changes.
Training on augumented user 15447 21/50 current_auc = 0.537109375
User 15447 AUC after training: 0.5390625
User 15447 improves AUC. Keeping the model.
Training on augumented user 25984 22/50 current_auc = 0.5390625
User 25984 AUC after training: 0.5390625
User 25984 does not improve AUC. Reverting changes.
Training on augumented user 13643 23/50 current_auc = 0.5390625
User 13643 AUC after training: 0.537109375
User 13643 does not improve AUC. Reverting changes.
Training on augumented user 46122 24/50 current_auc = 0.5390625
User 46122 AUC after training: 0.5390625
User 46122 does not improve AUC. Reverting changes.
Training on augumented user 95371 25/50 current_auc = 0.5390625
User 95371 AUC after training: 0.537109375
User 95371 does not improve AUC. Reverting changes.
Training on augumented user 130886 26/50 current_auc = 0.5390625
User 130886 AUC after training: 0.537109375
User 130886 does not improve AUC. Reverting changes.
Training on augumented user 110609 27/50 current_auc = 0.5390625
User 110609 AUC after training: 0.537109375
User 110609 does not improve AUC. Reverting changes.
Training on augumented user 61662 28/50 current_auc = 0.5390625
User 61662 AUC after training: 0.5390625
User 61662 does not improve AUC. Reverting changes.
Training on augumented user 33124 29/50 current_auc = 0.5390625
User 33124 AUC after training: 0.537109375
User 33124 does not improve AUC. Reverting changes.
Training on augumented user 92304 30/50 current_auc = 0.5390625
User 92304 AUC after training: 0.537109375
User 92304 does not improve AUC. Reverting changes.
Training on augumented user 1473 31/50 current_auc = 0.5390625
User 1473 AUC after training: 0.5390625
User 1473 does not improve AUC. Reverting changes.
Training on augumented user 131322 32/50 current_auc = 0.5390625
User 131322 AUC after training: 0.5390625
User 131322 does not improve AUC. Reverting changes.
Training on augumented user 34902 33/50 current_auc = 0.5390625
User 34902 AUC after training: 0.537109375
User 34902 does not improve AUC. Reverting changes.
Training on augumented user 88688 34/50 current_auc = 0.5390625
User 88688 AUC after training: 0.5390625
User 88688 does not improve AUC. Reverting changes.
Training on augumented user 64230 35/50 current_auc = 0.5390625
User 64230 AUC after training: 0.5390625
User 64230 does not improve AUC. Reverting changes.
Training on augumented user 127840 36/50 current_auc = 0.5390625
User 127840 AUC after training: 0.53515625
User 127840 does not improve AUC. Reverting changes.
Training on augumented user 115551 37/50 current_auc = 0.5390625
User 115551 AUC after training: 0.537109375
User 115551 does not improve AUC. Reverting changes.
Training on augumented user 86178 38/50 current_auc = 0.5390625
User 86178 AUC after training: 0.537109375
User 86178 does not improve AUC. Reverting changes.
Training on augumented user 10979 39/50 current_auc = 0.5390625
User 10979 AUC after training: 0.5390625
User 10979 does not improve AUC. Reverting changes.
Training on augumented user 17763 40/50 current_auc = 0.5390625
User 17763 AUC after training: 0.5390625
User 17763 does not improve AUC. Reverting changes.
Training on augumented user 22466 41/50 current_auc = 0.5390625
User 22466 AUC after training: 0.5390625
User 22466 does not improve AUC. Reverting changes.
Training on augumented user 22404 42/50 current_auc = 0.5390625
User 22404 AUC after training: 0.5390625
User 22404 does not improve AUC. Reverting changes.
Training on augumented user 130005 43/50 current_auc = 0.5390625
User 130005 AUC after training: 0.5390625
User 130005 does not improve AUC. Reverting changes.
Training on augumented user 6792 44/50 current_auc = 0.5390625
User 6792 AUC after training: 0.537109375
User 6792 does not improve AUC. Reverting changes.
Training on augumented user 30316 45/50 current_auc = 0.5390625
User 30316 AUC after training: 0.537109375
User 30316 does not improve AUC. Reverting changes.
Training on augumented user 128359 46/50 current_auc = 0.5390625
User 128359 AUC after training: 0.5390625
User 128359 does not improve AUC. Reverting changes.
Training on augumented user 36011 47/50 current_auc = 0.5390625
User 36011 AUC after training: 0.5390625
User 36011 does not improve AUC. Reverting changes.
Training on augumented user 18645 48/50 current_auc = 0.5390625
User 18645 AUC after training: 0.5390625
User 18645 does not improve AUC. Reverting changes.
Training on augumented user 84893 49/50 current_auc = 0.5390625
User 84893 AUC after training: 0.5390625
User 84893 does not improve AUC. Reverting changes.
[2024-12-02 18:05:43.971346] start test user 83981 52/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:05:44.565881] start test user 83981 52/568 recall augumented users by random, augumented_users = [107862, 32339, 110960, 3371, 84008, 90113, 110716, 93058, 41111, 108153, 130271, 126184, 87811, 60226, 123398, 63495, 63999, 19283, 67878, 51223, 30552, 71721, 115215, 113994, 125508, 58110, 10041, 71612, 89515, 16812, 100306, 16035, 108926, 92312, 14137, 71186, 56879, 83452, 118833, 86652, 46047, 129186, 74116, 70328, 92164, 113358, 85011, 13227, 78929, 90409]
[2024-12-02 18:05:44.580271] user = 83981 Cloud 52/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:05:44.593659] user = 83981 Local 52/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:05:44.615042] user = 83981 Local+ 52/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:05:47.107939] user = 83981 MPDA- 52/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 107862 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107862 AUC after training: 0.5
User 107862 does not improve AUC. Reverting changes.
Training on augumented user 32339 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32339 AUC after training: 0.5
User 32339 does not improve AUC. Reverting changes.
Training on augumented user 110960 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110960 AUC after training: 0.5
User 110960 does not improve AUC. Reverting changes.
Training on augumented user 3371 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3371 AUC after training: 0.5
User 3371 does not improve AUC. Reverting changes.
Training on augumented user 84008 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84008 AUC after training: 0.5
User 84008 does not improve AUC. Reverting changes.
Training on augumented user 90113 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90113 AUC after training: 0.5
User 90113 does not improve AUC. Reverting changes.
Training on augumented user 110716 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110716 AUC after training: 0.5
User 110716 does not improve AUC. Reverting changes.
Training on augumented user 93058 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93058 AUC after training: 0.5
User 93058 does not improve AUC. Reverting changes.
Training on augumented user 41111 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41111 AUC after training: 0.5
User 41111 does not improve AUC. Reverting changes.
Training on augumented user 108153 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108153 AUC after training: 0.5
User 108153 does not improve AUC. Reverting changes.
Training on augumented user 130271 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130271 AUC after training: 0.5
User 130271 does not improve AUC. Reverting changes.
Training on augumented user 126184 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126184 AUC after training: 0.5
User 126184 does not improve AUC. Reverting changes.
Training on augumented user 87811 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87811 AUC after training: 0.5
User 87811 does not improve AUC. Reverting changes.
Training on augumented user 60226 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60226 AUC after training: 0.5
User 60226 does not improve AUC. Reverting changes.
Training on augumented user 123398 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123398 AUC after training: 0.5
User 123398 does not improve AUC. Reverting changes.
Training on augumented user 63495 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63495 AUC after training: 0.5
User 63495 does not improve AUC. Reverting changes.
Training on augumented user 63999 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63999 AUC after training: 0.5
User 63999 does not improve AUC. Reverting changes.
Training on augumented user 19283 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19283 AUC after training: 0.5
User 19283 does not improve AUC. Reverting changes.
Training on augumented user 67878 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67878 AUC after training: 0.5
User 67878 does not improve AUC. Reverting changes.
Training on augumented user 51223 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51223 AUC after training: 0.5
User 51223 does not improve AUC. Reverting changes.
Training on augumented user 30552 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30552 AUC after training: 0.5
User 30552 does not improve AUC. Reverting changes.
Training on augumented user 71721 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71721 AUC after training: 0.5
User 71721 does not improve AUC. Reverting changes.
Training on augumented user 115215 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115215 AUC after training: 0.5
User 115215 does not improve AUC. Reverting changes.
Training on augumented user 113994 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113994 AUC after training: 0.5
User 113994 does not improve AUC. Reverting changes.
Training on augumented user 125508 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125508 AUC after training: 0.5
User 125508 does not improve AUC. Reverting changes.
Training on augumented user 58110 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58110 AUC after training: 0.5
User 58110 does not improve AUC. Reverting changes.
Training on augumented user 10041 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10041 AUC after training: 0.5
User 10041 does not improve AUC. Reverting changes.
Training on augumented user 71612 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71612 AUC after training: 0.5
User 71612 does not improve AUC. Reverting changes.
Training on augumented user 89515 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89515 AUC after training: 0.5
User 89515 does not improve AUC. Reverting changes.
Training on augumented user 16812 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16812 AUC after training: 0.5
User 16812 does not improve AUC. Reverting changes.
Training on augumented user 100306 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100306 AUC after training: 0.5
User 100306 does not improve AUC. Reverting changes.
Training on augumented user 16035 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16035 AUC after training: 0.5
User 16035 does not improve AUC. Reverting changes.
Training on augumented user 108926 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108926 AUC after training: 0.5
User 108926 does not improve AUC. Reverting changes.
Training on augumented user 92312 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92312 AUC after training: 0.5
User 92312 does not improve AUC. Reverting changes.
Training on augumented user 14137 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14137 AUC after training: 0.5
User 14137 does not improve AUC. Reverting changes.
Training on augumented user 71186 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71186 AUC after training: 0.5
User 71186 does not improve AUC. Reverting changes.
Training on augumented user 56879 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56879 AUC after training: 0.5
User 56879 does not improve AUC. Reverting changes.
Training on augumented user 83452 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83452 AUC after training: 0.5
User 83452 does not improve AUC. Reverting changes.
Training on augumented user 118833 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118833 AUC after training: 0.5
User 118833 does not improve AUC. Reverting changes.
Training on augumented user 86652 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86652 AUC after training: 0.5
User 86652 does not improve AUC. Reverting changes.
Training on augumented user 46047 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46047 AUC after training: 0.5
User 46047 does not improve AUC. Reverting changes.
Training on augumented user 129186 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129186 AUC after training: 0.5
User 129186 does not improve AUC. Reverting changes.
Training on augumented user 74116 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74116 AUC after training: 0.5
User 74116 does not improve AUC. Reverting changes.
Training on augumented user 70328 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70328 AUC after training: 0.5
User 70328 does not improve AUC. Reverting changes.
Training on augumented user 92164 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92164 AUC after training: 0.5
User 92164 does not improve AUC. Reverting changes.
Training on augumented user 113358 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113358 AUC after training: 0.5
User 113358 does not improve AUC. Reverting changes.
Training on augumented user 85011 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85011 AUC after training: 0.5
User 85011 does not improve AUC. Reverting changes.
Training on augumented user 13227 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13227 AUC after training: 0.5
User 13227 does not improve AUC. Reverting changes.
Training on augumented user 78929 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78929 AUC after training: 0.5
User 78929 does not improve AUC. Reverting changes.
Training on augumented user 90409 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90409 AUC after training: 0.5
User 90409 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:06:16.450510] start test user 83982 53/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:06:16.868870] start test user 83982 53/568 recall augumented users by random, augumented_users = [128533, 22426, 133926, 16613, 33816, 92371, 96622, 32070, 35029, 126023, 80209, 18213, 80000, 78574, 61941, 121212, 92630, 132096, 121245, 32285, 118808, 127356, 32797, 123137, 48157, 117520, 116980, 134868, 111052, 41274, 55058, 53690, 92628, 39055, 71793, 14295, 88320, 97240, 57297, 96196, 68630, 10633, 107149, 124392, 67126, 71374, 110811, 117093, 91351, 115600]
[2024-12-02 18:06:16.884033] user = 83982 Cloud 53/568
[2024-12-02 18:06:16.898421] user = 83982 Local 53/568
[2024-12-02 18:06:16.994520] user = 83982 Local+ 53/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:06:19.463252] user = 83982 MPDA- 53/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6829931972789115
Training on augumented user 128533 0/50 current_auc = 0.6829931972789115
User 128533 AUC after training: 0.6840136054421769
User 128533 improves AUC. Keeping the model.
Training on augumented user 22426 1/50 current_auc = 0.6840136054421769
User 22426 AUC after training: 0.6833333333333332
User 22426 does not improve AUC. Reverting changes.
Training on augumented user 133926 2/50 current_auc = 0.6840136054421769
User 133926 AUC after training: 0.6823129251700681
User 133926 does not improve AUC. Reverting changes.
Training on augumented user 16613 3/50 current_auc = 0.6840136054421769
User 16613 AUC after training: 0.6816326530612246
User 16613 does not improve AUC. Reverting changes.
Training on augumented user 33816 4/50 current_auc = 0.6840136054421769
User 33816 AUC after training: 0.6826530612244898
User 33816 does not improve AUC. Reverting changes.
Training on augumented user 92371 5/50 current_auc = 0.6840136054421769
User 92371 AUC after training: 0.6826530612244898
User 92371 does not improve AUC. Reverting changes.
Training on augumented user 96622 6/50 current_auc = 0.6840136054421769
User 96622 AUC after training: 0.6782312925170069
User 96622 does not improve AUC. Reverting changes.
Training on augumented user 32070 7/50 current_auc = 0.6840136054421769
User 32070 AUC after training: 0.682312925170068
User 32070 does not improve AUC. Reverting changes.
Training on augumented user 35029 8/50 current_auc = 0.6840136054421769
User 35029 AUC after training: 0.682312925170068
User 35029 does not improve AUC. Reverting changes.
Training on augumented user 126023 9/50 current_auc = 0.6840136054421769
User 126023 AUC after training: 0.6826530612244898
User 126023 does not improve AUC. Reverting changes.
Training on augumented user 80209 10/50 current_auc = 0.6840136054421769
User 80209 AUC after training: 0.682312925170068
User 80209 does not improve AUC. Reverting changes.
Training on augumented user 18213 11/50 current_auc = 0.6840136054421769
User 18213 AUC after training: 0.6833333333333333
User 18213 does not improve AUC. Reverting changes.
Training on augumented user 80000 12/50 current_auc = 0.6840136054421769
User 80000 AUC after training: 0.6833333333333332
User 80000 does not improve AUC. Reverting changes.
Training on augumented user 78574 13/50 current_auc = 0.6840136054421769
User 78574 AUC after training: 0.6863945578231293
User 78574 improves AUC. Keeping the model.
Training on augumented user 61941 14/50 current_auc = 0.6863945578231293
User 61941 AUC after training: 0.6846938775510204
User 61941 does not improve AUC. Reverting changes.
Training on augumented user 121212 15/50 current_auc = 0.6863945578231293
User 121212 AUC after training: 0.6863945578231293
User 121212 does not improve AUC. Reverting changes.
Training on augumented user 92630 16/50 current_auc = 0.6863945578231293
User 92630 AUC after training: 0.6863945578231293
User 92630 does not improve AUC. Reverting changes.
Training on augumented user 132096 17/50 current_auc = 0.6863945578231293
User 132096 AUC after training: 0.6857142857142857
User 132096 does not improve AUC. Reverting changes.
Training on augumented user 121245 18/50 current_auc = 0.6863945578231293
User 121245 AUC after training: 0.6850340136054421
User 121245 does not improve AUC. Reverting changes.
Training on augumented user 32285 19/50 current_auc = 0.6863945578231293
User 32285 AUC after training: 0.6829931972789115
User 32285 does not improve AUC. Reverting changes.
Training on augumented user 118808 20/50 current_auc = 0.6863945578231293
User 118808 AUC after training: 0.6843537414965987
User 118808 does not improve AUC. Reverting changes.
Training on augumented user 127356 21/50 current_auc = 0.6863945578231293
User 127356 AUC after training: 0.6850340136054421
User 127356 does not improve AUC. Reverting changes.
Training on augumented user 32797 22/50 current_auc = 0.6863945578231293
User 32797 AUC after training: 0.6816326530612244
User 32797 does not improve AUC. Reverting changes.
Training on augumented user 123137 23/50 current_auc = 0.6863945578231293
User 123137 AUC after training: 0.6843537414965987
User 123137 does not improve AUC. Reverting changes.
Training on augumented user 48157 24/50 current_auc = 0.6863945578231293
User 48157 AUC after training: 0.682312925170068
User 48157 does not improve AUC. Reverting changes.
Training on augumented user 117520 25/50 current_auc = 0.6863945578231293
User 117520 AUC after training: 0.6863945578231293
User 117520 does not improve AUC. Reverting changes.
Training on augumented user 116980 26/50 current_auc = 0.6863945578231293
User 116980 AUC after training: 0.6857142857142857
User 116980 does not improve AUC. Reverting changes.
Training on augumented user 134868 27/50 current_auc = 0.6863945578231293
User 134868 AUC after training: 0.6863945578231293
User 134868 does not improve AUC. Reverting changes.
Training on augumented user 111052 28/50 current_auc = 0.6863945578231293
User 111052 AUC after training: 0.680952380952381
User 111052 does not improve AUC. Reverting changes.
Training on augumented user 41274 29/50 current_auc = 0.6863945578231293
User 41274 AUC after training: 0.6853741496598639
User 41274 does not improve AUC. Reverting changes.
Training on augumented user 55058 30/50 current_auc = 0.6863945578231293
User 55058 AUC after training: 0.682312925170068
User 55058 does not improve AUC. Reverting changes.
Training on augumented user 53690 31/50 current_auc = 0.6863945578231293
User 53690 AUC after training: 0.6843537414965987
User 53690 does not improve AUC. Reverting changes.
Training on augumented user 92628 32/50 current_auc = 0.6863945578231293
User 92628 AUC after training: 0.6833333333333333
User 92628 does not improve AUC. Reverting changes.
Training on augumented user 39055 33/50 current_auc = 0.6863945578231293
User 39055 AUC after training: 0.6857142857142857
User 39055 does not improve AUC. Reverting changes.
Training on augumented user 71793 34/50 current_auc = 0.6863945578231293
User 71793 AUC after training: 0.6850340136054421
User 71793 does not improve AUC. Reverting changes.
Training on augumented user 14295 35/50 current_auc = 0.6863945578231293
User 14295 AUC after training: 0.6870748299319728
User 14295 improves AUC. Keeping the model.
Training on augumented user 88320 36/50 current_auc = 0.6870748299319728
User 88320 AUC after training: 0.682312925170068
User 88320 does not improve AUC. Reverting changes.
Training on augumented user 97240 37/50 current_auc = 0.6870748299319728
User 97240 AUC after training: 0.685374149659864
User 97240 does not improve AUC. Reverting changes.
Training on augumented user 57297 38/50 current_auc = 0.6870748299319728
User 57297 AUC after training: 0.685374149659864
User 57297 does not improve AUC. Reverting changes.
Training on augumented user 96196 39/50 current_auc = 0.6870748299319728
User 96196 AUC after training: 0.6850340136054421
User 96196 does not improve AUC. Reverting changes.
Training on augumented user 68630 40/50 current_auc = 0.6870748299319728
User 68630 AUC after training: 0.6863945578231293
User 68630 does not improve AUC. Reverting changes.
Training on augumented user 10633 41/50 current_auc = 0.6870748299319728
User 10633 AUC after training: 0.6853741496598639
User 10633 does not improve AUC. Reverting changes.
Training on augumented user 107149 42/50 current_auc = 0.6870748299319728
User 107149 AUC after training: 0.6863945578231293
User 107149 does not improve AUC. Reverting changes.
Training on augumented user 124392 43/50 current_auc = 0.6870748299319728
User 124392 AUC after training: 0.6863945578231292
User 124392 does not improve AUC. Reverting changes.
Training on augumented user 67126 44/50 current_auc = 0.6870748299319728
User 67126 AUC after training: 0.6846938775510204
User 67126 does not improve AUC. Reverting changes.
Training on augumented user 71374 45/50 current_auc = 0.6870748299319728
User 71374 AUC after training: 0.6863945578231292
User 71374 does not improve AUC. Reverting changes.
Training on augumented user 110811 46/50 current_auc = 0.6870748299319728
User 110811 AUC after training: 0.6863945578231292
User 110811 does not improve AUC. Reverting changes.
Training on augumented user 117093 47/50 current_auc = 0.6870748299319728
User 117093 AUC after training: 0.6870748299319728
User 117093 does not improve AUC. Reverting changes.
Training on augumented user 91351 48/50 current_auc = 0.6870748299319728
User 91351 AUC after training: 0.6870748299319728
User 91351 does not improve AUC. Reverting changes.
Training on augumented user 115600 49/50 current_auc = 0.6870748299319728
User 115600 AUC after training: 0.6870748299319728
User 115600 does not improve AUC. Reverting changes.
[2024-12-02 18:06:44.536441] start test user 84046 54/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:06:45.421385] start test user 84046 54/568 recall augumented users by random, augumented_users = [93118, 122605, 66317, 64139, 8258, 57172, 23296, 8334, 48038, 103544, 90805, 8745, 22486, 128722, 108748, 22584, 84211, 107819, 97532, 9792, 123100, 78688, 34382, 65746, 89207, 88390, 30990, 104530, 12418, 63570, 110121, 132970, 11197, 122636, 58610, 117870, 87497, 122888, 112965, 114572, 107281, 114927, 37331, 65200, 8103, 81375, 100778, 76268, 74008, 71798]
[2024-12-02 18:06:45.436759] user = 84046 Cloud 54/568
[2024-12-02 18:06:45.448476] user = 84046 Local 54/568
[2024-12-02 18:06:45.470310] user = 84046 Local+ 54/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:06:48.438598] user = 84046 MPDA- 54/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7466666666666667
Training on augumented user 93118 0/50 current_auc = 0.7466666666666667
User 93118 AUC after training: 0.7466666666666667
User 93118 does not improve AUC. Reverting changes.
Training on augumented user 122605 1/50 current_auc = 0.7466666666666667
User 122605 AUC after training: 0.7466666666666667
User 122605 does not improve AUC. Reverting changes.
Training on augumented user 66317 2/50 current_auc = 0.7466666666666667
User 66317 AUC after training: 0.76
User 66317 improves AUC. Keeping the model.
Training on augumented user 64139 3/50 current_auc = 0.76
User 64139 AUC after training: 0.76
User 64139 does not improve AUC. Reverting changes.
Training on augumented user 8258 4/50 current_auc = 0.76
User 8258 AUC after training: 0.76
User 8258 does not improve AUC. Reverting changes.
Training on augumented user 57172 5/50 current_auc = 0.76
User 57172 AUC after training: 0.76
User 57172 does not improve AUC. Reverting changes.
Training on augumented user 23296 6/50 current_auc = 0.76
User 23296 AUC after training: 0.7533333333333334
User 23296 does not improve AUC. Reverting changes.
Training on augumented user 8334 7/50 current_auc = 0.76
User 8334 AUC after training: 0.76
User 8334 does not improve AUC. Reverting changes.
Training on augumented user 48038 8/50 current_auc = 0.76
User 48038 AUC after training: 0.7666666666666666
User 48038 improves AUC. Keeping the model.
Training on augumented user 103544 9/50 current_auc = 0.7666666666666666
User 103544 AUC after training: 0.7733333333333333
User 103544 improves AUC. Keeping the model.
Training on augumented user 90805 10/50 current_auc = 0.7733333333333333
User 90805 AUC after training: 0.7666666666666666
User 90805 does not improve AUC. Reverting changes.
Training on augumented user 8745 11/50 current_auc = 0.7733333333333333
User 8745 AUC after training: 0.7666666666666666
User 8745 does not improve AUC. Reverting changes.
Training on augumented user 22486 12/50 current_auc = 0.7733333333333333
User 22486 AUC after training: 0.7666666666666666
User 22486 does not improve AUC. Reverting changes.
Training on augumented user 128722 13/50 current_auc = 0.7733333333333333
User 128722 AUC after training: 0.7666666666666666
User 128722 does not improve AUC. Reverting changes.
Training on augumented user 108748 14/50 current_auc = 0.7733333333333333
User 108748 AUC after training: 0.7666666666666666
User 108748 does not improve AUC. Reverting changes.
Training on augumented user 22584 15/50 current_auc = 0.7733333333333333
User 22584 AUC after training: 0.7733333333333333
User 22584 does not improve AUC. Reverting changes.
Training on augumented user 84211 16/50 current_auc = 0.7733333333333333
User 84211 AUC after training: 0.7666666666666666
User 84211 does not improve AUC. Reverting changes.
Training on augumented user 107819 17/50 current_auc = 0.7733333333333333
User 107819 AUC after training: 0.7733333333333333
User 107819 does not improve AUC. Reverting changes.
Training on augumented user 97532 18/50 current_auc = 0.7733333333333333
User 97532 AUC after training: 0.7733333333333333
User 97532 does not improve AUC. Reverting changes.
Training on augumented user 9792 19/50 current_auc = 0.7733333333333333
User 9792 AUC after training: 0.7733333333333333
User 9792 does not improve AUC. Reverting changes.
Training on augumented user 123100 20/50 current_auc = 0.7733333333333333
User 123100 AUC after training: 0.7733333333333333
User 123100 does not improve AUC. Reverting changes.
Training on augumented user 78688 21/50 current_auc = 0.7733333333333333
User 78688 AUC after training: 0.7733333333333333
User 78688 does not improve AUC. Reverting changes.
Training on augumented user 34382 22/50 current_auc = 0.7733333333333333
User 34382 AUC after training: 0.7666666666666666
User 34382 does not improve AUC. Reverting changes.
Training on augumented user 65746 23/50 current_auc = 0.7733333333333333
User 65746 AUC after training: 0.7666666666666666
User 65746 does not improve AUC. Reverting changes.
Training on augumented user 89207 24/50 current_auc = 0.7733333333333333
User 89207 AUC after training: 0.7733333333333333
User 89207 does not improve AUC. Reverting changes.
Training on augumented user 88390 25/50 current_auc = 0.7733333333333333
User 88390 AUC after training: 0.7666666666666666
User 88390 does not improve AUC. Reverting changes.
Training on augumented user 30990 26/50 current_auc = 0.7733333333333333
User 30990 AUC after training: 0.7733333333333333
User 30990 does not improve AUC. Reverting changes.
Training on augumented user 104530 27/50 current_auc = 0.7733333333333333
User 104530 AUC after training: 0.7666666666666666
User 104530 does not improve AUC. Reverting changes.
Training on augumented user 12418 28/50 current_auc = 0.7733333333333333
User 12418 AUC after training: 0.7666666666666666
User 12418 does not improve AUC. Reverting changes.
Training on augumented user 63570 29/50 current_auc = 0.7733333333333333
User 63570 AUC after training: 0.7666666666666666
User 63570 does not improve AUC. Reverting changes.
Training on augumented user 110121 30/50 current_auc = 0.7733333333333333
User 110121 AUC after training: 0.7666666666666666
User 110121 does not improve AUC. Reverting changes.
Training on augumented user 132970 31/50 current_auc = 0.7733333333333333
User 132970 AUC after training: 0.7666666666666666
User 132970 does not improve AUC. Reverting changes.
Training on augumented user 11197 32/50 current_auc = 0.7733333333333333
User 11197 AUC after training: 0.7733333333333333
User 11197 does not improve AUC. Reverting changes.
Training on augumented user 122636 33/50 current_auc = 0.7733333333333333
User 122636 AUC after training: 0.7666666666666666
User 122636 does not improve AUC. Reverting changes.
Training on augumented user 58610 34/50 current_auc = 0.7733333333333333
User 58610 AUC after training: 0.7733333333333333
User 58610 does not improve AUC. Reverting changes.
Training on augumented user 117870 35/50 current_auc = 0.7733333333333333
User 117870 AUC after training: 0.76
User 117870 does not improve AUC. Reverting changes.
Training on augumented user 87497 36/50 current_auc = 0.7733333333333333
User 87497 AUC after training: 0.7733333333333333
User 87497 does not improve AUC. Reverting changes.
Training on augumented user 122888 37/50 current_auc = 0.7733333333333333
User 122888 AUC after training: 0.7733333333333333
User 122888 does not improve AUC. Reverting changes.
Training on augumented user 112965 38/50 current_auc = 0.7733333333333333
User 112965 AUC after training: 0.7666666666666666
User 112965 does not improve AUC. Reverting changes.
Training on augumented user 114572 39/50 current_auc = 0.7733333333333333
User 114572 AUC after training: 0.7733333333333333
User 114572 does not improve AUC. Reverting changes.
Training on augumented user 107281 40/50 current_auc = 0.7733333333333333
User 107281 AUC after training: 0.7666666666666666
User 107281 does not improve AUC. Reverting changes.
Training on augumented user 114927 41/50 current_auc = 0.7733333333333333
User 114927 AUC after training: 0.7666666666666666
User 114927 does not improve AUC. Reverting changes.
Training on augumented user 37331 42/50 current_auc = 0.7733333333333333
User 37331 AUC after training: 0.78
User 37331 improves AUC. Keeping the model.
Training on augumented user 65200 43/50 current_auc = 0.78
User 65200 AUC after training: 0.78
User 65200 does not improve AUC. Reverting changes.
Training on augumented user 8103 44/50 current_auc = 0.78
User 8103 AUC after training: 0.78
User 8103 does not improve AUC. Reverting changes.
Training on augumented user 81375 45/50 current_auc = 0.78
User 81375 AUC after training: 0.78
User 81375 does not improve AUC. Reverting changes.
Training on augumented user 100778 46/50 current_auc = 0.78
User 100778 AUC after training: 0.76
User 100778 does not improve AUC. Reverting changes.
Training on augumented user 76268 47/50 current_auc = 0.78
User 76268 AUC after training: 0.78
User 76268 does not improve AUC. Reverting changes.
Training on augumented user 74008 48/50 current_auc = 0.78
User 74008 AUC after training: 0.78
User 74008 does not improve AUC. Reverting changes.
Training on augumented user 71798 49/50 current_auc = 0.78
User 71798 AUC after training: 0.7666666666666666
User 71798 does not improve AUC. Reverting changes.
[2024-12-02 18:07:20.301560] start test user 84050 55/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:07:21.188674] start test user 84050 55/568 recall augumented users by random, augumented_users = [12700, 137006, 68850, 75845, 23621, 64736, 91674, 120813, 87830, 135463, 127463, 73897, 69201, 117498, 138152, 64530, 86675, 17532, 51107, 93748, 133645, 136904, 18592, 53621, 79841, 38914, 9850, 87908, 59081, 32650, 64880, 46715, 7409, 18863, 4019, 102413, 106212, 44675, 24430, 89362, 36779, 31302, 21082, 134392, 38461, 100351, 14370, 55550, 81580, 97078]
[2024-12-02 18:07:21.215992] user = 84050 Cloud 55/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:07:21.245470] user = 84050 Local 55/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:07:21.302698] user = 84050 Local+ 55/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:07:23.429672] user = 84050 MPDA- 55/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 12700 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12700 AUC after training: 0.5
User 12700 does not improve AUC. Reverting changes.
Training on augumented user 137006 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137006 AUC after training: 0.5
User 137006 does not improve AUC. Reverting changes.
Training on augumented user 68850 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68850 AUC after training: 0.5
User 68850 does not improve AUC. Reverting changes.
Training on augumented user 75845 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75845 AUC after training: 0.5
User 75845 does not improve AUC. Reverting changes.
Training on augumented user 23621 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23621 AUC after training: 0.5
User 23621 does not improve AUC. Reverting changes.
Training on augumented user 64736 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64736 AUC after training: 0.5
User 64736 does not improve AUC. Reverting changes.
Training on augumented user 91674 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91674 AUC after training: 0.5
User 91674 does not improve AUC. Reverting changes.
Training on augumented user 120813 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120813 AUC after training: 0.5
User 120813 does not improve AUC. Reverting changes.
Training on augumented user 87830 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87830 AUC after training: 0.5
User 87830 does not improve AUC. Reverting changes.
Training on augumented user 135463 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135463 AUC after training: 0.5
User 135463 does not improve AUC. Reverting changes.
Training on augumented user 127463 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127463 AUC after training: 0.5
User 127463 does not improve AUC. Reverting changes.
Training on augumented user 73897 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73897 AUC after training: 0.5
User 73897 does not improve AUC. Reverting changes.
Training on augumented user 69201 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69201 AUC after training: 0.5
User 69201 does not improve AUC. Reverting changes.
Training on augumented user 117498 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117498 AUC after training: 0.5
User 117498 does not improve AUC. Reverting changes.
Training on augumented user 138152 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138152 AUC after training: 0.5
User 138152 does not improve AUC. Reverting changes.
Training on augumented user 64530 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64530 AUC after training: 0.5
User 64530 does not improve AUC. Reverting changes.
Training on augumented user 86675 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86675 AUC after training: 0.5
User 86675 does not improve AUC. Reverting changes.
Training on augumented user 17532 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17532 AUC after training: 0.5
User 17532 does not improve AUC. Reverting changes.
Training on augumented user 51107 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51107 AUC after training: 0.5
User 51107 does not improve AUC. Reverting changes.
Training on augumented user 93748 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93748 AUC after training: 0.5
User 93748 does not improve AUC. Reverting changes.
Training on augumented user 133645 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133645 AUC after training: 0.5
User 133645 does not improve AUC. Reverting changes.
Training on augumented user 136904 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136904 AUC after training: 0.5
User 136904 does not improve AUC. Reverting changes.
Training on augumented user 18592 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18592 AUC after training: 0.5
User 18592 does not improve AUC. Reverting changes.
Training on augumented user 53621 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53621 AUC after training: 0.5
User 53621 does not improve AUC. Reverting changes.
Training on augumented user 79841 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79841 AUC after training: 0.5
User 79841 does not improve AUC. Reverting changes.
Training on augumented user 38914 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38914 AUC after training: 0.5
User 38914 does not improve AUC. Reverting changes.
Training on augumented user 9850 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9850 AUC after training: 0.5
User 9850 does not improve AUC. Reverting changes.
Training on augumented user 87908 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87908 AUC after training: 0.5
User 87908 does not improve AUC. Reverting changes.
Training on augumented user 59081 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59081 AUC after training: 0.5
User 59081 does not improve AUC. Reverting changes.
Training on augumented user 32650 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32650 AUC after training: 0.5
User 32650 does not improve AUC. Reverting changes.
Training on augumented user 64880 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64880 AUC after training: 0.5
User 64880 does not improve AUC. Reverting changes.
Training on augumented user 46715 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46715 AUC after training: 0.5
User 46715 does not improve AUC. Reverting changes.
Training on augumented user 7409 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7409 AUC after training: 0.5
User 7409 does not improve AUC. Reverting changes.
Training on augumented user 18863 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18863 AUC after training: 0.5
User 18863 does not improve AUC. Reverting changes.
Training on augumented user 4019 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4019 AUC after training: 0.5
User 4019 does not improve AUC. Reverting changes.
Training on augumented user 102413 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102413 AUC after training: 0.5
User 102413 does not improve AUC. Reverting changes.
Training on augumented user 106212 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106212 AUC after training: 0.5
User 106212 does not improve AUC. Reverting changes.
Training on augumented user 44675 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44675 AUC after training: 0.5
User 44675 does not improve AUC. Reverting changes.
Training on augumented user 24430 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24430 AUC after training: 0.5
User 24430 does not improve AUC. Reverting changes.
Training on augumented user 89362 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89362 AUC after training: 0.5
User 89362 does not improve AUC. Reverting changes.
Training on augumented user 36779 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36779 AUC after training: 0.5
User 36779 does not improve AUC. Reverting changes.
Training on augumented user 31302 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31302 AUC after training: 0.5
User 31302 does not improve AUC. Reverting changes.
Training on augumented user 21082 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21082 AUC after training: 0.5
User 21082 does not improve AUC. Reverting changes.
Training on augumented user 134392 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134392 AUC after training: 0.5
User 134392 does not improve AUC. Reverting changes.
Training on augumented user 38461 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38461 AUC after training: 0.5
User 38461 does not improve AUC. Reverting changes.
Training on augumented user 100351 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100351 AUC after training: 0.5
User 100351 does not improve AUC. Reverting changes.
Training on augumented user 14370 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14370 AUC after training: 0.5
User 14370 does not improve AUC. Reverting changes.
Training on augumented user 55550 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55550 AUC after training: 0.5
User 55550 does not improve AUC. Reverting changes.
Training on augumented user 81580 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81580 AUC after training: 0.5
User 81580 does not improve AUC. Reverting changes.
Training on augumented user 97078 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97078 AUC after training: 0.5
User 97078 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:07:49.176620] start test user 84068 56/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:07:49.527089] start test user 84068 56/568 recall augumented users by random, augumented_users = [12039, 122376, 42453, 83504, 28626, 19405, 85954, 12126, 95144, 111630, 62738, 106441, 2244, 43083, 53583, 6948, 5394, 100678, 73221, 9274, 88241, 45989, 39353, 94078, 112770, 97596, 7706, 84460, 10982, 59887, 114143, 30528, 18776, 64544, 24570, 73518, 76766, 130104, 80637, 90750, 109204, 31135, 97886, 86137, 97963, 44976, 44162, 40070, 111079, 65044]
[2024-12-02 18:07:49.535696] user = 84068 Cloud 56/568
[2024-12-02 18:07:49.544815] user = 84068 Local 56/568
[2024-12-02 18:07:49.570886] user = 84068 Local+ 56/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:07:50.433822] user = 84068 MPDA- 56/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.755023923444976
Training on augumented user 12039 0/50 current_auc = 0.755023923444976
User 12039 AUC after training: 0.755023923444976
User 12039 does not improve AUC. Reverting changes.
Training on augumented user 122376 1/50 current_auc = 0.755023923444976
User 122376 AUC after training: 0.7550239234449762
User 122376 improves AUC. Keeping the model.
Training on augumented user 42453 2/50 current_auc = 0.7550239234449762
User 42453 AUC after training: 0.7547049441786284
User 42453 does not improve AUC. Reverting changes.
Training on augumented user 83504 3/50 current_auc = 0.7550239234449762
User 83504 AUC after training: 0.7543859649122807
User 83504 does not improve AUC. Reverting changes.
Training on augumented user 28626 4/50 current_auc = 0.7550239234449762
User 28626 AUC after training: 0.7550239234449762
User 28626 does not improve AUC. Reverting changes.
Training on augumented user 19405 5/50 current_auc = 0.7550239234449762
User 19405 AUC after training: 0.7547049441786283
User 19405 does not improve AUC. Reverting changes.
Training on augumented user 85954 6/50 current_auc = 0.7550239234449762
User 85954 AUC after training: 0.7550239234449762
User 85954 does not improve AUC. Reverting changes.
Training on augumented user 12126 7/50 current_auc = 0.7550239234449762
User 12126 AUC after training: 0.755023923444976
User 12126 does not improve AUC. Reverting changes.
Training on augumented user 95144 8/50 current_auc = 0.7550239234449762
User 95144 AUC after training: 0.7543859649122807
User 95144 does not improve AUC. Reverting changes.
Training on augumented user 111630 9/50 current_auc = 0.7550239234449762
User 111630 AUC after training: 0.7547049441786283
User 111630 does not improve AUC. Reverting changes.
Training on augumented user 62738 10/50 current_auc = 0.7550239234449762
User 62738 AUC after training: 0.754066985645933
User 62738 does not improve AUC. Reverting changes.
Training on augumented user 106441 11/50 current_auc = 0.7550239234449762
User 106441 AUC after training: 0.7556618819776714
User 106441 improves AUC. Keeping the model.
Training on augumented user 2244 12/50 current_auc = 0.7556618819776714
User 2244 AUC after training: 0.7559808612440191
User 2244 improves AUC. Keeping the model.
Training on augumented user 43083 13/50 current_auc = 0.7559808612440191
User 43083 AUC after training: 0.7553429027113236
User 43083 does not improve AUC. Reverting changes.
Training on augumented user 53583 14/50 current_auc = 0.7559808612440191
User 53583 AUC after training: 0.7559808612440191
User 53583 does not improve AUC. Reverting changes.
Training on augumented user 6948 15/50 current_auc = 0.7559808612440191
User 6948 AUC after training: 0.7559808612440191
User 6948 does not improve AUC. Reverting changes.
Training on augumented user 5394 16/50 current_auc = 0.7559808612440191
User 5394 AUC after training: 0.7547049441786283
User 5394 does not improve AUC. Reverting changes.
Training on augumented user 100678 17/50 current_auc = 0.7559808612440191
User 100678 AUC after training: 0.7547049441786283
User 100678 does not improve AUC. Reverting changes.
Training on augumented user 73221 18/50 current_auc = 0.7559808612440191
User 73221 AUC after training: 0.7556618819776714
User 73221 does not improve AUC. Reverting changes.
Training on augumented user 9274 19/50 current_auc = 0.7559808612440191
User 9274 AUC after training: 0.7547049441786283
User 9274 does not improve AUC. Reverting changes.
Training on augumented user 88241 20/50 current_auc = 0.7559808612440191
User 88241 AUC after training: 0.7556618819776714
User 88241 does not improve AUC. Reverting changes.
Training on augumented user 45989 21/50 current_auc = 0.7559808612440191
User 45989 AUC after training: 0.7547049441786283
User 45989 does not improve AUC. Reverting changes.
Training on augumented user 39353 22/50 current_auc = 0.7559808612440191
User 39353 AUC after training: 0.7556618819776715
User 39353 does not improve AUC. Reverting changes.
Training on augumented user 94078 23/50 current_auc = 0.7559808612440191
User 94078 AUC after training: 0.7556618819776714
User 94078 does not improve AUC. Reverting changes.
Training on augumented user 112770 24/50 current_auc = 0.7559808612440191
User 112770 AUC after training: 0.754066985645933
User 112770 does not improve AUC. Reverting changes.
Training on augumented user 97596 25/50 current_auc = 0.7559808612440191
User 97596 AUC after training: 0.755023923444976
User 97596 does not improve AUC. Reverting changes.
Training on augumented user 7706 26/50 current_auc = 0.7559808612440191
User 7706 AUC after training: 0.7556618819776714
User 7706 does not improve AUC. Reverting changes.
Training on augumented user 84460 27/50 current_auc = 0.7559808612440191
User 84460 AUC after training: 0.7550239234449759
User 84460 does not improve AUC. Reverting changes.
Training on augumented user 10982 28/50 current_auc = 0.7559808612440191
User 10982 AUC after training: 0.7553429027113238
User 10982 does not improve AUC. Reverting changes.
Training on augumented user 59887 29/50 current_auc = 0.7559808612440191
User 59887 AUC after training: 0.7547049441786283
User 59887 does not improve AUC. Reverting changes.
Training on augumented user 114143 30/50 current_auc = 0.7559808612440191
User 114143 AUC after training: 0.7553429027113236
User 114143 does not improve AUC. Reverting changes.
Training on augumented user 30528 31/50 current_auc = 0.7559808612440191
User 30528 AUC after training: 0.7547049441786284
User 30528 does not improve AUC. Reverting changes.
Training on augumented user 18776 32/50 current_auc = 0.7559808612440191
User 18776 AUC after training: 0.7553429027113238
User 18776 does not improve AUC. Reverting changes.
Training on augumented user 64544 33/50 current_auc = 0.7559808612440191
User 64544 AUC after training: 0.755023923444976
User 64544 does not improve AUC. Reverting changes.
Training on augumented user 24570 34/50 current_auc = 0.7559808612440191
User 24570 AUC after training: 0.7553429027113238
User 24570 does not improve AUC. Reverting changes.
Training on augumented user 73518 35/50 current_auc = 0.7559808612440191
User 73518 AUC after training: 0.7562998405103668
User 73518 improves AUC. Keeping the model.
Training on augumented user 76766 36/50 current_auc = 0.7562998405103668
User 76766 AUC after training: 0.7559808612440191
User 76766 does not improve AUC. Reverting changes.
Training on augumented user 130104 37/50 current_auc = 0.7562998405103668
User 130104 AUC after training: 0.7562998405103668
User 130104 does not improve AUC. Reverting changes.
Training on augumented user 80637 38/50 current_auc = 0.7562998405103668
User 80637 AUC after training: 0.7566188197767145
User 80637 improves AUC. Keeping the model.
Training on augumented user 90750 39/50 current_auc = 0.7566188197767145
User 90750 AUC after training: 0.7572567783094099
User 90750 improves AUC. Keeping the model.
Training on augumented user 109204 40/50 current_auc = 0.7572567783094099
User 109204 AUC after training: 0.7566188197767145
User 109204 does not improve AUC. Reverting changes.
Training on augumented user 31135 41/50 current_auc = 0.7572567783094099
User 31135 AUC after training: 0.7566188197767145
User 31135 does not improve AUC. Reverting changes.
Training on augumented user 97886 42/50 current_auc = 0.7572567783094099
User 97886 AUC after training: 0.7585326953748006
User 97886 improves AUC. Keeping the model.
Training on augumented user 86137 43/50 current_auc = 0.7585326953748006
User 86137 AUC after training: 0.7578947368421053
User 86137 does not improve AUC. Reverting changes.
Training on augumented user 97963 44/50 current_auc = 0.7585326953748006
User 97963 AUC after training: 0.7578947368421053
User 97963 does not improve AUC. Reverting changes.
Training on augumented user 44976 45/50 current_auc = 0.7585326953748006
User 44976 AUC after training: 0.7585326953748006
User 44976 does not improve AUC. Reverting changes.
Training on augumented user 44162 46/50 current_auc = 0.7585326953748006
User 44162 AUC after training: 0.7578947368421052
User 44162 does not improve AUC. Reverting changes.
Training on augumented user 40070 47/50 current_auc = 0.7585326953748006
User 40070 AUC after training: 0.7578947368421053
User 40070 does not improve AUC. Reverting changes.
Training on augumented user 111079 48/50 current_auc = 0.7585326953748006
User 111079 AUC after training: 0.7569377990430622
User 111079 does not improve AUC. Reverting changes.
Training on augumented user 65044 49/50 current_auc = 0.7585326953748006
User 65044 AUC after training: 0.7578947368421052
User 65044 does not improve AUC. Reverting changes.
[2024-12-02 18:08:12.928407] start test user 84105 57/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:08:13.733385] start test user 84105 57/568 recall augumented users by random, augumented_users = [35197, 35551, 49374, 106978, 137411, 109565, 88032, 29880, 120300, 10031, 22429, 3524, 123284, 91587, 92633, 121527, 41116, 125184, 37761, 47081, 63521, 46629, 84462, 63502, 37228, 74933, 48640, 29687, 71398, 75912, 35606, 3609, 121877, 96180, 125882, 2074, 39616, 18985, 106619, 35004, 109610, 48705, 80788, 111286, 116709, 75613, 100433, 123864, 95817, 59231]
[2024-12-02 18:08:13.751615] user = 84105 Cloud 57/568
[2024-12-02 18:08:13.764322] user = 84105 Local 57/568
[2024-12-02 18:08:13.820678] user = 84105 Local+ 57/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:08:16.659498] user = 84105 MPDA- 57/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5230769230769231
Training on augumented user 35197 0/50 current_auc = 0.5230769230769231
User 35197 AUC after training: 0.5230769230769231
User 35197 does not improve AUC. Reverting changes.
Training on augumented user 35551 1/50 current_auc = 0.5230769230769231
User 35551 AUC after training: 0.5384615384615384
User 35551 improves AUC. Keeping the model.
Training on augumented user 49374 2/50 current_auc = 0.5384615384615384
User 49374 AUC after training: 0.5230769230769231
User 49374 does not improve AUC. Reverting changes.
Training on augumented user 106978 3/50 current_auc = 0.5384615384615384
User 106978 AUC after training: 0.5384615384615384
User 106978 does not improve AUC. Reverting changes.
Training on augumented user 137411 4/50 current_auc = 0.5384615384615384
User 137411 AUC after training: 0.5230769230769231
User 137411 does not improve AUC. Reverting changes.
Training on augumented user 109565 5/50 current_auc = 0.5384615384615384
User 109565 AUC after training: 0.5384615384615384
User 109565 does not improve AUC. Reverting changes.
Training on augumented user 88032 6/50 current_auc = 0.5384615384615384
User 88032 AUC after training: 0.5384615384615384
User 88032 does not improve AUC. Reverting changes.
Training on augumented user 29880 7/50 current_auc = 0.5384615384615384
User 29880 AUC after training: 0.5384615384615384
User 29880 does not improve AUC. Reverting changes.
Training on augumented user 120300 8/50 current_auc = 0.5384615384615384
User 120300 AUC after training: 0.5384615384615384
User 120300 does not improve AUC. Reverting changes.
Training on augumented user 10031 9/50 current_auc = 0.5384615384615384
User 10031 AUC after training: 0.5384615384615384
User 10031 does not improve AUC. Reverting changes.
Training on augumented user 22429 10/50 current_auc = 0.5384615384615384
User 22429 AUC after training: 0.5230769230769231
User 22429 does not improve AUC. Reverting changes.
Training on augumented user 3524 11/50 current_auc = 0.5384615384615384
User 3524 AUC after training: 0.5384615384615384
User 3524 does not improve AUC. Reverting changes.
Training on augumented user 123284 12/50 current_auc = 0.5384615384615384
User 123284 AUC after training: 0.5384615384615384
User 123284 does not improve AUC. Reverting changes.
Training on augumented user 91587 13/50 current_auc = 0.5384615384615384
User 91587 AUC after training: 0.5384615384615384
User 91587 does not improve AUC. Reverting changes.
Training on augumented user 92633 14/50 current_auc = 0.5384615384615384
User 92633 AUC after training: 0.5230769230769231
User 92633 does not improve AUC. Reverting changes.
Training on augumented user 121527 15/50 current_auc = 0.5384615384615384
User 121527 AUC after training: 0.5384615384615384
User 121527 does not improve AUC. Reverting changes.
Training on augumented user 41116 16/50 current_auc = 0.5384615384615384
User 41116 AUC after training: 0.5384615384615384
User 41116 does not improve AUC. Reverting changes.
Training on augumented user 125184 17/50 current_auc = 0.5384615384615384
User 125184 AUC after training: 0.5384615384615384
User 125184 does not improve AUC. Reverting changes.
Training on augumented user 37761 18/50 current_auc = 0.5384615384615384
User 37761 AUC after training: 0.5384615384615384
User 37761 does not improve AUC. Reverting changes.
Training on augumented user 47081 19/50 current_auc = 0.5384615384615384
User 47081 AUC after training: 0.5384615384615384
User 47081 does not improve AUC. Reverting changes.
Training on augumented user 63521 20/50 current_auc = 0.5384615384615384
User 63521 AUC after training: 0.5384615384615384
User 63521 does not improve AUC. Reverting changes.
Training on augumented user 46629 21/50 current_auc = 0.5384615384615384
User 46629 AUC after training: 0.5384615384615384
User 46629 does not improve AUC. Reverting changes.
Training on augumented user 84462 22/50 current_auc = 0.5384615384615384
User 84462 AUC after training: 0.5384615384615384
User 84462 does not improve AUC. Reverting changes.
Training on augumented user 63502 23/50 current_auc = 0.5384615384615384
User 63502 AUC after training: 0.5384615384615384
User 63502 does not improve AUC. Reverting changes.
Training on augumented user 37228 24/50 current_auc = 0.5384615384615384
User 37228 AUC after training: 0.5384615384615384
User 37228 does not improve AUC. Reverting changes.
Training on augumented user 74933 25/50 current_auc = 0.5384615384615384
User 74933 AUC after training: 0.5384615384615384
User 74933 does not improve AUC. Reverting changes.
Training on augumented user 48640 26/50 current_auc = 0.5384615384615384
User 48640 AUC after training: 0.5384615384615384
User 48640 does not improve AUC. Reverting changes.
Training on augumented user 29687 27/50 current_auc = 0.5384615384615384
User 29687 AUC after training: 0.5230769230769231
User 29687 does not improve AUC. Reverting changes.
Training on augumented user 71398 28/50 current_auc = 0.5384615384615384
User 71398 AUC after training: 0.5384615384615384
User 71398 does not improve AUC. Reverting changes.
Training on augumented user 75912 29/50 current_auc = 0.5384615384615384
User 75912 AUC after training: 0.5384615384615384
User 75912 does not improve AUC. Reverting changes.
Training on augumented user 35606 30/50 current_auc = 0.5384615384615384
User 35606 AUC after training: 0.5230769230769231
User 35606 does not improve AUC. Reverting changes.
Training on augumented user 3609 31/50 current_auc = 0.5384615384615384
User 3609 AUC after training: 0.5384615384615384
User 3609 does not improve AUC. Reverting changes.
Training on augumented user 121877 32/50 current_auc = 0.5384615384615384
User 121877 AUC after training: 0.5230769230769231
User 121877 does not improve AUC. Reverting changes.
Training on augumented user 96180 33/50 current_auc = 0.5384615384615384
User 96180 AUC after training: 0.5538461538461539
User 96180 improves AUC. Keeping the model.
Training on augumented user 125882 34/50 current_auc = 0.5538461538461539
User 125882 AUC after training: 0.5538461538461539
User 125882 does not improve AUC. Reverting changes.
Training on augumented user 2074 35/50 current_auc = 0.5538461538461539
User 2074 AUC after training: 0.5538461538461539
User 2074 does not improve AUC. Reverting changes.
Training on augumented user 39616 36/50 current_auc = 0.5538461538461539
User 39616 AUC after training: 0.5538461538461539
User 39616 does not improve AUC. Reverting changes.
Training on augumented user 18985 37/50 current_auc = 0.5538461538461539
User 18985 AUC after training: 0.5538461538461539
User 18985 does not improve AUC. Reverting changes.
Training on augumented user 106619 38/50 current_auc = 0.5538461538461539
User 106619 AUC after training: 0.5538461538461539
User 106619 does not improve AUC. Reverting changes.
Training on augumented user 35004 39/50 current_auc = 0.5538461538461539
User 35004 AUC after training: 0.5384615384615384
User 35004 does not improve AUC. Reverting changes.
Training on augumented user 109610 40/50 current_auc = 0.5538461538461539
User 109610 AUC after training: 0.5538461538461539
User 109610 does not improve AUC. Reverting changes.
Training on augumented user 48705 41/50 current_auc = 0.5538461538461539
User 48705 AUC after training: 0.5538461538461539
User 48705 does not improve AUC. Reverting changes.
Training on augumented user 80788 42/50 current_auc = 0.5538461538461539
User 80788 AUC after training: 0.5538461538461539
User 80788 does not improve AUC. Reverting changes.
Training on augumented user 111286 43/50 current_auc = 0.5538461538461539
User 111286 AUC after training: 0.5538461538461539
User 111286 does not improve AUC. Reverting changes.
Training on augumented user 116709 44/50 current_auc = 0.5538461538461539
User 116709 AUC after training: 0.5538461538461539
User 116709 does not improve AUC. Reverting changes.
Training on augumented user 75613 45/50 current_auc = 0.5538461538461539
User 75613 AUC after training: 0.5538461538461539
User 75613 does not improve AUC. Reverting changes.
Training on augumented user 100433 46/50 current_auc = 0.5538461538461539
User 100433 AUC after training: 0.5538461538461539
User 100433 does not improve AUC. Reverting changes.
Training on augumented user 123864 47/50 current_auc = 0.5538461538461539
User 123864 AUC after training: 0.5538461538461539
User 123864 does not improve AUC. Reverting changes.
Training on augumented user 95817 48/50 current_auc = 0.5538461538461539
User 95817 AUC after training: 0.5538461538461539
User 95817 does not improve AUC. Reverting changes.
Training on augumented user 59231 49/50 current_auc = 0.5538461538461539
User 59231 AUC after training: 0.5538461538461539
User 59231 does not improve AUC. Reverting changes.
[2024-12-02 18:08:46.501922] start test user 84108 58/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:08:46.948264] start test user 84108 58/568 recall augumented users by random, augumented_users = [82212, 49135, 58525, 124663, 44107, 90021, 132748, 70721, 33063, 33627, 64458, 24264, 56949, 110785, 58455, 2880, 95053, 63030, 56654, 118748, 88735, 95510, 10901, 18846, 99152, 123576, 51040, 10941, 88371, 63139, 119105, 19275, 93685, 40918, 75735, 26504, 92399, 111356, 41517, 28148, 85934, 127806, 88856, 4848, 90943, 44326, 110484, 137059, 98070, 9324]
[2024-12-02 18:08:46.965479] user = 84108 Cloud 58/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:08:46.977201] user = 84108 Local 58/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:08:47.176198] user = 84108 Local+ 58/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:08:49.250796] user = 84108 MPDA- 58/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 82212 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82212 AUC after training: 0.5
User 82212 does not improve AUC. Reverting changes.
Training on augumented user 49135 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49135 AUC after training: 0.5
User 49135 does not improve AUC. Reverting changes.
Training on augumented user 58525 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58525 AUC after training: 0.5
User 58525 does not improve AUC. Reverting changes.
Training on augumented user 124663 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124663 AUC after training: 0.5
User 124663 does not improve AUC. Reverting changes.
Training on augumented user 44107 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44107 AUC after training: 0.5
User 44107 does not improve AUC. Reverting changes.
Training on augumented user 90021 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90021 AUC after training: 0.5
User 90021 does not improve AUC. Reverting changes.
Training on augumented user 132748 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132748 AUC after training: 0.5
User 132748 does not improve AUC. Reverting changes.
Training on augumented user 70721 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70721 AUC after training: 0.5
User 70721 does not improve AUC. Reverting changes.
Training on augumented user 33063 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33063 AUC after training: 0.5
User 33063 does not improve AUC. Reverting changes.
Training on augumented user 33627 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33627 AUC after training: 0.5
User 33627 does not improve AUC. Reverting changes.
Training on augumented user 64458 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64458 AUC after training: 0.5
User 64458 does not improve AUC. Reverting changes.
Training on augumented user 24264 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24264 AUC after training: 0.5
User 24264 does not improve AUC. Reverting changes.
Training on augumented user 56949 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56949 AUC after training: 0.5
User 56949 does not improve AUC. Reverting changes.
Training on augumented user 110785 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110785 AUC after training: 0.5
User 110785 does not improve AUC. Reverting changes.
Training on augumented user 58455 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58455 AUC after training: 0.5
User 58455 does not improve AUC. Reverting changes.
Training on augumented user 2880 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2880 AUC after training: 0.5
User 2880 does not improve AUC. Reverting changes.
Training on augumented user 95053 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95053 AUC after training: 0.5
User 95053 does not improve AUC. Reverting changes.
Training on augumented user 63030 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63030 AUC after training: 0.5
User 63030 does not improve AUC. Reverting changes.
Training on augumented user 56654 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56654 AUC after training: 0.5
User 56654 does not improve AUC. Reverting changes.
Training on augumented user 118748 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118748 AUC after training: 0.5
User 118748 does not improve AUC. Reverting changes.
Training on augumented user 88735 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88735 AUC after training: 0.5
User 88735 does not improve AUC. Reverting changes.
Training on augumented user 95510 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95510 AUC after training: 0.5
User 95510 does not improve AUC. Reverting changes.
Training on augumented user 10901 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10901 AUC after training: 0.5
User 10901 does not improve AUC. Reverting changes.
Training on augumented user 18846 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18846 AUC after training: 0.5
User 18846 does not improve AUC. Reverting changes.
Training on augumented user 99152 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99152 AUC after training: 0.5
User 99152 does not improve AUC. Reverting changes.
Training on augumented user 123576 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123576 AUC after training: 0.5
User 123576 does not improve AUC. Reverting changes.
Training on augumented user 51040 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51040 AUC after training: 0.5
User 51040 does not improve AUC. Reverting changes.
Training on augumented user 10941 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10941 AUC after training: 0.5
User 10941 does not improve AUC. Reverting changes.
Training on augumented user 88371 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88371 AUC after training: 0.5
User 88371 does not improve AUC. Reverting changes.
Training on augumented user 63139 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63139 AUC after training: 0.5
User 63139 does not improve AUC. Reverting changes.
Training on augumented user 119105 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119105 AUC after training: 0.5
User 119105 does not improve AUC. Reverting changes.
Training on augumented user 19275 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19275 AUC after training: 0.5
User 19275 does not improve AUC. Reverting changes.
Training on augumented user 93685 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93685 AUC after training: 0.5
User 93685 does not improve AUC. Reverting changes.
Training on augumented user 40918 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40918 AUC after training: 0.5
User 40918 does not improve AUC. Reverting changes.
Training on augumented user 75735 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75735 AUC after training: 0.5
User 75735 does not improve AUC. Reverting changes.
Training on augumented user 26504 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26504 AUC after training: 0.5
User 26504 does not improve AUC. Reverting changes.
Training on augumented user 92399 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92399 AUC after training: 0.5
User 92399 does not improve AUC. Reverting changes.
Training on augumented user 111356 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111356 AUC after training: 0.5
User 111356 does not improve AUC. Reverting changes.
Training on augumented user 41517 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41517 AUC after training: 0.5
User 41517 does not improve AUC. Reverting changes.
Training on augumented user 28148 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28148 AUC after training: 0.5
User 28148 does not improve AUC. Reverting changes.
Training on augumented user 85934 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85934 AUC after training: 0.5
User 85934 does not improve AUC. Reverting changes.
Training on augumented user 127806 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127806 AUC after training: 0.5
User 127806 does not improve AUC. Reverting changes.
Training on augumented user 88856 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88856 AUC after training: 0.5
User 88856 does not improve AUC. Reverting changes.
Training on augumented user 4848 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4848 AUC after training: 0.5
User 4848 does not improve AUC. Reverting changes.
Training on augumented user 90943 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90943 AUC after training: 0.5
User 90943 does not improve AUC. Reverting changes.
Training on augumented user 44326 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44326 AUC after training: 0.5
User 44326 does not improve AUC. Reverting changes.
Training on augumented user 110484 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110484 AUC after training: 0.5
User 110484 does not improve AUC. Reverting changes.
Training on augumented user 137059 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137059 AUC after training: 0.5
User 137059 does not improve AUC. Reverting changes.
Training on augumented user 98070 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98070 AUC after training: 0.5
User 98070 does not improve AUC. Reverting changes.
Training on augumented user 9324 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9324 AUC after training: 0.5
User 9324 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:09:17.697835] start test user 84109 59/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:09:18.109582] start test user 84109 59/568 recall augumented users by random, augumented_users = [17369, 45647, 36878, 135515, 31076, 61069, 65504, 118168, 84081, 53294, 40712, 23721, 12347, 120999, 98964, 103514, 136385, 104375, 52531, 85301, 94296, 393, 28624, 15686, 57472, 19100, 111058, 10391, 85475, 111540, 45159, 629, 86402, 56967, 121587, 51490, 33431, 130868, 38345, 9668, 138415, 111337, 81627, 24450, 76467, 38837, 100347, 65150, 46870, 6120]
[2024-12-02 18:09:18.124704] user = 84109 Cloud 59/568
[2024-12-02 18:09:18.135539] user = 84109 Local 59/568
[2024-12-02 18:09:18.188445] user = 84109 Local+ 59/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:09:20.054174] user = 84109 MPDA- 59/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6666666666666666
Training on augumented user 17369 0/50 current_auc = 0.6666666666666666
User 17369 AUC after training: 0.6666666666666666
User 17369 does not improve AUC. Reverting changes.
Training on augumented user 45647 1/50 current_auc = 0.6666666666666666
User 45647 AUC after training: 0.6666666666666666
User 45647 does not improve AUC. Reverting changes.
Training on augumented user 36878 2/50 current_auc = 0.6666666666666666
User 36878 AUC after training: 0.6666666666666666
User 36878 does not improve AUC. Reverting changes.
Training on augumented user 135515 3/50 current_auc = 0.6666666666666666
User 135515 AUC after training: 0.6666666666666666
User 135515 does not improve AUC. Reverting changes.
Training on augumented user 31076 4/50 current_auc = 0.6666666666666666
User 31076 AUC after training: 0.6666666666666666
User 31076 does not improve AUC. Reverting changes.
Training on augumented user 61069 5/50 current_auc = 0.6666666666666666
User 61069 AUC after training: 0.6666666666666666
User 61069 does not improve AUC. Reverting changes.
Training on augumented user 65504 6/50 current_auc = 0.6666666666666666
User 65504 AUC after training: 0.6666666666666666
User 65504 does not improve AUC. Reverting changes.
Training on augumented user 118168 7/50 current_auc = 0.6666666666666666
User 118168 AUC after training: 0.6666666666666666
User 118168 does not improve AUC. Reverting changes.
Training on augumented user 84081 8/50 current_auc = 0.6666666666666666
User 84081 AUC after training: 0.6666666666666666
User 84081 does not improve AUC. Reverting changes.
Training on augumented user 53294 9/50 current_auc = 0.6666666666666666
User 53294 AUC after training: 0.6666666666666666
User 53294 does not improve AUC. Reverting changes.
Training on augumented user 40712 10/50 current_auc = 0.6666666666666666
User 40712 AUC after training: 0.6666666666666666
User 40712 does not improve AUC. Reverting changes.
Training on augumented user 23721 11/50 current_auc = 0.6666666666666666
User 23721 AUC after training: 0.6666666666666666
User 23721 does not improve AUC. Reverting changes.
Training on augumented user 12347 12/50 current_auc = 0.6666666666666666
User 12347 AUC after training: 0.6666666666666666
User 12347 does not improve AUC. Reverting changes.
Training on augumented user 120999 13/50 current_auc = 0.6666666666666666
User 120999 AUC after training: 0.6666666666666666
User 120999 does not improve AUC. Reverting changes.
Training on augumented user 98964 14/50 current_auc = 0.6666666666666666
User 98964 AUC after training: 0.6666666666666666
User 98964 does not improve AUC. Reverting changes.
Training on augumented user 103514 15/50 current_auc = 0.6666666666666666
User 103514 AUC after training: 0.6666666666666666
User 103514 does not improve AUC. Reverting changes.
Training on augumented user 136385 16/50 current_auc = 0.6666666666666666
User 136385 AUC after training: 0.6666666666666666
User 136385 does not improve AUC. Reverting changes.
Training on augumented user 104375 17/50 current_auc = 0.6666666666666666
User 104375 AUC after training: 0.6666666666666666
User 104375 does not improve AUC. Reverting changes.
Training on augumented user 52531 18/50 current_auc = 0.6666666666666666
User 52531 AUC after training: 0.6666666666666666
User 52531 does not improve AUC. Reverting changes.
Training on augumented user 85301 19/50 current_auc = 0.6666666666666666
User 85301 AUC after training: 0.6666666666666666
User 85301 does not improve AUC. Reverting changes.
Training on augumented user 94296 20/50 current_auc = 0.6666666666666666
User 94296 AUC after training: 0.6666666666666666
User 94296 does not improve AUC. Reverting changes.
Training on augumented user 393 21/50 current_auc = 0.6666666666666666
User 393 AUC after training: 0.6666666666666666
User 393 does not improve AUC. Reverting changes.
Training on augumented user 28624 22/50 current_auc = 0.6666666666666666
User 28624 AUC after training: 0.6666666666666666
User 28624 does not improve AUC. Reverting changes.
Training on augumented user 15686 23/50 current_auc = 0.6666666666666666
User 15686 AUC after training: 0.6666666666666666
User 15686 does not improve AUC. Reverting changes.
Training on augumented user 57472 24/50 current_auc = 0.6666666666666666
User 57472 AUC after training: 0.6666666666666666
User 57472 does not improve AUC. Reverting changes.
Training on augumented user 19100 25/50 current_auc = 0.6666666666666666
User 19100 AUC after training: 0.6666666666666666
User 19100 does not improve AUC. Reverting changes.
Training on augumented user 111058 26/50 current_auc = 0.6666666666666666
User 111058 AUC after training: 0.6666666666666666
User 111058 does not improve AUC. Reverting changes.
Training on augumented user 10391 27/50 current_auc = 0.6666666666666666
User 10391 AUC after training: 0.6666666666666666
User 10391 does not improve AUC. Reverting changes.
Training on augumented user 85475 28/50 current_auc = 0.6666666666666666
User 85475 AUC after training: 0.6666666666666666
User 85475 does not improve AUC. Reverting changes.
Training on augumented user 111540 29/50 current_auc = 0.6666666666666666
User 111540 AUC after training: 0.6666666666666666
User 111540 does not improve AUC. Reverting changes.
Training on augumented user 45159 30/50 current_auc = 0.6666666666666666
User 45159 AUC after training: 0.6666666666666666
User 45159 does not improve AUC. Reverting changes.
Training on augumented user 629 31/50 current_auc = 0.6666666666666666
User 629 AUC after training: 0.6666666666666666
User 629 does not improve AUC. Reverting changes.
Training on augumented user 86402 32/50 current_auc = 0.6666666666666666
User 86402 AUC after training: 0.6666666666666666
User 86402 does not improve AUC. Reverting changes.
Training on augumented user 56967 33/50 current_auc = 0.6666666666666666
User 56967 AUC after training: 0.6666666666666666
User 56967 does not improve AUC. Reverting changes.
Training on augumented user 121587 34/50 current_auc = 0.6666666666666666
User 121587 AUC after training: 0.6666666666666666
User 121587 does not improve AUC. Reverting changes.
Training on augumented user 51490 35/50 current_auc = 0.6666666666666666
User 51490 AUC after training: 0.6666666666666666
User 51490 does not improve AUC. Reverting changes.
Training on augumented user 33431 36/50 current_auc = 0.6666666666666666
User 33431 AUC after training: 0.6666666666666666
User 33431 does not improve AUC. Reverting changes.
Training on augumented user 130868 37/50 current_auc = 0.6666666666666666
User 130868 AUC after training: 0.6666666666666666
User 130868 does not improve AUC. Reverting changes.
Training on augumented user 38345 38/50 current_auc = 0.6666666666666666
User 38345 AUC after training: 0.6666666666666666
User 38345 does not improve AUC. Reverting changes.
Training on augumented user 9668 39/50 current_auc = 0.6666666666666666
User 9668 AUC after training: 0.6666666666666666
User 9668 does not improve AUC. Reverting changes.
Training on augumented user 138415 40/50 current_auc = 0.6666666666666666
User 138415 AUC after training: 0.6666666666666666
User 138415 does not improve AUC. Reverting changes.
Training on augumented user 111337 41/50 current_auc = 0.6666666666666666
User 111337 AUC after training: 0.6666666666666666
User 111337 does not improve AUC. Reverting changes.
Training on augumented user 81627 42/50 current_auc = 0.6666666666666666
User 81627 AUC after training: 0.6666666666666666
User 81627 does not improve AUC. Reverting changes.
Training on augumented user 24450 43/50 current_auc = 0.6666666666666666
User 24450 AUC after training: 0.6666666666666666
User 24450 does not improve AUC. Reverting changes.
Training on augumented user 76467 44/50 current_auc = 0.6666666666666666
User 76467 AUC after training: 0.6666666666666666
User 76467 does not improve AUC. Reverting changes.
Training on augumented user 38837 45/50 current_auc = 0.6666666666666666
User 38837 AUC after training: 0.6666666666666666
User 38837 does not improve AUC. Reverting changes.
Training on augumented user 100347 46/50 current_auc = 0.6666666666666666
User 100347 AUC after training: 0.6666666666666666
User 100347 does not improve AUC. Reverting changes.
Training on augumented user 65150 47/50 current_auc = 0.6666666666666666
User 65150 AUC after training: 0.6666666666666666
User 65150 does not improve AUC. Reverting changes.
Training on augumented user 46870 48/50 current_auc = 0.6666666666666666
User 46870 AUC after training: 0.6666666666666666
User 46870 does not improve AUC. Reverting changes.
Training on augumented user 6120 49/50 current_auc = 0.6666666666666666
User 6120 AUC after training: 0.6666666666666666
User 6120 does not improve AUC. Reverting changes.
[2024-12-02 18:09:48.310168] start test user 84125 60/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:09:48.942576] start test user 84125 60/568 recall augumented users by random, augumented_users = [54180, 135546, 69981, 58094, 63900, 124880, 107492, 45766, 25605, 53026, 3983, 105990, 116652, 72778, 85328, 34724, 32961, 113132, 101454, 116001, 100119, 61754, 5469, 132525, 8896, 109448, 76392, 115095, 1731, 113478, 117885, 132424, 51648, 71777, 130854, 74856, 37694, 77789, 105308, 99848, 93484, 89008, 66883, 79598, 114928, 108246, 86745, 72454, 42457, 109573]
[2024-12-02 18:09:48.957631] user = 84125 Cloud 60/568
[2024-12-02 18:09:48.968961] user = 84125 Local 60/568
[2024-12-02 18:09:49.006712] user = 84125 Local+ 60/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:09:51.214436] user = 84125 MPDA- 60/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6759259259259259
Training on augumented user 54180 0/50 current_auc = 0.6759259259259259
User 54180 AUC after training: 0.6759259259259259
User 54180 does not improve AUC. Reverting changes.
Training on augumented user 135546 1/50 current_auc = 0.6759259259259259
User 135546 AUC after training: 0.6759259259259259
User 135546 does not improve AUC. Reverting changes.
Training on augumented user 69981 2/50 current_auc = 0.6759259259259259
User 69981 AUC after training: 0.6759259259259259
User 69981 does not improve AUC. Reverting changes.
Training on augumented user 58094 3/50 current_auc = 0.6759259259259259
User 58094 AUC after training: 0.6759259259259259
User 58094 does not improve AUC. Reverting changes.
Training on augumented user 63900 4/50 current_auc = 0.6759259259259259
User 63900 AUC after training: 0.6759259259259259
User 63900 does not improve AUC. Reverting changes.
Training on augumented user 124880 5/50 current_auc = 0.6759259259259259
User 124880 AUC after training: 0.6759259259259259
User 124880 does not improve AUC. Reverting changes.
Training on augumented user 107492 6/50 current_auc = 0.6759259259259259
User 107492 AUC after training: 0.6759259259259259
User 107492 does not improve AUC. Reverting changes.
Training on augumented user 45766 7/50 current_auc = 0.6759259259259259
User 45766 AUC after training: 0.6666666666666666
User 45766 does not improve AUC. Reverting changes.
Training on augumented user 25605 8/50 current_auc = 0.6759259259259259
User 25605 AUC after training: 0.6712962962962964
User 25605 does not improve AUC. Reverting changes.
Training on augumented user 53026 9/50 current_auc = 0.6759259259259259
User 53026 AUC after training: 0.6805555555555555
User 53026 improves AUC. Keeping the model.
Training on augumented user 3983 10/50 current_auc = 0.6805555555555555
User 3983 AUC after training: 0.6805555555555555
User 3983 does not improve AUC. Reverting changes.
Training on augumented user 105990 11/50 current_auc = 0.6805555555555555
User 105990 AUC after training: 0.6759259259259259
User 105990 does not improve AUC. Reverting changes.
Training on augumented user 116652 12/50 current_auc = 0.6805555555555555
User 116652 AUC after training: 0.6759259259259259
User 116652 does not improve AUC. Reverting changes.
Training on augumented user 72778 13/50 current_auc = 0.6805555555555555
User 72778 AUC after training: 0.6712962962962964
User 72778 does not improve AUC. Reverting changes.
Training on augumented user 85328 14/50 current_auc = 0.6805555555555555
User 85328 AUC after training: 0.6805555555555555
User 85328 does not improve AUC. Reverting changes.
Training on augumented user 34724 15/50 current_auc = 0.6805555555555555
User 34724 AUC after training: 0.6759259259259259
User 34724 does not improve AUC. Reverting changes.
Training on augumented user 32961 16/50 current_auc = 0.6805555555555555
User 32961 AUC after training: 0.6759259259259259
User 32961 does not improve AUC. Reverting changes.
Training on augumented user 113132 17/50 current_auc = 0.6805555555555555
User 113132 AUC after training: 0.6805555555555555
User 113132 does not improve AUC. Reverting changes.
Training on augumented user 101454 18/50 current_auc = 0.6805555555555555
User 101454 AUC after training: 0.6759259259259259
User 101454 does not improve AUC. Reverting changes.
Training on augumented user 116001 19/50 current_auc = 0.6805555555555555
User 116001 AUC after training: 0.6759259259259259
User 116001 does not improve AUC. Reverting changes.
Training on augumented user 100119 20/50 current_auc = 0.6805555555555555
User 100119 AUC after training: 0.6805555555555555
User 100119 does not improve AUC. Reverting changes.
Training on augumented user 61754 21/50 current_auc = 0.6805555555555555
User 61754 AUC after training: 0.6898148148148148
User 61754 improves AUC. Keeping the model.
Training on augumented user 5469 22/50 current_auc = 0.6898148148148148
User 5469 AUC after training: 0.6898148148148148
User 5469 does not improve AUC. Reverting changes.
Training on augumented user 132525 23/50 current_auc = 0.6898148148148148
User 132525 AUC after training: 0.6898148148148148
User 132525 does not improve AUC. Reverting changes.
Training on augumented user 8896 24/50 current_auc = 0.6898148148148148
User 8896 AUC after training: 0.6851851851851852
User 8896 does not improve AUC. Reverting changes.
Training on augumented user 109448 25/50 current_auc = 0.6898148148148148
User 109448 AUC after training: 0.6898148148148148
User 109448 does not improve AUC. Reverting changes.
Training on augumented user 76392 26/50 current_auc = 0.6898148148148148
User 76392 AUC after training: 0.6898148148148148
User 76392 does not improve AUC. Reverting changes.
Training on augumented user 115095 27/50 current_auc = 0.6898148148148148
User 115095 AUC after training: 0.6851851851851852
User 115095 does not improve AUC. Reverting changes.
Training on augumented user 1731 28/50 current_auc = 0.6898148148148148
User 1731 AUC after training: 0.6898148148148148
User 1731 does not improve AUC. Reverting changes.
Training on augumented user 113478 29/50 current_auc = 0.6898148148148148
User 113478 AUC after training: 0.6851851851851852
User 113478 does not improve AUC. Reverting changes.
Training on augumented user 117885 30/50 current_auc = 0.6898148148148148
User 117885 AUC after training: 0.6944444444444445
User 117885 improves AUC. Keeping the model.
Training on augumented user 132424 31/50 current_auc = 0.6944444444444445
User 132424 AUC after training: 0.6944444444444445
User 132424 does not improve AUC. Reverting changes.
Training on augumented user 51648 32/50 current_auc = 0.6944444444444445
User 51648 AUC after training: 0.6898148148148148
User 51648 does not improve AUC. Reverting changes.
Training on augumented user 71777 33/50 current_auc = 0.6944444444444445
User 71777 AUC after training: 0.6944444444444445
User 71777 does not improve AUC. Reverting changes.
Training on augumented user 130854 34/50 current_auc = 0.6944444444444445
User 130854 AUC after training: 0.6851851851851852
User 130854 does not improve AUC. Reverting changes.
Training on augumented user 74856 35/50 current_auc = 0.6944444444444445
User 74856 AUC after training: 0.6898148148148148
User 74856 does not improve AUC. Reverting changes.
Training on augumented user 37694 36/50 current_auc = 0.6944444444444445
User 37694 AUC after training: 0.6851851851851852
User 37694 does not improve AUC. Reverting changes.
Training on augumented user 77789 37/50 current_auc = 0.6944444444444445
User 77789 AUC after training: 0.6851851851851852
User 77789 does not improve AUC. Reverting changes.
Training on augumented user 105308 38/50 current_auc = 0.6944444444444445
User 105308 AUC after training: 0.6759259259259259
User 105308 does not improve AUC. Reverting changes.
Training on augumented user 99848 39/50 current_auc = 0.6944444444444445
User 99848 AUC after training: 0.6944444444444445
User 99848 does not improve AUC. Reverting changes.
Training on augumented user 93484 40/50 current_auc = 0.6944444444444445
User 93484 AUC after training: 0.6898148148148148
User 93484 does not improve AUC. Reverting changes.
Training on augumented user 89008 41/50 current_auc = 0.6944444444444445
User 89008 AUC after training: 0.6898148148148148
User 89008 does not improve AUC. Reverting changes.
Training on augumented user 66883 42/50 current_auc = 0.6944444444444445
User 66883 AUC after training: 0.6944444444444445
User 66883 does not improve AUC. Reverting changes.
Training on augumented user 79598 43/50 current_auc = 0.6944444444444445
User 79598 AUC after training: 0.6898148148148148
User 79598 does not improve AUC. Reverting changes.
Training on augumented user 114928 44/50 current_auc = 0.6944444444444445
User 114928 AUC after training: 0.6759259259259259
User 114928 does not improve AUC. Reverting changes.
Training on augumented user 108246 45/50 current_auc = 0.6944444444444445
User 108246 AUC after training: 0.6851851851851852
User 108246 does not improve AUC. Reverting changes.
Training on augumented user 86745 46/50 current_auc = 0.6944444444444445
User 86745 AUC after training: 0.6944444444444445
User 86745 does not improve AUC. Reverting changes.
Training on augumented user 72454 47/50 current_auc = 0.6944444444444445
User 72454 AUC after training: 0.6898148148148148
User 72454 does not improve AUC. Reverting changes.
Training on augumented user 42457 48/50 current_auc = 0.6944444444444445
User 42457 AUC after training: 0.6944444444444445
User 42457 does not improve AUC. Reverting changes.
Training on augumented user 109573 49/50 current_auc = 0.6944444444444445
User 109573 AUC after training: 0.6944444444444445
User 109573 does not improve AUC. Reverting changes.
[2024-12-02 18:10:13.520714] start test user 84133 61/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:10:13.918237] start test user 84133 61/568 recall augumented users by random, augumented_users = [117582, 115814, 99469, 111268, 102863, 25955, 133626, 55069, 62745, 14075, 53576, 63027, 79075, 99548, 53018, 127601, 51645, 94721, 63724, 114698, 24708, 65078, 129758, 59642, 37676, 120079, 131853, 101836, 110533, 111346, 19229, 117261, 115046, 2682, 39823, 58346, 97051, 89522, 4881, 42443, 61515, 65402, 112152, 25292, 11029, 32679, 43721, 16733, 13741, 97602]
[2024-12-02 18:10:13.932805] user = 84133 Cloud 61/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:10:13.938975] user = 84133 Local 61/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:10:13.989481] user = 84133 Local+ 61/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:10:17.139891] user = 84133 MPDA- 61/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 117582 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117582 AUC after training: 0.5
User 117582 does not improve AUC. Reverting changes.
Training on augumented user 115814 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115814 AUC after training: 0.5
User 115814 does not improve AUC. Reverting changes.
Training on augumented user 99469 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99469 AUC after training: 0.5
User 99469 does not improve AUC. Reverting changes.
Training on augumented user 111268 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111268 AUC after training: 0.5
User 111268 does not improve AUC. Reverting changes.
Training on augumented user 102863 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102863 AUC after training: 0.5
User 102863 does not improve AUC. Reverting changes.
Training on augumented user 25955 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25955 AUC after training: 0.5
User 25955 does not improve AUC. Reverting changes.
Training on augumented user 133626 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133626 AUC after training: 0.5
User 133626 does not improve AUC. Reverting changes.
Training on augumented user 55069 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55069 AUC after training: 0.5
User 55069 does not improve AUC. Reverting changes.
Training on augumented user 62745 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62745 AUC after training: 0.5
User 62745 does not improve AUC. Reverting changes.
Training on augumented user 14075 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14075 AUC after training: 0.5
User 14075 does not improve AUC. Reverting changes.
Training on augumented user 53576 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53576 AUC after training: 0.5
User 53576 does not improve AUC. Reverting changes.
Training on augumented user 63027 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63027 AUC after training: 0.5
User 63027 does not improve AUC. Reverting changes.
Training on augumented user 79075 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79075 AUC after training: 0.5
User 79075 does not improve AUC. Reverting changes.
Training on augumented user 99548 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99548 AUC after training: 0.5
User 99548 does not improve AUC. Reverting changes.
Training on augumented user 53018 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53018 AUC after training: 0.5
User 53018 does not improve AUC. Reverting changes.
Training on augumented user 127601 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127601 AUC after training: 0.5
User 127601 does not improve AUC. Reverting changes.
Training on augumented user 51645 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51645 AUC after training: 0.5
User 51645 does not improve AUC. Reverting changes.
Training on augumented user 94721 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94721 AUC after training: 0.5
User 94721 does not improve AUC. Reverting changes.
Training on augumented user 63724 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63724 AUC after training: 0.5
User 63724 does not improve AUC. Reverting changes.
Training on augumented user 114698 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114698 AUC after training: 0.5
User 114698 does not improve AUC. Reverting changes.
Training on augumented user 24708 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24708 AUC after training: 0.5
User 24708 does not improve AUC. Reverting changes.
Training on augumented user 65078 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65078 AUC after training: 0.5
User 65078 does not improve AUC. Reverting changes.
Training on augumented user 129758 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129758 AUC after training: 0.5
User 129758 does not improve AUC. Reverting changes.
Training on augumented user 59642 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59642 AUC after training: 0.5
User 59642 does not improve AUC. Reverting changes.
Training on augumented user 37676 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37676 AUC after training: 0.5
User 37676 does not improve AUC. Reverting changes.
Training on augumented user 120079 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120079 AUC after training: 0.5
User 120079 does not improve AUC. Reverting changes.
Training on augumented user 131853 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131853 AUC after training: 0.5
User 131853 does not improve AUC. Reverting changes.
Training on augumented user 101836 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101836 AUC after training: 0.5
User 101836 does not improve AUC. Reverting changes.
Training on augumented user 110533 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110533 AUC after training: 0.5
User 110533 does not improve AUC. Reverting changes.
Training on augumented user 111346 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111346 AUC after training: 0.5
User 111346 does not improve AUC. Reverting changes.
Training on augumented user 19229 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19229 AUC after training: 0.5
User 19229 does not improve AUC. Reverting changes.
Training on augumented user 117261 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117261 AUC after training: 0.5
User 117261 does not improve AUC. Reverting changes.
Training on augumented user 115046 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115046 AUC after training: 0.5
User 115046 does not improve AUC. Reverting changes.
Training on augumented user 2682 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2682 AUC after training: 0.5
User 2682 does not improve AUC. Reverting changes.
Training on augumented user 39823 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39823 AUC after training: 0.5
User 39823 does not improve AUC. Reverting changes.
Training on augumented user 58346 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58346 AUC after training: 0.5
User 58346 does not improve AUC. Reverting changes.
Training on augumented user 97051 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97051 AUC after training: 0.5
User 97051 does not improve AUC. Reverting changes.
Training on augumented user 89522 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89522 AUC after training: 0.5
User 89522 does not improve AUC. Reverting changes.
Training on augumented user 4881 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4881 AUC after training: 0.5
User 4881 does not improve AUC. Reverting changes.
Training on augumented user 42443 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42443 AUC after training: 0.5
User 42443 does not improve AUC. Reverting changes.
Training on augumented user 61515 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61515 AUC after training: 0.5
User 61515 does not improve AUC. Reverting changes.
Training on augumented user 65402 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65402 AUC after training: 0.5
User 65402 does not improve AUC. Reverting changes.
Training on augumented user 112152 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112152 AUC after training: 0.5
User 112152 does not improve AUC. Reverting changes.
Training on augumented user 25292 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25292 AUC after training: 0.5
User 25292 does not improve AUC. Reverting changes.
Training on augumented user 11029 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11029 AUC after training: 0.5
User 11029 does not improve AUC. Reverting changes.
Training on augumented user 32679 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32679 AUC after training: 0.5
User 32679 does not improve AUC. Reverting changes.
Training on augumented user 43721 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43721 AUC after training: 0.5
User 43721 does not improve AUC. Reverting changes.
Training on augumented user 16733 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16733 AUC after training: 0.5
User 16733 does not improve AUC. Reverting changes.
Training on augumented user 13741 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13741 AUC after training: 0.5
User 13741 does not improve AUC. Reverting changes.
Training on augumented user 97602 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97602 AUC after training: 0.5
User 97602 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:10:49.286203] start test user 84151 62/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:10:49.856004] start test user 84151 62/568 recall augumented users by random, augumented_users = [39533, 43776, 61297, 25203, 129613, 108617, 73654, 136053, 29013, 60828, 136829, 123298, 95405, 112308, 97888, 11258, 79988, 90574, 100723, 87177, 138221, 94551, 123014, 42914, 98876, 29218, 91663, 65204, 65860, 113218, 111958, 49962, 23275, 77812, 68729, 94921, 123487, 26297, 65425, 61162, 74897, 47254, 44767, 107505, 76876, 40238, 77962, 135887, 86403, 23093]
[2024-12-02 18:10:49.871041] user = 84151 Cloud 62/568
[2024-12-02 18:10:50.099923] user = 84151 Local 62/568
[2024-12-02 18:10:50.313566] user = 84151 Local+ 62/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:10:52.933208] user = 84151 MPDA- 62/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.771645679548415
Training on augumented user 39533 0/50 current_auc = 0.771645679548415
User 39533 AUC after training: 0.7714409776068483
User 39533 does not improve AUC. Reverting changes.
Training on augumented user 43776 1/50 current_auc = 0.771645679548415
User 43776 AUC after training: 0.7715526332113392
User 43776 does not improve AUC. Reverting changes.
Training on augumented user 61297 2/50 current_auc = 0.771645679548415
User 61297 AUC after training: 0.771627070281
User 61297 does not improve AUC. Reverting changes.
Training on augumented user 25203 3/50 current_auc = 0.771645679548415
User 25203 AUC after training: 0.7715464301222008
User 25203 does not improve AUC. Reverting changes.
Training on augumented user 129613 4/50 current_auc = 0.771645679548415
User 129613 AUC after training: 0.7714968054090937
User 129613 does not improve AUC. Reverting changes.
Training on augumented user 108617 5/50 current_auc = 0.771645679548415
User 108617 AUC after training: 0.7713789467154643
User 108617 does not improve AUC. Reverting changes.
Training on augumented user 73654 6/50 current_auc = 0.771645679548415
User 73654 AUC after training: 0.7714968054090937
User 73654 does not improve AUC. Reverting changes.
Training on augumented user 136053 7/50 current_auc = 0.771645679548415
User 136053 AUC after training: 0.7712672911109733
User 136053 does not improve AUC. Reverting changes.
Training on augumented user 29013 8/50 current_auc = 0.771645679548415
User 29013 AUC after training: 0.7715340239439241
User 29013 does not improve AUC. Reverting changes.
Training on augumented user 60828 9/50 current_auc = 0.771645679548415
User 60828 AUC after training: 0.7714657899634016
User 60828 does not improve AUC. Reverting changes.
Training on augumented user 136829 10/50 current_auc = 0.771645679548415
User 136829 AUC after training: 0.7712424787544196
User 136829 does not improve AUC. Reverting changes.
Training on augumented user 123298 11/50 current_auc = 0.771645679548415
User 123298 AUC after training: 0.7717635382420446
User 123298 improves AUC. Keeping the model.
Training on augumented user 95405 12/50 current_auc = 0.7717635382420446
User 95405 AUC after training: 0.7717635382420447
User 95405 improves AUC. Keeping the model.
Training on augumented user 112308 13/50 current_auc = 0.7717635382420447
User 112308 AUC after training: 0.7717325227963526
User 112308 does not improve AUC. Reverting changes.
Training on augumented user 97888 14/50 current_auc = 0.7717635382420447
User 97888 AUC after training: 0.7716022579244465
User 97888 does not improve AUC. Reverting changes.
Training on augumented user 11258 15/50 current_auc = 0.7717635382420447
User 11258 AUC after training: 0.7715836486570311
User 11258 does not improve AUC. Reverting changes.
Training on augumented user 79988 16/50 current_auc = 0.7717635382420447
User 79988 AUC after training: 0.7718131629551517
User 79988 improves AUC. Keeping the model.
Training on augumented user 90574 17/50 current_auc = 0.7718131629551517
User 90574 AUC after training: 0.7718131629551517
User 90574 does not improve AUC. Reverting changes.
Training on augumented user 100723 18/50 current_auc = 0.7718131629551517
User 100723 AUC after training: 0.7719558340053346
User 100723 improves AUC. Keeping the model.
Training on augumented user 87177 19/50 current_auc = 0.7719558340053346
User 87177 AUC after training: 0.7718689907573972
User 87177 does not improve AUC. Reverting changes.
Training on augumented user 138221 20/50 current_auc = 0.7719558340053346
User 138221 AUC after training: 0.7719744432727499
User 138221 improves AUC. Keeping the model.
Training on augumented user 94551 21/50 current_auc = 0.7719744432727499
User 94551 AUC after training: 0.7717759444203214
User 94551 does not improve AUC. Reverting changes.
Training on augumented user 123014 22/50 current_auc = 0.7719744432727499
User 123014 AUC after training: 0.7716146641027231
User 123014 does not improve AUC. Reverting changes.
Training on augumented user 42914 23/50 current_auc = 0.7719744432727499
User 42914 AUC after training: 0.7719124123813659
User 42914 does not improve AUC. Reverting changes.
Training on augumented user 98876 24/50 current_auc = 0.7719744432727499
User 98876 AUC after training: 0.7718938031139507
User 98876 does not improve AUC. Reverting changes.
Training on augumented user 29218 25/50 current_auc = 0.7719744432727499
User 29218 AUC after training: 0.7713851498046027
User 29218 does not improve AUC. Reverting changes.
Training on augumented user 91663 26/50 current_auc = 0.7719744432727499
User 91663 AUC after training: 0.7719434278270577
User 91663 does not improve AUC. Reverting changes.
Training on augumented user 65204 27/50 current_auc = 0.7719744432727499
User 65204 AUC after training: 0.7716394764592768
User 65204 does not improve AUC. Reverting changes.
Training on augumented user 65860 28/50 current_auc = 0.7719744432727499
User 65860 AUC after training: 0.7716704919049687
User 65860 does not improve AUC. Reverting changes.
Training on augumented user 113218 29/50 current_auc = 0.7719744432727499
User 113218 AUC after training: 0.7716891011723839
User 113218 does not improve AUC. Reverting changes.
Training on augumented user 111958 30/50 current_auc = 0.7719744432727499
User 111958 AUC after training: 0.7719434278270578
User 111958 does not improve AUC. Reverting changes.
Training on augumented user 49962 31/50 current_auc = 0.7719744432727499
User 49962 AUC after training: 0.7716518826375535
User 49962 does not improve AUC. Reverting changes.
Training on augumented user 23275 32/50 current_auc = 0.7719744432727499
User 23275 AUC after training: 0.7716642888158303
User 23275 does not improve AUC. Reverting changes.
Training on augumented user 77812 33/50 current_auc = 0.7719744432727499
User 77812 AUC after training: 0.7718938031139507
User 77812 does not improve AUC. Reverting changes.
Training on augumented user 68729 34/50 current_auc = 0.7719744432727499
User 68729 AUC after training: 0.7720860988772409
User 68729 improves AUC. Keeping the model.
Training on augumented user 94921 35/50 current_auc = 0.7720860988772409
User 94921 AUC after training: 0.7721419266794863
User 94921 improves AUC. Keeping the model.
Training on augumented user 123487 36/50 current_auc = 0.7721419266794863
User 123487 AUC after training: 0.7714285714285714
User 123487 does not improve AUC. Reverting changes.
Training on augumented user 26297 37/50 current_auc = 0.7721419266794863
User 26297 AUC after training: 0.7720923019663792
User 26297 does not improve AUC. Reverting changes.
Training on augumented user 65425 38/50 current_auc = 0.7721419266794863
User 65425 AUC after training: 0.7718441784008436
User 65425 does not improve AUC. Reverting changes.
Training on augumented user 61162 39/50 current_auc = 0.7721419266794863
User 61162 AUC after training: 0.7717945536877364
User 61162 does not improve AUC. Reverting changes.
Training on augumented user 74897 40/50 current_auc = 0.7721419266794863
User 74897 AUC after training: 0.772135723590348
User 74897 does not improve AUC. Reverting changes.
Training on augumented user 47254 41/50 current_auc = 0.7721419266794863
User 47254 AUC after training: 0.772042677253272
User 47254 does not improve AUC. Reverting changes.
Training on augumented user 44767 42/50 current_auc = 0.7721419266794863
User 44767 AUC after training: 0.772024067985857
User 44767 does not improve AUC. Reverting changes.
Training on augumented user 107505 43/50 current_auc = 0.7721419266794863
User 107505 AUC after training: 0.7720426772532722
User 107505 does not improve AUC. Reverting changes.
Training on augumented user 76876 44/50 current_auc = 0.7721419266794863
User 76876 AUC after training: 0.7717511320637677
User 76876 does not improve AUC. Reverting changes.
Training on augumented user 40238 45/50 current_auc = 0.7721419266794863
User 40238 AUC after training: 0.7720550834315487
User 40238 does not improve AUC. Reverting changes.
Training on augumented user 77962 46/50 current_auc = 0.7721419266794863
User 77962 AUC after training: 0.7721109112337945
User 77962 does not improve AUC. Reverting changes.
Training on augumented user 135887 47/50 current_auc = 0.7721419266794863
User 135887 AUC after training: 0.7720426772532721
User 135887 does not improve AUC. Reverting changes.
Training on augumented user 86403 48/50 current_auc = 0.7721419266794863
User 86403 AUC after training: 0.771788350598598
User 86403 does not improve AUC. Reverting changes.
Training on augumented user 23093 49/50 current_auc = 0.7721419266794863
User 23093 AUC after training: 0.7707710439799019
User 23093 does not improve AUC. Reverting changes.
[2024-12-02 18:11:27.580477] start test user 84160 63/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:11:28.100444] start test user 84160 63/568 recall augumented users by random, augumented_users = [137344, 127700, 3246, 79582, 134744, 62036, 12985, 67347, 26799, 42926, 53667, 110942, 113692, 137205, 103129, 102983, 135321, 138328, 18026, 131507, 60542, 76487, 100115, 20171, 46053, 20398, 5239, 112405, 115564, 138083, 48626, 16776, 131638, 277, 66527, 55183, 68892, 35761, 25076, 121334, 51142, 99635, 20778, 73712, 21020, 91204, 71117, 121039, 113142, 37580]
[2024-12-02 18:11:28.124222] user = 84160 Cloud 63/568
[2024-12-02 18:11:28.162342] user = 84160 Local 63/568
[2024-12-02 18:11:28.505719] user = 84160 Local+ 63/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:11:31.388787] user = 84160 MPDA- 63/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6749955697324119
Training on augumented user 137344 0/50 current_auc = 0.6749955697324119
User 137344 AUC after training: 0.6745525429735957
User 137344 does not improve AUC. Reverting changes.
Training on augumented user 127700 1/50 current_auc = 0.6749955697324119
User 127700 AUC after training: 0.6747297536771222
User 127700 does not improve AUC. Reverting changes.
Training on augumented user 3246 2/50 current_auc = 0.6749955697324119
User 3246 AUC after training: 0.6745525429735957
User 3246 does not improve AUC. Reverting changes.
Training on augumented user 79582 3/50 current_auc = 0.6749955697324119
User 79582 AUC after training: 0.6762360446570973
User 79582 improves AUC. Keeping the model.
Training on augumented user 134744 4/50 current_auc = 0.6762360446570973
User 134744 AUC after training: 0.6766790714159135
User 134744 improves AUC. Keeping the model.
Training on augumented user 62036 5/50 current_auc = 0.6766790714159135
User 62036 AUC after training: 0.6760588339535708
User 62036 does not improve AUC. Reverting changes.
Training on augumented user 12985 6/50 current_auc = 0.6766790714159135
User 12985 AUC after training: 0.6754385964912282
User 12985 does not improve AUC. Reverting changes.
Training on augumented user 67347 7/50 current_auc = 0.6766790714159135
User 67347 AUC after training: 0.6763246500088606
User 67347 does not improve AUC. Reverting changes.
Training on augumented user 26799 8/50 current_auc = 0.6766790714159135
User 26799 AUC after training: 0.6756158071947546
User 26799 does not improve AUC. Reverting changes.
Training on augumented user 42926 9/50 current_auc = 0.6766790714159135
User 42926 AUC after training: 0.6789828105617579
User 42926 improves AUC. Keeping the model.
Training on augumented user 53667 10/50 current_auc = 0.6789828105617579
User 53667 AUC after training: 0.6791600212652844
User 53667 improves AUC. Keeping the model.
Training on augumented user 110942 11/50 current_auc = 0.6791600212652844
User 110942 AUC after training: 0.6783625730994152
User 110942 does not improve AUC. Reverting changes.
Training on augumented user 113692 12/50 current_auc = 0.6791600212652844
User 113692 AUC after training: 0.6799574694311536
User 113692 improves AUC. Keeping the model.
Training on augumented user 137205 13/50 current_auc = 0.6799574694311536
User 137205 AUC after training: 0.681552365762892
User 137205 improves AUC. Keeping the model.
Training on augumented user 103129 14/50 current_auc = 0.681552365762892
User 103129 AUC after training: 0.6830586567428674
User 103129 improves AUC. Keeping the model.
Training on augumented user 102983 15/50 current_auc = 0.6830586567428674
User 102983 AUC after training: 0.6836345915293284
User 102983 improves AUC. Keeping the model.
Training on augumented user 135321 16/50 current_auc = 0.6836345915293284
User 135321 AUC after training: 0.6827928406875775
User 135321 does not improve AUC. Reverting changes.
Training on augumented user 138328 17/50 current_auc = 0.6836345915293284
User 138328 AUC after training: 0.6834573808258018
User 138328 does not improve AUC. Reverting changes.
Training on augumented user 18026 18/50 current_auc = 0.6836345915293284
User 18026 AUC after training: 0.6827042353358143
User 18026 does not improve AUC. Reverting changes.
Training on augumented user 131507 19/50 current_auc = 0.6836345915293284
User 131507 AUC after training: 0.6841219209640262
User 131507 improves AUC. Keeping the model.
Training on augumented user 60542 20/50 current_auc = 0.6841219209640262
User 60542 AUC after training: 0.682261208576998
User 60542 does not improve AUC. Reverting changes.
Training on augumented user 76487 21/50 current_auc = 0.6841219209640262
User 76487 AUC after training: 0.6828814460393408
User 76487 does not improve AUC. Reverting changes.
Training on augumented user 100115 22/50 current_auc = 0.6841219209640262
User 100115 AUC after training: 0.6829700513911041
User 100115 does not improve AUC. Reverting changes.
Training on augumented user 20171 23/50 current_auc = 0.6841219209640262
User 20171 AUC after training: 0.6831472620946305
User 20171 does not improve AUC. Reverting changes.
Training on augumented user 46053 24/50 current_auc = 0.6841219209640262
User 46053 AUC after training: 0.6824384192805246
User 46053 does not improve AUC. Reverting changes.
Training on augumented user 20398 25/50 current_auc = 0.6841219209640262
User 20398 AUC after training: 0.6832801701222754
User 20398 does not improve AUC. Reverting changes.
Training on augumented user 5239 26/50 current_auc = 0.6841219209640262
User 5239 AUC after training: 0.6825270246322879
User 5239 does not improve AUC. Reverting changes.
Training on augumented user 112405 27/50 current_auc = 0.6841219209640262
User 112405 AUC after training: 0.6827042353358144
User 112405 does not improve AUC. Reverting changes.
Training on augumented user 115564 28/50 current_auc = 0.6841219209640262
User 115564 AUC after training: 0.6838561049087365
User 115564 does not improve AUC. Reverting changes.
Training on augumented user 138083 29/50 current_auc = 0.6841219209640262
User 138083 AUC after training: 0.6826599326599326
User 138083 does not improve AUC. Reverting changes.
Training on augumented user 48626 30/50 current_auc = 0.6841219209640262
User 48626 AUC after training: 0.68367889420521
User 48626 does not improve AUC. Reverting changes.
Training on augumented user 16776 31/50 current_auc = 0.6841219209640262
User 16776 AUC after training: 0.6835902888534467
User 16776 does not improve AUC. Reverting changes.
Training on augumented user 131638 32/50 current_auc = 0.6841219209640262
User 131638 AUC after training: 0.6842105263157894
User 131638 improves AUC. Keeping the model.
Training on augumented user 277 33/50 current_auc = 0.6842105263157894
User 277 AUC after training: 0.6823498139287614
User 277 does not improve AUC. Reverting changes.
Training on augumented user 66527 34/50 current_auc = 0.6842105263157894
User 66527 AUC after training: 0.6852737905369484
User 66527 improves AUC. Keeping the model.
Training on augumented user 55183 35/50 current_auc = 0.6852737905369484
User 55183 AUC after training: 0.682970051391104
User 55183 does not improve AUC. Reverting changes.
Training on augumented user 68892 36/50 current_auc = 0.6852737905369484
User 68892 AUC after training: 0.6831915647705121
User 68892 does not improve AUC. Reverting changes.
Training on augumented user 35761 37/50 current_auc = 0.6852737905369484
User 35761 AUC after training: 0.6866028708133972
User 35761 improves AUC. Keeping the model.
Training on augumented user 25076 38/50 current_auc = 0.6866028708133972
User 25076 AUC after training: 0.6866914761651604
User 25076 improves AUC. Keeping the model.
Training on augumented user 121334 39/50 current_auc = 0.6866914761651604
User 121334 AUC after training: 0.6848307637781321
User 121334 does not improve AUC. Reverting changes.
Training on augumented user 51142 40/50 current_auc = 0.6866914761651604
User 51142 AUC after training: 0.6866028708133971
User 51142 does not improve AUC. Reverting changes.
Training on augumented user 99635 41/50 current_auc = 0.6866914761651604
User 99635 AUC after training: 0.6854510012404749
User 99635 does not improve AUC. Reverting changes.
Training on augumented user 20778 42/50 current_auc = 0.6866914761651604
User 20778 AUC after training: 0.6874889243310296
User 20778 improves AUC. Keeping the model.
Training on augumented user 73712 43/50 current_auc = 0.6874889243310296
User 73712 AUC after training: 0.6844763423710792
User 73712 does not improve AUC. Reverting changes.
Training on augumented user 21020 44/50 current_auc = 0.6874889243310296
User 21020 AUC after training: 0.6841219209640262
User 21020 does not improve AUC. Reverting changes.
Training on augumented user 91204 45/50 current_auc = 0.6874889243310296
User 91204 AUC after training: 0.6867800815169236
User 91204 does not improve AUC. Reverting changes.
Training on augumented user 71117 46/50 current_auc = 0.6874889243310296
User 71117 AUC after training: 0.6877547403863193
User 71117 improves AUC. Keeping the model.
Training on augumented user 121039 47/50 current_auc = 0.6877547403863193
User 121039 AUC after training: 0.6873117136275031
User 121039 does not improve AUC. Reverting changes.
Training on augumented user 113142 48/50 current_auc = 0.6877547403863193
User 113142 AUC after training: 0.6879319510898458
User 113142 improves AUC. Keeping the model.
Training on augumented user 37580 49/50 current_auc = 0.6879319510898458
User 37580 AUC after training: 0.6913875598086126
User 37580 improves AUC. Keeping the model.
[2024-12-02 18:12:01.681259] start test user 84161 64/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:12:02.363475] start test user 84161 64/568 recall augumented users by random, augumented_users = [78462, 66350, 113883, 37085, 65283, 61496, 114938, 28117, 35679, 46015, 99478, 42002, 5078, 6963, 130321, 108747, 59673, 46721, 107525, 18040, 124829, 42788, 77258, 96334, 106278, 134790, 83992, 109767, 44641, 71803, 94221, 68529, 87057, 69324, 39607, 47396, 33986, 41121, 107845, 18722, 56292, 467, 21118, 44340, 26305, 82515, 29219, 103020, 61379, 48821]
[2024-12-02 18:12:02.384910] user = 84161 Cloud 64/568
[2024-12-02 18:12:02.398285] user = 84161 Local 64/568
[2024-12-02 18:12:02.465935] user = 84161 Local+ 64/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:12:05.948445] user = 84161 MPDA- 64/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8426573426573427
Training on augumented user 78462 0/50 current_auc = 0.8426573426573427
User 78462 AUC after training: 0.8461538461538461
User 78462 improves AUC. Keeping the model.
Training on augumented user 66350 1/50 current_auc = 0.8461538461538461
User 66350 AUC after training: 0.8461538461538461
User 66350 does not improve AUC. Reverting changes.
Training on augumented user 113883 2/50 current_auc = 0.8461538461538461
User 113883 AUC after training: 0.8461538461538461
User 113883 does not improve AUC. Reverting changes.
Training on augumented user 37085 3/50 current_auc = 0.8461538461538461
User 37085 AUC after training: 0.8461538461538461
User 37085 does not improve AUC. Reverting changes.
Training on augumented user 65283 4/50 current_auc = 0.8461538461538461
User 65283 AUC after training: 0.8461538461538461
User 65283 does not improve AUC. Reverting changes.
Training on augumented user 61496 5/50 current_auc = 0.8461538461538461
User 61496 AUC after training: 0.8484848484848485
User 61496 improves AUC. Keeping the model.
Training on augumented user 114938 6/50 current_auc = 0.8484848484848485
User 114938 AUC after training: 0.8484848484848485
User 114938 does not improve AUC. Reverting changes.
Training on augumented user 28117 7/50 current_auc = 0.8484848484848485
User 28117 AUC after training: 0.8508158508158508
User 28117 improves AUC. Keeping the model.
Training on augumented user 35679 8/50 current_auc = 0.8508158508158508
User 35679 AUC after training: 0.8508158508158508
User 35679 does not improve AUC. Reverting changes.
Training on augumented user 46015 9/50 current_auc = 0.8508158508158508
User 46015 AUC after training: 0.8508158508158508
User 46015 does not improve AUC. Reverting changes.
Training on augumented user 99478 10/50 current_auc = 0.8508158508158508
User 99478 AUC after training: 0.8484848484848485
User 99478 does not improve AUC. Reverting changes.
Training on augumented user 42002 11/50 current_auc = 0.8508158508158508
User 42002 AUC after training: 0.8508158508158508
User 42002 does not improve AUC. Reverting changes.
Training on augumented user 5078 12/50 current_auc = 0.8508158508158508
User 5078 AUC after training: 0.8508158508158508
User 5078 does not improve AUC. Reverting changes.
Training on augumented user 6963 13/50 current_auc = 0.8508158508158508
User 6963 AUC after training: 0.8508158508158508
User 6963 does not improve AUC. Reverting changes.
Training on augumented user 130321 14/50 current_auc = 0.8508158508158508
User 130321 AUC after training: 0.8508158508158508
User 130321 does not improve AUC. Reverting changes.
Training on augumented user 108747 15/50 current_auc = 0.8508158508158508
User 108747 AUC after training: 0.8508158508158508
User 108747 does not improve AUC. Reverting changes.
Training on augumented user 59673 16/50 current_auc = 0.8508158508158508
User 59673 AUC after training: 0.8508158508158508
User 59673 does not improve AUC. Reverting changes.
Training on augumented user 46721 17/50 current_auc = 0.8508158508158508
User 46721 AUC after training: 0.8508158508158508
User 46721 does not improve AUC. Reverting changes.
Training on augumented user 107525 18/50 current_auc = 0.8508158508158508
User 107525 AUC after training: 0.8508158508158508
User 107525 does not improve AUC. Reverting changes.
Training on augumented user 18040 19/50 current_auc = 0.8508158508158508
User 18040 AUC after training: 0.8508158508158508
User 18040 does not improve AUC. Reverting changes.
Training on augumented user 124829 20/50 current_auc = 0.8508158508158508
User 124829 AUC after training: 0.8508158508158508
User 124829 does not improve AUC. Reverting changes.
Training on augumented user 42788 21/50 current_auc = 0.8508158508158508
User 42788 AUC after training: 0.8484848484848485
User 42788 does not improve AUC. Reverting changes.
Training on augumented user 77258 22/50 current_auc = 0.8508158508158508
User 77258 AUC after training: 0.8484848484848485
User 77258 does not improve AUC. Reverting changes.
Training on augumented user 96334 23/50 current_auc = 0.8508158508158508
User 96334 AUC after training: 0.8508158508158508
User 96334 does not improve AUC. Reverting changes.
Training on augumented user 106278 24/50 current_auc = 0.8508158508158508
User 106278 AUC after training: 0.8484848484848485
User 106278 does not improve AUC. Reverting changes.
Training on augumented user 134790 25/50 current_auc = 0.8508158508158508
User 134790 AUC after training: 0.8484848484848485
User 134790 does not improve AUC. Reverting changes.
Training on augumented user 83992 26/50 current_auc = 0.8508158508158508
User 83992 AUC after training: 0.8508158508158508
User 83992 does not improve AUC. Reverting changes.
Training on augumented user 109767 27/50 current_auc = 0.8508158508158508
User 109767 AUC after training: 0.8508158508158508
User 109767 does not improve AUC. Reverting changes.
Training on augumented user 44641 28/50 current_auc = 0.8508158508158508
User 44641 AUC after training: 0.8484848484848485
User 44641 does not improve AUC. Reverting changes.
Training on augumented user 71803 29/50 current_auc = 0.8508158508158508
User 71803 AUC after training: 0.8508158508158508
User 71803 does not improve AUC. Reverting changes.
Training on augumented user 94221 30/50 current_auc = 0.8508158508158508
User 94221 AUC after training: 0.8508158508158508
User 94221 does not improve AUC. Reverting changes.
Training on augumented user 68529 31/50 current_auc = 0.8508158508158508
User 68529 AUC after training: 0.8508158508158508
User 68529 does not improve AUC. Reverting changes.
Training on augumented user 87057 32/50 current_auc = 0.8508158508158508
User 87057 AUC after training: 0.8484848484848485
User 87057 does not improve AUC. Reverting changes.
Training on augumented user 69324 33/50 current_auc = 0.8508158508158508
User 69324 AUC after training: 0.8508158508158508
User 69324 does not improve AUC. Reverting changes.
Training on augumented user 39607 34/50 current_auc = 0.8508158508158508
User 39607 AUC after training: 0.8508158508158508
User 39607 does not improve AUC. Reverting changes.
Training on augumented user 47396 35/50 current_auc = 0.8508158508158508
User 47396 AUC after training: 0.8484848484848485
User 47396 does not improve AUC. Reverting changes.
Training on augumented user 33986 36/50 current_auc = 0.8508158508158508
User 33986 AUC after training: 0.8508158508158508
User 33986 does not improve AUC. Reverting changes.
Training on augumented user 41121 37/50 current_auc = 0.8508158508158508
User 41121 AUC after training: 0.8508158508158508
User 41121 does not improve AUC. Reverting changes.
Training on augumented user 107845 38/50 current_auc = 0.8508158508158508
User 107845 AUC after training: 0.8508158508158508
User 107845 does not improve AUC. Reverting changes.
Training on augumented user 18722 39/50 current_auc = 0.8508158508158508
User 18722 AUC after training: 0.8508158508158508
User 18722 does not improve AUC. Reverting changes.
Training on augumented user 56292 40/50 current_auc = 0.8508158508158508
User 56292 AUC after training: 0.8484848484848485
User 56292 does not improve AUC. Reverting changes.
Training on augumented user 467 41/50 current_auc = 0.8508158508158508
User 467 AUC after training: 0.8508158508158508
User 467 does not improve AUC. Reverting changes.
Training on augumented user 21118 42/50 current_auc = 0.8508158508158508
User 21118 AUC after training: 0.8508158508158508
User 21118 does not improve AUC. Reverting changes.
Training on augumented user 44340 43/50 current_auc = 0.8508158508158508
User 44340 AUC after training: 0.8484848484848485
User 44340 does not improve AUC. Reverting changes.
Training on augumented user 26305 44/50 current_auc = 0.8508158508158508
User 26305 AUC after training: 0.8508158508158508
User 26305 does not improve AUC. Reverting changes.
Training on augumented user 82515 45/50 current_auc = 0.8508158508158508
User 82515 AUC after training: 0.8508158508158508
User 82515 does not improve AUC. Reverting changes.
Training on augumented user 29219 46/50 current_auc = 0.8508158508158508
User 29219 AUC after training: 0.8508158508158508
User 29219 does not improve AUC. Reverting changes.
Training on augumented user 103020 47/50 current_auc = 0.8508158508158508
User 103020 AUC after training: 0.8508158508158508
User 103020 does not improve AUC. Reverting changes.
Training on augumented user 61379 48/50 current_auc = 0.8508158508158508
User 61379 AUC after training: 0.8508158508158508
User 61379 does not improve AUC. Reverting changes.
Training on augumented user 48821 49/50 current_auc = 0.8508158508158508
User 48821 AUC after training: 0.8508158508158508
User 48821 does not improve AUC. Reverting changes.
[2024-12-02 18:12:37.085863] start test user 84182 65/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:12:37.525524] start test user 84182 65/568 recall augumented users by random, augumented_users = [34242, 87866, 127245, 49461, 69083, 103244, 77343, 59312, 79765, 132137, 50640, 126662, 111056, 27833, 34843, 73553, 83086, 67549, 89766, 2860, 66446, 4241, 96126, 20374, 47940, 42199, 21865, 105526, 24886, 74230, 124526, 2163, 51626, 128268, 114665, 38243, 36287, 114818, 73359, 108427, 93045, 103597, 55148, 87560, 55570, 27090, 33201, 29774, 123054, 92867]
[2024-12-02 18:12:37.540582] user = 84182 Cloud 65/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:12:37.547558] user = 84182 Local 65/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:12:37.579079] user = 84182 Local+ 65/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:12:40.123615] user = 84182 MPDA- 65/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 34242 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34242 AUC after training: 0.5
User 34242 does not improve AUC. Reverting changes.
Training on augumented user 87866 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87866 AUC after training: 0.5
User 87866 does not improve AUC. Reverting changes.
Training on augumented user 127245 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127245 AUC after training: 0.5
User 127245 does not improve AUC. Reverting changes.
Training on augumented user 49461 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49461 AUC after training: 0.5
User 49461 does not improve AUC. Reverting changes.
Training on augumented user 69083 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69083 AUC after training: 0.5
User 69083 does not improve AUC. Reverting changes.
Training on augumented user 103244 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103244 AUC after training: 0.5
User 103244 does not improve AUC. Reverting changes.
Training on augumented user 77343 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77343 AUC after training: 0.5
User 77343 does not improve AUC. Reverting changes.
Training on augumented user 59312 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59312 AUC after training: 0.5
User 59312 does not improve AUC. Reverting changes.
Training on augumented user 79765 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79765 AUC after training: 0.5
User 79765 does not improve AUC. Reverting changes.
Training on augumented user 132137 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132137 AUC after training: 0.5
User 132137 does not improve AUC. Reverting changes.
Training on augumented user 50640 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50640 AUC after training: 0.5
User 50640 does not improve AUC. Reverting changes.
Training on augumented user 126662 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126662 AUC after training: 0.5
User 126662 does not improve AUC. Reverting changes.
Training on augumented user 111056 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111056 AUC after training: 0.5
User 111056 does not improve AUC. Reverting changes.
Training on augumented user 27833 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27833 AUC after training: 0.5
User 27833 does not improve AUC. Reverting changes.
Training on augumented user 34843 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34843 AUC after training: 0.5
User 34843 does not improve AUC. Reverting changes.
Training on augumented user 73553 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73553 AUC after training: 0.5
User 73553 does not improve AUC. Reverting changes.
Training on augumented user 83086 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83086 AUC after training: 0.5
User 83086 does not improve AUC. Reverting changes.
Training on augumented user 67549 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67549 AUC after training: 0.5
User 67549 does not improve AUC. Reverting changes.
Training on augumented user 89766 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89766 AUC after training: 0.5
User 89766 does not improve AUC. Reverting changes.
Training on augumented user 2860 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2860 AUC after training: 0.5
User 2860 does not improve AUC. Reverting changes.
Training on augumented user 66446 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66446 AUC after training: 0.5
User 66446 does not improve AUC. Reverting changes.
Training on augumented user 4241 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4241 AUC after training: 0.5
User 4241 does not improve AUC. Reverting changes.
Training on augumented user 96126 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96126 AUC after training: 0.5
User 96126 does not improve AUC. Reverting changes.
Training on augumented user 20374 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20374 AUC after training: 0.5
User 20374 does not improve AUC. Reverting changes.
Training on augumented user 47940 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47940 AUC after training: 0.5
User 47940 does not improve AUC. Reverting changes.
Training on augumented user 42199 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42199 AUC after training: 0.5
User 42199 does not improve AUC. Reverting changes.
Training on augumented user 21865 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21865 AUC after training: 0.5
User 21865 does not improve AUC. Reverting changes.
Training on augumented user 105526 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105526 AUC after training: 0.5
User 105526 does not improve AUC. Reverting changes.
Training on augumented user 24886 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24886 AUC after training: 0.5
User 24886 does not improve AUC. Reverting changes.
Training on augumented user 74230 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74230 AUC after training: 0.5
User 74230 does not improve AUC. Reverting changes.
Training on augumented user 124526 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124526 AUC after training: 0.5
User 124526 does not improve AUC. Reverting changes.
Training on augumented user 2163 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2163 AUC after training: 0.5
User 2163 does not improve AUC. Reverting changes.
Training on augumented user 51626 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51626 AUC after training: 0.5
User 51626 does not improve AUC. Reverting changes.
Training on augumented user 128268 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128268 AUC after training: 0.5
User 128268 does not improve AUC. Reverting changes.
Training on augumented user 114665 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114665 AUC after training: 0.5
User 114665 does not improve AUC. Reverting changes.
Training on augumented user 38243 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38243 AUC after training: 0.5
User 38243 does not improve AUC. Reverting changes.
Training on augumented user 36287 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36287 AUC after training: 0.5
User 36287 does not improve AUC. Reverting changes.
Training on augumented user 114818 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114818 AUC after training: 0.5
User 114818 does not improve AUC. Reverting changes.
Training on augumented user 73359 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73359 AUC after training: 0.5
User 73359 does not improve AUC. Reverting changes.
Training on augumented user 108427 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108427 AUC after training: 0.5
User 108427 does not improve AUC. Reverting changes.
Training on augumented user 93045 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93045 AUC after training: 0.5
User 93045 does not improve AUC. Reverting changes.
Training on augumented user 103597 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103597 AUC after training: 0.5
User 103597 does not improve AUC. Reverting changes.
Training on augumented user 55148 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55148 AUC after training: 0.5
User 55148 does not improve AUC. Reverting changes.
Training on augumented user 87560 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87560 AUC after training: 0.5
User 87560 does not improve AUC. Reverting changes.
Training on augumented user 55570 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55570 AUC after training: 0.5
User 55570 does not improve AUC. Reverting changes.
Training on augumented user 27090 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27090 AUC after training: 0.5
User 27090 does not improve AUC. Reverting changes.
Training on augumented user 33201 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33201 AUC after training: 0.5
User 33201 does not improve AUC. Reverting changes.
Training on augumented user 29774 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29774 AUC after training: 0.5
User 29774 does not improve AUC. Reverting changes.
Training on augumented user 123054 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123054 AUC after training: 0.5
User 123054 does not improve AUC. Reverting changes.
Training on augumented user 92867 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92867 AUC after training: 0.5
User 92867 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:13:14.730834] start test user 84247 66/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:13:15.206236] start test user 84247 66/568 recall augumented users by random, augumented_users = [84340, 108537, 94550, 32879, 35695, 46739, 105882, 33846, 30156, 82026, 73507, 51936, 60625, 61655, 12228, 126865, 129373, 37165, 76536, 54232, 29142, 62989, 115850, 67995, 42098, 58106, 101401, 22368, 307, 64231, 88396, 51481, 80866, 46653, 28542, 15575, 91039, 56763, 18420, 130322, 8539, 85245, 34095, 49161, 102923, 117162, 3008, 135279, 138478, 135990]
[2024-12-02 18:13:15.221020] user = 84247 Cloud 66/568
[2024-12-02 18:13:15.253013] user = 84247 Local 66/568
[2024-12-02 18:13:15.313693] user = 84247 Local+ 66/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:13:17.354128] user = 84247 MPDA- 66/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6734453781512605
Training on augumented user 84340 0/50 current_auc = 0.6734453781512605
User 84340 AUC after training: 0.6734453781512604
User 84340 does not improve AUC. Reverting changes.
Training on augumented user 108537 1/50 current_auc = 0.6734453781512605
User 108537 AUC after training: 0.6749579831932773
User 108537 improves AUC. Keeping the model.
Training on augumented user 94550 2/50 current_auc = 0.6749579831932773
User 94550 AUC after training: 0.6707563025210084
User 94550 does not improve AUC. Reverting changes.
Training on augumented user 32879 3/50 current_auc = 0.6749579831932773
User 32879 AUC after training: 0.6741176470588235
User 32879 does not improve AUC. Reverting changes.
Training on augumented user 35695 4/50 current_auc = 0.6749579831932773
User 35695 AUC after training: 0.675126050420168
User 35695 improves AUC. Keeping the model.
Training on augumented user 46739 5/50 current_auc = 0.675126050420168
User 46739 AUC after training: 0.676470588235294
User 46739 improves AUC. Keeping the model.
Training on augumented user 105882 6/50 current_auc = 0.676470588235294
User 105882 AUC after training: 0.6752941176470588
User 105882 does not improve AUC. Reverting changes.
Training on augumented user 33846 7/50 current_auc = 0.676470588235294
User 33846 AUC after training: 0.6712605042016806
User 33846 does not improve AUC. Reverting changes.
Training on augumented user 30156 8/50 current_auc = 0.676470588235294
User 30156 AUC after training: 0.6761344537815126
User 30156 does not improve AUC. Reverting changes.
Training on augumented user 82026 9/50 current_auc = 0.676470588235294
User 82026 AUC after training: 0.6773109243697478
User 82026 improves AUC. Keeping the model.
Training on augumented user 73507 10/50 current_auc = 0.6773109243697478
User 73507 AUC after training: 0.6741176470588235
User 73507 does not improve AUC. Reverting changes.
Training on augumented user 51936 11/50 current_auc = 0.6773109243697478
User 51936 AUC after training: 0.6746218487394958
User 51936 does not improve AUC. Reverting changes.
Training on augumented user 60625 12/50 current_auc = 0.6773109243697478
User 60625 AUC after training: 0.6769747899159664
User 60625 does not improve AUC. Reverting changes.
Training on augumented user 61655 13/50 current_auc = 0.6773109243697478
User 61655 AUC after training: 0.6766386554621849
User 61655 does not improve AUC. Reverting changes.
Training on augumented user 12228 14/50 current_auc = 0.6773109243697478
User 12228 AUC after training: 0.675798319327731
User 12228 does not improve AUC. Reverting changes.
Training on augumented user 126865 15/50 current_auc = 0.6773109243697478
User 126865 AUC after training: 0.6739495798319328
User 126865 does not improve AUC. Reverting changes.
Training on augumented user 129373 16/50 current_auc = 0.6773109243697478
User 129373 AUC after training: 0.6761344537815126
User 129373 does not improve AUC. Reverting changes.
Training on augumented user 37165 17/50 current_auc = 0.6773109243697478
User 37165 AUC after training: 0.6763025210084034
User 37165 does not improve AUC. Reverting changes.
Training on augumented user 76536 18/50 current_auc = 0.6773109243697478
User 76536 AUC after training: 0.6687394957983194
User 76536 does not improve AUC. Reverting changes.
Training on augumented user 54232 19/50 current_auc = 0.6773109243697478
User 54232 AUC after training: 0.6749579831932773
User 54232 does not improve AUC. Reverting changes.
Training on augumented user 29142 20/50 current_auc = 0.6773109243697478
User 29142 AUC after training: 0.6791596638655463
User 29142 improves AUC. Keeping the model.
Training on augumented user 62989 21/50 current_auc = 0.6791596638655463
User 62989 AUC after training: 0.6761344537815126
User 62989 does not improve AUC. Reverting changes.
Training on augumented user 115850 22/50 current_auc = 0.6791596638655463
User 115850 AUC after training: 0.6769747899159664
User 115850 does not improve AUC. Reverting changes.
Training on augumented user 67995 23/50 current_auc = 0.6791596638655463
User 67995 AUC after training: 0.676470588235294
User 67995 does not improve AUC. Reverting changes.
Training on augumented user 42098 24/50 current_auc = 0.6791596638655463
User 42098 AUC after training: 0.6768067226890757
User 42098 does not improve AUC. Reverting changes.
Training on augumented user 58106 25/50 current_auc = 0.6791596638655463
User 58106 AUC after training: 0.6788235294117647
User 58106 does not improve AUC. Reverting changes.
Training on augumented user 101401 26/50 current_auc = 0.6791596638655463
User 101401 AUC after training: 0.6769747899159663
User 101401 does not improve AUC. Reverting changes.
Training on augumented user 22368 27/50 current_auc = 0.6791596638655463
User 22368 AUC after training: 0.6776470588235294
User 22368 does not improve AUC. Reverting changes.
Training on augumented user 307 28/50 current_auc = 0.6791596638655463
User 307 AUC after training: 0.6773109243697479
User 307 does not improve AUC. Reverting changes.
Training on augumented user 64231 29/50 current_auc = 0.6791596638655463
User 64231 AUC after training: 0.679327731092437
User 64231 improves AUC. Keeping the model.
Training on augumented user 88396 30/50 current_auc = 0.679327731092437
User 88396 AUC after training: 0.6793277310924369
User 88396 does not improve AUC. Reverting changes.
Training on augumented user 51481 31/50 current_auc = 0.679327731092437
User 51481 AUC after training: 0.6793277310924369
User 51481 does not improve AUC. Reverting changes.
Training on augumented user 80866 32/50 current_auc = 0.679327731092437
User 80866 AUC after training: 0.6796638655462185
User 80866 improves AUC. Keeping the model.
Training on augumented user 46653 33/50 current_auc = 0.6796638655462185
User 46653 AUC after training: 0.6796638655462185
User 46653 does not improve AUC. Reverting changes.
Training on augumented user 28542 34/50 current_auc = 0.6796638655462185
User 28542 AUC after training: 0.6805042016806723
User 28542 improves AUC. Keeping the model.
Training on augumented user 15575 35/50 current_auc = 0.6805042016806723
User 15575 AUC after training: 0.6799999999999999
User 15575 does not improve AUC. Reverting changes.
Training on augumented user 91039 36/50 current_auc = 0.6805042016806723
User 91039 AUC after training: 0.6811764705882353
User 91039 improves AUC. Keeping the model.
Training on augumented user 56763 37/50 current_auc = 0.6811764705882353
User 56763 AUC after training: 0.6783193277310924
User 56763 does not improve AUC. Reverting changes.
Training on augumented user 18420 38/50 current_auc = 0.6811764705882353
User 18420 AUC after training: 0.6811764705882353
User 18420 does not improve AUC. Reverting changes.
Training on augumented user 130322 39/50 current_auc = 0.6811764705882353
User 130322 AUC after training: 0.6805042016806723
User 130322 does not improve AUC. Reverting changes.
Training on augumented user 8539 40/50 current_auc = 0.6811764705882353
User 8539 AUC after training: 0.6789915966386555
User 8539 does not improve AUC. Reverting changes.
Training on augumented user 85245 41/50 current_auc = 0.6811764705882353
User 85245 AUC after training: 0.6803361344537815
User 85245 does not improve AUC. Reverting changes.
Training on augumented user 34095 42/50 current_auc = 0.6811764705882353
User 34095 AUC after training: 0.6796638655462184
User 34095 does not improve AUC. Reverting changes.
Training on augumented user 49161 43/50 current_auc = 0.6811764705882353
User 49161 AUC after training: 0.6773109243697479
User 49161 does not improve AUC. Reverting changes.
Training on augumented user 102923 44/50 current_auc = 0.6811764705882353
User 102923 AUC after training: 0.6768067226890757
User 102923 does not improve AUC. Reverting changes.
Training on augumented user 117162 45/50 current_auc = 0.6811764705882353
User 117162 AUC after training: 0.6793277310924369
User 117162 does not improve AUC. Reverting changes.
Training on augumented user 3008 46/50 current_auc = 0.6811764705882353
User 3008 AUC after training: 0.680672268907563
User 3008 does not improve AUC. Reverting changes.
Training on augumented user 135279 47/50 current_auc = 0.6811764705882353
User 135279 AUC after training: 0.6801680672268907
User 135279 does not improve AUC. Reverting changes.
Training on augumented user 138478 48/50 current_auc = 0.6811764705882353
User 138478 AUC after training: 0.6789915966386555
User 138478 does not improve AUC. Reverting changes.
Training on augumented user 135990 49/50 current_auc = 0.6811764705882353
User 135990 AUC after training: 0.6796638655462185
User 135990 does not improve AUC. Reverting changes.
[2024-12-02 18:13:46.952078] start test user 84254 67/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:13:47.397254] start test user 84254 67/568 recall augumented users by random, augumented_users = [25042, 32704, 44131, 82795, 69677, 137244, 123072, 12786, 90754, 99083, 1188, 37642, 73402, 9749, 21169, 30290, 14686, 74957, 10156, 92939, 105941, 91204, 124883, 19167, 90045, 33944, 113884, 20639, 60098, 112034, 4183, 73534, 123050, 7640, 117041, 11808, 51421, 106033, 378, 137469, 73413, 18905, 93495, 138445, 122511, 36497, 114563, 112641, 63091, 125463]
[2024-12-02 18:13:47.412028] user = 84254 Cloud 67/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:13:47.426060] user = 84254 Local 67/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:13:47.465174] user = 84254 Local+ 67/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:13:50.315407] user = 84254 MPDA- 67/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 25042 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25042 AUC after training: 0.5
User 25042 does not improve AUC. Reverting changes.
Training on augumented user 32704 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32704 AUC after training: 0.5
User 32704 does not improve AUC. Reverting changes.
Training on augumented user 44131 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44131 AUC after training: 0.5
User 44131 does not improve AUC. Reverting changes.
Training on augumented user 82795 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82795 AUC after training: 0.5
User 82795 does not improve AUC. Reverting changes.
Training on augumented user 69677 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69677 AUC after training: 0.5
User 69677 does not improve AUC. Reverting changes.
Training on augumented user 137244 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137244 AUC after training: 0.5
User 137244 does not improve AUC. Reverting changes.
Training on augumented user 123072 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123072 AUC after training: 0.5
User 123072 does not improve AUC. Reverting changes.
Training on augumented user 12786 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12786 AUC after training: 0.5
User 12786 does not improve AUC. Reverting changes.
Training on augumented user 90754 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90754 AUC after training: 0.5
User 90754 does not improve AUC. Reverting changes.
Training on augumented user 99083 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99083 AUC after training: 0.5
User 99083 does not improve AUC. Reverting changes.
Training on augumented user 1188 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1188 AUC after training: 0.5
User 1188 does not improve AUC. Reverting changes.
Training on augumented user 37642 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37642 AUC after training: 0.5
User 37642 does not improve AUC. Reverting changes.
Training on augumented user 73402 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73402 AUC after training: 0.5
User 73402 does not improve AUC. Reverting changes.
Training on augumented user 9749 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9749 AUC after training: 0.5
User 9749 does not improve AUC. Reverting changes.
Training on augumented user 21169 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21169 AUC after training: 0.5
User 21169 does not improve AUC. Reverting changes.
Training on augumented user 30290 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30290 AUC after training: 0.5
User 30290 does not improve AUC. Reverting changes.
Training on augumented user 14686 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14686 AUC after training: 0.5
User 14686 does not improve AUC. Reverting changes.
Training on augumented user 74957 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74957 AUC after training: 0.5
User 74957 does not improve AUC. Reverting changes.
Training on augumented user 10156 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10156 AUC after training: 0.5
User 10156 does not improve AUC. Reverting changes.
Training on augumented user 92939 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92939 AUC after training: 0.5
User 92939 does not improve AUC. Reverting changes.
Training on augumented user 105941 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105941 AUC after training: 0.5
User 105941 does not improve AUC. Reverting changes.
Training on augumented user 91204 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91204 AUC after training: 0.5
User 91204 does not improve AUC. Reverting changes.
Training on augumented user 124883 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124883 AUC after training: 0.5
User 124883 does not improve AUC. Reverting changes.
Training on augumented user 19167 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19167 AUC after training: 0.5
User 19167 does not improve AUC. Reverting changes.
Training on augumented user 90045 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90045 AUC after training: 0.5
User 90045 does not improve AUC. Reverting changes.
Training on augumented user 33944 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33944 AUC after training: 0.5
User 33944 does not improve AUC. Reverting changes.
Training on augumented user 113884 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113884 AUC after training: 0.5
User 113884 does not improve AUC. Reverting changes.
Training on augumented user 20639 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20639 AUC after training: 0.5
User 20639 does not improve AUC. Reverting changes.
Training on augumented user 60098 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60098 AUC after training: 0.5
User 60098 does not improve AUC. Reverting changes.
Training on augumented user 112034 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112034 AUC after training: 0.5
User 112034 does not improve AUC. Reverting changes.
Training on augumented user 4183 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4183 AUC after training: 0.5
User 4183 does not improve AUC. Reverting changes.
Training on augumented user 73534 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73534 AUC after training: 0.5
User 73534 does not improve AUC. Reverting changes.
Training on augumented user 123050 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123050 AUC after training: 0.5
User 123050 does not improve AUC. Reverting changes.
Training on augumented user 7640 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7640 AUC after training: 0.5
User 7640 does not improve AUC. Reverting changes.
Training on augumented user 117041 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117041 AUC after training: 0.5
User 117041 does not improve AUC. Reverting changes.
Training on augumented user 11808 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11808 AUC after training: 0.5
User 11808 does not improve AUC. Reverting changes.
Training on augumented user 51421 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51421 AUC after training: 0.5
User 51421 does not improve AUC. Reverting changes.
Training on augumented user 106033 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106033 AUC after training: 0.5
User 106033 does not improve AUC. Reverting changes.
Training on augumented user 378 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 378 AUC after training: 0.5
User 378 does not improve AUC. Reverting changes.
Training on augumented user 137469 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137469 AUC after training: 0.5
User 137469 does not improve AUC. Reverting changes.
Training on augumented user 73413 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73413 AUC after training: 0.5
User 73413 does not improve AUC. Reverting changes.
Training on augumented user 18905 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18905 AUC after training: 0.5
User 18905 does not improve AUC. Reverting changes.
Training on augumented user 93495 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93495 AUC after training: 0.5
User 93495 does not improve AUC. Reverting changes.
Training on augumented user 138445 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138445 AUC after training: 0.5
User 138445 does not improve AUC. Reverting changes.
Training on augumented user 122511 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122511 AUC after training: 0.5
User 122511 does not improve AUC. Reverting changes.
Training on augumented user 36497 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36497 AUC after training: 0.5
User 36497 does not improve AUC. Reverting changes.
Training on augumented user 114563 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114563 AUC after training: 0.5
User 114563 does not improve AUC. Reverting changes.
Training on augumented user 112641 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112641 AUC after training: 0.5
User 112641 does not improve AUC. Reverting changes.
Training on augumented user 63091 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63091 AUC after training: 0.5
User 63091 does not improve AUC. Reverting changes.
Training on augumented user 125463 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125463 AUC after training: 0.5
User 125463 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:14:18.746841] start test user 84374 68/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:14:19.463627] start test user 84374 68/568 recall augumented users by random, augumented_users = [62766, 62323, 64226, 78187, 97236, 34651, 127150, 108632, 137483, 97826, 56665, 95826, 70340, 15451, 59375, 8105, 71264, 30495, 15233, 55509, 111122, 488, 69577, 110398, 13916, 113664, 24406, 137344, 25750, 1618, 125333, 105126, 39556, 20948, 114506, 89043, 66035, 111110, 15877, 60526, 128085, 28185, 13692, 20718, 71720, 60742, 69287, 57601, 6413, 11073]
[2024-12-02 18:14:19.485484] user = 84374 Cloud 68/568
[2024-12-02 18:14:19.495767] user = 84374 Local 68/568
[2024-12-02 18:14:19.577170] user = 84374 Local+ 68/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:14:22.402193] user = 84374 MPDA- 68/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.75
Training on augumented user 62766 0/50 current_auc = 0.75
User 62766 AUC after training: 0.75
User 62766 does not improve AUC. Reverting changes.
Training on augumented user 62323 1/50 current_auc = 0.75
User 62323 AUC after training: 0.75
User 62323 does not improve AUC. Reverting changes.
Training on augumented user 64226 2/50 current_auc = 0.75
User 64226 AUC after training: 0.75
User 64226 does not improve AUC. Reverting changes.
Training on augumented user 78187 3/50 current_auc = 0.75
User 78187 AUC after training: 0.75
User 78187 does not improve AUC. Reverting changes.
Training on augumented user 97236 4/50 current_auc = 0.75
User 97236 AUC after training: 0.75
User 97236 does not improve AUC. Reverting changes.
Training on augumented user 34651 5/50 current_auc = 0.75
User 34651 AUC after training: 0.7625
User 34651 improves AUC. Keeping the model.
Training on augumented user 127150 6/50 current_auc = 0.7625
User 127150 AUC after training: 0.775
User 127150 improves AUC. Keeping the model.
Training on augumented user 108632 7/50 current_auc = 0.775
User 108632 AUC after training: 0.775
User 108632 does not improve AUC. Reverting changes.
Training on augumented user 137483 8/50 current_auc = 0.775
User 137483 AUC after training: 0.7625
User 137483 does not improve AUC. Reverting changes.
Training on augumented user 97826 9/50 current_auc = 0.775
User 97826 AUC after training: 0.75
User 97826 does not improve AUC. Reverting changes.
Training on augumented user 56665 10/50 current_auc = 0.775
User 56665 AUC after training: 0.7625
User 56665 does not improve AUC. Reverting changes.
Training on augumented user 95826 11/50 current_auc = 0.775
User 95826 AUC after training: 0.775
User 95826 does not improve AUC. Reverting changes.
Training on augumented user 70340 12/50 current_auc = 0.775
User 70340 AUC after training: 0.775
User 70340 does not improve AUC. Reverting changes.
Training on augumented user 15451 13/50 current_auc = 0.775
User 15451 AUC after training: 0.775
User 15451 does not improve AUC. Reverting changes.
Training on augumented user 59375 14/50 current_auc = 0.775
User 59375 AUC after training: 0.775
User 59375 does not improve AUC. Reverting changes.
Training on augumented user 8105 15/50 current_auc = 0.775
User 8105 AUC after training: 0.775
User 8105 does not improve AUC. Reverting changes.
Training on augumented user 71264 16/50 current_auc = 0.775
User 71264 AUC after training: 0.7625
User 71264 does not improve AUC. Reverting changes.
Training on augumented user 30495 17/50 current_auc = 0.775
User 30495 AUC after training: 0.7625
User 30495 does not improve AUC. Reverting changes.
Training on augumented user 15233 18/50 current_auc = 0.775
User 15233 AUC after training: 0.775
User 15233 does not improve AUC. Reverting changes.
Training on augumented user 55509 19/50 current_auc = 0.775
User 55509 AUC after training: 0.775
User 55509 does not improve AUC. Reverting changes.
Training on augumented user 111122 20/50 current_auc = 0.775
User 111122 AUC after training: 0.775
User 111122 does not improve AUC. Reverting changes.
Training on augumented user 488 21/50 current_auc = 0.775
User 488 AUC after training: 0.775
User 488 does not improve AUC. Reverting changes.
Training on augumented user 69577 22/50 current_auc = 0.775
User 69577 AUC after training: 0.775
User 69577 does not improve AUC. Reverting changes.
Training on augumented user 110398 23/50 current_auc = 0.775
User 110398 AUC after training: 0.7625
User 110398 does not improve AUC. Reverting changes.
Training on augumented user 13916 24/50 current_auc = 0.775
User 13916 AUC after training: 0.7625
User 13916 does not improve AUC. Reverting changes.
Training on augumented user 113664 25/50 current_auc = 0.775
User 113664 AUC after training: 0.775
User 113664 does not improve AUC. Reverting changes.
Training on augumented user 24406 26/50 current_auc = 0.775
User 24406 AUC after training: 0.7625
User 24406 does not improve AUC. Reverting changes.
Training on augumented user 137344 27/50 current_auc = 0.775
User 137344 AUC after training: 0.775
User 137344 does not improve AUC. Reverting changes.
Training on augumented user 25750 28/50 current_auc = 0.775
User 25750 AUC after training: 0.7625
User 25750 does not improve AUC. Reverting changes.
Training on augumented user 1618 29/50 current_auc = 0.775
User 1618 AUC after training: 0.7625
User 1618 does not improve AUC. Reverting changes.
Training on augumented user 125333 30/50 current_auc = 0.775
User 125333 AUC after training: 0.775
User 125333 does not improve AUC. Reverting changes.
Training on augumented user 105126 31/50 current_auc = 0.775
User 105126 AUC after training: 0.775
User 105126 does not improve AUC. Reverting changes.
Training on augumented user 39556 32/50 current_auc = 0.775
User 39556 AUC after training: 0.775
User 39556 does not improve AUC. Reverting changes.
Training on augumented user 20948 33/50 current_auc = 0.775
User 20948 AUC after training: 0.7625
User 20948 does not improve AUC. Reverting changes.
Training on augumented user 114506 34/50 current_auc = 0.775
User 114506 AUC after training: 0.7625
User 114506 does not improve AUC. Reverting changes.
Training on augumented user 89043 35/50 current_auc = 0.775
User 89043 AUC after training: 0.7625
User 89043 does not improve AUC. Reverting changes.
Training on augumented user 66035 36/50 current_auc = 0.775
User 66035 AUC after training: 0.775
User 66035 does not improve AUC. Reverting changes.
Training on augumented user 111110 37/50 current_auc = 0.775
User 111110 AUC after training: 0.7625
User 111110 does not improve AUC. Reverting changes.
Training on augumented user 15877 38/50 current_auc = 0.775
User 15877 AUC after training: 0.775
User 15877 does not improve AUC. Reverting changes.
Training on augumented user 60526 39/50 current_auc = 0.775
User 60526 AUC after training: 0.775
User 60526 does not improve AUC. Reverting changes.
Training on augumented user 128085 40/50 current_auc = 0.775
User 128085 AUC after training: 0.775
User 128085 does not improve AUC. Reverting changes.
Training on augumented user 28185 41/50 current_auc = 0.775
User 28185 AUC after training: 0.775
User 28185 does not improve AUC. Reverting changes.
Training on augumented user 13692 42/50 current_auc = 0.775
User 13692 AUC after training: 0.775
User 13692 does not improve AUC. Reverting changes.
Training on augumented user 20718 43/50 current_auc = 0.775
User 20718 AUC after training: 0.775
User 20718 does not improve AUC. Reverting changes.
Training on augumented user 71720 44/50 current_auc = 0.775
User 71720 AUC after training: 0.775
User 71720 does not improve AUC. Reverting changes.
Training on augumented user 60742 45/50 current_auc = 0.775
User 60742 AUC after training: 0.7625
User 60742 does not improve AUC. Reverting changes.
Training on augumented user 69287 46/50 current_auc = 0.775
User 69287 AUC after training: 0.775
User 69287 does not improve AUC. Reverting changes.
Training on augumented user 57601 47/50 current_auc = 0.775
User 57601 AUC after training: 0.7625
User 57601 does not improve AUC. Reverting changes.
Training on augumented user 6413 48/50 current_auc = 0.775
User 6413 AUC after training: 0.7625
User 6413 does not improve AUC. Reverting changes.
Training on augumented user 11073 49/50 current_auc = 0.775
User 11073 AUC after training: 0.7625
User 11073 does not improve AUC. Reverting changes.
[2024-12-02 18:14:55.236121] start test user 84379 69/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:14:55.821915] start test user 84379 69/568 recall augumented users by random, augumented_users = [64214, 46858, 55591, 5312, 56483, 41312, 68217, 74578, 32480, 29070, 107807, 75269, 59364, 74692, 95733, 118614, 6264, 86892, 121761, 108792, 86173, 37131, 135242, 47110, 96023, 26007, 6660, 134373, 100910, 43269, 4648, 93534, 83660, 95207, 17173, 68132, 100133, 55367, 93061, 91872, 22897, 133164, 125370, 41537, 12409, 22895, 20870, 111752, 42432, 79722]
[2024-12-02 18:14:55.838718] user = 84379 Cloud 69/568
[2024-12-02 18:14:55.848727] user = 84379 Local 69/568
[2024-12-02 18:14:55.966261] user = 84379 Local+ 69/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:14:58.396969] user = 84379 MPDA- 69/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7366666666666667
Training on augumented user 64214 0/50 current_auc = 0.7366666666666667
User 64214 AUC after training: 0.7416666666666667
User 64214 improves AUC. Keeping the model.
Training on augumented user 46858 1/50 current_auc = 0.7416666666666667
User 46858 AUC after training: 0.7416666666666667
User 46858 does not improve AUC. Reverting changes.
Training on augumented user 55591 2/50 current_auc = 0.7416666666666667
User 55591 AUC after training: 0.7416666666666667
User 55591 does not improve AUC. Reverting changes.
Training on augumented user 5312 3/50 current_auc = 0.7416666666666667
User 5312 AUC after training: 0.74
User 5312 does not improve AUC. Reverting changes.
Training on augumented user 56483 4/50 current_auc = 0.7416666666666667
User 56483 AUC after training: 0.7416666666666667
User 56483 does not improve AUC. Reverting changes.
Training on augumented user 41312 5/50 current_auc = 0.7416666666666667
User 41312 AUC after training: 0.7416666666666667
User 41312 does not improve AUC. Reverting changes.
Training on augumented user 68217 6/50 current_auc = 0.7416666666666667
User 68217 AUC after training: 0.745
User 68217 improves AUC. Keeping the model.
Training on augumented user 74578 7/50 current_auc = 0.745
User 74578 AUC after training: 0.745
User 74578 does not improve AUC. Reverting changes.
Training on augumented user 32480 8/50 current_auc = 0.745
User 32480 AUC after training: 0.74
User 32480 does not improve AUC. Reverting changes.
Training on augumented user 29070 9/50 current_auc = 0.745
User 29070 AUC after training: 0.7416666666666667
User 29070 does not improve AUC. Reverting changes.
Training on augumented user 107807 10/50 current_auc = 0.745
User 107807 AUC after training: 0.745
User 107807 does not improve AUC. Reverting changes.
Training on augumented user 75269 11/50 current_auc = 0.745
User 75269 AUC after training: 0.7416666666666667
User 75269 does not improve AUC. Reverting changes.
Training on augumented user 59364 12/50 current_auc = 0.745
User 59364 AUC after training: 0.745
User 59364 does not improve AUC. Reverting changes.
Training on augumented user 74692 13/50 current_auc = 0.745
User 74692 AUC after training: 0.7416666666666667
User 74692 does not improve AUC. Reverting changes.
Training on augumented user 95733 14/50 current_auc = 0.745
User 95733 AUC after training: 0.7433333333333334
User 95733 does not improve AUC. Reverting changes.
Training on augumented user 118614 15/50 current_auc = 0.745
User 118614 AUC after training: 0.7416666666666667
User 118614 does not improve AUC. Reverting changes.
Training on augumented user 6264 16/50 current_auc = 0.745
User 6264 AUC after training: 0.7416666666666667
User 6264 does not improve AUC. Reverting changes.
Training on augumented user 86892 17/50 current_auc = 0.745
User 86892 AUC after training: 0.745
User 86892 does not improve AUC. Reverting changes.
Training on augumented user 121761 18/50 current_auc = 0.745
User 121761 AUC after training: 0.74
User 121761 does not improve AUC. Reverting changes.
Training on augumented user 108792 19/50 current_auc = 0.745
User 108792 AUC after training: 0.7416666666666667
User 108792 does not improve AUC. Reverting changes.
Training on augumented user 86173 20/50 current_auc = 0.745
User 86173 AUC after training: 0.7383333333333333
User 86173 does not improve AUC. Reverting changes.
Training on augumented user 37131 21/50 current_auc = 0.745
User 37131 AUC after training: 0.745
User 37131 does not improve AUC. Reverting changes.
Training on augumented user 135242 22/50 current_auc = 0.745
User 135242 AUC after training: 0.7416666666666667
User 135242 does not improve AUC. Reverting changes.
Training on augumented user 47110 23/50 current_auc = 0.745
User 47110 AUC after training: 0.745
User 47110 does not improve AUC. Reverting changes.
Training on augumented user 96023 24/50 current_auc = 0.745
User 96023 AUC after training: 0.7416666666666667
User 96023 does not improve AUC. Reverting changes.
Training on augumented user 26007 25/50 current_auc = 0.745
User 26007 AUC after training: 0.7416666666666667
User 26007 does not improve AUC. Reverting changes.
Training on augumented user 6660 26/50 current_auc = 0.745
User 6660 AUC after training: 0.745
User 6660 does not improve AUC. Reverting changes.
Training on augumented user 134373 27/50 current_auc = 0.745
User 134373 AUC after training: 0.745
User 134373 does not improve AUC. Reverting changes.
Training on augumented user 100910 28/50 current_auc = 0.745
User 100910 AUC after training: 0.7416666666666667
User 100910 does not improve AUC. Reverting changes.
Training on augumented user 43269 29/50 current_auc = 0.745
User 43269 AUC after training: 0.7433333333333333
User 43269 does not improve AUC. Reverting changes.
Training on augumented user 4648 30/50 current_auc = 0.745
User 4648 AUC after training: 0.745
User 4648 does not improve AUC. Reverting changes.
Training on augumented user 93534 31/50 current_auc = 0.745
User 93534 AUC after training: 0.7416666666666667
User 93534 does not improve AUC. Reverting changes.
Training on augumented user 83660 32/50 current_auc = 0.745
User 83660 AUC after training: 0.7416666666666667
User 83660 does not improve AUC. Reverting changes.
Training on augumented user 95207 33/50 current_auc = 0.745
User 95207 AUC after training: 0.7416666666666667
User 95207 does not improve AUC. Reverting changes.
Training on augumented user 17173 34/50 current_auc = 0.745
User 17173 AUC after training: 0.745
User 17173 does not improve AUC. Reverting changes.
Training on augumented user 68132 35/50 current_auc = 0.745
User 68132 AUC after training: 0.7433333333333333
User 68132 does not improve AUC. Reverting changes.
Training on augumented user 100133 36/50 current_auc = 0.745
User 100133 AUC after training: 0.745
User 100133 does not improve AUC. Reverting changes.
Training on augumented user 55367 37/50 current_auc = 0.745
User 55367 AUC after training: 0.7416666666666667
User 55367 does not improve AUC. Reverting changes.
Training on augumented user 93061 38/50 current_auc = 0.745
User 93061 AUC after training: 0.7433333333333334
User 93061 does not improve AUC. Reverting changes.
Training on augumented user 91872 39/50 current_auc = 0.745
User 91872 AUC after training: 0.745
User 91872 does not improve AUC. Reverting changes.
Training on augumented user 22897 40/50 current_auc = 0.745
User 22897 AUC after training: 0.745
User 22897 does not improve AUC. Reverting changes.
Training on augumented user 133164 41/50 current_auc = 0.745
User 133164 AUC after training: 0.7416666666666667
User 133164 does not improve AUC. Reverting changes.
Training on augumented user 125370 42/50 current_auc = 0.745
User 125370 AUC after training: 0.7416666666666667
User 125370 does not improve AUC. Reverting changes.
Training on augumented user 41537 43/50 current_auc = 0.745
User 41537 AUC after training: 0.745
User 41537 does not improve AUC. Reverting changes.
Training on augumented user 12409 44/50 current_auc = 0.745
User 12409 AUC after training: 0.7466666666666667
User 12409 improves AUC. Keeping the model.
Training on augumented user 22895 45/50 current_auc = 0.7466666666666667
User 22895 AUC after training: 0.7466666666666667
User 22895 does not improve AUC. Reverting changes.
Training on augumented user 20870 46/50 current_auc = 0.7466666666666667
User 20870 AUC after training: 0.7433333333333334
User 20870 does not improve AUC. Reverting changes.
Training on augumented user 111752 47/50 current_auc = 0.7466666666666667
User 111752 AUC after training: 0.7466666666666667
User 111752 does not improve AUC. Reverting changes.
Training on augumented user 42432 48/50 current_auc = 0.7466666666666667
User 42432 AUC after training: 0.7433333333333334
User 42432 does not improve AUC. Reverting changes.
Training on augumented user 79722 49/50 current_auc = 0.7466666666666667
User 79722 AUC after training: 0.7466666666666667
User 79722 does not improve AUC. Reverting changes.
[2024-12-02 18:15:25.213900] start test user 84390 70/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:15:25.635660] start test user 84390 70/568 recall augumented users by random, augumented_users = [28832, 60901, 7751, 28510, 125561, 51295, 3137, 36979, 17007, 43038, 42142, 1773, 87423, 12008, 136485, 6020, 30181, 5332, 83063, 20067, 118787, 121316, 90731, 60639, 86564, 131130, 84630, 115091, 74033, 129000, 114653, 42883, 98540, 30114, 118082, 85209, 72556, 3895, 550, 92505, 93398, 39066, 130787, 43012, 57906, 68640, 133436, 108151, 122761, 47813]
[2024-12-02 18:15:25.652028] user = 84390 Cloud 70/568
[2024-12-02 18:15:25.669133] user = 84390 Local 70/568
[2024-12-02 18:15:25.883894] user = 84390 Local+ 70/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:15:28.390768] user = 84390 MPDA- 70/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7642857142857142
Training on augumented user 28832 0/50 current_auc = 0.7642857142857142
User 28832 AUC after training: 0.7648809523809523
User 28832 improves AUC. Keeping the model.
Training on augumented user 60901 1/50 current_auc = 0.7648809523809523
User 60901 AUC after training: 0.7642857142857142
User 60901 does not improve AUC. Reverting changes.
Training on augumented user 7751 2/50 current_auc = 0.7648809523809523
User 7751 AUC after training: 0.7642857142857142
User 7751 does not improve AUC. Reverting changes.
Training on augumented user 28510 3/50 current_auc = 0.7648809523809523
User 28510 AUC after training: 0.7648809523809523
User 28510 does not improve AUC. Reverting changes.
Training on augumented user 125561 4/50 current_auc = 0.7648809523809523
User 125561 AUC after training: 0.7654761904761905
User 125561 improves AUC. Keeping the model.
Training on augumented user 51295 5/50 current_auc = 0.7654761904761905
User 51295 AUC after training: 0.7642857142857142
User 51295 does not improve AUC. Reverting changes.
Training on augumented user 3137 6/50 current_auc = 0.7654761904761905
User 3137 AUC after training: 0.7654761904761905
User 3137 does not improve AUC. Reverting changes.
Training on augumented user 36979 7/50 current_auc = 0.7654761904761905
User 36979 AUC after training: 0.7648809523809523
User 36979 does not improve AUC. Reverting changes.
Training on augumented user 17007 8/50 current_auc = 0.7654761904761905
User 17007 AUC after training: 0.7654761904761904
User 17007 does not improve AUC. Reverting changes.
Training on augumented user 43038 9/50 current_auc = 0.7654761904761905
User 43038 AUC after training: 0.7654761904761905
User 43038 does not improve AUC. Reverting changes.
Training on augumented user 42142 10/50 current_auc = 0.7654761904761905
User 42142 AUC after training: 0.7654761904761904
User 42142 does not improve AUC. Reverting changes.
Training on augumented user 1773 11/50 current_auc = 0.7654761904761905
User 1773 AUC after training: 0.7660714285714286
User 1773 improves AUC. Keeping the model.
Training on augumented user 87423 12/50 current_auc = 0.7660714285714286
User 87423 AUC after training: 0.7660714285714286
User 87423 does not improve AUC. Reverting changes.
Training on augumented user 12008 13/50 current_auc = 0.7660714285714286
User 12008 AUC after training: 0.7633928571428571
User 12008 does not improve AUC. Reverting changes.
Training on augumented user 136485 14/50 current_auc = 0.7660714285714286
User 136485 AUC after training: 0.7651785714285715
User 136485 does not improve AUC. Reverting changes.
Training on augumented user 6020 15/50 current_auc = 0.7660714285714286
User 6020 AUC after training: 0.7639880952380952
User 6020 does not improve AUC. Reverting changes.
Training on augumented user 30181 16/50 current_auc = 0.7660714285714286
User 30181 AUC after training: 0.7642857142857142
User 30181 does not improve AUC. Reverting changes.
Training on augumented user 5332 17/50 current_auc = 0.7660714285714286
User 5332 AUC after training: 0.7657738095238096
User 5332 does not improve AUC. Reverting changes.
Training on augumented user 83063 18/50 current_auc = 0.7660714285714286
User 83063 AUC after training: 0.7651785714285714
User 83063 does not improve AUC. Reverting changes.
Training on augumented user 20067 19/50 current_auc = 0.7660714285714286
User 20067 AUC after training: 0.7645833333333334
User 20067 does not improve AUC. Reverting changes.
Training on augumented user 118787 20/50 current_auc = 0.7660714285714286
User 118787 AUC after training: 0.7660714285714286
User 118787 does not improve AUC. Reverting changes.
Training on augumented user 121316 21/50 current_auc = 0.7660714285714286
User 121316 AUC after training: 0.7660714285714286
User 121316 does not improve AUC. Reverting changes.
Training on augumented user 90731 22/50 current_auc = 0.7660714285714286
User 90731 AUC after training: 0.7654761904761905
User 90731 does not improve AUC. Reverting changes.
Training on augumented user 60639 23/50 current_auc = 0.7660714285714286
User 60639 AUC after training: 0.7633928571428572
User 60639 does not improve AUC. Reverting changes.
Training on augumented user 86564 24/50 current_auc = 0.7660714285714286
User 86564 AUC after training: 0.7642857142857142
User 86564 does not improve AUC. Reverting changes.
Training on augumented user 131130 25/50 current_auc = 0.7660714285714286
User 131130 AUC after training: 0.7657738095238096
User 131130 does not improve AUC. Reverting changes.
Training on augumented user 84630 26/50 current_auc = 0.7660714285714286
User 84630 AUC after training: 0.7645833333333334
User 84630 does not improve AUC. Reverting changes.
Training on augumented user 115091 27/50 current_auc = 0.7660714285714286
User 115091 AUC after training: 0.7642857142857143
User 115091 does not improve AUC. Reverting changes.
Training on augumented user 74033 28/50 current_auc = 0.7660714285714286
User 74033 AUC after training: 0.7648809523809523
User 74033 does not improve AUC. Reverting changes.
Training on augumented user 129000 29/50 current_auc = 0.7660714285714286
User 129000 AUC after training: 0.7660714285714286
User 129000 does not improve AUC. Reverting changes.
Training on augumented user 114653 30/50 current_auc = 0.7660714285714286
User 114653 AUC after training: 0.7657738095238096
User 114653 does not improve AUC. Reverting changes.
Training on augumented user 42883 31/50 current_auc = 0.7660714285714286
User 42883 AUC after training: 0.7654761904761905
User 42883 does not improve AUC. Reverting changes.
Training on augumented user 98540 32/50 current_auc = 0.7660714285714286
User 98540 AUC after training: 0.7651785714285715
User 98540 does not improve AUC. Reverting changes.
Training on augumented user 30114 33/50 current_auc = 0.7660714285714286
User 30114 AUC after training: 0.7648809523809523
User 30114 does not improve AUC. Reverting changes.
Training on augumented user 118082 34/50 current_auc = 0.7660714285714286
User 118082 AUC after training: 0.7639880952380953
User 118082 does not improve AUC. Reverting changes.
Training on augumented user 85209 35/50 current_auc = 0.7660714285714286
User 85209 AUC after training: 0.7654761904761904
User 85209 does not improve AUC. Reverting changes.
Training on augumented user 72556 36/50 current_auc = 0.7660714285714286
User 72556 AUC after training: 0.7654761904761904
User 72556 does not improve AUC. Reverting changes.
Training on augumented user 3895 37/50 current_auc = 0.7660714285714286
User 3895 AUC after training: 0.7660714285714286
User 3895 does not improve AUC. Reverting changes.
Training on augumented user 550 38/50 current_auc = 0.7660714285714286
User 550 AUC after training: 0.7648809523809523
User 550 does not improve AUC. Reverting changes.
Training on augumented user 92505 39/50 current_auc = 0.7660714285714286
User 92505 AUC after training: 0.7654761904761904
User 92505 does not improve AUC. Reverting changes.
Training on augumented user 93398 40/50 current_auc = 0.7660714285714286
User 93398 AUC after training: 0.7648809523809523
User 93398 does not improve AUC. Reverting changes.
Training on augumented user 39066 41/50 current_auc = 0.7660714285714286
User 39066 AUC after training: 0.7654761904761905
User 39066 does not improve AUC. Reverting changes.
Training on augumented user 130787 42/50 current_auc = 0.7660714285714286
User 130787 AUC after training: 0.7651785714285715
User 130787 does not improve AUC. Reverting changes.
Training on augumented user 43012 43/50 current_auc = 0.7660714285714286
User 43012 AUC after training: 0.7645833333333334
User 43012 does not improve AUC. Reverting changes.
Training on augumented user 57906 44/50 current_auc = 0.7660714285714286
User 57906 AUC after training: 0.7666666666666666
User 57906 improves AUC. Keeping the model.
Training on augumented user 68640 45/50 current_auc = 0.7666666666666666
User 68640 AUC after training: 0.7678571428571428
User 68640 improves AUC. Keeping the model.
Training on augumented user 133436 46/50 current_auc = 0.7678571428571428
User 133436 AUC after training: 0.7663690476190477
User 133436 does not improve AUC. Reverting changes.
Training on augumented user 108151 47/50 current_auc = 0.7678571428571428
User 108151 AUC after training: 0.7672619047619047
User 108151 does not improve AUC. Reverting changes.
Training on augumented user 122761 48/50 current_auc = 0.7678571428571428
User 122761 AUC after training: 0.7672619047619047
User 122761 does not improve AUC. Reverting changes.
Training on augumented user 47813 49/50 current_auc = 0.7678571428571428
User 47813 AUC after training: 0.7663690476190476
User 47813 does not improve AUC. Reverting changes.
[2024-12-02 18:15:57.519808] start test user 84392 71/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:15:58.001103] start test user 84392 71/568 recall augumented users by random, augumented_users = [133596, 18420, 41202, 117766, 25044, 48853, 129582, 115493, 24477, 112447, 21871, 45995, 54394, 46583, 67925, 73356, 99769, 6798, 120636, 69386, 50662, 61903, 71273, 32896, 14464, 120298, 27381, 96196, 100430, 121856, 112007, 47663, 38883, 42268, 98375, 37340, 24346, 30071, 9321, 98430, 128084, 115424, 115541, 92583, 21060, 121215, 60290, 98137, 49879, 57924]
[2024-12-02 18:15:58.042581] user = 84392 Cloud 71/568
[2024-12-02 18:15:58.052583] user = 84392 Local 71/568
[2024-12-02 18:15:58.241782] user = 84392 Local+ 71/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:16:00.605435] user = 84392 MPDA- 71/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7638888888888888
Training on augumented user 133596 0/50 current_auc = 0.7638888888888888
User 133596 AUC after training: 0.7638888888888888
User 133596 does not improve AUC. Reverting changes.
Training on augumented user 18420 1/50 current_auc = 0.7638888888888888
User 18420 AUC after training: 0.7638888888888888
User 18420 does not improve AUC. Reverting changes.
Training on augumented user 41202 2/50 current_auc = 0.7638888888888888
User 41202 AUC after training: 0.7638888888888888
User 41202 does not improve AUC. Reverting changes.
Training on augumented user 117766 3/50 current_auc = 0.7638888888888888
User 117766 AUC after training: 0.7638888888888888
User 117766 does not improve AUC. Reverting changes.
Training on augumented user 25044 4/50 current_auc = 0.7638888888888888
User 25044 AUC after training: 0.7638888888888888
User 25044 does not improve AUC. Reverting changes.
Training on augumented user 48853 5/50 current_auc = 0.7638888888888888
User 48853 AUC after training: 0.7638888888888888
User 48853 does not improve AUC. Reverting changes.
Training on augumented user 129582 6/50 current_auc = 0.7638888888888888
User 129582 AUC after training: 0.7638888888888888
User 129582 does not improve AUC. Reverting changes.
Training on augumented user 115493 7/50 current_auc = 0.7638888888888888
User 115493 AUC after training: 0.7638888888888888
User 115493 does not improve AUC. Reverting changes.
Training on augumented user 24477 8/50 current_auc = 0.7638888888888888
User 24477 AUC after training: 0.7638888888888888
User 24477 does not improve AUC. Reverting changes.
Training on augumented user 112447 9/50 current_auc = 0.7638888888888888
User 112447 AUC after training: 0.7638888888888888
User 112447 does not improve AUC. Reverting changes.
Training on augumented user 21871 10/50 current_auc = 0.7638888888888888
User 21871 AUC after training: 0.7638888888888888
User 21871 does not improve AUC. Reverting changes.
Training on augumented user 45995 11/50 current_auc = 0.7638888888888888
User 45995 AUC after training: 0.7638888888888888
User 45995 does not improve AUC. Reverting changes.
Training on augumented user 54394 12/50 current_auc = 0.7638888888888888
User 54394 AUC after training: 0.7638888888888888
User 54394 does not improve AUC. Reverting changes.
Training on augumented user 46583 13/50 current_auc = 0.7638888888888888
User 46583 AUC after training: 0.7638888888888888
User 46583 does not improve AUC. Reverting changes.
Training on augumented user 67925 14/50 current_auc = 0.7638888888888888
User 67925 AUC after training: 0.7638888888888888
User 67925 does not improve AUC. Reverting changes.
Training on augumented user 73356 15/50 current_auc = 0.7638888888888888
User 73356 AUC after training: 0.7638888888888888
User 73356 does not improve AUC. Reverting changes.
Training on augumented user 99769 16/50 current_auc = 0.7638888888888888
User 99769 AUC after training: 0.7638888888888888
User 99769 does not improve AUC. Reverting changes.
Training on augumented user 6798 17/50 current_auc = 0.7638888888888888
User 6798 AUC after training: 0.7638888888888888
User 6798 does not improve AUC. Reverting changes.
Training on augumented user 120636 18/50 current_auc = 0.7638888888888888
User 120636 AUC after training: 0.7638888888888888
User 120636 does not improve AUC. Reverting changes.
Training on augumented user 69386 19/50 current_auc = 0.7638888888888888
User 69386 AUC after training: 0.7638888888888888
User 69386 does not improve AUC. Reverting changes.
Training on augumented user 50662 20/50 current_auc = 0.7638888888888888
User 50662 AUC after training: 0.7569444444444444
User 50662 does not improve AUC. Reverting changes.
Training on augumented user 61903 21/50 current_auc = 0.7638888888888888
User 61903 AUC after training: 0.7638888888888888
User 61903 does not improve AUC. Reverting changes.
Training on augumented user 71273 22/50 current_auc = 0.7638888888888888
User 71273 AUC after training: 0.7638888888888888
User 71273 does not improve AUC. Reverting changes.
Training on augumented user 32896 23/50 current_auc = 0.7638888888888888
User 32896 AUC after training: 0.7638888888888888
User 32896 does not improve AUC. Reverting changes.
Training on augumented user 14464 24/50 current_auc = 0.7638888888888888
User 14464 AUC after training: 0.7638888888888888
User 14464 does not improve AUC. Reverting changes.
Training on augumented user 120298 25/50 current_auc = 0.7638888888888888
User 120298 AUC after training: 0.7638888888888888
User 120298 does not improve AUC. Reverting changes.
Training on augumented user 27381 26/50 current_auc = 0.7638888888888888
User 27381 AUC after training: 0.7638888888888888
User 27381 does not improve AUC. Reverting changes.
Training on augumented user 96196 27/50 current_auc = 0.7638888888888888
User 96196 AUC after training: 0.7638888888888888
User 96196 does not improve AUC. Reverting changes.
Training on augumented user 100430 28/50 current_auc = 0.7638888888888888
User 100430 AUC after training: 0.7638888888888888
User 100430 does not improve AUC. Reverting changes.
Training on augumented user 121856 29/50 current_auc = 0.7638888888888888
User 121856 AUC after training: 0.7569444444444444
User 121856 does not improve AUC. Reverting changes.
Training on augumented user 112007 30/50 current_auc = 0.7638888888888888
User 112007 AUC after training: 0.7638888888888888
User 112007 does not improve AUC. Reverting changes.
Training on augumented user 47663 31/50 current_auc = 0.7638888888888888
User 47663 AUC after training: 0.7638888888888888
User 47663 does not improve AUC. Reverting changes.
Training on augumented user 38883 32/50 current_auc = 0.7638888888888888
User 38883 AUC after training: 0.7638888888888888
User 38883 does not improve AUC. Reverting changes.
Training on augumented user 42268 33/50 current_auc = 0.7638888888888888
User 42268 AUC after training: 0.7569444444444444
User 42268 does not improve AUC. Reverting changes.
Training on augumented user 98375 34/50 current_auc = 0.7638888888888888
User 98375 AUC after training: 0.7638888888888888
User 98375 does not improve AUC. Reverting changes.
Training on augumented user 37340 35/50 current_auc = 0.7638888888888888
User 37340 AUC after training: 0.7638888888888888
User 37340 does not improve AUC. Reverting changes.
Training on augumented user 24346 36/50 current_auc = 0.7638888888888888
User 24346 AUC after training: 0.7638888888888888
User 24346 does not improve AUC. Reverting changes.
Training on augumented user 30071 37/50 current_auc = 0.7638888888888888
User 30071 AUC after training: 0.7638888888888888
User 30071 does not improve AUC. Reverting changes.
Training on augumented user 9321 38/50 current_auc = 0.7638888888888888
User 9321 AUC after training: 0.7638888888888888
User 9321 does not improve AUC. Reverting changes.
Training on augumented user 98430 39/50 current_auc = 0.7638888888888888
User 98430 AUC after training: 0.7638888888888888
User 98430 does not improve AUC. Reverting changes.
Training on augumented user 128084 40/50 current_auc = 0.7638888888888888
User 128084 AUC after training: 0.7638888888888888
User 128084 does not improve AUC. Reverting changes.
Training on augumented user 115424 41/50 current_auc = 0.7638888888888888
User 115424 AUC after training: 0.7638888888888888
User 115424 does not improve AUC. Reverting changes.
Training on augumented user 115541 42/50 current_auc = 0.7638888888888888
User 115541 AUC after training: 0.7638888888888888
User 115541 does not improve AUC. Reverting changes.
Training on augumented user 92583 43/50 current_auc = 0.7638888888888888
User 92583 AUC after training: 0.7638888888888888
User 92583 does not improve AUC. Reverting changes.
Training on augumented user 21060 44/50 current_auc = 0.7638888888888888
User 21060 AUC after training: 0.7638888888888888
User 21060 does not improve AUC. Reverting changes.
Training on augumented user 121215 45/50 current_auc = 0.7638888888888888
User 121215 AUC after training: 0.7569444444444444
User 121215 does not improve AUC. Reverting changes.
Training on augumented user 60290 46/50 current_auc = 0.7638888888888888
User 60290 AUC after training: 0.7638888888888888
User 60290 does not improve AUC. Reverting changes.
Training on augumented user 98137 47/50 current_auc = 0.7638888888888888
User 98137 AUC after training: 0.7638888888888888
User 98137 does not improve AUC. Reverting changes.
Training on augumented user 49879 48/50 current_auc = 0.7638888888888888
User 49879 AUC after training: 0.7638888888888888
User 49879 does not improve AUC. Reverting changes.
Training on augumented user 57924 49/50 current_auc = 0.7638888888888888
User 57924 AUC after training: 0.7638888888888888
User 57924 does not improve AUC. Reverting changes.
[2024-12-02 18:16:25.402269] start test user 84404 72/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:16:25.937436] start test user 84404 72/568 recall augumented users by random, augumented_users = [36679, 83328, 11612, 79115, 121169, 32580, 98532, 71588, 55735, 24521, 56489, 131811, 50615, 121936, 53087, 129508, 86645, 14773, 31930, 6781, 31416, 50736, 103378, 39282, 78921, 50875, 15393, 125515, 3777, 62366, 25982, 128657, 55635, 129348, 18059, 68118, 81603, 27173, 26356, 51382, 90356, 56331, 125797, 106647, 61023, 104406, 1315, 126329, 133226, 64942]
[2024-12-02 18:16:25.953577] user = 84404 Cloud 72/568
[2024-12-02 18:16:25.989199] user = 84404 Local 72/568
[2024-12-02 18:16:26.091775] user = 84404 Local+ 72/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:16:27.925941] user = 84404 MPDA- 72/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7339129274692046
Training on augumented user 36679 0/50 current_auc = 0.7339129274692046
User 36679 AUC after training: 0.733423755947881
User 36679 does not improve AUC. Reverting changes.
Training on augumented user 83328 1/50 current_auc = 0.7339129274692046
User 83328 AUC after training: 0.7342242184373193
User 83328 improves AUC. Keeping the model.
Training on augumented user 11612 2/50 current_auc = 0.7342242184373193
User 11612 AUC after training: 0.734090808022413
User 11612 does not improve AUC. Reverting changes.
Training on augumented user 79115 3/50 current_auc = 0.7342242184373193
User 79115 AUC after training: 0.7339351625383556
User 79115 does not improve AUC. Reverting changes.
Training on augumented user 121169 4/50 current_auc = 0.7342242184373193
User 121169 AUC after training: 0.7340685729532619
User 121169 does not improve AUC. Reverting changes.
Training on augumented user 32580 5/50 current_auc = 0.7342242184373193
User 32580 AUC after training: 0.7340018677458087
User 32580 does not improve AUC. Reverting changes.
Training on augumented user 98532 6/50 current_auc = 0.7342242184373193
User 98532 AUC after training: 0.7339129274692044
User 98532 does not improve AUC. Reverting changes.
Training on augumented user 71588 7/50 current_auc = 0.7342242184373193
User 71588 AUC after training: 0.7335571663627874
User 71588 does not improve AUC. Reverting changes.
Training on augumented user 55735 8/50 current_auc = 0.7342242184373193
User 55735 AUC after training: 0.7337795170542981
User 55735 does not improve AUC. Reverting changes.
Training on augumented user 24521 9/50 current_auc = 0.7342242184373193
User 24521 AUC after training: 0.7338906924000533
User 24521 does not improve AUC. Reverting changes.
Training on augumented user 56489 10/50 current_auc = 0.7342242184373193
User 56489 AUC after training: 0.7341797482990171
User 56489 does not improve AUC. Reverting changes.
Training on augumented user 131811 11/50 current_auc = 0.7342242184373193
User 131811 AUC after training: 0.7338239871926002
User 131811 does not improve AUC. Reverting changes.
Training on augumented user 50615 12/50 current_auc = 0.7342242184373193
User 50615 AUC after training: 0.7331569351180682
User 50615 does not improve AUC. Reverting changes.
Training on augumented user 121936 13/50 current_auc = 0.7342242184373193
User 121936 AUC after training: 0.7339129274692044
User 121936 does not improve AUC. Reverting changes.
Training on augumented user 53087 14/50 current_auc = 0.7342242184373193
User 53087 AUC after training: 0.7340018677458087
User 53087 does not improve AUC. Reverting changes.
Training on augumented user 129508 15/50 current_auc = 0.7342242184373193
User 129508 AUC after training: 0.7329790545648597
User 129508 does not improve AUC. Reverting changes.
Training on augumented user 86645 16/50 current_auc = 0.7342242184373193
User 86645 AUC after training: 0.7343131587139237
User 86645 improves AUC. Keeping the model.
Training on augumented user 14773 17/50 current_auc = 0.7343131587139237
User 14773 AUC after training: 0.7342242184373193
User 14773 does not improve AUC. Reverting changes.
Training on augumented user 31930 18/50 current_auc = 0.7343131587139237
User 31930 AUC after training: 0.7346689198203407
User 31930 improves AUC. Keeping the model.
Training on augumented user 6781 19/50 current_auc = 0.7346689198203407
User 6781 AUC after training: 0.7346244496820387
User 6781 does not improve AUC. Reverting changes.
Training on augumented user 31416 20/50 current_auc = 0.7346689198203407
User 31416 AUC after training: 0.7348468003735491
User 31416 improves AUC. Keeping the model.
Training on augumented user 50736 21/50 current_auc = 0.7348468003735491
User 50736 AUC after training: 0.734757860096945
User 50736 does not improve AUC. Reverting changes.
Training on augumented user 103378 22/50 current_auc = 0.7348468003735491
User 103378 AUC after training: 0.7347578600969449
User 103378 does not improve AUC. Reverting changes.
Training on augumented user 39282 23/50 current_auc = 0.7348468003735491
User 39282 AUC after training: 0.7347133899586428
User 39282 does not improve AUC. Reverting changes.
Training on augumented user 78921 24/50 current_auc = 0.7348468003735491
User 78921 AUC after training: 0.7346689198203407
User 78921 does not improve AUC. Reverting changes.
Training on augumented user 50875 25/50 current_auc = 0.7348468003735491
User 50875 AUC after training: 0.734468804197981
User 50875 does not improve AUC. Reverting changes.
Training on augumented user 15393 26/50 current_auc = 0.7348468003735491
User 15393 AUC after training: 0.7342242184373193
User 15393 does not improve AUC. Reverting changes.
Training on augumented user 125515 27/50 current_auc = 0.7348468003735491
User 125515 AUC after training: 0.7349802107884554
User 125515 improves AUC. Keeping the model.
Training on augumented user 3777 28/50 current_auc = 0.7349802107884554
User 3777 AUC after training: 0.7351136212033619
User 3777 improves AUC. Keeping the model.
Training on augumented user 62366 29/50 current_auc = 0.7351136212033619
User 62366 AUC after training: 0.7346244496820385
User 62366 does not improve AUC. Reverting changes.
Training on augumented user 25982 30/50 current_auc = 0.7351136212033619
User 25982 AUC after training: 0.7352915017565704
User 25982 improves AUC. Keeping the model.
Training on augumented user 128657 31/50 current_auc = 0.7352915017565704
User 128657 AUC after training: 0.7349357406501534
User 128657 does not improve AUC. Reverting changes.
Training on augumented user 55635 32/50 current_auc = 0.7352915017565704
User 55635 AUC after training: 0.7344910392671321
User 55635 does not improve AUC. Reverting changes.
Training on augumented user 129348 33/50 current_auc = 0.7352915017565704
User 129348 AUC after training: 0.7350691510650598
User 129348 does not improve AUC. Reverting changes.
Training on augumented user 18059 34/50 current_auc = 0.7352915017565704
User 18059 AUC after training: 0.7352915017565704
User 18059 does not improve AUC. Reverting changes.
Training on augumented user 68118 35/50 current_auc = 0.7352915017565704
User 68118 AUC after training: 0.7350691510650598
User 68118 does not improve AUC. Reverting changes.
Training on augumented user 81603 36/50 current_auc = 0.7352915017565704
User 81603 AUC after training: 0.7351136212033619
User 81603 does not improve AUC. Reverting changes.
Training on augumented user 27173 37/50 current_auc = 0.7352915017565704
User 27173 AUC after training: 0.7354249121714769
User 27173 improves AUC. Keeping the model.
Training on augumented user 26356 38/50 current_auc = 0.7354249121714769
User 26356 AUC after training: 0.7350024458576067
User 26356 does not improve AUC. Reverting changes.
Training on augumented user 51382 39/50 current_auc = 0.7354249121714769
User 51382 AUC after training: 0.7348912705118513
User 51382 does not improve AUC. Reverting changes.
Training on augumented user 90356 40/50 current_auc = 0.7354249121714769
User 90356 AUC after training: 0.735113621203362
User 90356 does not improve AUC. Reverting changes.
Training on augumented user 56331 41/50 current_auc = 0.7354249121714769
User 56331 AUC after training: 0.7353582069640237
User 56331 does not improve AUC. Reverting changes.
Training on augumented user 125797 42/50 current_auc = 0.7354249121714769
User 125797 AUC after training: 0.7354249121714769
User 125797 does not improve AUC. Reverting changes.
Training on augumented user 106647 43/50 current_auc = 0.7354249121714769
User 106647 AUC after training: 0.7318673011073065
User 106647 does not improve AUC. Reverting changes.
Training on augumented user 61023 44/50 current_auc = 0.7354249121714769
User 61023 AUC after training: 0.735113621203362
User 61023 does not improve AUC. Reverting changes.
Training on augumented user 104406 45/50 current_auc = 0.7354249121714769
User 104406 AUC after training: 0.7354249121714769
User 104406 does not improve AUC. Reverting changes.
Training on augumented user 1315 46/50 current_auc = 0.7354249121714769
User 1315 AUC after training: 0.7355583225863833
User 1315 improves AUC. Keeping the model.
Training on augumented user 126329 47/50 current_auc = 0.7355583225863833
User 126329 AUC after training: 0.735135856272513
User 126329 does not improve AUC. Reverting changes.
Training on augumented user 133226 48/50 current_auc = 0.7355583225863833
User 133226 AUC after training: 0.7354249121714768
User 133226 does not improve AUC. Reverting changes.
Training on augumented user 64942 49/50 current_auc = 0.7355583225863833
User 64942 AUC after training: 0.7348690354427002
User 64942 does not improve AUC. Reverting changes.
[2024-12-02 18:16:57.161202] start test user 84441 73/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:16:57.559782] start test user 84441 73/568 recall augumented users by random, augumented_users = [88834, 66132, 35474, 11944, 12313, 136837, 92009, 93119, 64713, 1439, 84206, 20721, 100521, 42995, 62119, 85478, 27309, 4475, 11134, 36717, 76020, 119767, 28114, 40188, 31674, 45650, 96744, 109536, 61210, 52835, 37618, 100570, 7756, 91187, 24477, 123397, 85909, 6195, 108878, 131304, 116272, 113383, 100484, 98511, 92378, 42176, 40638, 111084, 46629, 21958]
[2024-12-02 18:16:57.575225] user = 84441 Cloud 73/568
[2024-12-02 18:16:57.604233] user = 84441 Local 73/568
[2024-12-02 18:16:57.753197] user = 84441 Local+ 73/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:17:00.434934] user = 84441 MPDA- 73/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6845173041894352
Training on augumented user 88834 0/50 current_auc = 0.6845173041894352
User 88834 AUC after training: 0.6843351548269582
User 88834 does not improve AUC. Reverting changes.
Training on augumented user 66132 1/50 current_auc = 0.6845173041894352
User 66132 AUC after training: 0.6846994535519126
User 66132 improves AUC. Keeping the model.
Training on augumented user 35474 2/50 current_auc = 0.6846994535519126
User 35474 AUC after training: 0.6848208864602308
User 35474 improves AUC. Keeping the model.
Training on augumented user 11944 3/50 current_auc = 0.6848208864602308
User 11944 AUC after training: 0.6846994535519126
User 11944 does not improve AUC. Reverting changes.
Training on augumented user 12313 4/50 current_auc = 0.6848208864602308
User 12313 AUC after training: 0.6848816029143898
User 12313 improves AUC. Keeping the model.
Training on augumented user 136837 5/50 current_auc = 0.6848816029143898
User 136837 AUC after training: 0.6851244687310261
User 136837 improves AUC. Keeping the model.
Training on augumented user 92009 6/50 current_auc = 0.6851244687310261
User 92009 AUC after training: 0.6853673345476624
User 92009 improves AUC. Keeping the model.
Training on augumented user 93119 7/50 current_auc = 0.6853673345476624
User 93119 AUC after training: 0.685063752276867
User 93119 does not improve AUC. Reverting changes.
Training on augumented user 64713 8/50 current_auc = 0.6853673345476624
User 64713 AUC after training: 0.6852459016393443
User 64713 does not improve AUC. Reverting changes.
Training on augumented user 1439 9/50 current_auc = 0.6853673345476624
User 1439 AUC after training: 0.6851244687310261
User 1439 does not improve AUC. Reverting changes.
Training on augumented user 84206 10/50 current_auc = 0.6853673345476624
User 84206 AUC after training: 0.6854280510018215
User 84206 improves AUC. Keeping the model.
Training on augumented user 20721 11/50 current_auc = 0.6854280510018215
User 20721 AUC after training: 0.6853066180935032
User 20721 does not improve AUC. Reverting changes.
Training on augumented user 100521 12/50 current_auc = 0.6854280510018215
User 100521 AUC after training: 0.6853673345476625
User 100521 does not improve AUC. Reverting changes.
Training on augumented user 42995 13/50 current_auc = 0.6854280510018215
User 42995 AUC after training: 0.6852459016393442
User 42995 does not improve AUC. Reverting changes.
Training on augumented user 62119 14/50 current_auc = 0.6854280510018215
User 62119 AUC after training: 0.6853673345476623
User 62119 does not improve AUC. Reverting changes.
Training on augumented user 85478 15/50 current_auc = 0.6854280510018215
User 85478 AUC after training: 0.6853673345476624
User 85478 does not improve AUC. Reverting changes.
Training on augumented user 27309 16/50 current_auc = 0.6854280510018215
User 27309 AUC after training: 0.6852459016393442
User 27309 does not improve AUC. Reverting changes.
Training on augumented user 4475 17/50 current_auc = 0.6854280510018215
User 4475 AUC after training: 0.6848208864602308
User 4475 does not improve AUC. Reverting changes.
Training on augumented user 11134 18/50 current_auc = 0.6854280510018215
User 11134 AUC after training: 0.6850030358227079
User 11134 does not improve AUC. Reverting changes.
Training on augumented user 36717 19/50 current_auc = 0.6854280510018215
User 36717 AUC after training: 0.6856102003642988
User 36717 improves AUC. Keeping the model.
Training on augumented user 76020 20/50 current_auc = 0.6856102003642988
User 76020 AUC after training: 0.6853673345476624
User 76020 does not improve AUC. Reverting changes.
Training on augumented user 119767 21/50 current_auc = 0.6856102003642988
User 119767 AUC after training: 0.6853673345476624
User 119767 does not improve AUC. Reverting changes.
Training on augumented user 28114 22/50 current_auc = 0.6856102003642988
User 28114 AUC after training: 0.6853066180935032
User 28114 does not improve AUC. Reverting changes.
Training on augumented user 40188 23/50 current_auc = 0.6856102003642988
User 40188 AUC after training: 0.685853066180935
User 40188 improves AUC. Keeping the model.
Training on augumented user 31674 24/50 current_auc = 0.685853066180935
User 31674 AUC after training: 0.6855494839101396
User 31674 does not improve AUC. Reverting changes.
Training on augumented user 45650 25/50 current_auc = 0.685853066180935
User 45650 AUC after training: 0.6851851851851851
User 45650 does not improve AUC. Reverting changes.
Training on augumented user 96744 26/50 current_auc = 0.685853066180935
User 96744 AUC after training: 0.6856709168184578
User 96744 does not improve AUC. Reverting changes.
Training on augumented user 109536 27/50 current_auc = 0.685853066180935
User 109536 AUC after training: 0.6856102003642988
User 109536 does not improve AUC. Reverting changes.
Training on augumented user 61210 28/50 current_auc = 0.685853066180935
User 61210 AUC after training: 0.6857923497267759
User 61210 does not improve AUC. Reverting changes.
Training on augumented user 52835 29/50 current_auc = 0.685853066180935
User 52835 AUC after training: 0.6859744990892531
User 52835 improves AUC. Keeping the model.
Training on augumented user 37618 30/50 current_auc = 0.6859744990892531
User 37618 AUC after training: 0.685063752276867
User 37618 does not improve AUC. Reverting changes.
Training on augumented user 100570 31/50 current_auc = 0.6859744990892531
User 100570 AUC after training: 0.6856102003642988
User 100570 does not improve AUC. Reverting changes.
Training on augumented user 7756 32/50 current_auc = 0.6859744990892531
User 7756 AUC after training: 0.6857316332726169
User 7756 does not improve AUC. Reverting changes.
Training on augumented user 91187 33/50 current_auc = 0.6859744990892531
User 91187 AUC after training: 0.6857316332726169
User 91187 does not improve AUC. Reverting changes.
Training on augumented user 24477 34/50 current_auc = 0.6859744990892531
User 24477 AUC after training: 0.685853066180935
User 24477 does not improve AUC. Reverting changes.
Training on augumented user 123397 35/50 current_auc = 0.6859744990892531
User 123397 AUC after training: 0.6860352155434122
User 123397 improves AUC. Keeping the model.
Training on augumented user 85909 36/50 current_auc = 0.6860352155434122
User 85909 AUC after training: 0.6860959319975714
User 85909 improves AUC. Keeping the model.
Training on augumented user 6195 37/50 current_auc = 0.6860959319975714
User 6195 AUC after training: 0.6865816636308439
User 6195 improves AUC. Keeping the model.
Training on augumented user 108878 38/50 current_auc = 0.6865816636308439
User 108878 AUC after training: 0.6864602307225258
User 108878 does not improve AUC. Reverting changes.
Training on augumented user 131304 39/50 current_auc = 0.6865816636308439
User 131304 AUC after training: 0.6863995142683668
User 131304 does not improve AUC. Reverting changes.
Training on augumented user 116272 40/50 current_auc = 0.6865816636308439
User 116272 AUC after training: 0.6860959319975714
User 116272 does not improve AUC. Reverting changes.
Training on augumented user 113383 41/50 current_auc = 0.6865816636308439
User 113383 AUC after training: 0.6867638129933212
User 113383 improves AUC. Keeping the model.
Training on augumented user 100484 42/50 current_auc = 0.6867638129933212
User 100484 AUC after training: 0.6864602307225258
User 100484 does not improve AUC. Reverting changes.
Training on augumented user 98511 43/50 current_auc = 0.6867638129933212
User 98511 AUC after training: 0.6864602307225258
User 98511 does not improve AUC. Reverting changes.
Training on augumented user 92378 44/50 current_auc = 0.6867638129933212
User 92378 AUC after training: 0.6868852459016394
User 92378 improves AUC. Keeping the model.
Training on augumented user 42176 45/50 current_auc = 0.6868852459016394
User 42176 AUC after training: 0.6870066788099575
User 42176 improves AUC. Keeping the model.
Training on augumented user 40638 46/50 current_auc = 0.6870066788099575
User 40638 AUC after training: 0.6868852459016394
User 40638 does not improve AUC. Reverting changes.
Training on augumented user 111084 47/50 current_auc = 0.6870066788099575
User 111084 AUC after training: 0.6872495446265938
User 111084 improves AUC. Keeping the model.
Training on augumented user 46629 48/50 current_auc = 0.6872495446265938
User 46629 AUC after training: 0.6870066788099575
User 46629 does not improve AUC. Reverting changes.
Training on augumented user 21958 49/50 current_auc = 0.6872495446265938
User 21958 AUC after training: 0.6871888281724348
User 21958 does not improve AUC. Reverting changes.
[2024-12-02 18:17:33.660919] start test user 84465 74/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:17:34.183414] start test user 84465 74/568 recall augumented users by random, augumented_users = [99026, 4533, 20988, 66758, 23127, 49338, 40258, 28215, 27011, 56196, 60896, 85858, 103510, 112127, 63627, 47210, 42839, 81275, 51006, 114516, 79839, 104237, 109614, 97065, 3344, 88702, 55596, 113525, 128211, 19229, 128927, 41254, 42457, 86144, 42662, 81696, 106400, 113468, 131793, 132732, 136732, 90667, 87079, 61803, 34411, 71942, 29959, 22533, 2076, 110270]
[2024-12-02 18:17:34.199373] user = 84465 Cloud 74/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:17:34.228771] user = 84465 Local 74/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:17:34.309170] user = 84465 Local+ 74/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:17:36.106274] user = 84465 MPDA- 74/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 99026 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99026 AUC after training: 0.5
User 99026 does not improve AUC. Reverting changes.
Training on augumented user 4533 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4533 AUC after training: 0.5
User 4533 does not improve AUC. Reverting changes.
Training on augumented user 20988 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20988 AUC after training: 0.5
User 20988 does not improve AUC. Reverting changes.
Training on augumented user 66758 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66758 AUC after training: 0.5
User 66758 does not improve AUC. Reverting changes.
Training on augumented user 23127 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23127 AUC after training: 0.5
User 23127 does not improve AUC. Reverting changes.
Training on augumented user 49338 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49338 AUC after training: 0.5
User 49338 does not improve AUC. Reverting changes.
Training on augumented user 40258 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40258 AUC after training: 0.5
User 40258 does not improve AUC. Reverting changes.
Training on augumented user 28215 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28215 AUC after training: 0.5
User 28215 does not improve AUC. Reverting changes.
Training on augumented user 27011 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27011 AUC after training: 0.5
User 27011 does not improve AUC. Reverting changes.
Training on augumented user 56196 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56196 AUC after training: 0.5
User 56196 does not improve AUC. Reverting changes.
Training on augumented user 60896 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60896 AUC after training: 0.5
User 60896 does not improve AUC. Reverting changes.
Training on augumented user 85858 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85858 AUC after training: 0.5
User 85858 does not improve AUC. Reverting changes.
Training on augumented user 103510 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103510 AUC after training: 0.5
User 103510 does not improve AUC. Reverting changes.
Training on augumented user 112127 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112127 AUC after training: 0.5
User 112127 does not improve AUC. Reverting changes.
Training on augumented user 63627 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63627 AUC after training: 0.5
User 63627 does not improve AUC. Reverting changes.
Training on augumented user 47210 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47210 AUC after training: 0.5
User 47210 does not improve AUC. Reverting changes.
Training on augumented user 42839 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42839 AUC after training: 0.5
User 42839 does not improve AUC. Reverting changes.
Training on augumented user 81275 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81275 AUC after training: 0.5
User 81275 does not improve AUC. Reverting changes.
Training on augumented user 51006 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51006 AUC after training: 0.5
User 51006 does not improve AUC. Reverting changes.
Training on augumented user 114516 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114516 AUC after training: 0.5
User 114516 does not improve AUC. Reverting changes.
Training on augumented user 79839 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79839 AUC after training: 0.5
User 79839 does not improve AUC. Reverting changes.
Training on augumented user 104237 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104237 AUC after training: 0.5
User 104237 does not improve AUC. Reverting changes.
Training on augumented user 109614 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109614 AUC after training: 0.5
User 109614 does not improve AUC. Reverting changes.
Training on augumented user 97065 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97065 AUC after training: 0.5
User 97065 does not improve AUC. Reverting changes.
Training on augumented user 3344 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3344 AUC after training: 0.5
User 3344 does not improve AUC. Reverting changes.
Training on augumented user 88702 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88702 AUC after training: 0.5
User 88702 does not improve AUC. Reverting changes.
Training on augumented user 55596 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55596 AUC after training: 0.5
User 55596 does not improve AUC. Reverting changes.
Training on augumented user 113525 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113525 AUC after training: 0.5
User 113525 does not improve AUC. Reverting changes.
Training on augumented user 128211 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128211 AUC after training: 0.5
User 128211 does not improve AUC. Reverting changes.
Training on augumented user 19229 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19229 AUC after training: 0.5
User 19229 does not improve AUC. Reverting changes.
Training on augumented user 128927 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128927 AUC after training: 0.5
User 128927 does not improve AUC. Reverting changes.
Training on augumented user 41254 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41254 AUC after training: 0.5
User 41254 does not improve AUC. Reverting changes.
Training on augumented user 42457 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42457 AUC after training: 0.5
User 42457 does not improve AUC. Reverting changes.
Training on augumented user 86144 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86144 AUC after training: 0.5
User 86144 does not improve AUC. Reverting changes.
Training on augumented user 42662 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42662 AUC after training: 0.5
User 42662 does not improve AUC. Reverting changes.
Training on augumented user 81696 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81696 AUC after training: 0.5
User 81696 does not improve AUC. Reverting changes.
Training on augumented user 106400 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106400 AUC after training: 0.5
User 106400 does not improve AUC. Reverting changes.
Training on augumented user 113468 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113468 AUC after training: 0.5
User 113468 does not improve AUC. Reverting changes.
Training on augumented user 131793 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131793 AUC after training: 0.5
User 131793 does not improve AUC. Reverting changes.
Training on augumented user 132732 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132732 AUC after training: 0.5
User 132732 does not improve AUC. Reverting changes.
Training on augumented user 136732 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136732 AUC after training: 0.5
User 136732 does not improve AUC. Reverting changes.
Training on augumented user 90667 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90667 AUC after training: 0.5
User 90667 does not improve AUC. Reverting changes.
Training on augumented user 87079 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87079 AUC after training: 0.5
User 87079 does not improve AUC. Reverting changes.
Training on augumented user 61803 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61803 AUC after training: 0.5
User 61803 does not improve AUC. Reverting changes.
Training on augumented user 34411 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34411 AUC after training: 0.5
User 34411 does not improve AUC. Reverting changes.
Training on augumented user 71942 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71942 AUC after training: 0.5
User 71942 does not improve AUC. Reverting changes.
Training on augumented user 29959 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29959 AUC after training: 0.5
User 29959 does not improve AUC. Reverting changes.
Training on augumented user 22533 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22533 AUC after training: 0.5
User 22533 does not improve AUC. Reverting changes.
Training on augumented user 2076 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2076 AUC after training: 0.5
User 2076 does not improve AUC. Reverting changes.
Training on augumented user 110270 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110270 AUC after training: 0.5
User 110270 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:18:04.886675] start test user 84476 75/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:18:05.624959] start test user 84476 75/568 recall augumented users by random, augumented_users = [58746, 60530, 31624, 87571, 48614, 62129, 3238, 99995, 37515, 66032, 82870, 74122, 6818, 133715, 30415, 40058, 78420, 136464, 67468, 128268, 69857, 23077, 33088, 4098, 80213, 26151, 125379, 75690, 114497, 37107, 42955, 55787, 31006, 72099, 53096, 24274, 125630, 54523, 75956, 6540, 64295, 6182, 62687, 18353, 120254, 118820, 8783, 53046, 10964, 78463]
[2024-12-02 18:18:05.646890] user = 84476 Cloud 75/568
[2024-12-02 18:18:05.704835] user = 84476 Local 75/568
[2024-12-02 18:18:06.063670] user = 84476 Local+ 75/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:18:08.831443] user = 84476 MPDA- 75/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6319433759039853
Training on augumented user 58746 0/50 current_auc = 0.6319433759039853
User 58746 AUC after training: 0.6323665179258348
User 58746 improves AUC. Keeping the model.
Training on augumented user 60530 1/50 current_auc = 0.6323665179258348
User 60530 AUC after training: 0.6321357131866441
User 60530 does not improve AUC. Reverting changes.
Training on augumented user 31624 2/50 current_auc = 0.6323665179258348
User 31624 AUC after training: 0.632828127404216
User 31624 improves AUC. Keeping the model.
Training on augumented user 87571 3/50 current_auc = 0.632828127404216
User 87571 AUC after training: 0.6329050623172796
User 87571 improves AUC. Keeping the model.
Training on augumented user 48614 4/50 current_auc = 0.6329050623172796
User 48614 AUC after training: 0.6325203877519618
User 48614 does not improve AUC. Reverting changes.
Training on augumented user 62129 5/50 current_auc = 0.6329050623172796
User 62129 AUC after training: 0.6330204646868749
User 62129 improves AUC. Keeping the model.
Training on augumented user 3238 6/50 current_auc = 0.6330204646868749
User 3238 AUC after training: 0.63248192029543
User 3238 does not improve AUC. Reverting changes.
Training on augumented user 99995 7/50 current_auc = 0.6330204646868749
User 99995 AUC after training: 0.6325973226650253
User 99995 does not improve AUC. Reverting changes.
Training on augumented user 37515 8/50 current_auc = 0.6330204646868749
User 37515 AUC after training: 0.631981843360517
User 37515 does not improve AUC. Reverting changes.
Training on augumented user 66032 9/50 current_auc = 0.6330204646868749
User 66032 AUC after training: 0.6329050623172796
User 66032 does not improve AUC. Reverting changes.
Training on augumented user 82870 10/50 current_auc = 0.6330204646868749
User 82870 AUC after training: 0.6326357901215571
User 82870 does not improve AUC. Reverting changes.
Training on augumented user 74122 11/50 current_auc = 0.6330204646868749
User 74122 AUC after training: 0.6325203877519618
User 74122 does not improve AUC. Reverting changes.
Training on augumented user 6818 12/50 current_auc = 0.6330204646868749
User 6818 AUC after training: 0.6321741806431759
User 6818 does not improve AUC. Reverting changes.
Training on augumented user 133715 13/50 current_auc = 0.6330204646868749
User 133715 AUC after training: 0.632828127404216
User 133715 does not improve AUC. Reverting changes.
Training on augumented user 30415 14/50 current_auc = 0.6330204646868749
User 30415 AUC after training: 0.6325588552084936
User 30415 does not improve AUC. Reverting changes.
Training on augumented user 40058 15/50 current_auc = 0.6330204646868749
User 40058 AUC after training: 0.631635636251731
User 40058 does not improve AUC. Reverting changes.
Training on augumented user 78420 16/50 current_auc = 0.6330204646868749
User 78420 AUC after training: 0.6323665179258346
User 78420 does not improve AUC. Reverting changes.
Training on augumented user 136464 17/50 current_auc = 0.6330204646868749
User 136464 AUC after training: 0.6330204646868749
User 136464 does not improve AUC. Reverting changes.
Training on augumented user 67468 18/50 current_auc = 0.6330204646868749
User 67468 AUC after training: 0.6329435297738113
User 67468 does not improve AUC. Reverting changes.
Training on augumented user 128268 19/50 current_auc = 0.6330204646868749
User 128268 AUC after training: 0.6323665179258349
User 128268 does not improve AUC. Reverting changes.
Training on augumented user 69857 20/50 current_auc = 0.6330204646868749
User 69857 AUC after training: 0.6334436067087243
User 69857 improves AUC. Keeping the model.
Training on augumented user 23077 21/50 current_auc = 0.6334436067087243
User 23077 AUC after training: 0.6329819972303432
User 23077 does not improve AUC. Reverting changes.
Training on augumented user 33088 22/50 current_auc = 0.6334436067087243
User 33088 AUC after training: 0.6339052161871057
User 33088 improves AUC. Keeping the model.
Training on augumented user 4098 23/50 current_auc = 0.6339052161871057
User 4098 AUC after training: 0.6335974765348514
User 4098 does not improve AUC. Reverting changes.
Training on augumented user 80213 24/50 current_auc = 0.6339052161871057
User 80213 AUC after training: 0.6317125711647946
User 80213 does not improve AUC. Reverting changes.
Training on augumented user 26151 25/50 current_auc = 0.6339052161871057
User 26151 AUC after training: 0.6337128789044468
User 26151 does not improve AUC. Reverting changes.
Training on augumented user 125379 26/50 current_auc = 0.6339052161871057
User 125379 AUC after training: 0.6337513463609786
User 125379 does not improve AUC. Reverting changes.
Training on augumented user 75690 27/50 current_auc = 0.6339052161871057
User 75690 AUC after training: 0.6336359439913833
User 75690 does not improve AUC. Reverting changes.
Training on augumented user 114497 28/50 current_auc = 0.6339052161871057
User 114497 AUC after training: 0.6337513463609786
User 114497 does not improve AUC. Reverting changes.
Training on augumented user 37107 29/50 current_auc = 0.6339052161871057
User 37107 AUC after training: 0.6339052161871057
User 37107 does not improve AUC. Reverting changes.
Training on augumented user 42955 30/50 current_auc = 0.6339052161871057
User 42955 AUC after training: 0.6338282812740421
User 42955 does not improve AUC. Reverting changes.
Training on augumented user 55787 31/50 current_auc = 0.6339052161871057
User 55787 AUC after training: 0.6339436836436374
User 55787 improves AUC. Keeping the model.
Training on augumented user 31006 32/50 current_auc = 0.6339436836436374
User 31006 AUC after training: 0.6339821511001693
User 31006 improves AUC. Keeping the model.
Training on augumented user 72099 33/50 current_auc = 0.6339821511001693
User 72099 AUC after training: 0.6344437605785506
User 72099 improves AUC. Keeping the model.
Training on augumented user 53096 34/50 current_auc = 0.6344437605785506
User 53096 AUC after training: 0.6344822280350824
User 53096 improves AUC. Keeping the model.
Training on augumented user 24274 35/50 current_auc = 0.6344822280350824
User 24274 AUC after training: 0.6343283582089552
User 24274 does not improve AUC. Reverting changes.
Training on augumented user 125630 36/50 current_auc = 0.6344822280350824
User 125630 AUC after training: 0.6349053700569318
User 125630 improves AUC. Keeping the model.
Training on augumented user 54523 37/50 current_auc = 0.6349053700569318
User 54523 AUC after training: 0.6347899676873365
User 54523 does not improve AUC. Reverting changes.
Training on augumented user 75956 38/50 current_auc = 0.6349053700569318
User 75956 AUC after training: 0.6347130327742729
User 75956 does not improve AUC. Reverting changes.
Training on augumented user 6540 39/50 current_auc = 0.6349053700569318
User 6540 AUC after training: 0.6359439913832897
User 6540 improves AUC. Keeping the model.
Training on augumented user 64295 40/50 current_auc = 0.6359439913832897
User 64295 AUC after training: 0.6349053700569318
User 64295 does not improve AUC. Reverting changes.
Training on augumented user 6182 41/50 current_auc = 0.6359439913832897
User 6182 AUC after training: 0.6363671334051393
User 6182 improves AUC. Keeping the model.
Training on augumented user 62687 42/50 current_auc = 0.6363671334051393
User 62687 AUC after training: 0.6360209262963533
User 62687 does not improve AUC. Reverting changes.
Training on augumented user 18353 43/50 current_auc = 0.6363671334051393
User 18353 AUC after training: 0.6360209262963533
User 18353 does not improve AUC. Reverting changes.
Training on augumented user 120254 44/50 current_auc = 0.6363671334051393
User 120254 AUC after training: 0.6358285890136944
User 120254 does not improve AUC. Reverting changes.
Training on augumented user 118820 45/50 current_auc = 0.6363671334051393
User 118820 AUC after training: 0.6360209262963533
User 118820 does not improve AUC. Reverting changes.
Training on augumented user 8783 46/50 current_auc = 0.6363671334051393
User 8783 AUC after training: 0.6361747961224804
User 8783 does not improve AUC. Reverting changes.
Training on augumented user 53046 47/50 current_auc = 0.6363671334051393
User 53046 AUC after training: 0.636059393752885
User 53046 does not improve AUC. Reverting changes.
Training on augumented user 10964 48/50 current_auc = 0.6363671334051393
User 10964 AUC after training: 0.6355977842745038
User 10964 does not improve AUC. Reverting changes.
Training on augumented user 78463 49/50 current_auc = 0.6363671334051393
User 78463 AUC after training: 0.6366364056008618
User 78463 improves AUC. Keeping the model.
[2024-12-02 18:18:40.481871] start test user 84558 76/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:18:41.170229] start test user 84558 76/568 recall augumented users by random, augumented_users = [111715, 45047, 29371, 78395, 104655, 52915, 29105, 91094, 132440, 13404, 80886, 76249, 145, 66292, 81090, 103694, 7105, 31965, 88640, 84460, 123698, 45417, 133869, 41610, 48786, 82407, 1088, 35757, 133887, 93341, 119016, 107328, 76171, 90004, 58717, 118546, 68130, 82522, 57656, 3546, 51840, 129032, 84963, 66105, 6744, 72873, 84787, 90336, 100009, 42688]
[2024-12-02 18:18:41.198838] user = 84558 Cloud 76/568
[2024-12-02 18:18:41.225413] user = 84558 Local 76/568
[2024-12-02 18:18:41.386754] user = 84558 Local+ 76/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:18:43.374429] user = 84558 MPDA- 76/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6136629798308393
Training on augumented user 111715 0/50 current_auc = 0.6136629798308393
User 111715 AUC after training: 0.6119713728041639
User 111715 does not improve AUC. Reverting changes.
Training on augumented user 45047 1/50 current_auc = 0.6136629798308393
User 45047 AUC after training: 0.6122316200390371
User 45047 does not improve AUC. Reverting changes.
Training on augumented user 29371 2/50 current_auc = 0.6136629798308393
User 29371 AUC after training: 0.6136629798308393
User 29371 does not improve AUC. Reverting changes.
Training on augumented user 78395 3/50 current_auc = 0.6136629798308393
User 78395 AUC after training: 0.6124918672739101
User 78395 does not improve AUC. Reverting changes.
Training on augumented user 104655 4/50 current_auc = 0.6136629798308393
User 104655 AUC after training: 0.6136629798308393
User 104655 does not improve AUC. Reverting changes.
Training on augumented user 52915 5/50 current_auc = 0.6136629798308393
User 52915 AUC after training: 0.6135328562134028
User 52915 does not improve AUC. Reverting changes.
Training on augumented user 29105 6/50 current_auc = 0.6136629798308393
User 29105 AUC after training: 0.613142485361093
User 29105 does not improve AUC. Reverting changes.
Training on augumented user 91094 7/50 current_auc = 0.6136629798308393
User 91094 AUC after training: 0.6121014964216005
User 91094 does not improve AUC. Reverting changes.
Training on augumented user 132440 8/50 current_auc = 0.6136629798308393
User 132440 AUC after training: 0.6140533506831489
User 132440 improves AUC. Keeping the model.
Training on augumented user 13404 9/50 current_auc = 0.6140533506831489
User 13404 AUC after training: 0.6141834743005855
User 13404 improves AUC. Keeping the model.
Training on augumented user 80886 10/50 current_auc = 0.6141834743005855
User 80886 AUC after training: 0.6135328562134028
User 80886 does not improve AUC. Reverting changes.
Training on augumented user 76249 11/50 current_auc = 0.6141834743005855
User 76249 AUC after training: 0.613142485361093
User 76249 does not improve AUC. Reverting changes.
Training on augumented user 145 12/50 current_auc = 0.6141834743005855
User 145 AUC after training: 0.6137931034482758
User 145 does not improve AUC. Reverting changes.
Training on augumented user 66292 13/50 current_auc = 0.6141834743005855
User 66292 AUC after training: 0.6157449577098243
User 66292 improves AUC. Keeping the model.
Training on augumented user 81090 14/50 current_auc = 0.6157449577098243
User 81090 AUC after training: 0.6180871828236825
User 81090 improves AUC. Keeping the model.
Training on augumented user 103694 15/50 current_auc = 0.6180871828236825
User 103694 AUC after training: 0.6153545868575145
User 103694 does not improve AUC. Reverting changes.
Training on augumented user 7105 16/50 current_auc = 0.6180871828236825
User 7105 AUC after training: 0.6175666883539361
User 7105 does not improve AUC. Reverting changes.
Training on augumented user 31965 17/50 current_auc = 0.6180871828236825
User 31965 AUC after training: 0.6174365647364997
User 31965 does not improve AUC. Reverting changes.
Training on augumented user 88640 18/50 current_auc = 0.6180871828236825
User 88640 AUC after training: 0.6171763175016265
User 88640 does not improve AUC. Reverting changes.
Training on augumented user 84460 19/50 current_auc = 0.6180871828236825
User 84460 AUC after training: 0.6176968119713728
User 84460 does not improve AUC. Reverting changes.
Training on augumented user 123698 20/50 current_auc = 0.6180871828236825
User 123698 AUC after training: 0.6169160702667534
User 123698 does not improve AUC. Reverting changes.
Training on augumented user 45417 21/50 current_auc = 0.6180871828236825
User 45417 AUC after training: 0.6169160702667534
User 45417 does not improve AUC. Reverting changes.
Training on augumented user 133869 22/50 current_auc = 0.6180871828236825
User 133869 AUC after training: 0.6186076772934288
User 133869 improves AUC. Keeping the model.
Training on augumented user 41610 23/50 current_auc = 0.6186076772934288
User 41610 AUC after training: 0.6183474300585556
User 41610 does not improve AUC. Reverting changes.
Training on augumented user 48786 24/50 current_auc = 0.6186076772934288
User 48786 AUC after training: 0.6227716330513988
User 48786 improves AUC. Keeping the model.
Training on augumented user 82407 25/50 current_auc = 0.6227716330513988
User 82407 AUC after training: 0.6213402732595967
User 82407 does not improve AUC. Reverting changes.
Training on augumented user 1088 26/50 current_auc = 0.6227716330513988
User 1088 AUC after training: 0.6225113858165257
User 1088 does not improve AUC. Reverting changes.
Training on augumented user 35757 27/50 current_auc = 0.6227716330513988
User 35757 AUC after training: 0.6240728692257644
User 35757 improves AUC. Keeping the model.
Training on augumented user 133887 28/50 current_auc = 0.6240728692257644
User 133887 AUC after training: 0.6240728692257644
User 133887 does not improve AUC. Reverting changes.
Training on augumented user 93341 29/50 current_auc = 0.6240728692257644
User 93341 AUC after training: 0.6214703968770332
User 93341 does not improve AUC. Reverting changes.
Training on augumented user 119016 30/50 current_auc = 0.6240728692257644
User 119016 AUC after training: 0.6234222511385816
User 119016 does not improve AUC. Reverting changes.
Training on augumented user 107328 31/50 current_auc = 0.6240728692257644
User 107328 AUC after training: 0.6239427456083279
User 107328 does not improve AUC. Reverting changes.
Training on augumented user 76171 32/50 current_auc = 0.6240728692257644
User 76171 AUC after training: 0.6235523747560182
User 76171 does not improve AUC. Reverting changes.
Training on augumented user 90004 33/50 current_auc = 0.6240728692257644
User 90004 AUC after training: 0.6238126219908913
User 90004 does not improve AUC. Reverting changes.
Training on augumented user 58717 34/50 current_auc = 0.6240728692257644
User 58717 AUC after training: 0.6240728692257644
User 58717 does not improve AUC. Reverting changes.
Training on augumented user 118546 35/50 current_auc = 0.6240728692257644
User 118546 AUC after training: 0.6225113858165257
User 118546 does not improve AUC. Reverting changes.
Training on augumented user 68130 36/50 current_auc = 0.6240728692257644
User 68130 AUC after training: 0.6229017566688353
User 68130 does not improve AUC. Reverting changes.
Training on augumented user 82522 37/50 current_auc = 0.6240728692257644
User 82522 AUC after training: 0.6231620039037085
User 82522 does not improve AUC. Reverting changes.
Training on augumented user 57656 38/50 current_auc = 0.6240728692257644
User 57656 AUC after training: 0.618867924528302
User 57656 does not improve AUC. Reverting changes.
Training on augumented user 3546 39/50 current_auc = 0.6240728692257644
User 3546 AUC after training: 0.6236824983734548
User 3546 does not improve AUC. Reverting changes.
Training on augumented user 51840 40/50 current_auc = 0.6240728692257644
User 51840 AUC after training: 0.623942745608328
User 51840 does not improve AUC. Reverting changes.
Training on augumented user 129032 41/50 current_auc = 0.6240728692257644
User 129032 AUC after training: 0.6222511385816525
User 129032 does not improve AUC. Reverting changes.
Training on augumented user 84963 42/50 current_auc = 0.6240728692257644
User 84963 AUC after training: 0.6235523747560183
User 84963 does not improve AUC. Reverting changes.
Training on augumented user 66105 43/50 current_auc = 0.6240728692257644
User 66105 AUC after training: 0.623942745608328
User 66105 does not improve AUC. Reverting changes.
Training on augumented user 6744 44/50 current_auc = 0.6240728692257644
User 6744 AUC after training: 0.6189980481457384
User 6744 does not improve AUC. Reverting changes.
Training on augumented user 72873 45/50 current_auc = 0.6240728692257644
User 72873 AUC after training: 0.6222511385816525
User 72873 does not improve AUC. Reverting changes.
Training on augumented user 84787 46/50 current_auc = 0.6240728692257644
User 84787 AUC after training: 0.6243331164606376
User 84787 improves AUC. Keeping the model.
Training on augumented user 90336 47/50 current_auc = 0.6243331164606376
User 90336 AUC after training: 0.6249837345478204
User 90336 improves AUC. Keeping the model.
Training on augumented user 100009 48/50 current_auc = 0.6249837345478204
User 100009 AUC after training: 0.6277163305139883
User 100009 improves AUC. Keeping the model.
Training on augumented user 42688 49/50 current_auc = 0.6277163305139883
User 42688 AUC after training: 0.6206896551724137
User 42688 does not improve AUC. Reverting changes.
[2024-12-02 18:19:10.403457] start test user 84590 77/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:19:10.880548] start test user 84590 77/568 recall augumented users by random, augumented_users = [59873, 36429, 83553, 13706, 51273, 36693, 112831, 95465, 87068, 51297, 51776, 56056, 128682, 52230, 130337, 135610, 41902, 6409, 87235, 66562, 49070, 127569, 133346, 131559, 102694, 80480, 42809, 105710, 21949, 2956, 60376, 55559, 61192, 86672, 117144, 101840, 47570, 22593, 53700, 59262, 119627, 68672, 80165, 132588, 86426, 61545, 9070, 108101, 36083, 131722]
[2024-12-02 18:19:10.895497] user = 84590 Cloud 77/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:19:10.912532] user = 84590 Local 77/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:19:10.941198] user = 84590 Local+ 77/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:19:14.084907] user = 84590 MPDA- 77/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 59873 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59873 AUC after training: 0.5
User 59873 does not improve AUC. Reverting changes.
Training on augumented user 36429 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36429 AUC after training: 0.5
User 36429 does not improve AUC. Reverting changes.
Training on augumented user 83553 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83553 AUC after training: 0.5
User 83553 does not improve AUC. Reverting changes.
Training on augumented user 13706 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13706 AUC after training: 0.5
User 13706 does not improve AUC. Reverting changes.
Training on augumented user 51273 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51273 AUC after training: 0.5
User 51273 does not improve AUC. Reverting changes.
Training on augumented user 36693 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36693 AUC after training: 0.5
User 36693 does not improve AUC. Reverting changes.
Training on augumented user 112831 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112831 AUC after training: 0.5
User 112831 does not improve AUC. Reverting changes.
Training on augumented user 95465 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95465 AUC after training: 0.5
User 95465 does not improve AUC. Reverting changes.
Training on augumented user 87068 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87068 AUC after training: 0.5
User 87068 does not improve AUC. Reverting changes.
Training on augumented user 51297 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51297 AUC after training: 0.5
User 51297 does not improve AUC. Reverting changes.
Training on augumented user 51776 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51776 AUC after training: 0.5
User 51776 does not improve AUC. Reverting changes.
Training on augumented user 56056 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56056 AUC after training: 0.5
User 56056 does not improve AUC. Reverting changes.
Training on augumented user 128682 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128682 AUC after training: 0.5
User 128682 does not improve AUC. Reverting changes.
Training on augumented user 52230 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52230 AUC after training: 0.5
User 52230 does not improve AUC. Reverting changes.
Training on augumented user 130337 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130337 AUC after training: 0.5
User 130337 does not improve AUC. Reverting changes.
Training on augumented user 135610 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135610 AUC after training: 0.5
User 135610 does not improve AUC. Reverting changes.
Training on augumented user 41902 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41902 AUC after training: 0.5
User 41902 does not improve AUC. Reverting changes.
Training on augumented user 6409 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6409 AUC after training: 0.5
User 6409 does not improve AUC. Reverting changes.
Training on augumented user 87235 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87235 AUC after training: 0.5
User 87235 does not improve AUC. Reverting changes.
Training on augumented user 66562 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66562 AUC after training: 0.5
User 66562 does not improve AUC. Reverting changes.
Training on augumented user 49070 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49070 AUC after training: 0.5
User 49070 does not improve AUC. Reverting changes.
Training on augumented user 127569 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127569 AUC after training: 0.5
User 127569 does not improve AUC. Reverting changes.
Training on augumented user 133346 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133346 AUC after training: 0.5
User 133346 does not improve AUC. Reverting changes.
Training on augumented user 131559 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131559 AUC after training: 0.5
User 131559 does not improve AUC. Reverting changes.
Training on augumented user 102694 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102694 AUC after training: 0.5
User 102694 does not improve AUC. Reverting changes.
Training on augumented user 80480 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80480 AUC after training: 0.5
User 80480 does not improve AUC. Reverting changes.
Training on augumented user 42809 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42809 AUC after training: 0.5
User 42809 does not improve AUC. Reverting changes.
Training on augumented user 105710 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105710 AUC after training: 0.5
User 105710 does not improve AUC. Reverting changes.
Training on augumented user 21949 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21949 AUC after training: 0.5
User 21949 does not improve AUC. Reverting changes.
Training on augumented user 2956 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2956 AUC after training: 0.5
User 2956 does not improve AUC. Reverting changes.
Training on augumented user 60376 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60376 AUC after training: 0.5
User 60376 does not improve AUC. Reverting changes.
Training on augumented user 55559 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55559 AUC after training: 0.5
User 55559 does not improve AUC. Reverting changes.
Training on augumented user 61192 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61192 AUC after training: 0.5
User 61192 does not improve AUC. Reverting changes.
Training on augumented user 86672 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86672 AUC after training: 0.5
User 86672 does not improve AUC. Reverting changes.
Training on augumented user 117144 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117144 AUC after training: 0.5
User 117144 does not improve AUC. Reverting changes.
Training on augumented user 101840 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101840 AUC after training: 0.5
User 101840 does not improve AUC. Reverting changes.
Training on augumented user 47570 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47570 AUC after training: 0.5
User 47570 does not improve AUC. Reverting changes.
Training on augumented user 22593 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22593 AUC after training: 0.5
User 22593 does not improve AUC. Reverting changes.
Training on augumented user 53700 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53700 AUC after training: 0.5
User 53700 does not improve AUC. Reverting changes.
Training on augumented user 59262 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59262 AUC after training: 0.5
User 59262 does not improve AUC. Reverting changes.
Training on augumented user 119627 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119627 AUC after training: 0.5
User 119627 does not improve AUC. Reverting changes.
Training on augumented user 68672 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68672 AUC after training: 0.5
User 68672 does not improve AUC. Reverting changes.
Training on augumented user 80165 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80165 AUC after training: 0.5
User 80165 does not improve AUC. Reverting changes.
Training on augumented user 132588 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132588 AUC after training: 0.5
User 132588 does not improve AUC. Reverting changes.
Training on augumented user 86426 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86426 AUC after training: 0.5
User 86426 does not improve AUC. Reverting changes.
Training on augumented user 61545 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61545 AUC after training: 0.5
User 61545 does not improve AUC. Reverting changes.
Training on augumented user 9070 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9070 AUC after training: 0.5
User 9070 does not improve AUC. Reverting changes.
Training on augumented user 108101 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108101 AUC after training: 0.5
User 108101 does not improve AUC. Reverting changes.
Training on augumented user 36083 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36083 AUC after training: 0.5
User 36083 does not improve AUC. Reverting changes.
Training on augumented user 131722 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131722 AUC after training: 0.5
User 131722 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:19:43.301898] start test user 84614 78/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:19:43.752336] start test user 84614 78/568 recall augumented users by random, augumented_users = [63308, 82147, 97618, 64185, 13491, 40678, 100880, 60542, 108669, 17390, 8911, 134716, 79199, 106687, 108404, 818, 19942, 39422, 41068, 48903, 73039, 123269, 138344, 91787, 82458, 75284, 75999, 136355, 117262, 24493, 418, 115806, 63575, 55853, 68579, 82241, 83253, 52620, 114733, 97308, 35553, 40992, 68154, 99701, 98432, 94379, 115269, 6063, 86707, 7825]
[2024-12-02 18:19:43.767953] user = 84614 Cloud 78/568
[2024-12-02 18:19:43.783399] user = 84614 Local 78/568
[2024-12-02 18:19:43.897709] user = 84614 Local+ 78/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:19:45.982148] user = 84614 MPDA- 78/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6241582491582491
Training on augumented user 63308 0/50 current_auc = 0.6241582491582491
User 63308 AUC after training: 0.6224747474747475
User 63308 does not improve AUC. Reverting changes.
Training on augumented user 82147 1/50 current_auc = 0.6241582491582491
User 82147 AUC after training: 0.6245791245791246
User 82147 improves AUC. Keeping the model.
Training on augumented user 97618 2/50 current_auc = 0.6245791245791246
User 97618 AUC after training: 0.6258417508417509
User 97618 improves AUC. Keeping the model.
Training on augumented user 64185 3/50 current_auc = 0.6258417508417509
User 64185 AUC after training: 0.6241582491582491
User 64185 does not improve AUC. Reverting changes.
Training on augumented user 13491 4/50 current_auc = 0.6258417508417509
User 13491 AUC after training: 0.625
User 13491 does not improve AUC. Reverting changes.
Training on augumented user 40678 5/50 current_auc = 0.6258417508417509
User 40678 AUC after training: 0.6252104377104377
User 40678 does not improve AUC. Reverting changes.
Training on augumented user 100880 6/50 current_auc = 0.6258417508417509
User 100880 AUC after training: 0.6258417508417509
User 100880 does not improve AUC. Reverting changes.
Training on augumented user 60542 7/50 current_auc = 0.6258417508417509
User 60542 AUC after training: 0.622895622895623
User 60542 does not improve AUC. Reverting changes.
Training on augumented user 108669 8/50 current_auc = 0.6258417508417509
User 108669 AUC after training: 0.6237373737373737
User 108669 does not improve AUC. Reverting changes.
Training on augumented user 17390 9/50 current_auc = 0.6258417508417509
User 17390 AUC after training: 0.6258417508417509
User 17390 does not improve AUC. Reverting changes.
Training on augumented user 8911 10/50 current_auc = 0.6258417508417509
User 8911 AUC after training: 0.6245791245791246
User 8911 does not improve AUC. Reverting changes.
Training on augumented user 134716 11/50 current_auc = 0.6258417508417509
User 134716 AUC after training: 0.6245791245791246
User 134716 does not improve AUC. Reverting changes.
Training on augumented user 79199 12/50 current_auc = 0.6258417508417509
User 79199 AUC after training: 0.6275252525252526
User 79199 improves AUC. Keeping the model.
Training on augumented user 106687 13/50 current_auc = 0.6275252525252526
User 106687 AUC after training: 0.6266835016835017
User 106687 does not improve AUC. Reverting changes.
Training on augumented user 108404 14/50 current_auc = 0.6275252525252526
User 108404 AUC after training: 0.6266835016835017
User 108404 does not improve AUC. Reverting changes.
Training on augumented user 818 15/50 current_auc = 0.6275252525252526
User 818 AUC after training: 0.625
User 818 does not improve AUC. Reverting changes.
Training on augumented user 19942 16/50 current_auc = 0.6275252525252526
User 19942 AUC after training: 0.6275252525252526
User 19942 does not improve AUC. Reverting changes.
Training on augumented user 39422 17/50 current_auc = 0.6275252525252526
User 39422 AUC after training: 0.6296296296296297
User 39422 improves AUC. Keeping the model.
Training on augumented user 41068 18/50 current_auc = 0.6296296296296297
User 41068 AUC after training: 0.6262626262626263
User 41068 does not improve AUC. Reverting changes.
Training on augumented user 48903 19/50 current_auc = 0.6296296296296297
User 48903 AUC after training: 0.6266835016835016
User 48903 does not improve AUC. Reverting changes.
Training on augumented user 73039 20/50 current_auc = 0.6296296296296297
User 73039 AUC after training: 0.6262626262626263
User 73039 does not improve AUC. Reverting changes.
Training on augumented user 123269 21/50 current_auc = 0.6296296296296297
User 123269 AUC after training: 0.6275252525252525
User 123269 does not improve AUC. Reverting changes.
Training on augumented user 138344 22/50 current_auc = 0.6296296296296297
User 138344 AUC after training: 0.6271043771043772
User 138344 does not improve AUC. Reverting changes.
Training on augumented user 91787 23/50 current_auc = 0.6296296296296297
User 91787 AUC after training: 0.627104377104377
User 91787 does not improve AUC. Reverting changes.
Training on augumented user 82458 24/50 current_auc = 0.6296296296296297
User 82458 AUC after training: 0.6275252525252526
User 82458 does not improve AUC. Reverting changes.
Training on augumented user 75284 25/50 current_auc = 0.6296296296296297
User 75284 AUC after training: 0.6233164983164984
User 75284 does not improve AUC. Reverting changes.
Training on augumented user 75999 26/50 current_auc = 0.6296296296296297
User 75999 AUC after training: 0.625
User 75999 does not improve AUC. Reverting changes.
Training on augumented user 136355 27/50 current_auc = 0.6296296296296297
User 136355 AUC after training: 0.6279461279461279
User 136355 does not improve AUC. Reverting changes.
Training on augumented user 117262 28/50 current_auc = 0.6296296296296297
User 117262 AUC after training: 0.6283670033670034
User 117262 does not improve AUC. Reverting changes.
Training on augumented user 24493 29/50 current_auc = 0.6296296296296297
User 24493 AUC after training: 0.6254208754208754
User 24493 does not improve AUC. Reverting changes.
Training on augumented user 418 30/50 current_auc = 0.6296296296296297
User 418 AUC after training: 0.6279461279461279
User 418 does not improve AUC. Reverting changes.
Training on augumented user 115806 31/50 current_auc = 0.6296296296296297
User 115806 AUC after training: 0.6262626262626262
User 115806 does not improve AUC. Reverting changes.
Training on augumented user 63575 32/50 current_auc = 0.6296296296296297
User 63575 AUC after training: 0.6228956228956228
User 63575 does not improve AUC. Reverting changes.
Training on augumented user 55853 33/50 current_auc = 0.6296296296296297
User 55853 AUC after training: 0.6283670033670034
User 55853 does not improve AUC. Reverting changes.
Training on augumented user 68579 34/50 current_auc = 0.6296296296296297
User 68579 AUC after training: 0.6275252525252526
User 68579 does not improve AUC. Reverting changes.
Training on augumented user 82241 35/50 current_auc = 0.6296296296296297
User 82241 AUC after training: 0.6287878787878788
User 82241 does not improve AUC. Reverting changes.
Training on augumented user 83253 36/50 current_auc = 0.6296296296296297
User 83253 AUC after training: 0.6283670033670034
User 83253 does not improve AUC. Reverting changes.
Training on augumented user 52620 37/50 current_auc = 0.6296296296296297
User 52620 AUC after training: 0.6283670033670034
User 52620 does not improve AUC. Reverting changes.
Training on augumented user 114733 38/50 current_auc = 0.6296296296296297
User 114733 AUC after training: 0.6283670033670034
User 114733 does not improve AUC. Reverting changes.
Training on augumented user 97308 39/50 current_auc = 0.6296296296296297
User 97308 AUC after training: 0.6266835016835017
User 97308 does not improve AUC. Reverting changes.
Training on augumented user 35553 40/50 current_auc = 0.6296296296296297
User 35553 AUC after training: 0.6271043771043772
User 35553 does not improve AUC. Reverting changes.
Training on augumented user 40992 41/50 current_auc = 0.6296296296296297
User 40992 AUC after training: 0.6258417508417509
User 40992 does not improve AUC. Reverting changes.
Training on augumented user 68154 42/50 current_auc = 0.6296296296296297
User 68154 AUC after training: 0.627104377104377
User 68154 does not improve AUC. Reverting changes.
Training on augumented user 99701 43/50 current_auc = 0.6296296296296297
User 99701 AUC after training: 0.627104377104377
User 99701 does not improve AUC. Reverting changes.
Training on augumented user 98432 44/50 current_auc = 0.6296296296296297
User 98432 AUC after training: 0.6266835016835016
User 98432 does not improve AUC. Reverting changes.
Training on augumented user 94379 45/50 current_auc = 0.6296296296296297
User 94379 AUC after training: 0.6271043771043772
User 94379 does not improve AUC. Reverting changes.
Training on augumented user 115269 46/50 current_auc = 0.6296296296296297
User 115269 AUC after training: 0.6241582491582491
User 115269 does not improve AUC. Reverting changes.
Training on augumented user 6063 47/50 current_auc = 0.6296296296296297
User 6063 AUC after training: 0.6271043771043772
User 6063 does not improve AUC. Reverting changes.
Training on augumented user 86707 48/50 current_auc = 0.6296296296296297
User 86707 AUC after training: 0.6262626262626262
User 86707 does not improve AUC. Reverting changes.
Training on augumented user 7825 49/50 current_auc = 0.6296296296296297
User 7825 AUC after training: 0.6266835016835016
User 7825 does not improve AUC. Reverting changes.
[2024-12-02 18:20:12.271249] start test user 84726 79/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:20:12.859242] start test user 84726 79/568 recall augumented users by random, augumented_users = [95137, 138296, 42973, 45506, 132338, 26108, 100949, 59374, 8787, 3153, 45597, 113397, 81833, 74394, 26177, 116494, 6948, 24014, 9493, 124057, 85750, 13668, 112281, 88544, 116322, 134323, 74557, 107263, 13950, 40860, 8757, 67982, 126777, 4506, 38781, 79638, 14821, 109212, 81261, 14433, 5026, 51210, 128717, 24336, 112233, 128957, 124606, 75982, 23168, 100984]
[2024-12-02 18:20:12.881517] user = 84726 Cloud 79/568
[2024-12-02 18:20:12.926928] user = 84726 Local 79/568
[2024-12-02 18:20:12.960149] user = 84726 Local+ 79/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:20:15.496505] user = 84726 MPDA- 79/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4924213717317165
Training on augumented user 95137 0/50 current_auc = 0.4924213717317165
User 95137 AUC after training: 0.4939370973853733
User 95137 improves AUC. Keeping the model.
Training on augumented user 138296 1/50 current_auc = 0.4939370973853733
User 138296 AUC after training: 0.4939370973853733
User 138296 does not improve AUC. Reverting changes.
Training on augumented user 42973 2/50 current_auc = 0.4939370973853733
User 42973 AUC after training: 0.4939370973853733
User 42973 does not improve AUC. Reverting changes.
Training on augumented user 45506 3/50 current_auc = 0.4939370973853733
User 45506 AUC after training: 0.4939370973853733
User 45506 does not improve AUC. Reverting changes.
Training on augumented user 132338 4/50 current_auc = 0.4939370973853733
User 132338 AUC after training: 0.4946949602122016
User 132338 improves AUC. Keeping the model.
Training on augumented user 26108 5/50 current_auc = 0.4946949602122016
User 26108 AUC after training: 0.4946949602122016
User 26108 does not improve AUC. Reverting changes.
Training on augumented user 100949 6/50 current_auc = 0.4946949602122016
User 100949 AUC after training: 0.4965896172792724
User 100949 improves AUC. Keeping the model.
Training on augumented user 59374 7/50 current_auc = 0.4965896172792724
User 59374 AUC after training: 0.49507389162561577
User 59374 does not improve AUC. Reverting changes.
Training on augumented user 8787 8/50 current_auc = 0.4965896172792724
User 8787 AUC after training: 0.4939370973853733
User 8787 does not improve AUC. Reverting changes.
Training on augumented user 3153 9/50 current_auc = 0.4965896172792724
User 3153 AUC after training: 0.4965896172792724
User 3153 does not improve AUC. Reverting changes.
Training on augumented user 45597 10/50 current_auc = 0.4965896172792724
User 45597 AUC after training: 0.4946949602122016
User 45597 does not improve AUC. Reverting changes.
Training on augumented user 113397 11/50 current_auc = 0.4965896172792724
User 113397 AUC after training: 0.49621068586585826
User 113397 does not improve AUC. Reverting changes.
Training on augumented user 81833 12/50 current_auc = 0.4965896172792724
User 81833 AUC after training: 0.49242137173171663
User 81833 does not improve AUC. Reverting changes.
Training on augumented user 74394 13/50 current_auc = 0.4965896172792724
User 74394 AUC after training: 0.4969685486926867
User 74394 improves AUC. Keeping the model.
Training on augumented user 26177 14/50 current_auc = 0.4969685486926867
User 26177 AUC after training: 0.49734748010610075
User 26177 improves AUC. Keeping the model.
Training on augumented user 116494 15/50 current_auc = 0.49734748010610075
User 116494 AUC after training: 0.4958317544524441
User 116494 does not improve AUC. Reverting changes.
Training on augumented user 6948 16/50 current_auc = 0.49734748010610075
User 6948 AUC after training: 0.4977264115195149
User 6948 improves AUC. Keeping the model.
Training on augumented user 24014 17/50 current_auc = 0.4977264115195149
User 24014 AUC after training: 0.49545282303902993
User 24014 does not improve AUC. Reverting changes.
Training on augumented user 9493 18/50 current_auc = 0.4977264115195149
User 9493 AUC after training: 0.49734748010610075
User 9493 does not improve AUC. Reverting changes.
Training on augumented user 124057 19/50 current_auc = 0.4977264115195149
User 124057 AUC after training: 0.4946949602122016
User 124057 does not improve AUC. Reverting changes.
Training on augumented user 85750 20/50 current_auc = 0.4977264115195149
User 85750 AUC after training: 0.4958317544524441
User 85750 does not improve AUC. Reverting changes.
Training on augumented user 13668 21/50 current_auc = 0.4977264115195149
User 13668 AUC after training: 0.49734748010610086
User 13668 does not improve AUC. Reverting changes.
Training on augumented user 112281 22/50 current_auc = 0.4977264115195149
User 112281 AUC after training: 0.4958317544524441
User 112281 does not improve AUC. Reverting changes.
Training on augumented user 88544 23/50 current_auc = 0.4977264115195149
User 88544 AUC after training: 0.4958317544524441
User 88544 does not improve AUC. Reverting changes.
Training on augumented user 116322 24/50 current_auc = 0.4977264115195149
User 116322 AUC after training: 0.49545282303902993
User 116322 does not improve AUC. Reverting changes.
Training on augumented user 134323 25/50 current_auc = 0.4977264115195149
User 134323 AUC after training: 0.4958317544524441
User 134323 does not improve AUC. Reverting changes.
Training on augumented user 74557 26/50 current_auc = 0.4977264115195149
User 74557 AUC after training: 0.49734748010610075
User 74557 does not improve AUC. Reverting changes.
Training on augumented user 107263 27/50 current_auc = 0.4977264115195149
User 107263 AUC after training: 0.4965896172792724
User 107263 does not improve AUC. Reverting changes.
Training on augumented user 13950 28/50 current_auc = 0.4977264115195149
User 13950 AUC after training: 0.49545282303902993
User 13950 does not improve AUC. Reverting changes.
Training on augumented user 40860 29/50 current_auc = 0.4977264115195149
User 40860 AUC after training: 0.4969685486926866
User 40860 does not improve AUC. Reverting changes.
Training on augumented user 8757 30/50 current_auc = 0.4977264115195149
User 8757 AUC after training: 0.49621068586585826
User 8757 does not improve AUC. Reverting changes.
Training on augumented user 67982 31/50 current_auc = 0.4977264115195149
User 67982 AUC after training: 0.4965896172792724
User 67982 does not improve AUC. Reverting changes.
Training on augumented user 126777 32/50 current_auc = 0.4977264115195149
User 126777 AUC after training: 0.49545282303902993
User 126777 does not improve AUC. Reverting changes.
Training on augumented user 4506 33/50 current_auc = 0.4977264115195149
User 4506 AUC after training: 0.4965896172792724
User 4506 does not improve AUC. Reverting changes.
Training on augumented user 38781 34/50 current_auc = 0.4977264115195149
User 38781 AUC after training: 0.4977264115195149
User 38781 does not improve AUC. Reverting changes.
Training on augumented user 79638 35/50 current_auc = 0.4977264115195149
User 79638 AUC after training: 0.4965896172792724
User 79638 does not improve AUC. Reverting changes.
Training on augumented user 14821 36/50 current_auc = 0.4977264115195149
User 14821 AUC after training: 0.4965896172792724
User 14821 does not improve AUC. Reverting changes.
Training on augumented user 109212 37/50 current_auc = 0.4977264115195149
User 109212 AUC after training: 0.49621068586585826
User 109212 does not improve AUC. Reverting changes.
Training on augumented user 81261 38/50 current_auc = 0.4977264115195149
User 81261 AUC after training: 0.49734748010610086
User 81261 does not improve AUC. Reverting changes.
Training on augumented user 14433 39/50 current_auc = 0.4977264115195149
User 14433 AUC after training: 0.49734748010610075
User 14433 does not improve AUC. Reverting changes.
Training on augumented user 5026 40/50 current_auc = 0.4977264115195149
User 5026 AUC after training: 0.4977264115195149
User 5026 does not improve AUC. Reverting changes.
Training on augumented user 51210 41/50 current_auc = 0.4977264115195149
User 51210 AUC after training: 0.49545282303902993
User 51210 does not improve AUC. Reverting changes.
Training on augumented user 128717 42/50 current_auc = 0.4977264115195149
User 128717 AUC after training: 0.49621068586585826
User 128717 does not improve AUC. Reverting changes.
Training on augumented user 24336 43/50 current_auc = 0.4977264115195149
User 24336 AUC after training: 0.4928003031451308
User 24336 does not improve AUC. Reverting changes.
Training on augumented user 112233 44/50 current_auc = 0.4977264115195149
User 112233 AUC after training: 0.49507389162561577
User 112233 does not improve AUC. Reverting changes.
Training on augumented user 128957 45/50 current_auc = 0.4977264115195149
User 128957 AUC after training: 0.4958317544524441
User 128957 does not improve AUC. Reverting changes.
Training on augumented user 124606 46/50 current_auc = 0.4977264115195149
User 124606 AUC after training: 0.49545282303902993
User 124606 does not improve AUC. Reverting changes.
Training on augumented user 75982 47/50 current_auc = 0.4977264115195149
User 75982 AUC after training: 0.49621068586585826
User 75982 does not improve AUC. Reverting changes.
Training on augumented user 23168 48/50 current_auc = 0.4977264115195149
User 23168 AUC after training: 0.4965896172792724
User 23168 does not improve AUC. Reverting changes.
Training on augumented user 100984 49/50 current_auc = 0.4977264115195149
User 100984 AUC after training: 0.4958317544524441
User 100984 does not improve AUC. Reverting changes.
[2024-12-02 18:20:44.494744] start test user 84751 80/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:20:44.905652] start test user 84751 80/568 recall augumented users by random, augumented_users = [7566, 116086, 128924, 8169, 111521, 3520, 86301, 69023, 131081, 72989, 2529, 53243, 90985, 112250, 43807, 124613, 62766, 40313, 114067, 117199, 14112, 84880, 112825, 25736, 111110, 105012, 113247, 72760, 92244, 38869, 65734, 100382, 1203, 113861, 64768, 20799, 112599, 94807, 68873, 34338, 15426, 89798, 80237, 21422, 122039, 67237, 60185, 19762, 125793, 45151]
[2024-12-02 18:20:44.920304] user = 84751 Cloud 80/568
[2024-12-02 18:20:44.938805] user = 84751 Local 80/568
[2024-12-02 18:20:44.977904] user = 84751 Local+ 80/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:20:47.420929] user = 84751 MPDA- 80/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.75
Training on augumented user 7566 0/50 current_auc = 0.75
User 7566 AUC after training: 0.75
User 7566 does not improve AUC. Reverting changes.
Training on augumented user 116086 1/50 current_auc = 0.75
User 116086 AUC after training: 0.75
User 116086 does not improve AUC. Reverting changes.
Training on augumented user 128924 2/50 current_auc = 0.75
User 128924 AUC after training: 0.75
User 128924 does not improve AUC. Reverting changes.
Training on augumented user 8169 3/50 current_auc = 0.75
User 8169 AUC after training: 0.75
User 8169 does not improve AUC. Reverting changes.
Training on augumented user 111521 4/50 current_auc = 0.75
User 111521 AUC after training: 0.75
User 111521 does not improve AUC. Reverting changes.
Training on augumented user 3520 5/50 current_auc = 0.75
User 3520 AUC after training: 0.75
User 3520 does not improve AUC. Reverting changes.
Training on augumented user 86301 6/50 current_auc = 0.75
User 86301 AUC after training: 0.75
User 86301 does not improve AUC. Reverting changes.
Training on augumented user 69023 7/50 current_auc = 0.75
User 69023 AUC after training: 0.75
User 69023 does not improve AUC. Reverting changes.
Training on augumented user 131081 8/50 current_auc = 0.75
User 131081 AUC after training: 0.75
User 131081 does not improve AUC. Reverting changes.
Training on augumented user 72989 9/50 current_auc = 0.75
User 72989 AUC after training: 0.75
User 72989 does not improve AUC. Reverting changes.
Training on augumented user 2529 10/50 current_auc = 0.75
User 2529 AUC after training: 0.75
User 2529 does not improve AUC. Reverting changes.
Training on augumented user 53243 11/50 current_auc = 0.75
User 53243 AUC after training: 0.75
User 53243 does not improve AUC. Reverting changes.
Training on augumented user 90985 12/50 current_auc = 0.75
User 90985 AUC after training: 0.75
User 90985 does not improve AUC. Reverting changes.
Training on augumented user 112250 13/50 current_auc = 0.75
User 112250 AUC after training: 0.75
User 112250 does not improve AUC. Reverting changes.
Training on augumented user 43807 14/50 current_auc = 0.75
User 43807 AUC after training: 0.75
User 43807 does not improve AUC. Reverting changes.
Training on augumented user 124613 15/50 current_auc = 0.75
User 124613 AUC after training: 0.75
User 124613 does not improve AUC. Reverting changes.
Training on augumented user 62766 16/50 current_auc = 0.75
User 62766 AUC after training: 0.75
User 62766 does not improve AUC. Reverting changes.
Training on augumented user 40313 17/50 current_auc = 0.75
User 40313 AUC after training: 0.75
User 40313 does not improve AUC. Reverting changes.
Training on augumented user 114067 18/50 current_auc = 0.75
User 114067 AUC after training: 0.75
User 114067 does not improve AUC. Reverting changes.
Training on augumented user 117199 19/50 current_auc = 0.75
User 117199 AUC after training: 0.75
User 117199 does not improve AUC. Reverting changes.
Training on augumented user 14112 20/50 current_auc = 0.75
User 14112 AUC after training: 0.75
User 14112 does not improve AUC. Reverting changes.
Training on augumented user 84880 21/50 current_auc = 0.75
User 84880 AUC after training: 0.75
User 84880 does not improve AUC. Reverting changes.
Training on augumented user 112825 22/50 current_auc = 0.75
User 112825 AUC after training: 0.75
User 112825 does not improve AUC. Reverting changes.
Training on augumented user 25736 23/50 current_auc = 0.75
User 25736 AUC after training: 0.75
User 25736 does not improve AUC. Reverting changes.
Training on augumented user 111110 24/50 current_auc = 0.75
User 111110 AUC after training: 0.75
User 111110 does not improve AUC. Reverting changes.
Training on augumented user 105012 25/50 current_auc = 0.75
User 105012 AUC after training: 0.75
User 105012 does not improve AUC. Reverting changes.
Training on augumented user 113247 26/50 current_auc = 0.75
User 113247 AUC after training: 0.75
User 113247 does not improve AUC. Reverting changes.
Training on augumented user 72760 27/50 current_auc = 0.75
User 72760 AUC after training: 0.75
User 72760 does not improve AUC. Reverting changes.
Training on augumented user 92244 28/50 current_auc = 0.75
User 92244 AUC after training: 0.75
User 92244 does not improve AUC. Reverting changes.
Training on augumented user 38869 29/50 current_auc = 0.75
User 38869 AUC after training: 0.75
User 38869 does not improve AUC. Reverting changes.
Training on augumented user 65734 30/50 current_auc = 0.75
User 65734 AUC after training: 0.75
User 65734 does not improve AUC. Reverting changes.
Training on augumented user 100382 31/50 current_auc = 0.75
User 100382 AUC after training: 0.75
User 100382 does not improve AUC. Reverting changes.
Training on augumented user 1203 32/50 current_auc = 0.75
User 1203 AUC after training: 0.75
User 1203 does not improve AUC. Reverting changes.
Training on augumented user 113861 33/50 current_auc = 0.75
User 113861 AUC after training: 0.75
User 113861 does not improve AUC. Reverting changes.
Training on augumented user 64768 34/50 current_auc = 0.75
User 64768 AUC after training: 0.75
User 64768 does not improve AUC. Reverting changes.
Training on augumented user 20799 35/50 current_auc = 0.75
User 20799 AUC after training: 0.75
User 20799 does not improve AUC. Reverting changes.
Training on augumented user 112599 36/50 current_auc = 0.75
User 112599 AUC after training: 0.75
User 112599 does not improve AUC. Reverting changes.
Training on augumented user 94807 37/50 current_auc = 0.75
User 94807 AUC after training: 0.75
User 94807 does not improve AUC. Reverting changes.
Training on augumented user 68873 38/50 current_auc = 0.75
User 68873 AUC after training: 0.75
User 68873 does not improve AUC. Reverting changes.
Training on augumented user 34338 39/50 current_auc = 0.75
User 34338 AUC after training: 0.75
User 34338 does not improve AUC. Reverting changes.
Training on augumented user 15426 40/50 current_auc = 0.75
User 15426 AUC after training: 0.75
User 15426 does not improve AUC. Reverting changes.
Training on augumented user 89798 41/50 current_auc = 0.75
User 89798 AUC after training: 0.75
User 89798 does not improve AUC. Reverting changes.
Training on augumented user 80237 42/50 current_auc = 0.75
User 80237 AUC after training: 0.75
User 80237 does not improve AUC. Reverting changes.
Training on augumented user 21422 43/50 current_auc = 0.75
User 21422 AUC after training: 0.75
User 21422 does not improve AUC. Reverting changes.
Training on augumented user 122039 44/50 current_auc = 0.75
User 122039 AUC after training: 0.75
User 122039 does not improve AUC. Reverting changes.
Training on augumented user 67237 45/50 current_auc = 0.75
User 67237 AUC after training: 0.75
User 67237 does not improve AUC. Reverting changes.
Training on augumented user 60185 46/50 current_auc = 0.75
User 60185 AUC after training: 0.75
User 60185 does not improve AUC. Reverting changes.
Training on augumented user 19762 47/50 current_auc = 0.75
User 19762 AUC after training: 0.75
User 19762 does not improve AUC. Reverting changes.
Training on augumented user 125793 48/50 current_auc = 0.75
User 125793 AUC after training: 0.75
User 125793 does not improve AUC. Reverting changes.
Training on augumented user 45151 49/50 current_auc = 0.75
User 45151 AUC after training: 0.75
User 45151 does not improve AUC. Reverting changes.
[2024-12-02 18:21:18.034844] start test user 84752 81/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:21:18.454792] start test user 84752 81/568 recall augumented users by random, augumented_users = [8369, 1827, 44248, 117523, 24459, 91867, 66433, 2312, 54042, 49251, 31030, 86104, 124576, 74069, 101987, 137524, 94952, 100257, 74913, 11113, 94215, 116953, 39760, 85889, 5561, 69227, 68431, 24940, 54971, 76260, 91239, 59657, 18007, 106534, 85008, 1531, 120946, 70933, 21423, 86648, 50096, 118359, 22814, 97338, 110596, 25830, 53850, 6581, 91560, 79151]
[2024-12-02 18:21:18.471754] user = 84752 Cloud 81/568
[2024-12-02 18:21:18.496418] user = 84752 Local 81/568
[2024-12-02 18:21:18.683518] user = 84752 Local+ 81/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:21:21.915879] user = 84752 MPDA- 81/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5903448275862069
Training on augumented user 8369 0/50 current_auc = 0.5903448275862069
User 8369 AUC after training: 0.5894252873563218
User 8369 does not improve AUC. Reverting changes.
Training on augumented user 1827 1/50 current_auc = 0.5903448275862069
User 1827 AUC after training: 0.5897318007662835
User 1827 does not improve AUC. Reverting changes.
Training on augumented user 44248 2/50 current_auc = 0.5903448275862069
User 44248 AUC after training: 0.5904980842911878
User 44248 improves AUC. Keeping the model.
Training on augumented user 117523 3/50 current_auc = 0.5904980842911878
User 117523 AUC after training: 0.5910344827586207
User 117523 improves AUC. Keeping the model.
Training on augumented user 24459 4/50 current_auc = 0.5910344827586207
User 24459 AUC after training: 0.5908045977011495
User 24459 does not improve AUC. Reverting changes.
Training on augumented user 91867 5/50 current_auc = 0.5910344827586207
User 91867 AUC after training: 0.5908812260536398
User 91867 does not improve AUC. Reverting changes.
Training on augumented user 66433 6/50 current_auc = 0.5910344827586207
User 66433 AUC after training: 0.5906513409961687
User 66433 does not improve AUC. Reverting changes.
Training on augumented user 2312 7/50 current_auc = 0.5910344827586207
User 2312 AUC after training: 0.5906513409961687
User 2312 does not improve AUC. Reverting changes.
Training on augumented user 54042 8/50 current_auc = 0.5910344827586207
User 54042 AUC after training: 0.5914942528735632
User 54042 improves AUC. Keeping the model.
Training on augumented user 49251 9/50 current_auc = 0.5914942528735632
User 49251 AUC after training: 0.5914176245210728
User 49251 does not improve AUC. Reverting changes.
Training on augumented user 31030 10/50 current_auc = 0.5914942528735632
User 31030 AUC after training: 0.5919540229885057
User 31030 improves AUC. Keeping the model.
Training on augumented user 86104 11/50 current_auc = 0.5919540229885057
User 86104 AUC after training: 0.5917241379310345
User 86104 does not improve AUC. Reverting changes.
Training on augumented user 124576 12/50 current_auc = 0.5919540229885057
User 124576 AUC after training: 0.5935632183908046
User 124576 improves AUC. Keeping the model.
Training on augumented user 74069 13/50 current_auc = 0.5935632183908046
User 74069 AUC after training: 0.593486590038314
User 74069 does not improve AUC. Reverting changes.
Training on augumented user 101987 14/50 current_auc = 0.5935632183908046
User 101987 AUC after training: 0.5938697318007663
User 101987 improves AUC. Keeping the model.
Training on augumented user 137524 15/50 current_auc = 0.5938697318007663
User 137524 AUC after training: 0.5942528735632183
User 137524 improves AUC. Keeping the model.
Training on augumented user 94952 16/50 current_auc = 0.5942528735632183
User 94952 AUC after training: 0.5941762452107279
User 94952 does not improve AUC. Reverting changes.
Training on augumented user 100257 17/50 current_auc = 0.5942528735632183
User 100257 AUC after training: 0.5941762452107279
User 100257 does not improve AUC. Reverting changes.
Training on augumented user 74913 18/50 current_auc = 0.5942528735632183
User 74913 AUC after training: 0.5944061302681992
User 74913 improves AUC. Keeping the model.
Training on augumented user 11113 19/50 current_auc = 0.5944061302681992
User 11113 AUC after training: 0.5941762452107279
User 11113 does not improve AUC. Reverting changes.
Training on augumented user 94215 20/50 current_auc = 0.5944061302681992
User 94215 AUC after training: 0.5944827586206897
User 94215 improves AUC. Keeping the model.
Training on augumented user 116953 21/50 current_auc = 0.5944827586206897
User 116953 AUC after training: 0.5940229885057472
User 116953 does not improve AUC. Reverting changes.
Training on augumented user 39760 22/50 current_auc = 0.5944827586206897
User 39760 AUC after training: 0.5939463601532566
User 39760 does not improve AUC. Reverting changes.
Training on augumented user 85889 23/50 current_auc = 0.5944827586206897
User 85889 AUC after training: 0.5949425287356322
User 85889 improves AUC. Keeping the model.
Training on augumented user 5561 24/50 current_auc = 0.5949425287356322
User 5561 AUC after training: 0.5943295019157088
User 5561 does not improve AUC. Reverting changes.
Training on augumented user 69227 25/50 current_auc = 0.5949425287356322
User 69227 AUC after training: 0.5928735632183908
User 69227 does not improve AUC. Reverting changes.
Training on augumented user 68431 26/50 current_auc = 0.5949425287356322
User 68431 AUC after training: 0.5962452107279694
User 68431 improves AUC. Keeping the model.
Training on augumented user 24940 27/50 current_auc = 0.5962452107279694
User 24940 AUC after training: 0.5984674329501914
User 24940 improves AUC. Keeping the model.
Training on augumented user 54971 28/50 current_auc = 0.5984674329501914
User 54971 AUC after training: 0.5973946360153256
User 54971 does not improve AUC. Reverting changes.
Training on augumented user 76260 29/50 current_auc = 0.5984674329501914
User 76260 AUC after training: 0.5982375478927203
User 76260 does not improve AUC. Reverting changes.
Training on augumented user 91239 30/50 current_auc = 0.5984674329501914
User 91239 AUC after training: 0.5996168582375478
User 91239 improves AUC. Keeping the model.
Training on augumented user 59657 31/50 current_auc = 0.5996168582375478
User 59657 AUC after training: 0.5999233716475095
User 59657 improves AUC. Keeping the model.
Training on augumented user 18007 32/50 current_auc = 0.5999233716475095
User 18007 AUC after training: 0.6
User 18007 improves AUC. Keeping the model.
Training on augumented user 106534 33/50 current_auc = 0.6
User 106534 AUC after training: 0.5993869731800766
User 106534 does not improve AUC. Reverting changes.
Training on augumented user 85008 34/50 current_auc = 0.6
User 85008 AUC after training: 0.5992337164750958
User 85008 does not improve AUC. Reverting changes.
Training on augumented user 1531 35/50 current_auc = 0.6
User 1531 AUC after training: 0.599616858237548
User 1531 does not improve AUC. Reverting changes.
Training on augumented user 120946 36/50 current_auc = 0.6
User 120946 AUC after training: 0.5996168582375478
User 120946 does not improve AUC. Reverting changes.
Training on augumented user 70933 37/50 current_auc = 0.6
User 70933 AUC after training: 0.5999233716475095
User 70933 does not improve AUC. Reverting changes.
Training on augumented user 21423 38/50 current_auc = 0.6
User 21423 AUC after training: 0.5986973180076628
User 21423 does not improve AUC. Reverting changes.
Training on augumented user 86648 39/50 current_auc = 0.6
User 86648 AUC after training: 0.5992337164750958
User 86648 does not improve AUC. Reverting changes.
Training on augumented user 50096 40/50 current_auc = 0.6
User 50096 AUC after training: 0.600383141762452
User 50096 improves AUC. Keeping the model.
Training on augumented user 118359 41/50 current_auc = 0.600383141762452
User 118359 AUC after training: 0.6005363984674329
User 118359 improves AUC. Keeping the model.
Training on augumented user 22814 42/50 current_auc = 0.6005363984674329
User 22814 AUC after training: 0.600383141762452
User 22814 does not improve AUC. Reverting changes.
Training on augumented user 97338 43/50 current_auc = 0.6005363984674329
User 97338 AUC after training: 0.5992337164750957
User 97338 does not improve AUC. Reverting changes.
Training on augumented user 110596 44/50 current_auc = 0.6005363984674329
User 110596 AUC after training: 0.6002298850574712
User 110596 does not improve AUC. Reverting changes.
Training on augumented user 25830 45/50 current_auc = 0.6005363984674329
User 25830 AUC after training: 0.5987739463601531
User 25830 does not improve AUC. Reverting changes.
Training on augumented user 53850 46/50 current_auc = 0.6005363984674329
User 53850 AUC after training: 0.6004597701149424
User 53850 does not improve AUC. Reverting changes.
Training on augumented user 6581 47/50 current_auc = 0.6005363984674329
User 6581 AUC after training: 0.6007662835249042
User 6581 improves AUC. Keeping the model.
Training on augumented user 91560 48/50 current_auc = 0.6007662835249042
User 91560 AUC after training: 0.600536398467433
User 91560 does not improve AUC. Reverting changes.
Training on augumented user 79151 49/50 current_auc = 0.6007662835249042
User 79151 AUC after training: 0.5996168582375478
User 79151 does not improve AUC. Reverting changes.
[2024-12-02 18:21:54.228459] start test user 84785 82/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:21:54.754315] start test user 84785 82/568 recall augumented users by random, augumented_users = [39356, 7477, 26985, 33672, 79226, 73635, 4277, 109557, 45917, 24005, 37890, 27440, 64808, 100626, 67991, 128037, 32749, 53890, 94124, 90130, 94188, 10185, 86245, 6978, 121222, 35976, 72738, 93921, 45879, 121436, 26385, 62413, 99721, 80214, 104891, 27825, 16352, 130325, 33779, 36346, 1637, 59302, 121728, 125360, 92209, 115750, 19421, 39030, 106639, 80906]
[2024-12-02 18:21:54.773937] user = 84785 Cloud 82/568
[2024-12-02 18:21:54.795560] user = 84785 Local 82/568
[2024-12-02 18:21:54.966880] user = 84785 Local+ 82/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:21:57.851525] user = 84785 MPDA- 82/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6838541666666667
Training on augumented user 39356 0/50 current_auc = 0.6838541666666667
User 39356 AUC after training: 0.6840277777777778
User 39356 improves AUC. Keeping the model.
Training on augumented user 7477 1/50 current_auc = 0.6840277777777778
User 7477 AUC after training: 0.68359375
User 7477 does not improve AUC. Reverting changes.
Training on augumented user 26985 2/50 current_auc = 0.6840277777777778
User 26985 AUC after training: 0.6836805555555555
User 26985 does not improve AUC. Reverting changes.
Training on augumented user 33672 3/50 current_auc = 0.6840277777777778
User 33672 AUC after training: 0.6836805555555555
User 33672 does not improve AUC. Reverting changes.
Training on augumented user 79226 4/50 current_auc = 0.6840277777777778
User 79226 AUC after training: 0.6838541666666668
User 79226 does not improve AUC. Reverting changes.
Training on augumented user 73635 5/50 current_auc = 0.6840277777777778
User 73635 AUC after training: 0.683420138888889
User 73635 does not improve AUC. Reverting changes.
Training on augumented user 4277 6/50 current_auc = 0.6840277777777778
User 4277 AUC after training: 0.683420138888889
User 4277 does not improve AUC. Reverting changes.
Training on augumented user 109557 7/50 current_auc = 0.6840277777777778
User 109557 AUC after training: 0.6842013888888888
User 109557 improves AUC. Keeping the model.
Training on augumented user 45917 8/50 current_auc = 0.6842013888888888
User 45917 AUC after training: 0.6831597222222222
User 45917 does not improve AUC. Reverting changes.
Training on augumented user 24005 9/50 current_auc = 0.6842013888888888
User 24005 AUC after training: 0.6845486111111112
User 24005 improves AUC. Keeping the model.
Training on augumented user 37890 10/50 current_auc = 0.6845486111111112
User 37890 AUC after training: 0.6825520833333333
User 37890 does not improve AUC. Reverting changes.
Training on augumented user 27440 11/50 current_auc = 0.6845486111111112
User 27440 AUC after training: 0.6843750000000001
User 27440 does not improve AUC. Reverting changes.
Training on augumented user 64808 12/50 current_auc = 0.6845486111111112
User 64808 AUC after training: 0.6840277777777778
User 64808 does not improve AUC. Reverting changes.
Training on augumented user 100626 13/50 current_auc = 0.6845486111111112
User 100626 AUC after training: 0.6838541666666667
User 100626 does not improve AUC. Reverting changes.
Training on augumented user 67991 14/50 current_auc = 0.6845486111111112
User 67991 AUC after training: 0.6847222222222222
User 67991 improves AUC. Keeping the model.
Training on augumented user 128037 15/50 current_auc = 0.6847222222222222
User 128037 AUC after training: 0.6838541666666667
User 128037 does not improve AUC. Reverting changes.
Training on augumented user 32749 16/50 current_auc = 0.6847222222222222
User 32749 AUC after training: 0.6847222222222222
User 32749 does not improve AUC. Reverting changes.
Training on augumented user 53890 17/50 current_auc = 0.6847222222222222
User 53890 AUC after training: 0.6847222222222222
User 53890 does not improve AUC. Reverting changes.
Training on augumented user 94124 18/50 current_auc = 0.6847222222222222
User 94124 AUC after training: 0.6848958333333333
User 94124 improves AUC. Keeping the model.
Training on augumented user 90130 19/50 current_auc = 0.6848958333333333
User 90130 AUC after training: 0.6845486111111111
User 90130 does not improve AUC. Reverting changes.
Training on augumented user 94188 20/50 current_auc = 0.6848958333333333
User 94188 AUC after training: 0.6842013888888889
User 94188 does not improve AUC. Reverting changes.
Training on augumented user 10185 21/50 current_auc = 0.6848958333333333
User 10185 AUC after training: 0.6845486111111112
User 10185 does not improve AUC. Reverting changes.
Training on augumented user 86245 22/50 current_auc = 0.6848958333333333
User 86245 AUC after training: 0.6848958333333333
User 86245 does not improve AUC. Reverting changes.
Training on augumented user 6978 23/50 current_auc = 0.6848958333333333
User 6978 AUC after training: 0.6822916666666666
User 6978 does not improve AUC. Reverting changes.
Training on augumented user 121222 24/50 current_auc = 0.6848958333333333
User 121222 AUC after training: 0.6842013888888889
User 121222 does not improve AUC. Reverting changes.
Training on augumented user 35976 25/50 current_auc = 0.6848958333333333
User 35976 AUC after training: 0.6838541666666667
User 35976 does not improve AUC. Reverting changes.
Training on augumented user 72738 26/50 current_auc = 0.6848958333333333
User 72738 AUC after training: 0.6861111111111111
User 72738 improves AUC. Keeping the model.
Training on augumented user 93921 27/50 current_auc = 0.6861111111111111
User 93921 AUC after training: 0.6855902777777778
User 93921 does not improve AUC. Reverting changes.
Training on augumented user 45879 28/50 current_auc = 0.6861111111111111
User 45879 AUC after training: 0.6845486111111111
User 45879 does not improve AUC. Reverting changes.
Training on augumented user 121436 29/50 current_auc = 0.6861111111111111
User 121436 AUC after training: 0.6845486111111111
User 121436 does not improve AUC. Reverting changes.
Training on augumented user 26385 30/50 current_auc = 0.6861111111111111
User 26385 AUC after training: 0.6861111111111111
User 26385 does not improve AUC. Reverting changes.
Training on augumented user 62413 31/50 current_auc = 0.6861111111111111
User 62413 AUC after training: 0.6855902777777777
User 62413 does not improve AUC. Reverting changes.
Training on augumented user 99721 32/50 current_auc = 0.6861111111111111
User 99721 AUC after training: 0.6854166666666667
User 99721 does not improve AUC. Reverting changes.
Training on augumented user 80214 33/50 current_auc = 0.6861111111111111
User 80214 AUC after training: 0.685763888888889
User 80214 does not improve AUC. Reverting changes.
Training on augumented user 104891 34/50 current_auc = 0.6861111111111111
User 104891 AUC after training: 0.6861111111111111
User 104891 does not improve AUC. Reverting changes.
Training on augumented user 27825 35/50 current_auc = 0.6861111111111111
User 27825 AUC after training: 0.6840277777777778
User 27825 does not improve AUC. Reverting changes.
Training on augumented user 16352 36/50 current_auc = 0.6861111111111111
User 16352 AUC after training: 0.6855902777777777
User 16352 does not improve AUC. Reverting changes.
Training on augumented user 130325 37/50 current_auc = 0.6861111111111111
User 130325 AUC after training: 0.6861111111111111
User 130325 does not improve AUC. Reverting changes.
Training on augumented user 33779 38/50 current_auc = 0.6861111111111111
User 33779 AUC after training: 0.6855902777777777
User 33779 does not improve AUC. Reverting changes.
Training on augumented user 36346 39/50 current_auc = 0.6861111111111111
User 36346 AUC after training: 0.6862847222222221
User 36346 improves AUC. Keeping the model.
Training on augumented user 1637 40/50 current_auc = 0.6862847222222221
User 1637 AUC after training: 0.6855902777777777
User 1637 does not improve AUC. Reverting changes.
Training on augumented user 59302 41/50 current_auc = 0.6862847222222221
User 59302 AUC after training: 0.6854166666666667
User 59302 does not improve AUC. Reverting changes.
Training on augumented user 121728 42/50 current_auc = 0.6862847222222221
User 121728 AUC after training: 0.6862847222222221
User 121728 does not improve AUC. Reverting changes.
Training on augumented user 125360 43/50 current_auc = 0.6862847222222221
User 125360 AUC after training: 0.6860243055555555
User 125360 does not improve AUC. Reverting changes.
Training on augumented user 92209 44/50 current_auc = 0.6862847222222221
User 92209 AUC after training: 0.6859375
User 92209 does not improve AUC. Reverting changes.
Training on augumented user 115750 45/50 current_auc = 0.6862847222222221
User 115750 AUC after training: 0.6855902777777777
User 115750 does not improve AUC. Reverting changes.
Training on augumented user 19421 46/50 current_auc = 0.6862847222222221
User 19421 AUC after training: 0.6855902777777777
User 19421 does not improve AUC. Reverting changes.
Training on augumented user 39030 47/50 current_auc = 0.6862847222222221
User 39030 AUC after training: 0.6852430555555555
User 39030 does not improve AUC. Reverting changes.
Training on augumented user 106639 48/50 current_auc = 0.6862847222222221
User 106639 AUC after training: 0.6859375
User 106639 does not improve AUC. Reverting changes.
Training on augumented user 80906 49/50 current_auc = 0.6862847222222221
User 80906 AUC after training: 0.6855902777777778
User 80906 does not improve AUC. Reverting changes.
[2024-12-02 18:22:30.249959] start test user 84792 83/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:22:30.760487] start test user 84792 83/568 recall augumented users by random, augumented_users = [120023, 42380, 11910, 40181, 59080, 13508, 21324, 21033, 80867, 85866, 9783, 97951, 44511, 122471, 18483, 96972, 23778, 21472, 108245, 17832, 30622, 109057, 18939, 75922, 75663, 89137, 119849, 29489, 10096, 32439, 114677, 2502, 121408, 42922, 82205, 23631, 68786, 127430, 14630, 44618, 109130, 68698, 96622, 13854, 33187, 128710, 30475, 105946, 85898, 6933]
[2024-12-02 18:22:30.777448] user = 84792 Cloud 83/568
[2024-12-02 18:22:30.802361] user = 84792 Local 83/568
[2024-12-02 18:22:31.107345] user = 84792 Local+ 83/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:22:33.993589] user = 84792 MPDA- 83/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5899728260869566
Training on augumented user 120023 0/50 current_auc = 0.5899728260869566
User 120023 AUC after training: 0.5895108695652174
User 120023 does not improve AUC. Reverting changes.
Training on augumented user 42380 1/50 current_auc = 0.5899728260869566
User 42380 AUC after training: 0.5899728260869566
User 42380 does not improve AUC. Reverting changes.
Training on augumented user 11910 2/50 current_auc = 0.5899728260869566
User 11910 AUC after training: 0.5903260869565217
User 11910 improves AUC. Keeping the model.
Training on augumented user 40181 3/50 current_auc = 0.5903260869565217
User 40181 AUC after training: 0.5907608695652175
User 40181 improves AUC. Keeping the model.
Training on augumented user 59080 4/50 current_auc = 0.5907608695652175
User 59080 AUC after training: 0.5902717391304347
User 59080 does not improve AUC. Reverting changes.
Training on augumented user 13508 5/50 current_auc = 0.5907608695652175
User 13508 AUC after training: 0.5910326086956521
User 13508 improves AUC. Keeping the model.
Training on augumented user 21324 6/50 current_auc = 0.5910326086956521
User 21324 AUC after training: 0.5916576086956522
User 21324 improves AUC. Keeping the model.
Training on augumented user 21033 7/50 current_auc = 0.5916576086956522
User 21033 AUC after training: 0.5917934782608695
User 21033 improves AUC. Keeping the model.
Training on augumented user 80867 8/50 current_auc = 0.5917934782608695
User 80867 AUC after training: 0.5921195652173914
User 80867 improves AUC. Keeping the model.
Training on augumented user 85866 9/50 current_auc = 0.5921195652173914
User 85866 AUC after training: 0.5927989130434783
User 85866 improves AUC. Keeping the model.
Training on augumented user 9783 10/50 current_auc = 0.5927989130434783
User 9783 AUC after training: 0.5916847826086957
User 9783 does not improve AUC. Reverting changes.
Training on augumented user 97951 11/50 current_auc = 0.5927989130434783
User 97951 AUC after training: 0.5933423913043478
User 97951 improves AUC. Keeping the model.
Training on augumented user 44511 12/50 current_auc = 0.5933423913043478
User 44511 AUC after training: 0.5904891304347826
User 44511 does not improve AUC. Reverting changes.
Training on augumented user 122471 13/50 current_auc = 0.5933423913043478
User 122471 AUC after training: 0.593233695652174
User 122471 does not improve AUC. Reverting changes.
Training on augumented user 18483 14/50 current_auc = 0.5933423913043478
User 18483 AUC after training: 0.5929347826086957
User 18483 does not improve AUC. Reverting changes.
Training on augumented user 96972 15/50 current_auc = 0.5933423913043478
User 96972 AUC after training: 0.593070652173913
User 96972 does not improve AUC. Reverting changes.
Training on augumented user 23778 16/50 current_auc = 0.5933423913043478
User 23778 AUC after training: 0.5923641304347825
User 23778 does not improve AUC. Reverting changes.
Training on augumented user 21472 17/50 current_auc = 0.5933423913043478
User 21472 AUC after training: 0.5934510869565217
User 21472 improves AUC. Keeping the model.
Training on augumented user 108245 18/50 current_auc = 0.5934510869565217
User 108245 AUC after training: 0.5928532608695652
User 108245 does not improve AUC. Reverting changes.
Training on augumented user 17832 19/50 current_auc = 0.5934510869565217
User 17832 AUC after training: 0.5930706521739131
User 17832 does not improve AUC. Reverting changes.
Training on augumented user 30622 20/50 current_auc = 0.5934510869565217
User 30622 AUC after training: 0.5929076086956522
User 30622 does not improve AUC. Reverting changes.
Training on augumented user 109057 21/50 current_auc = 0.5934510869565217
User 109057 AUC after training: 0.5925271739130434
User 109057 does not improve AUC. Reverting changes.
Training on augumented user 18939 22/50 current_auc = 0.5934510869565217
User 18939 AUC after training: 0.5933967391304348
User 18939 does not improve AUC. Reverting changes.
Training on augumented user 75922 23/50 current_auc = 0.5934510869565217
User 75922 AUC after training: 0.5932880434782608
User 75922 does not improve AUC. Reverting changes.
Training on augumented user 75663 24/50 current_auc = 0.5934510869565217
User 75663 AUC after training: 0.5934239130434783
User 75663 does not improve AUC. Reverting changes.
Training on augumented user 89137 25/50 current_auc = 0.5934510869565217
User 89137 AUC after training: 0.5914673913043478
User 89137 does not improve AUC. Reverting changes.
Training on augumented user 119849 26/50 current_auc = 0.5934510869565217
User 119849 AUC after training: 0.5923369565217391
User 119849 does not improve AUC. Reverting changes.
Training on augumented user 29489 27/50 current_auc = 0.5934510869565217
User 29489 AUC after training: 0.5932065217391304
User 29489 does not improve AUC. Reverting changes.
Training on augumented user 10096 28/50 current_auc = 0.5934510869565217
User 10096 AUC after training: 0.5930434782608696
User 10096 does not improve AUC. Reverting changes.
Training on augumented user 32439 29/50 current_auc = 0.5934510869565217
User 32439 AUC after training: 0.5934782608695651
User 32439 improves AUC. Keeping the model.
Training on augumented user 114677 30/50 current_auc = 0.5934782608695651
User 114677 AUC after training: 0.593695652173913
User 114677 improves AUC. Keeping the model.
Training on augumented user 2502 31/50 current_auc = 0.593695652173913
User 2502 AUC after training: 0.5928260869565217
User 2502 does not improve AUC. Reverting changes.
Training on augumented user 121408 32/50 current_auc = 0.593695652173913
User 121408 AUC after training: 0.5932608695652174
User 121408 does not improve AUC. Reverting changes.
Training on augumented user 42922 33/50 current_auc = 0.593695652173913
User 42922 AUC after training: 0.5932880434782609
User 42922 does not improve AUC. Reverting changes.
Training on augumented user 82205 34/50 current_auc = 0.593695652173913
User 82205 AUC after training: 0.5934239130434783
User 82205 does not improve AUC. Reverting changes.
Training on augumented user 23631 35/50 current_auc = 0.593695652173913
User 23631 AUC after training: 0.5932336956521739
User 23631 does not improve AUC. Reverting changes.
Training on augumented user 68786 36/50 current_auc = 0.593695652173913
User 68786 AUC after training: 0.5936413043478261
User 68786 does not improve AUC. Reverting changes.
Training on augumented user 127430 37/50 current_auc = 0.593695652173913
User 127430 AUC after training: 0.5934510869565217
User 127430 does not improve AUC. Reverting changes.
Training on augumented user 14630 38/50 current_auc = 0.593695652173913
User 14630 AUC after training: 0.5933967391304347
User 14630 does not improve AUC. Reverting changes.
Training on augumented user 44618 39/50 current_auc = 0.593695652173913
User 44618 AUC after training: 0.593179347826087
User 44618 does not improve AUC. Reverting changes.
Training on augumented user 109130 40/50 current_auc = 0.593695652173913
User 109130 AUC after training: 0.5929619565217391
User 109130 does not improve AUC. Reverting changes.
Training on augumented user 68698 41/50 current_auc = 0.593695652173913
User 68698 AUC after training: 0.5929619565217391
User 68698 does not improve AUC. Reverting changes.
Training on augumented user 96622 42/50 current_auc = 0.593695652173913
User 96622 AUC after training: 0.5924728260869565
User 96622 does not improve AUC. Reverting changes.
Training on augumented user 13854 43/50 current_auc = 0.593695652173913
User 13854 AUC after training: 0.5933152173913043
User 13854 does not improve AUC. Reverting changes.
Training on augumented user 33187 44/50 current_auc = 0.593695652173913
User 33187 AUC after training: 0.5929619565217391
User 33187 does not improve AUC. Reverting changes.
Training on augumented user 128710 45/50 current_auc = 0.593695652173913
User 128710 AUC after training: 0.5937771739130434
User 128710 improves AUC. Keeping the model.
Training on augumented user 30475 46/50 current_auc = 0.5937771739130434
User 30475 AUC after training: 0.593125
User 30475 does not improve AUC. Reverting changes.
Training on augumented user 105946 47/50 current_auc = 0.5937771739130434
User 105946 AUC after training: 0.5930434782608696
User 105946 does not improve AUC. Reverting changes.
Training on augumented user 85898 48/50 current_auc = 0.5937771739130434
User 85898 AUC after training: 0.5935597826086957
User 85898 does not improve AUC. Reverting changes.
Training on augumented user 6933 49/50 current_auc = 0.5937771739130434
User 6933 AUC after training: 0.5940217391304348
User 6933 improves AUC. Keeping the model.
[2024-12-02 18:23:03.274135] start test user 84809 84/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:23:04.003994] start test user 84809 84/568 recall augumented users by random, augumented_users = [19396, 78727, 31346, 116768, 74206, 90867, 134209, 119598, 90561, 56674, 19449, 56560, 29777, 90780, 90245, 100260, 60644, 120711, 119218, 86842, 70278, 43499, 109183, 57126, 17949, 100758, 6185, 79580, 193, 68562, 7077, 113128, 80848, 24328, 89099, 88855, 36043, 30259, 112841, 9070, 84827, 49694, 257, 43940, 42778, 120490, 73532, 131227, 27997, 47360]
[2024-12-02 18:23:04.018594] user = 84809 Cloud 84/568
[2024-12-02 18:23:04.032267] user = 84809 Local 84/568
[2024-12-02 18:23:04.058207] user = 84809 Local+ 84/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:23:06.677124] user = 84809 MPDA- 84/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.711484593837535
Training on augumented user 19396 0/50 current_auc = 0.711484593837535
User 19396 AUC after training: 0.7128851540616247
User 19396 improves AUC. Keeping the model.
Training on augumented user 78727 1/50 current_auc = 0.7128851540616247
User 78727 AUC after training: 0.7156862745098038
User 78727 improves AUC. Keeping the model.
Training on augumented user 31346 2/50 current_auc = 0.7156862745098038
User 31346 AUC after training: 0.7128851540616247
User 31346 does not improve AUC. Reverting changes.
Training on augumented user 116768 3/50 current_auc = 0.7156862745098038
User 116768 AUC after training: 0.7114845938375349
User 116768 does not improve AUC. Reverting changes.
Training on augumented user 74206 4/50 current_auc = 0.7156862745098038
User 74206 AUC after training: 0.7156862745098038
User 74206 does not improve AUC. Reverting changes.
Training on augumented user 90867 5/50 current_auc = 0.7156862745098038
User 90867 AUC after training: 0.7128851540616246
User 90867 does not improve AUC. Reverting changes.
Training on augumented user 134209 6/50 current_auc = 0.7156862745098038
User 134209 AUC after training: 0.7100840336134453
User 134209 does not improve AUC. Reverting changes.
Training on augumented user 119598 7/50 current_auc = 0.7156862745098038
User 119598 AUC after training: 0.7156862745098038
User 119598 does not improve AUC. Reverting changes.
Training on augumented user 90561 8/50 current_auc = 0.7156862745098038
User 90561 AUC after training: 0.7128851540616247
User 90561 does not improve AUC. Reverting changes.
Training on augumented user 56674 9/50 current_auc = 0.7156862745098038
User 56674 AUC after training: 0.7128851540616246
User 56674 does not improve AUC. Reverting changes.
Training on augumented user 19449 10/50 current_auc = 0.7156862745098038
User 19449 AUC after training: 0.7142857142857142
User 19449 does not improve AUC. Reverting changes.
Training on augumented user 56560 11/50 current_auc = 0.7156862745098038
User 56560 AUC after training: 0.7128851540616246
User 56560 does not improve AUC. Reverting changes.
Training on augumented user 29777 12/50 current_auc = 0.7156862745098038
User 29777 AUC after training: 0.7114845938375349
User 29777 does not improve AUC. Reverting changes.
Training on augumented user 90780 13/50 current_auc = 0.7156862745098038
User 90780 AUC after training: 0.7128851540616246
User 90780 does not improve AUC. Reverting changes.
Training on augumented user 90245 14/50 current_auc = 0.7156862745098038
User 90245 AUC after training: 0.7086834733893557
User 90245 does not improve AUC. Reverting changes.
Training on augumented user 100260 15/50 current_auc = 0.7156862745098038
User 100260 AUC after training: 0.7128851540616246
User 100260 does not improve AUC. Reverting changes.
Training on augumented user 60644 16/50 current_auc = 0.7156862745098038
User 60644 AUC after training: 0.7128851540616246
User 60644 does not improve AUC. Reverting changes.
Training on augumented user 120711 17/50 current_auc = 0.7156862745098038
User 120711 AUC after training: 0.7142857142857143
User 120711 does not improve AUC. Reverting changes.
Training on augumented user 119218 18/50 current_auc = 0.7156862745098038
User 119218 AUC after training: 0.7142857142857143
User 119218 does not improve AUC. Reverting changes.
Training on augumented user 86842 19/50 current_auc = 0.7156862745098038
User 86842 AUC after training: 0.7114845938375349
User 86842 does not improve AUC. Reverting changes.
Training on augumented user 70278 20/50 current_auc = 0.7156862745098038
User 70278 AUC after training: 0.7142857142857142
User 70278 does not improve AUC. Reverting changes.
Training on augumented user 43499 21/50 current_auc = 0.7156862745098038
User 43499 AUC after training: 0.7156862745098039
User 43499 improves AUC. Keeping the model.
Training on augumented user 109183 22/50 current_auc = 0.7156862745098039
User 109183 AUC after training: 0.711484593837535
User 109183 does not improve AUC. Reverting changes.
Training on augumented user 57126 23/50 current_auc = 0.7156862745098039
User 57126 AUC after training: 0.7128851540616247
User 57126 does not improve AUC. Reverting changes.
Training on augumented user 17949 24/50 current_auc = 0.7156862745098039
User 17949 AUC after training: 0.7142857142857143
User 17949 does not improve AUC. Reverting changes.
Training on augumented user 100758 25/50 current_auc = 0.7156862745098039
User 100758 AUC after training: 0.7142857142857142
User 100758 does not improve AUC. Reverting changes.
Training on augumented user 6185 26/50 current_auc = 0.7156862745098039
User 6185 AUC after training: 0.7142857142857143
User 6185 does not improve AUC. Reverting changes.
Training on augumented user 79580 27/50 current_auc = 0.7156862745098039
User 79580 AUC after training: 0.7100840336134454
User 79580 does not improve AUC. Reverting changes.
Training on augumented user 193 28/50 current_auc = 0.7156862745098039
User 193 AUC after training: 0.7142857142857143
User 193 does not improve AUC. Reverting changes.
Training on augumented user 68562 29/50 current_auc = 0.7156862745098039
User 68562 AUC after training: 0.7114845938375349
User 68562 does not improve AUC. Reverting changes.
Training on augumented user 7077 30/50 current_auc = 0.7156862745098039
User 7077 AUC after training: 0.7051820728291317
User 7077 does not improve AUC. Reverting changes.
Training on augumented user 113128 31/50 current_auc = 0.7156862745098039
User 113128 AUC after training: 0.711484593837535
User 113128 does not improve AUC. Reverting changes.
Training on augumented user 80848 32/50 current_auc = 0.7156862745098039
User 80848 AUC after training: 0.711484593837535
User 80848 does not improve AUC. Reverting changes.
Training on augumented user 24328 33/50 current_auc = 0.7156862745098039
User 24328 AUC after training: 0.7142857142857143
User 24328 does not improve AUC. Reverting changes.
Training on augumented user 89099 34/50 current_auc = 0.7156862745098039
User 89099 AUC after training: 0.7128851540616246
User 89099 does not improve AUC. Reverting changes.
Training on augumented user 88855 35/50 current_auc = 0.7156862745098039
User 88855 AUC after training: 0.711484593837535
User 88855 does not improve AUC. Reverting changes.
Training on augumented user 36043 36/50 current_auc = 0.7156862745098039
User 36043 AUC after training: 0.7114845938375349
User 36043 does not improve AUC. Reverting changes.
Training on augumented user 30259 37/50 current_auc = 0.7156862745098039
User 30259 AUC after training: 0.7156862745098039
User 30259 does not improve AUC. Reverting changes.
Training on augumented user 112841 38/50 current_auc = 0.7156862745098039
User 112841 AUC after training: 0.7142857142857143
User 112841 does not improve AUC. Reverting changes.
Training on augumented user 9070 39/50 current_auc = 0.7156862745098039
User 9070 AUC after training: 0.7142857142857142
User 9070 does not improve AUC. Reverting changes.
Training on augumented user 84827 40/50 current_auc = 0.7156862745098039
User 84827 AUC after training: 0.7128851540616246
User 84827 does not improve AUC. Reverting changes.
Training on augumented user 49694 41/50 current_auc = 0.7156862745098039
User 49694 AUC after training: 0.7156862745098039
User 49694 does not improve AUC. Reverting changes.
Training on augumented user 257 42/50 current_auc = 0.7156862745098039
User 257 AUC after training: 0.7170868347338936
User 257 improves AUC. Keeping the model.
Training on augumented user 43940 43/50 current_auc = 0.7170868347338936
User 43940 AUC after training: 0.7142857142857142
User 43940 does not improve AUC. Reverting changes.
Training on augumented user 42778 44/50 current_auc = 0.7170868347338936
User 42778 AUC after training: 0.7142857142857142
User 42778 does not improve AUC. Reverting changes.
Training on augumented user 120490 45/50 current_auc = 0.7170868347338936
User 120490 AUC after training: 0.7100840336134454
User 120490 does not improve AUC. Reverting changes.
Training on augumented user 73532 46/50 current_auc = 0.7170868347338936
User 73532 AUC after training: 0.7156862745098038
User 73532 does not improve AUC. Reverting changes.
Training on augumented user 131227 47/50 current_auc = 0.7170868347338936
User 131227 AUC after training: 0.7100840336134454
User 131227 does not improve AUC. Reverting changes.
Training on augumented user 27997 48/50 current_auc = 0.7170868347338936
User 27997 AUC after training: 0.7128851540616246
User 27997 does not improve AUC. Reverting changes.
Training on augumented user 47360 49/50 current_auc = 0.7170868347338936
User 47360 AUC after training: 0.7100840336134453
User 47360 does not improve AUC. Reverting changes.
[2024-12-02 18:23:33.744591] start test user 84826 85/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:23:34.160158] start test user 84826 85/568 recall augumented users by random, augumented_users = [100366, 94616, 19288, 50916, 61323, 23907, 48266, 127931, 86853, 112859, 16820, 58511, 26366, 7183, 120870, 43228, 16194, 127284, 28610, 133017, 7726, 55534, 133221, 132030, 3787, 81327, 46177, 9539, 131998, 60840, 106725, 94374, 85618, 57461, 113241, 132075, 49007, 83648, 56550, 131878, 121122, 32570, 21900, 135749, 21499, 16624, 17226, 60961, 120088, 75961]
[2024-12-02 18:23:34.175409] user = 84826 Cloud 85/568
[2024-12-02 18:23:34.201476] user = 84826 Local 85/568
[2024-12-02 18:23:34.242935] user = 84826 Local+ 85/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:23:35.990412] user = 84826 MPDA- 85/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7447721305326334
Training on augumented user 100366 0/50 current_auc = 0.7447721305326334
User 100366 AUC after training: 0.7425450112528131
User 100366 does not improve AUC. Reverting changes.
Training on augumented user 94616 1/50 current_auc = 0.7447721305326334
User 94616 AUC after training: 0.744959677419355
User 94616 improves AUC. Keeping the model.
Training on augumented user 19288 2/50 current_auc = 0.744959677419355
User 19288 AUC after training: 0.74442048012003
User 19288 does not improve AUC. Reverting changes.
Training on augumented user 50916 3/50 current_auc = 0.744959677419355
User 50916 AUC after training: 0.7449596774193549
User 50916 does not improve AUC. Reverting changes.
Training on augumented user 61323 4/50 current_auc = 0.744959677419355
User 61323 AUC after training: 0.7439984996249063
User 61323 does not improve AUC. Reverting changes.
Training on augumented user 23907 5/50 current_auc = 0.744959677419355
User 23907 AUC after training: 0.7452409977494375
User 23907 improves AUC. Keeping the model.
Training on augumented user 48266 6/50 current_auc = 0.7452409977494375
User 48266 AUC after training: 0.7451237809452365
User 48266 does not improve AUC. Reverting changes.
Training on augumented user 127931 7/50 current_auc = 0.7452409977494375
User 127931 AUC after training: 0.7409039759939985
User 127931 does not improve AUC. Reverting changes.
Training on augumented user 86853 8/50 current_auc = 0.7452409977494375
User 86853 AUC after training: 0.7446080270067517
User 86853 does not improve AUC. Reverting changes.
Training on augumented user 112859 9/50 current_auc = 0.7452409977494375
User 112859 AUC after training: 0.7448190172543135
User 112859 does not improve AUC. Reverting changes.
Training on augumented user 16820 10/50 current_auc = 0.7452409977494375
User 16820 AUC after training: 0.7448893473368342
User 16820 does not improve AUC. Reverting changes.
Training on augumented user 58511 11/50 current_auc = 0.7452409977494375
User 58511 AUC after training: 0.7454051012753188
User 58511 improves AUC. Keeping the model.
Training on augumented user 26366 12/50 current_auc = 0.7454051012753188
User 26366 AUC after training: 0.7453113278319581
User 26366 does not improve AUC. Reverting changes.
Training on augumented user 7183 13/50 current_auc = 0.7454051012753188
User 7183 AUC after training: 0.7443501500375094
User 7183 does not improve AUC. Reverting changes.
Training on augumented user 120870 14/50 current_auc = 0.7454051012753188
User 120870 AUC after training: 0.7453582145536385
User 120870 does not improve AUC. Reverting changes.
Training on augumented user 43228 15/50 current_auc = 0.7454051012753188
User 43228 AUC after training: 0.7450300075018754
User 43228 does not improve AUC. Reverting changes.
Training on augumented user 16194 16/50 current_auc = 0.7454051012753188
User 16194 AUC after training: 0.7437171792948237
User 16194 does not improve AUC. Reverting changes.
Training on augumented user 127284 17/50 current_auc = 0.7454051012753188
User 127284 AUC after training: 0.7449831207801951
User 127284 does not improve AUC. Reverting changes.
Training on augumented user 28610 18/50 current_auc = 0.7454051012753188
User 28610 AUC after training: 0.7451706676669168
User 28610 does not improve AUC. Reverting changes.
Training on augumented user 133017 19/50 current_auc = 0.7454051012753188
User 133017 AUC after training: 0.7446549137284321
User 133017 does not improve AUC. Reverting changes.
Training on augumented user 7726 20/50 current_auc = 0.7454051012753188
User 7726 AUC after training: 0.7451003375843961
User 7726 does not improve AUC. Reverting changes.
Training on augumented user 55534 21/50 current_auc = 0.7454051012753188
User 55534 AUC after training: 0.7452175543885972
User 55534 does not improve AUC. Reverting changes.
Training on augumented user 133221 22/50 current_auc = 0.7454051012753188
User 133221 AUC after training: 0.7450300075018754
User 133221 does not improve AUC. Reverting changes.
Training on augumented user 132030 23/50 current_auc = 0.7454051012753188
User 132030 AUC after training: 0.7454519879969993
User 132030 improves AUC. Keeping the model.
Training on augumented user 3787 24/50 current_auc = 0.7454519879969993
User 3787 AUC after training: 0.7448893473368343
User 3787 does not improve AUC. Reverting changes.
Training on augumented user 81327 25/50 current_auc = 0.7454519879969993
User 81327 AUC after training: 0.7454519879969992
User 81327 does not improve AUC. Reverting changes.
Training on augumented user 46177 26/50 current_auc = 0.7454519879969993
User 46177 AUC after training: 0.7455926481620406
User 46177 improves AUC. Keeping the model.
Training on augumented user 9539 27/50 current_auc = 0.7455926481620406
User 9539 AUC after training: 0.7454285446361592
User 9539 does not improve AUC. Reverting changes.
Training on augumented user 131998 28/50 current_auc = 0.7455926481620406
User 131998 AUC after training: 0.745756751687922
User 131998 improves AUC. Keeping the model.
Training on augumented user 60840 29/50 current_auc = 0.745756751687922
User 60840 AUC after training: 0.745639534883721
User 60840 does not improve AUC. Reverting changes.
Training on augumented user 106725 30/50 current_auc = 0.745756751687922
User 106725 AUC after training: 0.7449362340585147
User 106725 does not improve AUC. Reverting changes.
Training on augumented user 94374 31/50 current_auc = 0.745756751687922
User 94374 AUC after training: 0.7461084021005252
User 94374 improves AUC. Keeping the model.
Training on augumented user 85618 32/50 current_auc = 0.7461084021005252
User 85618 AUC after training: 0.7454519879969993
User 85618 does not improve AUC. Reverting changes.
Training on augumented user 57461 33/50 current_auc = 0.7461084021005252
User 57461 AUC after training: 0.7461552888222055
User 57461 improves AUC. Keeping the model.
Training on augumented user 113241 34/50 current_auc = 0.7461552888222055
User 113241 AUC after training: 0.7459208552138035
User 113241 does not improve AUC. Reverting changes.
Training on augumented user 132075 35/50 current_auc = 0.7461552888222055
User 132075 AUC after training: 0.7445611402850713
User 132075 does not improve AUC. Reverting changes.
Training on augumented user 49007 36/50 current_auc = 0.7461552888222055
User 49007 AUC after training: 0.7458739684921231
User 49007 does not improve AUC. Reverting changes.
Training on augumented user 83648 37/50 current_auc = 0.7461552888222055
User 83648 AUC after training: 0.7447486871717931
User 83648 does not improve AUC. Reverting changes.
Training on augumented user 56550 38/50 current_auc = 0.7461552888222055
User 56550 AUC after training: 0.7460615153788447
User 56550 does not improve AUC. Reverting changes.
Training on augumented user 131878 39/50 current_auc = 0.7461552888222055
User 131878 AUC after training: 0.745733308327082
User 131878 does not improve AUC. Reverting changes.
Training on augumented user 121122 40/50 current_auc = 0.7461552888222055
User 121122 AUC after training: 0.7462021755438859
User 121122 improves AUC. Keeping the model.
Training on augumented user 32570 41/50 current_auc = 0.7462021755438859
User 32570 AUC after training: 0.7458270817704427
User 32570 does not improve AUC. Reverting changes.
Training on augumented user 21900 42/50 current_auc = 0.7462021755438859
User 21900 AUC after training: 0.745311327831958
User 21900 does not improve AUC. Reverting changes.
Training on augumented user 135749 43/50 current_auc = 0.7462021755438859
User 135749 AUC after training: 0.7464834958739686
User 135749 improves AUC. Keeping the model.
Training on augumented user 21499 44/50 current_auc = 0.7464834958739686
User 21499 AUC after training: 0.7455457614403601
User 21499 does not improve AUC. Reverting changes.
Training on augumented user 16624 45/50 current_auc = 0.7464834958739686
User 16624 AUC after training: 0.7458739684921231
User 16624 does not improve AUC. Reverting changes.
Training on augumented user 17226 46/50 current_auc = 0.7464834958739686
User 17226 AUC after training: 0.7471399099774944
User 17226 improves AUC. Keeping the model.
Training on augumented user 60961 47/50 current_auc = 0.7471399099774944
User 60961 AUC after training: 0.7473274568642161
User 60961 improves AUC. Keeping the model.
Training on augumented user 120088 48/50 current_auc = 0.7473274568642161
User 120088 AUC after training: 0.7464366091522882
User 120088 does not improve AUC. Reverting changes.
Training on augumented user 75961 49/50 current_auc = 0.7473274568642161
User 75961 AUC after training: 0.7459911852963241
User 75961 does not improve AUC. Reverting changes.
[2024-12-02 18:24:03.912309] start test user 84840 86/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:24:04.311198] start test user 84840 86/568 recall augumented users by random, augumented_users = [97673, 129749, 111491, 49110, 112642, 75845, 39274, 69425, 127603, 131998, 118609, 124051, 54312, 121952, 104168, 30477, 115879, 119426, 123037, 26745, 130813, 134052, 120755, 115389, 95379, 101190, 12614, 104263, 91607, 78080, 112627, 95913, 34294, 133322, 66006, 90925, 35815, 124670, 75751, 82637, 63036, 92688, 103242, 77659, 19508, 9774, 112055, 103533, 20149, 30188]
[2024-12-02 18:24:04.325911] user = 84840 Cloud 86/568
[2024-12-02 18:24:04.336728] user = 84840 Local 86/568
[2024-12-02 18:24:04.357085] user = 84840 Local+ 86/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:24:06.079633] user = 84840 MPDA- 86/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6196969696969697
Training on augumented user 97673 0/50 current_auc = 0.6196969696969697
User 97673 AUC after training: 0.6196969696969697
User 97673 does not improve AUC. Reverting changes.
Training on augumented user 129749 1/50 current_auc = 0.6196969696969697
User 129749 AUC after training: 0.6181818181818182
User 129749 does not improve AUC. Reverting changes.
Training on augumented user 111491 2/50 current_auc = 0.6196969696969697
User 111491 AUC after training: 0.6181818181818182
User 111491 does not improve AUC. Reverting changes.
Training on augumented user 49110 3/50 current_auc = 0.6196969696969697
User 49110 AUC after training: 0.6212121212121213
User 49110 improves AUC. Keeping the model.
Training on augumented user 112642 4/50 current_auc = 0.6212121212121213
User 112642 AUC after training: 0.6212121212121213
User 112642 does not improve AUC. Reverting changes.
Training on augumented user 75845 5/50 current_auc = 0.6212121212121213
User 75845 AUC after training: 0.6181818181818182
User 75845 does not improve AUC. Reverting changes.
Training on augumented user 39274 6/50 current_auc = 0.6212121212121213
User 39274 AUC after training: 0.6212121212121212
User 39274 does not improve AUC. Reverting changes.
Training on augumented user 69425 7/50 current_auc = 0.6212121212121213
User 69425 AUC after training: 0.6196969696969697
User 69425 does not improve AUC. Reverting changes.
Training on augumented user 127603 8/50 current_auc = 0.6212121212121213
User 127603 AUC after training: 0.6212121212121213
User 127603 does not improve AUC. Reverting changes.
Training on augumented user 131998 9/50 current_auc = 0.6212121212121213
User 131998 AUC after training: 0.6212121212121213
User 131998 does not improve AUC. Reverting changes.
Training on augumented user 118609 10/50 current_auc = 0.6212121212121213
User 118609 AUC after training: 0.6212121212121213
User 118609 does not improve AUC. Reverting changes.
Training on augumented user 124051 11/50 current_auc = 0.6212121212121213
User 124051 AUC after training: 0.6181818181818182
User 124051 does not improve AUC. Reverting changes.
Training on augumented user 54312 12/50 current_auc = 0.6212121212121213
User 54312 AUC after training: 0.6212121212121213
User 54312 does not improve AUC. Reverting changes.
Training on augumented user 121952 13/50 current_auc = 0.6212121212121213
User 121952 AUC after training: 0.6196969696969696
User 121952 does not improve AUC. Reverting changes.
Training on augumented user 104168 14/50 current_auc = 0.6212121212121213
User 104168 AUC after training: 0.6181818181818182
User 104168 does not improve AUC. Reverting changes.
Training on augumented user 30477 15/50 current_auc = 0.6212121212121213
User 30477 AUC after training: 0.6196969696969697
User 30477 does not improve AUC. Reverting changes.
Training on augumented user 115879 16/50 current_auc = 0.6212121212121213
User 115879 AUC after training: 0.6181818181818182
User 115879 does not improve AUC. Reverting changes.
Training on augumented user 119426 17/50 current_auc = 0.6212121212121213
User 119426 AUC after training: 0.6181818181818182
User 119426 does not improve AUC. Reverting changes.
Training on augumented user 123037 18/50 current_auc = 0.6212121212121213
User 123037 AUC after training: 0.6196969696969696
User 123037 does not improve AUC. Reverting changes.
Training on augumented user 26745 19/50 current_auc = 0.6212121212121213
User 26745 AUC after training: 0.6196969696969697
User 26745 does not improve AUC. Reverting changes.
Training on augumented user 130813 20/50 current_auc = 0.6212121212121213
User 130813 AUC after training: 0.6212121212121213
User 130813 does not improve AUC. Reverting changes.
Training on augumented user 134052 21/50 current_auc = 0.6212121212121213
User 134052 AUC after training: 0.6196969696969697
User 134052 does not improve AUC. Reverting changes.
Training on augumented user 120755 22/50 current_auc = 0.6212121212121213
User 120755 AUC after training: 0.6181818181818182
User 120755 does not improve AUC. Reverting changes.
Training on augumented user 115389 23/50 current_auc = 0.6212121212121213
User 115389 AUC after training: 0.6196969696969697
User 115389 does not improve AUC. Reverting changes.
Training on augumented user 95379 24/50 current_auc = 0.6212121212121213
User 95379 AUC after training: 0.6212121212121213
User 95379 does not improve AUC. Reverting changes.
Training on augumented user 101190 25/50 current_auc = 0.6212121212121213
User 101190 AUC after training: 0.6196969696969697
User 101190 does not improve AUC. Reverting changes.
Training on augumented user 12614 26/50 current_auc = 0.6212121212121213
User 12614 AUC after training: 0.6181818181818182
User 12614 does not improve AUC. Reverting changes.
Training on augumented user 104263 27/50 current_auc = 0.6212121212121213
User 104263 AUC after training: 0.6196969696969697
User 104263 does not improve AUC. Reverting changes.
Training on augumented user 91607 28/50 current_auc = 0.6212121212121213
User 91607 AUC after training: 0.6196969696969697
User 91607 does not improve AUC. Reverting changes.
Training on augumented user 78080 29/50 current_auc = 0.6212121212121213
User 78080 AUC after training: 0.6196969696969697
User 78080 does not improve AUC. Reverting changes.
Training on augumented user 112627 30/50 current_auc = 0.6212121212121213
User 112627 AUC after training: 0.6181818181818182
User 112627 does not improve AUC. Reverting changes.
Training on augumented user 95913 31/50 current_auc = 0.6212121212121213
User 95913 AUC after training: 0.6196969696969697
User 95913 does not improve AUC. Reverting changes.
Training on augumented user 34294 32/50 current_auc = 0.6212121212121213
User 34294 AUC after training: 0.6212121212121213
User 34294 does not improve AUC. Reverting changes.
Training on augumented user 133322 33/50 current_auc = 0.6212121212121213
User 133322 AUC after training: 0.6196969696969697
User 133322 does not improve AUC. Reverting changes.
Training on augumented user 66006 34/50 current_auc = 0.6212121212121213
User 66006 AUC after training: 0.6196969696969697
User 66006 does not improve AUC. Reverting changes.
Training on augumented user 90925 35/50 current_auc = 0.6212121212121213
User 90925 AUC after training: 0.6212121212121213
User 90925 does not improve AUC. Reverting changes.
Training on augumented user 35815 36/50 current_auc = 0.6212121212121213
User 35815 AUC after training: 0.6212121212121213
User 35815 does not improve AUC. Reverting changes.
Training on augumented user 124670 37/50 current_auc = 0.6212121212121213
User 124670 AUC after training: 0.6196969696969697
User 124670 does not improve AUC. Reverting changes.
Training on augumented user 75751 38/50 current_auc = 0.6212121212121213
User 75751 AUC after training: 0.6212121212121213
User 75751 does not improve AUC. Reverting changes.
Training on augumented user 82637 39/50 current_auc = 0.6212121212121213
User 82637 AUC after training: 0.6181818181818182
User 82637 does not improve AUC. Reverting changes.
Training on augumented user 63036 40/50 current_auc = 0.6212121212121213
User 63036 AUC after training: 0.6212121212121213
User 63036 does not improve AUC. Reverting changes.
Training on augumented user 92688 41/50 current_auc = 0.6212121212121213
User 92688 AUC after training: 0.6196969696969697
User 92688 does not improve AUC. Reverting changes.
Training on augumented user 103242 42/50 current_auc = 0.6212121212121213
User 103242 AUC after training: 0.6212121212121213
User 103242 does not improve AUC. Reverting changes.
Training on augumented user 77659 43/50 current_auc = 0.6212121212121213
User 77659 AUC after training: 0.6212121212121213
User 77659 does not improve AUC. Reverting changes.
Training on augumented user 19508 44/50 current_auc = 0.6212121212121213
User 19508 AUC after training: 0.6181818181818182
User 19508 does not improve AUC. Reverting changes.
Training on augumented user 9774 45/50 current_auc = 0.6212121212121213
User 9774 AUC after training: 0.6196969696969697
User 9774 does not improve AUC. Reverting changes.
Training on augumented user 112055 46/50 current_auc = 0.6212121212121213
User 112055 AUC after training: 0.6212121212121213
User 112055 does not improve AUC. Reverting changes.
Training on augumented user 103533 47/50 current_auc = 0.6212121212121213
User 103533 AUC after training: 0.6212121212121213
User 103533 does not improve AUC. Reverting changes.
Training on augumented user 20149 48/50 current_auc = 0.6212121212121213
User 20149 AUC after training: 0.6166666666666667
User 20149 does not improve AUC. Reverting changes.
Training on augumented user 30188 49/50 current_auc = 0.6212121212121213
User 30188 AUC after training: 0.6196969696969697
User 30188 does not improve AUC. Reverting changes.
[2024-12-02 18:24:38.159865] start test user 84849 87/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:24:38.925294] start test user 84849 87/568 recall augumented users by random, augumented_users = [95736, 12405, 59555, 18418, 58193, 59332, 114775, 52917, 124184, 117053, 28246, 132520, 55359, 52066, 39181, 31885, 30937, 75968, 29220, 36466, 12403, 32153, 36467, 132332, 24463, 96410, 53542, 59325, 111539, 89353, 53164, 134446, 122597, 64368, 123824, 57497, 134033, 60926, 73472, 42856, 129237, 127626, 34414, 61115, 109658, 3140, 115384, 20941, 23375, 116674]
[2024-12-02 18:24:38.953547] user = 84849 Cloud 87/568
[2024-12-02 18:24:38.998432] user = 84849 Local 87/568
[2024-12-02 18:24:39.292867] user = 84849 Local+ 87/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:24:41.741327] user = 84849 MPDA- 87/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5549413992527765
Training on augumented user 95736 0/50 current_auc = 0.5549413992527765
User 95736 AUC after training: 0.5549797840217001
User 95736 improves AUC. Keeping the model.
Training on augumented user 12405 1/50 current_auc = 0.5549797840217001
User 12405 AUC after training: 0.5558882235528942
User 12405 improves AUC. Keeping the model.
Training on augumented user 59555 2/50 current_auc = 0.5558882235528942
User 59555 AUC after training: 0.5562720712421312
User 59555 improves AUC. Keeping the model.
Training on augumented user 18418 3/50 current_auc = 0.5562720712421312
User 18418 AUC after training: 0.5565919443164952
User 18418 improves AUC. Keeping the model.
Training on augumented user 58193 4/50 current_auc = 0.5565919443164952
User 58193 AUC after training: 0.5566687138543425
User 58193 improves AUC. Keeping the model.
Training on augumented user 59332 5/50 current_auc = 0.5566687138543425
User 59332 AUC after training: 0.5554787860177082
User 59332 does not improve AUC. Reverting changes.
Training on augumented user 114775 6/50 current_auc = 0.5566687138543425
User 114775 AUC after training: 0.556361635702953
User 114775 does not improve AUC. Reverting changes.
Training on augumented user 52917 7/50 current_auc = 0.5566687138543425
User 52917 AUC after training: 0.5562400839346947
User 52917 does not improve AUC. Reverting changes.
Training on augumented user 124184 8/50 current_auc = 0.5566687138543425
User 124184 AUC after training: 0.5553572342494497
User 124184 does not improve AUC. Reverting changes.
Training on augumented user 117053 9/50 current_auc = 0.5566687138543425
User 117053 AUC after training: 0.5566687138543427
User 117053 improves AUC. Keeping the model.
Training on augumented user 28246 10/50 current_auc = 0.5566687138543427
User 28246 AUC after training: 0.5564575976252623
User 28246 does not improve AUC. Reverting changes.
Training on augumented user 132520 11/50 current_auc = 0.5566687138543427
User 132520 AUC after training: 0.5568990224678847
User 132520 improves AUC. Keeping the model.
Training on augumented user 55359 12/50 current_auc = 0.5568990224678847
User 55359 AUC after training: 0.5566431240083936
User 55359 does not improve AUC. Reverting changes.
Training on augumented user 52066 13/50 current_auc = 0.5568990224678847
User 52066 AUC after training: 0.5564703925482368
User 52066 does not improve AUC. Reverting changes.
Training on augumented user 39181 14/50 current_auc = 0.5568990224678847
User 39181 AUC after training: 0.5565279697016224
User 39181 does not improve AUC. Reverting changes.
Training on augumented user 31885 15/50 current_auc = 0.5568990224678847
User 31885 AUC after training: 0.5565919443164953
User 31885 does not improve AUC. Reverting changes.
Training on augumented user 30937 16/50 current_auc = 0.5568990224678847
User 30937 AUC after training: 0.556655918931368
User 30937 does not improve AUC. Reverting changes.
Training on augumented user 75968 17/50 current_auc = 0.5568990224678847
User 75968 AUC after training: 0.5565151747786479
User 75968 does not improve AUC. Reverting changes.
Training on augumented user 29220 18/50 current_auc = 0.5568990224678847
User 29220 AUC after training: 0.5571421260044015
User 29220 improves AUC. Keeping the model.
Training on augumented user 36466 19/50 current_auc = 0.5571421260044015
User 36466 AUC after training: 0.5562848661651058
User 36466 does not improve AUC. Reverting changes.
Training on augumented user 12403 20/50 current_auc = 0.5571421260044015
User 12403 AUC after training: 0.5568926250063975
User 12403 does not improve AUC. Reverting changes.
Training on augumented user 32153 21/50 current_auc = 0.5571421260044015
User 32153 AUC after training: 0.55674548339219
User 32153 does not improve AUC. Reverting changes.
Training on augumented user 36467 22/50 current_auc = 0.5571421260044015
User 36467 AUC after training: 0.5573020625415834
User 36467 improves AUC. Keeping the model.
Training on augumented user 132332 23/50 current_auc = 0.5573020625415834
User 132332 AUC after training: 0.5573276523875326
User 132332 improves AUC. Keeping the model.
Training on augumented user 24463 24/50 current_auc = 0.5573276523875326
User 24463 AUC after training: 0.557359639694969
User 24463 improves AUC. Keeping the model.
Training on augumented user 96410 25/50 current_auc = 0.557359639694969
User 96410 AUC after training: 0.5562784687036184
User 96410 does not improve AUC. Reverting changes.
Training on augumented user 53542 26/50 current_auc = 0.557359639694969
User 53542 AUC after training: 0.5571165361584524
User 53542 does not improve AUC. Reverting changes.
Training on augumented user 59325 27/50 current_auc = 0.557359639694969
User 59325 AUC after training: 0.556860637698961
User 59325 does not improve AUC. Reverting changes.
Training on augumented user 111539 28/50 current_auc = 0.557359639694969
User 111539 AUC after training: 0.5575515635395875
User 111539 improves AUC. Keeping the model.
Training on augumented user 89353 29/50 current_auc = 0.5575515635395875
User 89353 AUC after training: 0.5578074619990788
User 89353 improves AUC. Keeping the model.
Training on augumented user 53164 30/50 current_auc = 0.5578074619990788
User 53164 AUC after training: 0.5576347305389222
User 53164 does not improve AUC. Reverting changes.
Training on augumented user 134446 31/50 current_auc = 0.5578074619990788
User 134446 AUC after training: 0.5570333691591177
User 134446 does not improve AUC. Reverting changes.
Training on augumented user 122597 32/50 current_auc = 0.5578074619990788
User 122597 AUC after training: 0.5575515635395875
User 122597 does not improve AUC. Reverting changes.
Training on augumented user 64368 33/50 current_auc = 0.5578074619990788
User 64368 AUC after training: 0.5575323711551257
User 64368 does not improve AUC. Reverting changes.
Training on augumented user 123824 34/50 current_auc = 0.5578074619990788
User 123824 AUC after training: 0.5577946670761043
User 123824 does not improve AUC. Reverting changes.
Training on augumented user 57497 35/50 current_auc = 0.5578074619990788
User 57497 AUC after training: 0.5579546036132863
User 57497 improves AUC. Keeping the model.
Training on augumented user 134033 36/50 current_auc = 0.5579546036132863
User 134033 AUC after training: 0.5576987051537949
User 134033 does not improve AUC. Reverting changes.
Training on augumented user 60926 37/50 current_auc = 0.5579546036132863
User 60926 AUC after training: 0.5576155381544603
User 60926 does not improve AUC. Reverting changes.
Training on augumented user 73472 38/50 current_auc = 0.5579546036132863
User 73472 AUC after training: 0.5574300117713291
User 73472 does not improve AUC. Reverting changes.
Training on augumented user 42856 39/50 current_auc = 0.5579546036132863
User 42856 AUC after training: 0.5579673985362609
User 42856 improves AUC. Keeping the model.
Training on augumented user 129237 40/50 current_auc = 0.5579673985362609
User 129237 AUC after training: 0.5580249756896464
User 129237 improves AUC. Keeping the model.
Training on augumented user 127626 41/50 current_auc = 0.5580249756896464
User 127626 AUC after training: 0.5575259736936384
User 127626 does not improve AUC. Reverting changes.
Training on augumented user 34414 42/50 current_auc = 0.5580249756896464
User 34414 AUC after training: 0.5577306924612313
User 34414 does not improve AUC. Reverting changes.
Training on augumented user 61115 43/50 current_auc = 0.5580249756896464
User 61115 AUC after training: 0.5555939403244792
User 61115 does not improve AUC. Reverting changes.
Training on augumented user 109658 44/50 current_auc = 0.5580249756896464
User 109658 AUC after training: 0.557973795997748
User 109658 does not improve AUC. Reverting changes.
Training on augumented user 3140 45/50 current_auc = 0.5580249756896464
User 3140 AUC after training: 0.5579546036132863
User 3140 does not improve AUC. Reverting changes.
Training on augumented user 115384 46/50 current_auc = 0.5580249756896464
User 115384 AUC after training: 0.5574619990787655
User 115384 does not improve AUC. Reverting changes.
Training on augumented user 20941 47/50 current_auc = 0.5580249756896464
User 20941 AUC after training: 0.5579865909207227
User 20941 does not improve AUC. Reverting changes.
Training on augumented user 23375 48/50 current_auc = 0.5580249756896464
User 23375 AUC after training: 0.556201699165771
User 23375 does not improve AUC. Reverting changes.
Training on augumented user 116674 49/50 current_auc = 0.5580249756896464
User 116674 AUC after training: 0.5579226163058499
User 116674 does not improve AUC. Reverting changes.
[2024-12-02 18:25:12.034942] start test user 84852 88/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:25:12.488389] start test user 84852 88/568 recall augumented users by random, augumented_users = [138310, 67927, 69577, 26417, 4417, 135257, 597, 73190, 122029, 67994, 38520, 99398, 76259, 122215, 132088, 57412, 35513, 138359, 80390, 48315, 105825, 13925, 38253, 81916, 73279, 114170, 71505, 46248, 18797, 53844, 128615, 115338, 58657, 72147, 135816, 54244, 33420, 121336, 11902, 115353, 23153, 50552, 22269, 34279, 80119, 3116, 95840, 52338, 57027, 74987]
[2024-12-02 18:25:12.502828] user = 84852 Cloud 88/568
[2024-12-02 18:25:12.512432] user = 84852 Local 88/568
[2024-12-02 18:25:12.555504] user = 84852 Local+ 88/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:25:15.806631] user = 84852 MPDA- 88/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.875
Training on augumented user 138310 0/50 current_auc = 0.875
User 138310 AUC after training: 0.8125
User 138310 does not improve AUC. Reverting changes.
Training on augumented user 67927 1/50 current_auc = 0.875
User 67927 AUC after training: 0.875
User 67927 does not improve AUC. Reverting changes.
Training on augumented user 69577 2/50 current_auc = 0.875
User 69577 AUC after training: 0.9375
User 69577 improves AUC. Keeping the model.
Training on augumented user 26417 3/50 current_auc = 0.9375
User 26417 AUC after training: 0.875
User 26417 does not improve AUC. Reverting changes.
Training on augumented user 4417 4/50 current_auc = 0.9375
User 4417 AUC after training: 0.9375
User 4417 does not improve AUC. Reverting changes.
Training on augumented user 135257 5/50 current_auc = 0.9375
User 135257 AUC after training: 0.9375
User 135257 does not improve AUC. Reverting changes.
Training on augumented user 597 6/50 current_auc = 0.9375
User 597 AUC after training: 0.9375
User 597 does not improve AUC. Reverting changes.
Training on augumented user 73190 7/50 current_auc = 0.9375
User 73190 AUC after training: 0.9375
User 73190 does not improve AUC. Reverting changes.
Training on augumented user 122029 8/50 current_auc = 0.9375
User 122029 AUC after training: 0.875
User 122029 does not improve AUC. Reverting changes.
Training on augumented user 67994 9/50 current_auc = 0.9375
User 67994 AUC after training: 0.875
User 67994 does not improve AUC. Reverting changes.
Training on augumented user 38520 10/50 current_auc = 0.9375
User 38520 AUC after training: 0.9375
User 38520 does not improve AUC. Reverting changes.
Training on augumented user 99398 11/50 current_auc = 0.9375
User 99398 AUC after training: 0.9375
User 99398 does not improve AUC. Reverting changes.
Training on augumented user 76259 12/50 current_auc = 0.9375
User 76259 AUC after training: 0.875
User 76259 does not improve AUC. Reverting changes.
Training on augumented user 122215 13/50 current_auc = 0.9375
User 122215 AUC after training: 0.875
User 122215 does not improve AUC. Reverting changes.
Training on augumented user 132088 14/50 current_auc = 0.9375
User 132088 AUC after training: 0.9375
User 132088 does not improve AUC. Reverting changes.
Training on augumented user 57412 15/50 current_auc = 0.9375
User 57412 AUC after training: 0.9375
User 57412 does not improve AUC. Reverting changes.
Training on augumented user 35513 16/50 current_auc = 0.9375
User 35513 AUC after training: 0.875
User 35513 does not improve AUC. Reverting changes.
Training on augumented user 138359 17/50 current_auc = 0.9375
User 138359 AUC after training: 0.9375
User 138359 does not improve AUC. Reverting changes.
Training on augumented user 80390 18/50 current_auc = 0.9375
User 80390 AUC after training: 0.9375
User 80390 does not improve AUC. Reverting changes.
Training on augumented user 48315 19/50 current_auc = 0.9375
User 48315 AUC after training: 0.875
User 48315 does not improve AUC. Reverting changes.
Training on augumented user 105825 20/50 current_auc = 0.9375
User 105825 AUC after training: 0.875
User 105825 does not improve AUC. Reverting changes.
Training on augumented user 13925 21/50 current_auc = 0.9375
User 13925 AUC after training: 0.9375
User 13925 does not improve AUC. Reverting changes.
Training on augumented user 38253 22/50 current_auc = 0.9375
User 38253 AUC after training: 0.875
User 38253 does not improve AUC. Reverting changes.
Training on augumented user 81916 23/50 current_auc = 0.9375
User 81916 AUC after training: 0.9375
User 81916 does not improve AUC. Reverting changes.
Training on augumented user 73279 24/50 current_auc = 0.9375
User 73279 AUC after training: 0.9375
User 73279 does not improve AUC. Reverting changes.
Training on augumented user 114170 25/50 current_auc = 0.9375
User 114170 AUC after training: 0.875
User 114170 does not improve AUC. Reverting changes.
Training on augumented user 71505 26/50 current_auc = 0.9375
User 71505 AUC after training: 0.9375
User 71505 does not improve AUC. Reverting changes.
Training on augumented user 46248 27/50 current_auc = 0.9375
User 46248 AUC after training: 0.875
User 46248 does not improve AUC. Reverting changes.
Training on augumented user 18797 28/50 current_auc = 0.9375
User 18797 AUC after training: 0.875
User 18797 does not improve AUC. Reverting changes.
Training on augumented user 53844 29/50 current_auc = 0.9375
User 53844 AUC after training: 0.9375
User 53844 does not improve AUC. Reverting changes.
Training on augumented user 128615 30/50 current_auc = 0.9375
User 128615 AUC after training: 0.875
User 128615 does not improve AUC. Reverting changes.
Training on augumented user 115338 31/50 current_auc = 0.9375
User 115338 AUC after training: 0.875
User 115338 does not improve AUC. Reverting changes.
Training on augumented user 58657 32/50 current_auc = 0.9375
User 58657 AUC after training: 0.8125
User 58657 does not improve AUC. Reverting changes.
Training on augumented user 72147 33/50 current_auc = 0.9375
User 72147 AUC after training: 0.8125
User 72147 does not improve AUC. Reverting changes.
Training on augumented user 135816 34/50 current_auc = 0.9375
User 135816 AUC after training: 0.9375
User 135816 does not improve AUC. Reverting changes.
Training on augumented user 54244 35/50 current_auc = 0.9375
User 54244 AUC after training: 0.875
User 54244 does not improve AUC. Reverting changes.
Training on augumented user 33420 36/50 current_auc = 0.9375
User 33420 AUC after training: 0.8125
User 33420 does not improve AUC. Reverting changes.
Training on augumented user 121336 37/50 current_auc = 0.9375
User 121336 AUC after training: 0.9375
User 121336 does not improve AUC. Reverting changes.
Training on augumented user 11902 38/50 current_auc = 0.9375
User 11902 AUC after training: 0.875
User 11902 does not improve AUC. Reverting changes.
Training on augumented user 115353 39/50 current_auc = 0.9375
User 115353 AUC after training: 0.9375
User 115353 does not improve AUC. Reverting changes.
Training on augumented user 23153 40/50 current_auc = 0.9375
User 23153 AUC after training: 0.9375
User 23153 does not improve AUC. Reverting changes.
Training on augumented user 50552 41/50 current_auc = 0.9375
User 50552 AUC after training: 0.875
User 50552 does not improve AUC. Reverting changes.
Training on augumented user 22269 42/50 current_auc = 0.9375
User 22269 AUC after training: 0.875
User 22269 does not improve AUC. Reverting changes.
Training on augumented user 34279 43/50 current_auc = 0.9375
User 34279 AUC after training: 0.9375
User 34279 does not improve AUC. Reverting changes.
Training on augumented user 80119 44/50 current_auc = 0.9375
User 80119 AUC after training: 0.9375
User 80119 does not improve AUC. Reverting changes.
Training on augumented user 3116 45/50 current_auc = 0.9375
User 3116 AUC after training: 0.9375
User 3116 does not improve AUC. Reverting changes.
Training on augumented user 95840 46/50 current_auc = 0.9375
User 95840 AUC after training: 0.8125
User 95840 does not improve AUC. Reverting changes.
Training on augumented user 52338 47/50 current_auc = 0.9375
User 52338 AUC after training: 0.8125
User 52338 does not improve AUC. Reverting changes.
Training on augumented user 57027 48/50 current_auc = 0.9375
User 57027 AUC after training: 0.9375
User 57027 does not improve AUC. Reverting changes.
Training on augumented user 74987 49/50 current_auc = 0.9375
User 74987 AUC after training: 0.9375
User 74987 does not improve AUC. Reverting changes.
[2024-12-02 18:25:47.572484] start test user 84865 89/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:25:48.127132] start test user 84865 89/568 recall augumented users by random, augumented_users = [8919, 113391, 127977, 59222, 8698, 45845, 45031, 105868, 129414, 42114, 103492, 22230, 80023, 36650, 129735, 95486, 131087, 136090, 90670, 92236, 128655, 40622, 85645, 78640, 52434, 87721, 97085, 105521, 83836, 1329, 85574, 71803, 100035, 51033, 107057, 83732, 78291, 20766, 104566, 116543, 49112, 36966, 74214, 102641, 50038, 67808, 9051, 117475, 33255, 63806]
[2024-12-02 18:25:48.148320] user = 84865 Cloud 89/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:25:48.154801] user = 84865 Local 89/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:25:48.220065] user = 84865 Local+ 89/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:25:50.661987] user = 84865 MPDA- 89/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 8919 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8919 AUC after training: 0.5
User 8919 does not improve AUC. Reverting changes.
Training on augumented user 113391 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113391 AUC after training: 0.5
User 113391 does not improve AUC. Reverting changes.
Training on augumented user 127977 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127977 AUC after training: 0.5
User 127977 does not improve AUC. Reverting changes.
Training on augumented user 59222 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59222 AUC after training: 0.5
User 59222 does not improve AUC. Reverting changes.
Training on augumented user 8698 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8698 AUC after training: 0.5
User 8698 does not improve AUC. Reverting changes.
Training on augumented user 45845 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45845 AUC after training: 0.5
User 45845 does not improve AUC. Reverting changes.
Training on augumented user 45031 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45031 AUC after training: 0.5
User 45031 does not improve AUC. Reverting changes.
Training on augumented user 105868 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105868 AUC after training: 0.5
User 105868 does not improve AUC. Reverting changes.
Training on augumented user 129414 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129414 AUC after training: 0.5
User 129414 does not improve AUC. Reverting changes.
Training on augumented user 42114 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42114 AUC after training: 0.5
User 42114 does not improve AUC. Reverting changes.
Training on augumented user 103492 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103492 AUC after training: 0.5
User 103492 does not improve AUC. Reverting changes.
Training on augumented user 22230 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22230 AUC after training: 0.5
User 22230 does not improve AUC. Reverting changes.
Training on augumented user 80023 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80023 AUC after training: 0.5
User 80023 does not improve AUC. Reverting changes.
Training on augumented user 36650 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36650 AUC after training: 0.5
User 36650 does not improve AUC. Reverting changes.
Training on augumented user 129735 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129735 AUC after training: 0.5
User 129735 does not improve AUC. Reverting changes.
Training on augumented user 95486 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95486 AUC after training: 0.5
User 95486 does not improve AUC. Reverting changes.
Training on augumented user 131087 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131087 AUC after training: 0.5
User 131087 does not improve AUC. Reverting changes.
Training on augumented user 136090 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136090 AUC after training: 0.5
User 136090 does not improve AUC. Reverting changes.
Training on augumented user 90670 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90670 AUC after training: 0.5
User 90670 does not improve AUC. Reverting changes.
Training on augumented user 92236 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92236 AUC after training: 0.5
User 92236 does not improve AUC. Reverting changes.
Training on augumented user 128655 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128655 AUC after training: 0.5
User 128655 does not improve AUC. Reverting changes.
Training on augumented user 40622 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40622 AUC after training: 0.5
User 40622 does not improve AUC. Reverting changes.
Training on augumented user 85645 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85645 AUC after training: 0.5
User 85645 does not improve AUC. Reverting changes.
Training on augumented user 78640 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78640 AUC after training: 0.5
User 78640 does not improve AUC. Reverting changes.
Training on augumented user 52434 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52434 AUC after training: 0.5
User 52434 does not improve AUC. Reverting changes.
Training on augumented user 87721 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87721 AUC after training: 0.5
User 87721 does not improve AUC. Reverting changes.
Training on augumented user 97085 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97085 AUC after training: 0.5
User 97085 does not improve AUC. Reverting changes.
Training on augumented user 105521 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105521 AUC after training: 0.5
User 105521 does not improve AUC. Reverting changes.
Training on augumented user 83836 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83836 AUC after training: 0.5
User 83836 does not improve AUC. Reverting changes.
Training on augumented user 1329 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1329 AUC after training: 0.5
User 1329 does not improve AUC. Reverting changes.
Training on augumented user 85574 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85574 AUC after training: 0.5
User 85574 does not improve AUC. Reverting changes.
Training on augumented user 71803 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71803 AUC after training: 0.5
User 71803 does not improve AUC. Reverting changes.
Training on augumented user 100035 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100035 AUC after training: 0.5
User 100035 does not improve AUC. Reverting changes.
Training on augumented user 51033 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51033 AUC after training: 0.5
User 51033 does not improve AUC. Reverting changes.
Training on augumented user 107057 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107057 AUC after training: 0.5
User 107057 does not improve AUC. Reverting changes.
Training on augumented user 83732 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83732 AUC after training: 0.5
User 83732 does not improve AUC. Reverting changes.
Training on augumented user 78291 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78291 AUC after training: 0.5
User 78291 does not improve AUC. Reverting changes.
Training on augumented user 20766 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20766 AUC after training: 0.5
User 20766 does not improve AUC. Reverting changes.
Training on augumented user 104566 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104566 AUC after training: 0.5
User 104566 does not improve AUC. Reverting changes.
Training on augumented user 116543 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116543 AUC after training: 0.5
User 116543 does not improve AUC. Reverting changes.
Training on augumented user 49112 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49112 AUC after training: 0.5
User 49112 does not improve AUC. Reverting changes.
Training on augumented user 36966 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36966 AUC after training: 0.5
User 36966 does not improve AUC. Reverting changes.
Training on augumented user 74214 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74214 AUC after training: 0.5
User 74214 does not improve AUC. Reverting changes.
Training on augumented user 102641 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102641 AUC after training: 0.5
User 102641 does not improve AUC. Reverting changes.
Training on augumented user 50038 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50038 AUC after training: 0.5
User 50038 does not improve AUC. Reverting changes.
Training on augumented user 67808 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67808 AUC after training: 0.5
User 67808 does not improve AUC. Reverting changes.
Training on augumented user 9051 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9051 AUC after training: 0.5
User 9051 does not improve AUC. Reverting changes.
Training on augumented user 117475 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117475 AUC after training: 0.5
User 117475 does not improve AUC. Reverting changes.
Training on augumented user 33255 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33255 AUC after training: 0.5
User 33255 does not improve AUC. Reverting changes.
Training on augumented user 63806 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63806 AUC after training: 0.5
User 63806 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:26:20.245030] start test user 84872 90/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:26:20.676913] start test user 84872 90/568 recall augumented users by random, augumented_users = [92564, 79377, 94565, 112798, 102631, 129385, 110328, 52642, 75936, 11749, 38912, 23626, 93749, 50355, 4920, 2842, 94310, 105314, 57717, 122019, 72242, 77417, 93897, 53325, 40714, 16774, 75592, 95824, 47086, 132187, 110967, 33165, 124123, 127815, 95243, 59912, 44645, 40120, 105139, 126341, 92943, 90312, 31152, 35278, 126427, 112924, 80189, 52352, 114766, 62708]
[2024-12-02 18:26:20.692659] user = 84872 Cloud 90/568
[2024-12-02 18:26:20.714362] user = 84872 Local 90/568
[2024-12-02 18:26:20.769483] user = 84872 Local+ 90/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:26:23.163352] user = 84872 MPDA- 90/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5549523110785033
Training on augumented user 92564 0/50 current_auc = 0.5549523110785033
User 92564 AUC after training: 0.5546588407923697
User 92564 does not improve AUC. Reverting changes.
Training on augumented user 79377 1/50 current_auc = 0.5549523110785033
User 79377 AUC after training: 0.5558327219369039
User 79377 improves AUC. Keeping the model.
Training on augumented user 94565 2/50 current_auc = 0.5558327219369039
User 94565 AUC after training: 0.5562729273661041
User 94565 improves AUC. Keeping the model.
Training on augumented user 112798 3/50 current_auc = 0.5562729273661041
User 112798 AUC after training: 0.556419662509171
User 112798 improves AUC. Keeping the model.
Training on augumented user 102631 4/50 current_auc = 0.556419662509171
User 102631 AUC after training: 0.5568598679383713
User 102631 improves AUC. Keeping the model.
Training on augumented user 129385 5/50 current_auc = 0.5568598679383713
User 129385 AUC after training: 0.5567131327953044
User 129385 does not improve AUC. Reverting changes.
Training on augumented user 110328 6/50 current_auc = 0.5568598679383713
User 110328 AUC after training: 0.5565663976522377
User 110328 does not improve AUC. Reverting changes.
Training on augumented user 52642 7/50 current_auc = 0.5568598679383713
User 52642 AUC after training: 0.5570066030814379
User 52642 improves AUC. Keeping the model.
Training on augumented user 75936 8/50 current_auc = 0.5570066030814379
User 75936 AUC after training: 0.5568598679383712
User 75936 does not improve AUC. Reverting changes.
Training on augumented user 11749 9/50 current_auc = 0.5570066030814379
User 11749 AUC after training: 0.557006603081438
User 11749 improves AUC. Keeping the model.
Training on augumented user 38912 10/50 current_auc = 0.557006603081438
User 38912 AUC after training: 0.5574468085106383
User 38912 improves AUC. Keeping the model.
Training on augumented user 23626 11/50 current_auc = 0.5574468085106383
User 23626 AUC after training: 0.5575935436537051
User 23626 improves AUC. Keeping the model.
Training on augumented user 93749 12/50 current_auc = 0.5575935436537051
User 93749 AUC after training: 0.557006603081438
User 93749 does not improve AUC. Reverting changes.
Training on augumented user 50355 13/50 current_auc = 0.5575935436537051
User 50355 AUC after training: 0.5574468085106383
User 50355 does not improve AUC. Reverting changes.
Training on augumented user 4920 14/50 current_auc = 0.5575935436537051
User 4920 AUC after training: 0.5565663976522377
User 4920 does not improve AUC. Reverting changes.
Training on augumented user 2842 15/50 current_auc = 0.5575935436537051
User 2842 AUC after training: 0.5574468085106383
User 2842 does not improve AUC. Reverting changes.
Training on augumented user 94310 16/50 current_auc = 0.5575935436537051
User 94310 AUC after training: 0.5571533382245047
User 94310 does not improve AUC. Reverting changes.
Training on augumented user 105314 17/50 current_auc = 0.5575935436537051
User 105314 AUC after training: 0.5573000733675715
User 105314 does not improve AUC. Reverting changes.
Training on augumented user 57717 18/50 current_auc = 0.5575935436537051
User 57717 AUC after training: 0.5577402787967717
User 57717 improves AUC. Keeping the model.
Training on augumented user 122019 19/50 current_auc = 0.5577402787967717
User 122019 AUC after training: 0.5574468085106383
User 122019 does not improve AUC. Reverting changes.
Training on augumented user 72242 20/50 current_auc = 0.5577402787967717
User 72242 AUC after training: 0.5574468085106382
User 72242 does not improve AUC. Reverting changes.
Training on augumented user 77417 21/50 current_auc = 0.5577402787967717
User 77417 AUC after training: 0.5577402787967718
User 77417 improves AUC. Keeping the model.
Training on augumented user 93897 22/50 current_auc = 0.5577402787967718
User 93897 AUC after training: 0.5567131327953044
User 93897 does not improve AUC. Reverting changes.
Training on augumented user 53325 23/50 current_auc = 0.5577402787967718
User 53325 AUC after training: 0.557960381511372
User 53325 improves AUC. Keeping the model.
Training on augumented user 40714 24/50 current_auc = 0.557960381511372
User 40714 AUC after training: 0.5577402787967718
User 40714 does not improve AUC. Reverting changes.
Training on augumented user 16774 25/50 current_auc = 0.557960381511372
User 16774 AUC after training: 0.557960381511372
User 16774 does not improve AUC. Reverting changes.
Training on augumented user 75592 26/50 current_auc = 0.557960381511372
User 75592 AUC after training: 0.5575935436537051
User 75592 does not improve AUC. Reverting changes.
Training on augumented user 95824 27/50 current_auc = 0.557960381511372
User 95824 AUC after training: 0.5565663976522377
User 95824 does not improve AUC. Reverting changes.
Training on augumented user 47086 28/50 current_auc = 0.557960381511372
User 47086 AUC after training: 0.5569332355099046
User 47086 does not improve AUC. Reverting changes.
Training on augumented user 132187 29/50 current_auc = 0.557960381511372
User 132187 AUC after training: 0.5559794570799707
User 132187 does not improve AUC. Reverting changes.
Training on augumented user 110967 30/50 current_auc = 0.557960381511372
User 110967 AUC after training: 0.557006603081438
User 110967 does not improve AUC. Reverting changes.
Training on augumented user 33165 31/50 current_auc = 0.557960381511372
User 33165 AUC after training: 0.5576669112252385
User 33165 does not improve AUC. Reverting changes.
Training on augumented user 124123 32/50 current_auc = 0.557960381511372
User 124123 AUC after training: 0.5578136463683051
User 124123 does not improve AUC. Reverting changes.
Training on augumented user 127815 33/50 current_auc = 0.557960381511372
User 127815 AUC after training: 0.5573000733675715
User 127815 does not improve AUC. Reverting changes.
Training on augumented user 95243 34/50 current_auc = 0.557960381511372
User 95243 AUC after training: 0.557960381511372
User 95243 does not improve AUC. Reverting changes.
Training on augumented user 59912 35/50 current_auc = 0.557960381511372
User 59912 AUC after training: 0.5578136463683052
User 59912 does not improve AUC. Reverting changes.
Training on augumented user 44645 36/50 current_auc = 0.557960381511372
User 44645 AUC after training: 0.5573000733675715
User 44645 does not improve AUC. Reverting changes.
Training on augumented user 40120 37/50 current_auc = 0.557960381511372
User 40120 AUC after training: 0.5578136463683052
User 40120 does not improve AUC. Reverting changes.
Training on augumented user 105139 38/50 current_auc = 0.557960381511372
User 105139 AUC after training: 0.5578136463683052
User 105139 does not improve AUC. Reverting changes.
Training on augumented user 126341 39/50 current_auc = 0.557960381511372
User 126341 AUC after training: 0.5576669112252385
User 126341 does not improve AUC. Reverting changes.
Training on augumented user 92943 40/50 current_auc = 0.557960381511372
User 92943 AUC after training: 0.5573000733675715
User 92943 does not improve AUC. Reverting changes.
Training on augumented user 90312 41/50 current_auc = 0.557960381511372
User 90312 AUC after training: 0.5571533382245047
User 90312 does not improve AUC. Reverting changes.
Training on augumented user 31152 42/50 current_auc = 0.557960381511372
User 31152 AUC after training: 0.557960381511372
User 31152 does not improve AUC. Reverting changes.
Training on augumented user 35278 43/50 current_auc = 0.557960381511372
User 35278 AUC after training: 0.5576669112252384
User 35278 does not improve AUC. Reverting changes.
Training on augumented user 126427 44/50 current_auc = 0.557960381511372
User 126427 AUC after training: 0.5572267057960382
User 126427 does not improve AUC. Reverting changes.
Training on augumented user 112924 45/50 current_auc = 0.557960381511372
User 112924 AUC after training: 0.5568598679383713
User 112924 does not improve AUC. Reverting changes.
Training on augumented user 80189 46/50 current_auc = 0.557960381511372
User 80189 AUC after training: 0.5575935436537051
User 80189 does not improve AUC. Reverting changes.
Training on augumented user 52352 47/50 current_auc = 0.557960381511372
User 52352 AUC after training: 0.5575935436537051
User 52352 does not improve AUC. Reverting changes.
Training on augumented user 114766 48/50 current_auc = 0.557960381511372
User 114766 AUC after training: 0.5574468085106383
User 114766 does not improve AUC. Reverting changes.
Training on augumented user 62708 49/50 current_auc = 0.557960381511372
User 62708 AUC after training: 0.5581071166544387
User 62708 improves AUC. Keeping the model.
[2024-12-02 18:26:50.608526] start test user 84886 91/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:26:51.027639] start test user 84886 91/568 recall augumented users by random, augumented_users = [77732, 119620, 106110, 119558, 83927, 64473, 100440, 112273, 135596, 86805, 59277, 92440, 88848, 38092, 46769, 7045, 71287, 75007, 5910, 106243, 18537, 19772, 38961, 13745, 45154, 53068, 122163, 74369, 44647, 48368, 133407, 83063, 132623, 20371, 15840, 26786, 49855, 118273, 61932, 46035, 24315, 77083, 119694, 40837, 66098, 137000, 132934, 82383, 15899, 87856]
[2024-12-02 18:26:51.043330] user = 84886 Cloud 91/568
[2024-12-02 18:26:51.053528] user = 84886 Local 91/568
[2024-12-02 18:26:51.134717] user = 84886 Local+ 91/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:26:53.301369] user = 84886 MPDA- 91/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6845238095238095
Training on augumented user 77732 0/50 current_auc = 0.6845238095238095
User 77732 AUC after training: 0.6785714285714286
User 77732 does not improve AUC. Reverting changes.
Training on augumented user 119620 1/50 current_auc = 0.6845238095238095
User 119620 AUC after training: 0.6785714285714286
User 119620 does not improve AUC. Reverting changes.
Training on augumented user 106110 2/50 current_auc = 0.6845238095238095
User 106110 AUC after training: 0.6785714285714286
User 106110 does not improve AUC. Reverting changes.
Training on augumented user 119558 3/50 current_auc = 0.6845238095238095
User 119558 AUC after training: 0.6845238095238095
User 119558 does not improve AUC. Reverting changes.
Training on augumented user 83927 4/50 current_auc = 0.6845238095238095
User 83927 AUC after training: 0.6785714285714286
User 83927 does not improve AUC. Reverting changes.
Training on augumented user 64473 5/50 current_auc = 0.6845238095238095
User 64473 AUC after training: 0.6785714285714286
User 64473 does not improve AUC. Reverting changes.
Training on augumented user 100440 6/50 current_auc = 0.6845238095238095
User 100440 AUC after training: 0.6785714285714286
User 100440 does not improve AUC. Reverting changes.
Training on augumented user 112273 7/50 current_auc = 0.6845238095238095
User 112273 AUC after training: 0.6785714285714286
User 112273 does not improve AUC. Reverting changes.
Training on augumented user 135596 8/50 current_auc = 0.6845238095238095
User 135596 AUC after training: 0.6785714285714286
User 135596 does not improve AUC. Reverting changes.
Training on augumented user 86805 9/50 current_auc = 0.6845238095238095
User 86805 AUC after training: 0.6845238095238095
User 86805 does not improve AUC. Reverting changes.
Training on augumented user 59277 10/50 current_auc = 0.6845238095238095
User 59277 AUC after training: 0.6785714285714286
User 59277 does not improve AUC. Reverting changes.
Training on augumented user 92440 11/50 current_auc = 0.6845238095238095
User 92440 AUC after training: 0.6785714285714286
User 92440 does not improve AUC. Reverting changes.
Training on augumented user 88848 12/50 current_auc = 0.6845238095238095
User 88848 AUC after training: 0.6785714285714286
User 88848 does not improve AUC. Reverting changes.
Training on augumented user 38092 13/50 current_auc = 0.6845238095238095
User 38092 AUC after training: 0.6785714285714286
User 38092 does not improve AUC. Reverting changes.
Training on augumented user 46769 14/50 current_auc = 0.6845238095238095
User 46769 AUC after training: 0.6785714285714286
User 46769 does not improve AUC. Reverting changes.
Training on augumented user 7045 15/50 current_auc = 0.6845238095238095
User 7045 AUC after training: 0.6785714285714286
User 7045 does not improve AUC. Reverting changes.
Training on augumented user 71287 16/50 current_auc = 0.6845238095238095
User 71287 AUC after training: 0.6845238095238095
User 71287 does not improve AUC. Reverting changes.
Training on augumented user 75007 17/50 current_auc = 0.6845238095238095
User 75007 AUC after training: 0.6785714285714286
User 75007 does not improve AUC. Reverting changes.
Training on augumented user 5910 18/50 current_auc = 0.6845238095238095
User 5910 AUC after training: 0.6785714285714286
User 5910 does not improve AUC. Reverting changes.
Training on augumented user 106243 19/50 current_auc = 0.6845238095238095
User 106243 AUC after training: 0.6785714285714286
User 106243 does not improve AUC. Reverting changes.
Training on augumented user 18537 20/50 current_auc = 0.6845238095238095
User 18537 AUC after training: 0.6785714285714286
User 18537 does not improve AUC. Reverting changes.
Training on augumented user 19772 21/50 current_auc = 0.6845238095238095
User 19772 AUC after training: 0.6785714285714286
User 19772 does not improve AUC. Reverting changes.
Training on augumented user 38961 22/50 current_auc = 0.6845238095238095
User 38961 AUC after training: 0.6845238095238095
User 38961 does not improve AUC. Reverting changes.
Training on augumented user 13745 23/50 current_auc = 0.6845238095238095
User 13745 AUC after training: 0.6845238095238095
User 13745 does not improve AUC. Reverting changes.
Training on augumented user 45154 24/50 current_auc = 0.6845238095238095
User 45154 AUC after training: 0.6845238095238095
User 45154 does not improve AUC. Reverting changes.
Training on augumented user 53068 25/50 current_auc = 0.6845238095238095
User 53068 AUC after training: 0.6785714285714286
User 53068 does not improve AUC. Reverting changes.
Training on augumented user 122163 26/50 current_auc = 0.6845238095238095
User 122163 AUC after training: 0.6785714285714286
User 122163 does not improve AUC. Reverting changes.
Training on augumented user 74369 27/50 current_auc = 0.6845238095238095
User 74369 AUC after training: 0.6785714285714286
User 74369 does not improve AUC. Reverting changes.
Training on augumented user 44647 28/50 current_auc = 0.6845238095238095
User 44647 AUC after training: 0.6785714285714286
User 44647 does not improve AUC. Reverting changes.
Training on augumented user 48368 29/50 current_auc = 0.6845238095238095
User 48368 AUC after training: 0.6785714285714286
User 48368 does not improve AUC. Reverting changes.
Training on augumented user 133407 30/50 current_auc = 0.6845238095238095
User 133407 AUC after training: 0.6785714285714286
User 133407 does not improve AUC. Reverting changes.
Training on augumented user 83063 31/50 current_auc = 0.6845238095238095
User 83063 AUC after training: 0.6785714285714286
User 83063 does not improve AUC. Reverting changes.
Training on augumented user 132623 32/50 current_auc = 0.6845238095238095
User 132623 AUC after training: 0.6785714285714286
User 132623 does not improve AUC. Reverting changes.
Training on augumented user 20371 33/50 current_auc = 0.6845238095238095
User 20371 AUC after training: 0.6785714285714286
User 20371 does not improve AUC. Reverting changes.
Training on augumented user 15840 34/50 current_auc = 0.6845238095238095
User 15840 AUC after training: 0.6785714285714286
User 15840 does not improve AUC. Reverting changes.
Training on augumented user 26786 35/50 current_auc = 0.6845238095238095
User 26786 AUC after training: 0.6785714285714286
User 26786 does not improve AUC. Reverting changes.
Training on augumented user 49855 36/50 current_auc = 0.6845238095238095
User 49855 AUC after training: 0.6785714285714286
User 49855 does not improve AUC. Reverting changes.
Training on augumented user 118273 37/50 current_auc = 0.6845238095238095
User 118273 AUC after training: 0.6845238095238095
User 118273 does not improve AUC. Reverting changes.
Training on augumented user 61932 38/50 current_auc = 0.6845238095238095
User 61932 AUC after training: 0.6785714285714286
User 61932 does not improve AUC. Reverting changes.
Training on augumented user 46035 39/50 current_auc = 0.6845238095238095
User 46035 AUC after training: 0.6785714285714286
User 46035 does not improve AUC. Reverting changes.
Training on augumented user 24315 40/50 current_auc = 0.6845238095238095
User 24315 AUC after training: 0.6785714285714286
User 24315 does not improve AUC. Reverting changes.
Training on augumented user 77083 41/50 current_auc = 0.6845238095238095
User 77083 AUC after training: 0.6785714285714286
User 77083 does not improve AUC. Reverting changes.
Training on augumented user 119694 42/50 current_auc = 0.6845238095238095
User 119694 AUC after training: 0.6785714285714286
User 119694 does not improve AUC. Reverting changes.
Training on augumented user 40837 43/50 current_auc = 0.6845238095238095
User 40837 AUC after training: 0.6785714285714286
User 40837 does not improve AUC. Reverting changes.
Training on augumented user 66098 44/50 current_auc = 0.6845238095238095
User 66098 AUC after training: 0.6785714285714286
User 66098 does not improve AUC. Reverting changes.
Training on augumented user 137000 45/50 current_auc = 0.6845238095238095
User 137000 AUC after training: 0.6785714285714286
User 137000 does not improve AUC. Reverting changes.
Training on augumented user 132934 46/50 current_auc = 0.6845238095238095
User 132934 AUC after training: 0.6785714285714286
User 132934 does not improve AUC. Reverting changes.
Training on augumented user 82383 47/50 current_auc = 0.6845238095238095
User 82383 AUC after training: 0.6785714285714286
User 82383 does not improve AUC. Reverting changes.
Training on augumented user 15899 48/50 current_auc = 0.6845238095238095
User 15899 AUC after training: 0.6785714285714286
User 15899 does not improve AUC. Reverting changes.
Training on augumented user 87856 49/50 current_auc = 0.6845238095238095
User 87856 AUC after training: 0.6845238095238095
User 87856 does not improve AUC. Reverting changes.
[2024-12-02 18:27:23.079745] start test user 84916 92/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:27:23.841762] start test user 84916 92/568 recall augumented users by random, augumented_users = [72401, 21765, 132615, 100635, 38980, 38972, 100888, 77315, 72453, 57541, 58204, 109706, 120711, 124796, 126414, 22477, 104361, 76704, 15928, 64537, 131353, 72068, 94189, 105013, 123148, 119120, 79051, 93554, 134786, 2910, 102252, 59532, 73795, 106567, 83882, 29167, 85404, 103462, 7769, 103598, 130765, 79458, 47341, 106621, 114730, 116470, 95478, 75377, 36278, 18599]
[2024-12-02 18:27:23.859147] user = 84916 Cloud 92/568
[2024-12-02 18:27:23.873902] user = 84916 Local 92/568
[2024-12-02 18:27:24.229832] user = 84916 Local+ 92/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:27:26.874362] user = 84916 MPDA- 92/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6414814814814815
Training on augumented user 72401 0/50 current_auc = 0.6414814814814815
User 72401 AUC after training: 0.6444444444444445
User 72401 improves AUC. Keeping the model.
Training on augumented user 21765 1/50 current_auc = 0.6444444444444445
User 21765 AUC after training: 0.6429629629629631
User 21765 does not improve AUC. Reverting changes.
Training on augumented user 132615 2/50 current_auc = 0.6444444444444445
User 132615 AUC after training: 0.6444444444444445
User 132615 does not improve AUC. Reverting changes.
Training on augumented user 100635 3/50 current_auc = 0.6444444444444445
User 100635 AUC after training: 0.6444444444444445
User 100635 does not improve AUC. Reverting changes.
Training on augumented user 38980 4/50 current_auc = 0.6444444444444445
User 38980 AUC after training: 0.6414814814814815
User 38980 does not improve AUC. Reverting changes.
Training on augumented user 38972 5/50 current_auc = 0.6444444444444445
User 38972 AUC after training: 0.6444444444444445
User 38972 does not improve AUC. Reverting changes.
Training on augumented user 100888 6/50 current_auc = 0.6444444444444445
User 100888 AUC after training: 0.6429629629629631
User 100888 does not improve AUC. Reverting changes.
Training on augumented user 77315 7/50 current_auc = 0.6444444444444445
User 77315 AUC after training: 0.6414814814814815
User 77315 does not improve AUC. Reverting changes.
Training on augumented user 72453 8/50 current_auc = 0.6444444444444445
User 72453 AUC after training: 0.6399999999999999
User 72453 does not improve AUC. Reverting changes.
Training on augumented user 57541 9/50 current_auc = 0.6444444444444445
User 57541 AUC after training: 0.6444444444444445
User 57541 does not improve AUC. Reverting changes.
Training on augumented user 58204 10/50 current_auc = 0.6444444444444445
User 58204 AUC after training: 0.6429629629629631
User 58204 does not improve AUC. Reverting changes.
Training on augumented user 109706 11/50 current_auc = 0.6444444444444445
User 109706 AUC after training: 0.6429629629629631
User 109706 does not improve AUC. Reverting changes.
Training on augumented user 120711 12/50 current_auc = 0.6444444444444445
User 120711 AUC after training: 0.6385185185185185
User 120711 does not improve AUC. Reverting changes.
Training on augumented user 124796 13/50 current_auc = 0.6444444444444445
User 124796 AUC after training: 0.6429629629629631
User 124796 does not improve AUC. Reverting changes.
Training on augumented user 126414 14/50 current_auc = 0.6444444444444445
User 126414 AUC after training: 0.6444444444444445
User 126414 does not improve AUC. Reverting changes.
Training on augumented user 22477 15/50 current_auc = 0.6444444444444445
User 22477 AUC after training: 0.6474074074074075
User 22477 improves AUC. Keeping the model.
Training on augumented user 104361 16/50 current_auc = 0.6474074074074075
User 104361 AUC after training: 0.6444444444444445
User 104361 does not improve AUC. Reverting changes.
Training on augumented user 76704 17/50 current_auc = 0.6474074074074075
User 76704 AUC after training: 0.6429629629629631
User 76704 does not improve AUC. Reverting changes.
Training on augumented user 15928 18/50 current_auc = 0.6474074074074075
User 15928 AUC after training: 0.6444444444444445
User 15928 does not improve AUC. Reverting changes.
Training on augumented user 64537 19/50 current_auc = 0.6474074074074075
User 64537 AUC after training: 0.6429629629629631
User 64537 does not improve AUC. Reverting changes.
Training on augumented user 131353 20/50 current_auc = 0.6474074074074075
User 131353 AUC after training: 0.6444444444444445
User 131353 does not improve AUC. Reverting changes.
Training on augumented user 72068 21/50 current_auc = 0.6474074074074075
User 72068 AUC after training: 0.6474074074074075
User 72068 does not improve AUC. Reverting changes.
Training on augumented user 94189 22/50 current_auc = 0.6474074074074075
User 94189 AUC after training: 0.6444444444444444
User 94189 does not improve AUC. Reverting changes.
Training on augumented user 105013 23/50 current_auc = 0.6474074074074075
User 105013 AUC after training: 0.6474074074074075
User 105013 does not improve AUC. Reverting changes.
Training on augumented user 123148 24/50 current_auc = 0.6474074074074075
User 123148 AUC after training: 0.64
User 123148 does not improve AUC. Reverting changes.
Training on augumented user 119120 25/50 current_auc = 0.6474074074074075
User 119120 AUC after training: 0.6444444444444445
User 119120 does not improve AUC. Reverting changes.
Training on augumented user 79051 26/50 current_auc = 0.6474074074074075
User 79051 AUC after training: 0.6474074074074075
User 79051 does not improve AUC. Reverting changes.
Training on augumented user 93554 27/50 current_auc = 0.6474074074074075
User 93554 AUC after training: 0.6474074074074075
User 93554 does not improve AUC. Reverting changes.
Training on augumented user 134786 28/50 current_auc = 0.6474074074074075
User 134786 AUC after training: 0.6474074074074075
User 134786 does not improve AUC. Reverting changes.
Training on augumented user 2910 29/50 current_auc = 0.6474074074074075
User 2910 AUC after training: 0.6474074074074075
User 2910 does not improve AUC. Reverting changes.
Training on augumented user 102252 30/50 current_auc = 0.6474074074074075
User 102252 AUC after training: 0.6414814814814815
User 102252 does not improve AUC. Reverting changes.
Training on augumented user 59532 31/50 current_auc = 0.6474074074074075
User 59532 AUC after training: 0.6474074074074075
User 59532 does not improve AUC. Reverting changes.
Training on augumented user 73795 32/50 current_auc = 0.6474074074074075
User 73795 AUC after training: 0.6444444444444445
User 73795 does not improve AUC. Reverting changes.
Training on augumented user 106567 33/50 current_auc = 0.6474074074074075
User 106567 AUC after training: 0.6474074074074075
User 106567 does not improve AUC. Reverting changes.
Training on augumented user 83882 34/50 current_auc = 0.6474074074074075
User 83882 AUC after training: 0.6385185185185186
User 83882 does not improve AUC. Reverting changes.
Training on augumented user 29167 35/50 current_auc = 0.6474074074074075
User 29167 AUC after training: 0.6474074074074075
User 29167 does not improve AUC. Reverting changes.
Training on augumented user 85404 36/50 current_auc = 0.6474074074074075
User 85404 AUC after training: 0.6474074074074075
User 85404 does not improve AUC. Reverting changes.
Training on augumented user 103462 37/50 current_auc = 0.6474074074074075
User 103462 AUC after training: 0.645925925925926
User 103462 does not improve AUC. Reverting changes.
Training on augumented user 7769 38/50 current_auc = 0.6474074074074075
User 7769 AUC after training: 0.6474074074074075
User 7769 does not improve AUC. Reverting changes.
Training on augumented user 103598 39/50 current_auc = 0.6474074074074075
User 103598 AUC after training: 0.6444444444444445
User 103598 does not improve AUC. Reverting changes.
Training on augumented user 130765 40/50 current_auc = 0.6474074074074075
User 130765 AUC after training: 0.6474074074074075
User 130765 does not improve AUC. Reverting changes.
Training on augumented user 79458 41/50 current_auc = 0.6474074074074075
User 79458 AUC after training: 0.645925925925926
User 79458 does not improve AUC. Reverting changes.
Training on augumented user 47341 42/50 current_auc = 0.6474074074074075
User 47341 AUC after training: 0.645925925925926
User 47341 does not improve AUC. Reverting changes.
Training on augumented user 106621 43/50 current_auc = 0.6474074074074075
User 106621 AUC after training: 0.6474074074074075
User 106621 does not improve AUC. Reverting changes.
Training on augumented user 114730 44/50 current_auc = 0.6474074074074075
User 114730 AUC after training: 0.6474074074074075
User 114730 does not improve AUC. Reverting changes.
Training on augumented user 116470 45/50 current_auc = 0.6474074074074075
User 116470 AUC after training: 0.6474074074074075
User 116470 does not improve AUC. Reverting changes.
Training on augumented user 95478 46/50 current_auc = 0.6474074074074075
User 95478 AUC after training: 0.6459259259259259
User 95478 does not improve AUC. Reverting changes.
Training on augumented user 75377 47/50 current_auc = 0.6474074074074075
User 75377 AUC after training: 0.6474074074074075
User 75377 does not improve AUC. Reverting changes.
Training on augumented user 36278 48/50 current_auc = 0.6474074074074075
User 36278 AUC after training: 0.6414814814814814
User 36278 does not improve AUC. Reverting changes.
Training on augumented user 18599 49/50 current_auc = 0.6474074074074075
User 18599 AUC after training: 0.645925925925926
User 18599 does not improve AUC. Reverting changes.
[2024-12-02 18:27:59.557841] start test user 84923 93/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:28:00.022519] start test user 84923 93/568 recall augumented users by random, augumented_users = [35188, 117088, 12075, 129030, 96525, 111082, 22970, 60070, 100363, 8628, 118599, 52528, 66355, 54705, 118649, 41565, 98401, 53947, 131231, 56293, 100463, 14773, 72267, 7346, 119153, 35701, 125897, 54030, 3365, 3873, 18418, 45085, 17175, 107220, 3659, 33892, 138342, 46156, 123281, 25357, 105081, 11676, 61796, 34671, 80185, 75960, 36100, 957, 64718, 64682]
[2024-12-02 18:28:00.039404] user = 84923 Cloud 93/568
[2024-12-02 18:28:00.062796] user = 84923 Local 93/568
[2024-12-02 18:28:00.257665] user = 84923 Local+ 93/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:28:03.414483] user = 84923 MPDA- 93/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7976011994002998
Training on augumented user 35188 0/50 current_auc = 0.7976011994002998
User 35188 AUC after training: 0.7976011994002998
User 35188 does not improve AUC. Reverting changes.
Training on augumented user 117088 1/50 current_auc = 0.7976011994002998
User 117088 AUC after training: 0.7983508245877061
User 117088 improves AUC. Keeping the model.
Training on augumented user 12075 2/50 current_auc = 0.7983508245877061
User 12075 AUC after training: 0.7983508245877061
User 12075 does not improve AUC. Reverting changes.
Training on augumented user 129030 3/50 current_auc = 0.7983508245877061
User 129030 AUC after training: 0.8005997001499251
User 129030 improves AUC. Keeping the model.
Training on augumented user 96525 4/50 current_auc = 0.8005997001499251
User 96525 AUC after training: 0.7998500749625188
User 96525 does not improve AUC. Reverting changes.
Training on augumented user 111082 5/50 current_auc = 0.8005997001499251
User 111082 AUC after training: 0.8005997001499251
User 111082 does not improve AUC. Reverting changes.
Training on augumented user 22970 6/50 current_auc = 0.8005997001499251
User 22970 AUC after training: 0.802848575712144
User 22970 improves AUC. Keeping the model.
Training on augumented user 60070 7/50 current_auc = 0.802848575712144
User 60070 AUC after training: 0.8035982008995503
User 60070 improves AUC. Keeping the model.
Training on augumented user 100363 8/50 current_auc = 0.8035982008995503
User 100363 AUC after training: 0.8020989505247377
User 100363 does not improve AUC. Reverting changes.
Training on augumented user 8628 9/50 current_auc = 0.8035982008995503
User 8628 AUC after training: 0.8043478260869565
User 8628 improves AUC. Keeping the model.
Training on augumented user 118599 10/50 current_auc = 0.8043478260869565
User 118599 AUC after training: 0.8005997001499251
User 118599 does not improve AUC. Reverting changes.
Training on augumented user 52528 11/50 current_auc = 0.8043478260869565
User 52528 AUC after training: 0.8035982008995503
User 52528 does not improve AUC. Reverting changes.
Training on augumented user 66355 12/50 current_auc = 0.8043478260869565
User 66355 AUC after training: 0.8035982008995503
User 66355 does not improve AUC. Reverting changes.
Training on augumented user 54705 13/50 current_auc = 0.8043478260869565
User 54705 AUC after training: 0.802848575712144
User 54705 does not improve AUC. Reverting changes.
Training on augumented user 118649 14/50 current_auc = 0.8043478260869565
User 118649 AUC after training: 0.8020989505247377
User 118649 does not improve AUC. Reverting changes.
Training on augumented user 41565 15/50 current_auc = 0.8043478260869565
User 41565 AUC after training: 0.802848575712144
User 41565 does not improve AUC. Reverting changes.
Training on augumented user 98401 16/50 current_auc = 0.8043478260869565
User 98401 AUC after training: 0.8050974512743628
User 98401 improves AUC. Keeping the model.
Training on augumented user 53947 17/50 current_auc = 0.8050974512743628
User 53947 AUC after training: 0.8065967016491754
User 53947 improves AUC. Keeping the model.
Training on augumented user 131231 18/50 current_auc = 0.8065967016491754
User 131231 AUC after training: 0.8065967016491754
User 131231 does not improve AUC. Reverting changes.
Training on augumented user 56293 19/50 current_auc = 0.8065967016491754
User 56293 AUC after training: 0.8050974512743628
User 56293 does not improve AUC. Reverting changes.
Training on augumented user 100463 20/50 current_auc = 0.8065967016491754
User 100463 AUC after training: 0.8050974512743628
User 100463 does not improve AUC. Reverting changes.
Training on augumented user 14773 21/50 current_auc = 0.8065967016491754
User 14773 AUC after training: 0.8065967016491754
User 14773 does not improve AUC. Reverting changes.
Training on augumented user 72267 22/50 current_auc = 0.8065967016491754
User 72267 AUC after training: 0.8058470764617691
User 72267 does not improve AUC. Reverting changes.
Training on augumented user 7346 23/50 current_auc = 0.8065967016491754
User 7346 AUC after training: 0.808095952023988
User 7346 improves AUC. Keeping the model.
Training on augumented user 119153 24/50 current_auc = 0.808095952023988
User 119153 AUC after training: 0.8088455772113944
User 119153 improves AUC. Keeping the model.
Training on augumented user 35701 25/50 current_auc = 0.8088455772113944
User 35701 AUC after training: 0.8065967016491754
User 35701 does not improve AUC. Reverting changes.
Training on augumented user 125897 26/50 current_auc = 0.8088455772113944
User 125897 AUC after training: 0.8065967016491754
User 125897 does not improve AUC. Reverting changes.
Training on augumented user 54030 27/50 current_auc = 0.8088455772113944
User 54030 AUC after training: 0.8088455772113944
User 54030 does not improve AUC. Reverting changes.
Training on augumented user 3365 28/50 current_auc = 0.8088455772113944
User 3365 AUC after training: 0.8088455772113944
User 3365 does not improve AUC. Reverting changes.
Training on augumented user 3873 29/50 current_auc = 0.8088455772113944
User 3873 AUC after training: 0.8095952023988006
User 3873 improves AUC. Keeping the model.
Training on augumented user 18418 30/50 current_auc = 0.8095952023988006
User 18418 AUC after training: 0.8095952023988006
User 18418 does not improve AUC. Reverting changes.
Training on augumented user 45085 31/50 current_auc = 0.8095952023988006
User 45085 AUC after training: 0.8088455772113943
User 45085 does not improve AUC. Reverting changes.
Training on augumented user 17175 32/50 current_auc = 0.8095952023988006
User 17175 AUC after training: 0.808095952023988
User 17175 does not improve AUC. Reverting changes.
Training on augumented user 107220 33/50 current_auc = 0.8095952023988006
User 107220 AUC after training: 0.8073463268365817
User 107220 does not improve AUC. Reverting changes.
Training on augumented user 3659 34/50 current_auc = 0.8095952023988006
User 3659 AUC after training: 0.8110944527736133
User 3659 improves AUC. Keeping the model.
Training on augumented user 33892 35/50 current_auc = 0.8110944527736133
User 33892 AUC after training: 0.8065967016491754
User 33892 does not improve AUC. Reverting changes.
Training on augumented user 138342 36/50 current_auc = 0.8110944527736133
User 138342 AUC after training: 0.8125937031484258
User 138342 improves AUC. Keeping the model.
Training on augumented user 46156 37/50 current_auc = 0.8125937031484258
User 46156 AUC after training: 0.8103448275862069
User 46156 does not improve AUC. Reverting changes.
Training on augumented user 123281 38/50 current_auc = 0.8125937031484258
User 123281 AUC after training: 0.8103448275862069
User 123281 does not improve AUC. Reverting changes.
Training on augumented user 25357 39/50 current_auc = 0.8125937031484258
User 25357 AUC after training: 0.8148425787106447
User 25357 improves AUC. Keeping the model.
Training on augumented user 105081 40/50 current_auc = 0.8148425787106447
User 105081 AUC after training: 0.8125937031484258
User 105081 does not improve AUC. Reverting changes.
Training on augumented user 11676 41/50 current_auc = 0.8148425787106447
User 11676 AUC after training: 0.8148425787106447
User 11676 does not improve AUC. Reverting changes.
Training on augumented user 61796 42/50 current_auc = 0.8148425787106447
User 61796 AUC after training: 0.8140929535232384
User 61796 does not improve AUC. Reverting changes.
Training on augumented user 34671 43/50 current_auc = 0.8148425787106447
User 34671 AUC after training: 0.8148425787106447
User 34671 does not improve AUC. Reverting changes.
Training on augumented user 80185 44/50 current_auc = 0.8148425787106447
User 80185 AUC after training: 0.810344827586207
User 80185 does not improve AUC. Reverting changes.
Training on augumented user 75960 45/50 current_auc = 0.8148425787106447
User 75960 AUC after training: 0.815592203898051
User 75960 improves AUC. Keeping the model.
Training on augumented user 36100 46/50 current_auc = 0.815592203898051
User 36100 AUC after training: 0.8148425787106447
User 36100 does not improve AUC. Reverting changes.
Training on augumented user 957 47/50 current_auc = 0.815592203898051
User 957 AUC after training: 0.8148425787106447
User 957 does not improve AUC. Reverting changes.
Training on augumented user 64718 48/50 current_auc = 0.815592203898051
User 64718 AUC after training: 0.8095952023988007
User 64718 does not improve AUC. Reverting changes.
Training on augumented user 64682 49/50 current_auc = 0.815592203898051
User 64682 AUC after training: 0.8163418290854573
User 64682 improves AUC. Keeping the model.
[2024-12-02 18:28:34.825289] start test user 84940 94/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:28:35.246606] start test user 84940 94/568 recall augumented users by random, augumented_users = [22617, 84421, 46921, 84297, 81824, 115756, 29228, 92533, 57599, 38139, 121969, 120839, 109643, 49875, 121055, 72894, 5619, 30439, 128154, 119160, 87441, 137718, 17298, 129920, 6900, 87993, 60932, 28263, 18956, 138326, 100242, 52612, 107191, 55124, 59800, 127695, 58046, 131251, 90952, 103746, 81421, 6877, 108902, 27483, 27681, 95917, 93353, 109472, 60967, 128210]
[2024-12-02 18:28:35.262279] user = 84940 Cloud 94/568
[2024-12-02 18:28:35.283333] user = 84940 Local 94/568
[2024-12-02 18:28:35.347631] user = 84940 Local+ 94/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:28:37.671920] user = 84940 MPDA- 94/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6916666666666667
Training on augumented user 22617 0/50 current_auc = 0.6916666666666667
User 22617 AUC after training: 0.6911764705882353
User 22617 does not improve AUC. Reverting changes.
Training on augumented user 84421 1/50 current_auc = 0.6916666666666667
User 84421 AUC after training: 0.692156862745098
User 84421 improves AUC. Keeping the model.
Training on augumented user 46921 2/50 current_auc = 0.692156862745098
User 46921 AUC after training: 0.692156862745098
User 46921 does not improve AUC. Reverting changes.
Training on augumented user 84297 3/50 current_auc = 0.692156862745098
User 84297 AUC after training: 0.6931372549019608
User 84297 improves AUC. Keeping the model.
Training on augumented user 81824 4/50 current_auc = 0.6931372549019608
User 81824 AUC after training: 0.6916666666666667
User 81824 does not improve AUC. Reverting changes.
Training on augumented user 115756 5/50 current_auc = 0.6931372549019608
User 115756 AUC after training: 0.6926470588235294
User 115756 does not improve AUC. Reverting changes.
Training on augumented user 29228 6/50 current_auc = 0.6931372549019608
User 29228 AUC after training: 0.692156862745098
User 29228 does not improve AUC. Reverting changes.
Training on augumented user 92533 7/50 current_auc = 0.6931372549019608
User 92533 AUC after training: 0.6936274509803921
User 92533 improves AUC. Keeping the model.
Training on augumented user 57599 8/50 current_auc = 0.6936274509803921
User 57599 AUC after training: 0.6931372549019608
User 57599 does not improve AUC. Reverting changes.
Training on augumented user 38139 9/50 current_auc = 0.6936274509803921
User 38139 AUC after training: 0.692156862745098
User 38139 does not improve AUC. Reverting changes.
Training on augumented user 121969 10/50 current_auc = 0.6936274509803921
User 121969 AUC after training: 0.6936274509803921
User 121969 does not improve AUC. Reverting changes.
Training on augumented user 120839 11/50 current_auc = 0.6936274509803921
User 120839 AUC after training: 0.6936274509803921
User 120839 does not improve AUC. Reverting changes.
Training on augumented user 109643 12/50 current_auc = 0.6936274509803921
User 109643 AUC after training: 0.6936274509803921
User 109643 does not improve AUC. Reverting changes.
Training on augumented user 49875 13/50 current_auc = 0.6936274509803921
User 49875 AUC after training: 0.6941176470588235
User 49875 improves AUC. Keeping the model.
Training on augumented user 121055 14/50 current_auc = 0.6941176470588235
User 121055 AUC after training: 0.6936274509803921
User 121055 does not improve AUC. Reverting changes.
Training on augumented user 72894 15/50 current_auc = 0.6941176470588235
User 72894 AUC after training: 0.6946078431372549
User 72894 improves AUC. Keeping the model.
Training on augumented user 5619 16/50 current_auc = 0.6946078431372549
User 5619 AUC after training: 0.6936274509803921
User 5619 does not improve AUC. Reverting changes.
Training on augumented user 30439 17/50 current_auc = 0.6946078431372549
User 30439 AUC after training: 0.6941176470588235
User 30439 does not improve AUC. Reverting changes.
Training on augumented user 128154 18/50 current_auc = 0.6946078431372549
User 128154 AUC after training: 0.6946078431372549
User 128154 does not improve AUC. Reverting changes.
Training on augumented user 119160 19/50 current_auc = 0.6946078431372549
User 119160 AUC after training: 0.6941176470588235
User 119160 does not improve AUC. Reverting changes.
Training on augumented user 87441 20/50 current_auc = 0.6946078431372549
User 87441 AUC after training: 0.6931372549019608
User 87441 does not improve AUC. Reverting changes.
Training on augumented user 137718 21/50 current_auc = 0.6946078431372549
User 137718 AUC after training: 0.6926470588235294
User 137718 does not improve AUC. Reverting changes.
Training on augumented user 17298 22/50 current_auc = 0.6946078431372549
User 17298 AUC after training: 0.692156862745098
User 17298 does not improve AUC. Reverting changes.
Training on augumented user 129920 23/50 current_auc = 0.6946078431372549
User 129920 AUC after training: 0.6936274509803921
User 129920 does not improve AUC. Reverting changes.
Training on augumented user 6900 24/50 current_auc = 0.6946078431372549
User 6900 AUC after training: 0.6941176470588235
User 6900 does not improve AUC. Reverting changes.
Training on augumented user 87993 25/50 current_auc = 0.6946078431372549
User 87993 AUC after training: 0.6941176470588235
User 87993 does not improve AUC. Reverting changes.
Training on augumented user 60932 26/50 current_auc = 0.6946078431372549
User 60932 AUC after training: 0.6941176470588235
User 60932 does not improve AUC. Reverting changes.
Training on augumented user 28263 27/50 current_auc = 0.6946078431372549
User 28263 AUC after training: 0.6936274509803921
User 28263 does not improve AUC. Reverting changes.
Training on augumented user 18956 28/50 current_auc = 0.6946078431372549
User 18956 AUC after training: 0.6936274509803921
User 18956 does not improve AUC. Reverting changes.
Training on augumented user 138326 29/50 current_auc = 0.6946078431372549
User 138326 AUC after training: 0.6936274509803921
User 138326 does not improve AUC. Reverting changes.
Training on augumented user 100242 30/50 current_auc = 0.6946078431372549
User 100242 AUC after training: 0.6931372549019608
User 100242 does not improve AUC. Reverting changes.
Training on augumented user 52612 31/50 current_auc = 0.6946078431372549
User 52612 AUC after training: 0.6931372549019608
User 52612 does not improve AUC. Reverting changes.
Training on augumented user 107191 32/50 current_auc = 0.6946078431372549
User 107191 AUC after training: 0.6941176470588235
User 107191 does not improve AUC. Reverting changes.
Training on augumented user 55124 33/50 current_auc = 0.6946078431372549
User 55124 AUC after training: 0.6936274509803921
User 55124 does not improve AUC. Reverting changes.
Training on augumented user 59800 34/50 current_auc = 0.6946078431372549
User 59800 AUC after training: 0.6936274509803921
User 59800 does not improve AUC. Reverting changes.
Training on augumented user 127695 35/50 current_auc = 0.6946078431372549
User 127695 AUC after training: 0.6941176470588235
User 127695 does not improve AUC. Reverting changes.
Training on augumented user 58046 36/50 current_auc = 0.6946078431372549
User 58046 AUC after training: 0.6941176470588235
User 58046 does not improve AUC. Reverting changes.
Training on augumented user 131251 37/50 current_auc = 0.6946078431372549
User 131251 AUC after training: 0.6946078431372549
User 131251 does not improve AUC. Reverting changes.
Training on augumented user 90952 38/50 current_auc = 0.6946078431372549
User 90952 AUC after training: 0.6946078431372549
User 90952 does not improve AUC. Reverting changes.
Training on augumented user 103746 39/50 current_auc = 0.6946078431372549
User 103746 AUC after training: 0.6936274509803921
User 103746 does not improve AUC. Reverting changes.
Training on augumented user 81421 40/50 current_auc = 0.6946078431372549
User 81421 AUC after training: 0.6931372549019608
User 81421 does not improve AUC. Reverting changes.
Training on augumented user 6877 41/50 current_auc = 0.6946078431372549
User 6877 AUC after training: 0.6931372549019608
User 6877 does not improve AUC. Reverting changes.
Training on augumented user 108902 42/50 current_auc = 0.6946078431372549
User 108902 AUC after training: 0.6946078431372549
User 108902 does not improve AUC. Reverting changes.
Training on augumented user 27483 43/50 current_auc = 0.6946078431372549
User 27483 AUC after training: 0.6931372549019608
User 27483 does not improve AUC. Reverting changes.
Training on augumented user 27681 44/50 current_auc = 0.6946078431372549
User 27681 AUC after training: 0.6946078431372549
User 27681 does not improve AUC. Reverting changes.
Training on augumented user 95917 45/50 current_auc = 0.6946078431372549
User 95917 AUC after training: 0.6931372549019608
User 95917 does not improve AUC. Reverting changes.
Training on augumented user 93353 46/50 current_auc = 0.6946078431372549
User 93353 AUC after training: 0.6941176470588235
User 93353 does not improve AUC. Reverting changes.
Training on augumented user 109472 47/50 current_auc = 0.6946078431372549
User 109472 AUC after training: 0.6931372549019608
User 109472 does not improve AUC. Reverting changes.
Training on augumented user 60967 48/50 current_auc = 0.6946078431372549
User 60967 AUC after training: 0.6941176470588235
User 60967 does not improve AUC. Reverting changes.
Training on augumented user 128210 49/50 current_auc = 0.6946078431372549
User 128210 AUC after training: 0.6941176470588235
User 128210 does not improve AUC. Reverting changes.
[2024-12-02 18:29:03.932650] start test user 84958 95/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:29:04.547332] start test user 84958 95/568 recall augumented users by random, augumented_users = [127622, 52690, 36985, 31607, 70359, 121588, 86779, 87289, 39740, 49745, 144, 36288, 15276, 108656, 57599, 45077, 42185, 49476, 82667, 84850, 31881, 89669, 119544, 43696, 81074, 134754, 129495, 58972, 120367, 79, 54686, 91469, 35579, 35119, 68933, 62954, 119334, 47421, 78803, 80181, 40535, 128929, 38663, 101443, 10346, 112838, 2454, 97341, 221, 95367]
[2024-12-02 18:29:04.595808] user = 84958 Cloud 95/568
[2024-12-02 18:29:04.697683] user = 84958 Local 95/568
[2024-12-02 18:29:04.947071] user = 84958 Local+ 95/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:29:07.980494] user = 84958 MPDA- 95/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5434215046375815
Training on augumented user 127622 0/50 current_auc = 0.5434215046375815
User 127622 AUC after training: 0.5435932669185847
User 127622 improves AUC. Keeping the model.
Training on augumented user 52690 1/50 current_auc = 0.5435932669185847
User 52690 AUC after training: 0.543661971830986
User 52690 improves AUC. Keeping the model.
Training on augumented user 36985 2/50 current_auc = 0.543661971830986
User 36985 AUC after training: 0.5429062177945723
User 36985 does not improve AUC. Reverting changes.
Training on augumented user 31607 3/50 current_auc = 0.543661971830986
User 31607 AUC after training: 0.5436963242871865
User 31607 improves AUC. Keeping the model.
Training on augumented user 70359 4/50 current_auc = 0.5436963242871865
User 70359 AUC after training: 0.5431123325317759
User 70359 does not improve AUC. Reverting changes.
Training on augumented user 121588 5/50 current_auc = 0.5436963242871865
User 121588 AUC after training: 0.5435245620061835
User 121588 does not improve AUC. Reverting changes.
Training on augumented user 86779 6/50 current_auc = 0.5436963242871865
User 86779 AUC after training: 0.5434215046375815
User 86779 does not improve AUC. Reverting changes.
Training on augumented user 87289 7/50 current_auc = 0.5436963242871865
User 87289 AUC after training: 0.5434902095499828
User 87289 does not improve AUC. Reverting changes.
Training on augumented user 39740 8/50 current_auc = 0.5436963242871865
User 39740 AUC after training: 0.5434902095499827
User 39740 does not improve AUC. Reverting changes.
Training on augumented user 49745 9/50 current_auc = 0.5436963242871865
User 49745 AUC after training: 0.5419099965647544
User 49745 does not improve AUC. Reverting changes.
Training on augumented user 144 10/50 current_auc = 0.5436963242871865
User 144 AUC after training: 0.5430436276193749
User 144 does not improve AUC. Reverting changes.
Training on augumented user 36288 11/50 current_auc = 0.5436963242871865
User 36288 AUC after training: 0.5432840948127791
User 36288 does not improve AUC. Reverting changes.
Training on augumented user 15276 12/50 current_auc = 0.5436963242871865
User 15276 AUC after training: 0.5435245620061834
User 15276 does not improve AUC. Reverting changes.
Training on augumented user 108656 13/50 current_auc = 0.5436963242871865
User 108656 AUC after training: 0.5429062177945724
User 108656 does not improve AUC. Reverting changes.
Training on augumented user 57599 14/50 current_auc = 0.5436963242871865
User 57599 AUC after training: 0.5429749227069736
User 57599 does not improve AUC. Reverting changes.
Training on augumented user 45077 15/50 current_auc = 0.5436963242871865
User 45077 AUC after training: 0.5430436276193747
User 45077 does not improve AUC. Reverting changes.
Training on augumented user 42185 16/50 current_auc = 0.5436963242871865
User 42185 AUC after training: 0.5429062177945724
User 42185 does not improve AUC. Reverting changes.
Training on augumented user 49476 17/50 current_auc = 0.5436963242871865
User 49476 AUC after training: 0.5436963242871865
User 49476 does not improve AUC. Reverting changes.
Training on augumented user 82667 18/50 current_auc = 0.5436963242871865
User 82667 AUC after training: 0.5437306767433872
User 82667 improves AUC. Keeping the model.
Training on augumented user 84850 19/50 current_auc = 0.5437306767433872
User 84850 AUC after training: 0.5434902095499827
User 84850 does not improve AUC. Reverting changes.
Training on augumented user 31881 20/50 current_auc = 0.5437306767433872
User 31881 AUC after training: 0.5439024390243902
User 31881 improves AUC. Keeping the model.
Training on augumented user 89669 21/50 current_auc = 0.5439024390243902
User 89669 AUC after training: 0.5439711439367915
User 89669 improves AUC. Keeping the model.
Training on augumented user 119544 22/50 current_auc = 0.5439711439367915
User 119544 AUC after training: 0.5434902095499828
User 119544 does not improve AUC. Reverting changes.
Training on augumented user 43696 23/50 current_auc = 0.5439711439367915
User 43696 AUC after training: 0.543833734111989
User 43696 does not improve AUC. Reverting changes.
Training on augumented user 81074 24/50 current_auc = 0.5439711439367915
User 81074 AUC after training: 0.5449330127104087
User 81074 improves AUC. Keeping the model.
Training on augumented user 134754 25/50 current_auc = 0.5449330127104087
User 134754 AUC after training: 0.5446581930608039
User 134754 does not improve AUC. Reverting changes.
Training on augumented user 129495 26/50 current_auc = 0.5449330127104087
User 129495 AUC after training: 0.54500171762281
User 129495 improves AUC. Keeping the model.
Training on augumented user 58972 27/50 current_auc = 0.54500171762281
User 58972 AUC after training: 0.5452078323600137
User 58972 improves AUC. Keeping the model.
Training on augumented user 120367 28/50 current_auc = 0.5452078323600137
User 120367 AUC after training: 0.5458605290278254
User 120367 improves AUC. Keeping the model.
Training on augumented user 79 29/50 current_auc = 0.5458605290278254
User 79 AUC after training: 0.5455170044658193
User 79 does not improve AUC. Reverting changes.
Training on augumented user 54686 30/50 current_auc = 0.5458605290278254
User 54686 AUC after training: 0.5461353486774304
User 54686 improves AUC. Keeping the model.
Training on augumented user 91469 31/50 current_auc = 0.5461353486774304
User 91469 AUC after training: 0.5447612504294057
User 91469 does not improve AUC. Reverting changes.
Training on augumented user 35579 32/50 current_auc = 0.5461353486774304
User 35579 AUC after training: 0.5458948814840261
User 35579 does not improve AUC. Reverting changes.
Training on augumented user 35119 33/50 current_auc = 0.5461353486774304
User 35119 AUC after training: 0.5457918241154243
User 35119 does not improve AUC. Reverting changes.
Training on augumented user 68933 34/50 current_auc = 0.5461353486774304
User 68933 AUC after training: 0.5458605290278254
User 68933 does not improve AUC. Reverting changes.
Training on augumented user 62954 35/50 current_auc = 0.5461353486774304
User 62954 AUC after training: 0.5460666437650292
User 62954 does not improve AUC. Reverting changes.
Training on augumented user 119334 36/50 current_auc = 0.5461353486774304
User 119334 AUC after training: 0.5461353486774304
User 119334 does not improve AUC. Reverting changes.
Training on augumented user 47421 37/50 current_auc = 0.5461353486774304
User 47421 AUC after training: 0.5461353486774304
User 47421 does not improve AUC. Reverting changes.
Training on augumented user 78803 38/50 current_auc = 0.5461353486774304
User 78803 AUC after training: 0.5459292339402267
User 78803 does not improve AUC. Reverting changes.
Training on augumented user 80181 39/50 current_auc = 0.5461353486774304
User 80181 AUC after training: 0.5458605290278254
User 80181 does not improve AUC. Reverting changes.
Training on augumented user 40535 40/50 current_auc = 0.5461353486774304
User 40535 AUC after training: 0.5459979388526279
User 40535 does not improve AUC. Reverting changes.
Training on augumented user 128929 41/50 current_auc = 0.5461353486774304
User 128929 AUC after training: 0.5457574716592236
User 128929 does not improve AUC. Reverting changes.
Training on augumented user 38663 42/50 current_auc = 0.5461353486774304
User 38663 AUC after training: 0.5482308485056682
User 38663 improves AUC. Keeping the model.
Training on augumented user 101443 43/50 current_auc = 0.5482308485056682
User 101443 AUC after training: 0.5482995534180694
User 101443 improves AUC. Keeping the model.
Training on augumented user 10346 44/50 current_auc = 0.5482995534180694
User 10346 AUC after training: 0.5482995534180695
User 10346 improves AUC. Keeping the model.
Training on augumented user 112838 45/50 current_auc = 0.5482995534180695
User 112838 AUC after training: 0.5482652009618688
User 112838 does not improve AUC. Reverting changes.
Training on augumented user 2454 46/50 current_auc = 0.5482995534180695
User 2454 AUC after training: 0.5481621435932669
User 2454 does not improve AUC. Reverting changes.
Training on augumented user 97341 47/50 current_auc = 0.5482995534180695
User 97341 AUC after training: 0.5472689797320509
User 97341 does not improve AUC. Reverting changes.
Training on augumented user 221 48/50 current_auc = 0.5482995534180695
User 221 AUC after training: 0.5484713156990725
User 221 improves AUC. Keeping the model.
Training on augumented user 95367 49/50 current_auc = 0.5484713156990725
User 95367 AUC after training: 0.5479903813122637
User 95367 does not improve AUC. Reverting changes.
[2024-12-02 18:29:34.067009] start test user 84962 96/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:29:34.508977] start test user 84962 96/568 recall augumented users by random, augumented_users = [33303, 7385, 41820, 97040, 36240, 125702, 108424, 79005, 100194, 48190, 7520, 4868, 100159, 15344, 112453, 22962, 33611, 18970, 107835, 44227, 101930, 122339, 132496, 98019, 113359, 122212, 54479, 27984, 105790, 97936, 75521, 79210, 33554, 55116, 30127, 12580, 103947, 23929, 9131, 101387, 43346, 38564, 62215, 10982, 57380, 75666, 135024, 110181, 86607, 27083]
[2024-12-02 18:29:34.524975] user = 84962 Cloud 96/568
[2024-12-02 18:29:34.562429] user = 84962 Local 96/568
[2024-12-02 18:29:34.640700] user = 84962 Local+ 96/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:29:36.905835] user = 84962 MPDA- 96/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.882603641999225
Training on augumented user 33303 0/50 current_auc = 0.882603641999225
User 33303 AUC after training: 0.882603641999225
User 33303 does not improve AUC. Reverting changes.
Training on augumented user 7385 1/50 current_auc = 0.882603641999225
User 7385 AUC after training: 0.8827973653622627
User 7385 improves AUC. Keeping the model.
Training on augumented user 41820 2/50 current_auc = 0.8827973653622627
User 41820 AUC after training: 0.8826811313444402
User 41820 does not improve AUC. Reverting changes.
Training on augumented user 97040 3/50 current_auc = 0.8827973653622627
User 97040 AUC after training: 0.8825261526540101
User 97040 does not improve AUC. Reverting changes.
Training on augumented user 36240 4/50 current_auc = 0.8827973653622627
User 36240 AUC after training: 0.8830298333979077
User 36240 improves AUC. Keeping the model.
Training on augumented user 125702 5/50 current_auc = 0.8830298333979077
User 125702 AUC after training: 0.8830298333979079
User 125702 improves AUC. Keeping the model.
Training on augumented user 108424 6/50 current_auc = 0.8830298333979079
User 108424 AUC after training: 0.8832235567609453
User 108424 improves AUC. Keeping the model.
Training on augumented user 79005 7/50 current_auc = 0.8832235567609453
User 79005 AUC after training: 0.8833010461061604
User 79005 improves AUC. Keeping the model.
Training on augumented user 100194 8/50 current_auc = 0.8833010461061604
User 100194 AUC after training: 0.8834172801239829
User 100194 improves AUC. Keeping the model.
Training on augumented user 48190 9/50 current_auc = 0.8834172801239829
User 48190 AUC after training: 0.883494769469198
User 48190 improves AUC. Keeping the model.
Training on augumented user 7520 10/50 current_auc = 0.883494769469198
User 7520 AUC after training: 0.8836110034870205
User 7520 improves AUC. Keeping the model.
Training on augumented user 4868 11/50 current_auc = 0.8836110034870205
User 4868 AUC after training: 0.8840759395583108
User 4868 improves AUC. Keeping the model.
Training on augumented user 100159 12/50 current_auc = 0.8840759395583108
User 100159 AUC after training: 0.8828167376985664
User 100159 does not improve AUC. Reverting changes.
Training on augumented user 15344 13/50 current_auc = 0.8840759395583108
User 15344 AUC after training: 0.882758620689655
User 15344 does not improve AUC. Reverting changes.
Training on augumented user 112453 14/50 current_auc = 0.8840759395583108
User 112453 AUC after training: 0.8834560247965905
User 112453 does not improve AUC. Reverting changes.
Training on augumented user 22962 15/50 current_auc = 0.8840759395583108
User 22962 AUC after training: 0.8841921735761332
User 22962 improves AUC. Keeping the model.
Training on augumented user 33611 16/50 current_auc = 0.8841921735761332
User 33611 AUC after training: 0.8845021309569934
User 33611 improves AUC. Keeping the model.
Training on augumented user 18970 17/50 current_auc = 0.8845021309569934
User 18970 AUC after training: 0.8841534289035257
User 18970 does not improve AUC. Reverting changes.
Training on augumented user 107835 18/50 current_auc = 0.8845021309569934
User 107835 AUC after training: 0.8843471522665634
User 107835 does not improve AUC. Reverting changes.
Training on augumented user 44227 19/50 current_auc = 0.8845021309569934
User 44227 AUC after training: 0.884134056567222
User 44227 does not improve AUC. Reverting changes.
Training on augumented user 101930 20/50 current_auc = 0.8845021309569934
User 101930 AUC after training: 0.8843084075939558
User 101930 does not improve AUC. Reverting changes.
Training on augumented user 122339 21/50 current_auc = 0.8845021309569934
User 122339 AUC after training: 0.8846571096474235
User 122339 improves AUC. Keeping the model.
Training on augumented user 132496 22/50 current_auc = 0.8846571096474235
User 132496 AUC after training: 0.8842696629213483
User 132496 does not improve AUC. Reverting changes.
Training on augumented user 98019 23/50 current_auc = 0.8846571096474235
User 98019 AUC after training: 0.8843858969391709
User 98019 does not improve AUC. Reverting changes.
Training on augumented user 113359 24/50 current_auc = 0.8846571096474235
User 113359 AUC after training: 0.8843471522665632
User 113359 does not improve AUC. Reverting changes.
Training on augumented user 122212 25/50 current_auc = 0.8846571096474235
User 122212 AUC after training: 0.8841921735761332
User 122212 does not improve AUC. Reverting changes.
Training on augumented user 54479 26/50 current_auc = 0.8846571096474235
User 54479 AUC after training: 0.8843084075939557
User 54479 does not improve AUC. Reverting changes.
Training on augumented user 27984 27/50 current_auc = 0.8846571096474235
User 27984 AUC after training: 0.8841534289035257
User 27984 does not improve AUC. Reverting changes.
Training on augumented user 105790 28/50 current_auc = 0.8846571096474235
User 105790 AUC after training: 0.8842502905850445
User 105790 does not improve AUC. Reverting changes.
Training on augumented user 97936 29/50 current_auc = 0.8846571096474235
User 97936 AUC after training: 0.8843471522665634
User 97936 does not improve AUC. Reverting changes.
Training on augumented user 75521 30/50 current_auc = 0.8846571096474235
User 75521 AUC after training: 0.8844246416117784
User 75521 does not improve AUC. Reverting changes.
Training on augumented user 79210 31/50 current_auc = 0.8846571096474235
User 79210 AUC after training: 0.8840759395583108
User 79210 does not improve AUC. Reverting changes.
Training on augumented user 33554 32/50 current_auc = 0.8846571096474235
User 33554 AUC after training: 0.8840371948857032
User 33554 does not improve AUC. Reverting changes.
Training on augumented user 55116 33/50 current_auc = 0.8846571096474235
User 55116 AUC after training: 0.8840565672220069
User 55116 does not improve AUC. Reverting changes.
Training on augumented user 30127 34/50 current_auc = 0.8846571096474235
User 30127 AUC after training: 0.8840759395583107
User 30127 does not improve AUC. Reverting changes.
Training on augumented user 12580 35/50 current_auc = 0.8846571096474235
User 12580 AUC after training: 0.8842696629213482
User 12580 does not improve AUC. Reverting changes.
Training on augumented user 103947 36/50 current_auc = 0.8846571096474235
User 103947 AUC after training: 0.8842890352576521
User 103947 does not improve AUC. Reverting changes.
Training on augumented user 23929 37/50 current_auc = 0.8846571096474235
User 23929 AUC after training: 0.884134056567222
User 23929 does not improve AUC. Reverting changes.
Training on augumented user 9131 38/50 current_auc = 0.8846571096474235
User 9131 AUC after training: 0.8843084075939558
User 9131 does not improve AUC. Reverting changes.
Training on augumented user 101387 39/50 current_auc = 0.8846571096474235
User 101387 AUC after training: 0.8846183649748159
User 101387 does not improve AUC. Reverting changes.
Training on augumented user 43346 40/50 current_auc = 0.8846571096474235
User 43346 AUC after training: 0.8845408756296009
User 43346 does not improve AUC. Reverting changes.
Training on augumented user 38564 41/50 current_auc = 0.8846571096474235
User 38564 AUC after training: 0.8843084075939558
User 38564 does not improve AUC. Reverting changes.
Training on augumented user 62215 42/50 current_auc = 0.8846571096474235
User 62215 AUC after training: 0.8841921735761333
User 62215 does not improve AUC. Reverting changes.
Training on augumented user 10982 43/50 current_auc = 0.8846571096474235
User 10982 AUC after training: 0.8842502905850445
User 10982 does not improve AUC. Reverting changes.
Training on augumented user 57380 44/50 current_auc = 0.8846571096474235
User 57380 AUC after training: 0.8840759395583108
User 57380 does not improve AUC. Reverting changes.
Training on augumented user 75666 45/50 current_auc = 0.8846571096474235
User 75666 AUC after training: 0.8844246416117784
User 75666 does not improve AUC. Reverting changes.
Training on augumented user 135024 46/50 current_auc = 0.8846571096474235
User 135024 AUC after training: 0.8841921735761332
User 135024 does not improve AUC. Reverting changes.
Training on augumented user 110181 47/50 current_auc = 0.8846571096474235
User 110181 AUC after training: 0.8845021309569934
User 110181 does not improve AUC. Reverting changes.
Training on augumented user 86607 48/50 current_auc = 0.8846571096474235
User 86607 AUC after training: 0.8843858969391708
User 86607 does not improve AUC. Reverting changes.
Training on augumented user 27083 49/50 current_auc = 0.8846571096474235
User 27083 AUC after training: 0.8843471522665634
User 27083 does not improve AUC. Reverting changes.
[2024-12-02 18:30:06.040826] start test user 84963 97/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:30:06.561581] start test user 84963 97/568 recall augumented users by random, augumented_users = [41071, 111074, 25311, 2229, 51031, 96603, 94967, 17480, 72340, 100360, 59648, 131303, 84675, 96367, 8030, 69725, 85699, 114715, 90771, 79772, 58673, 23881, 52239, 77475, 109836, 28246, 476, 127687, 84630, 92734, 110316, 93463, 9618, 13797, 121924, 32012, 48603, 87557, 86389, 110348, 62226, 112465, 75802, 117248, 48295, 122595, 52322, 53335, 75666, 95019]
[2024-12-02 18:30:06.580579] user = 84963 Cloud 97/568
[2024-12-02 18:30:06.590632] user = 84963 Local 97/568
[2024-12-02 18:30:06.632508] user = 84963 Local+ 97/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:30:08.706715] user = 84963 MPDA- 97/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6541666666666667
Training on augumented user 41071 0/50 current_auc = 0.6541666666666667
User 41071 AUC after training: 0.6513888888888888
User 41071 does not improve AUC. Reverting changes.
Training on augumented user 111074 1/50 current_auc = 0.6541666666666667
User 111074 AUC after training: 0.6541666666666667
User 111074 does not improve AUC. Reverting changes.
Training on augumented user 25311 2/50 current_auc = 0.6541666666666667
User 25311 AUC after training: 0.6541666666666667
User 25311 does not improve AUC. Reverting changes.
Training on augumented user 2229 3/50 current_auc = 0.6541666666666667
User 2229 AUC after training: 0.6541666666666667
User 2229 does not improve AUC. Reverting changes.
Training on augumented user 51031 4/50 current_auc = 0.6541666666666667
User 51031 AUC after training: 0.6541666666666667
User 51031 does not improve AUC. Reverting changes.
Training on augumented user 96603 5/50 current_auc = 0.6541666666666667
User 96603 AUC after training: 0.6527777777777778
User 96603 does not improve AUC. Reverting changes.
Training on augumented user 94967 6/50 current_auc = 0.6541666666666667
User 94967 AUC after training: 0.6569444444444444
User 94967 improves AUC. Keeping the model.
Training on augumented user 17480 7/50 current_auc = 0.6569444444444444
User 17480 AUC after training: 0.6541666666666667
User 17480 does not improve AUC. Reverting changes.
Training on augumented user 72340 8/50 current_auc = 0.6569444444444444
User 72340 AUC after training: 0.6555555555555556
User 72340 does not improve AUC. Reverting changes.
Training on augumented user 100360 9/50 current_auc = 0.6569444444444444
User 100360 AUC after training: 0.6583333333333333
User 100360 improves AUC. Keeping the model.
Training on augumented user 59648 10/50 current_auc = 0.6583333333333333
User 59648 AUC after training: 0.6597222222222222
User 59648 improves AUC. Keeping the model.
Training on augumented user 131303 11/50 current_auc = 0.6597222222222222
User 131303 AUC after training: 0.6597222222222222
User 131303 does not improve AUC. Reverting changes.
Training on augumented user 84675 12/50 current_auc = 0.6597222222222222
User 84675 AUC after training: 0.6583333333333333
User 84675 does not improve AUC. Reverting changes.
Training on augumented user 96367 13/50 current_auc = 0.6597222222222222
User 96367 AUC after training: 0.6583333333333333
User 96367 does not improve AUC. Reverting changes.
Training on augumented user 8030 14/50 current_auc = 0.6597222222222222
User 8030 AUC after training: 0.6555555555555556
User 8030 does not improve AUC. Reverting changes.
Training on augumented user 69725 15/50 current_auc = 0.6597222222222222
User 69725 AUC after training: 0.6569444444444444
User 69725 does not improve AUC. Reverting changes.
Training on augumented user 85699 16/50 current_auc = 0.6597222222222222
User 85699 AUC after training: 0.6527777777777778
User 85699 does not improve AUC. Reverting changes.
Training on augumented user 114715 17/50 current_auc = 0.6597222222222222
User 114715 AUC after training: 0.6583333333333333
User 114715 does not improve AUC. Reverting changes.
Training on augumented user 90771 18/50 current_auc = 0.6597222222222222
User 90771 AUC after training: 0.6583333333333333
User 90771 does not improve AUC. Reverting changes.
Training on augumented user 79772 19/50 current_auc = 0.6597222222222222
User 79772 AUC after training: 0.6583333333333333
User 79772 does not improve AUC. Reverting changes.
Training on augumented user 58673 20/50 current_auc = 0.6597222222222222
User 58673 AUC after training: 0.6583333333333333
User 58673 does not improve AUC. Reverting changes.
Training on augumented user 23881 21/50 current_auc = 0.6597222222222222
User 23881 AUC after training: 0.6569444444444444
User 23881 does not improve AUC. Reverting changes.
Training on augumented user 52239 22/50 current_auc = 0.6597222222222222
User 52239 AUC after training: 0.6555555555555556
User 52239 does not improve AUC. Reverting changes.
Training on augumented user 77475 23/50 current_auc = 0.6597222222222222
User 77475 AUC after training: 0.6597222222222222
User 77475 does not improve AUC. Reverting changes.
Training on augumented user 109836 24/50 current_auc = 0.6597222222222222
User 109836 AUC after training: 0.6583333333333333
User 109836 does not improve AUC. Reverting changes.
Training on augumented user 28246 25/50 current_auc = 0.6597222222222222
User 28246 AUC after training: 0.6583333333333333
User 28246 does not improve AUC. Reverting changes.
Training on augumented user 476 26/50 current_auc = 0.6597222222222222
User 476 AUC after training: 0.6597222222222222
User 476 does not improve AUC. Reverting changes.
Training on augumented user 127687 27/50 current_auc = 0.6597222222222222
User 127687 AUC after training: 0.6611111111111111
User 127687 improves AUC. Keeping the model.
Training on augumented user 84630 28/50 current_auc = 0.6611111111111111
User 84630 AUC after training: 0.6597222222222222
User 84630 does not improve AUC. Reverting changes.
Training on augumented user 92734 29/50 current_auc = 0.6611111111111111
User 92734 AUC after training: 0.6583333333333333
User 92734 does not improve AUC. Reverting changes.
Training on augumented user 110316 30/50 current_auc = 0.6611111111111111
User 110316 AUC after training: 0.6583333333333333
User 110316 does not improve AUC. Reverting changes.
Training on augumented user 93463 31/50 current_auc = 0.6611111111111111
User 93463 AUC after training: 0.65
User 93463 does not improve AUC. Reverting changes.
Training on augumented user 9618 32/50 current_auc = 0.6611111111111111
User 9618 AUC after training: 0.6583333333333333
User 9618 does not improve AUC. Reverting changes.
Training on augumented user 13797 33/50 current_auc = 0.6611111111111111
User 13797 AUC after training: 0.6583333333333333
User 13797 does not improve AUC. Reverting changes.
Training on augumented user 121924 34/50 current_auc = 0.6611111111111111
User 121924 AUC after training: 0.6583333333333333
User 121924 does not improve AUC. Reverting changes.
Training on augumented user 32012 35/50 current_auc = 0.6611111111111111
User 32012 AUC after training: 0.6583333333333333
User 32012 does not improve AUC. Reverting changes.
Training on augumented user 48603 36/50 current_auc = 0.6611111111111111
User 48603 AUC after training: 0.6583333333333333
User 48603 does not improve AUC. Reverting changes.
Training on augumented user 87557 37/50 current_auc = 0.6611111111111111
User 87557 AUC after training: 0.6583333333333333
User 87557 does not improve AUC. Reverting changes.
Training on augumented user 86389 38/50 current_auc = 0.6611111111111111
User 86389 AUC after training: 0.6597222222222222
User 86389 does not improve AUC. Reverting changes.
Training on augumented user 110348 39/50 current_auc = 0.6611111111111111
User 110348 AUC after training: 0.6583333333333333
User 110348 does not improve AUC. Reverting changes.
Training on augumented user 62226 40/50 current_auc = 0.6611111111111111
User 62226 AUC after training: 0.6583333333333333
User 62226 does not improve AUC. Reverting changes.
Training on augumented user 112465 41/50 current_auc = 0.6611111111111111
User 112465 AUC after training: 0.6583333333333333
User 112465 does not improve AUC. Reverting changes.
Training on augumented user 75802 42/50 current_auc = 0.6611111111111111
User 75802 AUC after training: 0.6555555555555556
User 75802 does not improve AUC. Reverting changes.
Training on augumented user 117248 43/50 current_auc = 0.6611111111111111
User 117248 AUC after training: 0.6611111111111111
User 117248 does not improve AUC. Reverting changes.
Training on augumented user 48295 44/50 current_auc = 0.6611111111111111
User 48295 AUC after training: 0.6597222222222223
User 48295 does not improve AUC. Reverting changes.
Training on augumented user 122595 45/50 current_auc = 0.6611111111111111
User 122595 AUC after training: 0.6611111111111111
User 122595 does not improve AUC. Reverting changes.
Training on augumented user 52322 46/50 current_auc = 0.6611111111111111
User 52322 AUC after training: 0.6597222222222222
User 52322 does not improve AUC. Reverting changes.
Training on augumented user 53335 47/50 current_auc = 0.6611111111111111
User 53335 AUC after training: 0.6430555555555555
User 53335 does not improve AUC. Reverting changes.
Training on augumented user 75666 48/50 current_auc = 0.6611111111111111
User 75666 AUC after training: 0.6583333333333333
User 75666 does not improve AUC. Reverting changes.
Training on augumented user 95019 49/50 current_auc = 0.6611111111111111
User 95019 AUC after training: 0.6597222222222222
User 95019 does not improve AUC. Reverting changes.
[2024-12-02 18:30:38.506362] start test user 84964 98/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:30:39.137650] start test user 84964 98/568 recall augumented users by random, augumented_users = [5247, 58494, 121200, 31167, 74727, 10066, 6207, 116820, 72034, 59082, 10906, 6018, 5794, 71413, 119422, 13010, 34366, 67744, 96328, 9780, 45783, 8294, 89562, 18175, 97477, 78637, 95572, 51347, 36198, 60401, 88733, 79850, 46784, 46375, 132250, 97574, 4820, 104626, 103328, 75183, 44898, 65020, 81375, 22450, 120479, 108387, 27372, 21085, 33380, 55209]
[2024-12-02 18:30:39.163036] user = 84964 Cloud 98/568
[2024-12-02 18:30:39.179951] user = 84964 Local 98/568
[2024-12-02 18:30:39.348545] user = 84964 Local+ 98/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:30:42.369297] user = 84964 MPDA- 98/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6153846153846154
Training on augumented user 5247 0/50 current_auc = 0.6153846153846154
User 5247 AUC after training: 0.6117216117216118
User 5247 does not improve AUC. Reverting changes.
Training on augumented user 58494 1/50 current_auc = 0.6153846153846154
User 58494 AUC after training: 0.6153846153846154
User 58494 does not improve AUC. Reverting changes.
Training on augumented user 121200 2/50 current_auc = 0.6153846153846154
User 121200 AUC after training: 0.6153846153846154
User 121200 does not improve AUC. Reverting changes.
Training on augumented user 31167 3/50 current_auc = 0.6153846153846154
User 31167 AUC after training: 0.6153846153846154
User 31167 does not improve AUC. Reverting changes.
Training on augumented user 74727 4/50 current_auc = 0.6153846153846154
User 74727 AUC after training: 0.6153846153846154
User 74727 does not improve AUC. Reverting changes.
Training on augumented user 10066 5/50 current_auc = 0.6153846153846154
User 10066 AUC after training: 0.6117216117216118
User 10066 does not improve AUC. Reverting changes.
Training on augumented user 6207 6/50 current_auc = 0.6153846153846154
User 6207 AUC after training: 0.6153846153846154
User 6207 does not improve AUC. Reverting changes.
Training on augumented user 116820 7/50 current_auc = 0.6153846153846154
User 116820 AUC after training: 0.6117216117216118
User 116820 does not improve AUC. Reverting changes.
Training on augumented user 72034 8/50 current_auc = 0.6153846153846154
User 72034 AUC after training: 0.6117216117216118
User 72034 does not improve AUC. Reverting changes.
Training on augumented user 59082 9/50 current_auc = 0.6153846153846154
User 59082 AUC after training: 0.6153846153846154
User 59082 does not improve AUC. Reverting changes.
Training on augumented user 10906 10/50 current_auc = 0.6153846153846154
User 10906 AUC after training: 0.6153846153846154
User 10906 does not improve AUC. Reverting changes.
Training on augumented user 6018 11/50 current_auc = 0.6153846153846154
User 6018 AUC after training: 0.6153846153846154
User 6018 does not improve AUC. Reverting changes.
Training on augumented user 5794 12/50 current_auc = 0.6153846153846154
User 5794 AUC after training: 0.6153846153846154
User 5794 does not improve AUC. Reverting changes.
Training on augumented user 71413 13/50 current_auc = 0.6153846153846154
User 71413 AUC after training: 0.6153846153846154
User 71413 does not improve AUC. Reverting changes.
Training on augumented user 119422 14/50 current_auc = 0.6153846153846154
User 119422 AUC after training: 0.6117216117216118
User 119422 does not improve AUC. Reverting changes.
Training on augumented user 13010 15/50 current_auc = 0.6153846153846154
User 13010 AUC after training: 0.6190476190476191
User 13010 improves AUC. Keeping the model.
Training on augumented user 34366 16/50 current_auc = 0.6190476190476191
User 34366 AUC after training: 0.6117216117216118
User 34366 does not improve AUC. Reverting changes.
Training on augumented user 67744 17/50 current_auc = 0.6190476190476191
User 67744 AUC after training: 0.6190476190476191
User 67744 does not improve AUC. Reverting changes.
Training on augumented user 96328 18/50 current_auc = 0.6190476190476191
User 96328 AUC after training: 0.6190476190476191
User 96328 does not improve AUC. Reverting changes.
Training on augumented user 9780 19/50 current_auc = 0.6190476190476191
User 9780 AUC after training: 0.6117216117216118
User 9780 does not improve AUC. Reverting changes.
Training on augumented user 45783 20/50 current_auc = 0.6190476190476191
User 45783 AUC after training: 0.6153846153846154
User 45783 does not improve AUC. Reverting changes.
Training on augumented user 8294 21/50 current_auc = 0.6190476190476191
User 8294 AUC after training: 0.6190476190476191
User 8294 does not improve AUC. Reverting changes.
Training on augumented user 89562 22/50 current_auc = 0.6190476190476191
User 89562 AUC after training: 0.6153846153846154
User 89562 does not improve AUC. Reverting changes.
Training on augumented user 18175 23/50 current_auc = 0.6190476190476191
User 18175 AUC after training: 0.6190476190476191
User 18175 does not improve AUC. Reverting changes.
Training on augumented user 97477 24/50 current_auc = 0.6190476190476191
User 97477 AUC after training: 0.6153846153846154
User 97477 does not improve AUC. Reverting changes.
Training on augumented user 78637 25/50 current_auc = 0.6190476190476191
User 78637 AUC after training: 0.6190476190476191
User 78637 does not improve AUC. Reverting changes.
Training on augumented user 95572 26/50 current_auc = 0.6190476190476191
User 95572 AUC after training: 0.6153846153846154
User 95572 does not improve AUC. Reverting changes.
Training on augumented user 51347 27/50 current_auc = 0.6190476190476191
User 51347 AUC after training: 0.6117216117216118
User 51347 does not improve AUC. Reverting changes.
Training on augumented user 36198 28/50 current_auc = 0.6190476190476191
User 36198 AUC after training: 0.6153846153846154
User 36198 does not improve AUC. Reverting changes.
Training on augumented user 60401 29/50 current_auc = 0.6190476190476191
User 60401 AUC after training: 0.6190476190476191
User 60401 does not improve AUC. Reverting changes.
Training on augumented user 88733 30/50 current_auc = 0.6190476190476191
User 88733 AUC after training: 0.6153846153846154
User 88733 does not improve AUC. Reverting changes.
Training on augumented user 79850 31/50 current_auc = 0.6190476190476191
User 79850 AUC after training: 0.6153846153846154
User 79850 does not improve AUC. Reverting changes.
Training on augumented user 46784 32/50 current_auc = 0.6190476190476191
User 46784 AUC after training: 0.6153846153846154
User 46784 does not improve AUC. Reverting changes.
Training on augumented user 46375 33/50 current_auc = 0.6190476190476191
User 46375 AUC after training: 0.6153846153846154
User 46375 does not improve AUC. Reverting changes.
Training on augumented user 132250 34/50 current_auc = 0.6190476190476191
User 132250 AUC after training: 0.6153846153846154
User 132250 does not improve AUC. Reverting changes.
Training on augumented user 97574 35/50 current_auc = 0.6190476190476191
User 97574 AUC after training: 0.6153846153846154
User 97574 does not improve AUC. Reverting changes.
Training on augumented user 4820 36/50 current_auc = 0.6190476190476191
User 4820 AUC after training: 0.6117216117216118
User 4820 does not improve AUC. Reverting changes.
Training on augumented user 104626 37/50 current_auc = 0.6190476190476191
User 104626 AUC after training: 0.6190476190476191
User 104626 does not improve AUC. Reverting changes.
Training on augumented user 103328 38/50 current_auc = 0.6190476190476191
User 103328 AUC after training: 0.6153846153846154
User 103328 does not improve AUC. Reverting changes.
Training on augumented user 75183 39/50 current_auc = 0.6190476190476191
User 75183 AUC after training: 0.6153846153846154
User 75183 does not improve AUC. Reverting changes.
Training on augumented user 44898 40/50 current_auc = 0.6190476190476191
User 44898 AUC after training: 0.6117216117216118
User 44898 does not improve AUC. Reverting changes.
Training on augumented user 65020 41/50 current_auc = 0.6190476190476191
User 65020 AUC after training: 0.6117216117216118
User 65020 does not improve AUC. Reverting changes.
Training on augumented user 81375 42/50 current_auc = 0.6190476190476191
User 81375 AUC after training: 0.6153846153846154
User 81375 does not improve AUC. Reverting changes.
Training on augumented user 22450 43/50 current_auc = 0.6190476190476191
User 22450 AUC after training: 0.6153846153846154
User 22450 does not improve AUC. Reverting changes.
Training on augumented user 120479 44/50 current_auc = 0.6190476190476191
User 120479 AUC after training: 0.6117216117216118
User 120479 does not improve AUC. Reverting changes.
Training on augumented user 108387 45/50 current_auc = 0.6190476190476191
User 108387 AUC after training: 0.6153846153846154
User 108387 does not improve AUC. Reverting changes.
Training on augumented user 27372 46/50 current_auc = 0.6190476190476191
User 27372 AUC after training: 0.6153846153846154
User 27372 does not improve AUC. Reverting changes.
Training on augumented user 21085 47/50 current_auc = 0.6190476190476191
User 21085 AUC after training: 0.6153846153846154
User 21085 does not improve AUC. Reverting changes.
Training on augumented user 33380 48/50 current_auc = 0.6190476190476191
User 33380 AUC after training: 0.6153846153846154
User 33380 does not improve AUC. Reverting changes.
Training on augumented user 55209 49/50 current_auc = 0.6190476190476191
User 55209 AUC after training: 0.6153846153846154
User 55209 does not improve AUC. Reverting changes.
[2024-12-02 18:31:11.622167] start test user 84980 99/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:31:12.210048] start test user 84980 99/568 recall augumented users by random, augumented_users = [79070, 59561, 127138, 10361, 95659, 24648, 118515, 123282, 71245, 82947, 7966, 32921, 92032, 21125, 112031, 88902, 58636, 26551, 59968, 51269, 125489, 17535, 14946, 44209, 29991, 46817, 84050, 137369, 45178, 129761, 81811, 49149, 112981, 37997, 81980, 3366, 18586, 42970, 10180, 59427, 92854, 114157, 113962, 117680, 88771, 5899, 99017, 90353, 63998, 58266]
[2024-12-02 18:31:12.233389] user = 84980 Cloud 99/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:31:12.242090] user = 84980 Local 99/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:31:12.265316] user = 84980 Local+ 99/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:31:13.788484] user = 84980 MPDA- 99/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 79070 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79070 AUC after training: 0.5
User 79070 does not improve AUC. Reverting changes.
Training on augumented user 59561 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59561 AUC after training: 0.5
User 59561 does not improve AUC. Reverting changes.
Training on augumented user 127138 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127138 AUC after training: 0.5
User 127138 does not improve AUC. Reverting changes.
Training on augumented user 10361 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10361 AUC after training: 0.5
User 10361 does not improve AUC. Reverting changes.
Training on augumented user 95659 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95659 AUC after training: 0.5
User 95659 does not improve AUC. Reverting changes.
Training on augumented user 24648 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24648 AUC after training: 0.5
User 24648 does not improve AUC. Reverting changes.
Training on augumented user 118515 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118515 AUC after training: 0.5
User 118515 does not improve AUC. Reverting changes.
Training on augumented user 123282 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123282 AUC after training: 0.5
User 123282 does not improve AUC. Reverting changes.
Training on augumented user 71245 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71245 AUC after training: 0.5
User 71245 does not improve AUC. Reverting changes.
Training on augumented user 82947 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82947 AUC after training: 0.5
User 82947 does not improve AUC. Reverting changes.
Training on augumented user 7966 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7966 AUC after training: 0.5
User 7966 does not improve AUC. Reverting changes.
Training on augumented user 32921 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32921 AUC after training: 0.5
User 32921 does not improve AUC. Reverting changes.
Training on augumented user 92032 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92032 AUC after training: 0.5
User 92032 does not improve AUC. Reverting changes.
Training on augumented user 21125 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21125 AUC after training: 0.5
User 21125 does not improve AUC. Reverting changes.
Training on augumented user 112031 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112031 AUC after training: 0.5
User 112031 does not improve AUC. Reverting changes.
Training on augumented user 88902 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88902 AUC after training: 0.5
User 88902 does not improve AUC. Reverting changes.
Training on augumented user 58636 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58636 AUC after training: 0.5
User 58636 does not improve AUC. Reverting changes.
Training on augumented user 26551 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26551 AUC after training: 0.5
User 26551 does not improve AUC. Reverting changes.
Training on augumented user 59968 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59968 AUC after training: 0.5
User 59968 does not improve AUC. Reverting changes.
Training on augumented user 51269 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51269 AUC after training: 0.5
User 51269 does not improve AUC. Reverting changes.
Training on augumented user 125489 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125489 AUC after training: 0.5
User 125489 does not improve AUC. Reverting changes.
Training on augumented user 17535 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17535 AUC after training: 0.5
User 17535 does not improve AUC. Reverting changes.
Training on augumented user 14946 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14946 AUC after training: 0.5
User 14946 does not improve AUC. Reverting changes.
Training on augumented user 44209 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44209 AUC after training: 0.5
User 44209 does not improve AUC. Reverting changes.
Training on augumented user 29991 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29991 AUC after training: 0.5
User 29991 does not improve AUC. Reverting changes.
Training on augumented user 46817 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46817 AUC after training: 0.5
User 46817 does not improve AUC. Reverting changes.
Training on augumented user 84050 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84050 AUC after training: 0.5
User 84050 does not improve AUC. Reverting changes.
Training on augumented user 137369 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137369 AUC after training: 0.5
User 137369 does not improve AUC. Reverting changes.
Training on augumented user 45178 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45178 AUC after training: 0.5
User 45178 does not improve AUC. Reverting changes.
Training on augumented user 129761 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129761 AUC after training: 0.5
User 129761 does not improve AUC. Reverting changes.
Training on augumented user 81811 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81811 AUC after training: 0.5
User 81811 does not improve AUC. Reverting changes.
Training on augumented user 49149 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49149 AUC after training: 0.5
User 49149 does not improve AUC. Reverting changes.
Training on augumented user 112981 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112981 AUC after training: 0.5
User 112981 does not improve AUC. Reverting changes.
Training on augumented user 37997 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37997 AUC after training: 0.5
User 37997 does not improve AUC. Reverting changes.
Training on augumented user 81980 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81980 AUC after training: 0.5
User 81980 does not improve AUC. Reverting changes.
Training on augumented user 3366 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3366 AUC after training: 0.5
User 3366 does not improve AUC. Reverting changes.
Training on augumented user 18586 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18586 AUC after training: 0.5
User 18586 does not improve AUC. Reverting changes.
Training on augumented user 42970 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42970 AUC after training: 0.5
User 42970 does not improve AUC. Reverting changes.
Training on augumented user 10180 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10180 AUC after training: 0.5
User 10180 does not improve AUC. Reverting changes.
Training on augumented user 59427 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59427 AUC after training: 0.5
User 59427 does not improve AUC. Reverting changes.
Training on augumented user 92854 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92854 AUC after training: 0.5
User 92854 does not improve AUC. Reverting changes.
Training on augumented user 114157 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114157 AUC after training: 0.5
User 114157 does not improve AUC. Reverting changes.
Training on augumented user 113962 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113962 AUC after training: 0.5
User 113962 does not improve AUC. Reverting changes.
Training on augumented user 117680 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117680 AUC after training: 0.5
User 117680 does not improve AUC. Reverting changes.
Training on augumented user 88771 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88771 AUC after training: 0.5
User 88771 does not improve AUC. Reverting changes.
Training on augumented user 5899 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5899 AUC after training: 0.5
User 5899 does not improve AUC. Reverting changes.
Training on augumented user 99017 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99017 AUC after training: 0.5
User 99017 does not improve AUC. Reverting changes.
Training on augumented user 90353 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90353 AUC after training: 0.5
User 90353 does not improve AUC. Reverting changes.
Training on augumented user 63998 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63998 AUC after training: 0.5
User 63998 does not improve AUC. Reverting changes.
Training on augumented user 58266 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58266 AUC after training: 0.5
User 58266 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:31:39.507584] start test user 85014 100/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:31:40.183268] start test user 85014 100/568 recall augumented users by random, augumented_users = [96782, 93804, 124691, 82842, 47004, 94575, 127173, 95300, 17486, 63053, 81265, 28602, 47899, 57127, 37391, 125957, 137040, 30193, 25654, 8105, 129806, 86278, 29640, 64731, 22541, 26697, 138199, 98130, 23743, 30835, 67180, 119139, 99211, 111791, 27186, 10265, 76879, 126974, 50898, 90713, 19129, 85658, 43486, 45572, 45828, 86639, 49881, 19552, 43399, 132266]
[2024-12-02 18:31:40.200736] user = 85014 Cloud 100/568
[2024-12-02 18:31:40.213835] user = 85014 Local 100/568
[2024-12-02 18:31:40.258928] user = 85014 Local+ 100/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:31:42.983689] user = 85014 MPDA- 100/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5950617283950618
Training on augumented user 96782 0/50 current_auc = 0.5950617283950618
User 96782 AUC after training: 0.5950617283950618
User 96782 does not improve AUC. Reverting changes.
Training on augumented user 93804 1/50 current_auc = 0.5950617283950618
User 93804 AUC after training: 0.5975308641975309
User 93804 improves AUC. Keeping the model.
Training on augumented user 124691 2/50 current_auc = 0.5975308641975309
User 124691 AUC after training: 0.5987654320987654
User 124691 improves AUC. Keeping the model.
Training on augumented user 82842 3/50 current_auc = 0.5987654320987654
User 82842 AUC after training: 0.5962962962962962
User 82842 does not improve AUC. Reverting changes.
Training on augumented user 47004 4/50 current_auc = 0.5987654320987654
User 47004 AUC after training: 0.5975308641975309
User 47004 does not improve AUC. Reverting changes.
Training on augumented user 94575 5/50 current_auc = 0.5987654320987654
User 94575 AUC after training: 0.5975308641975309
User 94575 does not improve AUC. Reverting changes.
Training on augumented user 127173 6/50 current_auc = 0.5987654320987654
User 127173 AUC after training: 0.6012345679012345
User 127173 improves AUC. Keeping the model.
Training on augumented user 95300 7/50 current_auc = 0.6012345679012345
User 95300 AUC after training: 0.6024691358024691
User 95300 improves AUC. Keeping the model.
Training on augumented user 17486 8/50 current_auc = 0.6024691358024691
User 17486 AUC after training: 0.6
User 17486 does not improve AUC. Reverting changes.
Training on augumented user 63053 9/50 current_auc = 0.6024691358024691
User 63053 AUC after training: 0.6012345679012345
User 63053 does not improve AUC. Reverting changes.
Training on augumented user 81265 10/50 current_auc = 0.6024691358024691
User 81265 AUC after training: 0.6024691358024691
User 81265 does not improve AUC. Reverting changes.
Training on augumented user 28602 11/50 current_auc = 0.6024691358024691
User 28602 AUC after training: 0.5975308641975309
User 28602 does not improve AUC. Reverting changes.
Training on augumented user 47899 12/50 current_auc = 0.6024691358024691
User 47899 AUC after training: 0.6024691358024691
User 47899 does not improve AUC. Reverting changes.
Training on augumented user 57127 13/50 current_auc = 0.6024691358024691
User 57127 AUC after training: 0.5962962962962962
User 57127 does not improve AUC. Reverting changes.
Training on augumented user 37391 14/50 current_auc = 0.6024691358024691
User 37391 AUC after training: 0.6012345679012345
User 37391 does not improve AUC. Reverting changes.
Training on augumented user 125957 15/50 current_auc = 0.6024691358024691
User 125957 AUC after training: 0.6024691358024691
User 125957 does not improve AUC. Reverting changes.
Training on augumented user 137040 16/50 current_auc = 0.6024691358024691
User 137040 AUC after training: 0.6024691358024691
User 137040 does not improve AUC. Reverting changes.
Training on augumented user 30193 17/50 current_auc = 0.6024691358024691
User 30193 AUC after training: 0.6024691358024691
User 30193 does not improve AUC. Reverting changes.
Training on augumented user 25654 18/50 current_auc = 0.6024691358024691
User 25654 AUC after training: 0.6024691358024691
User 25654 does not improve AUC. Reverting changes.
Training on augumented user 8105 19/50 current_auc = 0.6024691358024691
User 8105 AUC after training: 0.6024691358024691
User 8105 does not improve AUC. Reverting changes.
Training on augumented user 129806 20/50 current_auc = 0.6024691358024691
User 129806 AUC after training: 0.6024691358024691
User 129806 does not improve AUC. Reverting changes.
Training on augumented user 86278 21/50 current_auc = 0.6024691358024691
User 86278 AUC after training: 0.6012345679012345
User 86278 does not improve AUC. Reverting changes.
Training on augumented user 29640 22/50 current_auc = 0.6024691358024691
User 29640 AUC after training: 0.6024691358024691
User 29640 does not improve AUC. Reverting changes.
Training on augumented user 64731 23/50 current_auc = 0.6024691358024691
User 64731 AUC after training: 0.5975308641975309
User 64731 does not improve AUC. Reverting changes.
Training on augumented user 22541 24/50 current_auc = 0.6024691358024691
User 22541 AUC after training: 0.6012345679012345
User 22541 does not improve AUC. Reverting changes.
Training on augumented user 26697 25/50 current_auc = 0.6024691358024691
User 26697 AUC after training: 0.6024691358024691
User 26697 does not improve AUC. Reverting changes.
Training on augumented user 138199 26/50 current_auc = 0.6024691358024691
User 138199 AUC after training: 0.5962962962962962
User 138199 does not improve AUC. Reverting changes.
Training on augumented user 98130 27/50 current_auc = 0.6024691358024691
User 98130 AUC after training: 0.6012345679012345
User 98130 does not improve AUC. Reverting changes.
Training on augumented user 23743 28/50 current_auc = 0.6024691358024691
User 23743 AUC after training: 0.5925925925925926
User 23743 does not improve AUC. Reverting changes.
Training on augumented user 30835 29/50 current_auc = 0.6024691358024691
User 30835 AUC after training: 0.5981481481481482
User 30835 does not improve AUC. Reverting changes.
Training on augumented user 67180 30/50 current_auc = 0.6024691358024691
User 67180 AUC after training: 0.5987654320987654
User 67180 does not improve AUC. Reverting changes.
Training on augumented user 119139 31/50 current_auc = 0.6024691358024691
User 119139 AUC after training: 0.6012345679012345
User 119139 does not improve AUC. Reverting changes.
Training on augumented user 99211 32/50 current_auc = 0.6024691358024691
User 99211 AUC after training: 0.6024691358024691
User 99211 does not improve AUC. Reverting changes.
Training on augumented user 111791 33/50 current_auc = 0.6024691358024691
User 111791 AUC after training: 0.6024691358024691
User 111791 does not improve AUC. Reverting changes.
Training on augumented user 27186 34/50 current_auc = 0.6024691358024691
User 27186 AUC after training: 0.6
User 27186 does not improve AUC. Reverting changes.
Training on augumented user 10265 35/50 current_auc = 0.6024691358024691
User 10265 AUC after training: 0.6024691358024691
User 10265 does not improve AUC. Reverting changes.
Training on augumented user 76879 36/50 current_auc = 0.6024691358024691
User 76879 AUC after training: 0.5975308641975309
User 76879 does not improve AUC. Reverting changes.
Training on augumented user 126974 37/50 current_auc = 0.6024691358024691
User 126974 AUC after training: 0.6024691358024691
User 126974 does not improve AUC. Reverting changes.
Training on augumented user 50898 38/50 current_auc = 0.6024691358024691
User 50898 AUC after training: 0.5888888888888889
User 50898 does not improve AUC. Reverting changes.
Training on augumented user 90713 39/50 current_auc = 0.6024691358024691
User 90713 AUC after training: 0.6012345679012345
User 90713 does not improve AUC. Reverting changes.
Training on augumented user 19129 40/50 current_auc = 0.6024691358024691
User 19129 AUC after training: 0.6012345679012345
User 19129 does not improve AUC. Reverting changes.
Training on augumented user 85658 41/50 current_auc = 0.6024691358024691
User 85658 AUC after training: 0.6024691358024691
User 85658 does not improve AUC. Reverting changes.
Training on augumented user 43486 42/50 current_auc = 0.6024691358024691
User 43486 AUC after training: 0.6012345679012345
User 43486 does not improve AUC. Reverting changes.
Training on augumented user 45572 43/50 current_auc = 0.6024691358024691
User 45572 AUC after training: 0.6024691358024691
User 45572 does not improve AUC. Reverting changes.
Training on augumented user 45828 44/50 current_auc = 0.6024691358024691
User 45828 AUC after training: 0.6012345679012345
User 45828 does not improve AUC. Reverting changes.
Training on augumented user 86639 45/50 current_auc = 0.6024691358024691
User 86639 AUC after training: 0.6012345679012345
User 86639 does not improve AUC. Reverting changes.
Training on augumented user 49881 46/50 current_auc = 0.6024691358024691
User 49881 AUC after training: 0.6037037037037036
User 49881 improves AUC. Keeping the model.
Training on augumented user 19552 47/50 current_auc = 0.6037037037037036
User 19552 AUC after training: 0.6024691358024691
User 19552 does not improve AUC. Reverting changes.
Training on augumented user 43399 48/50 current_auc = 0.6037037037037036
User 43399 AUC after training: 0.6037037037037036
User 43399 does not improve AUC. Reverting changes.
Training on augumented user 132266 49/50 current_auc = 0.6037037037037036
User 132266 AUC after training: 0.6018518518518517
User 132266 does not improve AUC. Reverting changes.
[2024-12-02 18:32:08.870275] start test user 85021 101/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:32:09.300495] start test user 85021 101/568 recall augumented users by random, augumented_users = [89079, 69837, 123541, 117580, 110170, 97182, 48468, 90775, 94971, 34479, 52653, 60404, 74116, 5106, 100944, 107930, 36736, 135692, 56078, 20247, 136956, 5213, 91996, 3367, 75937, 113897, 85640, 19738, 66981, 1731, 27748, 54160, 63046, 35413, 29231, 77842, 4777, 16772, 49533, 72978, 132324, 68836, 29820, 135903, 67737, 104142, 9950, 99743, 55286, 41192]
[2024-12-02 18:32:09.315684] user = 85021 Cloud 101/568
[2024-12-02 18:32:09.329141] user = 85021 Local 101/568
[2024-12-02 18:32:09.375116] user = 85021 Local+ 101/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:32:11.789345] user = 85021 MPDA- 101/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7922705314009661
Training on augumented user 89079 0/50 current_auc = 0.7922705314009661
User 89079 AUC after training: 0.7922705314009661
User 89079 does not improve AUC. Reverting changes.
Training on augumented user 69837 1/50 current_auc = 0.7922705314009661
User 69837 AUC after training: 0.7922705314009661
User 69837 does not improve AUC. Reverting changes.
Training on augumented user 123541 2/50 current_auc = 0.7922705314009661
User 123541 AUC after training: 0.78743961352657
User 123541 does not improve AUC. Reverting changes.
Training on augumented user 117580 3/50 current_auc = 0.7922705314009661
User 117580 AUC after training: 0.78743961352657
User 117580 does not improve AUC. Reverting changes.
Training on augumented user 110170 4/50 current_auc = 0.7922705314009661
User 110170 AUC after training: 0.78743961352657
User 110170 does not improve AUC. Reverting changes.
Training on augumented user 97182 5/50 current_auc = 0.7922705314009661
User 97182 AUC after training: 0.7922705314009661
User 97182 does not improve AUC. Reverting changes.
Training on augumented user 48468 6/50 current_auc = 0.7922705314009661
User 48468 AUC after training: 0.7922705314009661
User 48468 does not improve AUC. Reverting changes.
Training on augumented user 90775 7/50 current_auc = 0.7922705314009661
User 90775 AUC after training: 0.7922705314009661
User 90775 does not improve AUC. Reverting changes.
Training on augumented user 94971 8/50 current_auc = 0.7922705314009661
User 94971 AUC after training: 0.7971014492753623
User 94971 improves AUC. Keeping the model.
Training on augumented user 34479 9/50 current_auc = 0.7971014492753623
User 34479 AUC after training: 0.7922705314009661
User 34479 does not improve AUC. Reverting changes.
Training on augumented user 52653 10/50 current_auc = 0.7971014492753623
User 52653 AUC after training: 0.78743961352657
User 52653 does not improve AUC. Reverting changes.
Training on augumented user 60404 11/50 current_auc = 0.7971014492753623
User 60404 AUC after training: 0.78743961352657
User 60404 does not improve AUC. Reverting changes.
Training on augumented user 74116 12/50 current_auc = 0.7971014492753623
User 74116 AUC after training: 0.7971014492753623
User 74116 does not improve AUC. Reverting changes.
Training on augumented user 5106 13/50 current_auc = 0.7971014492753623
User 5106 AUC after training: 0.78743961352657
User 5106 does not improve AUC. Reverting changes.
Training on augumented user 100944 14/50 current_auc = 0.7971014492753623
User 100944 AUC after training: 0.7971014492753623
User 100944 does not improve AUC. Reverting changes.
Training on augumented user 107930 15/50 current_auc = 0.7971014492753623
User 107930 AUC after training: 0.7922705314009661
User 107930 does not improve AUC. Reverting changes.
Training on augumented user 36736 16/50 current_auc = 0.7971014492753623
User 36736 AUC after training: 0.7922705314009661
User 36736 does not improve AUC. Reverting changes.
Training on augumented user 135692 17/50 current_auc = 0.7971014492753623
User 135692 AUC after training: 0.78743961352657
User 135692 does not improve AUC. Reverting changes.
Training on augumented user 56078 18/50 current_auc = 0.7971014492753623
User 56078 AUC after training: 0.7971014492753623
User 56078 does not improve AUC. Reverting changes.
Training on augumented user 20247 19/50 current_auc = 0.7971014492753623
User 20247 AUC after training: 0.7922705314009661
User 20247 does not improve AUC. Reverting changes.
Training on augumented user 136956 20/50 current_auc = 0.7971014492753623
User 136956 AUC after training: 0.7922705314009661
User 136956 does not improve AUC. Reverting changes.
Training on augumented user 5213 21/50 current_auc = 0.7971014492753623
User 5213 AUC after training: 0.7922705314009661
User 5213 does not improve AUC. Reverting changes.
Training on augumented user 91996 22/50 current_auc = 0.7971014492753623
User 91996 AUC after training: 0.7922705314009661
User 91996 does not improve AUC. Reverting changes.
Training on augumented user 3367 23/50 current_auc = 0.7971014492753623
User 3367 AUC after training: 0.7922705314009661
User 3367 does not improve AUC. Reverting changes.
Training on augumented user 75937 24/50 current_auc = 0.7971014492753623
User 75937 AUC after training: 0.7922705314009661
User 75937 does not improve AUC. Reverting changes.
Training on augumented user 113897 25/50 current_auc = 0.7971014492753623
User 113897 AUC after training: 0.7971014492753623
User 113897 does not improve AUC. Reverting changes.
Training on augumented user 85640 26/50 current_auc = 0.7971014492753623
User 85640 AUC after training: 0.782608695652174
User 85640 does not improve AUC. Reverting changes.
Training on augumented user 19738 27/50 current_auc = 0.7971014492753623
User 19738 AUC after training: 0.7922705314009661
User 19738 does not improve AUC. Reverting changes.
Training on augumented user 66981 28/50 current_auc = 0.7971014492753623
User 66981 AUC after training: 0.78743961352657
User 66981 does not improve AUC. Reverting changes.
Training on augumented user 1731 29/50 current_auc = 0.7971014492753623
User 1731 AUC after training: 0.7971014492753623
User 1731 does not improve AUC. Reverting changes.
Training on augumented user 27748 30/50 current_auc = 0.7971014492753623
User 27748 AUC after training: 0.7971014492753623
User 27748 does not improve AUC. Reverting changes.
Training on augumented user 54160 31/50 current_auc = 0.7971014492753623
User 54160 AUC after training: 0.7922705314009661
User 54160 does not improve AUC. Reverting changes.
Training on augumented user 63046 32/50 current_auc = 0.7971014492753623
User 63046 AUC after training: 0.7922705314009661
User 63046 does not improve AUC. Reverting changes.
Training on augumented user 35413 33/50 current_auc = 0.7971014492753623
User 35413 AUC after training: 0.78743961352657
User 35413 does not improve AUC. Reverting changes.
Training on augumented user 29231 34/50 current_auc = 0.7971014492753623
User 29231 AUC after training: 0.7922705314009661
User 29231 does not improve AUC. Reverting changes.
Training on augumented user 77842 35/50 current_auc = 0.7971014492753623
User 77842 AUC after training: 0.7971014492753623
User 77842 does not improve AUC. Reverting changes.
Training on augumented user 4777 36/50 current_auc = 0.7971014492753623
User 4777 AUC after training: 0.7922705314009661
User 4777 does not improve AUC. Reverting changes.
Training on augumented user 16772 37/50 current_auc = 0.7971014492753623
User 16772 AUC after training: 0.7971014492753623
User 16772 does not improve AUC. Reverting changes.
Training on augumented user 49533 38/50 current_auc = 0.7971014492753623
User 49533 AUC after training: 0.7971014492753623
User 49533 does not improve AUC. Reverting changes.
Training on augumented user 72978 39/50 current_auc = 0.7971014492753623
User 72978 AUC after training: 0.7922705314009661
User 72978 does not improve AUC. Reverting changes.
Training on augumented user 132324 40/50 current_auc = 0.7971014492753623
User 132324 AUC after training: 0.7971014492753623
User 132324 does not improve AUC. Reverting changes.
Training on augumented user 68836 41/50 current_auc = 0.7971014492753623
User 68836 AUC after training: 0.7922705314009661
User 68836 does not improve AUC. Reverting changes.
Training on augumented user 29820 42/50 current_auc = 0.7971014492753623
User 29820 AUC after training: 0.7922705314009661
User 29820 does not improve AUC. Reverting changes.
Training on augumented user 135903 43/50 current_auc = 0.7971014492753623
User 135903 AUC after training: 0.7922705314009661
User 135903 does not improve AUC. Reverting changes.
Training on augumented user 67737 44/50 current_auc = 0.7971014492753623
User 67737 AUC after training: 0.7971014492753623
User 67737 does not improve AUC. Reverting changes.
Training on augumented user 104142 45/50 current_auc = 0.7971014492753623
User 104142 AUC after training: 0.7971014492753623
User 104142 does not improve AUC. Reverting changes.
Training on augumented user 9950 46/50 current_auc = 0.7971014492753623
User 9950 AUC after training: 0.7922705314009661
User 9950 does not improve AUC. Reverting changes.
Training on augumented user 99743 47/50 current_auc = 0.7971014492753623
User 99743 AUC after training: 0.7971014492753623
User 99743 does not improve AUC. Reverting changes.
Training on augumented user 55286 48/50 current_auc = 0.7971014492753623
User 55286 AUC after training: 0.7971014492753623
User 55286 does not improve AUC. Reverting changes.
Training on augumented user 41192 49/50 current_auc = 0.7971014492753623
User 41192 AUC after training: 0.7922705314009661
User 41192 does not improve AUC. Reverting changes.
[2024-12-02 18:32:40.221260] start test user 85041 102/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:32:40.760928] start test user 85041 102/568 recall augumented users by random, augumented_users = [34093, 47427, 97911, 92765, 47169, 13840, 97352, 82870, 133231, 44673, 49239, 118356, 60408, 114485, 120065, 45676, 3431, 125422, 129504, 117057, 39751, 15284, 134828, 102180, 71547, 23370, 1006, 58526, 133227, 126696, 100340, 64516, 117303, 44430, 3769, 93322, 130243, 22519, 37816, 136412, 105414, 88169, 135445, 65214, 91776, 2859, 15633, 111529, 78328, 130898]
[2024-12-02 18:32:40.775414] user = 85041 Cloud 102/568
[2024-12-02 18:32:40.796034] user = 85041 Local 102/568
[2024-12-02 18:32:40.821638] user = 85041 Local+ 102/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:32:43.168902] user = 85041 MPDA- 102/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7719298245614035
Training on augumented user 34093 0/50 current_auc = 0.7719298245614035
User 34093 AUC after training: 0.7719298245614035
User 34093 does not improve AUC. Reverting changes.
Training on augumented user 47427 1/50 current_auc = 0.7719298245614035
User 47427 AUC after training: 0.7719298245614035
User 47427 does not improve AUC. Reverting changes.
Training on augumented user 97911 2/50 current_auc = 0.7719298245614035
User 97911 AUC after training: 0.7719298245614035
User 97911 does not improve AUC. Reverting changes.
Training on augumented user 92765 3/50 current_auc = 0.7719298245614035
User 92765 AUC after training: 0.7719298245614035
User 92765 does not improve AUC. Reverting changes.
Training on augumented user 47169 4/50 current_auc = 0.7719298245614035
User 47169 AUC after training: 0.7719298245614035
User 47169 does not improve AUC. Reverting changes.
Training on augumented user 13840 5/50 current_auc = 0.7719298245614035
User 13840 AUC after training: 0.7719298245614035
User 13840 does not improve AUC. Reverting changes.
Training on augumented user 97352 6/50 current_auc = 0.7719298245614035
User 97352 AUC after training: 0.7719298245614035
User 97352 does not improve AUC. Reverting changes.
Training on augumented user 82870 7/50 current_auc = 0.7719298245614035
User 82870 AUC after training: 0.7719298245614035
User 82870 does not improve AUC. Reverting changes.
Training on augumented user 133231 8/50 current_auc = 0.7719298245614035
User 133231 AUC after training: 0.7719298245614035
User 133231 does not improve AUC. Reverting changes.
Training on augumented user 44673 9/50 current_auc = 0.7719298245614035
User 44673 AUC after training: 0.7719298245614035
User 44673 does not improve AUC. Reverting changes.
Training on augumented user 49239 10/50 current_auc = 0.7719298245614035
User 49239 AUC after training: 0.7543859649122808
User 49239 does not improve AUC. Reverting changes.
Training on augumented user 118356 11/50 current_auc = 0.7719298245614035
User 118356 AUC after training: 0.7719298245614035
User 118356 does not improve AUC. Reverting changes.
Training on augumented user 60408 12/50 current_auc = 0.7719298245614035
User 60408 AUC after training: 0.7894736842105263
User 60408 improves AUC. Keeping the model.
Training on augumented user 114485 13/50 current_auc = 0.7894736842105263
User 114485 AUC after training: 0.7543859649122808
User 114485 does not improve AUC. Reverting changes.
Training on augumented user 120065 14/50 current_auc = 0.7894736842105263
User 120065 AUC after training: 0.7543859649122808
User 120065 does not improve AUC. Reverting changes.
Training on augumented user 45676 15/50 current_auc = 0.7894736842105263
User 45676 AUC after training: 0.7894736842105263
User 45676 does not improve AUC. Reverting changes.
Training on augumented user 3431 16/50 current_auc = 0.7894736842105263
User 3431 AUC after training: 0.7894736842105263
User 3431 does not improve AUC. Reverting changes.
Training on augumented user 125422 17/50 current_auc = 0.7894736842105263
User 125422 AUC after training: 0.7543859649122808
User 125422 does not improve AUC. Reverting changes.
Training on augumented user 129504 18/50 current_auc = 0.7894736842105263
User 129504 AUC after training: 0.7719298245614035
User 129504 does not improve AUC. Reverting changes.
Training on augumented user 117057 19/50 current_auc = 0.7894736842105263
User 117057 AUC after training: 0.7543859649122808
User 117057 does not improve AUC. Reverting changes.
Training on augumented user 39751 20/50 current_auc = 0.7894736842105263
User 39751 AUC after training: 0.7719298245614035
User 39751 does not improve AUC. Reverting changes.
Training on augumented user 15284 21/50 current_auc = 0.7894736842105263
User 15284 AUC after training: 0.7894736842105263
User 15284 does not improve AUC. Reverting changes.
Training on augumented user 134828 22/50 current_auc = 0.7894736842105263
User 134828 AUC after training: 0.7894736842105263
User 134828 does not improve AUC. Reverting changes.
Training on augumented user 102180 23/50 current_auc = 0.7894736842105263
User 102180 AUC after training: 0.7894736842105263
User 102180 does not improve AUC. Reverting changes.
Training on augumented user 71547 24/50 current_auc = 0.7894736842105263
User 71547 AUC after training: 0.7719298245614036
User 71547 does not improve AUC. Reverting changes.
Training on augumented user 23370 25/50 current_auc = 0.7894736842105263
User 23370 AUC after training: 0.7543859649122808
User 23370 does not improve AUC. Reverting changes.
Training on augumented user 1006 26/50 current_auc = 0.7894736842105263
User 1006 AUC after training: 0.7543859649122808
User 1006 does not improve AUC. Reverting changes.
Training on augumented user 58526 27/50 current_auc = 0.7894736842105263
User 58526 AUC after training: 0.7719298245614035
User 58526 does not improve AUC. Reverting changes.
Training on augumented user 133227 28/50 current_auc = 0.7894736842105263
User 133227 AUC after training: 0.7543859649122808
User 133227 does not improve AUC. Reverting changes.
Training on augumented user 126696 29/50 current_auc = 0.7894736842105263
User 126696 AUC after training: 0.7543859649122808
User 126696 does not improve AUC. Reverting changes.
Training on augumented user 100340 30/50 current_auc = 0.7894736842105263
User 100340 AUC after training: 0.7719298245614035
User 100340 does not improve AUC. Reverting changes.
Training on augumented user 64516 31/50 current_auc = 0.7894736842105263
User 64516 AUC after training: 0.7543859649122808
User 64516 does not improve AUC. Reverting changes.
Training on augumented user 117303 32/50 current_auc = 0.7894736842105263
User 117303 AUC after training: 0.7719298245614036
User 117303 does not improve AUC. Reverting changes.
Training on augumented user 44430 33/50 current_auc = 0.7894736842105263
User 44430 AUC after training: 0.7894736842105263
User 44430 does not improve AUC. Reverting changes.
Training on augumented user 3769 34/50 current_auc = 0.7894736842105263
User 3769 AUC after training: 0.7894736842105263
User 3769 does not improve AUC. Reverting changes.
Training on augumented user 93322 35/50 current_auc = 0.7894736842105263
User 93322 AUC after training: 0.7894736842105263
User 93322 does not improve AUC. Reverting changes.
Training on augumented user 130243 36/50 current_auc = 0.7894736842105263
User 130243 AUC after training: 0.7894736842105263
User 130243 does not improve AUC. Reverting changes.
Training on augumented user 22519 37/50 current_auc = 0.7894736842105263
User 22519 AUC after training: 0.7543859649122808
User 22519 does not improve AUC. Reverting changes.
Training on augumented user 37816 38/50 current_auc = 0.7894736842105263
User 37816 AUC after training: 0.7543859649122808
User 37816 does not improve AUC. Reverting changes.
Training on augumented user 136412 39/50 current_auc = 0.7894736842105263
User 136412 AUC after training: 0.7719298245614036
User 136412 does not improve AUC. Reverting changes.
Training on augumented user 105414 40/50 current_auc = 0.7894736842105263
User 105414 AUC after training: 0.7719298245614036
User 105414 does not improve AUC. Reverting changes.
Training on augumented user 88169 41/50 current_auc = 0.7894736842105263
User 88169 AUC after training: 0.7543859649122808
User 88169 does not improve AUC. Reverting changes.
Training on augumented user 135445 42/50 current_auc = 0.7894736842105263
User 135445 AUC after training: 0.7543859649122808
User 135445 does not improve AUC. Reverting changes.
Training on augumented user 65214 43/50 current_auc = 0.7894736842105263
User 65214 AUC after training: 0.7543859649122808
User 65214 does not improve AUC. Reverting changes.
Training on augumented user 91776 44/50 current_auc = 0.7894736842105263
User 91776 AUC after training: 0.7543859649122808
User 91776 does not improve AUC. Reverting changes.
Training on augumented user 2859 45/50 current_auc = 0.7894736842105263
User 2859 AUC after training: 0.7543859649122808
User 2859 does not improve AUC. Reverting changes.
Training on augumented user 15633 46/50 current_auc = 0.7894736842105263
User 15633 AUC after training: 0.7543859649122808
User 15633 does not improve AUC. Reverting changes.
Training on augumented user 111529 47/50 current_auc = 0.7894736842105263
User 111529 AUC after training: 0.7894736842105263
User 111529 does not improve AUC. Reverting changes.
Training on augumented user 78328 48/50 current_auc = 0.7894736842105263
User 78328 AUC after training: 0.7894736842105263
User 78328 does not improve AUC. Reverting changes.
Training on augumented user 130898 49/50 current_auc = 0.7894736842105263
User 130898 AUC after training: 0.7719298245614036
User 130898 does not improve AUC. Reverting changes.
[2024-12-02 18:33:15.175802] start test user 85053 103/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:33:15.621002] start test user 85053 103/568 recall augumented users by random, augumented_users = [81358, 96078, 120664, 97371, 58364, 23743, 69608, 61760, 10823, 78867, 6132, 39679, 37816, 85515, 136356, 61948, 19565, 123888, 93177, 396, 82408, 5979, 82465, 53225, 72408, 13693, 14256, 46999, 23018, 63052, 15804, 15718, 104060, 127600, 70351, 82458, 57731, 113415, 122217, 105297, 97130, 65358, 82774, 132957, 27857, 82331, 130508, 5222, 69769, 2152]
[2024-12-02 18:33:15.636066] user = 85053 Cloud 103/568
[2024-12-02 18:33:15.650917] user = 85053 Local 103/568
[2024-12-02 18:33:15.716470] user = 85053 Local+ 103/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:33:17.470191] user = 85053 MPDA- 103/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6551724137931034
Training on augumented user 81358 0/50 current_auc = 0.6551724137931034
User 81358 AUC after training: 0.6568409343715239
User 81358 improves AUC. Keeping the model.
Training on augumented user 96078 1/50 current_auc = 0.6568409343715239
User 96078 AUC after training: 0.6568409343715239
User 96078 does not improve AUC. Reverting changes.
Training on augumented user 120664 2/50 current_auc = 0.6568409343715239
User 120664 AUC after training: 0.6562847608453838
User 120664 does not improve AUC. Reverting changes.
Training on augumented user 97371 3/50 current_auc = 0.6568409343715239
User 97371 AUC after training: 0.6562847608453838
User 97371 does not improve AUC. Reverting changes.
Training on augumented user 58364 4/50 current_auc = 0.6568409343715239
User 58364 AUC after training: 0.6557285873192437
User 58364 does not improve AUC. Reverting changes.
Training on augumented user 23743 5/50 current_auc = 0.6568409343715239
User 23743 AUC after training: 0.6562847608453838
User 23743 does not improve AUC. Reverting changes.
Training on augumented user 69608 6/50 current_auc = 0.6568409343715239
User 69608 AUC after training: 0.6557285873192435
User 69608 does not improve AUC. Reverting changes.
Training on augumented user 61760 7/50 current_auc = 0.6568409343715239
User 61760 AUC after training: 0.6568409343715239
User 61760 does not improve AUC. Reverting changes.
Training on augumented user 10823 8/50 current_auc = 0.6568409343715239
User 10823 AUC after training: 0.6568409343715239
User 10823 does not improve AUC. Reverting changes.
Training on augumented user 78867 9/50 current_auc = 0.6568409343715239
User 78867 AUC after training: 0.6557285873192435
User 78867 does not improve AUC. Reverting changes.
Training on augumented user 6132 10/50 current_auc = 0.6568409343715239
User 6132 AUC after training: 0.6535038932146829
User 6132 does not improve AUC. Reverting changes.
Training on augumented user 39679 11/50 current_auc = 0.6568409343715239
User 39679 AUC after training: 0.6568409343715239
User 39679 does not improve AUC. Reverting changes.
Training on augumented user 37816 12/50 current_auc = 0.6568409343715239
User 37816 AUC after training: 0.6551724137931034
User 37816 does not improve AUC. Reverting changes.
Training on augumented user 85515 13/50 current_auc = 0.6568409343715239
User 85515 AUC after training: 0.6562847608453838
User 85515 does not improve AUC. Reverting changes.
Training on augumented user 136356 14/50 current_auc = 0.6568409343715239
User 136356 AUC after training: 0.6562847608453838
User 136356 does not improve AUC. Reverting changes.
Training on augumented user 61948 15/50 current_auc = 0.6568409343715239
User 61948 AUC after training: 0.6568409343715239
User 61948 does not improve AUC. Reverting changes.
Training on augumented user 19565 16/50 current_auc = 0.6568409343715239
User 19565 AUC after training: 0.657397107897664
User 19565 improves AUC. Keeping the model.
Training on augumented user 123888 17/50 current_auc = 0.657397107897664
User 123888 AUC after training: 0.657397107897664
User 123888 does not improve AUC. Reverting changes.
Training on augumented user 93177 18/50 current_auc = 0.657397107897664
User 93177 AUC after training: 0.6546162402669633
User 93177 does not improve AUC. Reverting changes.
Training on augumented user 396 19/50 current_auc = 0.657397107897664
User 396 AUC after training: 0.657397107897664
User 396 does not improve AUC. Reverting changes.
Training on augumented user 82408 20/50 current_auc = 0.657397107897664
User 82408 AUC after training: 0.6562847608453838
User 82408 does not improve AUC. Reverting changes.
Training on augumented user 5979 21/50 current_auc = 0.657397107897664
User 5979 AUC after training: 0.657397107897664
User 5979 does not improve AUC. Reverting changes.
Training on augumented user 82465 22/50 current_auc = 0.657397107897664
User 82465 AUC after training: 0.657397107897664
User 82465 does not improve AUC. Reverting changes.
Training on augumented user 53225 23/50 current_auc = 0.657397107897664
User 53225 AUC after training: 0.657397107897664
User 53225 does not improve AUC. Reverting changes.
Training on augumented user 72408 24/50 current_auc = 0.657397107897664
User 72408 AUC after training: 0.6551724137931034
User 72408 does not improve AUC. Reverting changes.
Training on augumented user 13693 25/50 current_auc = 0.657397107897664
User 13693 AUC after training: 0.6568409343715239
User 13693 does not improve AUC. Reverting changes.
Training on augumented user 14256 26/50 current_auc = 0.657397107897664
User 14256 AUC after training: 0.6568409343715239
User 14256 does not improve AUC. Reverting changes.
Training on augumented user 46999 27/50 current_auc = 0.657397107897664
User 46999 AUC after training: 0.6551724137931034
User 46999 does not improve AUC. Reverting changes.
Training on augumented user 23018 28/50 current_auc = 0.657397107897664
User 23018 AUC after training: 0.6557285873192437
User 23018 does not improve AUC. Reverting changes.
Training on augumented user 63052 29/50 current_auc = 0.657397107897664
User 63052 AUC after training: 0.6557285873192437
User 63052 does not improve AUC. Reverting changes.
Training on augumented user 15804 30/50 current_auc = 0.657397107897664
User 15804 AUC after training: 0.6568409343715239
User 15804 does not improve AUC. Reverting changes.
Training on augumented user 15718 31/50 current_auc = 0.657397107897664
User 15718 AUC after training: 0.6585094549499443
User 15718 improves AUC. Keeping the model.
Training on augumented user 104060 32/50 current_auc = 0.6585094549499443
User 104060 AUC after training: 0.6585094549499443
User 104060 does not improve AUC. Reverting changes.
Training on augumented user 127600 33/50 current_auc = 0.6585094549499443
User 127600 AUC after training: 0.6579532814238042
User 127600 does not improve AUC. Reverting changes.
Training on augumented user 70351 34/50 current_auc = 0.6585094549499443
User 70351 AUC after training: 0.6585094549499443
User 70351 does not improve AUC. Reverting changes.
Training on augumented user 82458 35/50 current_auc = 0.6585094549499443
User 82458 AUC after training: 0.6585094549499444
User 82458 improves AUC. Keeping the model.
Training on augumented user 57731 36/50 current_auc = 0.6585094549499444
User 57731 AUC after training: 0.6585094549499444
User 57731 does not improve AUC. Reverting changes.
Training on augumented user 113415 37/50 current_auc = 0.6585094549499444
User 113415 AUC after training: 0.6585094549499444
User 113415 does not improve AUC. Reverting changes.
Training on augumented user 122217 38/50 current_auc = 0.6585094549499444
User 122217 AUC after training: 0.6585094549499444
User 122217 does not improve AUC. Reverting changes.
Training on augumented user 105297 39/50 current_auc = 0.6585094549499444
User 105297 AUC after training: 0.6585094549499444
User 105297 does not improve AUC. Reverting changes.
Training on augumented user 97130 40/50 current_auc = 0.6585094549499444
User 97130 AUC after training: 0.6562847608453837
User 97130 does not improve AUC. Reverting changes.
Training on augumented user 65358 41/50 current_auc = 0.6585094549499444
User 65358 AUC after training: 0.6568409343715239
User 65358 does not improve AUC. Reverting changes.
Training on augumented user 82774 42/50 current_auc = 0.6585094549499444
User 82774 AUC after training: 0.6579532814238042
User 82774 does not improve AUC. Reverting changes.
Training on augumented user 132957 43/50 current_auc = 0.6585094549499444
User 132957 AUC after training: 0.6554505005561735
User 132957 does not improve AUC. Reverting changes.
Training on augumented user 27857 44/50 current_auc = 0.6585094549499444
User 27857 AUC after training: 0.6579532814238042
User 27857 does not improve AUC. Reverting changes.
Training on augumented user 82331 45/50 current_auc = 0.6585094549499444
User 82331 AUC after training: 0.6579532814238042
User 82331 does not improve AUC. Reverting changes.
Training on augumented user 130508 46/50 current_auc = 0.6585094549499444
User 130508 AUC after training: 0.6568409343715239
User 130508 does not improve AUC. Reverting changes.
Training on augumented user 5222 47/50 current_auc = 0.6585094549499444
User 5222 AUC after training: 0.6585094549499444
User 5222 does not improve AUC. Reverting changes.
Training on augumented user 69769 48/50 current_auc = 0.6585094549499444
User 69769 AUC after training: 0.657397107897664
User 69769 does not improve AUC. Reverting changes.
Training on augumented user 2152 49/50 current_auc = 0.6585094549499444
User 2152 AUC after training: 0.6585094549499444
User 2152 does not improve AUC. Reverting changes.
[2024-12-02 18:33:48.538487] start test user 85079 104/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:33:49.255408] start test user 85079 104/568 recall augumented users by random, augumented_users = [72964, 68316, 51600, 45127, 97833, 82671, 69826, 72389, 87809, 114958, 120730, 2598, 124508, 24887, 62143, 90955, 74075, 47722, 124645, 62227, 103105, 32488, 39996, 80004, 1309, 136822, 52121, 117014, 71403, 130800, 56085, 88810, 29661, 14794, 99451, 69215, 31105, 14929, 4650, 53875, 11899, 10331, 100993, 36370, 49285, 6549, 86755, 131923, 75609, 58488]
[2024-12-02 18:33:49.273084] user = 85079 Cloud 104/568
[2024-12-02 18:33:49.283558] user = 85079 Local 104/568
[2024-12-02 18:33:49.381173] user = 85079 Local+ 104/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:33:51.805311] user = 85079 MPDA- 104/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.475
Training on augumented user 72964 0/50 current_auc = 0.475
User 72964 AUC after training: 0.475
User 72964 does not improve AUC. Reverting changes.
Training on augumented user 68316 1/50 current_auc = 0.475
User 68316 AUC after training: 0.475
User 68316 does not improve AUC. Reverting changes.
Training on augumented user 51600 2/50 current_auc = 0.475
User 51600 AUC after training: 0.475
User 51600 does not improve AUC. Reverting changes.
Training on augumented user 45127 3/50 current_auc = 0.475
User 45127 AUC after training: 0.475
User 45127 does not improve AUC. Reverting changes.
Training on augumented user 97833 4/50 current_auc = 0.475
User 97833 AUC after training: 0.4875
User 97833 improves AUC. Keeping the model.
Training on augumented user 82671 5/50 current_auc = 0.4875
User 82671 AUC after training: 0.4875
User 82671 does not improve AUC. Reverting changes.
Training on augumented user 69826 6/50 current_auc = 0.4875
User 69826 AUC after training: 0.4875
User 69826 does not improve AUC. Reverting changes.
Training on augumented user 72389 7/50 current_auc = 0.4875
User 72389 AUC after training: 0.5
User 72389 improves AUC. Keeping the model.
Training on augumented user 87809 8/50 current_auc = 0.5
User 87809 AUC after training: 0.4875
User 87809 does not improve AUC. Reverting changes.
Training on augumented user 114958 9/50 current_auc = 0.5
User 114958 AUC after training: 0.475
User 114958 does not improve AUC. Reverting changes.
Training on augumented user 120730 10/50 current_auc = 0.5
User 120730 AUC after training: 0.5
User 120730 does not improve AUC. Reverting changes.
Training on augumented user 2598 11/50 current_auc = 0.5
User 2598 AUC after training: 0.5
User 2598 does not improve AUC. Reverting changes.
Training on augumented user 124508 12/50 current_auc = 0.5
User 124508 AUC after training: 0.5
User 124508 does not improve AUC. Reverting changes.
Training on augumented user 24887 13/50 current_auc = 0.5
User 24887 AUC after training: 0.5
User 24887 does not improve AUC. Reverting changes.
Training on augumented user 62143 14/50 current_auc = 0.5
User 62143 AUC after training: 0.5
User 62143 does not improve AUC. Reverting changes.
Training on augumented user 90955 15/50 current_auc = 0.5
User 90955 AUC after training: 0.5
User 90955 does not improve AUC. Reverting changes.
Training on augumented user 74075 16/50 current_auc = 0.5
User 74075 AUC after training: 0.5
User 74075 does not improve AUC. Reverting changes.
Training on augumented user 47722 17/50 current_auc = 0.5
User 47722 AUC after training: 0.5
User 47722 does not improve AUC. Reverting changes.
Training on augumented user 124645 18/50 current_auc = 0.5
User 124645 AUC after training: 0.5
User 124645 does not improve AUC. Reverting changes.
Training on augumented user 62227 19/50 current_auc = 0.5
User 62227 AUC after training: 0.5
User 62227 does not improve AUC. Reverting changes.
Training on augumented user 103105 20/50 current_auc = 0.5
User 103105 AUC after training: 0.5
User 103105 does not improve AUC. Reverting changes.
Training on augumented user 32488 21/50 current_auc = 0.5
User 32488 AUC after training: 0.5
User 32488 does not improve AUC. Reverting changes.
Training on augumented user 39996 22/50 current_auc = 0.5
User 39996 AUC after training: 0.5
User 39996 does not improve AUC. Reverting changes.
Training on augumented user 80004 23/50 current_auc = 0.5
User 80004 AUC after training: 0.5
User 80004 does not improve AUC. Reverting changes.
Training on augumented user 1309 24/50 current_auc = 0.5
User 1309 AUC after training: 0.475
User 1309 does not improve AUC. Reverting changes.
Training on augumented user 136822 25/50 current_auc = 0.5
User 136822 AUC after training: 0.5
User 136822 does not improve AUC. Reverting changes.
Training on augumented user 52121 26/50 current_auc = 0.5
User 52121 AUC after training: 0.5
User 52121 does not improve AUC. Reverting changes.
Training on augumented user 117014 27/50 current_auc = 0.5
User 117014 AUC after training: 0.5
User 117014 does not improve AUC. Reverting changes.
Training on augumented user 71403 28/50 current_auc = 0.5
User 71403 AUC after training: 0.5
User 71403 does not improve AUC. Reverting changes.
Training on augumented user 130800 29/50 current_auc = 0.5
User 130800 AUC after training: 0.5
User 130800 does not improve AUC. Reverting changes.
Training on augumented user 56085 30/50 current_auc = 0.5
User 56085 AUC after training: 0.475
User 56085 does not improve AUC. Reverting changes.
Training on augumented user 88810 31/50 current_auc = 0.5
User 88810 AUC after training: 0.5
User 88810 does not improve AUC. Reverting changes.
Training on augumented user 29661 32/50 current_auc = 0.5
User 29661 AUC after training: 0.475
User 29661 does not improve AUC. Reverting changes.
Training on augumented user 14794 33/50 current_auc = 0.5
User 14794 AUC after training: 0.5
User 14794 does not improve AUC. Reverting changes.
Training on augumented user 99451 34/50 current_auc = 0.5
User 99451 AUC after training: 0.5
User 99451 does not improve AUC. Reverting changes.
Training on augumented user 69215 35/50 current_auc = 0.5
User 69215 AUC after training: 0.5
User 69215 does not improve AUC. Reverting changes.
Training on augumented user 31105 36/50 current_auc = 0.5
User 31105 AUC after training: 0.5
User 31105 does not improve AUC. Reverting changes.
Training on augumented user 14929 37/50 current_auc = 0.5
User 14929 AUC after training: 0.4875
User 14929 does not improve AUC. Reverting changes.
Training on augumented user 4650 38/50 current_auc = 0.5
User 4650 AUC after training: 0.5
User 4650 does not improve AUC. Reverting changes.
Training on augumented user 53875 39/50 current_auc = 0.5
User 53875 AUC after training: 0.5
User 53875 does not improve AUC. Reverting changes.
Training on augumented user 11899 40/50 current_auc = 0.5
User 11899 AUC after training: 0.5
User 11899 does not improve AUC. Reverting changes.
Training on augumented user 10331 41/50 current_auc = 0.5
User 10331 AUC after training: 0.5
User 10331 does not improve AUC. Reverting changes.
Training on augumented user 100993 42/50 current_auc = 0.5
User 100993 AUC after training: 0.5
User 100993 does not improve AUC. Reverting changes.
Training on augumented user 36370 43/50 current_auc = 0.5
User 36370 AUC after training: 0.5
User 36370 does not improve AUC. Reverting changes.
Training on augumented user 49285 44/50 current_auc = 0.5
User 49285 AUC after training: 0.4875
User 49285 does not improve AUC. Reverting changes.
Training on augumented user 6549 45/50 current_auc = 0.5
User 6549 AUC after training: 0.5
User 6549 does not improve AUC. Reverting changes.
Training on augumented user 86755 46/50 current_auc = 0.5
User 86755 AUC after training: 0.5
User 86755 does not improve AUC. Reverting changes.
Training on augumented user 131923 47/50 current_auc = 0.5
User 131923 AUC after training: 0.5
User 131923 does not improve AUC. Reverting changes.
Training on augumented user 75609 48/50 current_auc = 0.5
User 75609 AUC after training: 0.5
User 75609 does not improve AUC. Reverting changes.
Training on augumented user 58488 49/50 current_auc = 0.5
User 58488 AUC after training: 0.5
User 58488 does not improve AUC. Reverting changes.
[2024-12-02 18:34:22.539632] start test user 85103 105/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:34:23.263020] start test user 85103 105/568 recall augumented users by random, augumented_users = [28054, 77166, 55046, 19036, 117159, 134412, 62625, 49422, 60687, 20667, 102331, 1674, 43805, 60646, 110879, 126557, 111771, 10002, 107064, 66656, 26610, 118279, 90470, 121517, 130183, 2611, 65889, 116230, 125435, 76242, 35615, 104096, 80352, 93996, 126598, 1003, 126180, 37199, 33017, 82380, 18816, 84964, 33629, 4083, 98970, 21595, 109672, 14664, 65194, 2781]
[2024-12-02 18:34:23.280172] user = 85103 Cloud 105/568
[2024-12-02 18:34:23.293002] user = 85103 Local 105/568
[2024-12-02 18:34:23.330462] user = 85103 Local+ 105/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:34:25.991065] user = 85103 MPDA- 105/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6755555555555556
Training on augumented user 28054 0/50 current_auc = 0.6755555555555556
User 28054 AUC after training: 0.6755555555555556
User 28054 does not improve AUC. Reverting changes.
Training on augumented user 77166 1/50 current_auc = 0.6755555555555556
User 77166 AUC after training: 0.6755555555555556
User 77166 does not improve AUC. Reverting changes.
Training on augumented user 55046 2/50 current_auc = 0.6755555555555556
User 55046 AUC after training: 0.6755555555555556
User 55046 does not improve AUC. Reverting changes.
Training on augumented user 19036 3/50 current_auc = 0.6755555555555556
User 19036 AUC after training: 0.6755555555555556
User 19036 does not improve AUC. Reverting changes.
Training on augumented user 117159 4/50 current_auc = 0.6755555555555556
User 117159 AUC after training: 0.68
User 117159 improves AUC. Keeping the model.
Training on augumented user 134412 5/50 current_auc = 0.68
User 134412 AUC after training: 0.68
User 134412 does not improve AUC. Reverting changes.
Training on augumented user 62625 6/50 current_auc = 0.68
User 62625 AUC after training: 0.68
User 62625 does not improve AUC. Reverting changes.
Training on augumented user 49422 7/50 current_auc = 0.68
User 49422 AUC after training: 0.6777777777777778
User 49422 does not improve AUC. Reverting changes.
Training on augumented user 60687 8/50 current_auc = 0.68
User 60687 AUC after training: 0.68
User 60687 does not improve AUC. Reverting changes.
Training on augumented user 20667 9/50 current_auc = 0.68
User 20667 AUC after training: 0.6777777777777777
User 20667 does not improve AUC. Reverting changes.
Training on augumented user 102331 10/50 current_auc = 0.68
User 102331 AUC after training: 0.68
User 102331 does not improve AUC. Reverting changes.
Training on augumented user 1674 11/50 current_auc = 0.68
User 1674 AUC after training: 0.6777777777777778
User 1674 does not improve AUC. Reverting changes.
Training on augumented user 43805 12/50 current_auc = 0.68
User 43805 AUC after training: 0.6822222222222222
User 43805 improves AUC. Keeping the model.
Training on augumented user 60646 13/50 current_auc = 0.6822222222222222
User 60646 AUC after training: 0.6844444444444444
User 60646 improves AUC. Keeping the model.
Training on augumented user 110879 14/50 current_auc = 0.6844444444444444
User 110879 AUC after training: 0.6844444444444444
User 110879 does not improve AUC. Reverting changes.
Training on augumented user 126557 15/50 current_auc = 0.6844444444444444
User 126557 AUC after training: 0.6844444444444444
User 126557 does not improve AUC. Reverting changes.
Training on augumented user 111771 16/50 current_auc = 0.6844444444444444
User 111771 AUC after training: 0.6844444444444444
User 111771 does not improve AUC. Reverting changes.
Training on augumented user 10002 17/50 current_auc = 0.6844444444444444
User 10002 AUC after training: 0.6844444444444444
User 10002 does not improve AUC. Reverting changes.
Training on augumented user 107064 18/50 current_auc = 0.6844444444444444
User 107064 AUC after training: 0.6844444444444444
User 107064 does not improve AUC. Reverting changes.
Training on augumented user 66656 19/50 current_auc = 0.6844444444444444
User 66656 AUC after training: 0.6822222222222222
User 66656 does not improve AUC. Reverting changes.
Training on augumented user 26610 20/50 current_auc = 0.6844444444444444
User 26610 AUC after training: 0.6866666666666666
User 26610 improves AUC. Keeping the model.
Training on augumented user 118279 21/50 current_auc = 0.6866666666666666
User 118279 AUC after training: 0.6866666666666666
User 118279 does not improve AUC. Reverting changes.
Training on augumented user 90470 22/50 current_auc = 0.6866666666666666
User 90470 AUC after training: 0.6888888888888889
User 90470 improves AUC. Keeping the model.
Training on augumented user 121517 23/50 current_auc = 0.6888888888888889
User 121517 AUC after training: 0.6866666666666666
User 121517 does not improve AUC. Reverting changes.
Training on augumented user 130183 24/50 current_auc = 0.6888888888888889
User 130183 AUC after training: 0.6866666666666666
User 130183 does not improve AUC. Reverting changes.
Training on augumented user 2611 25/50 current_auc = 0.6888888888888889
User 2611 AUC after training: 0.6822222222222222
User 2611 does not improve AUC. Reverting changes.
Training on augumented user 65889 26/50 current_auc = 0.6888888888888889
User 65889 AUC after training: 0.6844444444444444
User 65889 does not improve AUC. Reverting changes.
Training on augumented user 116230 27/50 current_auc = 0.6888888888888889
User 116230 AUC after training: 0.6933333333333334
User 116230 improves AUC. Keeping the model.
Training on augumented user 125435 28/50 current_auc = 0.6933333333333334
User 125435 AUC after training: 0.6933333333333334
User 125435 does not improve AUC. Reverting changes.
Training on augumented user 76242 29/50 current_auc = 0.6933333333333334
User 76242 AUC after training: 0.6911111111111111
User 76242 does not improve AUC. Reverting changes.
Training on augumented user 35615 30/50 current_auc = 0.6933333333333334
User 35615 AUC after training: 0.6933333333333334
User 35615 does not improve AUC. Reverting changes.
Training on augumented user 104096 31/50 current_auc = 0.6933333333333334
User 104096 AUC after training: 0.6933333333333334
User 104096 does not improve AUC. Reverting changes.
Training on augumented user 80352 32/50 current_auc = 0.6933333333333334
User 80352 AUC after training: 0.6888888888888889
User 80352 does not improve AUC. Reverting changes.
Training on augumented user 93996 33/50 current_auc = 0.6933333333333334
User 93996 AUC after training: 0.6933333333333334
User 93996 does not improve AUC. Reverting changes.
Training on augumented user 126598 34/50 current_auc = 0.6933333333333334
User 126598 AUC after training: 0.6911111111111111
User 126598 does not improve AUC. Reverting changes.
Training on augumented user 1003 35/50 current_auc = 0.6933333333333334
User 1003 AUC after training: 0.6888888888888889
User 1003 does not improve AUC. Reverting changes.
Training on augumented user 126180 36/50 current_auc = 0.6933333333333334
User 126180 AUC after training: 0.6911111111111111
User 126180 does not improve AUC. Reverting changes.
Training on augumented user 37199 37/50 current_auc = 0.6933333333333334
User 37199 AUC after training: 0.6911111111111111
User 37199 does not improve AUC. Reverting changes.
Training on augumented user 33017 38/50 current_auc = 0.6933333333333334
User 33017 AUC after training: 0.6933333333333334
User 33017 does not improve AUC. Reverting changes.
Training on augumented user 82380 39/50 current_auc = 0.6933333333333334
User 82380 AUC after training: 0.6933333333333334
User 82380 does not improve AUC. Reverting changes.
Training on augumented user 18816 40/50 current_auc = 0.6933333333333334
User 18816 AUC after training: 0.6911111111111111
User 18816 does not improve AUC. Reverting changes.
Training on augumented user 84964 41/50 current_auc = 0.6933333333333334
User 84964 AUC after training: 0.6888888888888889
User 84964 does not improve AUC. Reverting changes.
Training on augumented user 33629 42/50 current_auc = 0.6933333333333334
User 33629 AUC after training: 0.6888888888888889
User 33629 does not improve AUC. Reverting changes.
Training on augumented user 4083 43/50 current_auc = 0.6933333333333334
User 4083 AUC after training: 0.6911111111111111
User 4083 does not improve AUC. Reverting changes.
Training on augumented user 98970 44/50 current_auc = 0.6933333333333334
User 98970 AUC after training: 0.6911111111111111
User 98970 does not improve AUC. Reverting changes.
Training on augumented user 21595 45/50 current_auc = 0.6933333333333334
User 21595 AUC after training: 0.6933333333333334
User 21595 does not improve AUC. Reverting changes.
Training on augumented user 109672 46/50 current_auc = 0.6933333333333334
User 109672 AUC after training: 0.6911111111111111
User 109672 does not improve AUC. Reverting changes.
Training on augumented user 14664 47/50 current_auc = 0.6933333333333334
User 14664 AUC after training: 0.6933333333333334
User 14664 does not improve AUC. Reverting changes.
Training on augumented user 65194 48/50 current_auc = 0.6933333333333334
User 65194 AUC after training: 0.6888888888888889
User 65194 does not improve AUC. Reverting changes.
Training on augumented user 2781 49/50 current_auc = 0.6933333333333334
User 2781 AUC after training: 0.6911111111111111
User 2781 does not improve AUC. Reverting changes.
[2024-12-02 18:34:55.255148] start test user 85127 106/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:34:55.796708] start test user 85127 106/568 recall augumented users by random, augumented_users = [6052, 60945, 89820, 24888, 47767, 93047, 123653, 80200, 116264, 134436, 56492, 81113, 69170, 93400, 81979, 4692, 8553, 119214, 63872, 38057, 21620, 107399, 113156, 9013, 34100, 12470, 129281, 24632, 135927, 77743, 70241, 93962, 11052, 133645, 77383, 110123, 3612, 13385, 20287, 37454, 108284, 62226, 138313, 79300, 51417, 126723, 4523, 115963, 22839, 109415]
[2024-12-02 18:34:55.814121] user = 85127 Cloud 106/568
[2024-12-02 18:34:55.826063] user = 85127 Local 106/568
[2024-12-02 18:34:55.868169] user = 85127 Local+ 106/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:34:58.374014] user = 85127 MPDA- 106/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.9090909090909091
Training on augumented user 6052 0/50 current_auc = 0.9090909090909091
User 6052 AUC after training: 0.9090909090909091
User 6052 does not improve AUC. Reverting changes.
Training on augumented user 60945 1/50 current_auc = 0.9090909090909091
User 60945 AUC after training: 0.9090909090909091
User 60945 does not improve AUC. Reverting changes.
Training on augumented user 89820 2/50 current_auc = 0.9090909090909091
User 89820 AUC after training: 0.9090909090909091
User 89820 does not improve AUC. Reverting changes.
Training on augumented user 24888 3/50 current_auc = 0.9090909090909091
User 24888 AUC after training: 0.9090909090909091
User 24888 does not improve AUC. Reverting changes.
Training on augumented user 47767 4/50 current_auc = 0.9090909090909091
User 47767 AUC after training: 0.9090909090909091
User 47767 does not improve AUC. Reverting changes.
Training on augumented user 93047 5/50 current_auc = 0.9090909090909091
User 93047 AUC after training: 0.9090909090909091
User 93047 does not improve AUC. Reverting changes.
Training on augumented user 123653 6/50 current_auc = 0.9090909090909091
User 123653 AUC after training: 0.9090909090909091
User 123653 does not improve AUC. Reverting changes.
Training on augumented user 80200 7/50 current_auc = 0.9090909090909091
User 80200 AUC after training: 0.9090909090909091
User 80200 does not improve AUC. Reverting changes.
Training on augumented user 116264 8/50 current_auc = 0.9090909090909091
User 116264 AUC after training: 0.9090909090909091
User 116264 does not improve AUC. Reverting changes.
Training on augumented user 134436 9/50 current_auc = 0.9090909090909091
User 134436 AUC after training: 0.9090909090909091
User 134436 does not improve AUC. Reverting changes.
Training on augumented user 56492 10/50 current_auc = 0.9090909090909091
User 56492 AUC after training: 0.9393939393939394
User 56492 improves AUC. Keeping the model.
Training on augumented user 81113 11/50 current_auc = 0.9393939393939394
User 81113 AUC after training: 0.9393939393939394
User 81113 does not improve AUC. Reverting changes.
Training on augumented user 69170 12/50 current_auc = 0.9393939393939394
User 69170 AUC after training: 0.9393939393939394
User 69170 does not improve AUC. Reverting changes.
Training on augumented user 93400 13/50 current_auc = 0.9393939393939394
User 93400 AUC after training: 0.9393939393939394
User 93400 does not improve AUC. Reverting changes.
Training on augumented user 81979 14/50 current_auc = 0.9393939393939394
User 81979 AUC after training: 0.9393939393939394
User 81979 does not improve AUC. Reverting changes.
Training on augumented user 4692 15/50 current_auc = 0.9393939393939394
User 4692 AUC after training: 0.9393939393939394
User 4692 does not improve AUC. Reverting changes.
Training on augumented user 8553 16/50 current_auc = 0.9393939393939394
User 8553 AUC after training: 0.9393939393939394
User 8553 does not improve AUC. Reverting changes.
Training on augumented user 119214 17/50 current_auc = 0.9393939393939394
User 119214 AUC after training: 0.9393939393939394
User 119214 does not improve AUC. Reverting changes.
Training on augumented user 63872 18/50 current_auc = 0.9393939393939394
User 63872 AUC after training: 0.9393939393939394
User 63872 does not improve AUC. Reverting changes.
Training on augumented user 38057 19/50 current_auc = 0.9393939393939394
User 38057 AUC after training: 0.9393939393939394
User 38057 does not improve AUC. Reverting changes.
Training on augumented user 21620 20/50 current_auc = 0.9393939393939394
User 21620 AUC after training: 0.9393939393939394
User 21620 does not improve AUC. Reverting changes.
Training on augumented user 107399 21/50 current_auc = 0.9393939393939394
User 107399 AUC after training: 0.9393939393939394
User 107399 does not improve AUC. Reverting changes.
Training on augumented user 113156 22/50 current_auc = 0.9393939393939394
User 113156 AUC after training: 0.9393939393939394
User 113156 does not improve AUC. Reverting changes.
Training on augumented user 9013 23/50 current_auc = 0.9393939393939394
User 9013 AUC after training: 0.9393939393939394
User 9013 does not improve AUC. Reverting changes.
Training on augumented user 34100 24/50 current_auc = 0.9393939393939394
User 34100 AUC after training: 0.9393939393939394
User 34100 does not improve AUC. Reverting changes.
Training on augumented user 12470 25/50 current_auc = 0.9393939393939394
User 12470 AUC after training: 0.9090909090909091
User 12470 does not improve AUC. Reverting changes.
Training on augumented user 129281 26/50 current_auc = 0.9393939393939394
User 129281 AUC after training: 0.9393939393939394
User 129281 does not improve AUC. Reverting changes.
Training on augumented user 24632 27/50 current_auc = 0.9393939393939394
User 24632 AUC after training: 0.9393939393939394
User 24632 does not improve AUC. Reverting changes.
Training on augumented user 135927 28/50 current_auc = 0.9393939393939394
User 135927 AUC after training: 0.9393939393939394
User 135927 does not improve AUC. Reverting changes.
Training on augumented user 77743 29/50 current_auc = 0.9393939393939394
User 77743 AUC after training: 0.9393939393939394
User 77743 does not improve AUC. Reverting changes.
Training on augumented user 70241 30/50 current_auc = 0.9393939393939394
User 70241 AUC after training: 0.9393939393939394
User 70241 does not improve AUC. Reverting changes.
Training on augumented user 93962 31/50 current_auc = 0.9393939393939394
User 93962 AUC after training: 0.9393939393939394
User 93962 does not improve AUC. Reverting changes.
Training on augumented user 11052 32/50 current_auc = 0.9393939393939394
User 11052 AUC after training: 0.9393939393939394
User 11052 does not improve AUC. Reverting changes.
Training on augumented user 133645 33/50 current_auc = 0.9393939393939394
User 133645 AUC after training: 0.9090909090909091
User 133645 does not improve AUC. Reverting changes.
Training on augumented user 77383 34/50 current_auc = 0.9393939393939394
User 77383 AUC after training: 0.9393939393939394
User 77383 does not improve AUC. Reverting changes.
Training on augumented user 110123 35/50 current_auc = 0.9393939393939394
User 110123 AUC after training: 0.9393939393939394
User 110123 does not improve AUC. Reverting changes.
Training on augumented user 3612 36/50 current_auc = 0.9393939393939394
User 3612 AUC after training: 0.9090909090909091
User 3612 does not improve AUC. Reverting changes.
Training on augumented user 13385 37/50 current_auc = 0.9393939393939394
User 13385 AUC after training: 0.9090909090909091
User 13385 does not improve AUC. Reverting changes.
Training on augumented user 20287 38/50 current_auc = 0.9393939393939394
User 20287 AUC after training: 0.9393939393939394
User 20287 does not improve AUC. Reverting changes.
Training on augumented user 37454 39/50 current_auc = 0.9393939393939394
User 37454 AUC after training: 0.9393939393939394
User 37454 does not improve AUC. Reverting changes.
Training on augumented user 108284 40/50 current_auc = 0.9393939393939394
User 108284 AUC after training: 0.9393939393939394
User 108284 does not improve AUC. Reverting changes.
Training on augumented user 62226 41/50 current_auc = 0.9393939393939394
User 62226 AUC after training: 0.9393939393939394
User 62226 does not improve AUC. Reverting changes.
Training on augumented user 138313 42/50 current_auc = 0.9393939393939394
User 138313 AUC after training: 0.9393939393939394
User 138313 does not improve AUC. Reverting changes.
Training on augumented user 79300 43/50 current_auc = 0.9393939393939394
User 79300 AUC after training: 0.9090909090909091
User 79300 does not improve AUC. Reverting changes.
Training on augumented user 51417 44/50 current_auc = 0.9393939393939394
User 51417 AUC after training: 0.9090909090909091
User 51417 does not improve AUC. Reverting changes.
Training on augumented user 126723 45/50 current_auc = 0.9393939393939394
User 126723 AUC after training: 0.9393939393939394
User 126723 does not improve AUC. Reverting changes.
Training on augumented user 4523 46/50 current_auc = 0.9393939393939394
User 4523 AUC after training: 0.9393939393939394
User 4523 does not improve AUC. Reverting changes.
Training on augumented user 115963 47/50 current_auc = 0.9393939393939394
User 115963 AUC after training: 0.9393939393939394
User 115963 does not improve AUC. Reverting changes.
Training on augumented user 22839 48/50 current_auc = 0.9393939393939394
User 22839 AUC after training: 0.9393939393939394
User 22839 does not improve AUC. Reverting changes.
Training on augumented user 109415 49/50 current_auc = 0.9393939393939394
User 109415 AUC after training: 0.9393939393939394
User 109415 does not improve AUC. Reverting changes.
[2024-12-02 18:35:28.983473] start test user 85128 107/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:35:29.437867] start test user 85128 107/568 recall augumented users by random, augumented_users = [102602, 56733, 114969, 130850, 6390, 137830, 81128, 87638, 128381, 128660, 125712, 80527, 40958, 38872, 112636, 68856, 26156, 82079, 73932, 5719, 90593, 20216, 118056, 1720, 45020, 18496, 93546, 80711, 76115, 93978, 79646, 20724, 34072, 70157, 72991, 12207, 27233, 130742, 47461, 99938, 109548, 31223, 134362, 72527, 56026, 38775, 103879, 1118, 118617, 72347]
[2024-12-02 18:35:29.453685] user = 85128 Cloud 107/568
[2024-12-02 18:35:29.487553] user = 85128 Local 107/568
[2024-12-02 18:35:29.549160] user = 85128 Local+ 107/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:35:31.866816] user = 85128 MPDA- 107/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6763562102152991
Training on augumented user 102602 0/50 current_auc = 0.6763562102152991
User 102602 AUC after training: 0.6764431119511611
User 102602 improves AUC. Keeping the model.
Training on augumented user 56733 1/50 current_auc = 0.6764431119511611
User 56733 AUC after training: 0.6753785656868496
User 56733 does not improve AUC. Reverting changes.
Training on augumented user 114969 2/50 current_auc = 0.6764431119511611
User 114969 AUC after training: 0.6766060527059029
User 114969 improves AUC. Keeping the model.
Training on augumented user 130850 3/50 current_auc = 0.6766060527059029
User 130850 AUC after training: 0.6769645223663343
User 130850 improves AUC. Keeping the model.
Training on augumented user 6390 4/50 current_auc = 0.6769645223663343
User 6390 AUC after training: 0.676269308479437
User 6390 does not improve AUC. Reverting changes.
Training on augumented user 137830 5/50 current_auc = 0.6769645223663343
User 137830 AUC after training: 0.6765191509700408
User 137830 does not improve AUC. Reverting changes.
Training on augumented user 81128 6/50 current_auc = 0.6769645223663343
User 81128 AUC after training: 0.6767255425927132
User 81128 does not improve AUC. Reverting changes.
Training on augumented user 87638 7/50 current_auc = 0.6769645223663343
User 87638 AUC after training: 0.6767472680266788
User 87638 does not improve AUC. Reverting changes.
Training on augumented user 128381 8/50 current_auc = 0.6769645223663343
User 128381 AUC after training: 0.6765300136870236
User 128381 does not improve AUC. Reverting changes.
Training on augumented user 128660 9/50 current_auc = 0.6769645223663343
User 128660 AUC after training: 0.676975385083317
User 128660 improves AUC. Keeping the model.
Training on augumented user 125712 10/50 current_auc = 0.676975385083317
User 125712 AUC after training: 0.6761932694605576
User 125712 does not improve AUC. Reverting changes.
Training on augumented user 80527 11/50 current_auc = 0.676975385083317
User 80527 AUC after training: 0.6767146798757306
User 80527 does not improve AUC. Reverting changes.
Training on augumented user 40958 12/50 current_auc = 0.676975385083317
User 40958 AUC after training: 0.6768124443285755
User 40958 does not improve AUC. Reverting changes.
Training on augumented user 38872 13/50 current_auc = 0.676975385083317
User 38872 AUC after training: 0.6768884833474549
User 38872 does not improve AUC. Reverting changes.
Training on augumented user 112636 14/50 current_auc = 0.676975385083317
User 112636 AUC after training: 0.6770948749701277
User 112636 improves AUC. Keeping the model.
Training on augumented user 68856 15/50 current_auc = 0.6770948749701277
User 68856 AUC after training: 0.6769536596493515
User 68856 does not improve AUC. Reverting changes.
Training on augumented user 26156 16/50 current_auc = 0.6770948749701277
User 26156 AUC after training: 0.6766820917247822
User 26156 does not improve AUC. Reverting changes.
Training on augumented user 82079 17/50 current_auc = 0.6770948749701277
User 82079 AUC after training: 0.6764213865171957
User 82079 does not improve AUC. Reverting changes.
Training on augumented user 73932 18/50 current_auc = 0.6770948749701277
User 73932 AUC after training: 0.6769753850833169
User 73932 does not improve AUC. Reverting changes.
Training on augumented user 5719 19/50 current_auc = 0.6770948749701277
User 5719 AUC after training: 0.676508288253058
User 5719 does not improve AUC. Reverting changes.
Training on augumented user 90593 20/50 current_auc = 0.6770948749701277
User 90593 AUC after training: 0.6769102087814204
User 90593 does not improve AUC. Reverting changes.
Training on augumented user 20216 21/50 current_auc = 0.6770948749701277
User 20216 AUC after training: 0.6767689934606443
User 20216 does not improve AUC. Reverting changes.
Training on augumented user 118056 22/50 current_auc = 0.6770948749701277
User 118056 AUC after training: 0.6768233070455583
User 118056 does not improve AUC. Reverting changes.
Training on augumented user 1720 23/50 current_auc = 0.6770948749701277
User 1720 AUC after training: 0.6768450324795238
User 1720 does not improve AUC. Reverting changes.
Training on augumented user 45020 24/50 current_auc = 0.6770948749701277
User 45020 AUC after training: 0.6762041321775403
User 45020 does not improve AUC. Reverting changes.
Training on augumented user 18496 25/50 current_auc = 0.6770948749701277
User 18496 AUC after training: 0.6774316191965934
User 18496 improves AUC. Keeping the model.
Training on augumented user 93546 26/50 current_auc = 0.6774316191965934
User 93546 AUC after training: 0.6772578157248692
User 93546 does not improve AUC. Reverting changes.
Training on augumented user 80711 27/50 current_auc = 0.6774316191965934
User 80711 AUC after training: 0.6772578157248692
User 80711 does not improve AUC. Reverting changes.
Training on augumented user 76115 28/50 current_auc = 0.6774316191965934
User 76115 AUC after training: 0.6774967954984901
User 76115 improves AUC. Keeping the model.
Training on augumented user 93978 29/50 current_auc = 0.6774967954984901
User 93978 AUC after training: 0.6772578157248692
User 93978 does not improve AUC. Reverting changes.
Training on augumented user 79646 30/50 current_auc = 0.6774967954984901
User 79646 AUC after training: 0.6767907188946098
User 79646 does not improve AUC. Reverting changes.
Training on augumented user 20724 31/50 current_auc = 0.6774967954984901
User 20724 AUC after training: 0.6775945599513351
User 20724 improves AUC. Keeping the model.
Training on augumented user 34072 32/50 current_auc = 0.6775945599513351
User 34072 AUC after training: 0.6781811466684049
User 34072 improves AUC. Keeping the model.
Training on augumented user 70157 33/50 current_auc = 0.6781811466684049
User 70157 AUC after training: 0.6778009515740078
User 70157 does not improve AUC. Reverting changes.
Training on augumented user 72991 34/50 current_auc = 0.6781811466684049
User 72991 AUC after training: 0.6780182059136632
User 72991 does not improve AUC. Reverting changes.
Training on augumented user 12207 35/50 current_auc = 0.6781811466684049
User 12207 AUC after training: 0.6780290686306458
User 12207 does not improve AUC. Reverting changes.
Training on augumented user 27233 36/50 current_auc = 0.6781811466684049
User 27233 AUC after training: 0.6781159703665081
User 27233 does not improve AUC. Reverting changes.
Training on augumented user 130742 37/50 current_auc = 0.6781811466684049
User 130742 AUC after training: 0.6771166004040932
User 130742 does not improve AUC. Reverting changes.
Training on augumented user 47461 38/50 current_auc = 0.6781811466684049
User 47461 AUC after training: 0.6780507940646114
User 47461 does not improve AUC. Reverting changes.
Training on augumented user 99938 39/50 current_auc = 0.6781811466684049
User 99938 AUC after training: 0.6782897738382325
User 99938 improves AUC. Keeping the model.
Training on augumented user 109548 40/50 current_auc = 0.6782897738382325
User 109548 AUC after training: 0.6778769905928871
User 109548 does not improve AUC. Reverting changes.
Training on augumented user 31223 41/50 current_auc = 0.6782897738382325
User 31223 AUC after training: 0.6781159703665081
User 31223 does not improve AUC. Reverting changes.
Training on augumented user 134362 42/50 current_auc = 0.6782897738382325
User 134362 AUC after training: 0.6781159703665082
User 134362 does not improve AUC. Reverting changes.
Training on augumented user 72527 43/50 current_auc = 0.6782897738382325
User 72527 AUC after training: 0.6779421668947838
User 72527 does not improve AUC. Reverting changes.
Training on augumented user 56026 44/50 current_auc = 0.6782897738382325
User 56026 AUC after training: 0.6781485585174564
User 56026 does not improve AUC. Reverting changes.
Training on augumented user 38775 45/50 current_auc = 0.6782897738382325
User 38775 AUC after training: 0.6775293836494385
User 38775 does not improve AUC. Reverting changes.
Training on augumented user 103879 46/50 current_auc = 0.6782897738382325
User 103879 AUC after training: 0.677876990592887
User 103879 does not improve AUC. Reverting changes.
Training on augumented user 1118 47/50 current_auc = 0.6782897738382325
User 1118 AUC after training: 0.6777031871211628
User 1118 does not improve AUC. Reverting changes.
Training on augumented user 118617 48/50 current_auc = 0.6782897738382325
User 118617 AUC after training: 0.677974755045732
User 118617 does not improve AUC. Reverting changes.
Training on augumented user 72347 49/50 current_auc = 0.6782897738382325
User 72347 AUC after training: 0.6768993460644377
User 72347 does not improve AUC. Reverting changes.
[2024-12-02 18:36:00.132339] start test user 85148 108/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:36:00.796759] start test user 85148 108/568 recall augumented users by random, augumented_users = [48466, 50383, 132979, 88611, 60506, 74435, 24752, 128801, 36596, 77202, 91312, 85579, 115562, 35218, 70424, 85322, 3892, 2691, 123227, 18045, 69083, 71765, 127763, 44571, 112291, 44723, 76908, 49207, 8045, 23568, 71235, 50788, 86821, 4506, 123576, 30226, 20479, 129561, 73974, 23548, 9438, 46414, 33494, 87925, 104695, 119504, 109763, 11308, 88378, 86827]
[2024-12-02 18:36:00.812242] user = 85148 Cloud 108/568
[2024-12-02 18:36:00.836333] user = 85148 Local 108/568
[2024-12-02 18:36:00.895153] user = 85148 Local+ 108/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:36:03.487328] user = 85148 MPDA- 108/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5477961432506886
Training on augumented user 48466 0/50 current_auc = 0.5477961432506886
User 48466 AUC after training: 0.547245179063361
User 48466 does not improve AUC. Reverting changes.
Training on augumented user 50383 1/50 current_auc = 0.5477961432506886
User 50383 AUC after training: 0.547245179063361
User 50383 does not improve AUC. Reverting changes.
Training on augumented user 132979 2/50 current_auc = 0.5477961432506886
User 132979 AUC after training: 0.5465564738292013
User 132979 does not improve AUC. Reverting changes.
Training on augumented user 88611 3/50 current_auc = 0.5477961432506886
User 88611 AUC after training: 0.5469696969696971
User 88611 does not improve AUC. Reverting changes.
Training on augumented user 60506 4/50 current_auc = 0.5477961432506886
User 60506 AUC after training: 0.5479338842975207
User 60506 improves AUC. Keeping the model.
Training on augumented user 74435 5/50 current_auc = 0.5479338842975207
User 74435 AUC after training: 0.5476584022038568
User 74435 does not improve AUC. Reverting changes.
Training on augumented user 24752 6/50 current_auc = 0.5479338842975207
User 24752 AUC after training: 0.5458677685950413
User 24752 does not improve AUC. Reverting changes.
Training on augumented user 128801 7/50 current_auc = 0.5479338842975207
User 128801 AUC after training: 0.5484848484848485
User 128801 improves AUC. Keeping the model.
Training on augumented user 36596 8/50 current_auc = 0.5484848484848485
User 36596 AUC after training: 0.5490358126721763
User 36596 improves AUC. Keeping the model.
Training on augumented user 77202 9/50 current_auc = 0.5490358126721763
User 77202 AUC after training: 0.5480716253443526
User 77202 does not improve AUC. Reverting changes.
Training on augumented user 91312 10/50 current_auc = 0.5490358126721763
User 91312 AUC after training: 0.5505509641873279
User 91312 improves AUC. Keeping the model.
Training on augumented user 85579 11/50 current_auc = 0.5505509641873279
User 85579 AUC after training: 0.550275482093664
User 85579 does not improve AUC. Reverting changes.
Training on augumented user 115562 12/50 current_auc = 0.5505509641873279
User 115562 AUC after training: 0.550137741046832
User 115562 does not improve AUC. Reverting changes.
Training on augumented user 35218 13/50 current_auc = 0.5505509641873279
User 35218 AUC after training: 0.55
User 35218 does not improve AUC. Reverting changes.
Training on augumented user 70424 14/50 current_auc = 0.5505509641873279
User 70424 AUC after training: 0.5511019283746557
User 70424 improves AUC. Keeping the model.
Training on augumented user 85322 15/50 current_auc = 0.5511019283746557
User 85322 AUC after training: 0.550275482093664
User 85322 does not improve AUC. Reverting changes.
Training on augumented user 3892 16/50 current_auc = 0.5511019283746557
User 3892 AUC after training: 0.5515151515151516
User 3892 improves AUC. Keeping the model.
Training on augumented user 2691 17/50 current_auc = 0.5515151515151516
User 2691 AUC after training: 0.5513774104683196
User 2691 does not improve AUC. Reverting changes.
Training on augumented user 123227 18/50 current_auc = 0.5515151515151516
User 123227 AUC after training: 0.5498622589531681
User 123227 does not improve AUC. Reverting changes.
Training on augumented user 18045 19/50 current_auc = 0.5515151515151516
User 18045 AUC after training: 0.5482093663911846
User 18045 does not improve AUC. Reverting changes.
Training on augumented user 69083 20/50 current_auc = 0.5515151515151516
User 69083 AUC after training: 0.5516528925619835
User 69083 improves AUC. Keeping the model.
Training on augumented user 71765 21/50 current_auc = 0.5516528925619835
User 71765 AUC after training: 0.5522038567493113
User 71765 improves AUC. Keeping the model.
Training on augumented user 127763 22/50 current_auc = 0.5522038567493113
User 127763 AUC after training: 0.5527548209366391
User 127763 improves AUC. Keeping the model.
Training on augumented user 44571 23/50 current_auc = 0.5527548209366391
User 44571 AUC after training: 0.55
User 44571 does not improve AUC. Reverting changes.
Training on augumented user 112291 24/50 current_auc = 0.5527548209366391
User 112291 AUC after training: 0.5509641873278237
User 112291 does not improve AUC. Reverting changes.
Training on augumented user 44723 25/50 current_auc = 0.5527548209366391
User 44723 AUC after training: 0.5522038567493113
User 44723 does not improve AUC. Reverting changes.
Training on augumented user 76908 26/50 current_auc = 0.5527548209366391
User 76908 AUC after training: 0.5497245179063361
User 76908 does not improve AUC. Reverting changes.
Training on augumented user 49207 27/50 current_auc = 0.5527548209366391
User 49207 AUC after training: 0.5523415977961432
User 49207 does not improve AUC. Reverting changes.
Training on augumented user 8045 28/50 current_auc = 0.5527548209366391
User 8045 AUC after training: 0.553305785123967
User 8045 improves AUC. Keeping the model.
Training on augumented user 23568 29/50 current_auc = 0.553305785123967
User 23568 AUC after training: 0.5528925619834711
User 23568 does not improve AUC. Reverting changes.
Training on augumented user 71235 30/50 current_auc = 0.553305785123967
User 71235 AUC after training: 0.5528925619834711
User 71235 does not improve AUC. Reverting changes.
Training on augumented user 50788 31/50 current_auc = 0.553305785123967
User 50788 AUC after training: 0.5497245179063361
User 50788 does not improve AUC. Reverting changes.
Training on augumented user 86821 32/50 current_auc = 0.553305785123967
User 86821 AUC after training: 0.5539944903581268
User 86821 improves AUC. Keeping the model.
Training on augumented user 4506 33/50 current_auc = 0.5539944903581268
User 4506 AUC after training: 0.5539944903581268
User 4506 does not improve AUC. Reverting changes.
Training on augumented user 123576 34/50 current_auc = 0.5539944903581268
User 123576 AUC after training: 0.5542699724517908
User 123576 improves AUC. Keeping the model.
Training on augumented user 30226 35/50 current_auc = 0.5542699724517908
User 30226 AUC after training: 0.5512396694214877
User 30226 does not improve AUC. Reverting changes.
Training on augumented user 20479 36/50 current_auc = 0.5542699724517908
User 20479 AUC after training: 0.5555096418732783
User 20479 improves AUC. Keeping the model.
Training on augumented user 129561 37/50 current_auc = 0.5555096418732783
User 129561 AUC after training: 0.5578512396694215
User 129561 improves AUC. Keeping the model.
Training on augumented user 73974 38/50 current_auc = 0.5578512396694215
User 73974 AUC after training: 0.5588154269972453
User 73974 improves AUC. Keeping the model.
Training on augumented user 23548 39/50 current_auc = 0.5588154269972453
User 23548 AUC after training: 0.5581267217630855
User 23548 does not improve AUC. Reverting changes.
Training on augumented user 9438 40/50 current_auc = 0.5588154269972453
User 9438 AUC after training: 0.5575757575757577
User 9438 does not improve AUC. Reverting changes.
Training on augumented user 46414 41/50 current_auc = 0.5588154269972453
User 46414 AUC after training: 0.5581267217630854
User 46414 does not improve AUC. Reverting changes.
Training on augumented user 33494 42/50 current_auc = 0.5588154269972453
User 33494 AUC after training: 0.5544077134986226
User 33494 does not improve AUC. Reverting changes.
Training on augumented user 87925 43/50 current_auc = 0.5588154269972453
User 87925 AUC after training: 0.5564738292011019
User 87925 does not improve AUC. Reverting changes.
Training on augumented user 104695 44/50 current_auc = 0.5588154269972453
User 104695 AUC after training: 0.5548209366391184
User 104695 does not improve AUC. Reverting changes.
Training on augumented user 119504 45/50 current_auc = 0.5588154269972453
User 119504 AUC after training: 0.5589531680440772
User 119504 improves AUC. Keeping the model.
Training on augumented user 109763 46/50 current_auc = 0.5589531680440772
User 109763 AUC after training: 0.5578512396694215
User 109763 does not improve AUC. Reverting changes.
Training on augumented user 11308 47/50 current_auc = 0.5589531680440772
User 11308 AUC after training: 0.5559228650137741
User 11308 does not improve AUC. Reverting changes.
Training on augumented user 88378 48/50 current_auc = 0.5589531680440772
User 88378 AUC after training: 0.5588154269972452
User 88378 does not improve AUC. Reverting changes.
Training on augumented user 86827 49/50 current_auc = 0.5589531680440772
User 86827 AUC after training: 0.5577134986225896
User 86827 does not improve AUC. Reverting changes.
[2024-12-02 18:36:36.865022] start test user 85180 109/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:36:37.378171] start test user 85180 109/568 recall augumented users by random, augumented_users = [30877, 89709, 31699, 123005, 125309, 136854, 97219, 136698, 39254, 14520, 112451, 2769, 26256, 58220, 10572, 93972, 52554, 25653, 42559, 34212, 111335, 66960, 120724, 17208, 35217, 110209, 61818, 16706, 39999, 88182, 132577, 57381, 96338, 67951, 74094, 89496, 9687, 130307, 17174, 33984, 111502, 12848, 56434, 86339, 68148, 125049, 6493, 53565, 23983, 65143]
[2024-12-02 18:36:37.395691] user = 85180 Cloud 109/568
[2024-12-02 18:36:37.408215] user = 85180 Local 109/568
[2024-12-02 18:36:37.482170] user = 85180 Local+ 109/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:36:40.206639] user = 85180 MPDA- 109/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.45789473684210524
Training on augumented user 30877 0/50 current_auc = 0.45789473684210524
User 30877 AUC after training: 0.45789473684210524
User 30877 does not improve AUC. Reverting changes.
Training on augumented user 89709 1/50 current_auc = 0.45789473684210524
User 89709 AUC after training: 0.4605263157894737
User 89709 improves AUC. Keeping the model.
Training on augumented user 31699 2/50 current_auc = 0.4605263157894737
User 31699 AUC after training: 0.45789473684210524
User 31699 does not improve AUC. Reverting changes.
Training on augumented user 123005 3/50 current_auc = 0.4605263157894737
User 123005 AUC after training: 0.45789473684210524
User 123005 does not improve AUC. Reverting changes.
Training on augumented user 125309 4/50 current_auc = 0.4605263157894737
User 125309 AUC after training: 0.4605263157894737
User 125309 does not improve AUC. Reverting changes.
Training on augumented user 136854 5/50 current_auc = 0.4605263157894737
User 136854 AUC after training: 0.4552631578947368
User 136854 does not improve AUC. Reverting changes.
Training on augumented user 97219 6/50 current_auc = 0.4605263157894737
User 97219 AUC after training: 0.45789473684210524
User 97219 does not improve AUC. Reverting changes.
Training on augumented user 136698 7/50 current_auc = 0.4605263157894737
User 136698 AUC after training: 0.45789473684210524
User 136698 does not improve AUC. Reverting changes.
Training on augumented user 39254 8/50 current_auc = 0.4605263157894737
User 39254 AUC after training: 0.45789473684210524
User 39254 does not improve AUC. Reverting changes.
Training on augumented user 14520 9/50 current_auc = 0.4605263157894737
User 14520 AUC after training: 0.4605263157894737
User 14520 does not improve AUC. Reverting changes.
Training on augumented user 112451 10/50 current_auc = 0.4605263157894737
User 112451 AUC after training: 0.4605263157894737
User 112451 does not improve AUC. Reverting changes.
Training on augumented user 2769 11/50 current_auc = 0.4605263157894737
User 2769 AUC after training: 0.45789473684210524
User 2769 does not improve AUC. Reverting changes.
Training on augumented user 26256 12/50 current_auc = 0.4605263157894737
User 26256 AUC after training: 0.4605263157894737
User 26256 does not improve AUC. Reverting changes.
Training on augumented user 58220 13/50 current_auc = 0.4605263157894737
User 58220 AUC after training: 0.4605263157894737
User 58220 does not improve AUC. Reverting changes.
Training on augumented user 10572 14/50 current_auc = 0.4605263157894737
User 10572 AUC after training: 0.4605263157894737
User 10572 does not improve AUC. Reverting changes.
Training on augumented user 93972 15/50 current_auc = 0.4605263157894737
User 93972 AUC after training: 0.4552631578947368
User 93972 does not improve AUC. Reverting changes.
Training on augumented user 52554 16/50 current_auc = 0.4605263157894737
User 52554 AUC after training: 0.4631578947368421
User 52554 improves AUC. Keeping the model.
Training on augumented user 25653 17/50 current_auc = 0.4631578947368421
User 25653 AUC after training: 0.4605263157894737
User 25653 does not improve AUC. Reverting changes.
Training on augumented user 42559 18/50 current_auc = 0.4631578947368421
User 42559 AUC after training: 0.45789473684210524
User 42559 does not improve AUC. Reverting changes.
Training on augumented user 34212 19/50 current_auc = 0.4631578947368421
User 34212 AUC after training: 0.4552631578947368
User 34212 does not improve AUC. Reverting changes.
Training on augumented user 111335 20/50 current_auc = 0.4631578947368421
User 111335 AUC after training: 0.4605263157894737
User 111335 does not improve AUC. Reverting changes.
Training on augumented user 66960 21/50 current_auc = 0.4631578947368421
User 66960 AUC after training: 0.4631578947368421
User 66960 does not improve AUC. Reverting changes.
Training on augumented user 120724 22/50 current_auc = 0.4631578947368421
User 120724 AUC after training: 0.4631578947368421
User 120724 does not improve AUC. Reverting changes.
Training on augumented user 17208 23/50 current_auc = 0.4631578947368421
User 17208 AUC after training: 0.4605263157894737
User 17208 does not improve AUC. Reverting changes.
Training on augumented user 35217 24/50 current_auc = 0.4631578947368421
User 35217 AUC after training: 0.4552631578947368
User 35217 does not improve AUC. Reverting changes.
Training on augumented user 110209 25/50 current_auc = 0.4631578947368421
User 110209 AUC after training: 0.4605263157894737
User 110209 does not improve AUC. Reverting changes.
Training on augumented user 61818 26/50 current_auc = 0.4631578947368421
User 61818 AUC after training: 0.46578947368421053
User 61818 improves AUC. Keeping the model.
Training on augumented user 16706 27/50 current_auc = 0.46578947368421053
User 16706 AUC after training: 0.46578947368421053
User 16706 does not improve AUC. Reverting changes.
Training on augumented user 39999 28/50 current_auc = 0.46578947368421053
User 39999 AUC after training: 0.4605263157894737
User 39999 does not improve AUC. Reverting changes.
Training on augumented user 88182 29/50 current_auc = 0.46578947368421053
User 88182 AUC after training: 0.4631578947368421
User 88182 does not improve AUC. Reverting changes.
Training on augumented user 132577 30/50 current_auc = 0.46578947368421053
User 132577 AUC after training: 0.4605263157894737
User 132577 does not improve AUC. Reverting changes.
Training on augumented user 57381 31/50 current_auc = 0.46578947368421053
User 57381 AUC after training: 0.4605263157894737
User 57381 does not improve AUC. Reverting changes.
Training on augumented user 96338 32/50 current_auc = 0.46578947368421053
User 96338 AUC after training: 0.4552631578947368
User 96338 does not improve AUC. Reverting changes.
Training on augumented user 67951 33/50 current_auc = 0.46578947368421053
User 67951 AUC after training: 0.4631578947368421
User 67951 does not improve AUC. Reverting changes.
Training on augumented user 74094 34/50 current_auc = 0.46578947368421053
User 74094 AUC after training: 0.45789473684210524
User 74094 does not improve AUC. Reverting changes.
Training on augumented user 89496 35/50 current_auc = 0.46578947368421053
User 89496 AUC after training: 0.45789473684210524
User 89496 does not improve AUC. Reverting changes.
Training on augumented user 9687 36/50 current_auc = 0.46578947368421053
User 9687 AUC after training: 0.4631578947368421
User 9687 does not improve AUC. Reverting changes.
Training on augumented user 130307 37/50 current_auc = 0.46578947368421053
User 130307 AUC after training: 0.4631578947368421
User 130307 does not improve AUC. Reverting changes.
Training on augumented user 17174 38/50 current_auc = 0.46578947368421053
User 17174 AUC after training: 0.45789473684210524
User 17174 does not improve AUC. Reverting changes.
Training on augumented user 33984 39/50 current_auc = 0.46578947368421053
User 33984 AUC after training: 0.4605263157894737
User 33984 does not improve AUC. Reverting changes.
Training on augumented user 111502 40/50 current_auc = 0.46578947368421053
User 111502 AUC after training: 0.4631578947368421
User 111502 does not improve AUC. Reverting changes.
Training on augumented user 12848 41/50 current_auc = 0.46578947368421053
User 12848 AUC after training: 0.4605263157894737
User 12848 does not improve AUC. Reverting changes.
Training on augumented user 56434 42/50 current_auc = 0.46578947368421053
User 56434 AUC after training: 0.45789473684210524
User 56434 does not improve AUC. Reverting changes.
Training on augumented user 86339 43/50 current_auc = 0.46578947368421053
User 86339 AUC after training: 0.4552631578947368
User 86339 does not improve AUC. Reverting changes.
Training on augumented user 68148 44/50 current_auc = 0.46578947368421053
User 68148 AUC after training: 0.4631578947368421
User 68148 does not improve AUC. Reverting changes.
Training on augumented user 125049 45/50 current_auc = 0.46578947368421053
User 125049 AUC after training: 0.4631578947368421
User 125049 does not improve AUC. Reverting changes.
Training on augumented user 6493 46/50 current_auc = 0.46578947368421053
User 6493 AUC after training: 0.4631578947368421
User 6493 does not improve AUC. Reverting changes.
Training on augumented user 53565 47/50 current_auc = 0.46578947368421053
User 53565 AUC after training: 0.45789473684210524
User 53565 does not improve AUC. Reverting changes.
Training on augumented user 23983 48/50 current_auc = 0.46578947368421053
User 23983 AUC after training: 0.4631578947368421
User 23983 does not improve AUC. Reverting changes.
Training on augumented user 65143 49/50 current_auc = 0.46578947368421053
User 65143 AUC after training: 0.4605263157894737
User 65143 does not improve AUC. Reverting changes.
[2024-12-02 18:37:11.507293] start test user 85190 110/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:37:12.163312] start test user 85190 110/568 recall augumented users by random, augumented_users = [57735, 131961, 50384, 73892, 46246, 127615, 73472, 21248, 50869, 19336, 45416, 60505, 106024, 122302, 92684, 105729, 123284, 53669, 67255, 37550, 710, 23445, 110468, 108102, 105789, 80240, 95907, 22015, 63481, 30352, 3496, 37522, 136889, 38522, 11001, 130786, 79801, 16871, 81017, 52926, 16416, 32382, 74152, 25649, 45313, 117523, 69793, 15983, 33874, 64343]
[2024-12-02 18:37:12.185737] user = 85190 Cloud 110/568
[2024-12-02 18:37:12.247191] user = 85190 Local 110/568
[2024-12-02 18:37:12.502848] user = 85190 Local+ 110/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:37:16.783853] user = 85190 MPDA- 110/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7535083943176927
Training on augumented user 57735 0/50 current_auc = 0.7535083943176927
User 57735 AUC after training: 0.7522169608265173
User 57735 does not improve AUC. Reverting changes.
Training on augumented user 131961 1/50 current_auc = 0.7535083943176927
User 131961 AUC after training: 0.7527712010331467
User 131961 does not improve AUC. Reverting changes.
Training on augumented user 50384 2/50 current_auc = 0.7535083943176927
User 50384 AUC after training: 0.7534438226431338
User 50384 does not improve AUC. Reverting changes.
Training on augumented user 73892 3/50 current_auc = 0.7535083943176927
User 73892 AUC after training: 0.7536052518295308
User 73892 improves AUC. Keeping the model.
Training on augumented user 46246 4/50 current_auc = 0.7536052518295308
User 46246 AUC after training: 0.7537666810159277
User 46246 improves AUC. Keeping the model.
Training on augumented user 127615 5/50 current_auc = 0.7537666810159277
User 127615 AUC after training: 0.7531640120533794
User 127615 does not improve AUC. Reverting changes.
Training on augumented user 73472 6/50 current_auc = 0.7537666810159277
User 73472 AUC after training: 0.7536752044769695
User 73472 does not improve AUC. Reverting changes.
Training on augumented user 21248 7/50 current_auc = 0.7537666810159277
User 21248 AUC after training: 0.7537021093413689
User 21248 does not improve AUC. Reverting changes.
Training on augumented user 50869 8/50 current_auc = 0.7537666810159277
User 50869 AUC after training: 0.7536375376668101
User 50869 does not improve AUC. Reverting changes.
Training on augumented user 19336 9/50 current_auc = 0.7537666810159277
User 19336 AUC after training: 0.7539173482565649
User 19336 improves AUC. Keeping the model.
Training on augumented user 45416 10/50 current_auc = 0.7539173482565649
User 45416 AUC after training: 0.7538366336633663
User 45416 does not improve AUC. Reverting changes.
Training on augumented user 60505 11/50 current_auc = 0.7539173482565649
User 60505 AUC after training: 0.7540464916056824
User 60505 improves AUC. Keeping the model.
Training on augumented user 106024 12/50 current_auc = 0.7540464916056824
User 106024 AUC after training: 0.7540895393887215
User 106024 improves AUC. Keeping the model.
Training on augumented user 122302 13/50 current_auc = 0.7540895393887215
User 122302 AUC after training: 0.7543155402496772
User 122302 improves AUC. Keeping the model.
Training on augumented user 92684 14/50 current_auc = 0.7543155402496772
User 92684 AUC after training: 0.7542940163581575
User 92684 does not improve AUC. Reverting changes.
Training on augumented user 105729 15/50 current_auc = 0.7543155402496772
User 105729 AUC after training: 0.754272492466638
User 105729 does not improve AUC. Reverting changes.
Training on augumented user 123284 16/50 current_auc = 0.7543155402496772
User 123284 AUC after training: 0.7543155402496771
User 123284 does not improve AUC. Reverting changes.
Training on augumented user 53669 17/50 current_auc = 0.7543155402496772
User 53669 AUC after training: 0.7542832544123976
User 53669 does not improve AUC. Reverting changes.
Training on augumented user 67255 18/50 current_auc = 0.7543155402496772
User 67255 AUC after training: 0.7541971588463194
User 67255 does not improve AUC. Reverting changes.
Training on augumented user 37550 19/50 current_auc = 0.7543155402496772
User 37550 AUC after training: 0.7542509685751183
User 37550 does not improve AUC. Reverting changes.
Training on augumented user 710 20/50 current_auc = 0.7543155402496772
User 710 AUC after training: 0.7538958243650452
User 710 does not improve AUC. Reverting changes.
Training on augumented user 23445 21/50 current_auc = 0.7543155402496772
User 23445 AUC after training: 0.7541756349547998
User 23445 does not improve AUC. Reverting changes.
Training on augumented user 110468 22/50 current_auc = 0.7543155402496772
User 110468 AUC after training: 0.7551119242359018
User 110468 improves AUC. Keeping the model.
Training on augumented user 108102 23/50 current_auc = 0.7551119242359018
User 108102 AUC after training: 0.755359448988377
User 108102 improves AUC. Keeping the model.
Training on augumented user 105789 24/50 current_auc = 0.755359448988377
User 105789 AUC after training: 0.7553056392595782
User 105789 does not improve AUC. Reverting changes.
Training on augumented user 80240 25/50 current_auc = 0.755359448988377
User 80240 AUC after training: 0.7552948773138183
User 80240 does not improve AUC. Reverting changes.
Training on augumented user 95907 26/50 current_auc = 0.755359448988377
User 95907 AUC after training: 0.7552787343951787
User 95907 does not improve AUC. Reverting changes.
Training on augumented user 22015 27/50 current_auc = 0.755359448988377
User 22015 AUC after training: 0.7554509255273353
User 22015 improves AUC. Keeping the model.
Training on augumented user 63481 28/50 current_auc = 0.7554509255273353
User 63481 AUC after training: 0.7555101162290143
User 63481 improves AUC. Keeping the model.
Training on augumented user 30352 29/50 current_auc = 0.7555101162290143
User 30352 AUC after training: 0.7552195436934999
User 30352 does not improve AUC. Reverting changes.
Training on augumented user 3496 30/50 current_auc = 0.7555101162290143
User 3496 AUC after training: 0.7556500215238916
User 3496 improves AUC. Keeping the model.
Training on augumented user 37522 31/50 current_auc = 0.7556500215238916
User 37522 AUC after training: 0.7555854498493327
User 37522 does not improve AUC. Reverting changes.
Training on augumented user 136889 32/50 current_auc = 0.7556500215238916
User 136889 AUC after training: 0.7544662074903142
User 136889 does not improve AUC. Reverting changes.
Training on augumented user 38522 33/50 current_auc = 0.7556500215238916
User 38522 AUC after training: 0.7555962117950925
User 38522 does not improve AUC. Reverting changes.
Training on augumented user 11001 34/50 current_auc = 0.7556500215238916
User 11001 AUC after training: 0.7556500215238916
User 11001 does not improve AUC. Reverting changes.
Training on augumented user 130786 35/50 current_auc = 0.7556500215238916
User 130786 AUC after training: 0.7555316401205338
User 130786 does not improve AUC. Reverting changes.
Training on augumented user 79801 36/50 current_auc = 0.7556500215238916
User 79801 AUC after training: 0.755520878174774
User 79801 does not improve AUC. Reverting changes.
Training on augumented user 16871 37/50 current_auc = 0.7556500215238916
User 16871 AUC after training: 0.7556930693069307
User 16871 improves AUC. Keeping the model.
Training on augumented user 81017 38/50 current_auc = 0.7556930693069307
User 81017 AUC after training: 0.75572535514421
User 81017 improves AUC. Keeping the model.
Training on augumented user 52926 39/50 current_auc = 0.75572535514421
User 52926 AUC after training: 0.7559298321136461
User 52926 improves AUC. Keeping the model.
Training on augumented user 16416 40/50 current_auc = 0.7559298321136461
User 16416 AUC after training: 0.7552625914765391
User 16416 does not improve AUC. Reverting changes.
Training on augumented user 32382 41/50 current_auc = 0.7559298321136461
User 32382 AUC after training: 0.7554885923374947
User 32382 does not improve AUC. Reverting changes.
Training on augumented user 74152 42/50 current_auc = 0.7559298321136461
User 74152 AUC after training: 0.7556069737408524
User 74152 does not improve AUC. Reverting changes.
Training on augumented user 25649 43/50 current_auc = 0.7559298321136461
User 25649 AUC after training: 0.7557899268187689
User 25649 does not improve AUC. Reverting changes.
Training on augumented user 45313 44/50 current_auc = 0.7559298321136461
User 45313 AUC after training: 0.7559621179509255
User 45313 improves AUC. Keeping the model.
Training on augumented user 117523 45/50 current_auc = 0.7559621179509255
User 117523 AUC after training: 0.7558491175204477
User 117523 does not improve AUC. Reverting changes.
Training on augumented user 69793 46/50 current_auc = 0.7559621179509255
User 69793 AUC after training: 0.7535191562634524
User 69793 does not improve AUC. Reverting changes.
Training on augumented user 15983 47/50 current_auc = 0.7559621179509255
User 15983 AUC after training: 0.7559298321136461
User 15983 does not improve AUC. Reverting changes.
Training on augumented user 33874 48/50 current_auc = 0.7559621179509255
User 33874 AUC after training: 0.7559728798966853
User 33874 improves AUC. Keeping the model.
Training on augumented user 64343 49/50 current_auc = 0.7559728798966853
User 64343 AUC after training: 0.7557145931984502
User 64343 does not improve AUC. Reverting changes.
[2024-12-02 18:37:45.662198] start test user 85257 111/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:37:46.285773] start test user 85257 111/568 recall augumented users by random, augumented_users = [68091, 15094, 51934, 77701, 10901, 47800, 125661, 66577, 76696, 96524, 49966, 32813, 71543, 15937, 52315, 129164, 6535, 44298, 107175, 55725, 45678, 87762, 114656, 5527, 34162, 277, 110359, 97782, 22097, 18135, 12357, 84348, 45526, 94883, 46820, 30081, 87222, 93282, 8377, 6172, 7028, 111748, 126427, 40749, 91570, 20767, 112540, 49584, 126709, 116466]
[2024-12-02 18:37:46.302617] user = 85257 Cloud 111/568
[2024-12-02 18:37:46.400526] user = 85257 Local 111/568
[2024-12-02 18:37:46.497356] user = 85257 Local+ 111/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:37:48.964554] user = 85257 MPDA- 111/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.789143440828834
Training on augumented user 68091 0/50 current_auc = 0.789143440828834
User 68091 AUC after training: 0.7894352838173063
User 68091 improves AUC. Keeping the model.
Training on augumented user 15094 1/50 current_auc = 0.7894352838173063
User 15094 AUC after training: 0.7882679118634175
User 15094 does not improve AUC. Reverting changes.
Training on augumented user 51934 2/50 current_auc = 0.7894352838173063
User 51934 AUC after training: 0.7897271268057785
User 51934 improves AUC. Keeping the model.
Training on augumented user 77701 3/50 current_auc = 0.7897271268057785
User 77701 AUC after training: 0.7892893623230701
User 77701 does not improve AUC. Reverting changes.
Training on augumented user 10901 4/50 current_auc = 0.7897271268057785
User 10901 AUC after training: 0.7900189697942507
User 10901 improves AUC. Keeping the model.
Training on augumented user 47800 5/50 current_auc = 0.7900189697942507
User 47800 AUC after training: 0.7903108127827229
User 47800 improves AUC. Keeping the model.
Training on augumented user 125661 6/50 current_auc = 0.7903108127827229
User 125661 AUC after training: 0.7901648912884868
User 125661 does not improve AUC. Reverting changes.
Training on augumented user 66577 7/50 current_auc = 0.7903108127827229
User 66577 AUC after training: 0.7910404202539034
User 66577 improves AUC. Keeping the model.
Training on augumented user 76696 8/50 current_auc = 0.7910404202539034
User 76696 AUC after training: 0.7907485772654312
User 76696 does not improve AUC. Reverting changes.
Training on augumented user 96524 9/50 current_auc = 0.7910404202539034
User 96524 AUC after training: 0.7908944987596673
User 96524 does not improve AUC. Reverting changes.
Training on augumented user 49966 10/50 current_auc = 0.7910404202539034
User 49966 AUC after training: 0.7900189697942507
User 49966 does not improve AUC. Reverting changes.
Training on augumented user 32813 11/50 current_auc = 0.7910404202539034
User 32813 AUC after training: 0.7910404202539034
User 32813 does not improve AUC. Reverting changes.
Training on augumented user 71543 12/50 current_auc = 0.7910404202539034
User 71543 AUC after training: 0.7907485772654312
User 71543 does not improve AUC. Reverting changes.
Training on augumented user 15937 13/50 current_auc = 0.7910404202539034
User 15937 AUC after training: 0.7894352838173063
User 15937 does not improve AUC. Reverting changes.
Training on augumented user 52315 14/50 current_auc = 0.7910404202539034
User 52315 AUC after training: 0.7895812053115424
User 52315 does not improve AUC. Reverting changes.
Training on augumented user 129164 15/50 current_auc = 0.7910404202539034
User 129164 AUC after training: 0.7913322632423756
User 129164 improves AUC. Keeping the model.
Training on augumented user 6535 16/50 current_auc = 0.7913322632423756
User 6535 AUC after training: 0.7911863417481395
User 6535 does not improve AUC. Reverting changes.
Training on augumented user 44298 17/50 current_auc = 0.7913322632423756
User 44298 AUC after training: 0.7908944987596672
User 44298 does not improve AUC. Reverting changes.
Training on augumented user 107175 18/50 current_auc = 0.7913322632423756
User 107175 AUC after training: 0.7901648912884868
User 107175 does not improve AUC. Reverting changes.
Training on augumented user 55725 19/50 current_auc = 0.7913322632423756
User 55725 AUC after training: 0.7910404202539034
User 55725 does not improve AUC. Reverting changes.
Training on augumented user 45678 20/50 current_auc = 0.7913322632423756
User 45678 AUC after training: 0.7910404202539034
User 45678 does not improve AUC. Reverting changes.
Training on augumented user 87762 21/50 current_auc = 0.7913322632423756
User 87762 AUC after training: 0.790456734276959
User 87762 does not improve AUC. Reverting changes.
Training on augumented user 114656 22/50 current_auc = 0.7913322632423756
User 114656 AUC after training: 0.7903108127827229
User 114656 does not improve AUC. Reverting changes.
Training on augumented user 5527 23/50 current_auc = 0.7913322632423756
User 5527 AUC after training: 0.7914781847366117
User 5527 improves AUC. Keeping the model.
Training on augumented user 34162 24/50 current_auc = 0.7914781847366117
User 34162 AUC after training: 0.7913322632423756
User 34162 does not improve AUC. Reverting changes.
Training on augumented user 277 25/50 current_auc = 0.7914781847366117
User 277 AUC after training: 0.7917700277250839
User 277 improves AUC. Keeping the model.
Training on augumented user 110359 26/50 current_auc = 0.7917700277250839
User 110359 AUC after training: 0.7911863417481395
User 110359 does not improve AUC. Reverting changes.
Training on augumented user 97782 27/50 current_auc = 0.7917700277250839
User 97782 AUC after training: 0.7904567342769591
User 97782 does not improve AUC. Reverting changes.
Training on augumented user 22097 28/50 current_auc = 0.7917700277250839
User 22097 AUC after training: 0.7914781847366117
User 22097 does not improve AUC. Reverting changes.
Training on augumented user 18135 29/50 current_auc = 0.7917700277250839
User 18135 AUC after training: 0.7911863417481395
User 18135 does not improve AUC. Reverting changes.
Training on augumented user 12357 30/50 current_auc = 0.7917700277250839
User 12357 AUC after training: 0.7908944987596673
User 12357 does not improve AUC. Reverting changes.
Training on augumented user 84348 31/50 current_auc = 0.7917700277250839
User 84348 AUC after training: 0.7910404202539034
User 84348 does not improve AUC. Reverting changes.
Training on augumented user 45526 32/50 current_auc = 0.7917700277250839
User 45526 AUC after training: 0.7919159492193201
User 45526 improves AUC. Keeping the model.
Training on augumented user 94883 33/50 current_auc = 0.7919159492193201
User 94883 AUC after training: 0.7913322632423756
User 94883 does not improve AUC. Reverting changes.
Training on augumented user 46820 34/50 current_auc = 0.7919159492193201
User 46820 AUC after training: 0.7922077922077922
User 46820 improves AUC. Keeping the model.
Training on augumented user 30081 35/50 current_auc = 0.7922077922077922
User 30081 AUC after training: 0.79191594921932
User 30081 does not improve AUC. Reverting changes.
Training on augumented user 87222 36/50 current_auc = 0.7922077922077922
User 87222 AUC after training: 0.7926455566905005
User 87222 improves AUC. Keeping the model.
Training on augumented user 93282 37/50 current_auc = 0.7926455566905005
User 93282 AUC after training: 0.7924996351962644
User 93282 does not improve AUC. Reverting changes.
Training on augumented user 8377 38/50 current_auc = 0.7926455566905005
User 8377 AUC after training: 0.7926455566905005
User 8377 does not improve AUC. Reverting changes.
Training on augumented user 6172 39/50 current_auc = 0.7926455566905005
User 6172 AUC after training: 0.79191594921932
User 6172 does not improve AUC. Reverting changes.
Training on augumented user 7028 40/50 current_auc = 0.7926455566905005
User 7028 AUC after training: 0.7923537137020283
User 7028 does not improve AUC. Reverting changes.
Training on augumented user 111748 41/50 current_auc = 0.7926455566905005
User 111748 AUC after training: 0.7916241062308478
User 111748 does not improve AUC. Reverting changes.
Training on augumented user 126427 42/50 current_auc = 0.7926455566905005
User 126427 AUC after training: 0.7924996351962644
User 126427 does not improve AUC. Reverting changes.
Training on augumented user 40749 43/50 current_auc = 0.7926455566905005
User 40749 AUC after training: 0.7926455566905005
User 40749 does not improve AUC. Reverting changes.
Training on augumented user 91570 44/50 current_auc = 0.7926455566905005
User 91570 AUC after training: 0.7922077922077922
User 91570 does not improve AUC. Reverting changes.
Training on augumented user 20767 45/50 current_auc = 0.7926455566905005
User 20767 AUC after training: 0.7924996351962644
User 20767 does not improve AUC. Reverting changes.
Training on augumented user 112540 46/50 current_auc = 0.7926455566905005
User 112540 AUC after training: 0.7913322632423756
User 112540 does not improve AUC. Reverting changes.
Training on augumented user 49584 47/50 current_auc = 0.7926455566905005
User 49584 AUC after training: 0.7926455566905005
User 49584 does not improve AUC. Reverting changes.
Training on augumented user 126709 48/50 current_auc = 0.7926455566905005
User 126709 AUC after training: 0.7924996351962644
User 126709 does not improve AUC. Reverting changes.
Training on augumented user 116466 49/50 current_auc = 0.7926455566905005
User 116466 AUC after training: 0.7914781847366117
User 116466 does not improve AUC. Reverting changes.
[2024-12-02 18:38:19.334241] start test user 85303 112/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:38:19.975085] start test user 85303 112/568 recall augumented users by random, augumented_users = [662, 10267, 17332, 12086, 37948, 49491, 75098, 76263, 102708, 82850, 71269, 92927, 12109, 85254, 100639, 18853, 60658, 35307, 52621, 5124, 138424, 81281, 9065, 31752, 45094, 84515, 134039, 76993, 105315, 67041, 62596, 55027, 48037, 44008, 116999, 3583, 38184, 2919, 65524, 63664, 94626, 132505, 7590, 109291, 37943, 131013, 57557, 3782, 90723, 12504]
[2024-12-02 18:38:20.003922] user = 85303 Cloud 112/568
[2024-12-02 18:38:20.025445] user = 85303 Local 112/568
[2024-12-02 18:38:20.180291] user = 85303 Local+ 112/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:38:22.643347] user = 85303 MPDA- 112/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6672926447574334
Training on augumented user 662 0/50 current_auc = 0.6672926447574334
User 662 AUC after training: 0.6679186228482004
User 662 improves AUC. Keeping the model.
Training on augumented user 10267 1/50 current_auc = 0.6679186228482004
User 10267 AUC after training: 0.66697965571205
User 10267 does not improve AUC. Reverting changes.
Training on augumented user 17332 2/50 current_auc = 0.6679186228482004
User 17332 AUC after training: 0.6701095461658841
User 17332 improves AUC. Keeping the model.
Training on augumented user 12086 3/50 current_auc = 0.6701095461658841
User 12086 AUC after training: 0.6697965571205008
User 12086 does not improve AUC. Reverting changes.
Training on augumented user 37948 4/50 current_auc = 0.6701095461658841
User 37948 AUC after training: 0.6705790297339593
User 37948 improves AUC. Keeping the model.
Training on augumented user 49491 5/50 current_auc = 0.6705790297339593
User 49491 AUC after training: 0.6702660406885759
User 49491 does not improve AUC. Reverting changes.
Training on augumented user 75098 6/50 current_auc = 0.6705790297339593
User 75098 AUC after training: 0.6702660406885759
User 75098 does not improve AUC. Reverting changes.
Training on augumented user 76263 7/50 current_auc = 0.6705790297339593
User 76263 AUC after training: 0.6704225352112676
User 76263 does not improve AUC. Reverting changes.
Training on augumented user 102708 8/50 current_auc = 0.6705790297339593
User 102708 AUC after training: 0.6705790297339593
User 102708 does not improve AUC. Reverting changes.
Training on augumented user 82850 9/50 current_auc = 0.6705790297339593
User 82850 AUC after training: 0.6705790297339593
User 82850 does not improve AUC. Reverting changes.
Training on augumented user 71269 10/50 current_auc = 0.6705790297339593
User 71269 AUC after training: 0.6701095461658841
User 71269 does not improve AUC. Reverting changes.
Training on augumented user 92927 11/50 current_auc = 0.6705790297339593
User 92927 AUC after training: 0.6677621283255086
User 92927 does not improve AUC. Reverting changes.
Training on augumented user 12109 12/50 current_auc = 0.6705790297339593
User 12109 AUC after training: 0.6705790297339593
User 12109 does not improve AUC. Reverting changes.
Training on augumented user 85254 13/50 current_auc = 0.6705790297339593
User 85254 AUC after training: 0.6694835680751173
User 85254 does not improve AUC. Reverting changes.
Training on augumented user 100639 14/50 current_auc = 0.6705790297339593
User 100639 AUC after training: 0.6661971830985915
User 100639 does not improve AUC. Reverting changes.
Training on augumented user 18853 15/50 current_auc = 0.6705790297339593
User 18853 AUC after training: 0.6705790297339593
User 18853 does not improve AUC. Reverting changes.
Training on augumented user 60658 16/50 current_auc = 0.6705790297339593
User 60658 AUC after training: 0.6705790297339593
User 60658 does not improve AUC. Reverting changes.
Training on augumented user 35307 17/50 current_auc = 0.6705790297339593
User 35307 AUC after training: 0.6683881064162754
User 35307 does not improve AUC. Reverting changes.
Training on augumented user 52621 18/50 current_auc = 0.6705790297339593
User 52621 AUC after training: 0.6701095461658841
User 52621 does not improve AUC. Reverting changes.
Training on augumented user 5124 19/50 current_auc = 0.6705790297339593
User 5124 AUC after training: 0.6702660406885759
User 5124 does not improve AUC. Reverting changes.
Training on augumented user 138424 20/50 current_auc = 0.6705790297339593
User 138424 AUC after training: 0.6701095461658841
User 138424 does not improve AUC. Reverting changes.
Training on augumented user 81281 21/50 current_auc = 0.6705790297339593
User 81281 AUC after training: 0.6705790297339593
User 81281 does not improve AUC. Reverting changes.
Training on augumented user 9065 22/50 current_auc = 0.6705790297339593
User 9065 AUC after training: 0.6701095461658841
User 9065 does not improve AUC. Reverting changes.
Training on augumented user 31752 23/50 current_auc = 0.6705790297339593
User 31752 AUC after training: 0.6702660406885759
User 31752 does not improve AUC. Reverting changes.
Training on augumented user 45094 24/50 current_auc = 0.6705790297339593
User 45094 AUC after training: 0.6694835680751173
User 45094 does not improve AUC. Reverting changes.
Training on augumented user 84515 25/50 current_auc = 0.6705790297339593
User 84515 AUC after training: 0.6688575899843506
User 84515 does not improve AUC. Reverting changes.
Training on augumented user 134039 26/50 current_auc = 0.6705790297339593
User 134039 AUC after training: 0.6701095461658841
User 134039 does not improve AUC. Reverting changes.
Training on augumented user 76993 27/50 current_auc = 0.6705790297339593
User 76993 AUC after training: 0.6702660406885759
User 76993 does not improve AUC. Reverting changes.
Training on augumented user 105315 28/50 current_auc = 0.6705790297339593
User 105315 AUC after training: 0.6705790297339593
User 105315 does not improve AUC. Reverting changes.
Training on augumented user 67041 29/50 current_auc = 0.6705790297339593
User 67041 AUC after training: 0.6701095461658841
User 67041 does not improve AUC. Reverting changes.
Training on augumented user 62596 30/50 current_auc = 0.6705790297339593
User 62596 AUC after training: 0.6674491392801252
User 62596 does not improve AUC. Reverting changes.
Training on augumented user 55027 31/50 current_auc = 0.6705790297339593
User 55027 AUC after training: 0.6705790297339593
User 55027 does not improve AUC. Reverting changes.
Training on augumented user 48037 32/50 current_auc = 0.6705790297339593
User 48037 AUC after training: 0.6715179968701095
User 48037 improves AUC. Keeping the model.
Training on augumented user 44008 33/50 current_auc = 0.6715179968701095
User 44008 AUC after training: 0.6677621283255086
User 44008 does not improve AUC. Reverting changes.
Training on augumented user 116999 34/50 current_auc = 0.6715179968701095
User 116999 AUC after training: 0.6712050078247261
User 116999 does not improve AUC. Reverting changes.
Training on augumented user 3583 35/50 current_auc = 0.6715179968701095
User 3583 AUC after training: 0.6702660406885759
User 3583 does not improve AUC. Reverting changes.
Training on augumented user 38184 36/50 current_auc = 0.6715179968701095
User 38184 AUC after training: 0.6705790297339593
User 38184 does not improve AUC. Reverting changes.
Training on augumented user 2919 37/50 current_auc = 0.6715179968701095
User 2919 AUC after training: 0.6677621283255086
User 2919 does not improve AUC. Reverting changes.
Training on augumented user 65524 38/50 current_auc = 0.6715179968701095
User 65524 AUC after training: 0.6712050078247261
User 65524 does not improve AUC. Reverting changes.
Training on augumented user 63664 39/50 current_auc = 0.6715179968701095
User 63664 AUC after training: 0.6708920187793427
User 63664 does not improve AUC. Reverting changes.
Training on augumented user 94626 40/50 current_auc = 0.6715179968701095
User 94626 AUC after training: 0.6712050078247261
User 94626 does not improve AUC. Reverting changes.
Training on augumented user 132505 41/50 current_auc = 0.6715179968701095
User 132505 AUC after training: 0.6712050078247261
User 132505 does not improve AUC. Reverting changes.
Training on augumented user 7590 42/50 current_auc = 0.6715179968701095
User 7590 AUC after training: 0.6721439749608764
User 7590 improves AUC. Keeping the model.
Training on augumented user 109291 43/50 current_auc = 0.6721439749608764
User 109291 AUC after training: 0.6727699530516432
User 109291 improves AUC. Keeping the model.
Training on augumented user 37943 44/50 current_auc = 0.6727699530516432
User 37943 AUC after training: 0.6724569640062598
User 37943 does not improve AUC. Reverting changes.
Training on augumented user 131013 45/50 current_auc = 0.6727699530516432
User 131013 AUC after training: 0.6732394366197184
User 131013 improves AUC. Keeping the model.
Training on augumented user 57557 46/50 current_auc = 0.6732394366197184
User 57557 AUC after training: 0.6718309859154931
User 57557 does not improve AUC. Reverting changes.
Training on augumented user 3782 47/50 current_auc = 0.6732394366197184
User 3782 AUC after training: 0.6735524256651018
User 3782 improves AUC. Keeping the model.
Training on augumented user 90723 48/50 current_auc = 0.6735524256651018
User 90723 AUC after training: 0.6757433489827857
User 90723 improves AUC. Keeping the model.
Training on augumented user 12504 49/50 current_auc = 0.6757433489827857
User 12504 AUC after training: 0.6732394366197183
User 12504 does not improve AUC. Reverting changes.
[2024-12-02 18:38:50.958105] start test user 85314 113/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:38:51.642051] start test user 85314 113/568 recall augumented users by random, augumented_users = [5281, 69704, 110397, 10545, 133425, 61275, 65457, 83954, 131896, 29795, 126920, 3799, 43928, 2888, 120051, 66273, 31332, 134442, 10567, 88778, 57255, 59361, 94529, 118972, 124215, 83071, 117211, 4107, 17649, 731, 13458, 56, 104540, 123523, 129468, 21588, 54717, 2256, 107796, 40480, 33193, 60251, 32165, 62615, 676, 79218, 35871, 89587, 77798, 100067]
[2024-12-02 18:38:51.660008] user = 85314 Cloud 113/568
[2024-12-02 18:38:51.672332] user = 85314 Local 113/568
[2024-12-02 18:38:51.720150] user = 85314 Local+ 113/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:38:54.263913] user = 85314 MPDA- 113/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.48888888888888893
Training on augumented user 5281 0/50 current_auc = 0.48888888888888893
User 5281 AUC after training: 0.48888888888888893
User 5281 does not improve AUC. Reverting changes.
Training on augumented user 69704 1/50 current_auc = 0.48888888888888893
User 69704 AUC after training: 0.48888888888888893
User 69704 does not improve AUC. Reverting changes.
Training on augumented user 110397 2/50 current_auc = 0.48888888888888893
User 110397 AUC after training: 0.48444444444444446
User 110397 does not improve AUC. Reverting changes.
Training on augumented user 10545 3/50 current_auc = 0.48888888888888893
User 10545 AUC after training: 0.49777777777777776
User 10545 improves AUC. Keeping the model.
Training on augumented user 133425 4/50 current_auc = 0.49777777777777776
User 133425 AUC after training: 0.4933333333333333
User 133425 does not improve AUC. Reverting changes.
Training on augumented user 61275 5/50 current_auc = 0.49777777777777776
User 61275 AUC after training: 0.5022222222222222
User 61275 improves AUC. Keeping the model.
Training on augumented user 65457 6/50 current_auc = 0.5022222222222222
User 65457 AUC after training: 0.49777777777777776
User 65457 does not improve AUC. Reverting changes.
Training on augumented user 83954 7/50 current_auc = 0.5022222222222222
User 83954 AUC after training: 0.4933333333333333
User 83954 does not improve AUC. Reverting changes.
Training on augumented user 131896 8/50 current_auc = 0.5022222222222222
User 131896 AUC after training: 0.48888888888888893
User 131896 does not improve AUC. Reverting changes.
Training on augumented user 29795 9/50 current_auc = 0.5022222222222222
User 29795 AUC after training: 0.5022222222222222
User 29795 does not improve AUC. Reverting changes.
Training on augumented user 126920 10/50 current_auc = 0.5022222222222222
User 126920 AUC after training: 0.49777777777777776
User 126920 does not improve AUC. Reverting changes.
Training on augumented user 3799 11/50 current_auc = 0.5022222222222222
User 3799 AUC after training: 0.5022222222222222
User 3799 does not improve AUC. Reverting changes.
Training on augumented user 43928 12/50 current_auc = 0.5022222222222222
User 43928 AUC after training: 0.5022222222222222
User 43928 does not improve AUC. Reverting changes.
Training on augumented user 2888 13/50 current_auc = 0.5022222222222222
User 2888 AUC after training: 0.5022222222222222
User 2888 does not improve AUC. Reverting changes.
Training on augumented user 120051 14/50 current_auc = 0.5022222222222222
User 120051 AUC after training: 0.5022222222222222
User 120051 does not improve AUC. Reverting changes.
Training on augumented user 66273 15/50 current_auc = 0.5022222222222222
User 66273 AUC after training: 0.5022222222222222
User 66273 does not improve AUC. Reverting changes.
Training on augumented user 31332 16/50 current_auc = 0.5022222222222222
User 31332 AUC after training: 0.49777777777777776
User 31332 does not improve AUC. Reverting changes.
Training on augumented user 134442 17/50 current_auc = 0.5022222222222222
User 134442 AUC after training: 0.5022222222222222
User 134442 does not improve AUC. Reverting changes.
Training on augumented user 10567 18/50 current_auc = 0.5022222222222222
User 10567 AUC after training: 0.5022222222222222
User 10567 does not improve AUC. Reverting changes.
Training on augumented user 88778 19/50 current_auc = 0.5022222222222222
User 88778 AUC after training: 0.49777777777777776
User 88778 does not improve AUC. Reverting changes.
Training on augumented user 57255 20/50 current_auc = 0.5022222222222222
User 57255 AUC after training: 0.49777777777777776
User 57255 does not improve AUC. Reverting changes.
Training on augumented user 59361 21/50 current_auc = 0.5022222222222222
User 59361 AUC after training: 0.5022222222222222
User 59361 does not improve AUC. Reverting changes.
Training on augumented user 94529 22/50 current_auc = 0.5022222222222222
User 94529 AUC after training: 0.5022222222222222
User 94529 does not improve AUC. Reverting changes.
Training on augumented user 118972 23/50 current_auc = 0.5022222222222222
User 118972 AUC after training: 0.5022222222222222
User 118972 does not improve AUC. Reverting changes.
Training on augumented user 124215 24/50 current_auc = 0.5022222222222222
User 124215 AUC after training: 0.5022222222222222
User 124215 does not improve AUC. Reverting changes.
Training on augumented user 83071 25/50 current_auc = 0.5022222222222222
User 83071 AUC after training: 0.49777777777777776
User 83071 does not improve AUC. Reverting changes.
Training on augumented user 117211 26/50 current_auc = 0.5022222222222222
User 117211 AUC after training: 0.49777777777777776
User 117211 does not improve AUC. Reverting changes.
Training on augumented user 4107 27/50 current_auc = 0.5022222222222222
User 4107 AUC after training: 0.5022222222222222
User 4107 does not improve AUC. Reverting changes.
Training on augumented user 17649 28/50 current_auc = 0.5022222222222222
User 17649 AUC after training: 0.5022222222222222
User 17649 does not improve AUC. Reverting changes.
Training on augumented user 731 29/50 current_auc = 0.5022222222222222
User 731 AUC after training: 0.49777777777777776
User 731 does not improve AUC. Reverting changes.
Training on augumented user 13458 30/50 current_auc = 0.5022222222222222
User 13458 AUC after training: 0.5022222222222222
User 13458 does not improve AUC. Reverting changes.
Training on augumented user 56 31/50 current_auc = 0.5022222222222222
User 56 AUC after training: 0.5022222222222222
User 56 does not improve AUC. Reverting changes.
Training on augumented user 104540 32/50 current_auc = 0.5022222222222222
User 104540 AUC after training: 0.5022222222222222
User 104540 does not improve AUC. Reverting changes.
Training on augumented user 123523 33/50 current_auc = 0.5022222222222222
User 123523 AUC after training: 0.4933333333333333
User 123523 does not improve AUC. Reverting changes.
Training on augumented user 129468 34/50 current_auc = 0.5022222222222222
User 129468 AUC after training: 0.5022222222222222
User 129468 does not improve AUC. Reverting changes.
Training on augumented user 21588 35/50 current_auc = 0.5022222222222222
User 21588 AUC after training: 0.5022222222222222
User 21588 does not improve AUC. Reverting changes.
Training on augumented user 54717 36/50 current_auc = 0.5022222222222222
User 54717 AUC after training: 0.5022222222222222
User 54717 does not improve AUC. Reverting changes.
Training on augumented user 2256 37/50 current_auc = 0.5022222222222222
User 2256 AUC after training: 0.49777777777777776
User 2256 does not improve AUC. Reverting changes.
Training on augumented user 107796 38/50 current_auc = 0.5022222222222222
User 107796 AUC after training: 0.5022222222222222
User 107796 does not improve AUC. Reverting changes.
Training on augumented user 40480 39/50 current_auc = 0.5022222222222222
User 40480 AUC after training: 0.5022222222222222
User 40480 does not improve AUC. Reverting changes.
Training on augumented user 33193 40/50 current_auc = 0.5022222222222222
User 33193 AUC after training: 0.5022222222222222
User 33193 does not improve AUC. Reverting changes.
Training on augumented user 60251 41/50 current_auc = 0.5022222222222222
User 60251 AUC after training: 0.5022222222222222
User 60251 does not improve AUC. Reverting changes.
Training on augumented user 32165 42/50 current_auc = 0.5022222222222222
User 32165 AUC after training: 0.5022222222222222
User 32165 does not improve AUC. Reverting changes.
Training on augumented user 62615 43/50 current_auc = 0.5022222222222222
User 62615 AUC after training: 0.5022222222222222
User 62615 does not improve AUC. Reverting changes.
Training on augumented user 676 44/50 current_auc = 0.5022222222222222
User 676 AUC after training: 0.49777777777777776
User 676 does not improve AUC. Reverting changes.
Training on augumented user 79218 45/50 current_auc = 0.5022222222222222
User 79218 AUC after training: 0.49777777777777776
User 79218 does not improve AUC. Reverting changes.
Training on augumented user 35871 46/50 current_auc = 0.5022222222222222
User 35871 AUC after training: 0.5022222222222222
User 35871 does not improve AUC. Reverting changes.
Training on augumented user 89587 47/50 current_auc = 0.5022222222222222
User 89587 AUC after training: 0.5022222222222222
User 89587 does not improve AUC. Reverting changes.
Training on augumented user 77798 48/50 current_auc = 0.5022222222222222
User 77798 AUC after training: 0.49777777777777776
User 77798 does not improve AUC. Reverting changes.
Training on augumented user 100067 49/50 current_auc = 0.5022222222222222
User 100067 AUC after training: 0.5022222222222222
User 100067 does not improve AUC. Reverting changes.
[2024-12-02 18:39:21.327101] start test user 85324 114/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:39:21.756627] start test user 85324 114/568 recall augumented users by random, augumented_users = [84232, 9447, 50733, 48512, 31352, 28946, 4732, 31684, 124056, 11466, 114820, 31780, 54470, 94986, 125108, 104469, 55758, 92103, 28362, 80924, 20220, 125053, 93893, 117530, 113302, 49815, 81278, 118470, 104805, 79835, 138368, 43456, 118131, 112069, 135608, 18705, 43803, 128266, 19327, 40514, 62134, 102121, 130512, 5760, 68092, 74781, 45867, 43623, 54877, 81463]
[2024-12-02 18:39:21.771264] user = 85324 Cloud 114/568
[2024-12-02 18:39:21.780843] user = 85324 Local 114/568
[2024-12-02 18:39:21.819023] user = 85324 Local+ 114/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:39:23.179332] user = 85324 MPDA- 114/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 84232 0/50 current_auc = 0.5
User 84232 AUC after training: 0.5
User 84232 does not improve AUC. Reverting changes.
Training on augumented user 9447 1/50 current_auc = 0.5
User 9447 AUC after training: 0.5
User 9447 does not improve AUC. Reverting changes.
Training on augumented user 50733 2/50 current_auc = 0.5
User 50733 AUC after training: 0.5
User 50733 does not improve AUC. Reverting changes.
Training on augumented user 48512 3/50 current_auc = 0.5
User 48512 AUC after training: 0.5
User 48512 does not improve AUC. Reverting changes.
Training on augumented user 31352 4/50 current_auc = 0.5
User 31352 AUC after training: 0.5
User 31352 does not improve AUC. Reverting changes.
Training on augumented user 28946 5/50 current_auc = 0.5
User 28946 AUC after training: 0.5
User 28946 does not improve AUC. Reverting changes.
Training on augumented user 4732 6/50 current_auc = 0.5
User 4732 AUC after training: 0.5
User 4732 does not improve AUC. Reverting changes.
Training on augumented user 31684 7/50 current_auc = 0.5
User 31684 AUC after training: 0.5
User 31684 does not improve AUC. Reverting changes.
Training on augumented user 124056 8/50 current_auc = 0.5
User 124056 AUC after training: 0.5
User 124056 does not improve AUC. Reverting changes.
Training on augumented user 11466 9/50 current_auc = 0.5
User 11466 AUC after training: 0.5
User 11466 does not improve AUC. Reverting changes.
Training on augumented user 114820 10/50 current_auc = 0.5
User 114820 AUC after training: 0.5
User 114820 does not improve AUC. Reverting changes.
Training on augumented user 31780 11/50 current_auc = 0.5
User 31780 AUC after training: 0.5
User 31780 does not improve AUC. Reverting changes.
Training on augumented user 54470 12/50 current_auc = 0.5
User 54470 AUC after training: 0.5
User 54470 does not improve AUC. Reverting changes.
Training on augumented user 94986 13/50 current_auc = 0.5
User 94986 AUC after training: 0.5
User 94986 does not improve AUC. Reverting changes.
Training on augumented user 125108 14/50 current_auc = 0.5
User 125108 AUC after training: 0.5
User 125108 does not improve AUC. Reverting changes.
Training on augumented user 104469 15/50 current_auc = 0.5
User 104469 AUC after training: 0.5
User 104469 does not improve AUC. Reverting changes.
Training on augumented user 55758 16/50 current_auc = 0.5
User 55758 AUC after training: 0.5
User 55758 does not improve AUC. Reverting changes.
Training on augumented user 92103 17/50 current_auc = 0.5
User 92103 AUC after training: 0.5
User 92103 does not improve AUC. Reverting changes.
Training on augumented user 28362 18/50 current_auc = 0.5
User 28362 AUC after training: 0.5
User 28362 does not improve AUC. Reverting changes.
Training on augumented user 80924 19/50 current_auc = 0.5
User 80924 AUC after training: 0.5
User 80924 does not improve AUC. Reverting changes.
Training on augumented user 20220 20/50 current_auc = 0.5
User 20220 AUC after training: 0.5
User 20220 does not improve AUC. Reverting changes.
Training on augumented user 125053 21/50 current_auc = 0.5
User 125053 AUC after training: 0.5
User 125053 does not improve AUC. Reverting changes.
Training on augumented user 93893 22/50 current_auc = 0.5
User 93893 AUC after training: 0.5
User 93893 does not improve AUC. Reverting changes.
Training on augumented user 117530 23/50 current_auc = 0.5
User 117530 AUC after training: 0.5
User 117530 does not improve AUC. Reverting changes.
Training on augumented user 113302 24/50 current_auc = 0.5
User 113302 AUC after training: 0.5
User 113302 does not improve AUC. Reverting changes.
Training on augumented user 49815 25/50 current_auc = 0.5
User 49815 AUC after training: 0.5
User 49815 does not improve AUC. Reverting changes.
Training on augumented user 81278 26/50 current_auc = 0.5
User 81278 AUC after training: 0.5
User 81278 does not improve AUC. Reverting changes.
Training on augumented user 118470 27/50 current_auc = 0.5
User 118470 AUC after training: 0.5
User 118470 does not improve AUC. Reverting changes.
Training on augumented user 104805 28/50 current_auc = 0.5
User 104805 AUC after training: 0.5
User 104805 does not improve AUC. Reverting changes.
Training on augumented user 79835 29/50 current_auc = 0.5
User 79835 AUC after training: 0.5
User 79835 does not improve AUC. Reverting changes.
Training on augumented user 138368 30/50 current_auc = 0.5
User 138368 AUC after training: 0.5
User 138368 does not improve AUC. Reverting changes.
Training on augumented user 43456 31/50 current_auc = 0.5
User 43456 AUC after training: 0.5
User 43456 does not improve AUC. Reverting changes.
Training on augumented user 118131 32/50 current_auc = 0.5
User 118131 AUC after training: 0.5
User 118131 does not improve AUC. Reverting changes.
Training on augumented user 112069 33/50 current_auc = 0.5
User 112069 AUC after training: 0.5
User 112069 does not improve AUC. Reverting changes.
Training on augumented user 135608 34/50 current_auc = 0.5
User 135608 AUC after training: 0.5
User 135608 does not improve AUC. Reverting changes.
Training on augumented user 18705 35/50 current_auc = 0.5
User 18705 AUC after training: 0.5
User 18705 does not improve AUC. Reverting changes.
Training on augumented user 43803 36/50 current_auc = 0.5
User 43803 AUC after training: 0.5
User 43803 does not improve AUC. Reverting changes.
Training on augumented user 128266 37/50 current_auc = 0.5
User 128266 AUC after training: 0.5
User 128266 does not improve AUC. Reverting changes.
Training on augumented user 19327 38/50 current_auc = 0.5
User 19327 AUC after training: 0.5
User 19327 does not improve AUC. Reverting changes.
Training on augumented user 40514 39/50 current_auc = 0.5
User 40514 AUC after training: 0.5
User 40514 does not improve AUC. Reverting changes.
Training on augumented user 62134 40/50 current_auc = 0.5
User 62134 AUC after training: 0.5
User 62134 does not improve AUC. Reverting changes.
Training on augumented user 102121 41/50 current_auc = 0.5
User 102121 AUC after training: 0.5
User 102121 does not improve AUC. Reverting changes.
Training on augumented user 130512 42/50 current_auc = 0.5
User 130512 AUC after training: 0.5
User 130512 does not improve AUC. Reverting changes.
Training on augumented user 5760 43/50 current_auc = 0.5
User 5760 AUC after training: 0.5
User 5760 does not improve AUC. Reverting changes.
Training on augumented user 68092 44/50 current_auc = 0.5
User 68092 AUC after training: 0.5
User 68092 does not improve AUC. Reverting changes.
Training on augumented user 74781 45/50 current_auc = 0.5
User 74781 AUC after training: 0.5
User 74781 does not improve AUC. Reverting changes.
Training on augumented user 45867 46/50 current_auc = 0.5
User 45867 AUC after training: 0.5
User 45867 does not improve AUC. Reverting changes.
Training on augumented user 43623 47/50 current_auc = 0.5
User 43623 AUC after training: 0.5
User 43623 does not improve AUC. Reverting changes.
Training on augumented user 54877 48/50 current_auc = 0.5
User 54877 AUC after training: 0.5
User 54877 does not improve AUC. Reverting changes.
Training on augumented user 81463 49/50 current_auc = 0.5
User 81463 AUC after training: 0.5
User 81463 does not improve AUC. Reverting changes.
[2024-12-02 18:39:50.987050] start test user 85392 115/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:39:51.571218] start test user 85392 115/568 recall augumented users by random, augumented_users = [13752, 100866, 68518, 12569, 26370, 98438, 97153, 55967, 7036, 99715, 53829, 89083, 84239, 121938, 81235, 49518, 61912, 32060, 127789, 65579, 96379, 60591, 35667, 114944, 77527, 8614, 46047, 72607, 21497, 138371, 98522, 132815, 10544, 89727, 99239, 136681, 30745, 23302, 131940, 21821, 57017, 90713, 87003, 44414, 15203, 33077, 11158, 127894, 4222, 31114]
[2024-12-02 18:39:51.592063] user = 85392 Cloud 115/568
[2024-12-02 18:39:51.614667] user = 85392 Local 115/568
[2024-12-02 18:39:51.701979] user = 85392 Local+ 115/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:39:54.248313] user = 85392 MPDA- 115/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.45510835913312697
Training on augumented user 13752 0/50 current_auc = 0.45510835913312697
User 13752 AUC after training: 0.4582043343653251
User 13752 improves AUC. Keeping the model.
Training on augumented user 100866 1/50 current_auc = 0.4582043343653251
User 100866 AUC after training: 0.4582043343653251
User 100866 does not improve AUC. Reverting changes.
Training on augumented user 68518 2/50 current_auc = 0.4582043343653251
User 68518 AUC after training: 0.4582043343653251
User 68518 does not improve AUC. Reverting changes.
Training on augumented user 12569 3/50 current_auc = 0.4582043343653251
User 12569 AUC after training: 0.4613003095975232
User 12569 improves AUC. Keeping the model.
Training on augumented user 26370 4/50 current_auc = 0.4613003095975232
User 26370 AUC after training: 0.4643962848297214
User 26370 improves AUC. Keeping the model.
Training on augumented user 98438 5/50 current_auc = 0.4643962848297214
User 98438 AUC after training: 0.4613003095975232
User 98438 does not improve AUC. Reverting changes.
Training on augumented user 97153 6/50 current_auc = 0.4643962848297214
User 97153 AUC after training: 0.4643962848297214
User 97153 does not improve AUC. Reverting changes.
Training on augumented user 55967 7/50 current_auc = 0.4643962848297214
User 55967 AUC after training: 0.4643962848297214
User 55967 does not improve AUC. Reverting changes.
Training on augumented user 7036 8/50 current_auc = 0.4643962848297214
User 7036 AUC after training: 0.4613003095975233
User 7036 does not improve AUC. Reverting changes.
Training on augumented user 99715 9/50 current_auc = 0.4643962848297214
User 99715 AUC after training: 0.4643962848297214
User 99715 does not improve AUC. Reverting changes.
Training on augumented user 53829 10/50 current_auc = 0.4643962848297214
User 53829 AUC after training: 0.4643962848297214
User 53829 does not improve AUC. Reverting changes.
Training on augumented user 89083 11/50 current_auc = 0.4643962848297214
User 89083 AUC after training: 0.4613003095975233
User 89083 does not improve AUC. Reverting changes.
Training on augumented user 84239 12/50 current_auc = 0.4643962848297214
User 84239 AUC after training: 0.4613003095975232
User 84239 does not improve AUC. Reverting changes.
Training on augumented user 121938 13/50 current_auc = 0.4643962848297214
User 121938 AUC after training: 0.4613003095975233
User 121938 does not improve AUC. Reverting changes.
Training on augumented user 81235 14/50 current_auc = 0.4643962848297214
User 81235 AUC after training: 0.4613003095975233
User 81235 does not improve AUC. Reverting changes.
Training on augumented user 49518 15/50 current_auc = 0.4643962848297214
User 49518 AUC after training: 0.4643962848297214
User 49518 does not improve AUC. Reverting changes.
Training on augumented user 61912 16/50 current_auc = 0.4643962848297214
User 61912 AUC after training: 0.4643962848297214
User 61912 does not improve AUC. Reverting changes.
Training on augumented user 32060 17/50 current_auc = 0.4643962848297214
User 32060 AUC after training: 0.4582043343653251
User 32060 does not improve AUC. Reverting changes.
Training on augumented user 127789 18/50 current_auc = 0.4643962848297214
User 127789 AUC after training: 0.4613003095975232
User 127789 does not improve AUC. Reverting changes.
Training on augumented user 65579 19/50 current_auc = 0.4643962848297214
User 65579 AUC after training: 0.4643962848297214
User 65579 does not improve AUC. Reverting changes.
Training on augumented user 96379 20/50 current_auc = 0.4643962848297214
User 96379 AUC after training: 0.4674922600619196
User 96379 improves AUC. Keeping the model.
Training on augumented user 60591 21/50 current_auc = 0.4674922600619196
User 60591 AUC after training: 0.4643962848297214
User 60591 does not improve AUC. Reverting changes.
Training on augumented user 35667 22/50 current_auc = 0.4674922600619196
User 35667 AUC after training: 0.4613003095975233
User 35667 does not improve AUC. Reverting changes.
Training on augumented user 114944 23/50 current_auc = 0.4674922600619196
User 114944 AUC after training: 0.4643962848297214
User 114944 does not improve AUC. Reverting changes.
Training on augumented user 77527 24/50 current_auc = 0.4674922600619196
User 77527 AUC after training: 0.4613003095975233
User 77527 does not improve AUC. Reverting changes.
Training on augumented user 8614 25/50 current_auc = 0.4674922600619196
User 8614 AUC after training: 0.4643962848297214
User 8614 does not improve AUC. Reverting changes.
Training on augumented user 46047 26/50 current_auc = 0.4674922600619196
User 46047 AUC after training: 0.4674922600619196
User 46047 does not improve AUC. Reverting changes.
Training on augumented user 72607 27/50 current_auc = 0.4674922600619196
User 72607 AUC after training: 0.4674922600619196
User 72607 does not improve AUC. Reverting changes.
Training on augumented user 21497 28/50 current_auc = 0.4674922600619196
User 21497 AUC after training: 0.4643962848297214
User 21497 does not improve AUC. Reverting changes.
Training on augumented user 138371 29/50 current_auc = 0.4674922600619196
User 138371 AUC after training: 0.4643962848297214
User 138371 does not improve AUC. Reverting changes.
Training on augumented user 98522 30/50 current_auc = 0.4674922600619196
User 98522 AUC after training: 0.4643962848297214
User 98522 does not improve AUC. Reverting changes.
Training on augumented user 132815 31/50 current_auc = 0.4674922600619196
User 132815 AUC after training: 0.4674922600619196
User 132815 does not improve AUC. Reverting changes.
Training on augumented user 10544 32/50 current_auc = 0.4674922600619196
User 10544 AUC after training: 0.4674922600619196
User 10544 does not improve AUC. Reverting changes.
Training on augumented user 89727 33/50 current_auc = 0.4674922600619196
User 89727 AUC after training: 0.4674922600619196
User 89727 does not improve AUC. Reverting changes.
Training on augumented user 99239 34/50 current_auc = 0.4674922600619196
User 99239 AUC after training: 0.4643962848297214
User 99239 does not improve AUC. Reverting changes.
Training on augumented user 136681 35/50 current_auc = 0.4674922600619196
User 136681 AUC after training: 0.4674922600619196
User 136681 does not improve AUC. Reverting changes.
Training on augumented user 30745 36/50 current_auc = 0.4674922600619196
User 30745 AUC after training: 0.4674922600619196
User 30745 does not improve AUC. Reverting changes.
Training on augumented user 23302 37/50 current_auc = 0.4674922600619196
User 23302 AUC after training: 0.4613003095975233
User 23302 does not improve AUC. Reverting changes.
Training on augumented user 131940 38/50 current_auc = 0.4674922600619196
User 131940 AUC after training: 0.4643962848297214
User 131940 does not improve AUC. Reverting changes.
Training on augumented user 21821 39/50 current_auc = 0.4674922600619196
User 21821 AUC after training: 0.4613003095975233
User 21821 does not improve AUC. Reverting changes.
Training on augumented user 57017 40/50 current_auc = 0.4674922600619196
User 57017 AUC after training: 0.4582043343653251
User 57017 does not improve AUC. Reverting changes.
Training on augumented user 90713 41/50 current_auc = 0.4674922600619196
User 90713 AUC after training: 0.4674922600619196
User 90713 does not improve AUC. Reverting changes.
Training on augumented user 87003 42/50 current_auc = 0.4674922600619196
User 87003 AUC after training: 0.4643962848297214
User 87003 does not improve AUC. Reverting changes.
Training on augumented user 44414 43/50 current_auc = 0.4674922600619196
User 44414 AUC after training: 0.4674922600619196
User 44414 does not improve AUC. Reverting changes.
Training on augumented user 15203 44/50 current_auc = 0.4674922600619196
User 15203 AUC after training: 0.4582043343653251
User 15203 does not improve AUC. Reverting changes.
Training on augumented user 33077 45/50 current_auc = 0.4674922600619196
User 33077 AUC after training: 0.4643962848297214
User 33077 does not improve AUC. Reverting changes.
Training on augumented user 11158 46/50 current_auc = 0.4674922600619196
User 11158 AUC after training: 0.4643962848297214
User 11158 does not improve AUC. Reverting changes.
Training on augumented user 127894 47/50 current_auc = 0.4674922600619196
User 127894 AUC after training: 0.4613003095975233
User 127894 does not improve AUC. Reverting changes.
Training on augumented user 4222 48/50 current_auc = 0.4674922600619196
User 4222 AUC after training: 0.46439628482972134
User 4222 does not improve AUC. Reverting changes.
Training on augumented user 31114 49/50 current_auc = 0.4674922600619196
User 31114 AUC after training: 0.4674922600619196
User 31114 does not improve AUC. Reverting changes.
[2024-12-02 18:40:23.525626] start test user 85470 116/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:40:23.953768] start test user 85470 116/568 recall augumented users by random, augumented_users = [137479, 101763, 99350, 133953, 95946, 48737, 42369, 709, 120576, 45717, 120572, 86427, 104553, 62688, 60762, 73031, 43566, 39900, 68855, 106650, 121991, 64344, 86839, 73357, 57234, 38300, 61816, 51488, 132311, 7807, 107258, 126381, 35386, 127076, 15928, 109829, 97333, 55580, 40893, 85417, 123286, 55549, 109337, 82273, 56452, 101942, 77285, 77394, 48271, 83961]
[2024-12-02 18:40:23.971464] user = 85470 Cloud 116/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:40:23.980124] user = 85470 Local 116/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:40:24.022244] user = 85470 Local+ 116/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:40:26.012406] user = 85470 MPDA- 116/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 137479 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137479 AUC after training: 0.5
User 137479 does not improve AUC. Reverting changes.
Training on augumented user 101763 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101763 AUC after training: 0.5
User 101763 does not improve AUC. Reverting changes.
Training on augumented user 99350 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99350 AUC after training: 0.5
User 99350 does not improve AUC. Reverting changes.
Training on augumented user 133953 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133953 AUC after training: 0.5
User 133953 does not improve AUC. Reverting changes.
Training on augumented user 95946 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95946 AUC after training: 0.5
User 95946 does not improve AUC. Reverting changes.
Training on augumented user 48737 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48737 AUC after training: 0.5
User 48737 does not improve AUC. Reverting changes.
Training on augumented user 42369 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42369 AUC after training: 0.5
User 42369 does not improve AUC. Reverting changes.
Training on augumented user 709 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 709 AUC after training: 0.5
User 709 does not improve AUC. Reverting changes.
Training on augumented user 120576 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120576 AUC after training: 0.5
User 120576 does not improve AUC. Reverting changes.
Training on augumented user 45717 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45717 AUC after training: 0.5
User 45717 does not improve AUC. Reverting changes.
Training on augumented user 120572 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120572 AUC after training: 0.5
User 120572 does not improve AUC. Reverting changes.
Training on augumented user 86427 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86427 AUC after training: 0.5
User 86427 does not improve AUC. Reverting changes.
Training on augumented user 104553 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104553 AUC after training: 0.5
User 104553 does not improve AUC. Reverting changes.
Training on augumented user 62688 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62688 AUC after training: 0.5
User 62688 does not improve AUC. Reverting changes.
Training on augumented user 60762 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60762 AUC after training: 0.5
User 60762 does not improve AUC. Reverting changes.
Training on augumented user 73031 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73031 AUC after training: 0.5
User 73031 does not improve AUC. Reverting changes.
Training on augumented user 43566 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43566 AUC after training: 0.5
User 43566 does not improve AUC. Reverting changes.
Training on augumented user 39900 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39900 AUC after training: 0.5
User 39900 does not improve AUC. Reverting changes.
Training on augumented user 68855 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68855 AUC after training: 0.5
User 68855 does not improve AUC. Reverting changes.
Training on augumented user 106650 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106650 AUC after training: 0.5
User 106650 does not improve AUC. Reverting changes.
Training on augumented user 121991 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121991 AUC after training: 0.5
User 121991 does not improve AUC. Reverting changes.
Training on augumented user 64344 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64344 AUC after training: 0.5
User 64344 does not improve AUC. Reverting changes.
Training on augumented user 86839 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86839 AUC after training: 0.5
User 86839 does not improve AUC. Reverting changes.
Training on augumented user 73357 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73357 AUC after training: 0.5
User 73357 does not improve AUC. Reverting changes.
Training on augumented user 57234 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57234 AUC after training: 0.5
User 57234 does not improve AUC. Reverting changes.
Training on augumented user 38300 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38300 AUC after training: 0.5
User 38300 does not improve AUC. Reverting changes.
Training on augumented user 61816 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61816 AUC after training: 0.5
User 61816 does not improve AUC. Reverting changes.
Training on augumented user 51488 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51488 AUC after training: 0.5
User 51488 does not improve AUC. Reverting changes.
Training on augumented user 132311 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132311 AUC after training: 0.5
User 132311 does not improve AUC. Reverting changes.
Training on augumented user 7807 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7807 AUC after training: 0.5
User 7807 does not improve AUC. Reverting changes.
Training on augumented user 107258 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107258 AUC after training: 0.5
User 107258 does not improve AUC. Reverting changes.
Training on augumented user 126381 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126381 AUC after training: 0.5
User 126381 does not improve AUC. Reverting changes.
Training on augumented user 35386 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35386 AUC after training: 0.5
User 35386 does not improve AUC. Reverting changes.
Training on augumented user 127076 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127076 AUC after training: 0.5
User 127076 does not improve AUC. Reverting changes.
Training on augumented user 15928 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15928 AUC after training: 0.5
User 15928 does not improve AUC. Reverting changes.
Training on augumented user 109829 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109829 AUC after training: 0.5
User 109829 does not improve AUC. Reverting changes.
Training on augumented user 97333 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97333 AUC after training: 0.5
User 97333 does not improve AUC. Reverting changes.
Training on augumented user 55580 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55580 AUC after training: 0.5
User 55580 does not improve AUC. Reverting changes.
Training on augumented user 40893 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40893 AUC after training: 0.5
User 40893 does not improve AUC. Reverting changes.
Training on augumented user 85417 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85417 AUC after training: 0.5
User 85417 does not improve AUC. Reverting changes.
Training on augumented user 123286 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123286 AUC after training: 0.5
User 123286 does not improve AUC. Reverting changes.
Training on augumented user 55549 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55549 AUC after training: 0.5
User 55549 does not improve AUC. Reverting changes.
Training on augumented user 109337 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109337 AUC after training: 0.5
User 109337 does not improve AUC. Reverting changes.
Training on augumented user 82273 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82273 AUC after training: 0.5
User 82273 does not improve AUC. Reverting changes.
Training on augumented user 56452 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56452 AUC after training: 0.5
User 56452 does not improve AUC. Reverting changes.
Training on augumented user 101942 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101942 AUC after training: 0.5
User 101942 does not improve AUC. Reverting changes.
Training on augumented user 77285 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77285 AUC after training: 0.5
User 77285 does not improve AUC. Reverting changes.
Training on augumented user 77394 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77394 AUC after training: 0.5
User 77394 does not improve AUC. Reverting changes.
Training on augumented user 48271 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48271 AUC after training: 0.5
User 48271 does not improve AUC. Reverting changes.
Training on augumented user 83961 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83961 AUC after training: 0.5
User 83961 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:40:55.028055] start test user 85492 117/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:40:55.462052] start test user 85492 117/568 recall augumented users by random, augumented_users = [114423, 28775, 95569, 55880, 63295, 33686, 44523, 23024, 16444, 85500, 135148, 45291, 59045, 133015, 125937, 96914, 110119, 1991, 2600, 74644, 14490, 83223, 74390, 79233, 76117, 24163, 121142, 123019, 44059, 23435, 109827, 54586, 36240, 104111, 107064, 18733, 74044, 20390, 123402, 57148, 4481, 64802, 94091, 11993, 128167, 36863, 94164, 42769, 23765, 8493]
[2024-12-02 18:40:55.477100] user = 85492 Cloud 117/568
[2024-12-02 18:40:55.491997] user = 85492 Local 117/568
[2024-12-02 18:40:55.551653] user = 85492 Local+ 117/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:40:57.303045] user = 85492 MPDA- 117/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7802469135802469
Training on augumented user 114423 0/50 current_auc = 0.7802469135802469
User 114423 AUC after training: 0.7812345679012346
User 114423 improves AUC. Keeping the model.
Training on augumented user 28775 1/50 current_auc = 0.7812345679012346
User 28775 AUC after training: 0.7817283950617284
User 28775 improves AUC. Keeping the model.
Training on augumented user 95569 2/50 current_auc = 0.7817283950617284
User 95569 AUC after training: 0.779753086419753
User 95569 does not improve AUC. Reverting changes.
Training on augumented user 55880 3/50 current_auc = 0.7817283950617284
User 55880 AUC after training: 0.7812345679012346
User 55880 does not improve AUC. Reverting changes.
Training on augumented user 63295 4/50 current_auc = 0.7817283950617284
User 63295 AUC after training: 0.7807407407407407
User 63295 does not improve AUC. Reverting changes.
Training on augumented user 33686 5/50 current_auc = 0.7817283950617284
User 33686 AUC after training: 0.7822222222222222
User 33686 improves AUC. Keeping the model.
Training on augumented user 44523 6/50 current_auc = 0.7822222222222222
User 44523 AUC after training: 0.7822222222222222
User 44523 does not improve AUC. Reverting changes.
Training on augumented user 23024 7/50 current_auc = 0.7822222222222222
User 23024 AUC after training: 0.7822222222222222
User 23024 does not improve AUC. Reverting changes.
Training on augumented user 16444 8/50 current_auc = 0.7822222222222222
User 16444 AUC after training: 0.779753086419753
User 16444 does not improve AUC. Reverting changes.
Training on augumented user 85500 9/50 current_auc = 0.7822222222222222
User 85500 AUC after training: 0.7822222222222222
User 85500 does not improve AUC. Reverting changes.
Training on augumented user 135148 10/50 current_auc = 0.7822222222222222
User 135148 AUC after training: 0.7812345679012345
User 135148 does not improve AUC. Reverting changes.
Training on augumented user 45291 11/50 current_auc = 0.7822222222222222
User 45291 AUC after training: 0.7817283950617284
User 45291 does not improve AUC. Reverting changes.
Training on augumented user 59045 12/50 current_auc = 0.7822222222222222
User 59045 AUC after training: 0.7802469135802468
User 59045 does not improve AUC. Reverting changes.
Training on augumented user 133015 13/50 current_auc = 0.7822222222222222
User 133015 AUC after training: 0.7817283950617284
User 133015 does not improve AUC. Reverting changes.
Training on augumented user 125937 14/50 current_auc = 0.7822222222222222
User 125937 AUC after training: 0.7812345679012346
User 125937 does not improve AUC. Reverting changes.
Training on augumented user 96914 15/50 current_auc = 0.7822222222222222
User 96914 AUC after training: 0.7807407407407407
User 96914 does not improve AUC. Reverting changes.
Training on augumented user 110119 16/50 current_auc = 0.7822222222222222
User 110119 AUC after training: 0.7817283950617284
User 110119 does not improve AUC. Reverting changes.
Training on augumented user 1991 17/50 current_auc = 0.7822222222222222
User 1991 AUC after training: 0.7822222222222222
User 1991 does not improve AUC. Reverting changes.
Training on augumented user 2600 18/50 current_auc = 0.7822222222222222
User 2600 AUC after training: 0.7812345679012346
User 2600 does not improve AUC. Reverting changes.
Training on augumented user 74644 19/50 current_auc = 0.7822222222222222
User 74644 AUC after training: 0.7822222222222222
User 74644 does not improve AUC. Reverting changes.
Training on augumented user 14490 20/50 current_auc = 0.7822222222222222
User 14490 AUC after training: 0.779753086419753
User 14490 does not improve AUC. Reverting changes.
Training on augumented user 83223 21/50 current_auc = 0.7822222222222222
User 83223 AUC after training: 0.7817283950617284
User 83223 does not improve AUC. Reverting changes.
Training on augumented user 74390 22/50 current_auc = 0.7822222222222222
User 74390 AUC after training: 0.7792592592592593
User 74390 does not improve AUC. Reverting changes.
Training on augumented user 79233 23/50 current_auc = 0.7822222222222222
User 79233 AUC after training: 0.7817283950617284
User 79233 does not improve AUC. Reverting changes.
Training on augumented user 76117 24/50 current_auc = 0.7822222222222222
User 76117 AUC after training: 0.7822222222222222
User 76117 does not improve AUC. Reverting changes.
Training on augumented user 24163 25/50 current_auc = 0.7822222222222222
User 24163 AUC after training: 0.7812345679012345
User 24163 does not improve AUC. Reverting changes.
Training on augumented user 121142 26/50 current_auc = 0.7822222222222222
User 121142 AUC after training: 0.782716049382716
User 121142 improves AUC. Keeping the model.
Training on augumented user 123019 27/50 current_auc = 0.782716049382716
User 123019 AUC after training: 0.7780246913580247
User 123019 does not improve AUC. Reverting changes.
Training on augumented user 44059 28/50 current_auc = 0.782716049382716
User 44059 AUC after training: 0.7832098765432098
User 44059 improves AUC. Keeping the model.
Training on augumented user 23435 29/50 current_auc = 0.7832098765432098
User 23435 AUC after training: 0.7792592592592593
User 23435 does not improve AUC. Reverting changes.
Training on augumented user 109827 30/50 current_auc = 0.7832098765432098
User 109827 AUC after training: 0.7812345679012346
User 109827 does not improve AUC. Reverting changes.
Training on augumented user 54586 31/50 current_auc = 0.7832098765432098
User 54586 AUC after training: 0.7802469135802469
User 54586 does not improve AUC. Reverting changes.
Training on augumented user 36240 32/50 current_auc = 0.7832098765432098
User 36240 AUC after training: 0.779753086419753
User 36240 does not improve AUC. Reverting changes.
Training on augumented user 104111 33/50 current_auc = 0.7832098765432098
User 104111 AUC after training: 0.782716049382716
User 104111 does not improve AUC. Reverting changes.
Training on augumented user 107064 34/50 current_auc = 0.7832098765432098
User 107064 AUC after training: 0.7812345679012346
User 107064 does not improve AUC. Reverting changes.
Training on augumented user 18733 35/50 current_auc = 0.7832098765432098
User 18733 AUC after training: 0.7832098765432098
User 18733 does not improve AUC. Reverting changes.
Training on augumented user 74044 36/50 current_auc = 0.7832098765432098
User 74044 AUC after training: 0.7812345679012346
User 74044 does not improve AUC. Reverting changes.
Training on augumented user 20390 37/50 current_auc = 0.7832098765432098
User 20390 AUC after training: 0.782716049382716
User 20390 does not improve AUC. Reverting changes.
Training on augumented user 123402 38/50 current_auc = 0.7832098765432098
User 123402 AUC after training: 0.7802469135802469
User 123402 does not improve AUC. Reverting changes.
Training on augumented user 57148 39/50 current_auc = 0.7832098765432098
User 57148 AUC after training: 0.7822222222222222
User 57148 does not improve AUC. Reverting changes.
Training on augumented user 4481 40/50 current_auc = 0.7832098765432098
User 4481 AUC after training: 0.7817283950617284
User 4481 does not improve AUC. Reverting changes.
Training on augumented user 64802 41/50 current_auc = 0.7832098765432098
User 64802 AUC after training: 0.7802469135802469
User 64802 does not improve AUC. Reverting changes.
Training on augumented user 94091 42/50 current_auc = 0.7832098765432098
User 94091 AUC after training: 0.7832098765432098
User 94091 does not improve AUC. Reverting changes.
Training on augumented user 11993 43/50 current_auc = 0.7832098765432098
User 11993 AUC after training: 0.7832098765432098
User 11993 does not improve AUC. Reverting changes.
Training on augumented user 128167 44/50 current_auc = 0.7832098765432098
User 128167 AUC after training: 0.7807407407407407
User 128167 does not improve AUC. Reverting changes.
Training on augumented user 36863 45/50 current_auc = 0.7832098765432098
User 36863 AUC after training: 0.7817283950617284
User 36863 does not improve AUC. Reverting changes.
Training on augumented user 94164 46/50 current_auc = 0.7832098765432098
User 94164 AUC after training: 0.7822222222222222
User 94164 does not improve AUC. Reverting changes.
Training on augumented user 42769 47/50 current_auc = 0.7832098765432098
User 42769 AUC after training: 0.7802469135802468
User 42769 does not improve AUC. Reverting changes.
Training on augumented user 23765 48/50 current_auc = 0.7832098765432098
User 23765 AUC after training: 0.7822222222222222
User 23765 does not improve AUC. Reverting changes.
Training on augumented user 8493 49/50 current_auc = 0.7832098765432098
User 8493 AUC after training: 0.7822222222222223
User 8493 does not improve AUC. Reverting changes.
[2024-12-02 18:41:29.327788] start test user 85515 118/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:41:29.901170] start test user 85515 118/568 recall augumented users by random, augumented_users = [16366, 108723, 14461, 71934, 110473, 88951, 88752, 136544, 4117, 76280, 5913, 61549, 56783, 118170, 1638, 95385, 121071, 66842, 81509, 129662, 79316, 125559, 97245, 85829, 18436, 128947, 44273, 84868, 84320, 3199, 76540, 11610, 118360, 32106, 95931, 26342, 118010, 52265, 27594, 16707, 62020, 29604, 13445, 24313, 36271, 76763, 81588, 121094, 92312, 83576]
[2024-12-02 18:41:29.943062] user = 85515 Cloud 118/568
[2024-12-02 18:41:29.996133] user = 85515 Local 118/568
[2024-12-02 18:41:30.119483] user = 85515 Local+ 118/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:41:33.056018] user = 85515 MPDA- 118/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8682753164556961
Training on augumented user 16366 0/50 current_auc = 0.8682753164556961
User 16366 AUC after training: 0.8682753164556961
User 16366 does not improve AUC. Reverting changes.
Training on augumented user 108723 1/50 current_auc = 0.8682753164556961
User 108723 AUC after training: 0.8688686708860759
User 108723 improves AUC. Keeping the model.
Training on augumented user 14461 2/50 current_auc = 0.8688686708860759
User 14461 AUC after training: 0.8692642405063291
User 14461 improves AUC. Keeping the model.
Training on augumented user 71934 3/50 current_auc = 0.8692642405063291
User 71934 AUC after training: 0.8694620253164557
User 71934 improves AUC. Keeping the model.
Training on augumented user 110473 4/50 current_auc = 0.8694620253164557
User 110473 AUC after training: 0.8690664556962026
User 110473 does not improve AUC. Reverting changes.
Training on augumented user 88951 5/50 current_auc = 0.8694620253164557
User 88951 AUC after training: 0.8686708860759493
User 88951 does not improve AUC. Reverting changes.
Training on augumented user 88752 6/50 current_auc = 0.8694620253164557
User 88752 AUC after training: 0.8682753164556962
User 88752 does not improve AUC. Reverting changes.
Training on augumented user 136544 7/50 current_auc = 0.8694620253164557
User 136544 AUC after training: 0.8684731012658228
User 136544 does not improve AUC. Reverting changes.
Training on augumented user 4117 8/50 current_auc = 0.8694620253164557
User 4117 AUC after training: 0.8692642405063291
User 4117 does not improve AUC. Reverting changes.
Training on augumented user 76280 9/50 current_auc = 0.8694620253164557
User 76280 AUC after training: 0.8684731012658228
User 76280 does not improve AUC. Reverting changes.
Training on augumented user 5913 10/50 current_auc = 0.8694620253164557
User 5913 AUC after training: 0.868868670886076
User 5913 does not improve AUC. Reverting changes.
Training on augumented user 61549 11/50 current_auc = 0.8694620253164557
User 61549 AUC after training: 0.8696598101265823
User 61549 improves AUC. Keeping the model.
Training on augumented user 56783 12/50 current_auc = 0.8696598101265823
User 56783 AUC after training: 0.8682753164556962
User 56783 does not improve AUC. Reverting changes.
Training on augumented user 118170 13/50 current_auc = 0.8696598101265823
User 118170 AUC after training: 0.8704509493670887
User 118170 improves AUC. Keeping the model.
Training on augumented user 1638 14/50 current_auc = 0.8704509493670887
User 1638 AUC after training: 0.8694620253164557
User 1638 does not improve AUC. Reverting changes.
Training on augumented user 95385 15/50 current_auc = 0.8704509493670887
User 95385 AUC after training: 0.8700553797468354
User 95385 does not improve AUC. Reverting changes.
Training on augumented user 121071 16/50 current_auc = 0.8704509493670887
User 121071 AUC after training: 0.8700553797468354
User 121071 does not improve AUC. Reverting changes.
Training on augumented user 66842 17/50 current_auc = 0.8704509493670887
User 66842 AUC after training: 0.8706487341772152
User 66842 improves AUC. Keeping the model.
Training on augumented user 81509 18/50 current_auc = 0.8706487341772152
User 81509 AUC after training: 0.8704509493670886
User 81509 does not improve AUC. Reverting changes.
Training on augumented user 129662 19/50 current_auc = 0.8706487341772152
User 129662 AUC after training: 0.8700553797468354
User 129662 does not improve AUC. Reverting changes.
Training on augumented user 79316 20/50 current_auc = 0.8706487341772152
User 79316 AUC after training: 0.8690664556962026
User 79316 does not improve AUC. Reverting changes.
Training on augumented user 125559 21/50 current_auc = 0.8706487341772152
User 125559 AUC after training: 0.871242088607595
User 125559 improves AUC. Keeping the model.
Training on augumented user 97245 22/50 current_auc = 0.871242088607595
User 97245 AUC after training: 0.8696598101265823
User 97245 does not improve AUC. Reverting changes.
Training on augumented user 85829 23/50 current_auc = 0.871242088607595
User 85829 AUC after training: 0.8700553797468354
User 85829 does not improve AUC. Reverting changes.
Training on augumented user 18436 24/50 current_auc = 0.871242088607595
User 18436 AUC after training: 0.8704509493670887
User 18436 does not improve AUC. Reverting changes.
Training on augumented user 128947 25/50 current_auc = 0.871242088607595
User 128947 AUC after training: 0.8704509493670887
User 128947 does not improve AUC. Reverting changes.
Training on augumented user 44273 26/50 current_auc = 0.871242088607595
User 44273 AUC after training: 0.8674841772151899
User 44273 does not improve AUC. Reverting changes.
Training on augumented user 84868 27/50 current_auc = 0.871242088607595
User 84868 AUC after training: 0.8708465189873418
User 84868 does not improve AUC. Reverting changes.
Training on augumented user 84320 28/50 current_auc = 0.871242088607595
User 84320 AUC after training: 0.8700553797468354
User 84320 does not improve AUC. Reverting changes.
Training on augumented user 3199 29/50 current_auc = 0.871242088607595
User 3199 AUC after training: 0.8696598101265822
User 3199 does not improve AUC. Reverting changes.
Training on augumented user 76540 30/50 current_auc = 0.871242088607595
User 76540 AUC after training: 0.8686708860759493
User 76540 does not improve AUC. Reverting changes.
Training on augumented user 11610 31/50 current_auc = 0.871242088607595
User 11610 AUC after training: 0.8706487341772152
User 11610 does not improve AUC. Reverting changes.
Training on augumented user 118360 32/50 current_auc = 0.871242088607595
User 118360 AUC after training: 0.8696598101265823
User 118360 does not improve AUC. Reverting changes.
Training on augumented user 32106 33/50 current_auc = 0.871242088607595
User 32106 AUC after training: 0.8696598101265822
User 32106 does not improve AUC. Reverting changes.
Training on augumented user 95931 34/50 current_auc = 0.871242088607595
User 95931 AUC after training: 0.870253164556962
User 95931 does not improve AUC. Reverting changes.
Training on augumented user 26342 35/50 current_auc = 0.871242088607595
User 26342 AUC after training: 0.8704509493670887
User 26342 does not improve AUC. Reverting changes.
Training on augumented user 118010 36/50 current_auc = 0.871242088607595
User 118010 AUC after training: 0.8670886075949368
User 118010 does not improve AUC. Reverting changes.
Training on augumented user 52265 37/50 current_auc = 0.871242088607595
User 52265 AUC after training: 0.8706487341772152
User 52265 does not improve AUC. Reverting changes.
Training on augumented user 27594 38/50 current_auc = 0.871242088607595
User 27594 AUC after training: 0.8700553797468354
User 27594 does not improve AUC. Reverting changes.
Training on augumented user 16707 39/50 current_auc = 0.871242088607595
User 16707 AUC after training: 0.8659018987341772
User 16707 does not improve AUC. Reverting changes.
Training on augumented user 62020 40/50 current_auc = 0.871242088607595
User 62020 AUC after training: 0.871242088607595
User 62020 does not improve AUC. Reverting changes.
Training on augumented user 29604 41/50 current_auc = 0.871242088607595
User 29604 AUC after training: 0.8708465189873418
User 29604 does not improve AUC. Reverting changes.
Training on augumented user 13445 42/50 current_auc = 0.871242088607595
User 13445 AUC after training: 0.8696598101265823
User 13445 does not improve AUC. Reverting changes.
Training on augumented user 24313 43/50 current_auc = 0.871242088607595
User 24313 AUC after training: 0.8696598101265822
User 24313 does not improve AUC. Reverting changes.
Training on augumented user 36271 44/50 current_auc = 0.871242088607595
User 36271 AUC after training: 0.8700553797468354
User 36271 does not improve AUC. Reverting changes.
Training on augumented user 76763 45/50 current_auc = 0.871242088607595
User 76763 AUC after training: 0.8716376582278481
User 76763 improves AUC. Keeping the model.
Training on augumented user 81588 46/50 current_auc = 0.8716376582278481
User 81588 AUC after training: 0.8706487341772152
User 81588 does not improve AUC. Reverting changes.
Training on augumented user 121094 47/50 current_auc = 0.8716376582278481
User 121094 AUC after training: 0.8700553797468354
User 121094 does not improve AUC. Reverting changes.
Training on augumented user 92312 48/50 current_auc = 0.8716376582278481
User 92312 AUC after training: 0.8712420886075949
User 92312 does not improve AUC. Reverting changes.
Training on augumented user 83576 49/50 current_auc = 0.8716376582278481
User 83576 AUC after training: 0.8720332278481013
User 83576 improves AUC. Keeping the model.
[2024-12-02 18:42:01.556603] start test user 85525 119/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:42:01.985425] start test user 85525 119/568 recall augumented users by random, augumented_users = [30854, 939, 116464, 97438, 123692, 26208, 57567, 93412, 4731, 23554, 28695, 10880, 15245, 31571, 116555, 62858, 137595, 91318, 2636, 54467, 108760, 97586, 56581, 84788, 98636, 93729, 4688, 58284, 8063, 9939, 74106, 41802, 82129, 60742, 123138, 49629, 54054, 63911, 41320, 70725, 115561, 17358, 72708, 128797, 93018, 35577, 47494, 120417, 137034, 14550]
[2024-12-02 18:42:02.001417] user = 85525 Cloud 119/568
[2024-12-02 18:42:02.030106] user = 85525 Local 119/568
[2024-12-02 18:42:02.298243] user = 85525 Local+ 119/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:42:04.880260] user = 85525 MPDA- 119/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5895331325301204
Training on augumented user 30854 0/50 current_auc = 0.5895331325301204
User 30854 AUC after training: 0.5897590361445783
User 30854 improves AUC. Keeping the model.
Training on augumented user 939 1/50 current_auc = 0.5897590361445783
User 939 AUC after training: 0.5906626506024096
User 939 improves AUC. Keeping the model.
Training on augumented user 116464 2/50 current_auc = 0.5906626506024096
User 116464 AUC after training: 0.5914156626506024
User 116464 improves AUC. Keeping the model.
Training on augumented user 97438 3/50 current_auc = 0.5914156626506024
User 97438 AUC after training: 0.5901731927710843
User 97438 does not improve AUC. Reverting changes.
Training on augumented user 123692 4/50 current_auc = 0.5914156626506024
User 123692 AUC after training: 0.5913403614457832
User 123692 does not improve AUC. Reverting changes.
Training on augumented user 26208 5/50 current_auc = 0.5914156626506024
User 26208 AUC after training: 0.591867469879518
User 26208 improves AUC. Keeping the model.
Training on augumented user 57567 6/50 current_auc = 0.591867469879518
User 57567 AUC after training: 0.591566265060241
User 57567 does not improve AUC. Reverting changes.
Training on augumented user 93412 7/50 current_auc = 0.591867469879518
User 93412 AUC after training: 0.5912650602409638
User 93412 does not improve AUC. Reverting changes.
Training on augumented user 4731 8/50 current_auc = 0.591867469879518
User 4731 AUC after training: 0.592394578313253
User 4731 improves AUC. Keeping the model.
Training on augumented user 23554 9/50 current_auc = 0.592394578313253
User 23554 AUC after training: 0.5923945783132529
User 23554 does not improve AUC. Reverting changes.
Training on augumented user 28695 10/50 current_auc = 0.592394578313253
User 28695 AUC after training: 0.5920933734939758
User 28695 does not improve AUC. Reverting changes.
Training on augumented user 10880 11/50 current_auc = 0.592394578313253
User 10880 AUC after training: 0.5923192771084338
User 10880 does not improve AUC. Reverting changes.
Training on augumented user 15245 12/50 current_auc = 0.592394578313253
User 15245 AUC after training: 0.5917168674698795
User 15245 does not improve AUC. Reverting changes.
Training on augumented user 31571 13/50 current_auc = 0.592394578313253
User 31571 AUC after training: 0.5921686746987952
User 31571 does not improve AUC. Reverting changes.
Training on augumented user 116555 14/50 current_auc = 0.592394578313253
User 116555 AUC after training: 0.5903990963855422
User 116555 does not improve AUC. Reverting changes.
Training on augumented user 62858 15/50 current_auc = 0.592394578313253
User 62858 AUC after training: 0.592394578313253
User 62858 does not improve AUC. Reverting changes.
Training on augumented user 137595 16/50 current_auc = 0.592394578313253
User 137595 AUC after training: 0.5927710843373494
User 137595 improves AUC. Keeping the model.
Training on augumented user 91318 17/50 current_auc = 0.5927710843373494
User 91318 AUC after training: 0.5923945783132529
User 91318 does not improve AUC. Reverting changes.
Training on augumented user 2636 18/50 current_auc = 0.5927710843373494
User 2636 AUC after training: 0.592394578313253
User 2636 does not improve AUC. Reverting changes.
Training on augumented user 54467 19/50 current_auc = 0.5927710843373494
User 54467 AUC after training: 0.5922439759036144
User 54467 does not improve AUC. Reverting changes.
Training on augumented user 108760 20/50 current_auc = 0.5927710843373494
User 108760 AUC after training: 0.5925451807228915
User 108760 does not improve AUC. Reverting changes.
Training on augumented user 97586 21/50 current_auc = 0.5927710843373494
User 97586 AUC after training: 0.5925451807228915
User 97586 does not improve AUC. Reverting changes.
Training on augumented user 56581 22/50 current_auc = 0.5927710843373494
User 56581 AUC after training: 0.5923192771084337
User 56581 does not improve AUC. Reverting changes.
Training on augumented user 84788 23/50 current_auc = 0.5927710843373494
User 84788 AUC after training: 0.5925451807228915
User 84788 does not improve AUC. Reverting changes.
Training on augumented user 98636 24/50 current_auc = 0.5927710843373494
User 98636 AUC after training: 0.5925451807228915
User 98636 does not improve AUC. Reverting changes.
Training on augumented user 93729 25/50 current_auc = 0.5927710843373494
User 93729 AUC after training: 0.5907379518072289
User 93729 does not improve AUC. Reverting changes.
Training on augumented user 4688 26/50 current_auc = 0.5927710843373494
User 4688 AUC after training: 0.5917168674698795
User 4688 does not improve AUC. Reverting changes.
Training on augumented user 58284 27/50 current_auc = 0.5927710843373494
User 58284 AUC after training: 0.5923192771084337
User 58284 does not improve AUC. Reverting changes.
Training on augumented user 8063 28/50 current_auc = 0.5927710843373494
User 8063 AUC after training: 0.5918674698795181
User 8063 does not improve AUC. Reverting changes.
Training on augumented user 9939 29/50 current_auc = 0.5927710843373494
User 9939 AUC after training: 0.5923945783132529
User 9939 does not improve AUC. Reverting changes.
Training on augumented user 74106 30/50 current_auc = 0.5927710843373494
User 74106 AUC after training: 0.592394578313253
User 74106 does not improve AUC. Reverting changes.
Training on augumented user 41802 31/50 current_auc = 0.5927710843373494
User 41802 AUC after training: 0.5928463855421686
User 41802 improves AUC. Keeping the model.
Training on augumented user 82129 32/50 current_auc = 0.5928463855421686
User 82129 AUC after training: 0.5923945783132529
User 82129 does not improve AUC. Reverting changes.
Training on augumented user 60742 33/50 current_auc = 0.5928463855421686
User 60742 AUC after training: 0.5929969879518072
User 60742 improves AUC. Keeping the model.
Training on augumented user 123138 34/50 current_auc = 0.5929969879518072
User 123138 AUC after training: 0.5927710843373494
User 123138 does not improve AUC. Reverting changes.
Training on augumented user 49629 35/50 current_auc = 0.5929969879518072
User 49629 AUC after training: 0.5926957831325301
User 49629 does not improve AUC. Reverting changes.
Training on augumented user 54054 36/50 current_auc = 0.5929969879518072
User 54054 AUC after training: 0.5921686746987952
User 54054 does not improve AUC. Reverting changes.
Training on augumented user 63911 37/50 current_auc = 0.5929969879518072
User 63911 AUC after training: 0.5928463855421687
User 63911 does not improve AUC. Reverting changes.
Training on augumented user 41320 38/50 current_auc = 0.5929969879518072
User 41320 AUC after training: 0.592921686746988
User 41320 does not improve AUC. Reverting changes.
Training on augumented user 70725 39/50 current_auc = 0.5929969879518072
User 70725 AUC after training: 0.5926204819277108
User 70725 does not improve AUC. Reverting changes.
Training on augumented user 115561 40/50 current_auc = 0.5929969879518072
User 115561 AUC after training: 0.592921686746988
User 115561 does not improve AUC. Reverting changes.
Training on augumented user 17358 41/50 current_auc = 0.5929969879518072
User 17358 AUC after training: 0.5929969879518072
User 17358 does not improve AUC. Reverting changes.
Training on augumented user 72708 42/50 current_auc = 0.5929969879518072
User 72708 AUC after training: 0.5930722891566266
User 72708 improves AUC. Keeping the model.
Training on augumented user 128797 43/50 current_auc = 0.5930722891566266
User 128797 AUC after training: 0.5912650602409638
User 128797 does not improve AUC. Reverting changes.
Training on augumented user 93018 44/50 current_auc = 0.5930722891566266
User 93018 AUC after training: 0.5900602409638555
User 93018 does not improve AUC. Reverting changes.
Training on augumented user 35577 45/50 current_auc = 0.5930722891566266
User 35577 AUC after training: 0.5928463855421686
User 35577 does not improve AUC. Reverting changes.
Training on augumented user 47494 46/50 current_auc = 0.5930722891566266
User 47494 AUC after training: 0.5929969879518072
User 47494 does not improve AUC. Reverting changes.
Training on augumented user 120417 47/50 current_auc = 0.5930722891566266
User 120417 AUC after training: 0.5931475903614457
User 120417 improves AUC. Keeping the model.
Training on augumented user 137034 48/50 current_auc = 0.5931475903614457
User 137034 AUC after training: 0.5931475903614458
User 137034 improves AUC. Keeping the model.
Training on augumented user 14550 49/50 current_auc = 0.5931475903614458
User 14550 AUC after training: 0.5933734939759036
User 14550 improves AUC. Keeping the model.
[2024-12-02 18:42:40.283855] start test user 85527 120/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:42:40.933637] start test user 85527 120/568 recall augumented users by random, augumented_users = [90172, 37853, 87651, 73703, 47325, 78020, 135392, 73308, 137416, 138193, 42435, 49959, 68449, 3637, 87772, 106724, 21247, 52558, 79556, 108271, 109415, 28232, 27973, 80836, 76645, 73683, 78584, 13299, 42285, 131349, 130507, 101990, 26674, 52197, 91881, 119609, 17874, 114424, 132088, 85436, 10376, 111502, 10012, 133478, 51486, 65282, 80950, 19045, 17795, 56462]
[2024-12-02 18:42:40.961741] user = 85527 Cloud 120/568
[2024-12-02 18:42:41.002758] user = 85527 Local 120/568
[2024-12-02 18:42:41.200908] user = 85527 Local+ 120/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:42:43.399359] user = 85527 MPDA- 120/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.686374549819928
Training on augumented user 90172 0/50 current_auc = 0.686374549819928
User 90172 AUC after training: 0.6863745498199281
User 90172 improves AUC. Keeping the model.
Training on augumented user 37853 1/50 current_auc = 0.6863745498199281
User 37853 AUC after training: 0.6875750300120048
User 37853 improves AUC. Keeping the model.
Training on augumented user 87651 2/50 current_auc = 0.6875750300120048
User 87651 AUC after training: 0.6878751500600241
User 87651 improves AUC. Keeping the model.
Training on augumented user 73703 3/50 current_auc = 0.6878751500600241
User 73703 AUC after training: 0.6881752701080434
User 73703 improves AUC. Keeping the model.
Training on augumented user 47325 4/50 current_auc = 0.6881752701080434
User 47325 AUC after training: 0.6878751500600241
User 47325 does not improve AUC. Reverting changes.
Training on augumented user 78020 5/50 current_auc = 0.6881752701080434
User 78020 AUC after training: 0.6887755102040817
User 78020 improves AUC. Keeping the model.
Training on augumented user 135392 6/50 current_auc = 0.6887755102040817
User 135392 AUC after training: 0.6884753901560624
User 135392 does not improve AUC. Reverting changes.
Training on augumented user 73308 7/50 current_auc = 0.6887755102040817
User 73308 AUC after training: 0.6884753901560625
User 73308 does not improve AUC. Reverting changes.
Training on augumented user 137416 8/50 current_auc = 0.6887755102040817
User 137416 AUC after training: 0.6890756302521008
User 137416 improves AUC. Keeping the model.
Training on augumented user 138193 9/50 current_auc = 0.6890756302521008
User 138193 AUC after training: 0.6887755102040816
User 138193 does not improve AUC. Reverting changes.
Training on augumented user 42435 10/50 current_auc = 0.6890756302521008
User 42435 AUC after training: 0.6872749099639857
User 42435 does not improve AUC. Reverting changes.
Training on augumented user 49959 11/50 current_auc = 0.6890756302521008
User 49959 AUC after training: 0.6893757503001201
User 49959 improves AUC. Keeping the model.
Training on augumented user 68449 12/50 current_auc = 0.6893757503001201
User 68449 AUC after training: 0.6887755102040817
User 68449 does not improve AUC. Reverting changes.
Training on augumented user 3637 13/50 current_auc = 0.6893757503001201
User 3637 AUC after training: 0.6890756302521008
User 3637 does not improve AUC. Reverting changes.
Training on augumented user 87772 14/50 current_auc = 0.6893757503001201
User 87772 AUC after training: 0.6878751500600241
User 87772 does not improve AUC. Reverting changes.
Training on augumented user 106724 15/50 current_auc = 0.6893757503001201
User 106724 AUC after training: 0.6887755102040817
User 106724 does not improve AUC. Reverting changes.
Training on augumented user 21247 16/50 current_auc = 0.6893757503001201
User 21247 AUC after training: 0.6872749099639857
User 21247 does not improve AUC. Reverting changes.
Training on augumented user 52558 17/50 current_auc = 0.6893757503001201
User 52558 AUC after training: 0.687875150060024
User 52558 does not improve AUC. Reverting changes.
Training on augumented user 79556 18/50 current_auc = 0.6893757503001201
User 79556 AUC after training: 0.6887755102040817
User 79556 does not improve AUC. Reverting changes.
Training on augumented user 108271 19/50 current_auc = 0.6893757503001201
User 108271 AUC after training: 0.6890756302521008
User 108271 does not improve AUC. Reverting changes.
Training on augumented user 109415 20/50 current_auc = 0.6893757503001201
User 109415 AUC after training: 0.6893757503001201
User 109415 does not improve AUC. Reverting changes.
Training on augumented user 28232 21/50 current_auc = 0.6893757503001201
User 28232 AUC after training: 0.6884753901560625
User 28232 does not improve AUC. Reverting changes.
Training on augumented user 27973 22/50 current_auc = 0.6893757503001201
User 27973 AUC after training: 0.6896758703481393
User 27973 improves AUC. Keeping the model.
Training on augumented user 80836 23/50 current_auc = 0.6896758703481393
User 80836 AUC after training: 0.6884753901560625
User 80836 does not improve AUC. Reverting changes.
Training on augumented user 76645 24/50 current_auc = 0.6896758703481393
User 76645 AUC after training: 0.6887755102040818
User 76645 does not improve AUC. Reverting changes.
Training on augumented user 73683 25/50 current_auc = 0.6896758703481393
User 73683 AUC after training: 0.6902761104441777
User 73683 improves AUC. Keeping the model.
Training on augumented user 78584 26/50 current_auc = 0.6902761104441777
User 78584 AUC after training: 0.6896758703481393
User 78584 does not improve AUC. Reverting changes.
Training on augumented user 13299 27/50 current_auc = 0.6902761104441777
User 13299 AUC after training: 0.6896758703481392
User 13299 does not improve AUC. Reverting changes.
Training on augumented user 42285 28/50 current_auc = 0.6902761104441777
User 42285 AUC after training: 0.6887755102040817
User 42285 does not improve AUC. Reverting changes.
Training on augumented user 131349 29/50 current_auc = 0.6902761104441777
User 131349 AUC after training: 0.6890756302521008
User 131349 does not improve AUC. Reverting changes.
Training on augumented user 130507 30/50 current_auc = 0.6902761104441777
User 130507 AUC after training: 0.6899759903961585
User 130507 does not improve AUC. Reverting changes.
Training on augumented user 101990 31/50 current_auc = 0.6902761104441777
User 101990 AUC after training: 0.6887755102040817
User 101990 does not improve AUC. Reverting changes.
Training on augumented user 26674 32/50 current_auc = 0.6902761104441777
User 26674 AUC after training: 0.6896758703481393
User 26674 does not improve AUC. Reverting changes.
Training on augumented user 52197 33/50 current_auc = 0.6902761104441777
User 52197 AUC after training: 0.6881752701080432
User 52197 does not improve AUC. Reverting changes.
Training on augumented user 91881 34/50 current_auc = 0.6902761104441777
User 91881 AUC after training: 0.6887755102040817
User 91881 does not improve AUC. Reverting changes.
Training on augumented user 119609 35/50 current_auc = 0.6902761104441777
User 119609 AUC after training: 0.689075630252101
User 119609 does not improve AUC. Reverting changes.
Training on augumented user 17874 36/50 current_auc = 0.6902761104441777
User 17874 AUC after training: 0.68937575030012
User 17874 does not improve AUC. Reverting changes.
Training on augumented user 114424 37/50 current_auc = 0.6902761104441777
User 114424 AUC after training: 0.6881752701080432
User 114424 does not improve AUC. Reverting changes.
Training on augumented user 132088 38/50 current_auc = 0.6902761104441777
User 132088 AUC after training: 0.6899759903961585
User 132088 does not improve AUC. Reverting changes.
Training on augumented user 85436 39/50 current_auc = 0.6902761104441777
User 85436 AUC after training: 0.6908763505402161
User 85436 improves AUC. Keeping the model.
Training on augumented user 10376 40/50 current_auc = 0.6908763505402161
User 10376 AUC after training: 0.6899759903961584
User 10376 does not improve AUC. Reverting changes.
Training on augumented user 111502 41/50 current_auc = 0.6908763505402161
User 111502 AUC after training: 0.6884753901560625
User 111502 does not improve AUC. Reverting changes.
Training on augumented user 10012 42/50 current_auc = 0.6908763505402161
User 10012 AUC after training: 0.6899759903961585
User 10012 does not improve AUC. Reverting changes.
Training on augumented user 133478 43/50 current_auc = 0.6908763505402161
User 133478 AUC after training: 0.6917767106842738
User 133478 improves AUC. Keeping the model.
Training on augumented user 51486 44/50 current_auc = 0.6917767106842738
User 51486 AUC after training: 0.6899759903961585
User 51486 does not improve AUC. Reverting changes.
Training on augumented user 65282 45/50 current_auc = 0.6917767106842738
User 65282 AUC after training: 0.6911764705882354
User 65282 does not improve AUC. Reverting changes.
Training on augumented user 80950 46/50 current_auc = 0.6917767106842738
User 80950 AUC after training: 0.6899759903961584
User 80950 does not improve AUC. Reverting changes.
Training on augumented user 19045 47/50 current_auc = 0.6917767106842738
User 19045 AUC after training: 0.6914765906362547
User 19045 does not improve AUC. Reverting changes.
Training on augumented user 17795 48/50 current_auc = 0.6917767106842738
User 17795 AUC after training: 0.6908763505402161
User 17795 does not improve AUC. Reverting changes.
Training on augumented user 56462 49/50 current_auc = 0.6917767106842738
User 56462 AUC after training: 0.6911764705882354
User 56462 does not improve AUC. Reverting changes.
[2024-12-02 18:43:15.582094] start test user 85544 121/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:43:16.466323] start test user 85544 121/568 recall augumented users by random, augumented_users = [14697, 37707, 80197, 47251, 98219, 17868, 114327, 122746, 116912, 26899, 41880, 46615, 98218, 132678, 85520, 135255, 3564, 56526, 13803, 104889, 12561, 55498, 122831, 102829, 247, 67526, 67536, 124643, 5750, 8773, 80843, 108907, 132008, 83266, 126901, 61690, 97793, 38777, 48327, 73883, 72877, 133149, 57380, 13168, 102964, 114892, 125966, 49855, 73949, 128213]
[2024-12-02 18:43:16.495569] user = 85544 Cloud 121/568
[2024-12-02 18:43:16.538070] user = 85544 Local 121/568
[2024-12-02 18:43:16.776056] user = 85544 Local+ 121/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:43:18.597963] user = 85544 MPDA- 121/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6111405835543766
Training on augumented user 14697 0/50 current_auc = 0.6111405835543766
User 14697 AUC after training: 0.6113527851458886
User 14697 improves AUC. Keeping the model.
Training on augumented user 37707 1/50 current_auc = 0.6113527851458886
User 37707 AUC after training: 0.6125729442970822
User 37707 improves AUC. Keeping the model.
Training on augumented user 80197 2/50 current_auc = 0.6125729442970822
User 80197 AUC after training: 0.6120954907161803
User 80197 does not improve AUC. Reverting changes.
Training on augumented user 47251 3/50 current_auc = 0.6125729442970822
User 47251 AUC after training: 0.61315649867374
User 47251 improves AUC. Keeping the model.
Training on augumented user 98219 4/50 current_auc = 0.61315649867374
User 98219 AUC after training: 0.613580901856764
User 98219 improves AUC. Keeping the model.
Training on augumented user 17868 5/50 current_auc = 0.613580901856764
User 17868 AUC after training: 0.613368700265252
User 17868 does not improve AUC. Reverting changes.
Training on augumented user 114327 6/50 current_auc = 0.613580901856764
User 114327 AUC after training: 0.6127851458885941
User 114327 does not improve AUC. Reverting changes.
Training on augumented user 122746 7/50 current_auc = 0.613580901856764
User 122746 AUC after training: 0.6134748010610079
User 122746 does not improve AUC. Reverting changes.
Training on augumented user 116912 8/50 current_auc = 0.613580901856764
User 116912 AUC after training: 0.613262599469496
User 116912 does not improve AUC. Reverting changes.
Training on augumented user 26899 9/50 current_auc = 0.613580901856764
User 26899 AUC after training: 0.6137400530503979
User 26899 improves AUC. Keeping the model.
Training on augumented user 41880 10/50 current_auc = 0.6137400530503979
User 41880 AUC after training: 0.6128381962864721
User 41880 does not improve AUC. Reverting changes.
Training on augumented user 46615 11/50 current_auc = 0.6137400530503979
User 46615 AUC after training: 0.6136870026525199
User 46615 does not improve AUC. Reverting changes.
Training on augumented user 98218 12/50 current_auc = 0.6137400530503979
User 98218 AUC after training: 0.6130503978779841
User 98218 does not improve AUC. Reverting changes.
Training on augumented user 132678 13/50 current_auc = 0.6137400530503979
User 132678 AUC after training: 0.6132625994694959
User 132678 does not improve AUC. Reverting changes.
Training on augumented user 85520 14/50 current_auc = 0.6137400530503979
User 85520 AUC after training: 0.6136339522546419
User 85520 does not improve AUC. Reverting changes.
Training on augumented user 135255 15/50 current_auc = 0.6137400530503979
User 135255 AUC after training: 0.613262599469496
User 135255 does not improve AUC. Reverting changes.
Training on augumented user 3564 16/50 current_auc = 0.6137400530503979
User 3564 AUC after training: 0.6131034482758622
User 3564 does not improve AUC. Reverting changes.
Training on augumented user 56526 17/50 current_auc = 0.6137400530503979
User 56526 AUC after training: 0.6132095490716181
User 56526 does not improve AUC. Reverting changes.
Training on augumented user 13803 18/50 current_auc = 0.6137400530503979
User 13803 AUC after training: 0.6128381962864721
User 13803 does not improve AUC. Reverting changes.
Training on augumented user 104889 19/50 current_auc = 0.6137400530503979
User 104889 AUC after training: 0.6133687002652519
User 104889 does not improve AUC. Reverting changes.
Training on augumented user 12561 20/50 current_auc = 0.6137400530503979
User 12561 AUC after training: 0.6132625994694959
User 12561 does not improve AUC. Reverting changes.
Training on augumented user 55498 21/50 current_auc = 0.6137400530503979
User 55498 AUC after training: 0.6136870026525199
User 55498 does not improve AUC. Reverting changes.
Training on augumented user 122831 22/50 current_auc = 0.6137400530503979
User 122831 AUC after training: 0.6124668435013263
User 122831 does not improve AUC. Reverting changes.
Training on augumented user 102829 23/50 current_auc = 0.6137400530503979
User 102829 AUC after training: 0.6136339522546419
User 102829 does not improve AUC. Reverting changes.
Training on augumented user 247 24/50 current_auc = 0.6137400530503979
User 247 AUC after training: 0.6115649867374005
User 247 does not improve AUC. Reverting changes.
Training on augumented user 67526 25/50 current_auc = 0.6137400530503979
User 67526 AUC after training: 0.613262599469496
User 67526 does not improve AUC. Reverting changes.
Training on augumented user 67536 26/50 current_auc = 0.6137400530503979
User 67536 AUC after training: 0.6137400530503979
User 67536 does not improve AUC. Reverting changes.
Training on augumented user 124643 27/50 current_auc = 0.6137400530503979
User 124643 AUC after training: 0.6125729442970823
User 124643 does not improve AUC. Reverting changes.
Training on augumented user 5750 28/50 current_auc = 0.6137400530503979
User 5750 AUC after training: 0.6127851458885941
User 5750 does not improve AUC. Reverting changes.
Training on augumented user 8773 29/50 current_auc = 0.6137400530503979
User 8773 AUC after training: 0.613103448275862
User 8773 does not improve AUC. Reverting changes.
Training on augumented user 80843 30/50 current_auc = 0.6137400530503979
User 80843 AUC after training: 0.613740053050398
User 80843 improves AUC. Keeping the model.
Training on augumented user 108907 31/50 current_auc = 0.613740053050398
User 108907 AUC after training: 0.613580901856764
User 108907 does not improve AUC. Reverting changes.
Training on augumented user 132008 32/50 current_auc = 0.613740053050398
User 132008 AUC after training: 0.61315649867374
User 132008 does not improve AUC. Reverting changes.
Training on augumented user 83266 33/50 current_auc = 0.613740053050398
User 83266 AUC after training: 0.613103448275862
User 83266 does not improve AUC. Reverting changes.
Training on augumented user 126901 34/50 current_auc = 0.613740053050398
User 126901 AUC after training: 0.613262599469496
User 126901 does not improve AUC. Reverting changes.
Training on augumented user 61690 35/50 current_auc = 0.613740053050398
User 61690 AUC after training: 0.6141114058355438
User 61690 improves AUC. Keeping the model.
Training on augumented user 97793 36/50 current_auc = 0.6141114058355438
User 97793 AUC after training: 0.6144827586206897
User 97793 improves AUC. Keeping the model.
Training on augumented user 38777 37/50 current_auc = 0.6144827586206897
User 38777 AUC after training: 0.6142175066312997
User 38777 does not improve AUC. Reverting changes.
Training on augumented user 48327 38/50 current_auc = 0.6144827586206897
User 48327 AUC after training: 0.6138461538461538
User 48327 does not improve AUC. Reverting changes.
Training on augumented user 73883 39/50 current_auc = 0.6144827586206897
User 73883 AUC after training: 0.6142175066312997
User 73883 does not improve AUC. Reverting changes.
Training on augumented user 72877 40/50 current_auc = 0.6144827586206897
User 72877 AUC after training: 0.6142175066312997
User 72877 does not improve AUC. Reverting changes.
Training on augumented user 133149 41/50 current_auc = 0.6144827586206897
User 133149 AUC after training: 0.6148010610079575
User 133149 improves AUC. Keeping the model.
Training on augumented user 57380 42/50 current_auc = 0.6148010610079575
User 57380 AUC after training: 0.6143236074270557
User 57380 does not improve AUC. Reverting changes.
Training on augumented user 13168 43/50 current_auc = 0.6148010610079575
User 13168 AUC after training: 0.6146949602122016
User 13168 does not improve AUC. Reverting changes.
Training on augumented user 102964 44/50 current_auc = 0.6148010610079575
User 102964 AUC after training: 0.6146419098143235
User 102964 does not improve AUC. Reverting changes.
Training on augumented user 114892 45/50 current_auc = 0.6148010610079575
User 114892 AUC after training: 0.6148541114058356
User 114892 improves AUC. Keeping the model.
Training on augumented user 125966 46/50 current_auc = 0.6148541114058356
User 125966 AUC after training: 0.61368700265252
User 125966 does not improve AUC. Reverting changes.
Training on augumented user 49855 47/50 current_auc = 0.6148541114058356
User 49855 AUC after training: 0.6148541114058356
User 49855 does not improve AUC. Reverting changes.
Training on augumented user 73949 48/50 current_auc = 0.6148541114058356
User 73949 AUC after training: 0.6144827586206897
User 73949 does not improve AUC. Reverting changes.
Training on augumented user 128213 49/50 current_auc = 0.6148541114058356
User 128213 AUC after training: 0.6148541114058355
User 128213 does not improve AUC. Reverting changes.
[2024-12-02 18:43:50.245297] start test user 85574 122/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:43:51.071356] start test user 85574 122/568 recall augumented users by random, augumented_users = [62308, 123429, 33872, 48833, 14433, 89655, 129229, 116581, 54637, 127622, 100481, 55865, 59630, 14218, 45277, 1667, 28659, 11351, 135441, 9226, 51446, 135452, 61155, 65106, 110253, 19991, 117114, 61872, 5165, 22176, 123744, 131849, 19992, 3096, 31496, 111937, 94659, 48011, 106518, 26372, 82571, 113415, 116104, 22084, 75141, 68906, 88788, 105575, 72290, 15046]
[2024-12-02 18:43:51.086370] user = 85574 Cloud 122/568
[2024-12-02 18:43:51.118687] user = 85574 Local 122/568
[2024-12-02 18:43:51.197449] user = 85574 Local+ 122/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:43:53.513688] user = 85574 MPDA- 122/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5488895588383077
Training on augumented user 62308 0/50 current_auc = 0.5488895588383077
User 62308 AUC after training: 0.5484875891870165
User 62308 does not improve AUC. Reverting changes.
Training on augumented user 123429 1/50 current_auc = 0.5488895588383077
User 123429 AUC after training: 0.5483870967741935
User 123429 does not improve AUC. Reverting changes.
Training on augumented user 33872 2/50 current_auc = 0.5488895588383077
User 33872 AUC after training: 0.5484875891870163
User 33872 does not improve AUC. Reverting changes.
Training on augumented user 48833 3/50 current_auc = 0.5488895588383077
User 48833 AUC after training: 0.5487890664254849
User 48833 does not improve AUC. Reverting changes.
Training on augumented user 14433 4/50 current_auc = 0.5488895588383077
User 14433 AUC after training: 0.5485378353934278
User 14433 does not improve AUC. Reverting changes.
Training on augumented user 89655 5/50 current_auc = 0.5488895588383077
User 89655 AUC after training: 0.5485880815998392
User 89655 does not improve AUC. Reverting changes.
Training on augumented user 129229 6/50 current_auc = 0.5488895588383077
User 129229 AUC after training: 0.5482866043613707
User 129229 does not improve AUC. Reverting changes.
Training on augumented user 116581 7/50 current_auc = 0.5488895588383077
User 116581 AUC after training: 0.548688574012662
User 116581 does not improve AUC. Reverting changes.
Training on augumented user 54637 8/50 current_auc = 0.5488895588383077
User 54637 AUC after training: 0.5488895588383077
User 54637 does not improve AUC. Reverting changes.
Training on augumented user 127622 9/50 current_auc = 0.5488895588383077
User 127622 AUC after training: 0.5482866043613707
User 127622 does not improve AUC. Reverting changes.
Training on augumented user 100481 10/50 current_auc = 0.5488895588383077
User 100481 AUC after training: 0.5487890664254849
User 100481 does not improve AUC. Reverting changes.
Training on augumented user 55865 11/50 current_auc = 0.5488895588383077
User 55865 AUC after training: 0.5482866043613708
User 55865 does not improve AUC. Reverting changes.
Training on augumented user 59630 12/50 current_auc = 0.5488895588383077
User 59630 AUC after training: 0.5464777409305597
User 59630 does not improve AUC. Reverting changes.
Training on augumented user 14218 13/50 current_auc = 0.5488895588383077
User 14218 AUC after training: 0.5483870967741935
User 14218 does not improve AUC. Reverting changes.
Training on augumented user 45277 14/50 current_auc = 0.5488895588383077
User 45277 AUC after training: 0.548688574012662
User 45277 does not improve AUC. Reverting changes.
Training on augumented user 1667 15/50 current_auc = 0.5488895588383077
User 1667 AUC after training: 0.546377248517737
User 1667 does not improve AUC. Reverting changes.
Training on augumented user 28659 16/50 current_auc = 0.5488895588383077
User 28659 AUC after training: 0.5472816802331424
User 28659 does not improve AUC. Reverting changes.
Training on augumented user 11351 17/50 current_auc = 0.5488895588383077
User 11351 AUC after training: 0.5489900512511305
User 11351 improves AUC. Keeping the model.
Training on augumented user 135441 18/50 current_auc = 0.5489900512511305
User 135441 AUC after training: 0.548688574012662
User 135441 does not improve AUC. Reverting changes.
Training on augumented user 9226 19/50 current_auc = 0.5489900512511305
User 9226 AUC after training: 0.5487890664254849
User 9226 does not improve AUC. Reverting changes.
Training on augumented user 51446 20/50 current_auc = 0.5489900512511305
User 51446 AUC after training: 0.5481861119485478
User 51446 does not improve AUC. Reverting changes.
Training on augumented user 135452 21/50 current_auc = 0.5489900512511305
User 135452 AUC after training: 0.5479851271229021
User 135452 does not improve AUC. Reverting changes.
Training on augumented user 61155 22/50 current_auc = 0.5489900512511305
User 61155 AUC after training: 0.5491910360767762
User 61155 improves AUC. Keeping the model.
Training on augumented user 65106 23/50 current_auc = 0.5491910360767762
User 65106 AUC after training: 0.5492915284895991
User 65106 improves AUC. Keeping the model.
Training on augumented user 110253 24/50 current_auc = 0.5492915284895991
User 110253 AUC after training: 0.5490905436639534
User 110253 does not improve AUC. Reverting changes.
Training on augumented user 19991 25/50 current_auc = 0.5492915284895991
User 19991 AUC after training: 0.5478846347100794
User 19991 does not improve AUC. Reverting changes.
Training on augumented user 117114 26/50 current_auc = 0.5492915284895991
User 117114 AUC after training: 0.5484875891870165
User 117114 does not improve AUC. Reverting changes.
Training on augumented user 61872 27/50 current_auc = 0.5492915284895991
User 61872 AUC after training: 0.5475831574716109
User 61872 does not improve AUC. Reverting changes.
Training on augumented user 5165 28/50 current_auc = 0.5492915284895991
User 5165 AUC after training: 0.5494925133152446
User 5165 improves AUC. Keeping the model.
Training on augumented user 22176 29/50 current_auc = 0.5494925133152446
User 22176 AUC after training: 0.5494925133152446
User 22176 does not improve AUC. Reverting changes.
Training on augumented user 123744 30/50 current_auc = 0.5494925133152446
User 123744 AUC after training: 0.5496934981408903
User 123744 improves AUC. Keeping the model.
Training on augumented user 131849 31/50 current_auc = 0.5496934981408903
User 131849 AUC after training: 0.5488895588383078
User 131849 does not improve AUC. Reverting changes.
Training on augumented user 19992 32/50 current_auc = 0.5496934981408903
User 19992 AUC after training: 0.5487890664254849
User 19992 does not improve AUC. Reverting changes.
Training on augumented user 3096 33/50 current_auc = 0.5496934981408903
User 3096 AUC after training: 0.5481861119485478
User 3096 does not improve AUC. Reverting changes.
Training on augumented user 31496 34/50 current_auc = 0.5496934981408903
User 31496 AUC after training: 0.5492412822831876
User 31496 does not improve AUC. Reverting changes.
Training on augumented user 111937 35/50 current_auc = 0.5496934981408903
User 111937 AUC after training: 0.5484875891870163
User 111937 does not improve AUC. Reverting changes.
Training on augumented user 94659 36/50 current_auc = 0.5496934981408903
User 94659 AUC after training: 0.5493920209024219
User 94659 does not improve AUC. Reverting changes.
Training on augumented user 48011 37/50 current_auc = 0.5496934981408903
User 48011 AUC after training: 0.5489900512511305
User 48011 does not improve AUC. Reverting changes.
Training on augumented user 106518 38/50 current_auc = 0.5496934981408903
User 106518 AUC after training: 0.5478846347100794
User 106518 does not improve AUC. Reverting changes.
Training on augumented user 26372 39/50 current_auc = 0.5496934981408903
User 26372 AUC after training: 0.5489900512511305
User 26372 does not improve AUC. Reverting changes.
Training on augumented user 82571 40/50 current_auc = 0.5496934981408903
User 82571 AUC after training: 0.5481358657421365
User 82571 does not improve AUC. Reverting changes.
Training on augumented user 113415 41/50 current_auc = 0.5496934981408903
User 113415 AUC after training: 0.5480856195357251
User 113415 does not improve AUC. Reverting changes.
Training on augumented user 116104 42/50 current_auc = 0.5496934981408903
User 116104 AUC after training: 0.5475831574716109
User 116104 does not improve AUC. Reverting changes.
Training on augumented user 22084 43/50 current_auc = 0.5496934981408903
User 22084 AUC after training: 0.5495930057280676
User 22084 does not improve AUC. Reverting changes.
Training on augumented user 75141 44/50 current_auc = 0.5496934981408903
User 75141 AUC after training: 0.5475329112651994
User 75141 does not improve AUC. Reverting changes.
Training on augumented user 68906 45/50 current_auc = 0.5496934981408903
User 68906 AUC after training: 0.5486885740126621
User 68906 does not improve AUC. Reverting changes.
Training on augumented user 88788 46/50 current_auc = 0.5496934981408903
User 88788 AUC after training: 0.5483870967741935
User 88788 does not improve AUC. Reverting changes.
Training on augumented user 105575 47/50 current_auc = 0.5496934981408903
User 105575 AUC after training: 0.5458747864536226
User 105575 does not improve AUC. Reverting changes.
Training on augumented user 72290 48/50 current_auc = 0.5496934981408903
User 72290 AUC after training: 0.5478846347100794
User 72290 does not improve AUC. Reverting changes.
Training on augumented user 15046 49/50 current_auc = 0.5496934981408903
User 15046 AUC after training: 0.549291528489599
User 15046 does not improve AUC. Reverting changes.
[2024-12-02 18:44:23.665478] start test user 85581 123/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:44:24.346784] start test user 85581 123/568 recall augumented users by random, augumented_users = [80955, 60524, 23121, 135053, 138338, 10481, 86551, 4088, 130583, 17177, 96520, 37329, 42892, 99109, 116755, 105998, 117997, 129535, 135933, 73544, 10044, 89380, 57961, 73220, 82672, 55548, 31949, 8859, 61105, 97150, 43163, 20869, 67019, 131857, 118189, 50400, 18791, 65278, 49240, 21285, 58543, 74575, 8301, 57139, 58051, 49851, 132334, 134936, 57191, 123564]
[2024-12-02 18:44:24.374877] user = 85581 Cloud 123/568
[2024-12-02 18:44:24.427539] user = 85581 Local 123/568
[2024-12-02 18:44:24.558698] user = 85581 Local+ 123/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:44:27.394790] user = 85581 MPDA- 123/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6840173506840174
Training on augumented user 80955 0/50 current_auc = 0.6840173506840174
User 80955 AUC after training: 0.68335001668335
User 80955 does not improve AUC. Reverting changes.
Training on augumented user 60524 1/50 current_auc = 0.6840173506840174
User 60524 AUC after training: 0.6836836836836837
User 60524 does not improve AUC. Reverting changes.
Training on augumented user 23121 2/50 current_auc = 0.6840173506840174
User 23121 AUC after training: 0.6840173506840174
User 23121 does not improve AUC. Reverting changes.
Training on augumented user 135053 3/50 current_auc = 0.6840173506840174
User 135053 AUC after training: 0.6840173506840174
User 135053 does not improve AUC. Reverting changes.
Training on augumented user 138338 4/50 current_auc = 0.6840173506840174
User 138338 AUC after training: 0.6840173506840174
User 138338 does not improve AUC. Reverting changes.
Training on augumented user 10481 5/50 current_auc = 0.6840173506840174
User 10481 AUC after training: 0.68335001668335
User 10481 does not improve AUC. Reverting changes.
Training on augumented user 86551 6/50 current_auc = 0.6840173506840174
User 86551 AUC after training: 0.685352018685352
User 86551 improves AUC. Keeping the model.
Training on augumented user 4088 7/50 current_auc = 0.685352018685352
User 4088 AUC after training: 0.6860193526860194
User 4088 improves AUC. Keeping the model.
Training on augumented user 130583 8/50 current_auc = 0.6860193526860194
User 130583 AUC after training: 0.6860193526860194
User 130583 does not improve AUC. Reverting changes.
Training on augumented user 17177 9/50 current_auc = 0.6860193526860194
User 17177 AUC after training: 0.6856856856856858
User 17177 does not improve AUC. Reverting changes.
Training on augumented user 96520 10/50 current_auc = 0.6860193526860194
User 96520 AUC after training: 0.6856856856856858
User 96520 does not improve AUC. Reverting changes.
Training on augumented user 37329 11/50 current_auc = 0.6860193526860194
User 37329 AUC after training: 0.6840173506840174
User 37329 does not improve AUC. Reverting changes.
Training on augumented user 42892 12/50 current_auc = 0.6860193526860194
User 42892 AUC after training: 0.685352018685352
User 42892 does not improve AUC. Reverting changes.
Training on augumented user 99109 13/50 current_auc = 0.6860193526860194
User 99109 AUC after training: 0.6846846846846847
User 99109 does not improve AUC. Reverting changes.
Training on augumented user 116755 14/50 current_auc = 0.6860193526860194
User 116755 AUC after training: 0.68335001668335
User 116755 does not improve AUC. Reverting changes.
Training on augumented user 105998 15/50 current_auc = 0.6860193526860194
User 105998 AUC after training: 0.6850183516850185
User 105998 does not improve AUC. Reverting changes.
Training on augumented user 117997 16/50 current_auc = 0.6860193526860194
User 117997 AUC after training: 0.685352018685352
User 117997 does not improve AUC. Reverting changes.
Training on augumented user 129535 17/50 current_auc = 0.6860193526860194
User 129535 AUC after training: 0.6850183516850185
User 129535 does not improve AUC. Reverting changes.
Training on augumented user 135933 18/50 current_auc = 0.6860193526860194
User 135933 AUC after training: 0.6840173506840174
User 135933 does not improve AUC. Reverting changes.
Training on augumented user 73544 19/50 current_auc = 0.6860193526860194
User 73544 AUC after training: 0.685352018685352
User 73544 does not improve AUC. Reverting changes.
Training on augumented user 10044 20/50 current_auc = 0.6860193526860194
User 10044 AUC after training: 0.6830163496830164
User 10044 does not improve AUC. Reverting changes.
Training on augumented user 89380 21/50 current_auc = 0.6860193526860194
User 89380 AUC after training: 0.6860193526860194
User 89380 does not improve AUC. Reverting changes.
Training on augumented user 57961 22/50 current_auc = 0.6860193526860194
User 57961 AUC after training: 0.6856856856856858
User 57961 does not improve AUC. Reverting changes.
Training on augumented user 73220 23/50 current_auc = 0.6860193526860194
User 73220 AUC after training: 0.6856856856856858
User 73220 does not improve AUC. Reverting changes.
Training on augumented user 82672 24/50 current_auc = 0.6860193526860194
User 82672 AUC after training: 0.6846846846846847
User 82672 does not improve AUC. Reverting changes.
Training on augumented user 55548 25/50 current_auc = 0.6860193526860194
User 55548 AUC after training: 0.6836836836836837
User 55548 does not improve AUC. Reverting changes.
Training on augumented user 31949 26/50 current_auc = 0.6860193526860194
User 31949 AUC after training: 0.6836836836836837
User 31949 does not improve AUC. Reverting changes.
Training on augumented user 8859 27/50 current_auc = 0.6860193526860194
User 8859 AUC after training: 0.6843510176843511
User 8859 does not improve AUC. Reverting changes.
Training on augumented user 61105 28/50 current_auc = 0.6860193526860194
User 61105 AUC after training: 0.68335001668335
User 61105 does not improve AUC. Reverting changes.
Training on augumented user 97150 29/50 current_auc = 0.6860193526860194
User 97150 AUC after training: 0.6860193526860194
User 97150 does not improve AUC. Reverting changes.
Training on augumented user 43163 30/50 current_auc = 0.6860193526860194
User 43163 AUC after training: 0.6836836836836837
User 43163 does not improve AUC. Reverting changes.
Training on augumented user 20869 31/50 current_auc = 0.6860193526860194
User 20869 AUC after training: 0.6856856856856858
User 20869 does not improve AUC. Reverting changes.
Training on augumented user 67019 32/50 current_auc = 0.6860193526860194
User 67019 AUC after training: 0.6840173506840174
User 67019 does not improve AUC. Reverting changes.
Training on augumented user 131857 33/50 current_auc = 0.6860193526860194
User 131857 AUC after training: 0.684351017684351
User 131857 does not improve AUC. Reverting changes.
Training on augumented user 118189 34/50 current_auc = 0.6860193526860194
User 118189 AUC after training: 0.6843510176843511
User 118189 does not improve AUC. Reverting changes.
Training on augumented user 50400 35/50 current_auc = 0.6860193526860194
User 50400 AUC after training: 0.6856856856856858
User 50400 does not improve AUC. Reverting changes.
Training on augumented user 18791 36/50 current_auc = 0.6860193526860194
User 18791 AUC after training: 0.6840173506840174
User 18791 does not improve AUC. Reverting changes.
Training on augumented user 65278 37/50 current_auc = 0.6860193526860194
User 65278 AUC after training: 0.6853520186853521
User 65278 does not improve AUC. Reverting changes.
Training on augumented user 49240 38/50 current_auc = 0.6860193526860194
User 49240 AUC after training: 0.684351017684351
User 49240 does not improve AUC. Reverting changes.
Training on augumented user 21285 39/50 current_auc = 0.6860193526860194
User 21285 AUC after training: 0.6830163496830164
User 21285 does not improve AUC. Reverting changes.
Training on augumented user 58543 40/50 current_auc = 0.6860193526860194
User 58543 AUC after training: 0.6846846846846847
User 58543 does not improve AUC. Reverting changes.
Training on augumented user 74575 41/50 current_auc = 0.6860193526860194
User 74575 AUC after training: 0.685352018685352
User 74575 does not improve AUC. Reverting changes.
Training on augumented user 8301 42/50 current_auc = 0.6860193526860194
User 8301 AUC after training: 0.6836836836836837
User 8301 does not improve AUC. Reverting changes.
Training on augumented user 57139 43/50 current_auc = 0.6860193526860194
User 57139 AUC after training: 0.6846846846846847
User 57139 does not improve AUC. Reverting changes.
Training on augumented user 58051 44/50 current_auc = 0.6860193526860194
User 58051 AUC after training: 0.6860193526860193
User 58051 does not improve AUC. Reverting changes.
Training on augumented user 49851 45/50 current_auc = 0.6860193526860194
User 49851 AUC after training: 0.6816816816816818
User 49851 does not improve AUC. Reverting changes.
Training on augumented user 132334 46/50 current_auc = 0.6860193526860194
User 132334 AUC after training: 0.684351017684351
User 132334 does not improve AUC. Reverting changes.
Training on augumented user 134936 47/50 current_auc = 0.6860193526860194
User 134936 AUC after training: 0.6820153486820154
User 134936 does not improve AUC. Reverting changes.
Training on augumented user 57191 48/50 current_auc = 0.6860193526860194
User 57191 AUC after training: 0.6840173506840174
User 57191 does not improve AUC. Reverting changes.
Training on augumented user 123564 49/50 current_auc = 0.6860193526860194
User 123564 AUC after training: 0.685352018685352
User 123564 does not improve AUC. Reverting changes.
[2024-12-02 18:44:53.523239] start test user 85605 124/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:44:54.069673] start test user 85605 124/568 recall augumented users by random, augumented_users = [15305, 71776, 69506, 43302, 54720, 126714, 132791, 129786, 31433, 37948, 131397, 42351, 106692, 125362, 86459, 5441, 128422, 52992, 51101, 67790, 51549, 71861, 73182, 11265, 54602, 82352, 100244, 104280, 62434, 85100, 113956, 88828, 3126, 122309, 11984, 84729, 66386, 42829, 63612, 26879, 117797, 94375, 124424, 133931, 2648, 57886, 13558, 124605, 135135, 134221]
[2024-12-02 18:44:54.085026] user = 85605 Cloud 124/568
[2024-12-02 18:44:54.096242] user = 85605 Local 124/568
[2024-12-02 18:44:54.165840] user = 85605 Local+ 124/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:44:56.513554] user = 85605 MPDA- 124/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.889945652173913
Training on augumented user 15305 0/50 current_auc = 0.889945652173913
User 15305 AUC after training: 0.8885869565217391
User 15305 does not improve AUC. Reverting changes.
Training on augumented user 71776 1/50 current_auc = 0.889945652173913
User 71776 AUC after training: 0.8885869565217391
User 71776 does not improve AUC. Reverting changes.
Training on augumented user 69506 2/50 current_auc = 0.889945652173913
User 69506 AUC after training: 0.8885869565217391
User 69506 does not improve AUC. Reverting changes.
Training on augumented user 43302 3/50 current_auc = 0.889945652173913
User 43302 AUC after training: 0.8885869565217391
User 43302 does not improve AUC. Reverting changes.
Training on augumented user 54720 4/50 current_auc = 0.889945652173913
User 54720 AUC after training: 0.889945652173913
User 54720 does not improve AUC. Reverting changes.
Training on augumented user 126714 5/50 current_auc = 0.889945652173913
User 126714 AUC after training: 0.8885869565217391
User 126714 does not improve AUC. Reverting changes.
Training on augumented user 132791 6/50 current_auc = 0.889945652173913
User 132791 AUC after training: 0.889945652173913
User 132791 does not improve AUC. Reverting changes.
Training on augumented user 129786 7/50 current_auc = 0.889945652173913
User 129786 AUC after training: 0.8885869565217391
User 129786 does not improve AUC. Reverting changes.
Training on augumented user 31433 8/50 current_auc = 0.889945652173913
User 31433 AUC after training: 0.889945652173913
User 31433 does not improve AUC. Reverting changes.
Training on augumented user 37948 9/50 current_auc = 0.889945652173913
User 37948 AUC after training: 0.8885869565217391
User 37948 does not improve AUC. Reverting changes.
Training on augumented user 131397 10/50 current_auc = 0.889945652173913
User 131397 AUC after training: 0.889945652173913
User 131397 does not improve AUC. Reverting changes.
Training on augumented user 42351 11/50 current_auc = 0.889945652173913
User 42351 AUC after training: 0.8885869565217391
User 42351 does not improve AUC. Reverting changes.
Training on augumented user 106692 12/50 current_auc = 0.889945652173913
User 106692 AUC after training: 0.8885869565217391
User 106692 does not improve AUC. Reverting changes.
Training on augumented user 125362 13/50 current_auc = 0.889945652173913
User 125362 AUC after training: 0.8899456521739131
User 125362 improves AUC. Keeping the model.
Training on augumented user 86459 14/50 current_auc = 0.8899456521739131
User 86459 AUC after training: 0.8899456521739131
User 86459 does not improve AUC. Reverting changes.
Training on augumented user 5441 15/50 current_auc = 0.8899456521739131
User 5441 AUC after training: 0.8899456521739131
User 5441 does not improve AUC. Reverting changes.
Training on augumented user 128422 16/50 current_auc = 0.8899456521739131
User 128422 AUC after training: 0.8899456521739131
User 128422 does not improve AUC. Reverting changes.
Training on augumented user 52992 17/50 current_auc = 0.8899456521739131
User 52992 AUC after training: 0.8899456521739131
User 52992 does not improve AUC. Reverting changes.
Training on augumented user 51101 18/50 current_auc = 0.8899456521739131
User 51101 AUC after training: 0.8899456521739131
User 51101 does not improve AUC. Reverting changes.
Training on augumented user 67790 19/50 current_auc = 0.8899456521739131
User 67790 AUC after training: 0.8899456521739131
User 67790 does not improve AUC. Reverting changes.
Training on augumented user 51549 20/50 current_auc = 0.8899456521739131
User 51549 AUC after training: 0.8885869565217391
User 51549 does not improve AUC. Reverting changes.
Training on augumented user 71861 21/50 current_auc = 0.8899456521739131
User 71861 AUC after training: 0.8899456521739131
User 71861 does not improve AUC. Reverting changes.
Training on augumented user 73182 22/50 current_auc = 0.8899456521739131
User 73182 AUC after training: 0.8885869565217391
User 73182 does not improve AUC. Reverting changes.
Training on augumented user 11265 23/50 current_auc = 0.8899456521739131
User 11265 AUC after training: 0.8899456521739131
User 11265 does not improve AUC. Reverting changes.
Training on augumented user 54602 24/50 current_auc = 0.8899456521739131
User 54602 AUC after training: 0.8899456521739131
User 54602 does not improve AUC. Reverting changes.
Training on augumented user 82352 25/50 current_auc = 0.8899456521739131
User 82352 AUC after training: 0.8899456521739131
User 82352 does not improve AUC. Reverting changes.
Training on augumented user 100244 26/50 current_auc = 0.8899456521739131
User 100244 AUC after training: 0.8899456521739131
User 100244 does not improve AUC. Reverting changes.
Training on augumented user 104280 27/50 current_auc = 0.8899456521739131
User 104280 AUC after training: 0.8899456521739131
User 104280 does not improve AUC. Reverting changes.
Training on augumented user 62434 28/50 current_auc = 0.8899456521739131
User 62434 AUC after training: 0.8885869565217391
User 62434 does not improve AUC. Reverting changes.
Training on augumented user 85100 29/50 current_auc = 0.8899456521739131
User 85100 AUC after training: 0.8899456521739131
User 85100 does not improve AUC. Reverting changes.
Training on augumented user 113956 30/50 current_auc = 0.8899456521739131
User 113956 AUC after training: 0.8899456521739131
User 113956 does not improve AUC. Reverting changes.
Training on augumented user 88828 31/50 current_auc = 0.8899456521739131
User 88828 AUC after training: 0.8899456521739131
User 88828 does not improve AUC. Reverting changes.
Training on augumented user 3126 32/50 current_auc = 0.8899456521739131
User 3126 AUC after training: 0.8885869565217391
User 3126 does not improve AUC. Reverting changes.
Training on augumented user 122309 33/50 current_auc = 0.8899456521739131
User 122309 AUC after training: 0.8899456521739131
User 122309 does not improve AUC. Reverting changes.
Training on augumented user 11984 34/50 current_auc = 0.8899456521739131
User 11984 AUC after training: 0.8899456521739131
User 11984 does not improve AUC. Reverting changes.
Training on augumented user 84729 35/50 current_auc = 0.8899456521739131
User 84729 AUC after training: 0.8899456521739131
User 84729 does not improve AUC. Reverting changes.
Training on augumented user 66386 36/50 current_auc = 0.8899456521739131
User 66386 AUC after training: 0.8885869565217391
User 66386 does not improve AUC. Reverting changes.
Training on augumented user 42829 37/50 current_auc = 0.8899456521739131
User 42829 AUC after training: 0.8899456521739131
User 42829 does not improve AUC. Reverting changes.
Training on augumented user 63612 38/50 current_auc = 0.8899456521739131
User 63612 AUC after training: 0.8899456521739131
User 63612 does not improve AUC. Reverting changes.
Training on augumented user 26879 39/50 current_auc = 0.8899456521739131
User 26879 AUC after training: 0.8885869565217391
User 26879 does not improve AUC. Reverting changes.
Training on augumented user 117797 40/50 current_auc = 0.8899456521739131
User 117797 AUC after training: 0.8899456521739131
User 117797 does not improve AUC. Reverting changes.
Training on augumented user 94375 41/50 current_auc = 0.8899456521739131
User 94375 AUC after training: 0.8885869565217391
User 94375 does not improve AUC. Reverting changes.
Training on augumented user 124424 42/50 current_auc = 0.8899456521739131
User 124424 AUC after training: 0.8899456521739131
User 124424 does not improve AUC. Reverting changes.
Training on augumented user 133931 43/50 current_auc = 0.8899456521739131
User 133931 AUC after training: 0.8885869565217391
User 133931 does not improve AUC. Reverting changes.
Training on augumented user 2648 44/50 current_auc = 0.8899456521739131
User 2648 AUC after training: 0.8899456521739131
User 2648 does not improve AUC. Reverting changes.
Training on augumented user 57886 45/50 current_auc = 0.8899456521739131
User 57886 AUC after training: 0.8899456521739131
User 57886 does not improve AUC. Reverting changes.
Training on augumented user 13558 46/50 current_auc = 0.8899456521739131
User 13558 AUC after training: 0.8885869565217391
User 13558 does not improve AUC. Reverting changes.
Training on augumented user 124605 47/50 current_auc = 0.8899456521739131
User 124605 AUC after training: 0.8899456521739131
User 124605 does not improve AUC. Reverting changes.
Training on augumented user 135135 48/50 current_auc = 0.8899456521739131
User 135135 AUC after training: 0.8913043478260869
User 135135 improves AUC. Keeping the model.
Training on augumented user 134221 49/50 current_auc = 0.8913043478260869
User 134221 AUC after training: 0.8913043478260869
User 134221 does not improve AUC. Reverting changes.
[2024-12-02 18:45:25.370714] start test user 85609 125/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:45:25.787505] start test user 85609 125/568 recall augumented users by random, augumented_users = [35308, 40120, 51932, 59194, 199, 11368, 30563, 100958, 89358, 10022, 127059, 61266, 119927, 112243, 81548, 124300, 506, 45986, 99919, 127766, 22567, 117537, 83522, 41059, 81881, 20853, 109239, 90717, 42298, 72762, 60722, 7725, 54851, 14174, 120382, 129199, 42945, 102688, 34437, 63624, 124484, 5538, 55566, 63000, 49278, 82182, 118511, 90715, 5684, 97640]
[2024-12-02 18:45:25.802491] user = 85609 Cloud 125/568
[2024-12-02 18:45:25.825301] user = 85609 Local 125/568
[2024-12-02 18:45:25.884767] user = 85609 Local+ 125/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:45:27.890726] user = 85609 MPDA- 125/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6777650210486031
Training on augumented user 35308 0/50 current_auc = 0.6777650210486031
User 35308 AUC after training: 0.6774779946421737
User 35308 does not improve AUC. Reverting changes.
Training on augumented user 40120 1/50 current_auc = 0.6777650210486031
User 40120 AUC after training: 0.6777650210486031
User 40120 does not improve AUC. Reverting changes.
Training on augumented user 51932 2/50 current_auc = 0.6777650210486031
User 51932 AUC after training: 0.6771909682357443
User 51932 does not improve AUC. Reverting changes.
Training on augumented user 59194 3/50 current_auc = 0.6777650210486031
User 59194 AUC after training: 0.6769996172981247
User 59194 does not improve AUC. Reverting changes.
Training on augumented user 199 4/50 current_auc = 0.6777650210486031
User 199 AUC after training: 0.677382319173364
User 199 does not improve AUC. Reverting changes.
Training on augumented user 11368 5/50 current_auc = 0.6777650210486031
User 11368 AUC after training: 0.6779563719862228
User 11368 improves AUC. Keeping the model.
Training on augumented user 30563 6/50 current_auc = 0.6779563719862228
User 30563 AUC after training: 0.6783390738614619
User 30563 improves AUC. Keeping the model.
Training on augumented user 100958 7/50 current_auc = 0.6783390738614619
User 100958 AUC after training: 0.6786261002678914
User 100958 improves AUC. Keeping the model.
Training on augumented user 89358 8/50 current_auc = 0.6786261002678914
User 89358 AUC after training: 0.6797742058936088
User 89358 improves AUC. Keeping the model.
Training on augumented user 10022 9/50 current_auc = 0.6797742058936088
User 10022 AUC after training: 0.6797742058936088
User 10022 does not improve AUC. Reverting changes.
Training on augumented user 127059 10/50 current_auc = 0.6797742058936088
User 127059 AUC after training: 0.679726368159204
User 127059 does not improve AUC. Reverting changes.
Training on augumented user 61266 11/50 current_auc = 0.6797742058936088
User 61266 AUC after training: 0.6792958285495599
User 61266 does not improve AUC. Reverting changes.
Training on augumented user 119927 12/50 current_auc = 0.6797742058936088
User 119927 AUC after training: 0.6792958285495599
User 119927 does not improve AUC. Reverting changes.
Training on augumented user 112243 13/50 current_auc = 0.6797742058936088
User 112243 AUC after training: 0.6796785304247991
User 112243 does not improve AUC. Reverting changes.
Training on augumented user 81548 14/50 current_auc = 0.6797742058936088
User 81548 AUC after training: 0.6795828549559894
User 81548 does not improve AUC. Reverting changes.
Training on augumented user 124300 15/50 current_auc = 0.6797742058936088
User 124300 AUC after training: 0.6793915040183697
User 124300 does not improve AUC. Reverting changes.
Training on augumented user 506 16/50 current_auc = 0.6797742058936088
User 506 AUC after training: 0.6795828549559894
User 506 does not improve AUC. Reverting changes.
Training on augumented user 45986 17/50 current_auc = 0.6797742058936088
User 45986 AUC after training: 0.6786261002678913
User 45986 does not improve AUC. Reverting changes.
Training on augumented user 99919 18/50 current_auc = 0.6797742058936088
User 99919 AUC after training: 0.6782433983926522
User 99919 does not improve AUC. Reverting changes.
Training on augumented user 127766 19/50 current_auc = 0.6797742058936088
User 127766 AUC after training: 0.6784347493302717
User 127766 does not improve AUC. Reverting changes.
Training on augumented user 22567 20/50 current_auc = 0.6797742058936088
User 22567 AUC after training: 0.6779563719862228
User 22567 does not improve AUC. Reverting changes.
Training on augumented user 117537 21/50 current_auc = 0.6797742058936088
User 117537 AUC after training: 0.6802525832376579
User 117537 improves AUC. Keeping the model.
Training on augumented user 83522 22/50 current_auc = 0.6802525832376579
User 83522 AUC after training: 0.678817451205511
User 83522 does not improve AUC. Reverting changes.
Training on augumented user 41059 23/50 current_auc = 0.6802525832376579
User 41059 AUC after training: 0.6801569077688481
User 41059 does not improve AUC. Reverting changes.
Training on augumented user 81881 24/50 current_auc = 0.6802525832376579
User 81881 AUC after training: 0.6795828549559894
User 81881 does not improve AUC. Reverting changes.
Training on augumented user 20853 25/50 current_auc = 0.6802525832376579
User 20853 AUC after training: 0.6802525832376579
User 20853 does not improve AUC. Reverting changes.
Training on augumented user 109239 26/50 current_auc = 0.6802525832376579
User 109239 AUC after training: 0.6792001530807501
User 109239 does not improve AUC. Reverting changes.
Training on augumented user 90717 27/50 current_auc = 0.6802525832376579
User 90717 AUC after training: 0.6794871794871794
User 90717 does not improve AUC. Reverting changes.
Training on augumented user 42298 28/50 current_auc = 0.6802525832376579
User 42298 AUC after training: 0.6793915040183697
User 42298 does not improve AUC. Reverting changes.
Training on augumented user 72762 29/50 current_auc = 0.6802525832376579
User 72762 AUC after training: 0.6806831228473019
User 72762 improves AUC. Keeping the model.
Training on augumented user 60722 30/50 current_auc = 0.6806831228473019
User 60722 AUC after training: 0.6799177190968236
User 60722 does not improve AUC. Reverting changes.
Training on augumented user 7725 31/50 current_auc = 0.6806831228473019
User 7725 AUC after training: 0.6798220436280138
User 7725 does not improve AUC. Reverting changes.
Training on augumented user 54851 32/50 current_auc = 0.6806831228473019
User 54851 AUC after training: 0.6803482587064676
User 54851 does not improve AUC. Reverting changes.
Training on augumented user 14174 33/50 current_auc = 0.6806831228473019
User 14174 AUC after training: 0.6808266360505167
User 14174 improves AUC. Keeping the model.
Training on augumented user 120382 34/50 current_auc = 0.6808266360505167
User 120382 AUC after training: 0.6805396096440873
User 120382 does not improve AUC. Reverting changes.
Training on augumented user 129199 35/50 current_auc = 0.6808266360505167
User 129199 AUC after training: 0.6802525832376579
User 129199 does not improve AUC. Reverting changes.
Training on augumented user 42945 36/50 current_auc = 0.6808266360505167
User 42945 AUC after training: 0.6802525832376578
User 42945 does not improve AUC. Reverting changes.
Training on augumented user 102688 37/50 current_auc = 0.6808266360505167
User 102688 AUC after training: 0.6806352851128971
User 102688 does not improve AUC. Reverting changes.
Training on augumented user 34437 38/50 current_auc = 0.6808266360505167
User 34437 AUC after training: 0.6793915040183697
User 34437 does not improve AUC. Reverting changes.
Training on augumented user 63624 39/50 current_auc = 0.6808266360505167
User 63624 AUC after training: 0.6817355530042097
User 63624 improves AUC. Keeping the model.
Training on augumented user 124484 40/50 current_auc = 0.6817355530042097
User 124484 AUC after training: 0.6809701492537313
User 124484 does not improve AUC. Reverting changes.
Training on augumented user 5538 41/50 current_auc = 0.6817355530042097
User 5538 AUC after training: 0.681161500191351
User 5538 does not improve AUC. Reverting changes.
Training on augumented user 55566 42/50 current_auc = 0.6817355530042097
User 55566 AUC after training: 0.6814963643321852
User 55566 does not improve AUC. Reverting changes.
Training on augumented user 63000 43/50 current_auc = 0.6817355530042097
User 63000 AUC after training: 0.682070417145044
User 63000 improves AUC. Keeping the model.
Training on augumented user 49278 44/50 current_auc = 0.682070417145044
User 49278 AUC after training: 0.6814006888633755
User 49278 does not improve AUC. Reverting changes.
Training on augumented user 82182 45/50 current_auc = 0.682070417145044
User 82182 AUC after training: 0.682118254879449
User 82182 improves AUC. Keeping the model.
Training on augumented user 118511 46/50 current_auc = 0.682118254879449
User 118511 AUC after training: 0.6819269039418293
User 118511 does not improve AUC. Reverting changes.
Training on augumented user 90715 47/50 current_auc = 0.682118254879449
User 90715 AUC after training: 0.6814006888633755
User 90715 does not improve AUC. Reverting changes.
Training on augumented user 5684 48/50 current_auc = 0.682118254879449
User 5684 AUC after training: 0.6806352851128971
User 5684 does not improve AUC. Reverting changes.
Training on augumented user 97640 49/50 current_auc = 0.682118254879449
User 97640 AUC after training: 0.6809701492537313
User 97640 does not improve AUC. Reverting changes.
[2024-12-02 18:45:58.595068] start test user 85610 126/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:45:59.287394] start test user 85610 126/568 recall augumented users by random, augumented_users = [3754, 9630, 65519, 36807, 57397, 58943, 36263, 733, 98435, 86257, 31347, 127959, 84810, 111961, 96563, 89860, 120936, 119792, 49173, 119955, 75220, 56462, 115409, 133370, 71291, 41383, 97974, 81393, 6949, 118372, 98760, 28808, 7693, 137867, 92908, 108672, 89706, 91872, 6430, 16456, 15436, 52328, 49324, 22355, 127843, 124070, 133722, 65546, 66577, 113216]
[2024-12-02 18:45:59.302468] user = 85610 Cloud 126/568
[2024-12-02 18:45:59.324529] user = 85610 Local 126/568
[2024-12-02 18:45:59.365896] user = 85610 Local+ 126/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:46:01.391067] user = 85610 MPDA- 126/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5953172492401215
Training on augumented user 3754 0/50 current_auc = 0.5953172492401215
User 3754 AUC after training: 0.5955072188449848
User 3754 improves AUC. Keeping the model.
Training on augumented user 9630 1/50 current_auc = 0.5955072188449848
User 9630 AUC after training: 0.5952697568389057
User 9630 does not improve AUC. Reverting changes.
Training on augumented user 65519 2/50 current_auc = 0.5955072188449848
User 65519 AUC after training: 0.59522226443769
User 65519 does not improve AUC. Reverting changes.
Training on augumented user 36807 3/50 current_auc = 0.5955072188449848
User 36807 AUC after training: 0.5927526595744681
User 36807 does not improve AUC. Reverting changes.
Training on augumented user 57397 4/50 current_auc = 0.5955072188449848
User 57397 AUC after training: 0.5953172492401215
User 57397 does not improve AUC. Reverting changes.
Training on augumented user 58943 5/50 current_auc = 0.5955072188449848
User 58943 AUC after training: 0.5946048632218845
User 58943 does not improve AUC. Reverting changes.
Training on augumented user 36263 6/50 current_auc = 0.5955072188449848
User 36263 AUC after training: 0.5915653495440729
User 36263 does not improve AUC. Reverting changes.
Training on augumented user 733 7/50 current_auc = 0.5955072188449848
User 733 AUC after training: 0.59522226443769
User 733 does not improve AUC. Reverting changes.
Training on augumented user 98435 8/50 current_auc = 0.5955072188449848
User 98435 AUC after training: 0.5945098784194529
User 98435 does not improve AUC. Reverting changes.
Training on augumented user 86257 9/50 current_auc = 0.5955072188449848
User 86257 AUC after training: 0.5949373100303952
User 86257 does not improve AUC. Reverting changes.
Training on augumented user 31347 10/50 current_auc = 0.5955072188449848
User 31347 AUC after training: 0.5938449848024316
User 31347 does not improve AUC. Reverting changes.
Training on augumented user 127959 11/50 current_auc = 0.5955072188449848
User 127959 AUC after training: 0.5939874620060791
User 127959 does not improve AUC. Reverting changes.
Training on augumented user 84810 12/50 current_auc = 0.5955072188449848
User 84810 AUC after training: 0.5962670972644376
User 84810 improves AUC. Keeping the model.
Training on augumented user 111961 13/50 current_auc = 0.5962670972644376
User 111961 AUC after training: 0.595934650455927
User 111961 does not improve AUC. Reverting changes.
Training on augumented user 96563 14/50 current_auc = 0.5962670972644376
User 96563 AUC after training: 0.5957921732522795
User 96563 does not improve AUC. Reverting changes.
Training on augumented user 89860 15/50 current_auc = 0.5962670972644376
User 89860 AUC after training: 0.5901405775075989
User 89860 does not improve AUC. Reverting changes.
Training on augumented user 120936 16/50 current_auc = 0.5962670972644376
User 120936 AUC after training: 0.5956022036474165
User 120936 does not improve AUC. Reverting changes.
Training on augumented user 119792 17/50 current_auc = 0.5962670972644376
User 119792 AUC after training: 0.5961721124620061
User 119792 does not improve AUC. Reverting changes.
Training on augumented user 49173 18/50 current_auc = 0.5962670972644376
User 49173 AUC after training: 0.5957921732522796
User 49173 does not improve AUC. Reverting changes.
Training on augumented user 119955 19/50 current_auc = 0.5962670972644376
User 119955 AUC after training: 0.5962670972644377
User 119955 improves AUC. Keeping the model.
Training on augumented user 75220 20/50 current_auc = 0.5962670972644377
User 75220 AUC after training: 0.5955072188449848
User 75220 does not improve AUC. Reverting changes.
Training on augumented user 56462 21/50 current_auc = 0.5962670972644377
User 56462 AUC after training: 0.5951272796352584
User 56462 does not improve AUC. Reverting changes.
Training on augumented user 115409 22/50 current_auc = 0.5962670972644377
User 115409 AUC after training: 0.5956022036474165
User 115409 does not improve AUC. Reverting changes.
Training on augumented user 133370 23/50 current_auc = 0.5962670972644377
User 133370 AUC after training: 0.5958871580547113
User 133370 does not improve AUC. Reverting changes.
Training on augumented user 71291 24/50 current_auc = 0.5962670972644377
User 71291 AUC after training: 0.5951272796352584
User 71291 does not improve AUC. Reverting changes.
Training on augumented user 41383 25/50 current_auc = 0.5962670972644377
User 41383 AUC after training: 0.5956022036474165
User 41383 does not improve AUC. Reverting changes.
Training on augumented user 97974 26/50 current_auc = 0.5962670972644377
User 97974 AUC after training: 0.5967895136778116
User 97974 improves AUC. Keeping the model.
Training on augumented user 81393 27/50 current_auc = 0.5967895136778116
User 81393 AUC after training: 0.597644376899696
User 81393 improves AUC. Keeping the model.
Training on augumented user 6949 28/50 current_auc = 0.597644376899696
User 6949 AUC after training: 0.5969794832826747
User 6949 does not improve AUC. Reverting changes.
Training on augumented user 118372 29/50 current_auc = 0.597644376899696
User 118372 AUC after training: 0.5958396656534954
User 118372 does not improve AUC. Reverting changes.
Training on augumented user 98760 30/50 current_auc = 0.597644376899696
User 98760 AUC after training: 0.5973594224924011
User 98760 does not improve AUC. Reverting changes.
Training on augumented user 28808 31/50 current_auc = 0.597644376899696
User 28808 AUC after training: 0.5965995440729484
User 28808 does not improve AUC. Reverting changes.
Training on augumented user 7693 32/50 current_auc = 0.597644376899696
User 7693 AUC after training: 0.5965995440729482
User 7693 does not improve AUC. Reverting changes.
Training on augumented user 137867 33/50 current_auc = 0.597644376899696
User 137867 AUC after training: 0.5967420212765958
User 137867 does not improve AUC. Reverting changes.
Training on augumented user 92908 34/50 current_auc = 0.597644376899696
User 92908 AUC after training: 0.5969794832826747
User 92908 does not improve AUC. Reverting changes.
Training on augumented user 108672 35/50 current_auc = 0.597644376899696
User 108672 AUC after training: 0.5968844984802432
User 108672 does not improve AUC. Reverting changes.
Training on augumented user 89706 36/50 current_auc = 0.597644376899696
User 89706 AUC after training: 0.5973119300911854
User 89706 does not improve AUC. Reverting changes.
Training on augumented user 91872 37/50 current_auc = 0.597644376899696
User 91872 AUC after training: 0.5974544072948329
User 91872 does not improve AUC. Reverting changes.
Training on augumented user 6430 38/50 current_auc = 0.597644376899696
User 6430 AUC after training: 0.596884498480243
User 6430 does not improve AUC. Reverting changes.
Training on augumented user 16456 39/50 current_auc = 0.597644376899696
User 16456 AUC after training: 0.5961246200607903
User 16456 does not improve AUC. Reverting changes.
Training on augumented user 15436 40/50 current_auc = 0.597644376899696
User 15436 AUC after training: 0.598404255319149
User 15436 improves AUC. Keeping the model.
Training on augumented user 52328 41/50 current_auc = 0.598404255319149
User 52328 AUC after training: 0.5977393617021276
User 52328 does not improve AUC. Reverting changes.
Training on augumented user 49324 42/50 current_auc = 0.598404255319149
User 49324 AUC after training: 0.5974544072948328
User 49324 does not improve AUC. Reverting changes.
Training on augumented user 22355 43/50 current_auc = 0.598404255319149
User 22355 AUC after training: 0.5970269756838905
User 22355 does not improve AUC. Reverting changes.
Training on augumented user 127843 44/50 current_auc = 0.598404255319149
User 127843 AUC after training: 0.5974544072948328
User 127843 does not improve AUC. Reverting changes.
Training on augumented user 124070 45/50 current_auc = 0.598404255319149
User 124070 AUC after training: 0.5973594224924013
User 124070 does not improve AUC. Reverting changes.
Training on augumented user 133722 46/50 current_auc = 0.598404255319149
User 133722 AUC after training: 0.5972644376899696
User 133722 does not improve AUC. Reverting changes.
Training on augumented user 65546 47/50 current_auc = 0.598404255319149
User 65546 AUC after training: 0.5974544072948328
User 65546 does not improve AUC. Reverting changes.
Training on augumented user 66577 48/50 current_auc = 0.598404255319149
User 66577 AUC after training: 0.5974544072948328
User 66577 does not improve AUC. Reverting changes.
Training on augumented user 113216 49/50 current_auc = 0.598404255319149
User 113216 AUC after training: 0.5978343465045592
User 113216 does not improve AUC. Reverting changes.
[2024-12-02 18:46:28.611128] start test user 85640 127/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:46:29.137835] start test user 85640 127/568 recall augumented users by random, augumented_users = [103622, 56895, 12069, 100344, 99338, 69057, 71453, 45748, 58980, 22940, 90567, 26016, 133531, 61244, 22059, 134015, 74991, 106931, 92531, 91843, 30123, 43504, 133898, 84149, 74729, 611, 31932, 128016, 61245, 72921, 75313, 56404, 106344, 113815, 42561, 113118, 22953, 63770, 83888, 85685, 81634, 65521, 4382, 35929, 80090, 60774, 110438, 15117, 52037, 88885]
[2024-12-02 18:46:29.168520] user = 85640 Cloud 127/568
[2024-12-02 18:46:29.204663] user = 85640 Local 127/568
[2024-12-02 18:46:29.455964] user = 85640 Local+ 127/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:46:31.824441] user = 85640 MPDA- 127/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7499265354099324
Training on augumented user 103622 0/50 current_auc = 0.7499265354099324
User 103622 AUC after training: 0.7501469291801353
User 103622 improves AUC. Keeping the model.
Training on augumented user 56895 1/50 current_auc = 0.7501469291801353
User 56895 AUC after training: 0.7498530708198647
User 56895 does not improve AUC. Reverting changes.
Training on augumented user 12069 2/50 current_auc = 0.7501469291801353
User 12069 AUC after training: 0.7493388186893917
User 12069 does not improve AUC. Reverting changes.
Training on augumented user 100344 3/50 current_auc = 0.7501469291801353
User 100344 AUC after training: 0.7497796062297972
User 100344 does not improve AUC. Reverting changes.
Training on augumented user 99338 4/50 current_auc = 0.7501469291801353
User 99338 AUC after training: 0.7495592124595944
User 99338 does not improve AUC. Reverting changes.
Training on augumented user 69057 5/50 current_auc = 0.7501469291801353
User 69057 AUC after training: 0.7492653540993242
User 69057 does not improve AUC. Reverting changes.
Training on augumented user 71453 6/50 current_auc = 0.7501469291801353
User 71453 AUC after training: 0.7505142521304731
User 71453 improves AUC. Keeping the model.
Training on augumented user 45748 7/50 current_auc = 0.7505142521304731
User 45748 AUC after training: 0.7501469291801351
User 45748 does not improve AUC. Reverting changes.
Training on augumented user 58980 8/50 current_auc = 0.7505142521304731
User 58980 AUC after training: 0.7503673229503379
User 58980 does not improve AUC. Reverting changes.
Training on augumented user 22940 9/50 current_auc = 0.7505142521304731
User 22940 AUC after training: 0.7500734645900676
User 22940 does not improve AUC. Reverting changes.
Training on augumented user 90567 10/50 current_auc = 0.7505142521304731
User 90567 AUC after training: 0.7502203937702028
User 90567 does not improve AUC. Reverting changes.
Training on augumented user 26016 11/50 current_auc = 0.7505142521304731
User 26016 AUC after training: 0.7501469291801353
User 26016 does not improve AUC. Reverting changes.
Training on augumented user 133531 12/50 current_auc = 0.7505142521304731
User 133531 AUC after training: 0.7499265354099325
User 133531 does not improve AUC. Reverting changes.
Training on augumented user 61244 13/50 current_auc = 0.7505142521304731
User 61244 AUC after training: 0.7503673229503379
User 61244 does not improve AUC. Reverting changes.
Training on augumented user 22059 14/50 current_auc = 0.7505142521304731
User 22059 AUC after training: 0.750881575080811
User 22059 improves AUC. Keeping the model.
Training on augumented user 134015 15/50 current_auc = 0.750881575080811
User 134015 AUC after training: 0.7507346459006758
User 134015 does not improve AUC. Reverting changes.
Training on augumented user 74991 16/50 current_auc = 0.750881575080811
User 74991 AUC after training: 0.7518366147516897
User 74991 improves AUC. Keeping the model.
Training on augumented user 106931 17/50 current_auc = 0.7518366147516897
User 106931 AUC after training: 0.7511754334410814
User 106931 does not improve AUC. Reverting changes.
Training on augumented user 92531 18/50 current_auc = 0.7518366147516897
User 92531 AUC after training: 0.7517631501616221
User 92531 does not improve AUC. Reverting changes.
Training on augumented user 91843 19/50 current_auc = 0.7518366147516897
User 91843 AUC after training: 0.7518366147516897
User 91843 does not improve AUC. Reverting changes.
Training on augumented user 30123 20/50 current_auc = 0.7518366147516897
User 30123 AUC after training: 0.7523508668821628
User 30123 improves AUC. Keeping the model.
Training on augumented user 43504 21/50 current_auc = 0.7523508668821628
User 43504 AUC after training: 0.7519835439318248
User 43504 does not improve AUC. Reverting changes.
Training on augumented user 133898 22/50 current_auc = 0.7523508668821628
User 133898 AUC after training: 0.7522774022920953
User 133898 does not improve AUC. Reverting changes.
Training on augumented user 84149 23/50 current_auc = 0.7523508668821628
User 84149 AUC after training: 0.752497796062298
User 84149 improves AUC. Keeping the model.
Training on augumented user 74729 24/50 current_auc = 0.752497796062298
User 74729 AUC after training: 0.7519100793417572
User 74729 does not improve AUC. Reverting changes.
Training on augumented user 611 25/50 current_auc = 0.752497796062298
User 611 AUC after training: 0.7524243314722304
User 611 does not improve AUC. Reverting changes.
Training on augumented user 31932 26/50 current_auc = 0.752497796062298
User 31932 AUC after training: 0.7524977960622979
User 31932 does not improve AUC. Reverting changes.
Training on augumented user 128016 27/50 current_auc = 0.752497796062298
User 128016 AUC after training: 0.7524977960622979
User 128016 does not improve AUC. Reverting changes.
Training on augumented user 61245 28/50 current_auc = 0.752497796062298
User 61245 AUC after training: 0.75213047311196
User 61245 does not improve AUC. Reverting changes.
Training on augumented user 72921 29/50 current_auc = 0.752497796062298
User 72921 AUC after training: 0.7522774022920952
User 72921 does not improve AUC. Reverting changes.
Training on augumented user 75313 30/50 current_auc = 0.752497796062298
User 75313 AUC after training: 0.7524977960622979
User 75313 does not improve AUC. Reverting changes.
Training on augumented user 56404 31/50 current_auc = 0.752497796062298
User 56404 AUC after training: 0.7524243314722303
User 56404 does not improve AUC. Reverting changes.
Training on augumented user 106344 32/50 current_auc = 0.752497796062298
User 106344 AUC after training: 0.7526447252424332
User 106344 improves AUC. Keeping the model.
Training on augumented user 113815 33/50 current_auc = 0.7526447252424332
User 113815 AUC after training: 0.7519835439318248
User 113815 does not improve AUC. Reverting changes.
Training on augumented user 42561 34/50 current_auc = 0.7526447252424332
User 42561 AUC after training: 0.7526447252424331
User 42561 does not improve AUC. Reverting changes.
Training on augumented user 113118 35/50 current_auc = 0.7526447252424332
User 113118 AUC after training: 0.7519835439318249
User 113118 does not improve AUC. Reverting changes.
Training on augumented user 22953 36/50 current_auc = 0.7526447252424332
User 22953 AUC after training: 0.753379371143109
User 22953 improves AUC. Keeping the model.
Training on augumented user 63770 37/50 current_auc = 0.753379371143109
User 63770 AUC after training: 0.7533059065530414
User 63770 does not improve AUC. Reverting changes.
Training on augumented user 83888 38/50 current_auc = 0.753379371143109
User 83888 AUC after training: 0.7524243314722304
User 83888 does not improve AUC. Reverting changes.
Training on augumented user 85685 39/50 current_auc = 0.753379371143109
User 85685 AUC after training: 0.7530855127828386
User 85685 does not improve AUC. Reverting changes.
Training on augumented user 81634 40/50 current_auc = 0.753379371143109
User 81634 AUC after training: 0.7528651190126359
User 81634 does not improve AUC. Reverting changes.
Training on augumented user 65521 41/50 current_auc = 0.753379371143109
User 65521 AUC after training: 0.7522774022920952
User 65521 does not improve AUC. Reverting changes.
Training on augumented user 4382 42/50 current_auc = 0.753379371143109
User 4382 AUC after training: 0.7529385836027034
User 4382 does not improve AUC. Reverting changes.
Training on augumented user 35929 43/50 current_auc = 0.753379371143109
User 35929 AUC after training: 0.7530120481927711
User 35929 does not improve AUC. Reverting changes.
Training on augumented user 80090 44/50 current_auc = 0.753379371143109
User 80090 AUC after training: 0.7536732295033793
User 80090 improves AUC. Keeping the model.
Training on augumented user 60774 45/50 current_auc = 0.7536732295033793
User 60774 AUC after training: 0.7534528357331767
User 60774 does not improve AUC. Reverting changes.
Training on augumented user 110438 46/50 current_auc = 0.7536732295033793
User 110438 AUC after training: 0.7536732295033793
User 110438 does not improve AUC. Reverting changes.
Training on augumented user 15117 47/50 current_auc = 0.7536732295033793
User 15117 AUC after training: 0.7527916544225683
User 15117 does not improve AUC. Reverting changes.
Training on augumented user 52037 48/50 current_auc = 0.7536732295033793
User 52037 AUC after training: 0.7527916544225683
User 52037 does not improve AUC. Reverting changes.
Training on augumented user 88885 49/50 current_auc = 0.7536732295033793
User 88885 AUC after training: 0.7530855127828386
User 88885 does not improve AUC. Reverting changes.
[2024-12-02 18:47:00.937998] start test user 85662 128/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:47:01.359936] start test user 85662 128/568 recall augumented users by random, augumented_users = [73152, 78938, 19505, 86885, 55158, 49143, 8705, 93216, 124843, 69816, 10109, 91, 59369, 9981, 17567, 11682, 42502, 1135, 128015, 60324, 6765, 96913, 82815, 88347, 5618, 93332, 14300, 132535, 106045, 54873, 45793, 73732, 85873, 131854, 131990, 28228, 62523, 105055, 109013, 113856, 28619, 119733, 101635, 11419, 57375, 100903, 38700, 92299, 40661, 52174]
[2024-12-02 18:47:01.376273] user = 85662 Cloud 128/568
[2024-12-02 18:47:01.390657] user = 85662 Local 128/568
[2024-12-02 18:47:01.545762] user = 85662 Local+ 128/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:47:04.507362] user = 85662 MPDA- 128/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7318181818181818
Training on augumented user 73152 0/50 current_auc = 0.7318181818181818
User 73152 AUC after training: 0.7318181818181818
User 73152 does not improve AUC. Reverting changes.
Training on augumented user 78938 1/50 current_auc = 0.7318181818181818
User 78938 AUC after training: 0.7333333333333334
User 78938 improves AUC. Keeping the model.
Training on augumented user 19505 2/50 current_auc = 0.7333333333333334
User 19505 AUC after training: 0.7333333333333333
User 19505 does not improve AUC. Reverting changes.
Training on augumented user 86885 3/50 current_auc = 0.7333333333333334
User 86885 AUC after training: 0.734090909090909
User 86885 improves AUC. Keeping the model.
Training on augumented user 55158 4/50 current_auc = 0.734090909090909
User 55158 AUC after training: 0.7348484848484849
User 55158 improves AUC. Keeping the model.
Training on augumented user 49143 5/50 current_auc = 0.7348484848484849
User 49143 AUC after training: 0.731060606060606
User 49143 does not improve AUC. Reverting changes.
Training on augumented user 8705 6/50 current_auc = 0.7348484848484849
User 8705 AUC after training: 0.7340909090909091
User 8705 does not improve AUC. Reverting changes.
Training on augumented user 93216 7/50 current_auc = 0.7348484848484849
User 93216 AUC after training: 0.7318181818181818
User 93216 does not improve AUC. Reverting changes.
Training on augumented user 124843 8/50 current_auc = 0.7348484848484849
User 124843 AUC after training: 0.734090909090909
User 124843 does not improve AUC. Reverting changes.
Training on augumented user 69816 9/50 current_auc = 0.7348484848484849
User 69816 AUC after training: 0.734090909090909
User 69816 does not improve AUC. Reverting changes.
Training on augumented user 10109 10/50 current_auc = 0.7348484848484849
User 10109 AUC after training: 0.7333333333333334
User 10109 does not improve AUC. Reverting changes.
Training on augumented user 91 11/50 current_auc = 0.7348484848484849
User 91 AUC after training: 0.7333333333333334
User 91 does not improve AUC. Reverting changes.
Training on augumented user 59369 12/50 current_auc = 0.7348484848484849
User 59369 AUC after training: 0.7325757575757577
User 59369 does not improve AUC. Reverting changes.
Training on augumented user 9981 13/50 current_auc = 0.7348484848484849
User 9981 AUC after training: 0.7333333333333334
User 9981 does not improve AUC. Reverting changes.
Training on augumented user 17567 14/50 current_auc = 0.7348484848484849
User 17567 AUC after training: 0.7348484848484849
User 17567 does not improve AUC. Reverting changes.
Training on augumented user 11682 15/50 current_auc = 0.7348484848484849
User 11682 AUC after training: 0.7333333333333334
User 11682 does not improve AUC. Reverting changes.
Training on augumented user 42502 16/50 current_auc = 0.7348484848484849
User 42502 AUC after training: 0.7348484848484849
User 42502 does not improve AUC. Reverting changes.
Training on augumented user 1135 17/50 current_auc = 0.7348484848484849
User 1135 AUC after training: 0.7318181818181819
User 1135 does not improve AUC. Reverting changes.
Training on augumented user 128015 18/50 current_auc = 0.7348484848484849
User 128015 AUC after training: 0.734090909090909
User 128015 does not improve AUC. Reverting changes.
Training on augumented user 60324 19/50 current_auc = 0.7348484848484849
User 60324 AUC after training: 0.7348484848484849
User 60324 does not improve AUC. Reverting changes.
Training on augumented user 6765 20/50 current_auc = 0.7348484848484849
User 6765 AUC after training: 0.734090909090909
User 6765 does not improve AUC. Reverting changes.
Training on augumented user 96913 21/50 current_auc = 0.7348484848484849
User 96913 AUC after training: 0.7356060606060606
User 96913 improves AUC. Keeping the model.
Training on augumented user 82815 22/50 current_auc = 0.7356060606060606
User 82815 AUC after training: 0.7356060606060606
User 82815 does not improve AUC. Reverting changes.
Training on augumented user 88347 23/50 current_auc = 0.7356060606060606
User 88347 AUC after training: 0.7348484848484849
User 88347 does not improve AUC. Reverting changes.
Training on augumented user 5618 24/50 current_auc = 0.7356060606060606
User 5618 AUC after training: 0.7348484848484849
User 5618 does not improve AUC. Reverting changes.
Training on augumented user 93332 25/50 current_auc = 0.7356060606060606
User 93332 AUC after training: 0.7356060606060606
User 93332 does not improve AUC. Reverting changes.
Training on augumented user 14300 26/50 current_auc = 0.7356060606060606
User 14300 AUC after training: 0.7356060606060606
User 14300 does not improve AUC. Reverting changes.
Training on augumented user 132535 27/50 current_auc = 0.7356060606060606
User 132535 AUC after training: 0.7356060606060606
User 132535 does not improve AUC. Reverting changes.
Training on augumented user 106045 28/50 current_auc = 0.7356060606060606
User 106045 AUC after training: 0.7333333333333334
User 106045 does not improve AUC. Reverting changes.
Training on augumented user 54873 29/50 current_auc = 0.7356060606060606
User 54873 AUC after training: 0.7356060606060606
User 54873 does not improve AUC. Reverting changes.
Training on augumented user 45793 30/50 current_auc = 0.7356060606060606
User 45793 AUC after training: 0.7340909090909091
User 45793 does not improve AUC. Reverting changes.
Training on augumented user 73732 31/50 current_auc = 0.7356060606060606
User 73732 AUC after training: 0.7333333333333334
User 73732 does not improve AUC. Reverting changes.
Training on augumented user 85873 32/50 current_auc = 0.7356060606060606
User 85873 AUC after training: 0.7356060606060606
User 85873 does not improve AUC. Reverting changes.
Training on augumented user 131854 33/50 current_auc = 0.7356060606060606
User 131854 AUC after training: 0.7363636363636363
User 131854 improves AUC. Keeping the model.
Training on augumented user 131990 34/50 current_auc = 0.7363636363636363
User 131990 AUC after training: 0.7363636363636363
User 131990 does not improve AUC. Reverting changes.
Training on augumented user 28228 35/50 current_auc = 0.7363636363636363
User 28228 AUC after training: 0.7356060606060606
User 28228 does not improve AUC. Reverting changes.
Training on augumented user 62523 36/50 current_auc = 0.7363636363636363
User 62523 AUC after training: 0.7356060606060606
User 62523 does not improve AUC. Reverting changes.
Training on augumented user 105055 37/50 current_auc = 0.7363636363636363
User 105055 AUC after training: 0.7348484848484849
User 105055 does not improve AUC. Reverting changes.
Training on augumented user 109013 38/50 current_auc = 0.7363636363636363
User 109013 AUC after training: 0.7356060606060606
User 109013 does not improve AUC. Reverting changes.
Training on augumented user 113856 39/50 current_auc = 0.7363636363636363
User 113856 AUC after training: 0.7356060606060606
User 113856 does not improve AUC. Reverting changes.
Training on augumented user 28619 40/50 current_auc = 0.7363636363636363
User 28619 AUC after training: 0.7348484848484849
User 28619 does not improve AUC. Reverting changes.
Training on augumented user 119733 41/50 current_auc = 0.7363636363636363
User 119733 AUC after training: 0.7325757575757577
User 119733 does not improve AUC. Reverting changes.
Training on augumented user 101635 42/50 current_auc = 0.7363636363636363
User 101635 AUC after training: 0.7356060606060606
User 101635 does not improve AUC. Reverting changes.
Training on augumented user 11419 43/50 current_auc = 0.7363636363636363
User 11419 AUC after training: 0.7340909090909091
User 11419 does not improve AUC. Reverting changes.
Training on augumented user 57375 44/50 current_auc = 0.7363636363636363
User 57375 AUC after training: 0.7340909090909091
User 57375 does not improve AUC. Reverting changes.
Training on augumented user 100903 45/50 current_auc = 0.7363636363636363
User 100903 AUC after training: 0.7356060606060606
User 100903 does not improve AUC. Reverting changes.
Training on augumented user 38700 46/50 current_auc = 0.7363636363636363
User 38700 AUC after training: 0.7356060606060606
User 38700 does not improve AUC. Reverting changes.
Training on augumented user 92299 47/50 current_auc = 0.7363636363636363
User 92299 AUC after training: 0.7356060606060606
User 92299 does not improve AUC. Reverting changes.
Training on augumented user 40661 48/50 current_auc = 0.7363636363636363
User 40661 AUC after training: 0.7356060606060606
User 40661 does not improve AUC. Reverting changes.
Training on augumented user 52174 49/50 current_auc = 0.7363636363636363
User 52174 AUC after training: 0.7356060606060606
User 52174 does not improve AUC. Reverting changes.
[2024-12-02 18:47:32.033729] start test user 85739 129/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:47:32.911552] start test user 85739 129/568 recall augumented users by random, augumented_users = [22922, 20992, 17233, 117543, 24109, 30101, 90720, 70851, 110909, 7300, 2502, 116850, 43109, 31689, 14218, 67805, 97631, 47131, 24783, 85848, 52880, 47231, 7068, 65344, 110294, 54022, 77457, 97336, 105754, 114894, 108016, 14526, 83424, 44645, 93974, 60340, 112563, 113517, 69806, 39522, 91604, 38728, 132910, 74800, 16471, 117581, 97541, 76716, 122259, 40602]
[2024-12-02 18:47:32.928874] user = 85739 Cloud 129/568
[2024-12-02 18:47:32.968734] user = 85739 Local 129/568
[2024-12-02 18:47:33.062482] user = 85739 Local+ 129/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:47:35.803691] user = 85739 MPDA- 129/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6227529532614278
Training on augumented user 22922 0/50 current_auc = 0.6227529532614278
User 22922 AUC after training: 0.6224961479198767
User 22922 does not improve AUC. Reverting changes.
Training on augumented user 20992 1/50 current_auc = 0.6227529532614278
User 20992 AUC after training: 0.6212121212121212
User 20992 does not improve AUC. Reverting changes.
Training on augumented user 17233 2/50 current_auc = 0.6227529532614278
User 17233 AUC after training: 0.6235233692860811
User 17233 improves AUC. Keeping the model.
Training on augumented user 117543 3/50 current_auc = 0.6235233692860811
User 117543 AUC after training: 0.6240369799691834
User 117543 improves AUC. Keeping the model.
Training on augumented user 24109 4/50 current_auc = 0.6240369799691834
User 24109 AUC after training: 0.6260914227015921
User 24109 improves AUC. Keeping the model.
Training on augumented user 30101 5/50 current_auc = 0.6260914227015921
User 30101 AUC after training: 0.6240369799691833
User 30101 does not improve AUC. Reverting changes.
Training on augumented user 90720 6/50 current_auc = 0.6260914227015921
User 90720 AUC after training: 0.6245505906522855
User 90720 does not improve AUC. Reverting changes.
Training on augumented user 70851 7/50 current_auc = 0.6260914227015921
User 70851 AUC after training: 0.6224961479198767
User 70851 does not improve AUC. Reverting changes.
Training on augumented user 110909 8/50 current_auc = 0.6260914227015921
User 110909 AUC after training: 0.6240369799691834
User 110909 does not improve AUC. Reverting changes.
Training on augumented user 7300 9/50 current_auc = 0.6260914227015921
User 7300 AUC after training: 0.6240369799691834
User 7300 does not improve AUC. Reverting changes.
Training on augumented user 2502 10/50 current_auc = 0.6260914227015921
User 2502 AUC after training: 0.6235233692860811
User 2502 does not improve AUC. Reverting changes.
Training on augumented user 116850 11/50 current_auc = 0.6260914227015921
User 116850 AUC after training: 0.6224961479198767
User 116850 does not improve AUC. Reverting changes.
Training on augumented user 43109 12/50 current_auc = 0.6260914227015921
User 43109 AUC after training: 0.6255778120184899
User 43109 does not improve AUC. Reverting changes.
Training on augumented user 31689 13/50 current_auc = 0.6260914227015921
User 31689 AUC after training: 0.6235233692860811
User 31689 does not improve AUC. Reverting changes.
Training on augumented user 14218 14/50 current_auc = 0.6260914227015921
User 14218 AUC after training: 0.6240369799691834
User 14218 does not improve AUC. Reverting changes.
Training on augumented user 67805 15/50 current_auc = 0.6260914227015921
User 67805 AUC after training: 0.6250642013353878
User 67805 does not improve AUC. Reverting changes.
Training on augumented user 97631 16/50 current_auc = 0.6260914227015921
User 97631 AUC after training: 0.6240369799691833
User 97631 does not improve AUC. Reverting changes.
Training on augumented user 47131 17/50 current_auc = 0.6260914227015921
User 47131 AUC after training: 0.6224961479198767
User 47131 does not improve AUC. Reverting changes.
Training on augumented user 24783 18/50 current_auc = 0.6260914227015921
User 24783 AUC after training: 0.6240369799691834
User 24783 does not improve AUC. Reverting changes.
Training on augumented user 85848 19/50 current_auc = 0.6260914227015921
User 85848 AUC after training: 0.6250642013353878
User 85848 does not improve AUC. Reverting changes.
Training on augumented user 52880 20/50 current_auc = 0.6260914227015921
User 52880 AUC after training: 0.6245505906522856
User 52880 does not improve AUC. Reverting changes.
Training on augumented user 47231 21/50 current_auc = 0.6260914227015921
User 47231 AUC after training: 0.6250642013353878
User 47231 does not improve AUC. Reverting changes.
Training on augumented user 7068 22/50 current_auc = 0.6260914227015921
User 7068 AUC after training: 0.6250642013353878
User 7068 does not improve AUC. Reverting changes.
Training on augumented user 65344 23/50 current_auc = 0.6260914227015921
User 65344 AUC after training: 0.6255778120184899
User 65344 does not improve AUC. Reverting changes.
Training on augumented user 110294 24/50 current_auc = 0.6260914227015921
User 110294 AUC after training: 0.623009758602979
User 110294 does not improve AUC. Reverting changes.
Training on augumented user 54022 25/50 current_auc = 0.6260914227015921
User 54022 AUC after training: 0.6235233692860811
User 54022 does not improve AUC. Reverting changes.
Training on augumented user 77457 26/50 current_auc = 0.6260914227015921
User 77457 AUC after training: 0.618387262455059
User 77457 does not improve AUC. Reverting changes.
Training on augumented user 97336 27/50 current_auc = 0.6260914227015921
User 97336 AUC after training: 0.62557781201849
User 97336 does not improve AUC. Reverting changes.
Training on augumented user 105754 28/50 current_auc = 0.6260914227015921
User 105754 AUC after training: 0.6235233692860811
User 105754 does not improve AUC. Reverting changes.
Training on augumented user 114894 29/50 current_auc = 0.6260914227015921
User 114894 AUC after training: 0.62557781201849
User 114894 does not improve AUC. Reverting changes.
Training on augumented user 108016 30/50 current_auc = 0.6260914227015921
User 108016 AUC after training: 0.6255778120184899
User 108016 does not improve AUC. Reverting changes.
Training on augumented user 14526 31/50 current_auc = 0.6260914227015921
User 14526 AUC after training: 0.6237801746276324
User 14526 does not improve AUC. Reverting changes.
Training on augumented user 83424 32/50 current_auc = 0.6260914227015921
User 83424 AUC after training: 0.6245505906522856
User 83424 does not improve AUC. Reverting changes.
Training on augumented user 44645 33/50 current_auc = 0.6260914227015921
User 44645 AUC after training: 0.6240369799691833
User 44645 does not improve AUC. Reverting changes.
Training on augumented user 93974 34/50 current_auc = 0.6260914227015921
User 93974 AUC after training: 0.6235233692860811
User 93974 does not improve AUC. Reverting changes.
Training on augumented user 60340 35/50 current_auc = 0.6260914227015921
User 60340 AUC after training: 0.6240369799691833
User 60340 does not improve AUC. Reverting changes.
Training on augumented user 112563 36/50 current_auc = 0.6260914227015921
User 112563 AUC after training: 0.6255778120184899
User 112563 does not improve AUC. Reverting changes.
Training on augumented user 113517 37/50 current_auc = 0.6260914227015921
User 113517 AUC after training: 0.6255778120184899
User 113517 does not improve AUC. Reverting changes.
Training on augumented user 69806 38/50 current_auc = 0.6260914227015921
User 69806 AUC after training: 0.6219825372367745
User 69806 does not improve AUC. Reverting changes.
Training on augumented user 39522 39/50 current_auc = 0.6260914227015921
User 39522 AUC after training: 0.6240369799691834
User 39522 does not improve AUC. Reverting changes.
Training on augumented user 91604 40/50 current_auc = 0.6260914227015921
User 91604 AUC after training: 0.6250642013353878
User 91604 does not improve AUC. Reverting changes.
Training on augumented user 38728 41/50 current_auc = 0.6260914227015921
User 38728 AUC after training: 0.623009758602979
User 38728 does not improve AUC. Reverting changes.
Training on augumented user 132910 42/50 current_auc = 0.6260914227015921
User 132910 AUC after training: 0.6235233692860811
User 132910 does not improve AUC. Reverting changes.
Training on augumented user 74800 43/50 current_auc = 0.6260914227015921
User 74800 AUC after training: 0.6250642013353878
User 74800 does not improve AUC. Reverting changes.
Training on augumented user 16471 44/50 current_auc = 0.6260914227015921
User 16471 AUC after training: 0.6255778120184899
User 16471 does not improve AUC. Reverting changes.
Training on augumented user 117581 45/50 current_auc = 0.6260914227015921
User 117581 AUC after training: 0.6266050333846944
User 117581 improves AUC. Keeping the model.
Training on augumented user 97541 46/50 current_auc = 0.6266050333846944
User 97541 AUC after training: 0.6276322547508988
User 97541 improves AUC. Keeping the model.
Training on augumented user 76716 47/50 current_auc = 0.6276322547508988
User 76716 AUC after training: 0.6258346173600411
User 76716 does not improve AUC. Reverting changes.
Training on augumented user 122259 48/50 current_auc = 0.6276322547508988
User 122259 AUC after training: 0.6266050333846944
User 122259 does not improve AUC. Reverting changes.
Training on augumented user 40602 49/50 current_auc = 0.6276322547508988
User 40602 AUC after training: 0.6255778120184899
User 40602 does not improve AUC. Reverting changes.
[2024-12-02 18:48:10.322257] start test user 85743 130/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:48:10.798208] start test user 85743 130/568 recall augumented users by random, augumented_users = [30717, 109479, 66749, 96708, 119258, 127558, 42112, 115729, 55934, 44213, 70891, 93605, 103387, 93001, 21253, 126645, 71088, 30477, 118119, 10119, 67628, 83978, 14320, 46244, 16956, 74503, 22068, 76115, 24346, 117677, 97550, 117137, 35141, 39450, 99401, 67476, 1789, 107763, 75300, 60720, 82087, 104358, 32510, 80441, 78660, 111669, 84683, 112267, 16782, 11889]
[2024-12-02 18:48:10.825414] user = 85743 Cloud 130/568
[2024-12-02 18:48:10.886734] user = 85743 Local 130/568
[2024-12-02 18:48:10.937292] user = 85743 Local+ 130/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:48:13.326724] user = 85743 MPDA- 130/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6175438596491228
Training on augumented user 30717 0/50 current_auc = 0.6175438596491228
User 30717 AUC after training: 0.6175438596491228
User 30717 does not improve AUC. Reverting changes.
Training on augumented user 109479 1/50 current_auc = 0.6175438596491228
User 109479 AUC after training: 0.6192982456140351
User 109479 improves AUC. Keeping the model.
Training on augumented user 66749 2/50 current_auc = 0.6192982456140351
User 66749 AUC after training: 0.6175438596491228
User 66749 does not improve AUC. Reverting changes.
Training on augumented user 96708 3/50 current_auc = 0.6192982456140351
User 96708 AUC after training: 0.6192982456140351
User 96708 does not improve AUC. Reverting changes.
Training on augumented user 119258 4/50 current_auc = 0.6192982456140351
User 119258 AUC after training: 0.6192982456140351
User 119258 does not improve AUC. Reverting changes.
Training on augumented user 127558 5/50 current_auc = 0.6192982456140351
User 127558 AUC after training: 0.6192982456140351
User 127558 does not improve AUC. Reverting changes.
Training on augumented user 42112 6/50 current_auc = 0.6192982456140351
User 42112 AUC after training: 0.6192982456140351
User 42112 does not improve AUC. Reverting changes.
Training on augumented user 115729 7/50 current_auc = 0.6192982456140351
User 115729 AUC after training: 0.6192982456140351
User 115729 does not improve AUC. Reverting changes.
Training on augumented user 55934 8/50 current_auc = 0.6192982456140351
User 55934 AUC after training: 0.6192982456140351
User 55934 does not improve AUC. Reverting changes.
Training on augumented user 44213 9/50 current_auc = 0.6192982456140351
User 44213 AUC after training: 0.6192982456140351
User 44213 does not improve AUC. Reverting changes.
Training on augumented user 70891 10/50 current_auc = 0.6192982456140351
User 70891 AUC after training: 0.6192982456140351
User 70891 does not improve AUC. Reverting changes.
Training on augumented user 93605 11/50 current_auc = 0.6192982456140351
User 93605 AUC after training: 0.6192982456140351
User 93605 does not improve AUC. Reverting changes.
Training on augumented user 103387 12/50 current_auc = 0.6192982456140351
User 103387 AUC after training: 0.6192982456140351
User 103387 does not improve AUC. Reverting changes.
Training on augumented user 93001 13/50 current_auc = 0.6192982456140351
User 93001 AUC after training: 0.6192982456140351
User 93001 does not improve AUC. Reverting changes.
Training on augumented user 21253 14/50 current_auc = 0.6192982456140351
User 21253 AUC after training: 0.6210526315789474
User 21253 improves AUC. Keeping the model.
Training on augumented user 126645 15/50 current_auc = 0.6210526315789474
User 126645 AUC after training: 0.6210526315789474
User 126645 does not improve AUC. Reverting changes.
Training on augumented user 71088 16/50 current_auc = 0.6210526315789474
User 71088 AUC after training: 0.619298245614035
User 71088 does not improve AUC. Reverting changes.
Training on augumented user 30477 17/50 current_auc = 0.6210526315789474
User 30477 AUC after training: 0.619298245614035
User 30477 does not improve AUC. Reverting changes.
Training on augumented user 118119 18/50 current_auc = 0.6210526315789474
User 118119 AUC after training: 0.6210526315789474
User 118119 does not improve AUC. Reverting changes.
Training on augumented user 10119 19/50 current_auc = 0.6210526315789474
User 10119 AUC after training: 0.6210526315789474
User 10119 does not improve AUC. Reverting changes.
Training on augumented user 67628 20/50 current_auc = 0.6210526315789474
User 67628 AUC after training: 0.619298245614035
User 67628 does not improve AUC. Reverting changes.
Training on augumented user 83978 21/50 current_auc = 0.6210526315789474
User 83978 AUC after training: 0.6228070175438597
User 83978 improves AUC. Keeping the model.
Training on augumented user 14320 22/50 current_auc = 0.6228070175438597
User 14320 AUC after training: 0.6228070175438597
User 14320 does not improve AUC. Reverting changes.
Training on augumented user 46244 23/50 current_auc = 0.6228070175438597
User 46244 AUC after training: 0.6228070175438596
User 46244 does not improve AUC. Reverting changes.
Training on augumented user 16956 24/50 current_auc = 0.6228070175438597
User 16956 AUC after training: 0.619298245614035
User 16956 does not improve AUC. Reverting changes.
Training on augumented user 74503 25/50 current_auc = 0.6228070175438597
User 74503 AUC after training: 0.624561403508772
User 74503 improves AUC. Keeping the model.
Training on augumented user 22068 26/50 current_auc = 0.624561403508772
User 22068 AUC after training: 0.6210526315789474
User 22068 does not improve AUC. Reverting changes.
Training on augumented user 76115 27/50 current_auc = 0.624561403508772
User 76115 AUC after training: 0.6228070175438597
User 76115 does not improve AUC. Reverting changes.
Training on augumented user 24346 28/50 current_auc = 0.624561403508772
User 24346 AUC after training: 0.624561403508772
User 24346 does not improve AUC. Reverting changes.
Training on augumented user 117677 29/50 current_auc = 0.624561403508772
User 117677 AUC after training: 0.624561403508772
User 117677 does not improve AUC. Reverting changes.
Training on augumented user 97550 30/50 current_auc = 0.624561403508772
User 97550 AUC after training: 0.6228070175438596
User 97550 does not improve AUC. Reverting changes.
Training on augumented user 117137 31/50 current_auc = 0.624561403508772
User 117137 AUC after training: 0.6228070175438596
User 117137 does not improve AUC. Reverting changes.
Training on augumented user 35141 32/50 current_auc = 0.624561403508772
User 35141 AUC after training: 0.6228070175438596
User 35141 does not improve AUC. Reverting changes.
Training on augumented user 39450 33/50 current_auc = 0.624561403508772
User 39450 AUC after training: 0.619298245614035
User 39450 does not improve AUC. Reverting changes.
Training on augumented user 99401 34/50 current_auc = 0.624561403508772
User 99401 AUC after training: 0.6228070175438597
User 99401 does not improve AUC. Reverting changes.
Training on augumented user 67476 35/50 current_auc = 0.624561403508772
User 67476 AUC after training: 0.619298245614035
User 67476 does not improve AUC. Reverting changes.
Training on augumented user 1789 36/50 current_auc = 0.624561403508772
User 1789 AUC after training: 0.6228070175438596
User 1789 does not improve AUC. Reverting changes.
Training on augumented user 107763 37/50 current_auc = 0.624561403508772
User 107763 AUC after training: 0.6210526315789474
User 107763 does not improve AUC. Reverting changes.
Training on augumented user 75300 38/50 current_auc = 0.624561403508772
User 75300 AUC after training: 0.6210526315789474
User 75300 does not improve AUC. Reverting changes.
Training on augumented user 60720 39/50 current_auc = 0.624561403508772
User 60720 AUC after training: 0.6210526315789474
User 60720 does not improve AUC. Reverting changes.
Training on augumented user 82087 40/50 current_auc = 0.624561403508772
User 82087 AUC after training: 0.6228070175438596
User 82087 does not improve AUC. Reverting changes.
Training on augumented user 104358 41/50 current_auc = 0.624561403508772
User 104358 AUC after training: 0.6210526315789473
User 104358 does not improve AUC. Reverting changes.
Training on augumented user 32510 42/50 current_auc = 0.624561403508772
User 32510 AUC after training: 0.6228070175438596
User 32510 does not improve AUC. Reverting changes.
Training on augumented user 80441 43/50 current_auc = 0.624561403508772
User 80441 AUC after training: 0.624561403508772
User 80441 does not improve AUC. Reverting changes.
Training on augumented user 78660 44/50 current_auc = 0.624561403508772
User 78660 AUC after training: 0.6228070175438597
User 78660 does not improve AUC. Reverting changes.
Training on augumented user 111669 45/50 current_auc = 0.624561403508772
User 111669 AUC after training: 0.6228070175438596
User 111669 does not improve AUC. Reverting changes.
Training on augumented user 84683 46/50 current_auc = 0.624561403508772
User 84683 AUC after training: 0.6228070175438596
User 84683 does not improve AUC. Reverting changes.
Training on augumented user 112267 47/50 current_auc = 0.624561403508772
User 112267 AUC after training: 0.6228070175438596
User 112267 does not improve AUC. Reverting changes.
Training on augumented user 16782 48/50 current_auc = 0.624561403508772
User 16782 AUC after training: 0.6228070175438597
User 16782 does not improve AUC. Reverting changes.
Training on augumented user 11889 49/50 current_auc = 0.624561403508772
User 11889 AUC after training: 0.6228070175438596
User 11889 does not improve AUC. Reverting changes.
[2024-12-02 18:48:43.742959] start test user 85750 131/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:48:44.300311] start test user 85750 131/568 recall augumented users by random, augumented_users = [19667, 132444, 27459, 10036, 95705, 3060, 62647, 71066, 20640, 15172, 41250, 104023, 62407, 104852, 116281, 119498, 137597, 110667, 128659, 95928, 55733, 21623, 124226, 17367, 30482, 28202, 125236, 121962, 80773, 66974, 121890, 91191, 37406, 40709, 7756, 133288, 137346, 4038, 66695, 123077, 112054, 62150, 49717, 51510, 27763, 101101, 73047, 45258, 5496, 69843]
[2024-12-02 18:48:44.316917] user = 85750 Cloud 131/568
[2024-12-02 18:48:44.347873] user = 85750 Local 131/568
[2024-12-02 18:48:44.386732] user = 85750 Local+ 131/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:48:47.165559] user = 85750 MPDA- 131/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.593015093015093
Training on augumented user 19667 0/50 current_auc = 0.593015093015093
User 19667 AUC after training: 0.592049842049842
User 19667 does not improve AUC. Reverting changes.
Training on augumented user 132444 1/50 current_auc = 0.593015093015093
User 132444 AUC after training: 0.5928395928395928
User 132444 does not improve AUC. Reverting changes.
Training on augumented user 27459 2/50 current_auc = 0.593015093015093
User 27459 AUC after training: 0.5925763425763425
User 27459 does not improve AUC. Reverting changes.
Training on augumented user 10036 3/50 current_auc = 0.593015093015093
User 10036 AUC after training: 0.5928395928395929
User 10036 does not improve AUC. Reverting changes.
Training on augumented user 95705 4/50 current_auc = 0.593015093015093
User 95705 AUC after training: 0.5918743418743418
User 95705 does not improve AUC. Reverting changes.
Training on augumented user 3060 5/50 current_auc = 0.593015093015093
User 3060 AUC after training: 0.5937170937170937
User 3060 improves AUC. Keeping the model.
Training on augumented user 62647 6/50 current_auc = 0.5937170937170937
User 62647 AUC after training: 0.5921375921375922
User 62647 does not improve AUC. Reverting changes.
Training on augumented user 71066 7/50 current_auc = 0.5937170937170937
User 71066 AUC after training: 0.5934538434538434
User 71066 does not improve AUC. Reverting changes.
Training on augumented user 20640 8/50 current_auc = 0.5937170937170937
User 20640 AUC after training: 0.593015093015093
User 20640 does not improve AUC. Reverting changes.
Training on augumented user 15172 9/50 current_auc = 0.5937170937170937
User 15172 AUC after training: 0.5933660933660934
User 15172 does not improve AUC. Reverting changes.
Training on augumented user 41250 10/50 current_auc = 0.5937170937170937
User 41250 AUC after training: 0.5931905931905932
User 41250 does not improve AUC. Reverting changes.
Training on augumented user 104023 11/50 current_auc = 0.5937170937170937
User 104023 AUC after training: 0.5924885924885924
User 104023 does not improve AUC. Reverting changes.
Training on augumented user 62407 12/50 current_auc = 0.5937170937170937
User 62407 AUC after training: 0.5931905931905932
User 62407 does not improve AUC. Reverting changes.
Training on augumented user 104852 13/50 current_auc = 0.5937170937170937
User 104852 AUC after training: 0.5923130923130923
User 104852 does not improve AUC. Reverting changes.
Training on augumented user 116281 14/50 current_auc = 0.5937170937170937
User 116281 AUC after training: 0.5933660933660934
User 116281 does not improve AUC. Reverting changes.
Training on augumented user 119498 15/50 current_auc = 0.5937170937170937
User 119498 AUC after training: 0.593892593892594
User 119498 improves AUC. Keeping the model.
Training on augumented user 137597 16/50 current_auc = 0.593892593892594
User 137597 AUC after training: 0.5937170937170938
User 137597 does not improve AUC. Reverting changes.
Training on augumented user 110667 17/50 current_auc = 0.593892593892594
User 110667 AUC after training: 0.5934538434538433
User 110667 does not improve AUC. Reverting changes.
Training on augumented user 128659 18/50 current_auc = 0.593892593892594
User 128659 AUC after training: 0.5944190944190945
User 128659 improves AUC. Keeping the model.
Training on augumented user 95928 19/50 current_auc = 0.5944190944190945
User 95928 AUC after training: 0.5935415935415936
User 95928 does not improve AUC. Reverting changes.
Training on augumented user 55733 20/50 current_auc = 0.5944190944190945
User 55733 AUC after training: 0.593892593892594
User 55733 does not improve AUC. Reverting changes.
Training on augumented user 21623 21/50 current_auc = 0.5944190944190945
User 21623 AUC after training: 0.5938048438048438
User 21623 does not improve AUC. Reverting changes.
Training on augumented user 124226 22/50 current_auc = 0.5944190944190945
User 124226 AUC after training: 0.5940680940680941
User 124226 does not improve AUC. Reverting changes.
Training on augumented user 17367 23/50 current_auc = 0.5944190944190945
User 17367 AUC after training: 0.5945945945945946
User 17367 improves AUC. Keeping the model.
Training on augumented user 30482 24/50 current_auc = 0.5945945945945946
User 30482 AUC after training: 0.5943313443313444
User 30482 does not improve AUC. Reverting changes.
Training on augumented user 28202 25/50 current_auc = 0.5945945945945946
User 28202 AUC after training: 0.594945594945595
User 28202 improves AUC. Keeping the model.
Training on augumented user 125236 26/50 current_auc = 0.594945594945595
User 125236 AUC after training: 0.5945945945945946
User 125236 does not improve AUC. Reverting changes.
Training on augumented user 121962 27/50 current_auc = 0.594945594945595
User 121962 AUC after training: 0.594945594945595
User 121962 does not improve AUC. Reverting changes.
Training on augumented user 80773 28/50 current_auc = 0.594945594945595
User 80773 AUC after training: 0.5944190944190945
User 80773 does not improve AUC. Reverting changes.
Training on augumented user 66974 29/50 current_auc = 0.594945594945595
User 66974 AUC after training: 0.5944190944190945
User 66974 does not improve AUC. Reverting changes.
Training on augumented user 121890 30/50 current_auc = 0.594945594945595
User 121890 AUC after training: 0.5951210951210951
User 121890 improves AUC. Keeping the model.
Training on augumented user 91191 31/50 current_auc = 0.5951210951210951
User 91191 AUC after training: 0.5951210951210951
User 91191 does not improve AUC. Reverting changes.
Training on augumented user 37406 32/50 current_auc = 0.5951210951210951
User 37406 AUC after training: 0.5935415935415935
User 37406 does not improve AUC. Reverting changes.
Training on augumented user 40709 33/50 current_auc = 0.5951210951210951
User 40709 AUC after training: 0.5953843453843454
User 40709 improves AUC. Keeping the model.
Training on augumented user 7756 34/50 current_auc = 0.5953843453843454
User 7756 AUC after training: 0.5947700947700948
User 7756 does not improve AUC. Reverting changes.
Training on augumented user 133288 35/50 current_auc = 0.5953843453843454
User 133288 AUC after training: 0.595121095121095
User 133288 does not improve AUC. Reverting changes.
Training on augumented user 137346 36/50 current_auc = 0.5953843453843454
User 137346 AUC after training: 0.5951210951210951
User 137346 does not improve AUC. Reverting changes.
Training on augumented user 4038 37/50 current_auc = 0.5953843453843454
User 4038 AUC after training: 0.5945945945945946
User 4038 does not improve AUC. Reverting changes.
Training on augumented user 66695 38/50 current_auc = 0.5953843453843454
User 66695 AUC after training: 0.5954720954720955
User 66695 improves AUC. Keeping the model.
Training on augumented user 123077 39/50 current_auc = 0.5954720954720955
User 123077 AUC after training: 0.5947700947700948
User 123077 does not improve AUC. Reverting changes.
Training on augumented user 112054 40/50 current_auc = 0.5954720954720955
User 112054 AUC after training: 0.5952965952965953
User 112054 does not improve AUC. Reverting changes.
Training on augumented user 62150 41/50 current_auc = 0.5954720954720955
User 62150 AUC after training: 0.5945945945945946
User 62150 does not improve AUC. Reverting changes.
Training on augumented user 49717 42/50 current_auc = 0.5954720954720955
User 49717 AUC after training: 0.595033345033345
User 49717 does not improve AUC. Reverting changes.
Training on augumented user 51510 43/50 current_auc = 0.5954720954720955
User 51510 AUC after training: 0.594945594945595
User 51510 does not improve AUC. Reverting changes.
Training on augumented user 27763 44/50 current_auc = 0.5954720954720955
User 27763 AUC after training: 0.5947700947700948
User 27763 does not improve AUC. Reverting changes.
Training on augumented user 101101 45/50 current_auc = 0.5954720954720955
User 101101 AUC after training: 0.5948578448578449
User 101101 does not improve AUC. Reverting changes.
Training on augumented user 73047 46/50 current_auc = 0.5954720954720955
User 73047 AUC after training: 0.596086346086346
User 73047 improves AUC. Keeping the model.
Training on augumented user 45258 47/50 current_auc = 0.596086346086346
User 45258 AUC after training: 0.5954720954720955
User 45258 does not improve AUC. Reverting changes.
Training on augumented user 5496 48/50 current_auc = 0.596086346086346
User 5496 AUC after training: 0.5956475956475956
User 5496 does not improve AUC. Reverting changes.
Training on augumented user 69843 49/50 current_auc = 0.596086346086346
User 69843 AUC after training: 0.5945945945945946
User 69843 does not improve AUC. Reverting changes.
[2024-12-02 18:49:17.061456] start test user 85792 132/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:49:17.505603] start test user 85792 132/568 recall augumented users by random, augumented_users = [8814, 31227, 65646, 68820, 117148, 29586, 49895, 15196, 116084, 78691, 120446, 38224, 67273, 8084, 76564, 51779, 46, 118697, 77087, 104329, 48885, 75691, 8375, 43476, 109259, 128833, 69969, 47514, 17515, 93854, 60509, 25656, 46182, 136972, 21575, 53943, 133296, 132993, 58082, 95350, 61463, 67046, 38743, 42065, 104432, 27505, 38770, 129409, 68546, 122782]
[2024-12-02 18:49:17.520934] user = 85792 Cloud 132/568
[2024-12-02 18:49:17.534954] user = 85792 Local 132/568
[2024-12-02 18:49:17.595251] user = 85792 Local+ 132/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:49:19.815712] user = 85792 MPDA- 132/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.49892588614393124
Training on augumented user 8814 0/50 current_auc = 0.49892588614393124
User 8814 AUC after training: 0.4983888292158969
User 8814 does not improve AUC. Reverting changes.
Training on augumented user 31227 1/50 current_auc = 0.49892588614393124
User 31227 AUC after training: 0.4989258861439312
User 31227 does not improve AUC. Reverting changes.
Training on augumented user 65646 2/50 current_auc = 0.49892588614393124
User 65646 AUC after training: 0.4994629430719656
User 65646 improves AUC. Keeping the model.
Training on augumented user 68820 3/50 current_auc = 0.4994629430719656
User 68820 AUC after training: 0.4973147153598282
User 68820 does not improve AUC. Reverting changes.
Training on augumented user 117148 4/50 current_auc = 0.4994629430719656
User 117148 AUC after training: 0.5005370569280344
User 117148 improves AUC. Keeping the model.
Training on augumented user 29586 5/50 current_auc = 0.5005370569280344
User 29586 AUC after training: 0.4994629430719656
User 29586 does not improve AUC. Reverting changes.
Training on augumented user 49895 6/50 current_auc = 0.5005370569280344
User 49895 AUC after training: 0.5
User 49895 does not improve AUC. Reverting changes.
Training on augumented user 15196 7/50 current_auc = 0.5005370569280344
User 15196 AUC after training: 0.49624060150375937
User 15196 does not improve AUC. Reverting changes.
Training on augumented user 116084 8/50 current_auc = 0.5005370569280344
User 116084 AUC after training: 0.4967776584317938
User 116084 does not improve AUC. Reverting changes.
Training on augumented user 78691 9/50 current_auc = 0.5005370569280344
User 78691 AUC after training: 0.49946294307196565
User 78691 does not improve AUC. Reverting changes.
Training on augumented user 120446 10/50 current_auc = 0.5005370569280344
User 120446 AUC after training: 0.4983888292158969
User 120446 does not improve AUC. Reverting changes.
Training on augumented user 38224 11/50 current_auc = 0.5005370569280344
User 38224 AUC after training: 0.49946294307196565
User 38224 does not improve AUC. Reverting changes.
Training on augumented user 67273 12/50 current_auc = 0.5005370569280344
User 67273 AUC after training: 0.49892588614393124
User 67273 does not improve AUC. Reverting changes.
Training on augumented user 8084 13/50 current_auc = 0.5005370569280344
User 8084 AUC after training: 0.49731471535982813
User 8084 does not improve AUC. Reverting changes.
Training on augumented user 76564 14/50 current_auc = 0.5005370569280344
User 76564 AUC after training: 0.5016111707841031
User 76564 improves AUC. Keeping the model.
Training on augumented user 51779 15/50 current_auc = 0.5016111707841031
User 51779 AUC after training: 0.5010741138560688
User 51779 does not improve AUC. Reverting changes.
Training on augumented user 46 16/50 current_auc = 0.5016111707841031
User 46 AUC after training: 0.4994629430719656
User 46 does not improve AUC. Reverting changes.
Training on augumented user 118697 17/50 current_auc = 0.5016111707841031
User 118697 AUC after training: 0.5026852846401719
User 118697 improves AUC. Keeping the model.
Training on augumented user 77087 18/50 current_auc = 0.5026852846401719
User 77087 AUC after training: 0.5032223415682062
User 77087 improves AUC. Keeping the model.
Training on augumented user 104329 19/50 current_auc = 0.5032223415682062
User 104329 AUC after training: 0.5026852846401719
User 104329 does not improve AUC. Reverting changes.
Training on augumented user 48885 20/50 current_auc = 0.5032223415682062
User 48885 AUC after training: 0.5026852846401719
User 48885 does not improve AUC. Reverting changes.
Training on augumented user 75691 21/50 current_auc = 0.5032223415682062
User 75691 AUC after training: 0.5010741138560687
User 75691 does not improve AUC. Reverting changes.
Training on augumented user 8375 22/50 current_auc = 0.5032223415682062
User 8375 AUC after training: 0.5026852846401718
User 8375 does not improve AUC. Reverting changes.
Training on augumented user 43476 23/50 current_auc = 0.5032223415682062
User 43476 AUC after training: 0.5026852846401719
User 43476 does not improve AUC. Reverting changes.
Training on augumented user 109259 24/50 current_auc = 0.5032223415682062
User 109259 AUC after training: 0.5026852846401719
User 109259 does not improve AUC. Reverting changes.
Training on augumented user 128833 25/50 current_auc = 0.5032223415682062
User 128833 AUC after training: 0.5026852846401719
User 128833 does not improve AUC. Reverting changes.
Training on augumented user 69969 26/50 current_auc = 0.5032223415682062
User 69969 AUC after training: 0.5
User 69969 does not improve AUC. Reverting changes.
Training on augumented user 47514 27/50 current_auc = 0.5032223415682062
User 47514 AUC after training: 0.5021482277121375
User 47514 does not improve AUC. Reverting changes.
Training on augumented user 17515 28/50 current_auc = 0.5032223415682062
User 17515 AUC after training: 0.5037593984962406
User 17515 improves AUC. Keeping the model.
Training on augumented user 93854 29/50 current_auc = 0.5037593984962406
User 93854 AUC after training: 0.504296455424275
User 93854 improves AUC. Keeping the model.
Training on augumented user 60509 30/50 current_auc = 0.504296455424275
User 60509 AUC after training: 0.5053705692803437
User 60509 improves AUC. Keeping the model.
Training on augumented user 25656 31/50 current_auc = 0.5053705692803437
User 25656 AUC after training: 0.5048335123523093
User 25656 does not improve AUC. Reverting changes.
Training on augumented user 46182 32/50 current_auc = 0.5053705692803437
User 46182 AUC after training: 0.5016111707841031
User 46182 does not improve AUC. Reverting changes.
Training on augumented user 136972 33/50 current_auc = 0.5053705692803437
User 136972 AUC after training: 0.5026852846401718
User 136972 does not improve AUC. Reverting changes.
Training on augumented user 21575 34/50 current_auc = 0.5053705692803437
User 21575 AUC after training: 0.5048335123523093
User 21575 does not improve AUC. Reverting changes.
Training on augumented user 53943 35/50 current_auc = 0.5053705692803437
User 53943 AUC after training: 0.5059076262083781
User 53943 improves AUC. Keeping the model.
Training on augumented user 133296 36/50 current_auc = 0.5059076262083781
User 133296 AUC after training: 0.5048335123523093
User 133296 does not improve AUC. Reverting changes.
Training on augumented user 132993 37/50 current_auc = 0.5059076262083781
User 132993 AUC after training: 0.5059076262083781
User 132993 does not improve AUC. Reverting changes.
Training on augumented user 58082 38/50 current_auc = 0.5059076262083781
User 58082 AUC after training: 0.5053705692803437
User 58082 does not improve AUC. Reverting changes.
Training on augumented user 95350 39/50 current_auc = 0.5059076262083781
User 95350 AUC after training: 0.5059076262083781
User 95350 does not improve AUC. Reverting changes.
Training on augumented user 61463 40/50 current_auc = 0.5059076262083781
User 61463 AUC after training: 0.5053705692803437
User 61463 does not improve AUC. Reverting changes.
Training on augumented user 67046 41/50 current_auc = 0.5059076262083781
User 67046 AUC after training: 0.5053705692803437
User 67046 does not improve AUC. Reverting changes.
Training on augumented user 38743 42/50 current_auc = 0.5059076262083781
User 38743 AUC after training: 0.5059076262083781
User 38743 does not improve AUC. Reverting changes.
Training on augumented user 42065 43/50 current_auc = 0.5059076262083781
User 42065 AUC after training: 0.5048335123523093
User 42065 does not improve AUC. Reverting changes.
Training on augumented user 104432 44/50 current_auc = 0.5059076262083781
User 104432 AUC after training: 0.5037593984962405
User 104432 does not improve AUC. Reverting changes.
Training on augumented user 27505 45/50 current_auc = 0.5059076262083781
User 27505 AUC after training: 0.504296455424275
User 27505 does not improve AUC. Reverting changes.
Training on augumented user 38770 46/50 current_auc = 0.5059076262083781
User 38770 AUC after training: 0.5059076262083781
User 38770 does not improve AUC. Reverting changes.
Training on augumented user 129409 47/50 current_auc = 0.5059076262083781
User 129409 AUC after training: 0.5064446831364124
User 129409 improves AUC. Keeping the model.
Training on augumented user 68546 48/50 current_auc = 0.5064446831364124
User 68546 AUC after training: 0.5026852846401719
User 68546 does not improve AUC. Reverting changes.
Training on augumented user 122782 49/50 current_auc = 0.5064446831364124
User 122782 AUC after training: 0.5064446831364124
User 122782 does not improve AUC. Reverting changes.
[2024-12-02 18:49:45.698460] start test user 85813 133/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:49:46.182722] start test user 85813 133/568 recall augumented users by random, augumented_users = [130501, 95644, 44050, 132224, 100746, 17214, 114981, 93936, 85043, 22390, 24860, 28319, 126568, 36218, 64517, 67276, 136888, 129151, 14660, 39889, 89575, 62705, 89236, 16117, 76699, 32099, 88501, 5090, 130985, 48144, 49619, 90455, 121156, 87243, 67353, 53817, 29606, 17359, 111188, 82008, 37082, 17181, 10229, 91988, 58550, 49995, 115360, 23349, 67111, 26087]
[2024-12-02 18:49:46.198292] user = 85813 Cloud 133/568
[2024-12-02 18:49:46.217213] user = 85813 Local 133/568
[2024-12-02 18:49:46.337009] user = 85813 Local+ 133/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:49:48.932356] user = 85813 MPDA- 133/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6833333333333333
Training on augumented user 130501 0/50 current_auc = 0.6833333333333333
User 130501 AUC after training: 0.6847826086956521
User 130501 improves AUC. Keeping the model.
Training on augumented user 95644 1/50 current_auc = 0.6847826086956521
User 95644 AUC after training: 0.6847826086956522
User 95644 improves AUC. Keeping the model.
Training on augumented user 44050 2/50 current_auc = 0.6847826086956522
User 44050 AUC after training: 0.6833333333333333
User 44050 does not improve AUC. Reverting changes.
Training on augumented user 132224 3/50 current_auc = 0.6847826086956522
User 132224 AUC after training: 0.6855072463768115
User 132224 improves AUC. Keeping the model.
Training on augumented user 100746 4/50 current_auc = 0.6855072463768115
User 100746 AUC after training: 0.6847826086956521
User 100746 does not improve AUC. Reverting changes.
Training on augumented user 17214 5/50 current_auc = 0.6855072463768115
User 17214 AUC after training: 0.6869565217391305
User 17214 improves AUC. Keeping the model.
Training on augumented user 114981 6/50 current_auc = 0.6869565217391305
User 114981 AUC after training: 0.686231884057971
User 114981 does not improve AUC. Reverting changes.
Training on augumented user 93936 7/50 current_auc = 0.6869565217391305
User 93936 AUC after training: 0.6869565217391305
User 93936 does not improve AUC. Reverting changes.
Training on augumented user 85043 8/50 current_auc = 0.6869565217391305
User 85043 AUC after training: 0.6891304347826086
User 85043 improves AUC. Keeping the model.
Training on augumented user 22390 9/50 current_auc = 0.6891304347826086
User 22390 AUC after training: 0.6891304347826086
User 22390 does not improve AUC. Reverting changes.
Training on augumented user 24860 10/50 current_auc = 0.6891304347826086
User 24860 AUC after training: 0.6898550724637682
User 24860 improves AUC. Keeping the model.
Training on augumented user 28319 11/50 current_auc = 0.6898550724637682
User 28319 AUC after training: 0.6905797101449276
User 28319 improves AUC. Keeping the model.
Training on augumented user 126568 12/50 current_auc = 0.6905797101449276
User 126568 AUC after training: 0.6920289855072463
User 126568 improves AUC. Keeping the model.
Training on augumented user 36218 13/50 current_auc = 0.6920289855072463
User 36218 AUC after training: 0.6905797101449276
User 36218 does not improve AUC. Reverting changes.
Training on augumented user 64517 14/50 current_auc = 0.6920289855072463
User 64517 AUC after training: 0.6920289855072463
User 64517 does not improve AUC. Reverting changes.
Training on augumented user 67276 15/50 current_auc = 0.6920289855072463
User 67276 AUC after training: 0.6905797101449276
User 67276 does not improve AUC. Reverting changes.
Training on augumented user 136888 16/50 current_auc = 0.6920289855072463
User 136888 AUC after training: 0.6920289855072463
User 136888 does not improve AUC. Reverting changes.
Training on augumented user 129151 17/50 current_auc = 0.6920289855072463
User 129151 AUC after training: 0.6920289855072463
User 129151 does not improve AUC. Reverting changes.
Training on augumented user 14660 18/50 current_auc = 0.6920289855072463
User 14660 AUC after training: 0.691304347826087
User 14660 does not improve AUC. Reverting changes.
Training on augumented user 39889 19/50 current_auc = 0.6920289855072463
User 39889 AUC after training: 0.6920289855072463
User 39889 does not improve AUC. Reverting changes.
Training on augumented user 89575 20/50 current_auc = 0.6920289855072463
User 89575 AUC after training: 0.6833333333333333
User 89575 does not improve AUC. Reverting changes.
Training on augumented user 62705 21/50 current_auc = 0.6920289855072463
User 62705 AUC after training: 0.6905797101449276
User 62705 does not improve AUC. Reverting changes.
Training on augumented user 89236 22/50 current_auc = 0.6920289855072463
User 89236 AUC after training: 0.6898550724637682
User 89236 does not improve AUC. Reverting changes.
Training on augumented user 16117 23/50 current_auc = 0.6920289855072463
User 16117 AUC after training: 0.6891304347826087
User 16117 does not improve AUC. Reverting changes.
Training on augumented user 76699 24/50 current_auc = 0.6920289855072463
User 76699 AUC after training: 0.6898550724637681
User 76699 does not improve AUC. Reverting changes.
Training on augumented user 32099 25/50 current_auc = 0.6920289855072463
User 32099 AUC after training: 0.6920289855072463
User 32099 does not improve AUC. Reverting changes.
Training on augumented user 88501 26/50 current_auc = 0.6920289855072463
User 88501 AUC after training: 0.6891304347826088
User 88501 does not improve AUC. Reverting changes.
Training on augumented user 5090 27/50 current_auc = 0.6920289855072463
User 5090 AUC after training: 0.6905797101449276
User 5090 does not improve AUC. Reverting changes.
Training on augumented user 130985 28/50 current_auc = 0.6920289855072463
User 130985 AUC after training: 0.6905797101449276
User 130985 does not improve AUC. Reverting changes.
Training on augumented user 48144 29/50 current_auc = 0.6920289855072463
User 48144 AUC after training: 0.691304347826087
User 48144 does not improve AUC. Reverting changes.
Training on augumented user 49619 30/50 current_auc = 0.6920289855072463
User 49619 AUC after training: 0.6920289855072463
User 49619 does not improve AUC. Reverting changes.
Training on augumented user 90455 31/50 current_auc = 0.6920289855072463
User 90455 AUC after training: 0.691304347826087
User 90455 does not improve AUC. Reverting changes.
Training on augumented user 121156 32/50 current_auc = 0.6920289855072463
User 121156 AUC after training: 0.6920289855072463
User 121156 does not improve AUC. Reverting changes.
Training on augumented user 87243 33/50 current_auc = 0.6920289855072463
User 87243 AUC after training: 0.6898550724637682
User 87243 does not improve AUC. Reverting changes.
Training on augumented user 67353 34/50 current_auc = 0.6920289855072463
User 67353 AUC after training: 0.6869565217391305
User 67353 does not improve AUC. Reverting changes.
Training on augumented user 53817 35/50 current_auc = 0.6920289855072463
User 53817 AUC after training: 0.691304347826087
User 53817 does not improve AUC. Reverting changes.
Training on augumented user 29606 36/50 current_auc = 0.6920289855072463
User 29606 AUC after training: 0.6920289855072463
User 29606 does not improve AUC. Reverting changes.
Training on augumented user 17359 37/50 current_auc = 0.6920289855072463
User 17359 AUC after training: 0.6920289855072465
User 17359 improves AUC. Keeping the model.
Training on augumented user 111188 38/50 current_auc = 0.6920289855072465
User 111188 AUC after training: 0.6905797101449276
User 111188 does not improve AUC. Reverting changes.
Training on augumented user 82008 39/50 current_auc = 0.6920289855072465
User 82008 AUC after training: 0.6876811594202898
User 82008 does not improve AUC. Reverting changes.
Training on augumented user 37082 40/50 current_auc = 0.6920289855072465
User 37082 AUC after training: 0.691304347826087
User 37082 does not improve AUC. Reverting changes.
Training on augumented user 17181 41/50 current_auc = 0.6920289855072465
User 17181 AUC after training: 0.691304347826087
User 17181 does not improve AUC. Reverting changes.
Training on augumented user 10229 42/50 current_auc = 0.6920289855072465
User 10229 AUC after training: 0.6884057971014492
User 10229 does not improve AUC. Reverting changes.
Training on augumented user 91988 43/50 current_auc = 0.6920289855072465
User 91988 AUC after training: 0.6920289855072463
User 91988 does not improve AUC. Reverting changes.
Training on augumented user 58550 44/50 current_auc = 0.6920289855072465
User 58550 AUC after training: 0.691304347826087
User 58550 does not improve AUC. Reverting changes.
Training on augumented user 49995 45/50 current_auc = 0.6920289855072465
User 49995 AUC after training: 0.6905797101449276
User 49995 does not improve AUC. Reverting changes.
Training on augumented user 115360 46/50 current_auc = 0.6920289855072465
User 115360 AUC after training: 0.6927536231884057
User 115360 improves AUC. Keeping the model.
Training on augumented user 23349 47/50 current_auc = 0.6927536231884057
User 23349 AUC after training: 0.6934782608695652
User 23349 improves AUC. Keeping the model.
Training on augumented user 67111 48/50 current_auc = 0.6934782608695652
User 67111 AUC after training: 0.6920289855072463
User 67111 does not improve AUC. Reverting changes.
Training on augumented user 26087 49/50 current_auc = 0.6934782608695652
User 26087 AUC after training: 0.6949275362318841
User 26087 improves AUC. Keeping the model.
[2024-12-02 18:50:14.890533] start test user 85893 134/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:50:15.293547] start test user 85893 134/568 recall augumented users by random, augumented_users = [74696, 5427, 73239, 125999, 82594, 39194, 39094, 128970, 37126, 4650, 92587, 107753, 21114, 71383, 100328, 51479, 66041, 118050, 125562, 104357, 62594, 40116, 5255, 103065, 123647, 41067, 10569, 102492, 25365, 65939, 8371, 61940, 87648, 53746, 2985, 8161, 4242, 50151, 93232, 77170, 14995, 43455, 114371, 34663, 130216, 96367, 3309, 117378, 113400, 24072]
[2024-12-02 18:50:15.309082] user = 85893 Cloud 134/568
[2024-12-02 18:50:15.345503] user = 85893 Local 134/568
[2024-12-02 18:50:15.532580] user = 85893 Local+ 134/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:50:17.641885] user = 85893 MPDA- 134/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6422222222222222
Training on augumented user 74696 0/50 current_auc = 0.6422222222222222
User 74696 AUC after training: 0.6424806201550388
User 74696 improves AUC. Keeping the model.
Training on augumented user 5427 1/50 current_auc = 0.6424806201550388
User 5427 AUC after training: 0.6425839793281654
User 5427 improves AUC. Keeping the model.
Training on augumented user 73239 2/50 current_auc = 0.6425839793281654
User 73239 AUC after training: 0.6421705426356589
User 73239 does not improve AUC. Reverting changes.
Training on augumented user 125999 3/50 current_auc = 0.6425839793281654
User 125999 AUC after training: 0.6423772609819122
User 125999 does not improve AUC. Reverting changes.
Training on augumented user 82594 4/50 current_auc = 0.6425839793281654
User 82594 AUC after training: 0.6423772609819122
User 82594 does not improve AUC. Reverting changes.
Training on augumented user 39194 5/50 current_auc = 0.6425839793281654
User 39194 AUC after training: 0.6425839793281654
User 39194 does not improve AUC. Reverting changes.
Training on augumented user 39094 6/50 current_auc = 0.6425839793281654
User 39094 AUC after training: 0.6423772609819122
User 39094 does not improve AUC. Reverting changes.
Training on augumented user 128970 7/50 current_auc = 0.6425839793281654
User 128970 AUC after training: 0.6421705426356589
User 128970 does not improve AUC. Reverting changes.
Training on augumented user 37126 8/50 current_auc = 0.6425839793281654
User 37126 AUC after training: 0.6422739018087855
User 37126 does not improve AUC. Reverting changes.
Training on augumented user 4650 9/50 current_auc = 0.6425839793281654
User 4650 AUC after training: 0.6423772609819121
User 4650 does not improve AUC. Reverting changes.
Training on augumented user 92587 10/50 current_auc = 0.6425839793281654
User 92587 AUC after training: 0.6439276485788115
User 92587 improves AUC. Keeping the model.
Training on augumented user 107753 11/50 current_auc = 0.6439276485788115
User 107753 AUC after training: 0.6444444444444445
User 107753 improves AUC. Keeping the model.
Training on augumented user 21114 12/50 current_auc = 0.6444444444444445
User 21114 AUC after training: 0.6438242894056848
User 21114 does not improve AUC. Reverting changes.
Training on augumented user 71383 13/50 current_auc = 0.6444444444444445
User 71383 AUC after training: 0.644547803617571
User 71383 improves AUC. Keeping the model.
Training on augumented user 100328 14/50 current_auc = 0.644547803617571
User 100328 AUC after training: 0.644341085271318
User 100328 does not improve AUC. Reverting changes.
Training on augumented user 51479 15/50 current_auc = 0.644547803617571
User 51479 AUC after training: 0.64
User 51479 does not improve AUC. Reverting changes.
Training on augumented user 66041 16/50 current_auc = 0.644547803617571
User 66041 AUC after training: 0.6421705426356589
User 66041 does not improve AUC. Reverting changes.
Training on augumented user 118050 17/50 current_auc = 0.644547803617571
User 118050 AUC after training: 0.6443410852713178
User 118050 does not improve AUC. Reverting changes.
Training on augumented user 125562 18/50 current_auc = 0.644547803617571
User 125562 AUC after training: 0.6444444444444445
User 125562 does not improve AUC. Reverting changes.
Training on augumented user 104357 19/50 current_auc = 0.644547803617571
User 104357 AUC after training: 0.6441343669250646
User 104357 does not improve AUC. Reverting changes.
Training on augumented user 62594 20/50 current_auc = 0.644547803617571
User 62594 AUC after training: 0.6446511627906978
User 62594 improves AUC. Keeping the model.
Training on augumented user 40116 21/50 current_auc = 0.6446511627906978
User 40116 AUC after training: 0.6447545219638243
User 40116 improves AUC. Keeping the model.
Training on augumented user 5255 22/50 current_auc = 0.6447545219638243
User 5255 AUC after training: 0.6428940568475452
User 5255 does not improve AUC. Reverting changes.
Training on augumented user 103065 23/50 current_auc = 0.6447545219638243
User 103065 AUC after training: 0.6441343669250646
User 103065 does not improve AUC. Reverting changes.
Training on augumented user 123647 24/50 current_auc = 0.6447545219638243
User 123647 AUC after training: 0.6444444444444445
User 123647 does not improve AUC. Reverting changes.
Training on augumented user 41067 25/50 current_auc = 0.6447545219638243
User 41067 AUC after training: 0.6444444444444445
User 41067 does not improve AUC. Reverting changes.
Training on augumented user 10569 26/50 current_auc = 0.6447545219638243
User 10569 AUC after training: 0.6443410852713178
User 10569 does not improve AUC. Reverting changes.
Training on augumented user 102492 27/50 current_auc = 0.6447545219638243
User 102492 AUC after training: 0.644857881136951
User 102492 improves AUC. Keeping the model.
Training on augumented user 25365 28/50 current_auc = 0.644857881136951
User 25365 AUC after training: 0.644857881136951
User 25365 does not improve AUC. Reverting changes.
Training on augumented user 65939 29/50 current_auc = 0.644857881136951
User 65939 AUC after training: 0.6442377260981912
User 65939 does not improve AUC. Reverting changes.
Training on augumented user 8371 30/50 current_auc = 0.644857881136951
User 8371 AUC after training: 0.6446511627906977
User 8371 does not improve AUC. Reverting changes.
Training on augumented user 61940 31/50 current_auc = 0.644857881136951
User 61940 AUC after training: 0.6440826873385013
User 61940 does not improve AUC. Reverting changes.
Training on augumented user 87648 32/50 current_auc = 0.644857881136951
User 87648 AUC after training: 0.6452713178294573
User 87648 improves AUC. Keeping the model.
Training on augumented user 53746 33/50 current_auc = 0.6452713178294573
User 53746 AUC after training: 0.6448578811369509
User 53746 does not improve AUC. Reverting changes.
Training on augumented user 2985 34/50 current_auc = 0.6452713178294573
User 2985 AUC after training: 0.644857881136951
User 2985 does not improve AUC. Reverting changes.
Training on augumented user 8161 35/50 current_auc = 0.6452713178294573
User 8161 AUC after training: 0.6445478036175711
User 8161 does not improve AUC. Reverting changes.
Training on augumented user 4242 36/50 current_auc = 0.6452713178294573
User 4242 AUC after training: 0.6451679586563307
User 4242 does not improve AUC. Reverting changes.
Training on augumented user 50151 37/50 current_auc = 0.6452713178294573
User 50151 AUC after training: 0.6448578811369509
User 50151 does not improve AUC. Reverting changes.
Training on augumented user 93232 38/50 current_auc = 0.6452713178294573
User 93232 AUC after training: 0.6450645994832043
User 93232 does not improve AUC. Reverting changes.
Training on augumented user 77170 39/50 current_auc = 0.6452713178294573
User 77170 AUC after training: 0.643204134366925
User 77170 does not improve AUC. Reverting changes.
Training on augumented user 14995 40/50 current_auc = 0.6452713178294573
User 14995 AUC after training: 0.6450645994832042
User 14995 does not improve AUC. Reverting changes.
Training on augumented user 43455 41/50 current_auc = 0.6452713178294573
User 43455 AUC after training: 0.6433074935400517
User 43455 does not improve AUC. Reverting changes.
Training on augumented user 114371 42/50 current_auc = 0.6452713178294573
User 114371 AUC after training: 0.6444444444444445
User 114371 does not improve AUC. Reverting changes.
Training on augumented user 34663 43/50 current_auc = 0.6452713178294573
User 34663 AUC after training: 0.6446511627906977
User 34663 does not improve AUC. Reverting changes.
Training on augumented user 130216 44/50 current_auc = 0.6452713178294573
User 130216 AUC after training: 0.6449612403100775
User 130216 does not improve AUC. Reverting changes.
Training on augumented user 96367 45/50 current_auc = 0.6452713178294573
User 96367 AUC after training: 0.6446511627906978
User 96367 does not improve AUC. Reverting changes.
Training on augumented user 3309 46/50 current_auc = 0.6452713178294573
User 3309 AUC after training: 0.6453746770025839
User 3309 improves AUC. Keeping the model.
Training on augumented user 117378 47/50 current_auc = 0.6453746770025839
User 117378 AUC after training: 0.6448578811369509
User 117378 does not improve AUC. Reverting changes.
Training on augumented user 113400 48/50 current_auc = 0.6453746770025839
User 113400 AUC after training: 0.6445994832041344
User 113400 does not improve AUC. Reverting changes.
Training on augumented user 24072 49/50 current_auc = 0.6453746770025839
User 24072 AUC after training: 0.6451679586563307
User 24072 does not improve AUC. Reverting changes.
[2024-12-02 18:50:46.535891] start test user 85897 135/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:50:46.972169] start test user 85897 135/568 recall augumented users by random, augumented_users = [118761, 91059, 73355, 104765, 104214, 130225, 120987, 90224, 86386, 46556, 106653, 3007, 11407, 47437, 115541, 100733, 113516, 59334, 9039, 15024, 86985, 51407, 110523, 115745, 98275, 133633, 77703, 138225, 98569, 52149, 43103, 3557, 10581, 25855, 48864, 50689, 54389, 61560, 86195, 75144, 75682, 116490, 81936, 26015, 123398, 48502, 122827, 118434, 102476, 66051]
[2024-12-02 18:50:46.986824] user = 85897 Cloud 135/568
[2024-12-02 18:50:46.996273] user = 85897 Local 135/568
[2024-12-02 18:50:47.043417] user = 85897 Local+ 135/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:50:49.154887] user = 85897 MPDA- 135/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8148148148148149
Training on augumented user 118761 0/50 current_auc = 0.8148148148148149
User 118761 AUC after training: 0.8148148148148149
User 118761 does not improve AUC. Reverting changes.
Training on augumented user 91059 1/50 current_auc = 0.8148148148148149
User 91059 AUC after training: 0.8148148148148149
User 91059 does not improve AUC. Reverting changes.
Training on augumented user 73355 2/50 current_auc = 0.8148148148148149
User 73355 AUC after training: 0.8518518518518519
User 73355 improves AUC. Keeping the model.
Training on augumented user 104765 3/50 current_auc = 0.8518518518518519
User 104765 AUC after training: 0.8518518518518519
User 104765 does not improve AUC. Reverting changes.
Training on augumented user 104214 4/50 current_auc = 0.8518518518518519
User 104214 AUC after training: 0.8518518518518519
User 104214 does not improve AUC. Reverting changes.
Training on augumented user 130225 5/50 current_auc = 0.8518518518518519
User 130225 AUC after training: 0.8518518518518519
User 130225 does not improve AUC. Reverting changes.
Training on augumented user 120987 6/50 current_auc = 0.8518518518518519
User 120987 AUC after training: 0.8518518518518519
User 120987 does not improve AUC. Reverting changes.
Training on augumented user 90224 7/50 current_auc = 0.8518518518518519
User 90224 AUC after training: 0.8518518518518519
User 90224 does not improve AUC. Reverting changes.
Training on augumented user 86386 8/50 current_auc = 0.8518518518518519
User 86386 AUC after training: 0.8518518518518519
User 86386 does not improve AUC. Reverting changes.
Training on augumented user 46556 9/50 current_auc = 0.8518518518518519
User 46556 AUC after training: 0.8148148148148149
User 46556 does not improve AUC. Reverting changes.
Training on augumented user 106653 10/50 current_auc = 0.8518518518518519
User 106653 AUC after training: 0.8518518518518519
User 106653 does not improve AUC. Reverting changes.
Training on augumented user 3007 11/50 current_auc = 0.8518518518518519
User 3007 AUC after training: 0.8148148148148149
User 3007 does not improve AUC. Reverting changes.
Training on augumented user 11407 12/50 current_auc = 0.8518518518518519
User 11407 AUC after training: 0.8518518518518519
User 11407 does not improve AUC. Reverting changes.
Training on augumented user 47437 13/50 current_auc = 0.8518518518518519
User 47437 AUC after training: 0.8518518518518519
User 47437 does not improve AUC. Reverting changes.
Training on augumented user 115541 14/50 current_auc = 0.8518518518518519
User 115541 AUC after training: 0.8518518518518519
User 115541 does not improve AUC. Reverting changes.
Training on augumented user 100733 15/50 current_auc = 0.8518518518518519
User 100733 AUC after training: 0.8148148148148149
User 100733 does not improve AUC. Reverting changes.
Training on augumented user 113516 16/50 current_auc = 0.8518518518518519
User 113516 AUC after training: 0.8518518518518519
User 113516 does not improve AUC. Reverting changes.
Training on augumented user 59334 17/50 current_auc = 0.8518518518518519
User 59334 AUC after training: 0.8148148148148149
User 59334 does not improve AUC. Reverting changes.
Training on augumented user 9039 18/50 current_auc = 0.8518518518518519
User 9039 AUC after training: 0.8518518518518519
User 9039 does not improve AUC. Reverting changes.
Training on augumented user 15024 19/50 current_auc = 0.8518518518518519
User 15024 AUC after training: 0.8148148148148149
User 15024 does not improve AUC. Reverting changes.
Training on augumented user 86985 20/50 current_auc = 0.8518518518518519
User 86985 AUC after training: 0.8518518518518519
User 86985 does not improve AUC. Reverting changes.
Training on augumented user 51407 21/50 current_auc = 0.8518518518518519
User 51407 AUC after training: 0.8518518518518519
User 51407 does not improve AUC. Reverting changes.
Training on augumented user 110523 22/50 current_auc = 0.8518518518518519
User 110523 AUC after training: 0.8148148148148149
User 110523 does not improve AUC. Reverting changes.
Training on augumented user 115745 23/50 current_auc = 0.8518518518518519
User 115745 AUC after training: 0.8518518518518519
User 115745 does not improve AUC. Reverting changes.
Training on augumented user 98275 24/50 current_auc = 0.8518518518518519
User 98275 AUC after training: 0.8518518518518519
User 98275 does not improve AUC. Reverting changes.
Training on augumented user 133633 25/50 current_auc = 0.8518518518518519
User 133633 AUC after training: 0.8518518518518519
User 133633 does not improve AUC. Reverting changes.
Training on augumented user 77703 26/50 current_auc = 0.8518518518518519
User 77703 AUC after training: 0.8518518518518519
User 77703 does not improve AUC. Reverting changes.
Training on augumented user 138225 27/50 current_auc = 0.8518518518518519
User 138225 AUC after training: 0.8518518518518519
User 138225 does not improve AUC. Reverting changes.
Training on augumented user 98569 28/50 current_auc = 0.8518518518518519
User 98569 AUC after training: 0.8518518518518519
User 98569 does not improve AUC. Reverting changes.
Training on augumented user 52149 29/50 current_auc = 0.8518518518518519
User 52149 AUC after training: 0.8518518518518519
User 52149 does not improve AUC. Reverting changes.
Training on augumented user 43103 30/50 current_auc = 0.8518518518518519
User 43103 AUC after training: 0.8148148148148149
User 43103 does not improve AUC. Reverting changes.
Training on augumented user 3557 31/50 current_auc = 0.8518518518518519
User 3557 AUC after training: 0.8148148148148149
User 3557 does not improve AUC. Reverting changes.
Training on augumented user 10581 32/50 current_auc = 0.8518518518518519
User 10581 AUC after training: 0.8518518518518519
User 10581 does not improve AUC. Reverting changes.
Training on augumented user 25855 33/50 current_auc = 0.8518518518518519
User 25855 AUC after training: 0.8148148148148149
User 25855 does not improve AUC. Reverting changes.
Training on augumented user 48864 34/50 current_auc = 0.8518518518518519
User 48864 AUC after training: 0.8148148148148149
User 48864 does not improve AUC. Reverting changes.
Training on augumented user 50689 35/50 current_auc = 0.8518518518518519
User 50689 AUC after training: 0.8518518518518519
User 50689 does not improve AUC. Reverting changes.
Training on augumented user 54389 36/50 current_auc = 0.8518518518518519
User 54389 AUC after training: 0.8518518518518519
User 54389 does not improve AUC. Reverting changes.
Training on augumented user 61560 37/50 current_auc = 0.8518518518518519
User 61560 AUC after training: 0.8518518518518519
User 61560 does not improve AUC. Reverting changes.
Training on augumented user 86195 38/50 current_auc = 0.8518518518518519
User 86195 AUC after training: 0.8148148148148149
User 86195 does not improve AUC. Reverting changes.
Training on augumented user 75144 39/50 current_auc = 0.8518518518518519
User 75144 AUC after training: 0.8148148148148149
User 75144 does not improve AUC. Reverting changes.
Training on augumented user 75682 40/50 current_auc = 0.8518518518518519
User 75682 AUC after training: 0.8518518518518519
User 75682 does not improve AUC. Reverting changes.
Training on augumented user 116490 41/50 current_auc = 0.8518518518518519
User 116490 AUC after training: 0.8148148148148149
User 116490 does not improve AUC. Reverting changes.
Training on augumented user 81936 42/50 current_auc = 0.8518518518518519
User 81936 AUC after training: 0.8518518518518519
User 81936 does not improve AUC. Reverting changes.
Training on augumented user 26015 43/50 current_auc = 0.8518518518518519
User 26015 AUC after training: 0.8148148148148149
User 26015 does not improve AUC. Reverting changes.
Training on augumented user 123398 44/50 current_auc = 0.8518518518518519
User 123398 AUC after training: 0.8148148148148149
User 123398 does not improve AUC. Reverting changes.
Training on augumented user 48502 45/50 current_auc = 0.8518518518518519
User 48502 AUC after training: 0.8518518518518519
User 48502 does not improve AUC. Reverting changes.
Training on augumented user 122827 46/50 current_auc = 0.8518518518518519
User 122827 AUC after training: 0.8518518518518519
User 122827 does not improve AUC. Reverting changes.
Training on augumented user 118434 47/50 current_auc = 0.8518518518518519
User 118434 AUC after training: 0.8518518518518519
User 118434 does not improve AUC. Reverting changes.
Training on augumented user 102476 48/50 current_auc = 0.8518518518518519
User 102476 AUC after training: 0.8518518518518519
User 102476 does not improve AUC. Reverting changes.
Training on augumented user 66051 49/50 current_auc = 0.8518518518518519
User 66051 AUC after training: 0.8148148148148149
User 66051 does not improve AUC. Reverting changes.
[2024-12-02 18:51:21.936727] start test user 85914 136/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:51:22.953756] start test user 85914 136/568 recall augumented users by random, augumented_users = [89140, 103666, 68836, 8617, 3400, 53386, 135698, 99313, 103717, 48164, 80493, 10465, 1801, 104714, 107658, 71328, 56311, 75540, 106047, 13259, 71783, 98998, 114405, 53412, 46487, 124283, 26383, 95450, 132941, 27974, 14034, 72978, 48689, 49473, 113229, 123989, 41287, 27243, 40321, 11694, 136576, 4314, 48703, 107624, 73832, 48258, 61915, 28235, 73615, 3114]
[2024-12-02 18:51:22.971470] user = 85914 Cloud 136/568
[2024-12-02 18:51:23.004867] user = 85914 Local 136/568
[2024-12-02 18:51:23.119589] user = 85914 Local+ 136/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:51:26.789712] user = 85914 MPDA- 136/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.0
Training on augumented user 89140 0/50 current_auc = 0.0
User 89140 AUC after training: 0.0
User 89140 does not improve AUC. Reverting changes.
Training on augumented user 103666 1/50 current_auc = 0.0
User 103666 AUC after training: 0.0
User 103666 does not improve AUC. Reverting changes.
Training on augumented user 68836 2/50 current_auc = 0.0
User 68836 AUC after training: 0.0
User 68836 does not improve AUC. Reverting changes.
Training on augumented user 8617 3/50 current_auc = 0.0
User 8617 AUC after training: 0.0
User 8617 does not improve AUC. Reverting changes.
Training on augumented user 3400 4/50 current_auc = 0.0
User 3400 AUC after training: 0.0
User 3400 does not improve AUC. Reverting changes.
Training on augumented user 53386 5/50 current_auc = 0.0
User 53386 AUC after training: 0.0
User 53386 does not improve AUC. Reverting changes.
Training on augumented user 135698 6/50 current_auc = 0.0
User 135698 AUC after training: 0.0
User 135698 does not improve AUC. Reverting changes.
Training on augumented user 99313 7/50 current_auc = 0.0
User 99313 AUC after training: 0.0
User 99313 does not improve AUC. Reverting changes.
Training on augumented user 103717 8/50 current_auc = 0.0
User 103717 AUC after training: 0.0
User 103717 does not improve AUC. Reverting changes.
Training on augumented user 48164 9/50 current_auc = 0.0
User 48164 AUC after training: 0.0
User 48164 does not improve AUC. Reverting changes.
Training on augumented user 80493 10/50 current_auc = 0.0
User 80493 AUC after training: 0.0
User 80493 does not improve AUC. Reverting changes.
Training on augumented user 10465 11/50 current_auc = 0.0
User 10465 AUC after training: 0.0
User 10465 does not improve AUC. Reverting changes.
Training on augumented user 1801 12/50 current_auc = 0.0
User 1801 AUC after training: 0.0
User 1801 does not improve AUC. Reverting changes.
Training on augumented user 104714 13/50 current_auc = 0.0
User 104714 AUC after training: 0.0
User 104714 does not improve AUC. Reverting changes.
Training on augumented user 107658 14/50 current_auc = 0.0
User 107658 AUC after training: 0.0
User 107658 does not improve AUC. Reverting changes.
Training on augumented user 71328 15/50 current_auc = 0.0
User 71328 AUC after training: 0.0
User 71328 does not improve AUC. Reverting changes.
Training on augumented user 56311 16/50 current_auc = 0.0
User 56311 AUC after training: 0.0
User 56311 does not improve AUC. Reverting changes.
Training on augumented user 75540 17/50 current_auc = 0.0
User 75540 AUC after training: 0.0
User 75540 does not improve AUC. Reverting changes.
Training on augumented user 106047 18/50 current_auc = 0.0
User 106047 AUC after training: 0.0
User 106047 does not improve AUC. Reverting changes.
Training on augumented user 13259 19/50 current_auc = 0.0
User 13259 AUC after training: 0.0
User 13259 does not improve AUC. Reverting changes.
Training on augumented user 71783 20/50 current_auc = 0.0
User 71783 AUC after training: 0.0
User 71783 does not improve AUC. Reverting changes.
Training on augumented user 98998 21/50 current_auc = 0.0
User 98998 AUC after training: 0.0
User 98998 does not improve AUC. Reverting changes.
Training on augumented user 114405 22/50 current_auc = 0.0
User 114405 AUC after training: 0.0
User 114405 does not improve AUC. Reverting changes.
Training on augumented user 53412 23/50 current_auc = 0.0
User 53412 AUC after training: 0.0
User 53412 does not improve AUC. Reverting changes.
Training on augumented user 46487 24/50 current_auc = 0.0
User 46487 AUC after training: 0.0
User 46487 does not improve AUC. Reverting changes.
Training on augumented user 124283 25/50 current_auc = 0.0
User 124283 AUC after training: 0.0
User 124283 does not improve AUC. Reverting changes.
Training on augumented user 26383 26/50 current_auc = 0.0
User 26383 AUC after training: 0.0
User 26383 does not improve AUC. Reverting changes.
Training on augumented user 95450 27/50 current_auc = 0.0
User 95450 AUC after training: 0.0
User 95450 does not improve AUC. Reverting changes.
Training on augumented user 132941 28/50 current_auc = 0.0
User 132941 AUC after training: 0.0
User 132941 does not improve AUC. Reverting changes.
Training on augumented user 27974 29/50 current_auc = 0.0
User 27974 AUC after training: 0.0
User 27974 does not improve AUC. Reverting changes.
Training on augumented user 14034 30/50 current_auc = 0.0
User 14034 AUC after training: 0.0
User 14034 does not improve AUC. Reverting changes.
Training on augumented user 72978 31/50 current_auc = 0.0
User 72978 AUC after training: 0.0
User 72978 does not improve AUC. Reverting changes.
Training on augumented user 48689 32/50 current_auc = 0.0
User 48689 AUC after training: 0.0
User 48689 does not improve AUC. Reverting changes.
Training on augumented user 49473 33/50 current_auc = 0.0
User 49473 AUC after training: 0.0
User 49473 does not improve AUC. Reverting changes.
Training on augumented user 113229 34/50 current_auc = 0.0
User 113229 AUC after training: 0.0
User 113229 does not improve AUC. Reverting changes.
Training on augumented user 123989 35/50 current_auc = 0.0
User 123989 AUC after training: 0.0
User 123989 does not improve AUC. Reverting changes.
Training on augumented user 41287 36/50 current_auc = 0.0
User 41287 AUC after training: 0.0
User 41287 does not improve AUC. Reverting changes.
Training on augumented user 27243 37/50 current_auc = 0.0
User 27243 AUC after training: 0.0
User 27243 does not improve AUC. Reverting changes.
Training on augumented user 40321 38/50 current_auc = 0.0
User 40321 AUC after training: 0.0
User 40321 does not improve AUC. Reverting changes.
Training on augumented user 11694 39/50 current_auc = 0.0
User 11694 AUC after training: 0.0
User 11694 does not improve AUC. Reverting changes.
Training on augumented user 136576 40/50 current_auc = 0.0
User 136576 AUC after training: 0.0
User 136576 does not improve AUC. Reverting changes.
Training on augumented user 4314 41/50 current_auc = 0.0
User 4314 AUC after training: 0.0
User 4314 does not improve AUC. Reverting changes.
Training on augumented user 48703 42/50 current_auc = 0.0
User 48703 AUC after training: 0.0
User 48703 does not improve AUC. Reverting changes.
Training on augumented user 107624 43/50 current_auc = 0.0
User 107624 AUC after training: 0.0
User 107624 does not improve AUC. Reverting changes.
Training on augumented user 73832 44/50 current_auc = 0.0
User 73832 AUC after training: 0.0
User 73832 does not improve AUC. Reverting changes.
Training on augumented user 48258 45/50 current_auc = 0.0
User 48258 AUC after training: 0.0
User 48258 does not improve AUC. Reverting changes.
Training on augumented user 61915 46/50 current_auc = 0.0
User 61915 AUC after training: 0.0
User 61915 does not improve AUC. Reverting changes.
Training on augumented user 28235 47/50 current_auc = 0.0
User 28235 AUC after training: 0.0
User 28235 does not improve AUC. Reverting changes.
Training on augumented user 73615 48/50 current_auc = 0.0
User 73615 AUC after training: 0.0
User 73615 does not improve AUC. Reverting changes.
Training on augumented user 3114 49/50 current_auc = 0.0
User 3114 AUC after training: 0.0
User 3114 does not improve AUC. Reverting changes.
[2024-12-02 18:51:53.807457] start test user 85926 137/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:51:54.246687] start test user 85926 137/568 recall augumented users by random, augumented_users = [38612, 62754, 98009, 51765, 6819, 131141, 99813, 93168, 59586, 94676, 82748, 83822, 116305, 61941, 46127, 69394, 92420, 130315, 44574, 24801, 40379, 69881, 4278, 113374, 135373, 93977, 137980, 133139, 67870, 114101, 81323, 70862, 83714, 85501, 73393, 24745, 134202, 15900, 72218, 113167, 128277, 107178, 6638, 7878, 13697, 2269, 74950, 52788, 10023, 117072]
[2024-12-02 18:51:54.263608] user = 85926 Cloud 137/568
[2024-12-02 18:51:54.279064] user = 85926 Local 137/568
[2024-12-02 18:51:54.495528] user = 85926 Local+ 137/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:51:57.180014] user = 85926 MPDA- 137/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6387771520514883
Training on augumented user 38612 0/50 current_auc = 0.6387771520514883
User 38612 AUC after training: 0.6387771520514883
User 38612 does not improve AUC. Reverting changes.
Training on augumented user 62754 1/50 current_auc = 0.6387771520514883
User 62754 AUC after training: 0.6395816572807723
User 62754 improves AUC. Keeping the model.
Training on augumented user 98009 2/50 current_auc = 0.6395816572807723
User 98009 AUC after training: 0.6395816572807723
User 98009 does not improve AUC. Reverting changes.
Training on augumented user 51765 3/50 current_auc = 0.6395816572807723
User 51765 AUC after training: 0.6387771520514883
User 51765 does not improve AUC. Reverting changes.
Training on augumented user 6819 4/50 current_auc = 0.6395816572807723
User 6819 AUC after training: 0.6403861625100563
User 6819 improves AUC. Keeping the model.
Training on augumented user 131141 5/50 current_auc = 0.6403861625100563
User 131141 AUC after training: 0.6403861625100563
User 131141 does not improve AUC. Reverting changes.
Training on augumented user 99813 6/50 current_auc = 0.6403861625100563
User 99813 AUC after training: 0.6403861625100563
User 99813 does not improve AUC. Reverting changes.
Training on augumented user 93168 7/50 current_auc = 0.6403861625100563
User 93168 AUC after training: 0.6403861625100563
User 93168 does not improve AUC. Reverting changes.
Training on augumented user 59586 8/50 current_auc = 0.6403861625100563
User 59586 AUC after training: 0.6403861625100563
User 59586 does not improve AUC. Reverting changes.
Training on augumented user 94676 9/50 current_auc = 0.6403861625100563
User 94676 AUC after training: 0.6403861625100563
User 94676 does not improve AUC. Reverting changes.
Training on augumented user 82748 10/50 current_auc = 0.6403861625100563
User 82748 AUC after training: 0.6419951729686243
User 82748 improves AUC. Keeping the model.
Training on augumented user 83822 11/50 current_auc = 0.6419951729686243
User 83822 AUC after training: 0.6444086886564763
User 83822 improves AUC. Keeping the model.
Training on augumented user 116305 12/50 current_auc = 0.6444086886564763
User 116305 AUC after training: 0.6452131938857603
User 116305 improves AUC. Keeping the model.
Training on augumented user 61941 13/50 current_auc = 0.6452131938857603
User 61941 AUC after training: 0.6444086886564763
User 61941 does not improve AUC. Reverting changes.
Training on augumented user 46127 14/50 current_auc = 0.6452131938857603
User 46127 AUC after training: 0.6444086886564763
User 46127 does not improve AUC. Reverting changes.
Training on augumented user 69394 15/50 current_auc = 0.6452131938857603
User 69394 AUC after training: 0.6468222043443282
User 69394 improves AUC. Keeping the model.
Training on augumented user 92420 16/50 current_auc = 0.6468222043443282
User 92420 AUC after training: 0.6484312148028962
User 92420 improves AUC. Keeping the model.
Training on augumented user 130315 17/50 current_auc = 0.6484312148028962
User 130315 AUC after training: 0.6476267095736122
User 130315 does not improve AUC. Reverting changes.
Training on augumented user 44574 18/50 current_auc = 0.6484312148028962
User 44574 AUC after training: 0.6476267095736122
User 44574 does not improve AUC. Reverting changes.
Training on augumented user 24801 19/50 current_auc = 0.6484312148028962
User 24801 AUC after training: 0.6468222043443282
User 24801 does not improve AUC. Reverting changes.
Training on augumented user 40379 20/50 current_auc = 0.6484312148028962
User 40379 AUC after training: 0.6460176991150443
User 40379 does not improve AUC. Reverting changes.
Training on augumented user 69881 21/50 current_auc = 0.6484312148028962
User 69881 AUC after training: 0.6468222043443282
User 69881 does not improve AUC. Reverting changes.
Training on augumented user 4278 22/50 current_auc = 0.6484312148028962
User 4278 AUC after training: 0.6468222043443282
User 4278 does not improve AUC. Reverting changes.
Training on augumented user 113374 23/50 current_auc = 0.6484312148028962
User 113374 AUC after training: 0.6476267095736122
User 113374 does not improve AUC. Reverting changes.
Training on augumented user 135373 24/50 current_auc = 0.6484312148028962
User 135373 AUC after training: 0.6476267095736122
User 135373 does not improve AUC. Reverting changes.
Training on augumented user 93977 25/50 current_auc = 0.6484312148028962
User 93977 AUC after training: 0.6411906677393403
User 93977 does not improve AUC. Reverting changes.
Training on augumented user 137980 26/50 current_auc = 0.6484312148028962
User 137980 AUC after training: 0.6476267095736122
User 137980 does not improve AUC. Reverting changes.
Training on augumented user 133139 27/50 current_auc = 0.6484312148028962
User 133139 AUC after training: 0.6460176991150443
User 133139 does not improve AUC. Reverting changes.
Training on augumented user 67870 28/50 current_auc = 0.6484312148028962
User 67870 AUC after training: 0.6484312148028962
User 67870 does not improve AUC. Reverting changes.
Training on augumented user 114101 29/50 current_auc = 0.6484312148028962
User 114101 AUC after training: 0.6460176991150443
User 114101 does not improve AUC. Reverting changes.
Training on augumented user 81323 30/50 current_auc = 0.6484312148028962
User 81323 AUC after training: 0.6476267095736122
User 81323 does not improve AUC. Reverting changes.
Training on augumented user 70862 31/50 current_auc = 0.6484312148028962
User 70862 AUC after training: 0.6468222043443282
User 70862 does not improve AUC. Reverting changes.
Training on augumented user 83714 32/50 current_auc = 0.6484312148028962
User 83714 AUC after training: 0.6460176991150443
User 83714 does not improve AUC. Reverting changes.
Training on augumented user 85501 33/50 current_auc = 0.6484312148028962
User 85501 AUC after training: 0.6484312148028962
User 85501 does not improve AUC. Reverting changes.
Training on augumented user 73393 34/50 current_auc = 0.6484312148028962
User 73393 AUC after training: 0.6468222043443281
User 73393 does not improve AUC. Reverting changes.
Training on augumented user 24745 35/50 current_auc = 0.6484312148028962
User 24745 AUC after training: 0.6468222043443282
User 24745 does not improve AUC. Reverting changes.
Training on augumented user 134202 36/50 current_auc = 0.6484312148028962
User 134202 AUC after training: 0.6476267095736122
User 134202 does not improve AUC. Reverting changes.
Training on augumented user 15900 37/50 current_auc = 0.6484312148028962
User 15900 AUC after training: 0.6452131938857603
User 15900 does not improve AUC. Reverting changes.
Training on augumented user 72218 38/50 current_auc = 0.6484312148028962
User 72218 AUC after training: 0.6468222043443282
User 72218 does not improve AUC. Reverting changes.
Training on augumented user 113167 39/50 current_auc = 0.6484312148028962
User 113167 AUC after training: 0.6468222043443282
User 113167 does not improve AUC. Reverting changes.
Training on augumented user 128277 40/50 current_auc = 0.6484312148028962
User 128277 AUC after training: 0.6476267095736122
User 128277 does not improve AUC. Reverting changes.
Training on augumented user 107178 41/50 current_auc = 0.6484312148028962
User 107178 AUC after training: 0.6468222043443282
User 107178 does not improve AUC. Reverting changes.
Training on augumented user 6638 42/50 current_auc = 0.6484312148028962
User 6638 AUC after training: 0.6460176991150443
User 6638 does not improve AUC. Reverting changes.
Training on augumented user 7878 43/50 current_auc = 0.6484312148028962
User 7878 AUC after training: 0.6468222043443282
User 7878 does not improve AUC. Reverting changes.
Training on augumented user 13697 44/50 current_auc = 0.6484312148028962
User 13697 AUC after training: 0.6476267095736122
User 13697 does not improve AUC. Reverting changes.
Training on augumented user 2269 45/50 current_auc = 0.6484312148028962
User 2269 AUC after training: 0.6468222043443282
User 2269 does not improve AUC. Reverting changes.
Training on augumented user 74950 46/50 current_auc = 0.6484312148028962
User 74950 AUC after training: 0.6468222043443282
User 74950 does not improve AUC. Reverting changes.
Training on augumented user 52788 47/50 current_auc = 0.6484312148028962
User 52788 AUC after training: 0.6468222043443282
User 52788 does not improve AUC. Reverting changes.
Training on augumented user 10023 48/50 current_auc = 0.6484312148028962
User 10023 AUC after training: 0.6484312148028962
User 10023 does not improve AUC. Reverting changes.
Training on augumented user 117072 49/50 current_auc = 0.6484312148028962
User 117072 AUC after training: 0.6476267095736122
User 117072 does not improve AUC. Reverting changes.
[2024-12-02 18:52:25.675641] start test user 85928 138/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:52:26.339445] start test user 85928 138/568 recall augumented users by random, augumented_users = [29949, 88784, 66473, 48611, 115421, 121802, 132004, 23345, 45879, 83398, 132053, 65982, 33040, 104126, 96606, 56293, 115435, 7952, 96062, 114186, 115052, 75153, 137023, 132312, 43495, 25832, 89375, 49039, 50057, 13379, 114375, 79047, 21628, 24625, 109596, 36338, 130250, 73824, 85349, 56311, 101152, 10836, 69742, 99608, 7502, 4220, 59354, 105579, 15980, 89798]
[2024-12-02 18:52:26.368307] user = 85928 Cloud 138/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:52:26.381295] user = 85928 Local 138/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:52:26.428154] user = 85928 Local+ 138/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:52:29.187404] user = 85928 MPDA- 138/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 29949 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29949 AUC after training: 0.5
User 29949 does not improve AUC. Reverting changes.
Training on augumented user 88784 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88784 AUC after training: 0.5
User 88784 does not improve AUC. Reverting changes.
Training on augumented user 66473 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66473 AUC after training: 0.5
User 66473 does not improve AUC. Reverting changes.
Training on augumented user 48611 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48611 AUC after training: 0.5
User 48611 does not improve AUC. Reverting changes.
Training on augumented user 115421 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115421 AUC after training: 0.5
User 115421 does not improve AUC. Reverting changes.
Training on augumented user 121802 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121802 AUC after training: 0.5
User 121802 does not improve AUC. Reverting changes.
Training on augumented user 132004 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132004 AUC after training: 0.5
User 132004 does not improve AUC. Reverting changes.
Training on augumented user 23345 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23345 AUC after training: 0.5
User 23345 does not improve AUC. Reverting changes.
Training on augumented user 45879 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45879 AUC after training: 0.5
User 45879 does not improve AUC. Reverting changes.
Training on augumented user 83398 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83398 AUC after training: 0.5
User 83398 does not improve AUC. Reverting changes.
Training on augumented user 132053 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132053 AUC after training: 0.5
User 132053 does not improve AUC. Reverting changes.
Training on augumented user 65982 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65982 AUC after training: 0.5
User 65982 does not improve AUC. Reverting changes.
Training on augumented user 33040 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33040 AUC after training: 0.5
User 33040 does not improve AUC. Reverting changes.
Training on augumented user 104126 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104126 AUC after training: 0.5
User 104126 does not improve AUC. Reverting changes.
Training on augumented user 96606 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96606 AUC after training: 0.5
User 96606 does not improve AUC. Reverting changes.
Training on augumented user 56293 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56293 AUC after training: 0.5
User 56293 does not improve AUC. Reverting changes.
Training on augumented user 115435 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115435 AUC after training: 0.5
User 115435 does not improve AUC. Reverting changes.
Training on augumented user 7952 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7952 AUC after training: 0.5
User 7952 does not improve AUC. Reverting changes.
Training on augumented user 96062 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96062 AUC after training: 0.5
User 96062 does not improve AUC. Reverting changes.
Training on augumented user 114186 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114186 AUC after training: 0.5
User 114186 does not improve AUC. Reverting changes.
Training on augumented user 115052 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115052 AUC after training: 0.5
User 115052 does not improve AUC. Reverting changes.
Training on augumented user 75153 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75153 AUC after training: 0.5
User 75153 does not improve AUC. Reverting changes.
Training on augumented user 137023 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137023 AUC after training: 0.5
User 137023 does not improve AUC. Reverting changes.
Training on augumented user 132312 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132312 AUC after training: 0.5
User 132312 does not improve AUC. Reverting changes.
Training on augumented user 43495 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43495 AUC after training: 0.5
User 43495 does not improve AUC. Reverting changes.
Training on augumented user 25832 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25832 AUC after training: 0.5
User 25832 does not improve AUC. Reverting changes.
Training on augumented user 89375 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89375 AUC after training: 0.5
User 89375 does not improve AUC. Reverting changes.
Training on augumented user 49039 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49039 AUC after training: 0.5
User 49039 does not improve AUC. Reverting changes.
Training on augumented user 50057 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50057 AUC after training: 0.5
User 50057 does not improve AUC. Reverting changes.
Training on augumented user 13379 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13379 AUC after training: 0.5
User 13379 does not improve AUC. Reverting changes.
Training on augumented user 114375 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114375 AUC after training: 0.5
User 114375 does not improve AUC. Reverting changes.
Training on augumented user 79047 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79047 AUC after training: 0.5
User 79047 does not improve AUC. Reverting changes.
Training on augumented user 21628 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21628 AUC after training: 0.5
User 21628 does not improve AUC. Reverting changes.
Training on augumented user 24625 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24625 AUC after training: 0.5
User 24625 does not improve AUC. Reverting changes.
Training on augumented user 109596 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109596 AUC after training: 0.5
User 109596 does not improve AUC. Reverting changes.
Training on augumented user 36338 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36338 AUC after training: 0.5
User 36338 does not improve AUC. Reverting changes.
Training on augumented user 130250 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130250 AUC after training: 0.5
User 130250 does not improve AUC. Reverting changes.
Training on augumented user 73824 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73824 AUC after training: 0.5
User 73824 does not improve AUC. Reverting changes.
Training on augumented user 85349 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85349 AUC after training: 0.5
User 85349 does not improve AUC. Reverting changes.
Training on augumented user 56311 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56311 AUC after training: 0.5
User 56311 does not improve AUC. Reverting changes.
Training on augumented user 101152 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101152 AUC after training: 0.5
User 101152 does not improve AUC. Reverting changes.
Training on augumented user 10836 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10836 AUC after training: 0.5
User 10836 does not improve AUC. Reverting changes.
Training on augumented user 69742 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69742 AUC after training: 0.5
User 69742 does not improve AUC. Reverting changes.
Training on augumented user 99608 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99608 AUC after training: 0.5
User 99608 does not improve AUC. Reverting changes.
Training on augumented user 7502 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7502 AUC after training: 0.5
User 7502 does not improve AUC. Reverting changes.
Training on augumented user 4220 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4220 AUC after training: 0.5
User 4220 does not improve AUC. Reverting changes.
Training on augumented user 59354 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59354 AUC after training: 0.5
User 59354 does not improve AUC. Reverting changes.
Training on augumented user 105579 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105579 AUC after training: 0.5
User 105579 does not improve AUC. Reverting changes.
Training on augumented user 15980 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15980 AUC after training: 0.5
User 15980 does not improve AUC. Reverting changes.
Training on augumented user 89798 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89798 AUC after training: 0.5
User 89798 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:52:53.345621] start test user 85987 139/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:52:53.795334] start test user 85987 139/568 recall augumented users by random, augumented_users = [37486, 58008, 17118, 82416, 57095, 70557, 97981, 99388, 45373, 65808, 65958, 47936, 138095, 90271, 116154, 135202, 106960, 74474, 112705, 73363, 73491, 98224, 132360, 105886, 34092, 104625, 89769, 44684, 84544, 89917, 124331, 26943, 53638, 10151, 130221, 137019, 53076, 71235, 111482, 18467, 49274, 60627, 97144, 80680, 122987, 101514, 124631, 123287, 104890, 81281]
[2024-12-02 18:52:53.810606] user = 85987 Cloud 139/568
[2024-12-02 18:52:53.846466] user = 85987 Local 139/568
[2024-12-02 18:52:53.913320] user = 85987 Local+ 139/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:52:55.988850] user = 85987 MPDA- 139/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6146548332094609
Training on augumented user 37486 0/50 current_auc = 0.6146548332094609
User 37486 AUC after training: 0.6145673938705023
User 37486 does not improve AUC. Reverting changes.
Training on augumented user 58008 1/50 current_auc = 0.6146548332094609
User 58008 AUC after training: 0.6146985528789403
User 58008 improves AUC. Keeping the model.
Training on augumented user 17118 2/50 current_auc = 0.6146985528789403
User 17118 AUC after training: 0.614217636514668
User 17118 does not improve AUC. Reverting changes.
Training on augumented user 82416 3/50 current_auc = 0.6146985528789403
User 82416 AUC after training: 0.6146985528789403
User 82416 does not improve AUC. Reverting changes.
Training on augumented user 57095 4/50 current_auc = 0.6146985528789403
User 57095 AUC after training: 0.6145673938705023
User 57095 does not improve AUC. Reverting changes.
Training on augumented user 70557 5/50 current_auc = 0.6146985528789403
User 70557 AUC after training: 0.6145236742010232
User 70557 does not improve AUC. Reverting changes.
Training on augumented user 97981 6/50 current_auc = 0.6146985528789403
User 97981 AUC after training: 0.614523674201023
User 97981 does not improve AUC. Reverting changes.
Training on augumented user 99388 7/50 current_auc = 0.6146985528789403
User 99388 AUC after training: 0.6146985528789402
User 99388 does not improve AUC. Reverting changes.
Training on augumented user 45373 8/50 current_auc = 0.6146985528789403
User 45373 AUC after training: 0.6145673938705023
User 45373 does not improve AUC. Reverting changes.
Training on augumented user 65808 9/50 current_auc = 0.6146985528789403
User 65808 AUC after training: 0.6146985528789403
User 65808 does not improve AUC. Reverting changes.
Training on augumented user 65958 10/50 current_auc = 0.6146985528789403
User 65958 AUC after training: 0.6146985528789403
User 65958 does not improve AUC. Reverting changes.
Training on augumented user 47936 11/50 current_auc = 0.6146985528789403
User 47936 AUC after training: 0.6146548332094609
User 47936 does not improve AUC. Reverting changes.
Training on augumented user 138095 12/50 current_auc = 0.6146985528789403
User 138095 AUC after training: 0.6143050758536265
User 138095 does not improve AUC. Reverting changes.
Training on augumented user 90271 13/50 current_auc = 0.6146985528789403
User 90271 AUC after training: 0.6151357495737332
User 90271 improves AUC. Keeping the model.
Training on augumented user 116154 14/50 current_auc = 0.6151357495737332
User 116154 AUC after training: 0.6151794692432125
User 116154 improves AUC. Keeping the model.
Training on augumented user 135202 15/50 current_auc = 0.6151794692432125
User 135202 AUC after training: 0.6150483102347747
User 135202 does not improve AUC. Reverting changes.
Training on augumented user 106960 16/50 current_auc = 0.6151794692432125
User 106960 AUC after training: 0.6151357495737332
User 106960 does not improve AUC. Reverting changes.
Training on augumented user 74474 17/50 current_auc = 0.6151794692432125
User 74474 AUC after training: 0.6151794692432125
User 74474 does not improve AUC. Reverting changes.
Training on augumented user 112705 18/50 current_auc = 0.6151794692432125
User 112705 AUC after training: 0.6151357495737331
User 112705 does not improve AUC. Reverting changes.
Training on augumented user 73363 19/50 current_auc = 0.6151794692432125
User 73363 AUC after training: 0.6144362348620644
User 73363 does not improve AUC. Reverting changes.
Training on augumented user 73491 20/50 current_auc = 0.6151794692432125
User 73491 AUC after training: 0.6150920299042539
User 73491 does not improve AUC. Reverting changes.
Training on augumented user 98224 21/50 current_auc = 0.6151794692432125
User 98224 AUC after training: 0.6146111135399817
User 98224 does not improve AUC. Reverting changes.
Training on augumented user 132360 22/50 current_auc = 0.6151794692432125
User 132360 AUC after training: 0.6152231889126918
User 132360 improves AUC. Keeping the model.
Training on augumented user 105886 23/50 current_auc = 0.6152231889126918
User 105886 AUC after training: 0.6150045905652953
User 105886 does not improve AUC. Reverting changes.
Training on augumented user 34092 24/50 current_auc = 0.6152231889126918
User 34092 AUC after training: 0.6146985528789403
User 34092 does not improve AUC. Reverting changes.
Training on augumented user 104625 25/50 current_auc = 0.6152231889126918
User 104625 AUC after training: 0.6151794692432124
User 104625 does not improve AUC. Reverting changes.
Training on augumented user 89769 26/50 current_auc = 0.6152231889126918
User 89769 AUC after training: 0.6152669085821711
User 89769 improves AUC. Keeping the model.
Training on augumented user 44684 27/50 current_auc = 0.6152669085821711
User 44684 AUC after training: 0.6153106282516504
User 44684 improves AUC. Keeping the model.
Training on augumented user 84544 28/50 current_auc = 0.6153106282516504
User 84544 AUC after training: 0.6151794692432125
User 84544 does not improve AUC. Reverting changes.
Training on augumented user 89917 29/50 current_auc = 0.6153106282516504
User 89917 AUC after training: 0.6152231889126917
User 89917 does not improve AUC. Reverting changes.
Training on augumented user 124331 30/50 current_auc = 0.6153106282516504
User 124331 AUC after training: 0.6148297118873781
User 124331 does not improve AUC. Reverting changes.
Training on augumented user 26943 31/50 current_auc = 0.6153106282516504
User 26943 AUC after training: 0.6152669085821711
User 26943 does not improve AUC. Reverting changes.
Training on augumented user 53638 32/50 current_auc = 0.6153106282516504
User 53638 AUC after training: 0.6151794692432125
User 53638 does not improve AUC. Reverting changes.
Training on augumented user 10151 33/50 current_auc = 0.6153106282516504
User 10151 AUC after training: 0.6153106282516504
User 10151 does not improve AUC. Reverting changes.
Training on augumented user 130221 34/50 current_auc = 0.6153106282516504
User 130221 AUC after training: 0.6152231889126918
User 130221 does not improve AUC. Reverting changes.
Training on augumented user 137019 35/50 current_auc = 0.6153106282516504
User 137019 AUC after training: 0.6156166659380056
User 137019 improves AUC. Keeping the model.
Training on augumented user 53076 36/50 current_auc = 0.6156166659380056
User 53076 AUC after training: 0.6156166659380055
User 53076 does not improve AUC. Reverting changes.
Training on augumented user 71235 37/50 current_auc = 0.6156166659380056
User 71235 AUC after training: 0.6157041052769641
User 71235 improves AUC. Keeping the model.
Training on augumented user 111482 38/50 current_auc = 0.6157041052769641
User 111482 AUC after training: 0.615835264285402
User 111482 improves AUC. Keeping the model.
Training on augumented user 18467 39/50 current_auc = 0.615835264285402
User 18467 AUC after training: 0.6162287413107157
User 18467 improves AUC. Keeping the model.
Training on augumented user 49274 40/50 current_auc = 0.6162287413107157
User 49274 AUC after training: 0.6152231889126919
User 49274 does not improve AUC. Reverting changes.
Training on augumented user 60627 41/50 current_auc = 0.6162287413107157
User 60627 AUC after training: 0.6163599003191537
User 60627 improves AUC. Keeping the model.
Training on augumented user 97144 42/50 current_auc = 0.6163599003191537
User 97144 AUC after training: 0.6161850216412363
User 97144 does not improve AUC. Reverting changes.
Training on augumented user 80680 43/50 current_auc = 0.6163599003191537
User 80680 AUC after training: 0.6160975823022778
User 80680 does not improve AUC. Reverting changes.
Training on augumented user 122987 44/50 current_auc = 0.6163599003191537
User 122987 AUC after training: 0.6160975823022778
User 122987 does not improve AUC. Reverting changes.
Training on augumented user 101514 45/50 current_auc = 0.6163599003191537
User 101514 AUC after training: 0.6162287413107157
User 101514 does not improve AUC. Reverting changes.
Training on augumented user 124631 46/50 current_auc = 0.6163599003191537
User 124631 AUC after training: 0.6160975823022777
User 124631 does not improve AUC. Reverting changes.
Training on augumented user 123287 47/50 current_auc = 0.6163599003191537
User 123287 AUC after training: 0.6162287413107157
User 123287 does not improve AUC. Reverting changes.
Training on augumented user 104890 48/50 current_auc = 0.6163599003191537
User 104890 AUC after training: 0.6159227036243605
User 104890 does not improve AUC. Reverting changes.
Training on augumented user 81281 49/50 current_auc = 0.6163599003191537
User 81281 AUC after training: 0.6160101429633192
User 81281 does not improve AUC. Reverting changes.
[2024-12-02 18:53:31.785009] start test user 86054 140/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:53:32.777374] start test user 86054 140/568 recall augumented users by random, augumented_users = [116620, 138114, 43736, 32876, 18281, 91927, 78251, 130902, 117133, 124469, 56071, 2943, 55510, 87796, 23457, 59531, 129058, 2896, 87944, 26756, 64724, 16369, 15206, 766, 59257, 98213, 99242, 106623, 109354, 51958, 79396, 28174, 92462, 112572, 135832, 22277, 47207, 6107, 81267, 76864, 81827, 37264, 133942, 1109, 39760, 112068, 49119, 48918, 83034, 21723]
[2024-12-02 18:53:32.808925] user = 86054 Cloud 140/568
[2024-12-02 18:53:32.859466] user = 86054 Local 140/568
[2024-12-02 18:53:32.920058] user = 86054 Local+ 140/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:53:36.575057] user = 86054 MPDA- 140/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5941915227629513
Training on augumented user 116620 0/50 current_auc = 0.5941915227629513
User 116620 AUC after training: 0.5941915227629513
User 116620 does not improve AUC. Reverting changes.
Training on augumented user 138114 1/50 current_auc = 0.5941915227629513
User 138114 AUC after training: 0.5918367346938775
User 138114 does not improve AUC. Reverting changes.
Training on augumented user 43736 2/50 current_auc = 0.5941915227629513
User 43736 AUC after training: 0.5941915227629513
User 43736 does not improve AUC. Reverting changes.
Training on augumented user 32876 3/50 current_auc = 0.5941915227629513
User 32876 AUC after training: 0.5949764521193093
User 32876 improves AUC. Keeping the model.
Training on augumented user 18281 4/50 current_auc = 0.5949764521193093
User 18281 AUC after training: 0.5934065934065934
User 18281 does not improve AUC. Reverting changes.
Training on augumented user 91927 5/50 current_auc = 0.5949764521193093
User 91927 AUC after training: 0.5918367346938775
User 91927 does not improve AUC. Reverting changes.
Training on augumented user 78251 6/50 current_auc = 0.5949764521193093
User 78251 AUC after training: 0.5949764521193093
User 78251 does not improve AUC. Reverting changes.
Training on augumented user 130902 7/50 current_auc = 0.5949764521193093
User 130902 AUC after training: 0.5934065934065934
User 130902 does not improve AUC. Reverting changes.
Training on augumented user 117133 8/50 current_auc = 0.5949764521193093
User 117133 AUC after training: 0.5949764521193093
User 117133 does not improve AUC. Reverting changes.
Training on augumented user 124469 9/50 current_auc = 0.5949764521193093
User 124469 AUC after training: 0.5918367346938775
User 124469 does not improve AUC. Reverting changes.
Training on augumented user 56071 10/50 current_auc = 0.5949764521193093
User 56071 AUC after training: 0.5918367346938775
User 56071 does not improve AUC. Reverting changes.
Training on augumented user 2943 11/50 current_auc = 0.5949764521193093
User 2943 AUC after training: 0.5949764521193093
User 2943 does not improve AUC. Reverting changes.
Training on augumented user 55510 12/50 current_auc = 0.5949764521193093
User 55510 AUC after training: 0.5949764521193093
User 55510 does not improve AUC. Reverting changes.
Training on augumented user 87796 13/50 current_auc = 0.5949764521193093
User 87796 AUC after training: 0.5934065934065934
User 87796 does not improve AUC. Reverting changes.
Training on augumented user 23457 14/50 current_auc = 0.5949764521193093
User 23457 AUC after training: 0.5941915227629513
User 23457 does not improve AUC. Reverting changes.
Training on augumented user 59531 15/50 current_auc = 0.5949764521193093
User 59531 AUC after training: 0.5941915227629513
User 59531 does not improve AUC. Reverting changes.
Training on augumented user 129058 16/50 current_auc = 0.5949764521193093
User 129058 AUC after training: 0.5934065934065934
User 129058 does not improve AUC. Reverting changes.
Training on augumented user 2896 17/50 current_auc = 0.5949764521193093
User 2896 AUC after training: 0.5926216640502354
User 2896 does not improve AUC. Reverting changes.
Training on augumented user 87944 18/50 current_auc = 0.5949764521193093
User 87944 AUC after training: 0.5934065934065934
User 87944 does not improve AUC. Reverting changes.
Training on augumented user 26756 19/50 current_auc = 0.5949764521193093
User 26756 AUC after training: 0.5941915227629513
User 26756 does not improve AUC. Reverting changes.
Training on augumented user 64724 20/50 current_auc = 0.5949764521193093
User 64724 AUC after training: 0.5949764521193093
User 64724 does not improve AUC. Reverting changes.
Training on augumented user 16369 21/50 current_auc = 0.5949764521193093
User 16369 AUC after training: 0.5941915227629513
User 16369 does not improve AUC. Reverting changes.
Training on augumented user 15206 22/50 current_auc = 0.5949764521193093
User 15206 AUC after training: 0.5926216640502354
User 15206 does not improve AUC. Reverting changes.
Training on augumented user 766 23/50 current_auc = 0.5949764521193093
User 766 AUC after training: 0.5957613814756672
User 766 improves AUC. Keeping the model.
Training on augumented user 59257 24/50 current_auc = 0.5957613814756672
User 59257 AUC after training: 0.5941915227629513
User 59257 does not improve AUC. Reverting changes.
Training on augumented user 98213 25/50 current_auc = 0.5957613814756672
User 98213 AUC after training: 0.597331240188383
User 98213 improves AUC. Keeping the model.
Training on augumented user 99242 26/50 current_auc = 0.597331240188383
User 99242 AUC after training: 0.597331240188383
User 99242 does not improve AUC. Reverting changes.
Training on augumented user 106623 27/50 current_auc = 0.597331240188383
User 106623 AUC after training: 0.5957613814756672
User 106623 does not improve AUC. Reverting changes.
Training on augumented user 109354 28/50 current_auc = 0.597331240188383
User 109354 AUC after training: 0.5926216640502355
User 109354 does not improve AUC. Reverting changes.
Training on augumented user 51958 29/50 current_auc = 0.597331240188383
User 51958 AUC after training: 0.5941915227629513
User 51958 does not improve AUC. Reverting changes.
Training on augumented user 79396 30/50 current_auc = 0.597331240188383
User 79396 AUC after training: 0.5941915227629513
User 79396 does not improve AUC. Reverting changes.
Training on augumented user 28174 31/50 current_auc = 0.597331240188383
User 28174 AUC after training: 0.5941915227629513
User 28174 does not improve AUC. Reverting changes.
Training on augumented user 92462 32/50 current_auc = 0.597331240188383
User 92462 AUC after training: 0.5957613814756672
User 92462 does not improve AUC. Reverting changes.
Training on augumented user 112572 33/50 current_auc = 0.597331240188383
User 112572 AUC after training: 0.5934065934065934
User 112572 does not improve AUC. Reverting changes.
Training on augumented user 135832 34/50 current_auc = 0.597331240188383
User 135832 AUC after training: 0.5910518053375196
User 135832 does not improve AUC. Reverting changes.
Training on augumented user 22277 35/50 current_auc = 0.597331240188383
User 22277 AUC after training: 0.5989010989010989
User 22277 improves AUC. Keeping the model.
Training on augumented user 47207 36/50 current_auc = 0.5989010989010989
User 47207 AUC after training: 0.6004709576138147
User 47207 improves AUC. Keeping the model.
Training on augumented user 6107 37/50 current_auc = 0.6004709576138147
User 6107 AUC after training: 0.6004709576138147
User 6107 does not improve AUC. Reverting changes.
Training on augumented user 81267 38/50 current_auc = 0.6004709576138147
User 81267 AUC after training: 0.5957613814756672
User 81267 does not improve AUC. Reverting changes.
Training on augumented user 76864 39/50 current_auc = 0.6004709576138147
User 76864 AUC after training: 0.5989010989010989
User 76864 does not improve AUC. Reverting changes.
Training on augumented user 81827 40/50 current_auc = 0.6004709576138147
User 81827 AUC after training: 0.5989010989010989
User 81827 does not improve AUC. Reverting changes.
Training on augumented user 37264 41/50 current_auc = 0.6004709576138147
User 37264 AUC after training: 0.5886970172684458
User 37264 does not improve AUC. Reverting changes.
Training on augumented user 133942 42/50 current_auc = 0.6004709576138147
User 133942 AUC after training: 0.5957613814756672
User 133942 does not improve AUC. Reverting changes.
Training on augumented user 1109 43/50 current_auc = 0.6004709576138147
User 1109 AUC after training: 0.597331240188383
User 1109 does not improve AUC. Reverting changes.
Training on augumented user 39760 44/50 current_auc = 0.6004709576138147
User 39760 AUC after training: 0.5989010989010989
User 39760 does not improve AUC. Reverting changes.
Training on augumented user 112068 45/50 current_auc = 0.6004709576138147
User 112068 AUC after training: 0.6036106750392465
User 112068 improves AUC. Keeping the model.
Training on augumented user 49119 46/50 current_auc = 0.6036106750392465
User 49119 AUC after training: 0.6020408163265306
User 49119 does not improve AUC. Reverting changes.
Training on augumented user 48918 47/50 current_auc = 0.6036106750392465
User 48918 AUC after training: 0.6020408163265305
User 48918 does not improve AUC. Reverting changes.
Training on augumented user 83034 48/50 current_auc = 0.6036106750392465
User 83034 AUC after training: 0.5989010989010989
User 83034 does not improve AUC. Reverting changes.
Training on augumented user 21723 49/50 current_auc = 0.6036106750392465
User 21723 AUC after training: 0.5989010989010989
User 21723 does not improve AUC. Reverting changes.
[2024-12-02 18:54:06.270656] start test user 86066 141/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:54:06.737934] start test user 86066 141/568 recall augumented users by random, augumented_users = [92203, 99418, 26680, 85248, 16998, 107331, 87684, 29288, 112897, 7226, 93600, 8100, 81029, 126133, 13400, 125746, 84030, 25758, 64644, 121676, 367, 62620, 449, 11602, 53301, 52078, 21430, 72604, 134908, 21957, 72792, 19500, 125927, 101220, 110208, 74289, 56083, 47203, 130678, 54963, 8823, 102492, 33355, 96439, 49356, 88729, 135133, 105037, 30138, 97115]
[2024-12-02 18:54:06.754648] user = 86066 Cloud 141/568
[2024-12-02 18:54:06.786474] user = 86066 Local 141/568
[2024-12-02 18:54:07.051947] user = 86066 Local+ 141/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:54:09.893853] user = 86066 MPDA- 141/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6827050997782704
Training on augumented user 92203 0/50 current_auc = 0.6827050997782704
User 92203 AUC after training: 0.6824200190053848
User 92203 does not improve AUC. Reverting changes.
Training on augumented user 99418 1/50 current_auc = 0.6827050997782704
User 99418 AUC after training: 0.6819448843839088
User 99418 does not improve AUC. Reverting changes.
Training on augumented user 26680 2/50 current_auc = 0.6827050997782704
User 26680 AUC after training: 0.6824833702882483
User 26680 does not improve AUC. Reverting changes.
Training on augumented user 85248 3/50 current_auc = 0.6827050997782704
User 85248 AUC after training: 0.6828318023439974
User 85248 improves AUC. Keeping the model.
Training on augumented user 16998 4/50 current_auc = 0.6828318023439974
User 16998 AUC after training: 0.6828318023439975
User 16998 improves AUC. Keeping the model.
Training on augumented user 107331 5/50 current_auc = 0.6828318023439975
User 107331 AUC after training: 0.6813430471967057
User 107331 does not improve AUC. Reverting changes.
Training on augumented user 87684 6/50 current_auc = 0.6828318023439975
User 87684 AUC after training: 0.6828634779854292
User 87684 improves AUC. Keeping the model.
Training on augumented user 29288 7/50 current_auc = 0.6828634779854292
User 29288 AUC after training: 0.6827367754197022
User 29288 does not improve AUC. Reverting changes.
Training on augumented user 112897 8/50 current_auc = 0.6828634779854292
User 112897 AUC after training: 0.6826892619575546
User 112897 does not improve AUC. Reverting changes.
Training on augumented user 7226 9/50 current_auc = 0.6828634779854292
User 7226 AUC after training: 0.6827684510611339
User 7226 does not improve AUC. Reverting changes.
Training on augumented user 93600 10/50 current_auc = 0.6828634779854292
User 93600 AUC after training: 0.6829268292682927
User 93600 improves AUC. Keeping the model.
Training on augumented user 8100 11/50 current_auc = 0.6829268292682927
User 8100 AUC after training: 0.6830535318340196
User 8100 improves AUC. Keeping the model.
Training on augumented user 81029 12/50 current_auc = 0.6830535318340196
User 81029 AUC after training: 0.6831485587583149
User 81029 improves AUC. Keeping the model.
Training on augumented user 126133 13/50 current_auc = 0.6831485587583149
User 126133 AUC after training: 0.6829585049097244
User 126133 does not improve AUC. Reverting changes.
Training on augumented user 13400 14/50 current_auc = 0.6831485587583149
User 13400 AUC after training: 0.6828634779854291
User 13400 does not improve AUC. Reverting changes.
Training on augumented user 125746 15/50 current_auc = 0.6831485587583149
User 125746 AUC after training: 0.683132720937599
User 125746 does not improve AUC. Reverting changes.
Training on augumented user 84030 16/50 current_auc = 0.6831485587583149
User 84030 AUC after training: 0.682768451061134
User 84030 does not improve AUC. Reverting changes.
Training on augumented user 25758 17/50 current_auc = 0.6831485587583149
User 25758 AUC after training: 0.6830218561925879
User 25758 does not improve AUC. Reverting changes.
Training on augumented user 64644 18/50 current_auc = 0.6831485587583149
User 64644 AUC after training: 0.6830852074754514
User 64644 does not improve AUC. Reverting changes.
Training on augumented user 121676 19/50 current_auc = 0.6831485587583149
User 121676 AUC after training: 0.6829901805511561
User 121676 does not improve AUC. Reverting changes.
Training on augumented user 367 20/50 current_auc = 0.6831485587583149
User 367 AUC after training: 0.6828159645232816
User 367 does not improve AUC. Reverting changes.
Training on augumented user 62620 21/50 current_auc = 0.6831485587583149
User 62620 AUC after training: 0.682990180551156
User 62620 does not improve AUC. Reverting changes.
Training on augumented user 449 22/50 current_auc = 0.6831485587583149
User 449 AUC after training: 0.6834336395312004
User 449 improves AUC. Keeping the model.
Training on augumented user 11602 23/50 current_auc = 0.6834336395312004
User 11602 AUC after training: 0.6834019638897687
User 11602 does not improve AUC. Reverting changes.
Training on augumented user 53301 24/50 current_auc = 0.6834336395312004
User 53301 AUC after training: 0.6829268292682927
User 53301 does not improve AUC. Reverting changes.
Training on augumented user 52078 25/50 current_auc = 0.6834336395312004
User 52078 AUC after training: 0.6831485587583148
User 52078 does not improve AUC. Reverting changes.
Training on augumented user 21430 26/50 current_auc = 0.6834336395312004
User 21430 AUC after training: 0.682768451061134
User 21430 does not improve AUC. Reverting changes.
Training on augumented user 72604 27/50 current_auc = 0.6834336395312004
User 72604 AUC after training: 0.6822933164396578
User 72604 does not improve AUC. Reverting changes.
Training on augumented user 134908 28/50 current_auc = 0.6834336395312004
User 134908 AUC after training: 0.6832119100411783
User 134908 does not improve AUC. Reverting changes.
Training on augumented user 21957 29/50 current_auc = 0.6834336395312004
User 21957 AUC after training: 0.6831802343997465
User 21957 does not improve AUC. Reverting changes.
Training on augumented user 72792 30/50 current_auc = 0.6834336395312004
User 72792 AUC after training: 0.6834019638897688
User 72792 does not improve AUC. Reverting changes.
Training on augumented user 19500 31/50 current_auc = 0.6834336395312004
User 19500 AUC after training: 0.683370288248337
User 19500 does not improve AUC. Reverting changes.
Training on augumented user 125927 32/50 current_auc = 0.6834336395312004
User 125927 AUC after training: 0.6832119100411783
User 125927 does not improve AUC. Reverting changes.
Training on augumented user 101220 33/50 current_auc = 0.6834336395312004
User 101220 AUC after training: 0.6831643965790307
User 101220 does not improve AUC. Reverting changes.
Training on augumented user 110208 34/50 current_auc = 0.6834336395312004
User 110208 AUC after training: 0.683496990814064
User 110208 improves AUC. Keeping the model.
Training on augumented user 74289 35/50 current_auc = 0.683496990814064
User 74289 AUC after training: 0.6828001267025658
User 74289 does not improve AUC. Reverting changes.
Training on augumented user 56083 36/50 current_auc = 0.683496990814064
User 56083 AUC after training: 0.6832594235033259
User 56083 does not improve AUC. Reverting changes.
Training on augumented user 47203 37/50 current_auc = 0.683496990814064
User 47203 AUC after training: 0.683370288248337
User 47203 does not improve AUC. Reverting changes.
Training on augumented user 130678 38/50 current_auc = 0.683496990814064
User 130678 AUC after training: 0.6832119100411783
User 130678 does not improve AUC. Reverting changes.
Training on augumented user 54963 39/50 current_auc = 0.683496990814064
User 54963 AUC after training: 0.683370288248337
User 54963 does not improve AUC. Reverting changes.
Training on augumented user 8823 40/50 current_auc = 0.683496990814064
User 8823 AUC after training: 0.6834019638897687
User 8823 does not improve AUC. Reverting changes.
Training on augumented user 102492 41/50 current_auc = 0.683496990814064
User 102492 AUC after training: 0.6832752613240418
User 102492 does not improve AUC. Reverting changes.
Training on augumented user 33355 42/50 current_auc = 0.683496990814064
User 33355 AUC after training: 0.6828951536268609
User 33355 does not improve AUC. Reverting changes.
Training on augumented user 96439 43/50 current_auc = 0.683496990814064
User 96439 AUC after training: 0.6834019638897688
User 96439 does not improve AUC. Reverting changes.
Training on augumented user 49356 44/50 current_auc = 0.683496990814064
User 49356 AUC after training: 0.6835128286347798
User 49356 improves AUC. Keeping the model.
Training on augumented user 88729 45/50 current_auc = 0.6835128286347798
User 88729 AUC after training: 0.6833702882483369
User 88729 does not improve AUC. Reverting changes.
Training on augumented user 135133 46/50 current_auc = 0.6835128286347798
User 135133 AUC after training: 0.6833386126069052
User 135133 does not improve AUC. Reverting changes.
Training on augumented user 105037 47/50 current_auc = 0.6835128286347798
User 105037 AUC after training: 0.6837187203040861
User 105037 improves AUC. Keeping the model.
Training on augumented user 30138 48/50 current_auc = 0.6837187203040861
User 30138 AUC after training: 0.6836553690212226
User 30138 does not improve AUC. Reverting changes.
Training on augumented user 97115 49/50 current_auc = 0.6837187203040861
User 97115 AUC after training: 0.6834969908140639
User 97115 does not improve AUC. Reverting changes.
[2024-12-02 18:54:39.230779] start test user 86110 142/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:54:39.625426] start test user 86110 142/568 recall augumented users by random, augumented_users = [45564, 27955, 133575, 75572, 54658, 6399, 15903, 104942, 4670, 72908, 18654, 67294, 125851, 92009, 131614, 115643, 5808, 5742, 130517, 58699, 119089, 23899, 58241, 56700, 46386, 120980, 64827, 113876, 82968, 118057, 22534, 111652, 56381, 24830, 34766, 131788, 15240, 20537, 23949, 135387, 78016, 114948, 92518, 81673, 37364, 47591, 93262, 33388, 129446, 44341]
[2024-12-02 18:54:39.640345] user = 86110 Cloud 142/568
[2024-12-02 18:54:39.663097] user = 86110 Local 142/568
[2024-12-02 18:54:39.698401] user = 86110 Local+ 142/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:54:42.448715] user = 86110 MPDA- 142/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6819095038434662
Training on augumented user 45564 0/50 current_auc = 0.6819095038434662
User 45564 AUC after training: 0.6822589098532494
User 45564 improves AUC. Keeping the model.
Training on augumented user 27955 1/50 current_auc = 0.6822589098532494
User 27955 AUC after training: 0.6818221523410203
User 27955 does not improve AUC. Reverting changes.
Training on augumented user 133575 2/50 current_auc = 0.6822589098532494
User 133575 AUC after training: 0.6815600978336827
User 133575 does not improve AUC. Reverting changes.
Training on augumented user 75572 3/50 current_auc = 0.6822589098532494
User 75572 AUC after training: 0.6788958770090846
User 75572 does not improve AUC. Reverting changes.
Training on augumented user 54658 4/50 current_auc = 0.6822589098532494
User 54658 AUC after training: 0.6823462613556952
User 54658 improves AUC. Keeping the model.
Training on augumented user 6399 5/50 current_auc = 0.6823462613556952
User 6399 AUC after training: 0.6819968553459119
User 6399 does not improve AUC. Reverting changes.
Training on augumented user 15903 6/50 current_auc = 0.6823462613556952
User 15903 AUC after training: 0.6817348008385744
User 15903 does not improve AUC. Reverting changes.
Training on augumented user 104942 7/50 current_auc = 0.6823462613556952
User 104942 AUC after training: 0.6823462613556954
User 104942 improves AUC. Keeping the model.
Training on augumented user 4670 8/50 current_auc = 0.6823462613556954
User 4670 AUC after training: 0.6824336128581412
User 4670 improves AUC. Keeping the model.
Training on augumented user 72908 9/50 current_auc = 0.6824336128581412
User 72908 AUC after training: 0.6822589098532494
User 72908 does not improve AUC. Reverting changes.
Training on augumented user 18654 10/50 current_auc = 0.6824336128581412
User 18654 AUC after training: 0.6824336128581412
User 18654 does not improve AUC. Reverting changes.
Training on augumented user 67294 11/50 current_auc = 0.6824336128581412
User 67294 AUC after training: 0.6825209643605871
User 67294 improves AUC. Keeping the model.
Training on augumented user 125851 12/50 current_auc = 0.6825209643605871
User 125851 AUC after training: 0.6828703703703705
User 125851 improves AUC. Keeping the model.
Training on augumented user 92009 13/50 current_auc = 0.6828703703703705
User 92009 AUC after training: 0.6825209643605871
User 92009 does not improve AUC. Reverting changes.
Training on augumented user 131614 14/50 current_auc = 0.6828703703703705
User 131614 AUC after training: 0.6828703703703705
User 131614 does not improve AUC. Reverting changes.
Training on augumented user 115643 15/50 current_auc = 0.6828703703703705
User 115643 AUC after training: 0.6824772886093642
User 115643 does not improve AUC. Reverting changes.
Training on augumented user 5808 16/50 current_auc = 0.6828703703703705
User 5808 AUC after training: 0.6821715583508037
User 5808 does not improve AUC. Reverting changes.
Training on augumented user 5742 17/50 current_auc = 0.6828703703703705
User 5742 AUC after training: 0.6819095038434662
User 5742 does not improve AUC. Reverting changes.
Training on augumented user 130517 18/50 current_auc = 0.6828703703703705
User 130517 AUC after training: 0.6817348008385744
User 130517 does not improve AUC. Reverting changes.
Training on augumented user 58699 19/50 current_auc = 0.6828703703703705
User 58699 AUC after training: 0.6826083158630328
User 58699 does not improve AUC. Reverting changes.
Training on augumented user 119089 20/50 current_auc = 0.6828703703703705
User 119089 AUC after training: 0.6825209643605871
User 119089 does not improve AUC. Reverting changes.
Training on augumented user 23899 21/50 current_auc = 0.6828703703703705
User 23899 AUC after training: 0.6823462613556954
User 23899 does not improve AUC. Reverting changes.
Training on augumented user 58241 22/50 current_auc = 0.6828703703703705
User 58241 AUC after training: 0.6822589098532496
User 58241 does not improve AUC. Reverting changes.
Training on augumented user 56700 23/50 current_auc = 0.6828703703703705
User 56700 AUC after training: 0.682520964360587
User 56700 does not improve AUC. Reverting changes.
Training on augumented user 46386 24/50 current_auc = 0.6828703703703705
User 46386 AUC after training: 0.6827830188679245
User 46386 does not improve AUC. Reverting changes.
Training on augumented user 120980 25/50 current_auc = 0.6828703703703705
User 120980 AUC after training: 0.6824772886093641
User 120980 does not improve AUC. Reverting changes.
Training on augumented user 64827 26/50 current_auc = 0.6828703703703705
User 64827 AUC after training: 0.683132424877708
User 64827 improves AUC. Keeping the model.
Training on augumented user 113876 27/50 current_auc = 0.683132424877708
User 113876 AUC after training: 0.6824336128581412
User 113876 does not improve AUC. Reverting changes.
Training on augumented user 82968 28/50 current_auc = 0.683132424877708
User 82968 AUC after training: 0.681953179594689
User 82968 does not improve AUC. Reverting changes.
Training on augumented user 118057 29/50 current_auc = 0.683132424877708
User 118057 AUC after training: 0.6820405310971349
User 118057 does not improve AUC. Reverting changes.
Training on augumented user 22534 30/50 current_auc = 0.683132424877708
User 22534 AUC after training: 0.6828703703703705
User 22534 does not improve AUC. Reverting changes.
Training on augumented user 111652 31/50 current_auc = 0.683132424877708
User 111652 AUC after training: 0.6827830188679245
User 111652 does not improve AUC. Reverting changes.
Training on augumented user 56381 32/50 current_auc = 0.683132424877708
User 56381 AUC after training: 0.6823462613556954
User 56381 does not improve AUC. Reverting changes.
Training on augumented user 24830 33/50 current_auc = 0.683132424877708
User 24830 AUC after training: 0.6850104821802935
User 24830 improves AUC. Keeping the model.
Training on augumented user 34766 34/50 current_auc = 0.6850104821802935
User 34766 AUC after training: 0.685272536687631
User 34766 improves AUC. Keeping the model.
Training on augumented user 131788 35/50 current_auc = 0.685272536687631
User 131788 AUC after training: 0.6844863731656183
User 131788 does not improve AUC. Reverting changes.
Training on augumented user 15240 36/50 current_auc = 0.685272536687631
User 15240 AUC after training: 0.6844863731656183
User 15240 does not improve AUC. Reverting changes.
Training on augumented user 20537 37/50 current_auc = 0.685272536687631
User 20537 AUC after training: 0.6842243186582809
User 20537 does not improve AUC. Reverting changes.
Training on augumented user 23949 38/50 current_auc = 0.685272536687631
User 23949 AUC after training: 0.684748427672956
User 23949 does not improve AUC. Reverting changes.
Training on augumented user 135387 39/50 current_auc = 0.685272536687631
User 135387 AUC after training: 0.685272536687631
User 135387 does not improve AUC. Reverting changes.
Training on augumented user 78016 40/50 current_auc = 0.685272536687631
User 78016 AUC after training: 0.6850104821802935
User 78016 does not improve AUC. Reverting changes.
Training on augumented user 114948 41/50 current_auc = 0.685272536687631
User 114948 AUC after training: 0.6845300489168413
User 114948 does not improve AUC. Reverting changes.
Training on augumented user 92518 42/50 current_auc = 0.685272536687631
User 92518 AUC after training: 0.6839622641509434
User 92518 does not improve AUC. Reverting changes.
Training on augumented user 81673 43/50 current_auc = 0.685272536687631
User 81673 AUC after training: 0.6845737246680643
User 81673 does not improve AUC. Reverting changes.
Training on augumented user 37364 44/50 current_auc = 0.685272536687631
User 37364 AUC after training: 0.6848357791754018
User 37364 does not improve AUC. Reverting changes.
Training on augumented user 47591 45/50 current_auc = 0.685272536687631
User 47591 AUC after training: 0.6845737246680643
User 47591 does not improve AUC. Reverting changes.
Training on augumented user 93262 46/50 current_auc = 0.685272536687631
User 93262 AUC after training: 0.6840496156533892
User 93262 does not improve AUC. Reverting changes.
Training on augumented user 33388 47/50 current_auc = 0.685272536687631
User 33388 AUC after training: 0.6853598881900769
User 33388 improves AUC. Keeping the model.
Training on augumented user 129446 48/50 current_auc = 0.6853598881900769
User 129446 AUC after training: 0.6844426974143955
User 129446 does not improve AUC. Reverting changes.
Training on augumented user 44341 49/50 current_auc = 0.6853598881900769
User 44341 AUC after training: 0.6854035639412998
User 44341 improves AUC. Keeping the model.
[2024-12-02 18:55:11.217227] start test user 86111 143/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:55:11.682410] start test user 86111 143/568 recall augumented users by random, augumented_users = [133600, 12011, 62302, 112627, 665, 49808, 46422, 52126, 27032, 14937, 54498, 114477, 76245, 129230, 77895, 108758, 30875, 20698, 102816, 7298, 111168, 36666, 59524, 81893, 17369, 35077, 106670, 84352, 103745, 20224, 29457, 59256, 88666, 69127, 110969, 50372, 20616, 58341, 5179, 64680, 40028, 17352, 56113, 136897, 128366, 91989, 80907, 59064, 119179, 21190]
[2024-12-02 18:55:11.696589] user = 86111 Cloud 143/568
[2024-12-02 18:55:11.707113] user = 86111 Local 143/568
[2024-12-02 18:55:11.784402] user = 86111 Local+ 143/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:55:14.588415] user = 86111 MPDA- 143/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 133600 0/50 current_auc = 1.0
User 133600 AUC after training: 1.0
User 133600 does not improve AUC. Reverting changes.
Training on augumented user 12011 1/50 current_auc = 1.0
User 12011 AUC after training: 1.0
User 12011 does not improve AUC. Reverting changes.
Training on augumented user 62302 2/50 current_auc = 1.0
User 62302 AUC after training: 1.0
User 62302 does not improve AUC. Reverting changes.
Training on augumented user 112627 3/50 current_auc = 1.0
User 112627 AUC after training: 1.0
User 112627 does not improve AUC. Reverting changes.
Training on augumented user 665 4/50 current_auc = 1.0
User 665 AUC after training: 1.0
User 665 does not improve AUC. Reverting changes.
Training on augumented user 49808 5/50 current_auc = 1.0
User 49808 AUC after training: 1.0
User 49808 does not improve AUC. Reverting changes.
Training on augumented user 46422 6/50 current_auc = 1.0
User 46422 AUC after training: 1.0
User 46422 does not improve AUC. Reverting changes.
Training on augumented user 52126 7/50 current_auc = 1.0
User 52126 AUC after training: 1.0
User 52126 does not improve AUC. Reverting changes.
Training on augumented user 27032 8/50 current_auc = 1.0
User 27032 AUC after training: 1.0
User 27032 does not improve AUC. Reverting changes.
Training on augumented user 14937 9/50 current_auc = 1.0
User 14937 AUC after training: 1.0
User 14937 does not improve AUC. Reverting changes.
Training on augumented user 54498 10/50 current_auc = 1.0
User 54498 AUC after training: 1.0
User 54498 does not improve AUC. Reverting changes.
Training on augumented user 114477 11/50 current_auc = 1.0
User 114477 AUC after training: 1.0
User 114477 does not improve AUC. Reverting changes.
Training on augumented user 76245 12/50 current_auc = 1.0
User 76245 AUC after training: 1.0
User 76245 does not improve AUC. Reverting changes.
Training on augumented user 129230 13/50 current_auc = 1.0
User 129230 AUC after training: 1.0
User 129230 does not improve AUC. Reverting changes.
Training on augumented user 77895 14/50 current_auc = 1.0
User 77895 AUC after training: 1.0
User 77895 does not improve AUC. Reverting changes.
Training on augumented user 108758 15/50 current_auc = 1.0
User 108758 AUC after training: 1.0
User 108758 does not improve AUC. Reverting changes.
Training on augumented user 30875 16/50 current_auc = 1.0
User 30875 AUC after training: 1.0
User 30875 does not improve AUC. Reverting changes.
Training on augumented user 20698 17/50 current_auc = 1.0
User 20698 AUC after training: 1.0
User 20698 does not improve AUC. Reverting changes.
Training on augumented user 102816 18/50 current_auc = 1.0
User 102816 AUC after training: 1.0
User 102816 does not improve AUC. Reverting changes.
Training on augumented user 7298 19/50 current_auc = 1.0
User 7298 AUC after training: 1.0
User 7298 does not improve AUC. Reverting changes.
Training on augumented user 111168 20/50 current_auc = 1.0
User 111168 AUC after training: 1.0
User 111168 does not improve AUC. Reverting changes.
Training on augumented user 36666 21/50 current_auc = 1.0
User 36666 AUC after training: 1.0
User 36666 does not improve AUC. Reverting changes.
Training on augumented user 59524 22/50 current_auc = 1.0
User 59524 AUC after training: 1.0
User 59524 does not improve AUC. Reverting changes.
Training on augumented user 81893 23/50 current_auc = 1.0
User 81893 AUC after training: 1.0
User 81893 does not improve AUC. Reverting changes.
Training on augumented user 17369 24/50 current_auc = 1.0
User 17369 AUC after training: 1.0
User 17369 does not improve AUC. Reverting changes.
Training on augumented user 35077 25/50 current_auc = 1.0
User 35077 AUC after training: 1.0
User 35077 does not improve AUC. Reverting changes.
Training on augumented user 106670 26/50 current_auc = 1.0
User 106670 AUC after training: 1.0
User 106670 does not improve AUC. Reverting changes.
Training on augumented user 84352 27/50 current_auc = 1.0
User 84352 AUC after training: 1.0
User 84352 does not improve AUC. Reverting changes.
Training on augumented user 103745 28/50 current_auc = 1.0
User 103745 AUC after training: 1.0
User 103745 does not improve AUC. Reverting changes.
Training on augumented user 20224 29/50 current_auc = 1.0
User 20224 AUC after training: 1.0
User 20224 does not improve AUC. Reverting changes.
Training on augumented user 29457 30/50 current_auc = 1.0
User 29457 AUC after training: 1.0
User 29457 does not improve AUC. Reverting changes.
Training on augumented user 59256 31/50 current_auc = 1.0
User 59256 AUC after training: 1.0
User 59256 does not improve AUC. Reverting changes.
Training on augumented user 88666 32/50 current_auc = 1.0
User 88666 AUC after training: 1.0
User 88666 does not improve AUC. Reverting changes.
Training on augumented user 69127 33/50 current_auc = 1.0
User 69127 AUC after training: 1.0
User 69127 does not improve AUC. Reverting changes.
Training on augumented user 110969 34/50 current_auc = 1.0
User 110969 AUC after training: 1.0
User 110969 does not improve AUC. Reverting changes.
Training on augumented user 50372 35/50 current_auc = 1.0
User 50372 AUC after training: 1.0
User 50372 does not improve AUC. Reverting changes.
Training on augumented user 20616 36/50 current_auc = 1.0
User 20616 AUC after training: 1.0
User 20616 does not improve AUC. Reverting changes.
Training on augumented user 58341 37/50 current_auc = 1.0
User 58341 AUC after training: 1.0
User 58341 does not improve AUC. Reverting changes.
Training on augumented user 5179 38/50 current_auc = 1.0
User 5179 AUC after training: 1.0
User 5179 does not improve AUC. Reverting changes.
Training on augumented user 64680 39/50 current_auc = 1.0
User 64680 AUC after training: 1.0
User 64680 does not improve AUC. Reverting changes.
Training on augumented user 40028 40/50 current_auc = 1.0
User 40028 AUC after training: 1.0
User 40028 does not improve AUC. Reverting changes.
Training on augumented user 17352 41/50 current_auc = 1.0
User 17352 AUC after training: 1.0
User 17352 does not improve AUC. Reverting changes.
Training on augumented user 56113 42/50 current_auc = 1.0
User 56113 AUC after training: 1.0
User 56113 does not improve AUC. Reverting changes.
Training on augumented user 136897 43/50 current_auc = 1.0
User 136897 AUC after training: 1.0
User 136897 does not improve AUC. Reverting changes.
Training on augumented user 128366 44/50 current_auc = 1.0
User 128366 AUC after training: 1.0
User 128366 does not improve AUC. Reverting changes.
Training on augumented user 91989 45/50 current_auc = 1.0
User 91989 AUC after training: 1.0
User 91989 does not improve AUC. Reverting changes.
Training on augumented user 80907 46/50 current_auc = 1.0
User 80907 AUC after training: 1.0
User 80907 does not improve AUC. Reverting changes.
Training on augumented user 59064 47/50 current_auc = 1.0
User 59064 AUC after training: 1.0
User 59064 does not improve AUC. Reverting changes.
Training on augumented user 119179 48/50 current_auc = 1.0
User 119179 AUC after training: 1.0
User 119179 does not improve AUC. Reverting changes.
Training on augumented user 21190 49/50 current_auc = 1.0
User 21190 AUC after training: 1.0
User 21190 does not improve AUC. Reverting changes.
[2024-12-02 18:55:41.280534] start test user 86156 144/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:55:41.968002] start test user 86156 144/568 recall augumented users by random, augumented_users = [89442, 29438, 59952, 12550, 42954, 65209, 20713, 109321, 129879, 77704, 23659, 126181, 55693, 87742, 105242, 25573, 104553, 87003, 15044, 15669, 32243, 23150, 83385, 106356, 88483, 39410, 41298, 107384, 100665, 118531, 68800, 109632, 120591, 137604, 96163, 120593, 10818, 3573, 27285, 84860, 100287, 87847, 104028, 135447, 10149, 116509, 3230, 4290, 62898, 56155]
[2024-12-02 18:55:42.014280] user = 86156 Cloud 144/568
[2024-12-02 18:55:42.063898] user = 86156 Local 144/568
[2024-12-02 18:55:42.284685] user = 86156 Local+ 144/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:55:45.301620] user = 86156 MPDA- 144/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6038787878787879
Training on augumented user 89442 0/50 current_auc = 0.6038787878787879
User 89442 AUC after training: 0.6051717171717172
User 89442 improves AUC. Keeping the model.
Training on augumented user 29438 1/50 current_auc = 0.6051717171717172
User 29438 AUC after training: 0.6046868686868686
User 29438 does not improve AUC. Reverting changes.
Training on augumented user 59952 2/50 current_auc = 0.6051717171717172
User 59952 AUC after training: 0.6071919191919192
User 59952 improves AUC. Keeping the model.
Training on augumented user 12550 3/50 current_auc = 0.6071919191919192
User 12550 AUC after training: 0.605010101010101
User 12550 does not improve AUC. Reverting changes.
Training on augumented user 42954 4/50 current_auc = 0.6071919191919192
User 42954 AUC after training: 0.606060606060606
User 42954 does not improve AUC. Reverting changes.
Training on augumented user 65209 5/50 current_auc = 0.6071919191919192
User 65209 AUC after training: 0.6054141414141414
User 65209 does not improve AUC. Reverting changes.
Training on augumented user 20713 6/50 current_auc = 0.6071919191919192
User 20713 AUC after training: 0.6036363636363636
User 20713 does not improve AUC. Reverting changes.
Training on augumented user 109321 7/50 current_auc = 0.6071919191919192
User 109321 AUC after training: 0.6060606060606061
User 109321 does not improve AUC. Reverting changes.
Training on augumented user 129879 8/50 current_auc = 0.6071919191919192
User 129879 AUC after training: 0.6061414141414141
User 129879 does not improve AUC. Reverting changes.
Training on augumented user 77704 9/50 current_auc = 0.6071919191919192
User 77704 AUC after training: 0.6054141414141414
User 77704 does not improve AUC. Reverting changes.
Training on augumented user 23659 10/50 current_auc = 0.6071919191919192
User 23659 AUC after training: 0.6063030303030303
User 23659 does not improve AUC. Reverting changes.
Training on augumented user 126181 11/50 current_auc = 0.6071919191919192
User 126181 AUC after training: 0.6062222222222222
User 126181 does not improve AUC. Reverting changes.
Training on augumented user 55693 12/50 current_auc = 0.6071919191919192
User 55693 AUC after training: 0.6047676767676768
User 55693 does not improve AUC. Reverting changes.
Training on augumented user 87742 13/50 current_auc = 0.6071919191919192
User 87742 AUC after training: 0.6036363636363637
User 87742 does not improve AUC. Reverting changes.
Training on augumented user 105242 14/50 current_auc = 0.6071919191919192
User 105242 AUC after training: 0.6049292929292929
User 105242 does not improve AUC. Reverting changes.
Training on augumented user 25573 15/50 current_auc = 0.6071919191919192
User 25573 AUC after training: 0.6068686868686869
User 25573 does not improve AUC. Reverting changes.
Training on augumented user 104553 16/50 current_auc = 0.6071919191919192
User 104553 AUC after training: 0.6061414141414141
User 104553 does not improve AUC. Reverting changes.
Training on augumented user 87003 17/50 current_auc = 0.6071919191919192
User 87003 AUC after training: 0.6054141414141414
User 87003 does not improve AUC. Reverting changes.
Training on augumented user 15044 18/50 current_auc = 0.6071919191919192
User 15044 AUC after training: 0.6053333333333333
User 15044 does not improve AUC. Reverting changes.
Training on augumented user 15669 19/50 current_auc = 0.6071919191919192
User 15669 AUC after training: 0.605010101010101
User 15669 does not improve AUC. Reverting changes.
Training on augumented user 32243 20/50 current_auc = 0.6071919191919192
User 32243 AUC after training: 0.6045252525252525
User 32243 does not improve AUC. Reverting changes.
Training on augumented user 23150 21/50 current_auc = 0.6071919191919192
User 23150 AUC after training: 0.602020202020202
User 23150 does not improve AUC. Reverting changes.
Training on augumented user 83385 22/50 current_auc = 0.6071919191919192
User 83385 AUC after training: 0.606868686868687
User 83385 does not improve AUC. Reverting changes.
Training on augumented user 106356 23/50 current_auc = 0.6071919191919192
User 106356 AUC after training: 0.6067878787878788
User 106356 does not improve AUC. Reverting changes.
Training on augumented user 88483 24/50 current_auc = 0.6071919191919192
User 88483 AUC after training: 0.606060606060606
User 88483 does not improve AUC. Reverting changes.
Training on augumented user 39410 25/50 current_auc = 0.6071919191919192
User 39410 AUC after training: 0.6064646464646465
User 39410 does not improve AUC. Reverting changes.
Training on augumented user 41298 26/50 current_auc = 0.6071919191919192
User 41298 AUC after training: 0.6047676767676768
User 41298 does not improve AUC. Reverting changes.
Training on augumented user 107384 27/50 current_auc = 0.6071919191919192
User 107384 AUC after training: 0.6038787878787879
User 107384 does not improve AUC. Reverting changes.
Training on augumented user 100665 28/50 current_auc = 0.6071919191919192
User 100665 AUC after training: 0.6057373737373737
User 100665 does not improve AUC. Reverting changes.
Training on augumented user 118531 29/50 current_auc = 0.6071919191919192
User 118531 AUC after training: 0.6069494949494949
User 118531 does not improve AUC. Reverting changes.
Training on augumented user 68800 30/50 current_auc = 0.6071919191919192
User 68800 AUC after training: 0.6041212121212122
User 68800 does not improve AUC. Reverting changes.
Training on augumented user 109632 31/50 current_auc = 0.6071919191919192
User 109632 AUC after training: 0.6053333333333333
User 109632 does not improve AUC. Reverting changes.
Training on augumented user 120591 32/50 current_auc = 0.6071919191919192
User 120591 AUC after training: 0.6061414141414141
User 120591 does not improve AUC. Reverting changes.
Training on augumented user 137604 33/50 current_auc = 0.6071919191919192
User 137604 AUC after training: 0.6055757575757577
User 137604 does not improve AUC. Reverting changes.
Training on augumented user 96163 34/50 current_auc = 0.6071919191919192
User 96163 AUC after training: 0.6056565656565657
User 96163 does not improve AUC. Reverting changes.
Training on augumented user 120593 35/50 current_auc = 0.6071919191919192
User 120593 AUC after training: 0.6053333333333333
User 120593 does not improve AUC. Reverting changes.
Training on augumented user 10818 36/50 current_auc = 0.6071919191919192
User 10818 AUC after training: 0.6056565656565657
User 10818 does not improve AUC. Reverting changes.
Training on augumented user 3573 37/50 current_auc = 0.6071919191919192
User 3573 AUC after training: 0.6031515151515151
User 3573 does not improve AUC. Reverting changes.
Training on augumented user 27285 38/50 current_auc = 0.6071919191919192
User 27285 AUC after training: 0.6056565656565656
User 27285 does not improve AUC. Reverting changes.
Training on augumented user 84860 39/50 current_auc = 0.6071919191919192
User 84860 AUC after training: 0.6063838383838384
User 84860 does not improve AUC. Reverting changes.
Training on augumented user 100287 40/50 current_auc = 0.6071919191919192
User 100287 AUC after training: 0.6056565656565657
User 100287 does not improve AUC. Reverting changes.
Training on augumented user 87847 41/50 current_auc = 0.6071919191919192
User 87847 AUC after training: 0.607030303030303
User 87847 does not improve AUC. Reverting changes.
Training on augumented user 104028 42/50 current_auc = 0.6071919191919192
User 104028 AUC after training: 0.6067878787878788
User 104028 does not improve AUC. Reverting changes.
Training on augumented user 135447 43/50 current_auc = 0.6071919191919192
User 135447 AUC after training: 0.6047676767676768
User 135447 does not improve AUC. Reverting changes.
Training on augumented user 10149 44/50 current_auc = 0.6071919191919192
User 10149 AUC after training: 0.6022626262626263
User 10149 does not improve AUC. Reverting changes.
Training on augumented user 116509 45/50 current_auc = 0.6071919191919192
User 116509 AUC after training: 0.6058989898989899
User 116509 does not improve AUC. Reverting changes.
Training on augumented user 3230 46/50 current_auc = 0.6071919191919192
User 3230 AUC after training: 0.6052525252525253
User 3230 does not improve AUC. Reverting changes.
Training on augumented user 4290 47/50 current_auc = 0.6071919191919192
User 4290 AUC after training: 0.6035555555555555
User 4290 does not improve AUC. Reverting changes.
Training on augumented user 62898 48/50 current_auc = 0.6071919191919192
User 62898 AUC after training: 0.6050909090909091
User 62898 does not improve AUC. Reverting changes.
Training on augumented user 56155 49/50 current_auc = 0.6071919191919192
User 56155 AUC after training: 0.6037171717171717
User 56155 does not improve AUC. Reverting changes.
[2024-12-02 18:56:17.354045] start test user 86169 145/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:56:17.911877] start test user 86169 145/568 recall augumented users by random, augumented_users = [99309, 102869, 77377, 104274, 55193, 53418, 7586, 5462, 27327, 109562, 60478, 70560, 113733, 60627, 109556, 38698, 26142, 69017, 122044, 125007, 57307, 116795, 126975, 134587, 22209, 72145, 93344, 24689, 16484, 128025, 55283, 8575, 17832, 137381, 105502, 128193, 77486, 119141, 134904, 101782, 43247, 82017, 35174, 101437, 53833, 14788, 36389, 7975, 132732, 71779]
[2024-12-02 18:56:17.927039] user = 86169 Cloud 145/568
[2024-12-02 18:56:17.942450] user = 86169 Local 145/568
[2024-12-02 18:56:18.115103] user = 86169 Local+ 145/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:56:20.421052] user = 86169 MPDA- 145/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6286218190980096
Training on augumented user 99309 0/50 current_auc = 0.6286218190980096
User 99309 AUC after training: 0.6278659611992945
User 99309 does not improve AUC. Reverting changes.
Training on augumented user 102869 1/50 current_auc = 0.6286218190980096
User 102869 AUC after training: 0.6273620559334845
User 102869 does not improve AUC. Reverting changes.
Training on augumented user 77377 2/50 current_auc = 0.6286218190980096
User 77377 AUC after training: 0.6273620559334845
User 77377 does not improve AUC. Reverting changes.
Training on augumented user 104274 3/50 current_auc = 0.6286218190980096
User 104274 AUC after training: 0.6283698664651045
User 104274 does not improve AUC. Reverting changes.
Training on augumented user 55193 4/50 current_auc = 0.6286218190980096
User 55193 AUC after training: 0.6278659611992945
User 55193 does not improve AUC. Reverting changes.
Training on augumented user 53418 5/50 current_auc = 0.6286218190980096
User 53418 AUC after training: 0.6281179138321995
User 53418 does not improve AUC. Reverting changes.
Training on augumented user 7586 6/50 current_auc = 0.6286218190980096
User 7586 AUC after training: 0.6283698664651045
User 7586 does not improve AUC. Reverting changes.
Training on augumented user 5462 7/50 current_auc = 0.6286218190980096
User 5462 AUC after training: 0.6281179138321995
User 5462 does not improve AUC. Reverting changes.
Training on augumented user 27327 8/50 current_auc = 0.6286218190980096
User 27327 AUC after training: 0.6286218190980095
User 27327 does not improve AUC. Reverting changes.
Training on augumented user 109562 9/50 current_auc = 0.6286218190980096
User 109562 AUC after training: 0.6273620559334845
User 109562 does not improve AUC. Reverting changes.
Training on augumented user 60478 10/50 current_auc = 0.6286218190980096
User 60478 AUC after training: 0.6276140085663895
User 60478 does not improve AUC. Reverting changes.
Training on augumented user 70560 11/50 current_auc = 0.6286218190980096
User 70560 AUC after training: 0.6283698664651045
User 70560 does not improve AUC. Reverting changes.
Training on augumented user 113733 12/50 current_auc = 0.6286218190980096
User 113733 AUC after training: 0.6278659611992945
User 113733 does not improve AUC. Reverting changes.
Training on augumented user 60627 13/50 current_auc = 0.6286218190980096
User 60627 AUC after training: 0.6263542454018645
User 60627 does not improve AUC. Reverting changes.
Training on augumented user 109556 14/50 current_auc = 0.6286218190980096
User 109556 AUC after training: 0.6278659611992945
User 109556 does not improve AUC. Reverting changes.
Training on augumented user 38698 15/50 current_auc = 0.6286218190980096
User 38698 AUC after training: 0.6278659611992945
User 38698 does not improve AUC. Reverting changes.
Training on augumented user 26142 16/50 current_auc = 0.6286218190980096
User 26142 AUC after training: 0.6276140085663895
User 26142 does not improve AUC. Reverting changes.
Training on augumented user 69017 17/50 current_auc = 0.6286218190980096
User 69017 AUC after training: 0.6281179138321995
User 69017 does not improve AUC. Reverting changes.
Training on augumented user 122044 18/50 current_auc = 0.6286218190980096
User 122044 AUC after training: 0.6238347190728143
User 122044 does not improve AUC. Reverting changes.
Training on augumented user 125007 19/50 current_auc = 0.6286218190980096
User 125007 AUC after training: 0.6250944822373394
User 125007 does not improve AUC. Reverting changes.
Training on augumented user 57307 20/50 current_auc = 0.6286218190980096
User 57307 AUC after training: 0.6278659611992945
User 57307 does not improve AUC. Reverting changes.
Training on augumented user 116795 21/50 current_auc = 0.6286218190980096
User 116795 AUC after training: 0.6273620559334845
User 116795 does not improve AUC. Reverting changes.
Training on augumented user 126975 22/50 current_auc = 0.6286218190980096
User 126975 AUC after training: 0.6276140085663895
User 126975 does not improve AUC. Reverting changes.
Training on augumented user 134587 23/50 current_auc = 0.6286218190980096
User 134587 AUC after training: 0.6276140085663895
User 134587 does not improve AUC. Reverting changes.
Training on augumented user 22209 24/50 current_auc = 0.6286218190980096
User 22209 AUC after training: 0.6278659611992945
User 22209 does not improve AUC. Reverting changes.
Training on augumented user 72145 25/50 current_auc = 0.6286218190980096
User 72145 AUC after training: 0.6286218190980095
User 72145 does not improve AUC. Reverting changes.
Training on augumented user 93344 26/50 current_auc = 0.6286218190980096
User 93344 AUC after training: 0.6288737717309146
User 93344 improves AUC. Keeping the model.
Training on augumented user 24689 27/50 current_auc = 0.6288737717309146
User 24689 AUC after training: 0.6286218190980096
User 24689 does not improve AUC. Reverting changes.
Training on augumented user 16484 28/50 current_auc = 0.6288737717309146
User 16484 AUC after training: 0.6283698664651045
User 16484 does not improve AUC. Reverting changes.
Training on augumented user 128025 29/50 current_auc = 0.6288737717309146
User 128025 AUC after training: 0.6276140085663895
User 128025 does not improve AUC. Reverting changes.
Training on augumented user 55283 30/50 current_auc = 0.6288737717309146
User 55283 AUC after training: 0.6283698664651045
User 55283 does not improve AUC. Reverting changes.
Training on augumented user 8575 31/50 current_auc = 0.6288737717309146
User 8575 AUC after training: 0.6268581506676745
User 8575 does not improve AUC. Reverting changes.
Training on augumented user 17832 32/50 current_auc = 0.6288737717309146
User 17832 AUC after training: 0.6271101033005795
User 17832 does not improve AUC. Reverting changes.
Training on augumented user 137381 33/50 current_auc = 0.6288737717309146
User 137381 AUC after training: 0.6293776769967246
User 137381 improves AUC. Keeping the model.
Training on augumented user 105502 34/50 current_auc = 0.6293776769967246
User 105502 AUC after training: 0.6296296296296297
User 105502 improves AUC. Keeping the model.
Training on augumented user 128193 35/50 current_auc = 0.6296296296296297
User 128193 AUC after training: 0.6288737717309145
User 128193 does not improve AUC. Reverting changes.
Training on augumented user 77486 36/50 current_auc = 0.6296296296296297
User 77486 AUC after training: 0.6283698664651045
User 77486 does not improve AUC. Reverting changes.
Training on augumented user 119141 37/50 current_auc = 0.6296296296296297
User 119141 AUC after training: 0.6276140085663895
User 119141 does not improve AUC. Reverting changes.
Training on augumented user 134904 38/50 current_auc = 0.6296296296296297
User 134904 AUC after training: 0.6291257243638195
User 134904 does not improve AUC. Reverting changes.
Training on augumented user 101782 39/50 current_auc = 0.6296296296296297
User 101782 AUC after training: 0.6291257243638195
User 101782 does not improve AUC. Reverting changes.
Training on augumented user 43247 40/50 current_auc = 0.6296296296296297
User 43247 AUC after training: 0.6293776769967245
User 43247 does not improve AUC. Reverting changes.
Training on augumented user 82017 41/50 current_auc = 0.6296296296296297
User 82017 AUC after training: 0.6293776769967246
User 82017 does not improve AUC. Reverting changes.
Training on augumented user 35174 42/50 current_auc = 0.6296296296296297
User 35174 AUC after training: 0.6278659611992945
User 35174 does not improve AUC. Reverting changes.
Training on augumented user 101437 43/50 current_auc = 0.6296296296296297
User 101437 AUC after training: 0.6286218190980095
User 101437 does not improve AUC. Reverting changes.
Training on augumented user 53833 44/50 current_auc = 0.6296296296296297
User 53833 AUC after training: 0.6286218190980095
User 53833 does not improve AUC. Reverting changes.
Training on augumented user 14788 45/50 current_auc = 0.6296296296296297
User 14788 AUC after training: 0.6291257243638196
User 14788 does not improve AUC. Reverting changes.
Training on augumented user 36389 46/50 current_auc = 0.6296296296296297
User 36389 AUC after training: 0.6288737717309145
User 36389 does not improve AUC. Reverting changes.
Training on augumented user 7975 47/50 current_auc = 0.6296296296296297
User 7975 AUC after training: 0.6281179138321995
User 7975 does not improve AUC. Reverting changes.
Training on augumented user 132732 48/50 current_auc = 0.6296296296296297
User 132732 AUC after training: 0.6283698664651046
User 132732 does not improve AUC. Reverting changes.
Training on augumented user 71779 49/50 current_auc = 0.6296296296296297
User 71779 AUC after training: 0.6288737717309145
User 71779 does not improve AUC. Reverting changes.
[2024-12-02 18:56:51.616420] start test user 86214 146/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:56:52.096419] start test user 86214 146/568 recall augumented users by random, augumented_users = [100106, 39145, 46481, 64476, 4213, 102860, 137625, 91477, 37284, 100505, 4211, 110112, 9065, 37337, 18898, 30922, 75917, 21426, 129503, 130413, 74630, 119322, 13577, 50944, 54754, 135441, 117905, 52465, 37429, 65891, 116733, 17515, 50673, 5872, 74229, 126184, 127597, 123480, 99697, 7156, 96532, 75101, 73224, 52398, 114725, 87094, 685, 111731, 126355, 68004]
[2024-12-02 18:56:52.112591] user = 86214 Cloud 146/568
[2024-12-02 18:56:52.132091] user = 86214 Local 146/568
[2024-12-02 18:56:52.230960] user = 86214 Local+ 146/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:56:54.505853] user = 86214 MPDA- 146/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7066971080669711
Training on augumented user 100106 0/50 current_auc = 0.7066971080669711
User 100106 AUC after training: 0.7059360730593608
User 100106 does not improve AUC. Reverting changes.
Training on augumented user 39145 1/50 current_auc = 0.7066971080669711
User 39145 AUC after training: 0.7063926940639269
User 39145 does not improve AUC. Reverting changes.
Training on augumented user 46481 2/50 current_auc = 0.7066971080669711
User 46481 AUC after training: 0.7056316590563165
User 46481 does not improve AUC. Reverting changes.
Training on augumented user 64476 3/50 current_auc = 0.7066971080669711
User 64476 AUC after training: 0.7063926940639269
User 64476 does not improve AUC. Reverting changes.
Training on augumented user 4213 4/50 current_auc = 0.7066971080669711
User 4213 AUC after training: 0.7066971080669711
User 4213 does not improve AUC. Reverting changes.
Training on augumented user 102860 5/50 current_auc = 0.7066971080669711
User 102860 AUC after training: 0.7074581430745814
User 102860 improves AUC. Keeping the model.
Training on augumented user 137625 6/50 current_auc = 0.7074581430745814
User 137625 AUC after training: 0.7070015220700152
User 137625 does not improve AUC. Reverting changes.
Training on augumented user 91477 7/50 current_auc = 0.7074581430745814
User 91477 AUC after training: 0.7082191780821918
User 91477 improves AUC. Keeping the model.
Training on augumented user 37284 8/50 current_auc = 0.7082191780821918
User 37284 AUC after training: 0.7103500761035008
User 37284 improves AUC. Keeping the model.
Training on augumented user 100505 9/50 current_auc = 0.7103500761035008
User 100505 AUC after training: 0.7079147640791477
User 100505 does not improve AUC. Reverting changes.
Training on augumented user 4211 10/50 current_auc = 0.7103500761035008
User 4211 AUC after training: 0.7094368340943683
User 4211 does not improve AUC. Reverting changes.
Training on augumented user 110112 11/50 current_auc = 0.7103500761035008
User 110112 AUC after training: 0.7100456621004566
User 110112 does not improve AUC. Reverting changes.
Training on augumented user 9065 12/50 current_auc = 0.7103500761035008
User 9065 AUC after training: 0.7098934550989345
User 9065 does not improve AUC. Reverting changes.
Training on augumented user 37337 13/50 current_auc = 0.7103500761035008
User 37337 AUC after training: 0.7095890410958905
User 37337 does not improve AUC. Reverting changes.
Training on augumented user 18898 14/50 current_auc = 0.7103500761035008
User 18898 AUC after training: 0.7095890410958904
User 18898 does not improve AUC. Reverting changes.
Training on augumented user 30922 15/50 current_auc = 0.7103500761035008
User 30922 AUC after training: 0.7092846270928462
User 30922 does not improve AUC. Reverting changes.
Training on augumented user 75917 16/50 current_auc = 0.7103500761035008
User 75917 AUC after training: 0.7095890410958904
User 75917 does not improve AUC. Reverting changes.
Training on augumented user 21426 17/50 current_auc = 0.7103500761035008
User 21426 AUC after training: 0.7083713850837138
User 21426 does not improve AUC. Reverting changes.
Training on augumented user 129503 18/50 current_auc = 0.7103500761035008
User 129503 AUC after training: 0.7098934550989345
User 129503 does not improve AUC. Reverting changes.
Training on augumented user 130413 19/50 current_auc = 0.7103500761035008
User 130413 AUC after training: 0.7097412480974125
User 130413 does not improve AUC. Reverting changes.
Training on augumented user 74630 20/50 current_auc = 0.7103500761035008
User 74630 AUC after training: 0.7100456621004566
User 74630 does not improve AUC. Reverting changes.
Training on augumented user 119322 21/50 current_auc = 0.7103500761035008
User 119322 AUC after training: 0.7100456621004566
User 119322 does not improve AUC. Reverting changes.
Training on augumented user 13577 22/50 current_auc = 0.7103500761035008
User 13577 AUC after training: 0.7103500761035008
User 13577 does not improve AUC. Reverting changes.
Training on augumented user 50944 23/50 current_auc = 0.7103500761035008
User 50944 AUC after training: 0.7097412480974125
User 50944 does not improve AUC. Reverting changes.
Training on augumented user 54754 24/50 current_auc = 0.7103500761035008
User 54754 AUC after training: 0.7077625570776256
User 54754 does not improve AUC. Reverting changes.
Training on augumented user 135441 25/50 current_auc = 0.7103500761035008
User 135441 AUC after training: 0.7092846270928462
User 135441 does not improve AUC. Reverting changes.
Training on augumented user 117905 26/50 current_auc = 0.7103500761035008
User 117905 AUC after training: 0.7085235920852359
User 117905 does not improve AUC. Reverting changes.
Training on augumented user 52465 27/50 current_auc = 0.7103500761035008
User 52465 AUC after training: 0.7076103500761035
User 52465 does not improve AUC. Reverting changes.
Training on augumented user 37429 28/50 current_auc = 0.7103500761035008
User 37429 AUC after training: 0.7074581430745814
User 37429 does not improve AUC. Reverting changes.
Training on augumented user 65891 29/50 current_auc = 0.7103500761035008
User 65891 AUC after training: 0.7098934550989345
User 65891 does not improve AUC. Reverting changes.
Training on augumented user 116733 30/50 current_auc = 0.7103500761035008
User 116733 AUC after training: 0.7101978691019787
User 116733 does not improve AUC. Reverting changes.
Training on augumented user 17515 31/50 current_auc = 0.7103500761035008
User 17515 AUC after training: 0.7115677321156773
User 17515 improves AUC. Keeping the model.
Training on augumented user 50673 32/50 current_auc = 0.7115677321156773
User 50673 AUC after training: 0.7118721461187214
User 50673 improves AUC. Keeping the model.
Training on augumented user 5872 33/50 current_auc = 0.7118721461187214
User 5872 AUC after training: 0.7115677321156773
User 5872 does not improve AUC. Reverting changes.
Training on augumented user 74229 34/50 current_auc = 0.7118721461187214
User 74229 AUC after training: 0.71324200913242
User 74229 improves AUC. Keeping the model.
Training on augumented user 126184 35/50 current_auc = 0.71324200913242
User 126184 AUC after training: 0.7095890410958904
User 126184 does not improve AUC. Reverting changes.
Training on augumented user 127597 36/50 current_auc = 0.71324200913242
User 127597 AUC after training: 0.713089802130898
User 127597 does not improve AUC. Reverting changes.
Training on augumented user 123480 37/50 current_auc = 0.71324200913242
User 123480 AUC after training: 0.7135464231354642
User 123480 improves AUC. Keeping the model.
Training on augumented user 99697 38/50 current_auc = 0.7135464231354642
User 99697 AUC after training: 0.713089802130898
User 99697 does not improve AUC. Reverting changes.
Training on augumented user 7156 39/50 current_auc = 0.7135464231354642
User 7156 AUC after training: 0.7126331811263318
User 7156 does not improve AUC. Reverting changes.
Training on augumented user 96532 40/50 current_auc = 0.7135464231354642
User 96532 AUC after training: 0.7126331811263318
User 96532 does not improve AUC. Reverting changes.
Training on augumented user 75101 41/50 current_auc = 0.7135464231354642
User 75101 AUC after training: 0.7135464231354642
User 75101 does not improve AUC. Reverting changes.
Training on augumented user 73224 42/50 current_auc = 0.7135464231354642
User 73224 AUC after training: 0.7127853881278539
User 73224 does not improve AUC. Reverting changes.
Training on augumented user 52398 43/50 current_auc = 0.7135464231354642
User 52398 AUC after training: 0.7129375951293759
User 52398 does not improve AUC. Reverting changes.
Training on augumented user 114725 44/50 current_auc = 0.7135464231354642
User 114725 AUC after training: 0.7133942161339422
User 114725 does not improve AUC. Reverting changes.
Training on augumented user 87094 45/50 current_auc = 0.7135464231354642
User 87094 AUC after training: 0.7103500761035008
User 87094 does not improve AUC. Reverting changes.
Training on augumented user 685 46/50 current_auc = 0.7135464231354642
User 685 AUC after training: 0.7136986301369863
User 685 improves AUC. Keeping the model.
Training on augumented user 111731 47/50 current_auc = 0.7136986301369863
User 111731 AUC after training: 0.7126331811263318
User 111731 does not improve AUC. Reverting changes.
Training on augumented user 126355 48/50 current_auc = 0.7136986301369863
User 126355 AUC after training: 0.7127853881278539
User 126355 does not improve AUC. Reverting changes.
Training on augumented user 68004 49/50 current_auc = 0.7136986301369863
User 68004 AUC after training: 0.71324200913242
User 68004 does not improve AUC. Reverting changes.
[2024-12-02 18:57:24.312047] start test user 86245 147/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:57:24.766538] start test user 86245 147/568 recall augumented users by random, augumented_users = [104362, 95622, 86208, 119556, 8741, 13002, 85829, 14814, 37879, 131293, 6548, 20726, 68282, 84291, 61875, 82753, 79529, 95458, 100562, 12686, 74826, 127768, 92455, 6705, 82573, 135948, 26542, 55635, 41619, 41479, 108489, 79809, 80575, 44080, 82607, 58494, 134233, 117742, 43438, 77842, 21339, 133138, 54307, 31780, 9120, 20226, 44338, 31753, 58632, 72843]
[2024-12-02 18:57:24.782755] user = 86245 Cloud 147/568
[2024-12-02 18:57:24.793393] user = 86245 Local 147/568
[2024-12-02 18:57:24.813772] user = 86245 Local+ 147/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:57:27.219010] user = 86245 MPDA- 147/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.45945945945945943
Training on augumented user 104362 0/50 current_auc = 0.45945945945945943
User 104362 AUC after training: 0.4555984555984556
User 104362 does not improve AUC. Reverting changes.
Training on augumented user 95622 1/50 current_auc = 0.45945945945945943
User 95622 AUC after training: 0.45945945945945943
User 95622 does not improve AUC. Reverting changes.
Training on augumented user 86208 2/50 current_auc = 0.45945945945945943
User 86208 AUC after training: 0.45945945945945943
User 86208 does not improve AUC. Reverting changes.
Training on augumented user 119556 3/50 current_auc = 0.45945945945945943
User 119556 AUC after training: 0.4555984555984556
User 119556 does not improve AUC. Reverting changes.
Training on augumented user 8741 4/50 current_auc = 0.45945945945945943
User 8741 AUC after training: 0.4555984555984556
User 8741 does not improve AUC. Reverting changes.
Training on augumented user 13002 5/50 current_auc = 0.45945945945945943
User 13002 AUC after training: 0.45945945945945943
User 13002 does not improve AUC. Reverting changes.
Training on augumented user 85829 6/50 current_auc = 0.45945945945945943
User 85829 AUC after training: 0.45945945945945943
User 85829 does not improve AUC. Reverting changes.
Training on augumented user 14814 7/50 current_auc = 0.45945945945945943
User 14814 AUC after training: 0.45945945945945943
User 14814 does not improve AUC. Reverting changes.
Training on augumented user 37879 8/50 current_auc = 0.45945945945945943
User 37879 AUC after training: 0.4555984555984556
User 37879 does not improve AUC. Reverting changes.
Training on augumented user 131293 9/50 current_auc = 0.45945945945945943
User 131293 AUC after training: 0.45945945945945943
User 131293 does not improve AUC. Reverting changes.
Training on augumented user 6548 10/50 current_auc = 0.45945945945945943
User 6548 AUC after training: 0.4555984555984556
User 6548 does not improve AUC. Reverting changes.
Training on augumented user 20726 11/50 current_auc = 0.45945945945945943
User 20726 AUC after training: 0.45945945945945943
User 20726 does not improve AUC. Reverting changes.
Training on augumented user 68282 12/50 current_auc = 0.45945945945945943
User 68282 AUC after training: 0.45945945945945943
User 68282 does not improve AUC. Reverting changes.
Training on augumented user 84291 13/50 current_auc = 0.45945945945945943
User 84291 AUC after training: 0.45945945945945943
User 84291 does not improve AUC. Reverting changes.
Training on augumented user 61875 14/50 current_auc = 0.45945945945945943
User 61875 AUC after training: 0.45945945945945943
User 61875 does not improve AUC. Reverting changes.
Training on augumented user 82753 15/50 current_auc = 0.45945945945945943
User 82753 AUC after training: 0.45945945945945943
User 82753 does not improve AUC. Reverting changes.
Training on augumented user 79529 16/50 current_auc = 0.45945945945945943
User 79529 AUC after training: 0.4633204633204633
User 79529 improves AUC. Keeping the model.
Training on augumented user 95458 17/50 current_auc = 0.4633204633204633
User 95458 AUC after training: 0.4633204633204633
User 95458 does not improve AUC. Reverting changes.
Training on augumented user 100562 18/50 current_auc = 0.4633204633204633
User 100562 AUC after training: 0.4555984555984556
User 100562 does not improve AUC. Reverting changes.
Training on augumented user 12686 19/50 current_auc = 0.4633204633204633
User 12686 AUC after training: 0.4633204633204633
User 12686 does not improve AUC. Reverting changes.
Training on augumented user 74826 20/50 current_auc = 0.4633204633204633
User 74826 AUC after training: 0.4633204633204633
User 74826 does not improve AUC. Reverting changes.
Training on augumented user 127768 21/50 current_auc = 0.4633204633204633
User 127768 AUC after training: 0.4633204633204633
User 127768 does not improve AUC. Reverting changes.
Training on augumented user 92455 22/50 current_auc = 0.4633204633204633
User 92455 AUC after training: 0.4555984555984556
User 92455 does not improve AUC. Reverting changes.
Training on augumented user 6705 23/50 current_auc = 0.4633204633204633
User 6705 AUC after training: 0.45945945945945943
User 6705 does not improve AUC. Reverting changes.
Training on augumented user 82573 24/50 current_auc = 0.4633204633204633
User 82573 AUC after training: 0.45945945945945943
User 82573 does not improve AUC. Reverting changes.
Training on augumented user 135948 25/50 current_auc = 0.4633204633204633
User 135948 AUC after training: 0.45945945945945943
User 135948 does not improve AUC. Reverting changes.
Training on augumented user 26542 26/50 current_auc = 0.4633204633204633
User 26542 AUC after training: 0.4633204633204633
User 26542 does not improve AUC. Reverting changes.
Training on augumented user 55635 27/50 current_auc = 0.4633204633204633
User 55635 AUC after training: 0.45945945945945943
User 55635 does not improve AUC. Reverting changes.
Training on augumented user 41619 28/50 current_auc = 0.4633204633204633
User 41619 AUC after training: 0.45945945945945943
User 41619 does not improve AUC. Reverting changes.
Training on augumented user 41479 29/50 current_auc = 0.4633204633204633
User 41479 AUC after training: 0.45945945945945943
User 41479 does not improve AUC. Reverting changes.
Training on augumented user 108489 30/50 current_auc = 0.4633204633204633
User 108489 AUC after training: 0.4555984555984556
User 108489 does not improve AUC. Reverting changes.
Training on augumented user 79809 31/50 current_auc = 0.4633204633204633
User 79809 AUC after training: 0.45945945945945943
User 79809 does not improve AUC. Reverting changes.
Training on augumented user 80575 32/50 current_auc = 0.4633204633204633
User 80575 AUC after training: 0.4555984555984556
User 80575 does not improve AUC. Reverting changes.
Training on augumented user 44080 33/50 current_auc = 0.4633204633204633
User 44080 AUC after training: 0.45945945945945943
User 44080 does not improve AUC. Reverting changes.
Training on augumented user 82607 34/50 current_auc = 0.4633204633204633
User 82607 AUC after training: 0.45945945945945943
User 82607 does not improve AUC. Reverting changes.
Training on augumented user 58494 35/50 current_auc = 0.4633204633204633
User 58494 AUC after training: 0.4633204633204633
User 58494 does not improve AUC. Reverting changes.
Training on augumented user 134233 36/50 current_auc = 0.4633204633204633
User 134233 AUC after training: 0.4517374517374517
User 134233 does not improve AUC. Reverting changes.
Training on augumented user 117742 37/50 current_auc = 0.4633204633204633
User 117742 AUC after training: 0.4633204633204633
User 117742 does not improve AUC. Reverting changes.
Training on augumented user 43438 38/50 current_auc = 0.4633204633204633
User 43438 AUC after training: 0.4633204633204633
User 43438 does not improve AUC. Reverting changes.
Training on augumented user 77842 39/50 current_auc = 0.4633204633204633
User 77842 AUC after training: 0.4633204633204633
User 77842 does not improve AUC. Reverting changes.
Training on augumented user 21339 40/50 current_auc = 0.4633204633204633
User 21339 AUC after training: 0.45945945945945943
User 21339 does not improve AUC. Reverting changes.
Training on augumented user 133138 41/50 current_auc = 0.4633204633204633
User 133138 AUC after training: 0.4633204633204633
User 133138 does not improve AUC. Reverting changes.
Training on augumented user 54307 42/50 current_auc = 0.4633204633204633
User 54307 AUC after training: 0.4633204633204633
User 54307 does not improve AUC. Reverting changes.
Training on augumented user 31780 43/50 current_auc = 0.4633204633204633
User 31780 AUC after training: 0.45945945945945943
User 31780 does not improve AUC. Reverting changes.
Training on augumented user 9120 44/50 current_auc = 0.4633204633204633
User 9120 AUC after training: 0.45945945945945943
User 9120 does not improve AUC. Reverting changes.
Training on augumented user 20226 45/50 current_auc = 0.4633204633204633
User 20226 AUC after training: 0.45945945945945943
User 20226 does not improve AUC. Reverting changes.
Training on augumented user 44338 46/50 current_auc = 0.4633204633204633
User 44338 AUC after training: 0.4633204633204633
User 44338 does not improve AUC. Reverting changes.
Training on augumented user 31753 47/50 current_auc = 0.4633204633204633
User 31753 AUC after training: 0.4555984555984556
User 31753 does not improve AUC. Reverting changes.
Training on augumented user 58632 48/50 current_auc = 0.4633204633204633
User 58632 AUC after training: 0.45945945945945943
User 58632 does not improve AUC. Reverting changes.
Training on augumented user 72843 49/50 current_auc = 0.4633204633204633
User 72843 AUC after training: 0.4633204633204633
User 72843 does not improve AUC. Reverting changes.
[2024-12-02 18:57:52.627245] start test user 86285 148/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:57:53.060197] start test user 86285 148/568 recall augumented users by random, augumented_users = [85463, 121228, 105836, 86303, 11064, 131183, 17703, 131254, 59238, 104542, 40770, 36722, 119378, 78685, 135585, 103830, 36222, 130901, 31570, 87933, 95123, 2832, 22941, 108736, 85715, 14735, 6760, 98796, 88581, 24073, 59302, 35808, 116642, 24860, 96353, 108172, 118114, 101438, 122164, 67223, 38668, 39996, 131272, 123734, 64086, 46778, 86993, 73547, 108223, 72314]
[2024-12-02 18:57:53.074507] user = 86285 Cloud 148/568
[2024-12-02 18:57:53.084978] user = 86285 Local 148/568
[2024-12-02 18:57:53.117512] user = 86285 Local+ 148/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:57:55.559504] user = 86285 MPDA- 148/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6889632107023411
Training on augumented user 85463 0/50 current_auc = 0.6889632107023411
User 85463 AUC after training: 0.68561872909699
User 85463 does not improve AUC. Reverting changes.
Training on augumented user 121228 1/50 current_auc = 0.6889632107023411
User 121228 AUC after training: 0.68561872909699
User 121228 does not improve AUC. Reverting changes.
Training on augumented user 105836 2/50 current_auc = 0.6889632107023411
User 105836 AUC after training: 0.6889632107023411
User 105836 does not improve AUC. Reverting changes.
Training on augumented user 86303 3/50 current_auc = 0.6889632107023411
User 86303 AUC after training: 0.6889632107023411
User 86303 does not improve AUC. Reverting changes.
Training on augumented user 11064 4/50 current_auc = 0.6889632107023411
User 11064 AUC after training: 0.6889632107023411
User 11064 does not improve AUC. Reverting changes.
Training on augumented user 131183 5/50 current_auc = 0.6889632107023411
User 131183 AUC after training: 0.68561872909699
User 131183 does not improve AUC. Reverting changes.
Training on augumented user 17703 6/50 current_auc = 0.6889632107023411
User 17703 AUC after training: 0.68561872909699
User 17703 does not improve AUC. Reverting changes.
Training on augumented user 131254 7/50 current_auc = 0.6889632107023411
User 131254 AUC after training: 0.6923076923076922
User 131254 improves AUC. Keeping the model.
Training on augumented user 59238 8/50 current_auc = 0.6923076923076922
User 59238 AUC after training: 0.6923076923076922
User 59238 does not improve AUC. Reverting changes.
Training on augumented user 104542 9/50 current_auc = 0.6923076923076922
User 104542 AUC after training: 0.6889632107023411
User 104542 does not improve AUC. Reverting changes.
Training on augumented user 40770 10/50 current_auc = 0.6923076923076922
User 40770 AUC after training: 0.6923076923076922
User 40770 does not improve AUC. Reverting changes.
Training on augumented user 36722 11/50 current_auc = 0.6923076923076922
User 36722 AUC after training: 0.6889632107023411
User 36722 does not improve AUC. Reverting changes.
Training on augumented user 119378 12/50 current_auc = 0.6923076923076922
User 119378 AUC after training: 0.6923076923076922
User 119378 does not improve AUC. Reverting changes.
Training on augumented user 78685 13/50 current_auc = 0.6923076923076922
User 78685 AUC after training: 0.6889632107023411
User 78685 does not improve AUC. Reverting changes.
Training on augumented user 135585 14/50 current_auc = 0.6923076923076922
User 135585 AUC after training: 0.6923076923076922
User 135585 does not improve AUC. Reverting changes.
Training on augumented user 103830 15/50 current_auc = 0.6923076923076922
User 103830 AUC after training: 0.6923076923076922
User 103830 does not improve AUC. Reverting changes.
Training on augumented user 36222 16/50 current_auc = 0.6923076923076922
User 36222 AUC after training: 0.6923076923076922
User 36222 does not improve AUC. Reverting changes.
Training on augumented user 130901 17/50 current_auc = 0.6923076923076922
User 130901 AUC after training: 0.6923076923076922
User 130901 does not improve AUC. Reverting changes.
Training on augumented user 31570 18/50 current_auc = 0.6923076923076922
User 31570 AUC after training: 0.6889632107023411
User 31570 does not improve AUC. Reverting changes.
Training on augumented user 87933 19/50 current_auc = 0.6923076923076922
User 87933 AUC after training: 0.6923076923076922
User 87933 does not improve AUC. Reverting changes.
Training on augumented user 95123 20/50 current_auc = 0.6923076923076922
User 95123 AUC after training: 0.6923076923076922
User 95123 does not improve AUC. Reverting changes.
Training on augumented user 2832 21/50 current_auc = 0.6923076923076922
User 2832 AUC after training: 0.6889632107023411
User 2832 does not improve AUC. Reverting changes.
Training on augumented user 22941 22/50 current_auc = 0.6923076923076922
User 22941 AUC after training: 0.6923076923076922
User 22941 does not improve AUC. Reverting changes.
Training on augumented user 108736 23/50 current_auc = 0.6923076923076922
User 108736 AUC after training: 0.6889632107023411
User 108736 does not improve AUC. Reverting changes.
Training on augumented user 85715 24/50 current_auc = 0.6923076923076922
User 85715 AUC after training: 0.68561872909699
User 85715 does not improve AUC. Reverting changes.
Training on augumented user 14735 25/50 current_auc = 0.6923076923076922
User 14735 AUC after training: 0.6889632107023411
User 14735 does not improve AUC. Reverting changes.
Training on augumented user 6760 26/50 current_auc = 0.6923076923076922
User 6760 AUC after training: 0.6923076923076922
User 6760 does not improve AUC. Reverting changes.
Training on augumented user 98796 27/50 current_auc = 0.6923076923076922
User 98796 AUC after training: 0.6889632107023411
User 98796 does not improve AUC. Reverting changes.
Training on augumented user 88581 28/50 current_auc = 0.6923076923076922
User 88581 AUC after training: 0.6956521739130435
User 88581 improves AUC. Keeping the model.
Training on augumented user 24073 29/50 current_auc = 0.6956521739130435
User 24073 AUC after training: 0.6889632107023411
User 24073 does not improve AUC. Reverting changes.
Training on augumented user 59302 30/50 current_auc = 0.6956521739130435
User 59302 AUC after training: 0.6956521739130435
User 59302 does not improve AUC. Reverting changes.
Training on augumented user 35808 31/50 current_auc = 0.6956521739130435
User 35808 AUC after training: 0.6923076923076922
User 35808 does not improve AUC. Reverting changes.
Training on augumented user 116642 32/50 current_auc = 0.6956521739130435
User 116642 AUC after training: 0.6956521739130435
User 116642 does not improve AUC. Reverting changes.
Training on augumented user 24860 33/50 current_auc = 0.6956521739130435
User 24860 AUC after training: 0.6923076923076922
User 24860 does not improve AUC. Reverting changes.
Training on augumented user 96353 34/50 current_auc = 0.6956521739130435
User 96353 AUC after training: 0.6923076923076922
User 96353 does not improve AUC. Reverting changes.
Training on augumented user 108172 35/50 current_auc = 0.6956521739130435
User 108172 AUC after training: 0.6923076923076923
User 108172 does not improve AUC. Reverting changes.
Training on augumented user 118114 36/50 current_auc = 0.6956521739130435
User 118114 AUC after training: 0.6956521739130435
User 118114 does not improve AUC. Reverting changes.
Training on augumented user 101438 37/50 current_auc = 0.6956521739130435
User 101438 AUC after training: 0.6923076923076922
User 101438 does not improve AUC. Reverting changes.
Training on augumented user 122164 38/50 current_auc = 0.6956521739130435
User 122164 AUC after training: 0.6889632107023411
User 122164 does not improve AUC. Reverting changes.
Training on augumented user 67223 39/50 current_auc = 0.6956521739130435
User 67223 AUC after training: 0.6889632107023411
User 67223 does not improve AUC. Reverting changes.
Training on augumented user 38668 40/50 current_auc = 0.6956521739130435
User 38668 AUC after training: 0.6956521739130435
User 38668 does not improve AUC. Reverting changes.
Training on augumented user 39996 41/50 current_auc = 0.6956521739130435
User 39996 AUC after training: 0.6923076923076922
User 39996 does not improve AUC. Reverting changes.
Training on augumented user 131272 42/50 current_auc = 0.6956521739130435
User 131272 AUC after training: 0.6956521739130435
User 131272 does not improve AUC. Reverting changes.
Training on augumented user 123734 43/50 current_auc = 0.6956521739130435
User 123734 AUC after training: 0.6956521739130435
User 123734 does not improve AUC. Reverting changes.
Training on augumented user 64086 44/50 current_auc = 0.6956521739130435
User 64086 AUC after training: 0.6923076923076922
User 64086 does not improve AUC. Reverting changes.
Training on augumented user 46778 45/50 current_auc = 0.6956521739130435
User 46778 AUC after training: 0.6956521739130435
User 46778 does not improve AUC. Reverting changes.
Training on augumented user 86993 46/50 current_auc = 0.6956521739130435
User 86993 AUC after training: 0.6923076923076922
User 86993 does not improve AUC. Reverting changes.
Training on augumented user 73547 47/50 current_auc = 0.6956521739130435
User 73547 AUC after training: 0.6956521739130435
User 73547 does not improve AUC. Reverting changes.
Training on augumented user 108223 48/50 current_auc = 0.6956521739130435
User 108223 AUC after training: 0.7023411371237458
User 108223 improves AUC. Keeping the model.
Training on augumented user 72314 49/50 current_auc = 0.7023411371237458
User 72314 AUC after training: 0.705685618729097
User 72314 improves AUC. Keeping the model.
[2024-12-02 18:58:23.620455] start test user 86301 149/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:58:24.388787] start test user 86301 149/568 recall augumented users by random, augumented_users = [12677, 8718, 116423, 84860, 25257, 8297, 83725, 110116, 126847, 22876, 7138, 71846, 120749, 53692, 63840, 73639, 41638, 47398, 68218, 56155, 110650, 30587, 7511, 12215, 67318, 61970, 57429, 34817, 51562, 4412, 65616, 36698, 63670, 138488, 71486, 31557, 32348, 77142, 119642, 70340, 12187, 126290, 60189, 44292, 78037, 47734, 114758, 75223, 112289, 123883]
[2024-12-02 18:58:24.407580] user = 86301 Cloud 149/568
[2024-12-02 18:58:24.541748] user = 86301 Local 149/568
[2024-12-02 18:58:24.831594] user = 86301 Local+ 149/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:58:28.202852] user = 86301 MPDA- 149/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6529466466799911
Training on augumented user 12677 0/50 current_auc = 0.6529466466799911
User 12677 AUC after training: 0.6528911281367976
User 12677 does not improve AUC. Reverting changes.
Training on augumented user 8718 1/50 current_auc = 0.6529466466799911
User 8718 AUC after training: 0.6530785032200755
User 8718 improves AUC. Keeping the model.
Training on augumented user 116423 2/50 current_auc = 0.6530785032200755
User 116423 AUC after training: 0.6530993226737731
User 116423 improves AUC. Keeping the model.
Training on augumented user 84860 3/50 current_auc = 0.6530993226737731
User 84860 AUC after training: 0.653022984676882
User 84860 does not improve AUC. Reverting changes.
Training on augumented user 25257 4/50 current_auc = 0.6530993226737731
User 25257 AUC after training: 0.653175660670664
User 25257 improves AUC. Keeping the model.
Training on augumented user 8297 5/50 current_auc = 0.653175660670664
User 8297 AUC after training: 0.6528494892294027
User 8297 does not improve AUC. Reverting changes.
Training on augumented user 83725 6/50 current_auc = 0.653175660670664
User 83725 AUC after training: 0.6529813457694871
User 83725 does not improve AUC. Reverting changes.
Training on augumented user 110116 7/50 current_auc = 0.653175660670664
User 110116 AUC after training: 0.6531201421274706
User 110116 does not improve AUC. Reverting changes.
Training on augumented user 126847 8/50 current_auc = 0.653175660670664
User 126847 AUC after training: 0.6529327670441928
User 126847 does not improve AUC. Reverting changes.
Training on augumented user 22876 9/50 current_auc = 0.653175660670664
User 22876 AUC after training: 0.6528911281367977
User 22876 does not improve AUC. Reverting changes.
Training on augumented user 7138 10/50 current_auc = 0.653175660670664
User 7138 AUC after training: 0.6532207694870087
User 7138 improves AUC. Keeping the model.
Training on augumented user 71846 11/50 current_auc = 0.6532207694870087
User 71846 AUC after training: 0.6531964801243616
User 71846 does not improve AUC. Reverting changes.
Training on augumented user 120749 12/50 current_auc = 0.6532207694870087
User 120749 AUC after training: 0.6532624083944039
User 120749 improves AUC. Keeping the model.
Training on augumented user 53692 13/50 current_auc = 0.6532624083944039
User 53692 AUC after training: 0.653057683766378
User 53692 does not improve AUC. Reverting changes.
Training on augumented user 63840 14/50 current_auc = 0.6532624083944039
User 63840 AUC after training: 0.6529119475904952
User 63840 does not improve AUC. Reverting changes.
Training on augumented user 73639 15/50 current_auc = 0.6532624083944039
User 73639 AUC after training: 0.6532450588496558
User 73639 does not improve AUC. Reverting changes.
Training on augumented user 41638 16/50 current_auc = 0.6532624083944039
User 41638 AUC after training: 0.6525441372418388
User 41638 does not improve AUC. Reverting changes.
Training on augumented user 47398 17/50 current_auc = 0.6532624083944039
User 47398 AUC after training: 0.6530785032200755
User 47398 does not improve AUC. Reverting changes.
Training on augumented user 68218 18/50 current_auc = 0.6532624083944039
User 68218 AUC after training: 0.6532589384854542
User 68218 does not improve AUC. Reverting changes.
Training on augumented user 56155 19/50 current_auc = 0.6532624083944039
User 56155 AUC after training: 0.6532658783033534
User 56155 improves AUC. Keeping the model.
Training on augumented user 110650 20/50 current_auc = 0.6532658783033534
User 110650 AUC after training: 0.6531132023095714
User 110650 does not improve AUC. Reverting changes.
Training on augumented user 30587 21/50 current_auc = 0.6532658783033534
User 30587 AUC after training: 0.6531548412169664
User 30587 does not improve AUC. Reverting changes.
Training on augumented user 7511 22/50 current_auc = 0.6532658783033534
User 7511 AUC after training: 0.6528425494115034
User 7511 does not improve AUC. Reverting changes.
Training on augumented user 12215 23/50 current_auc = 0.6532658783033534
User 12215 AUC after training: 0.6532172995780591
User 12215 does not improve AUC. Reverting changes.
Training on augumented user 67318 24/50 current_auc = 0.6532658783033534
User 67318 AUC after training: 0.6530923828558738
User 67318 does not improve AUC. Reverting changes.
Training on augumented user 61970 25/50 current_auc = 0.6532658783033534
User 61970 AUC after training: 0.653057683766378
User 61970 does not improve AUC. Reverting changes.
Training on augumented user 57429 26/50 current_auc = 0.6532658783033534
User 57429 AUC after training: 0.6531479013990672
User 57429 does not improve AUC. Reverting changes.
Training on augumented user 34817 27/50 current_auc = 0.6532658783033534
User 34817 AUC after training: 0.6530889129469242
User 34817 does not improve AUC. Reverting changes.
Training on augumented user 51562 28/50 current_auc = 0.6532658783033534
User 51562 AUC after training: 0.6531548412169665
User 51562 does not improve AUC. Reverting changes.
Training on augumented user 4412 29/50 current_auc = 0.6532658783033534
User 4412 AUC after training: 0.6532242393959582
User 4412 does not improve AUC. Reverting changes.
Training on augumented user 65616 30/50 current_auc = 0.6532658783033534
User 65616 AUC after training: 0.653175660670664
User 65616 does not improve AUC. Reverting changes.
Training on augumented user 36698 31/50 current_auc = 0.6532658783033534
User 36698 AUC after training: 0.6531479013990673
User 36698 does not improve AUC. Reverting changes.
Training on augumented user 63670 32/50 current_auc = 0.6532658783033534
User 63670 AUC after training: 0.6528009105041084
User 63670 does not improve AUC. Reverting changes.
Training on augumented user 138488 33/50 current_auc = 0.6532658783033534
User 138488 AUC after training: 0.6530854430379747
User 138488 does not improve AUC. Reverting changes.
Training on augumented user 71486 34/50 current_auc = 0.6532658783033534
User 71486 AUC after training: 0.6531548412169665
User 71486 does not improve AUC. Reverting changes.
Training on augumented user 31557 35/50 current_auc = 0.6532658783033534
User 31557 AUC after training: 0.6533352764823451
User 31557 improves AUC. Keeping the model.
Training on augumented user 32348 36/50 current_auc = 0.6533352764823451
User 32348 AUC after training: 0.6534254941150345
User 32348 improves AUC. Keeping the model.
Training on augumented user 77142 37/50 current_auc = 0.6534254941150345
User 77142 AUC after training: 0.6541541749944482
User 77142 improves AUC. Keeping the model.
Training on augumented user 119642 38/50 current_auc = 0.6541541749944482
User 119642 AUC after training: 0.6539737397290695
User 119642 does not improve AUC. Reverting changes.
Training on augumented user 70340 39/50 current_auc = 0.6541541749944482
User 70340 AUC after training: 0.6534324339329336
User 70340 does not improve AUC. Reverting changes.
Training on augumented user 12187 40/50 current_auc = 0.6541541749944482
User 12187 AUC after training: 0.6541611148123474
User 12187 improves AUC. Keeping the model.
Training on augumented user 126290 41/50 current_auc = 0.6541611148123474
User 126290 AUC after training: 0.6535955196535643
User 126290 does not improve AUC. Reverting changes.
Training on augumented user 60189 42/50 current_auc = 0.6541611148123474
User 60189 AUC after training: 0.6541264157228515
User 60189 does not improve AUC. Reverting changes.
Training on augumented user 44292 43/50 current_auc = 0.6541611148123474
User 44292 AUC after training: 0.6540014990006662
User 44292 does not improve AUC. Reverting changes.
Training on augumented user 78037 44/50 current_auc = 0.6541611148123474
User 78037 AUC after training: 0.6541680546302466
User 78037 improves AUC. Keeping the model.
Training on augumented user 47734 45/50 current_auc = 0.6541680546302466
User 47734 AUC after training: 0.6541194759049521
User 47734 does not improve AUC. Reverting changes.
Training on augumented user 114758 46/50 current_auc = 0.6541680546302466
User 114758 AUC after training: 0.6532172995780591
User 114758 does not improve AUC. Reverting changes.
Training on augumented user 75223 47/50 current_auc = 0.6541680546302466
User 75223 AUC after training: 0.6540639573617589
User 75223 does not improve AUC. Reverting changes.
Training on augumented user 112289 48/50 current_auc = 0.6541680546302466
User 112289 AUC after training: 0.6541264157228515
User 112289 does not improve AUC. Reverting changes.
Training on augumented user 123883 49/50 current_auc = 0.6541680546302466
User 123883 AUC after training: 0.6543137908061292
User 123883 improves AUC. Keeping the model.
[2024-12-02 18:59:04.775352] start test user 86303 150/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:59:05.444395] start test user 86303 150/568 recall augumented users by random, augumented_users = [125118, 32490, 108788, 106984, 79999, 137317, 39392, 77217, 39295, 95153, 132, 6999, 89281, 2813, 46226, 49682, 103080, 95086, 88152, 43265, 130860, 78413, 46646, 19848, 124652, 98505, 40617, 86543, 22150, 70950, 99429, 52961, 90416, 120625, 45735, 125848, 34019, 27145, 5995, 4740, 48540, 27375, 70697, 28461, 137494, 120979, 58923, 78947, 23063, 64229]
[2024-12-02 18:59:05.458887] user = 86303 Cloud 150/568
[2024-12-02 18:59:05.480069] user = 86303 Local 150/568
[2024-12-02 18:59:05.519777] user = 86303 Local+ 150/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:59:09.057942] user = 86303 MPDA- 150/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.16666666666666666
Training on augumented user 125118 0/50 current_auc = 0.16666666666666666
User 125118 AUC after training: 0.16666666666666666
User 125118 does not improve AUC. Reverting changes.
Training on augumented user 32490 1/50 current_auc = 0.16666666666666666
User 32490 AUC after training: 0.16666666666666666
User 32490 does not improve AUC. Reverting changes.
Training on augumented user 108788 2/50 current_auc = 0.16666666666666666
User 108788 AUC after training: 0.16666666666666666
User 108788 does not improve AUC. Reverting changes.
Training on augumented user 106984 3/50 current_auc = 0.16666666666666666
User 106984 AUC after training: 0.16666666666666666
User 106984 does not improve AUC. Reverting changes.
Training on augumented user 79999 4/50 current_auc = 0.16666666666666666
User 79999 AUC after training: 0.16666666666666666
User 79999 does not improve AUC. Reverting changes.
Training on augumented user 137317 5/50 current_auc = 0.16666666666666666
User 137317 AUC after training: 0.16666666666666666
User 137317 does not improve AUC. Reverting changes.
Training on augumented user 39392 6/50 current_auc = 0.16666666666666666
User 39392 AUC after training: 0.16666666666666666
User 39392 does not improve AUC. Reverting changes.
Training on augumented user 77217 7/50 current_auc = 0.16666666666666666
User 77217 AUC after training: 0.16666666666666666
User 77217 does not improve AUC. Reverting changes.
Training on augumented user 39295 8/50 current_auc = 0.16666666666666666
User 39295 AUC after training: 0.16666666666666666
User 39295 does not improve AUC. Reverting changes.
Training on augumented user 95153 9/50 current_auc = 0.16666666666666666
User 95153 AUC after training: 0.16666666666666666
User 95153 does not improve AUC. Reverting changes.
Training on augumented user 132 10/50 current_auc = 0.16666666666666666
User 132 AUC after training: 0.16666666666666666
User 132 does not improve AUC. Reverting changes.
Training on augumented user 6999 11/50 current_auc = 0.16666666666666666
User 6999 AUC after training: 0.16666666666666666
User 6999 does not improve AUC. Reverting changes.
Training on augumented user 89281 12/50 current_auc = 0.16666666666666666
User 89281 AUC after training: 0.16666666666666666
User 89281 does not improve AUC. Reverting changes.
Training on augumented user 2813 13/50 current_auc = 0.16666666666666666
User 2813 AUC after training: 0.16666666666666666
User 2813 does not improve AUC. Reverting changes.
Training on augumented user 46226 14/50 current_auc = 0.16666666666666666
User 46226 AUC after training: 0.16666666666666666
User 46226 does not improve AUC. Reverting changes.
Training on augumented user 49682 15/50 current_auc = 0.16666666666666666
User 49682 AUC after training: 0.16666666666666666
User 49682 does not improve AUC. Reverting changes.
Training on augumented user 103080 16/50 current_auc = 0.16666666666666666
User 103080 AUC after training: 0.16666666666666666
User 103080 does not improve AUC. Reverting changes.
Training on augumented user 95086 17/50 current_auc = 0.16666666666666666
User 95086 AUC after training: 0.16666666666666666
User 95086 does not improve AUC. Reverting changes.
Training on augumented user 88152 18/50 current_auc = 0.16666666666666666
User 88152 AUC after training: 0.16666666666666666
User 88152 does not improve AUC. Reverting changes.
Training on augumented user 43265 19/50 current_auc = 0.16666666666666666
User 43265 AUC after training: 0.16666666666666666
User 43265 does not improve AUC. Reverting changes.
Training on augumented user 130860 20/50 current_auc = 0.16666666666666666
User 130860 AUC after training: 0.16666666666666666
User 130860 does not improve AUC. Reverting changes.
Training on augumented user 78413 21/50 current_auc = 0.16666666666666666
User 78413 AUC after training: 0.16666666666666666
User 78413 does not improve AUC. Reverting changes.
Training on augumented user 46646 22/50 current_auc = 0.16666666666666666
User 46646 AUC after training: 0.16666666666666666
User 46646 does not improve AUC. Reverting changes.
Training on augumented user 19848 23/50 current_auc = 0.16666666666666666
User 19848 AUC after training: 0.16666666666666666
User 19848 does not improve AUC. Reverting changes.
Training on augumented user 124652 24/50 current_auc = 0.16666666666666666
User 124652 AUC after training: 0.16666666666666666
User 124652 does not improve AUC. Reverting changes.
Training on augumented user 98505 25/50 current_auc = 0.16666666666666666
User 98505 AUC after training: 0.16666666666666666
User 98505 does not improve AUC. Reverting changes.
Training on augumented user 40617 26/50 current_auc = 0.16666666666666666
User 40617 AUC after training: 0.16666666666666666
User 40617 does not improve AUC. Reverting changes.
Training on augumented user 86543 27/50 current_auc = 0.16666666666666666
User 86543 AUC after training: 0.16666666666666666
User 86543 does not improve AUC. Reverting changes.
Training on augumented user 22150 28/50 current_auc = 0.16666666666666666
User 22150 AUC after training: 0.16666666666666666
User 22150 does not improve AUC. Reverting changes.
Training on augumented user 70950 29/50 current_auc = 0.16666666666666666
User 70950 AUC after training: 0.16666666666666666
User 70950 does not improve AUC. Reverting changes.
Training on augumented user 99429 30/50 current_auc = 0.16666666666666666
User 99429 AUC after training: 0.16666666666666666
User 99429 does not improve AUC. Reverting changes.
Training on augumented user 52961 31/50 current_auc = 0.16666666666666666
User 52961 AUC after training: 0.16666666666666666
User 52961 does not improve AUC. Reverting changes.
Training on augumented user 90416 32/50 current_auc = 0.16666666666666666
User 90416 AUC after training: 0.16666666666666666
User 90416 does not improve AUC. Reverting changes.
Training on augumented user 120625 33/50 current_auc = 0.16666666666666666
User 120625 AUC after training: 0.16666666666666666
User 120625 does not improve AUC. Reverting changes.
Training on augumented user 45735 34/50 current_auc = 0.16666666666666666
User 45735 AUC after training: 0.16666666666666666
User 45735 does not improve AUC. Reverting changes.
Training on augumented user 125848 35/50 current_auc = 0.16666666666666666
User 125848 AUC after training: 0.16666666666666666
User 125848 does not improve AUC. Reverting changes.
Training on augumented user 34019 36/50 current_auc = 0.16666666666666666
User 34019 AUC after training: 0.16666666666666666
User 34019 does not improve AUC. Reverting changes.
Training on augumented user 27145 37/50 current_auc = 0.16666666666666666
User 27145 AUC after training: 0.16666666666666666
User 27145 does not improve AUC. Reverting changes.
Training on augumented user 5995 38/50 current_auc = 0.16666666666666666
User 5995 AUC after training: 0.16666666666666666
User 5995 does not improve AUC. Reverting changes.
Training on augumented user 4740 39/50 current_auc = 0.16666666666666666
User 4740 AUC after training: 0.16666666666666666
User 4740 does not improve AUC. Reverting changes.
Training on augumented user 48540 40/50 current_auc = 0.16666666666666666
User 48540 AUC after training: 0.16666666666666666
User 48540 does not improve AUC. Reverting changes.
Training on augumented user 27375 41/50 current_auc = 0.16666666666666666
User 27375 AUC after training: 0.16666666666666666
User 27375 does not improve AUC. Reverting changes.
Training on augumented user 70697 42/50 current_auc = 0.16666666666666666
User 70697 AUC after training: 0.16666666666666666
User 70697 does not improve AUC. Reverting changes.
Training on augumented user 28461 43/50 current_auc = 0.16666666666666666
User 28461 AUC after training: 0.16666666666666666
User 28461 does not improve AUC. Reverting changes.
Training on augumented user 137494 44/50 current_auc = 0.16666666666666666
User 137494 AUC after training: 0.16666666666666666
User 137494 does not improve AUC. Reverting changes.
Training on augumented user 120979 45/50 current_auc = 0.16666666666666666
User 120979 AUC after training: 0.16666666666666666
User 120979 does not improve AUC. Reverting changes.
Training on augumented user 58923 46/50 current_auc = 0.16666666666666666
User 58923 AUC after training: 0.16666666666666666
User 58923 does not improve AUC. Reverting changes.
Training on augumented user 78947 47/50 current_auc = 0.16666666666666666
User 78947 AUC after training: 0.16666666666666666
User 78947 does not improve AUC. Reverting changes.
Training on augumented user 23063 48/50 current_auc = 0.16666666666666666
User 23063 AUC after training: 0.16666666666666666
User 23063 does not improve AUC. Reverting changes.
Training on augumented user 64229 49/50 current_auc = 0.16666666666666666
User 64229 AUC after training: 0.16666666666666666
User 64229 does not improve AUC. Reverting changes.
[2024-12-02 18:59:39.228306] start test user 86342 151/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:59:39.639670] start test user 86342 151/568 recall augumented users by random, augumented_users = [46030, 31470, 42476, 104152, 1051, 23363, 93780, 130233, 65651, 18590, 109955, 111411, 111955, 138333, 34922, 39430, 13249, 125415, 115476, 119863, 118641, 1808, 75460, 83759, 114205, 86146, 76392, 85064, 120465, 67943, 64056, 13211, 92810, 119220, 7731, 94664, 101292, 134310, 112227, 9889, 111940, 51859, 92510, 63133, 19974, 39107, 61293, 62725, 27446, 96236]
[2024-12-02 18:59:39.653999] user = 86342 Cloud 151/568
[2024-12-02 18:59:39.663678] user = 86342 Local 151/568
[2024-12-02 18:59:39.747520] user = 86342 Local+ 151/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:59:42.396624] user = 86342 MPDA- 151/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6111111111111112
Training on augumented user 46030 0/50 current_auc = 0.6111111111111112
User 46030 AUC after training: 0.6111111111111112
User 46030 does not improve AUC. Reverting changes.
Training on augumented user 31470 1/50 current_auc = 0.6111111111111112
User 31470 AUC after training: 0.6111111111111112
User 31470 does not improve AUC. Reverting changes.
Training on augumented user 42476 2/50 current_auc = 0.6111111111111112
User 42476 AUC after training: 0.6111111111111112
User 42476 does not improve AUC. Reverting changes.
Training on augumented user 104152 3/50 current_auc = 0.6111111111111112
User 104152 AUC after training: 0.6111111111111112
User 104152 does not improve AUC. Reverting changes.
Training on augumented user 1051 4/50 current_auc = 0.6111111111111112
User 1051 AUC after training: 0.6111111111111112
User 1051 does not improve AUC. Reverting changes.
Training on augumented user 23363 5/50 current_auc = 0.6111111111111112
User 23363 AUC after training: 0.625
User 23363 improves AUC. Keeping the model.
Training on augumented user 93780 6/50 current_auc = 0.625
User 93780 AUC after training: 0.625
User 93780 does not improve AUC. Reverting changes.
Training on augumented user 130233 7/50 current_auc = 0.625
User 130233 AUC after training: 0.6388888888888888
User 130233 improves AUC. Keeping the model.
Training on augumented user 65651 8/50 current_auc = 0.6388888888888888
User 65651 AUC after training: 0.625
User 65651 does not improve AUC. Reverting changes.
Training on augumented user 18590 9/50 current_auc = 0.6388888888888888
User 18590 AUC after training: 0.625
User 18590 does not improve AUC. Reverting changes.
Training on augumented user 109955 10/50 current_auc = 0.6388888888888888
User 109955 AUC after training: 0.6388888888888888
User 109955 does not improve AUC. Reverting changes.
Training on augumented user 111411 11/50 current_auc = 0.6388888888888888
User 111411 AUC after training: 0.625
User 111411 does not improve AUC. Reverting changes.
Training on augumented user 111955 12/50 current_auc = 0.6388888888888888
User 111955 AUC after training: 0.6111111111111112
User 111955 does not improve AUC. Reverting changes.
Training on augumented user 138333 13/50 current_auc = 0.6388888888888888
User 138333 AUC after training: 0.625
User 138333 does not improve AUC. Reverting changes.
Training on augumented user 34922 14/50 current_auc = 0.6388888888888888
User 34922 AUC after training: 0.6388888888888888
User 34922 does not improve AUC. Reverting changes.
Training on augumented user 39430 15/50 current_auc = 0.6388888888888888
User 39430 AUC after training: 0.625
User 39430 does not improve AUC. Reverting changes.
Training on augumented user 13249 16/50 current_auc = 0.6388888888888888
User 13249 AUC after training: 0.625
User 13249 does not improve AUC. Reverting changes.
Training on augumented user 125415 17/50 current_auc = 0.6388888888888888
User 125415 AUC after training: 0.6388888888888888
User 125415 does not improve AUC. Reverting changes.
Training on augumented user 115476 18/50 current_auc = 0.6388888888888888
User 115476 AUC after training: 0.625
User 115476 does not improve AUC. Reverting changes.
Training on augumented user 119863 19/50 current_auc = 0.6388888888888888
User 119863 AUC after training: 0.625
User 119863 does not improve AUC. Reverting changes.
Training on augumented user 118641 20/50 current_auc = 0.6388888888888888
User 118641 AUC after training: 0.6388888888888888
User 118641 does not improve AUC. Reverting changes.
Training on augumented user 1808 21/50 current_auc = 0.6388888888888888
User 1808 AUC after training: 0.625
User 1808 does not improve AUC. Reverting changes.
Training on augumented user 75460 22/50 current_auc = 0.6388888888888888
User 75460 AUC after training: 0.625
User 75460 does not improve AUC. Reverting changes.
Training on augumented user 83759 23/50 current_auc = 0.6388888888888888
User 83759 AUC after training: 0.6388888888888888
User 83759 does not improve AUC. Reverting changes.
Training on augumented user 114205 24/50 current_auc = 0.6388888888888888
User 114205 AUC after training: 0.625
User 114205 does not improve AUC. Reverting changes.
Training on augumented user 86146 25/50 current_auc = 0.6388888888888888
User 86146 AUC after training: 0.625
User 86146 does not improve AUC. Reverting changes.
Training on augumented user 76392 26/50 current_auc = 0.6388888888888888
User 76392 AUC after training: 0.625
User 76392 does not improve AUC. Reverting changes.
Training on augumented user 85064 27/50 current_auc = 0.6388888888888888
User 85064 AUC after training: 0.625
User 85064 does not improve AUC. Reverting changes.
Training on augumented user 120465 28/50 current_auc = 0.6388888888888888
User 120465 AUC after training: 0.625
User 120465 does not improve AUC. Reverting changes.
Training on augumented user 67943 29/50 current_auc = 0.6388888888888888
User 67943 AUC after training: 0.625
User 67943 does not improve AUC. Reverting changes.
Training on augumented user 64056 30/50 current_auc = 0.6388888888888888
User 64056 AUC after training: 0.6388888888888888
User 64056 does not improve AUC. Reverting changes.
Training on augumented user 13211 31/50 current_auc = 0.6388888888888888
User 13211 AUC after training: 0.625
User 13211 does not improve AUC. Reverting changes.
Training on augumented user 92810 32/50 current_auc = 0.6388888888888888
User 92810 AUC after training: 0.625
User 92810 does not improve AUC. Reverting changes.
Training on augumented user 119220 33/50 current_auc = 0.6388888888888888
User 119220 AUC after training: 0.6111111111111112
User 119220 does not improve AUC. Reverting changes.
Training on augumented user 7731 34/50 current_auc = 0.6388888888888888
User 7731 AUC after training: 0.625
User 7731 does not improve AUC. Reverting changes.
Training on augumented user 94664 35/50 current_auc = 0.6388888888888888
User 94664 AUC after training: 0.6388888888888888
User 94664 does not improve AUC. Reverting changes.
Training on augumented user 101292 36/50 current_auc = 0.6388888888888888
User 101292 AUC after training: 0.625
User 101292 does not improve AUC. Reverting changes.
Training on augumented user 134310 37/50 current_auc = 0.6388888888888888
User 134310 AUC after training: 0.625
User 134310 does not improve AUC. Reverting changes.
Training on augumented user 112227 38/50 current_auc = 0.6388888888888888
User 112227 AUC after training: 0.625
User 112227 does not improve AUC. Reverting changes.
Training on augumented user 9889 39/50 current_auc = 0.6388888888888888
User 9889 AUC after training: 0.625
User 9889 does not improve AUC. Reverting changes.
Training on augumented user 111940 40/50 current_auc = 0.6388888888888888
User 111940 AUC after training: 0.625
User 111940 does not improve AUC. Reverting changes.
Training on augumented user 51859 41/50 current_auc = 0.6388888888888888
User 51859 AUC after training: 0.625
User 51859 does not improve AUC. Reverting changes.
Training on augumented user 92510 42/50 current_auc = 0.6388888888888888
User 92510 AUC after training: 0.6388888888888888
User 92510 does not improve AUC. Reverting changes.
Training on augumented user 63133 43/50 current_auc = 0.6388888888888888
User 63133 AUC after training: 0.6111111111111112
User 63133 does not improve AUC. Reverting changes.
Training on augumented user 19974 44/50 current_auc = 0.6388888888888888
User 19974 AUC after training: 0.6111111111111112
User 19974 does not improve AUC. Reverting changes.
Training on augumented user 39107 45/50 current_auc = 0.6388888888888888
User 39107 AUC after training: 0.625
User 39107 does not improve AUC. Reverting changes.
Training on augumented user 61293 46/50 current_auc = 0.6388888888888888
User 61293 AUC after training: 0.6388888888888888
User 61293 does not improve AUC. Reverting changes.
Training on augumented user 62725 47/50 current_auc = 0.6388888888888888
User 62725 AUC after training: 0.6388888888888888
User 62725 does not improve AUC. Reverting changes.
Training on augumented user 27446 48/50 current_auc = 0.6388888888888888
User 27446 AUC after training: 0.625
User 27446 does not improve AUC. Reverting changes.
Training on augumented user 96236 49/50 current_auc = 0.6388888888888888
User 96236 AUC after training: 0.6388888888888888
User 96236 does not improve AUC. Reverting changes.
[2024-12-02 19:00:15.411117] start test user 86375 152/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:00:15.916795] start test user 86375 152/568 recall augumented users by random, augumented_users = [71045, 99507, 51013, 138338, 103697, 67171, 50704, 52118, 66798, 68046, 113763, 137946, 84675, 19866, 68261, 13024, 12708, 30331, 66308, 55205, 127141, 123990, 42258, 82226, 13471, 54789, 104770, 128646, 134169, 63878, 64017, 14786, 29737, 120633, 134231, 13932, 12506, 138292, 14909, 16440, 58523, 99914, 72560, 7449, 9985, 105312, 36256, 91946, 121868, 106812]
[2024-12-02 19:00:15.931623] user = 86375 Cloud 152/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:00:15.949423] user = 86375 Local 152/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:00:15.986337] user = 86375 Local+ 152/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:00:18.630586] user = 86375 MPDA- 152/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 71045 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71045 AUC after training: 0.5
User 71045 does not improve AUC. Reverting changes.
Training on augumented user 99507 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99507 AUC after training: 0.5
User 99507 does not improve AUC. Reverting changes.
Training on augumented user 51013 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51013 AUC after training: 0.5
User 51013 does not improve AUC. Reverting changes.
Training on augumented user 138338 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138338 AUC after training: 0.5
User 138338 does not improve AUC. Reverting changes.
Training on augumented user 103697 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103697 AUC after training: 0.5
User 103697 does not improve AUC. Reverting changes.
Training on augumented user 67171 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67171 AUC after training: 0.5
User 67171 does not improve AUC. Reverting changes.
Training on augumented user 50704 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50704 AUC after training: 0.5
User 50704 does not improve AUC. Reverting changes.
Training on augumented user 52118 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52118 AUC after training: 0.5
User 52118 does not improve AUC. Reverting changes.
Training on augumented user 66798 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66798 AUC after training: 0.5
User 66798 does not improve AUC. Reverting changes.
Training on augumented user 68046 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68046 AUC after training: 0.5
User 68046 does not improve AUC. Reverting changes.
Training on augumented user 113763 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113763 AUC after training: 0.5
User 113763 does not improve AUC. Reverting changes.
Training on augumented user 137946 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137946 AUC after training: 0.5
User 137946 does not improve AUC. Reverting changes.
Training on augumented user 84675 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84675 AUC after training: 0.5
User 84675 does not improve AUC. Reverting changes.
Training on augumented user 19866 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19866 AUC after training: 0.5
User 19866 does not improve AUC. Reverting changes.
Training on augumented user 68261 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68261 AUC after training: 0.5
User 68261 does not improve AUC. Reverting changes.
Training on augumented user 13024 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13024 AUC after training: 0.5
User 13024 does not improve AUC. Reverting changes.
Training on augumented user 12708 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12708 AUC after training: 0.5
User 12708 does not improve AUC. Reverting changes.
Training on augumented user 30331 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30331 AUC after training: 0.5
User 30331 does not improve AUC. Reverting changes.
Training on augumented user 66308 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66308 AUC after training: 0.5
User 66308 does not improve AUC. Reverting changes.
Training on augumented user 55205 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55205 AUC after training: 0.5
User 55205 does not improve AUC. Reverting changes.
Training on augumented user 127141 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127141 AUC after training: 0.5
User 127141 does not improve AUC. Reverting changes.
Training on augumented user 123990 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123990 AUC after training: 0.5
User 123990 does not improve AUC. Reverting changes.
Training on augumented user 42258 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42258 AUC after training: 0.5
User 42258 does not improve AUC. Reverting changes.
Training on augumented user 82226 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82226 AUC after training: 0.5
User 82226 does not improve AUC. Reverting changes.
Training on augumented user 13471 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13471 AUC after training: 0.5
User 13471 does not improve AUC. Reverting changes.
Training on augumented user 54789 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54789 AUC after training: 0.5
User 54789 does not improve AUC. Reverting changes.
Training on augumented user 104770 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104770 AUC after training: 0.5
User 104770 does not improve AUC. Reverting changes.
Training on augumented user 128646 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128646 AUC after training: 0.5
User 128646 does not improve AUC. Reverting changes.
Training on augumented user 134169 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134169 AUC after training: 0.5
User 134169 does not improve AUC. Reverting changes.
Training on augumented user 63878 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63878 AUC after training: 0.5
User 63878 does not improve AUC. Reverting changes.
Training on augumented user 64017 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64017 AUC after training: 0.5
User 64017 does not improve AUC. Reverting changes.
Training on augumented user 14786 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14786 AUC after training: 0.5
User 14786 does not improve AUC. Reverting changes.
Training on augumented user 29737 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29737 AUC after training: 0.5
User 29737 does not improve AUC. Reverting changes.
Training on augumented user 120633 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120633 AUC after training: 0.5
User 120633 does not improve AUC. Reverting changes.
Training on augumented user 134231 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134231 AUC after training: 0.5
User 134231 does not improve AUC. Reverting changes.
Training on augumented user 13932 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13932 AUC after training: 0.5
User 13932 does not improve AUC. Reverting changes.
Training on augumented user 12506 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12506 AUC after training: 0.5
User 12506 does not improve AUC. Reverting changes.
Training on augumented user 138292 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138292 AUC after training: 0.5
User 138292 does not improve AUC. Reverting changes.
Training on augumented user 14909 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14909 AUC after training: 0.5
User 14909 does not improve AUC. Reverting changes.
Training on augumented user 16440 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16440 AUC after training: 0.5
User 16440 does not improve AUC. Reverting changes.
Training on augumented user 58523 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58523 AUC after training: 0.5
User 58523 does not improve AUC. Reverting changes.
Training on augumented user 99914 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99914 AUC after training: 0.5
User 99914 does not improve AUC. Reverting changes.
Training on augumented user 72560 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72560 AUC after training: 0.5
User 72560 does not improve AUC. Reverting changes.
Training on augumented user 7449 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7449 AUC after training: 0.5
User 7449 does not improve AUC. Reverting changes.
Training on augumented user 9985 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9985 AUC after training: 0.5
User 9985 does not improve AUC. Reverting changes.
Training on augumented user 105312 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105312 AUC after training: 0.5
User 105312 does not improve AUC. Reverting changes.
Training on augumented user 36256 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36256 AUC after training: 0.5
User 36256 does not improve AUC. Reverting changes.
Training on augumented user 91946 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91946 AUC after training: 0.5
User 91946 does not improve AUC. Reverting changes.
Training on augumented user 121868 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121868 AUC after training: 0.5
User 121868 does not improve AUC. Reverting changes.
Training on augumented user 106812 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106812 AUC after training: 0.5
User 106812 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:00:50.521348] start test user 86388 153/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:00:51.198731] start test user 86388 153/568 recall augumented users by random, augumented_users = [30660, 66438, 97539, 106503, 91070, 7495, 92542, 105406, 133492, 129325, 133540, 5593, 56559, 42209, 35378, 118222, 64943, 106189, 112365, 14573, 98948, 41879, 6343, 38696, 88092, 60457, 56122, 49015, 54280, 98373, 133803, 37610, 55314, 117029, 94755, 104720, 67976, 123610, 58319, 75027, 89810, 125195, 84215, 97355, 55233, 128148, 34485, 4716, 39727, 5530]
[2024-12-02 19:00:51.227050] user = 86388 Cloud 153/568
[2024-12-02 19:00:51.241012] user = 86388 Local 153/568
[2024-12-02 19:00:51.399412] user = 86388 Local+ 153/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:00:54.299967] user = 86388 MPDA- 153/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6675219941348974
Training on augumented user 30660 0/50 current_auc = 0.6675219941348974
User 30660 AUC after training: 0.6675219941348974
User 30660 does not improve AUC. Reverting changes.
Training on augumented user 66438 1/50 current_auc = 0.6675219941348974
User 66438 AUC after training: 0.6638563049853372
User 66438 does not improve AUC. Reverting changes.
Training on augumented user 97539 2/50 current_auc = 0.6675219941348974
User 97539 AUC after training: 0.6700879765395894
User 97539 improves AUC. Keeping the model.
Training on augumented user 106503 3/50 current_auc = 0.6700879765395894
User 106503 AUC after training: 0.6708211143695014
User 106503 improves AUC. Keeping the model.
Training on augumented user 91070 4/50 current_auc = 0.6708211143695014
User 91070 AUC after training: 0.6737536656891495
User 91070 improves AUC. Keeping the model.
Training on augumented user 7495 5/50 current_auc = 0.6737536656891495
User 7495 AUC after training: 0.6708211143695015
User 7495 does not improve AUC. Reverting changes.
Training on augumented user 92542 6/50 current_auc = 0.6737536656891495
User 92542 AUC after training: 0.6693548387096774
User 92542 does not improve AUC. Reverting changes.
Training on augumented user 105406 7/50 current_auc = 0.6737536656891495
User 105406 AUC after training: 0.6730205278592376
User 105406 does not improve AUC. Reverting changes.
Training on augumented user 133492 8/50 current_auc = 0.6737536656891495
User 133492 AUC after training: 0.6700879765395894
User 133492 does not improve AUC. Reverting changes.
Training on augumented user 129325 9/50 current_auc = 0.6737536656891495
User 129325 AUC after training: 0.6766862170087976
User 129325 improves AUC. Keeping the model.
Training on augumented user 133540 10/50 current_auc = 0.6766862170087976
User 133540 AUC after training: 0.6737536656891495
User 133540 does not improve AUC. Reverting changes.
Training on augumented user 5593 11/50 current_auc = 0.6766862170087976
User 5593 AUC after training: 0.6766862170087976
User 5593 does not improve AUC. Reverting changes.
Training on augumented user 56559 12/50 current_auc = 0.6766862170087976
User 56559 AUC after training: 0.6759530791788856
User 56559 does not improve AUC. Reverting changes.
Training on augumented user 42209 13/50 current_auc = 0.6766862170087976
User 42209 AUC after training: 0.6752199413489736
User 42209 does not improve AUC. Reverting changes.
Training on augumented user 35378 14/50 current_auc = 0.6766862170087976
User 35378 AUC after training: 0.6700879765395894
User 35378 does not improve AUC. Reverting changes.
Training on augumented user 118222 15/50 current_auc = 0.6766862170087976
User 118222 AUC after training: 0.6722873900293255
User 118222 does not improve AUC. Reverting changes.
Training on augumented user 64943 16/50 current_auc = 0.6766862170087976
User 64943 AUC after training: 0.6730205278592376
User 64943 does not improve AUC. Reverting changes.
Training on augumented user 106189 17/50 current_auc = 0.6766862170087976
User 106189 AUC after training: 0.6766862170087976
User 106189 does not improve AUC. Reverting changes.
Training on augumented user 112365 18/50 current_auc = 0.6766862170087976
User 112365 AUC after training: 0.6726539589442815
User 112365 does not improve AUC. Reverting changes.
Training on augumented user 14573 19/50 current_auc = 0.6766862170087976
User 14573 AUC after training: 0.6733870967741935
User 14573 does not improve AUC. Reverting changes.
Training on augumented user 98948 20/50 current_auc = 0.6766862170087976
User 98948 AUC after training: 0.6730205278592375
User 98948 does not improve AUC. Reverting changes.
Training on augumented user 41879 21/50 current_auc = 0.6766862170087976
User 41879 AUC after training: 0.6730205278592375
User 41879 does not improve AUC. Reverting changes.
Training on augumented user 6343 22/50 current_auc = 0.6766862170087976
User 6343 AUC after training: 0.6752199413489736
User 6343 does not improve AUC. Reverting changes.
Training on augumented user 38696 23/50 current_auc = 0.6766862170087976
User 38696 AUC after training: 0.6722873900293255
User 38696 does not improve AUC. Reverting changes.
Training on augumented user 88092 24/50 current_auc = 0.6766862170087976
User 88092 AUC after training: 0.6722873900293256
User 88092 does not improve AUC. Reverting changes.
Training on augumented user 60457 25/50 current_auc = 0.6766862170087976
User 60457 AUC after training: 0.6730205278592375
User 60457 does not improve AUC. Reverting changes.
Training on augumented user 56122 26/50 current_auc = 0.6766862170087976
User 56122 AUC after training: 0.6737536656891495
User 56122 does not improve AUC. Reverting changes.
Training on augumented user 49015 27/50 current_auc = 0.6766862170087976
User 49015 AUC after training: 0.6715542521994134
User 49015 does not improve AUC. Reverting changes.
Training on augumented user 54280 28/50 current_auc = 0.6766862170087976
User 54280 AUC after training: 0.6730205278592375
User 54280 does not improve AUC. Reverting changes.
Training on augumented user 98373 29/50 current_auc = 0.6766862170087976
User 98373 AUC after training: 0.6730205278592375
User 98373 does not improve AUC. Reverting changes.
Training on augumented user 133803 30/50 current_auc = 0.6766862170087976
User 133803 AUC after training: 0.6774193548387096
User 133803 improves AUC. Keeping the model.
Training on augumented user 37610 31/50 current_auc = 0.6774193548387096
User 37610 AUC after training: 0.6744868035190615
User 37610 does not improve AUC. Reverting changes.
Training on augumented user 55314 32/50 current_auc = 0.6774193548387096
User 55314 AUC after training: 0.6744868035190615
User 55314 does not improve AUC. Reverting changes.
Training on augumented user 117029 33/50 current_auc = 0.6774193548387096
User 117029 AUC after training: 0.6726539589442816
User 117029 does not improve AUC. Reverting changes.
Training on augumented user 94755 34/50 current_auc = 0.6774193548387096
User 94755 AUC after training: 0.6774193548387096
User 94755 does not improve AUC. Reverting changes.
Training on augumented user 104720 35/50 current_auc = 0.6774193548387096
User 104720 AUC after training: 0.6678885630498533
User 104720 does not improve AUC. Reverting changes.
Training on augumented user 67976 36/50 current_auc = 0.6774193548387096
User 67976 AUC after training: 0.6752199413489736
User 67976 does not improve AUC. Reverting changes.
Training on augumented user 123610 37/50 current_auc = 0.6774193548387096
User 123610 AUC after training: 0.6744868035190615
User 123610 does not improve AUC. Reverting changes.
Training on augumented user 58319 38/50 current_auc = 0.6774193548387096
User 58319 AUC after training: 0.6744868035190617
User 58319 does not improve AUC. Reverting changes.
Training on augumented user 75027 39/50 current_auc = 0.6774193548387096
User 75027 AUC after training: 0.6730205278592375
User 75027 does not improve AUC. Reverting changes.
Training on augumented user 89810 40/50 current_auc = 0.6774193548387096
User 89810 AUC after training: 0.6752199413489736
User 89810 does not improve AUC. Reverting changes.
Training on augumented user 125195 41/50 current_auc = 0.6774193548387096
User 125195 AUC after training: 0.6737536656891495
User 125195 does not improve AUC. Reverting changes.
Training on augumented user 84215 42/50 current_auc = 0.6774193548387096
User 84215 AUC after training: 0.6759530791788856
User 84215 does not improve AUC. Reverting changes.
Training on augumented user 97355 43/50 current_auc = 0.6774193548387096
User 97355 AUC after training: 0.6715542521994134
User 97355 does not improve AUC. Reverting changes.
Training on augumented user 55233 44/50 current_auc = 0.6774193548387096
User 55233 AUC after training: 0.6774193548387096
User 55233 does not improve AUC. Reverting changes.
Training on augumented user 128148 45/50 current_auc = 0.6774193548387096
User 128148 AUC after training: 0.6752199413489736
User 128148 does not improve AUC. Reverting changes.
Training on augumented user 34485 46/50 current_auc = 0.6774193548387096
User 34485 AUC after training: 0.6700879765395894
User 34485 does not improve AUC. Reverting changes.
Training on augumented user 4716 47/50 current_auc = 0.6774193548387096
User 4716 AUC after training: 0.6759530791788856
User 4716 does not improve AUC. Reverting changes.
Training on augumented user 39727 48/50 current_auc = 0.6774193548387096
User 39727 AUC after training: 0.6766862170087976
User 39727 does not improve AUC. Reverting changes.
Training on augumented user 5530 49/50 current_auc = 0.6774193548387096
User 5530 AUC after training: 0.6759530791788856
User 5530 does not improve AUC. Reverting changes.
[2024-12-02 19:01:25.580698] start test user 86403 154/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:01:26.030689] start test user 86403 154/568 recall augumented users by random, augumented_users = [47899, 18133, 90217, 58630, 128688, 10814, 137875, 123733, 60008, 83127, 36413, 20884, 98270, 129638, 69501, 52152, 135572, 111955, 29028, 60037, 46603, 48639, 14696, 65607, 67148, 22104, 6792, 126063, 24503, 30807, 112950, 1464, 108978, 131760, 46679, 81495, 7269, 114401, 119194, 10713, 129308, 36715, 92743, 36165, 84201, 76665, 70894, 114861, 106874, 47389]
[2024-12-02 19:01:26.045543] user = 86403 Cloud 154/568
[2024-12-02 19:01:26.054884] user = 86403 Local 154/568
[2024-12-02 19:01:26.105721] user = 86403 Local+ 154/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:01:27.903097] user = 86403 MPDA- 154/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8518518518518519
Training on augumented user 47899 0/50 current_auc = 0.8518518518518519
User 47899 AUC after training: 0.8518518518518519
User 47899 does not improve AUC. Reverting changes.
Training on augumented user 18133 1/50 current_auc = 0.8518518518518519
User 18133 AUC after training: 0.8148148148148149
User 18133 does not improve AUC. Reverting changes.
Training on augumented user 90217 2/50 current_auc = 0.8518518518518519
User 90217 AUC after training: 0.8148148148148149
User 90217 does not improve AUC. Reverting changes.
Training on augumented user 58630 3/50 current_auc = 0.8518518518518519
User 58630 AUC after training: 0.8518518518518519
User 58630 does not improve AUC. Reverting changes.
Training on augumented user 128688 4/50 current_auc = 0.8518518518518519
User 128688 AUC after training: 0.8518518518518519
User 128688 does not improve AUC. Reverting changes.
Training on augumented user 10814 5/50 current_auc = 0.8518518518518519
User 10814 AUC after training: 0.8518518518518519
User 10814 does not improve AUC. Reverting changes.
Training on augumented user 137875 6/50 current_auc = 0.8518518518518519
User 137875 AUC after training: 0.8148148148148149
User 137875 does not improve AUC. Reverting changes.
Training on augumented user 123733 7/50 current_auc = 0.8518518518518519
User 123733 AUC after training: 0.8518518518518519
User 123733 does not improve AUC. Reverting changes.
Training on augumented user 60008 8/50 current_auc = 0.8518518518518519
User 60008 AUC after training: 0.8518518518518519
User 60008 does not improve AUC. Reverting changes.
Training on augumented user 83127 9/50 current_auc = 0.8518518518518519
User 83127 AUC after training: 0.8518518518518519
User 83127 does not improve AUC. Reverting changes.
Training on augumented user 36413 10/50 current_auc = 0.8518518518518519
User 36413 AUC after training: 0.8518518518518519
User 36413 does not improve AUC. Reverting changes.
Training on augumented user 20884 11/50 current_auc = 0.8518518518518519
User 20884 AUC after training: 0.8518518518518519
User 20884 does not improve AUC. Reverting changes.
Training on augumented user 98270 12/50 current_auc = 0.8518518518518519
User 98270 AUC after training: 0.8518518518518519
User 98270 does not improve AUC. Reverting changes.
Training on augumented user 129638 13/50 current_auc = 0.8518518518518519
User 129638 AUC after training: 0.8518518518518519
User 129638 does not improve AUC. Reverting changes.
Training on augumented user 69501 14/50 current_auc = 0.8518518518518519
User 69501 AUC after training: 0.8518518518518519
User 69501 does not improve AUC. Reverting changes.
Training on augumented user 52152 15/50 current_auc = 0.8518518518518519
User 52152 AUC after training: 0.8518518518518519
User 52152 does not improve AUC. Reverting changes.
Training on augumented user 135572 16/50 current_auc = 0.8518518518518519
User 135572 AUC after training: 0.8518518518518519
User 135572 does not improve AUC. Reverting changes.
Training on augumented user 111955 17/50 current_auc = 0.8518518518518519
User 111955 AUC after training: 0.8518518518518519
User 111955 does not improve AUC. Reverting changes.
Training on augumented user 29028 18/50 current_auc = 0.8518518518518519
User 29028 AUC after training: 0.8518518518518519
User 29028 does not improve AUC. Reverting changes.
Training on augumented user 60037 19/50 current_auc = 0.8518518518518519
User 60037 AUC after training: 0.8518518518518519
User 60037 does not improve AUC. Reverting changes.
Training on augumented user 46603 20/50 current_auc = 0.8518518518518519
User 46603 AUC after training: 0.8518518518518519
User 46603 does not improve AUC. Reverting changes.
Training on augumented user 48639 21/50 current_auc = 0.8518518518518519
User 48639 AUC after training: 0.8518518518518519
User 48639 does not improve AUC. Reverting changes.
Training on augumented user 14696 22/50 current_auc = 0.8518518518518519
User 14696 AUC after training: 0.8518518518518519
User 14696 does not improve AUC. Reverting changes.
Training on augumented user 65607 23/50 current_auc = 0.8518518518518519
User 65607 AUC after training: 0.7962962962962964
User 65607 does not improve AUC. Reverting changes.
Training on augumented user 67148 24/50 current_auc = 0.8518518518518519
User 67148 AUC after training: 0.7962962962962964
User 67148 does not improve AUC. Reverting changes.
Training on augumented user 22104 25/50 current_auc = 0.8518518518518519
User 22104 AUC after training: 0.8518518518518519
User 22104 does not improve AUC. Reverting changes.
Training on augumented user 6792 26/50 current_auc = 0.8518518518518519
User 6792 AUC after training: 0.8518518518518519
User 6792 does not improve AUC. Reverting changes.
Training on augumented user 126063 27/50 current_auc = 0.8518518518518519
User 126063 AUC after training: 0.8518518518518519
User 126063 does not improve AUC. Reverting changes.
Training on augumented user 24503 28/50 current_auc = 0.8518518518518519
User 24503 AUC after training: 0.8518518518518519
User 24503 does not improve AUC. Reverting changes.
Training on augumented user 30807 29/50 current_auc = 0.8518518518518519
User 30807 AUC after training: 0.8518518518518519
User 30807 does not improve AUC. Reverting changes.
Training on augumented user 112950 30/50 current_auc = 0.8518518518518519
User 112950 AUC after training: 0.8518518518518519
User 112950 does not improve AUC. Reverting changes.
Training on augumented user 1464 31/50 current_auc = 0.8518518518518519
User 1464 AUC after training: 0.8518518518518519
User 1464 does not improve AUC. Reverting changes.
Training on augumented user 108978 32/50 current_auc = 0.8518518518518519
User 108978 AUC after training: 0.8518518518518519
User 108978 does not improve AUC. Reverting changes.
Training on augumented user 131760 33/50 current_auc = 0.8518518518518519
User 131760 AUC after training: 0.8518518518518519
User 131760 does not improve AUC. Reverting changes.
Training on augumented user 46679 34/50 current_auc = 0.8518518518518519
User 46679 AUC after training: 0.8518518518518519
User 46679 does not improve AUC. Reverting changes.
Training on augumented user 81495 35/50 current_auc = 0.8518518518518519
User 81495 AUC after training: 0.8518518518518519
User 81495 does not improve AUC. Reverting changes.
Training on augumented user 7269 36/50 current_auc = 0.8518518518518519
User 7269 AUC after training: 0.8518518518518519
User 7269 does not improve AUC. Reverting changes.
Training on augumented user 114401 37/50 current_auc = 0.8518518518518519
User 114401 AUC after training: 0.8518518518518519
User 114401 does not improve AUC. Reverting changes.
Training on augumented user 119194 38/50 current_auc = 0.8518518518518519
User 119194 AUC after training: 0.8518518518518519
User 119194 does not improve AUC. Reverting changes.
Training on augumented user 10713 39/50 current_auc = 0.8518518518518519
User 10713 AUC after training: 0.8518518518518519
User 10713 does not improve AUC. Reverting changes.
Training on augumented user 129308 40/50 current_auc = 0.8518518518518519
User 129308 AUC after training: 0.8518518518518519
User 129308 does not improve AUC. Reverting changes.
Training on augumented user 36715 41/50 current_auc = 0.8518518518518519
User 36715 AUC after training: 0.8518518518518519
User 36715 does not improve AUC. Reverting changes.
Training on augumented user 92743 42/50 current_auc = 0.8518518518518519
User 92743 AUC after training: 0.8518518518518519
User 92743 does not improve AUC. Reverting changes.
Training on augumented user 36165 43/50 current_auc = 0.8518518518518519
User 36165 AUC after training: 0.8518518518518519
User 36165 does not improve AUC. Reverting changes.
Training on augumented user 84201 44/50 current_auc = 0.8518518518518519
User 84201 AUC after training: 0.8518518518518519
User 84201 does not improve AUC. Reverting changes.
Training on augumented user 76665 45/50 current_auc = 0.8518518518518519
User 76665 AUC after training: 0.8518518518518519
User 76665 does not improve AUC. Reverting changes.
Training on augumented user 70894 46/50 current_auc = 0.8518518518518519
User 70894 AUC after training: 0.8518518518518519
User 70894 does not improve AUC. Reverting changes.
Training on augumented user 114861 47/50 current_auc = 0.8518518518518519
User 114861 AUC after training: 0.8518518518518519
User 114861 does not improve AUC. Reverting changes.
Training on augumented user 106874 48/50 current_auc = 0.8518518518518519
User 106874 AUC after training: 0.8518518518518519
User 106874 does not improve AUC. Reverting changes.
Training on augumented user 47389 49/50 current_auc = 0.8518518518518519
User 47389 AUC after training: 0.8518518518518519
User 47389 does not improve AUC. Reverting changes.
[2024-12-02 19:01:59.424322] start test user 86410 155/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:02:00.007197] start test user 86410 155/568 recall augumented users by random, augumented_users = [17393, 30441, 75214, 27950, 37946, 7426, 121465, 6826, 97874, 33901, 125398, 45782, 124049, 102712, 124102, 91344, 47685, 11426, 6817, 43323, 19423, 112937, 47372, 105203, 7931, 63482, 61186, 96489, 70139, 50605, 72254, 71611, 7711, 97373, 78957, 35390, 93349, 93846, 106228, 73471, 14243, 104273, 33691, 35072, 133242, 64845, 6791, 65235, 63242, 109952]
[2024-12-02 19:02:00.022502] user = 86410 Cloud 155/568
[2024-12-02 19:02:00.064070] user = 86410 Local 155/568
[2024-12-02 19:02:00.289651] user = 86410 Local+ 155/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:02:04.394277] user = 86410 MPDA- 155/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5987068965517242
Training on augumented user 17393 0/50 current_auc = 0.5987068965517242
User 17393 AUC after training: 0.5987068965517242
User 17393 does not improve AUC. Reverting changes.
Training on augumented user 30441 1/50 current_auc = 0.5987068965517242
User 30441 AUC after training: 0.5978448275862069
User 30441 does not improve AUC. Reverting changes.
Training on augumented user 75214 2/50 current_auc = 0.5987068965517242
User 75214 AUC after training: 0.5987068965517242
User 75214 does not improve AUC. Reverting changes.
Training on augumented user 27950 3/50 current_auc = 0.5987068965517242
User 27950 AUC after training: 0.5987068965517242
User 27950 does not improve AUC. Reverting changes.
Training on augumented user 37946 4/50 current_auc = 0.5987068965517242
User 37946 AUC after training: 0.5991379310344828
User 37946 improves AUC. Keeping the model.
Training on augumented user 7426 5/50 current_auc = 0.5991379310344828
User 7426 AUC after training: 0.5991379310344828
User 7426 does not improve AUC. Reverting changes.
Training on augumented user 121465 6/50 current_auc = 0.5991379310344828
User 121465 AUC after training: 0.6
User 121465 improves AUC. Keeping the model.
Training on augumented user 6826 7/50 current_auc = 0.6
User 6826 AUC after training: 0.5995689655172414
User 6826 does not improve AUC. Reverting changes.
Training on augumented user 97874 8/50 current_auc = 0.6
User 97874 AUC after training: 0.5995689655172414
User 97874 does not improve AUC. Reverting changes.
Training on augumented user 33901 9/50 current_auc = 0.6
User 33901 AUC after training: 0.5991379310344827
User 33901 does not improve AUC. Reverting changes.
Training on augumented user 125398 10/50 current_auc = 0.6
User 125398 AUC after training: 0.5995689655172414
User 125398 does not improve AUC. Reverting changes.
Training on augumented user 45782 11/50 current_auc = 0.6
User 45782 AUC after training: 0.6004310344827586
User 45782 improves AUC. Keeping the model.
Training on augumented user 124049 12/50 current_auc = 0.6004310344827586
User 124049 AUC after training: 0.6004310344827586
User 124049 does not improve AUC. Reverting changes.
Training on augumented user 102712 13/50 current_auc = 0.6004310344827586
User 102712 AUC after training: 0.6004310344827586
User 102712 does not improve AUC. Reverting changes.
Training on augumented user 124102 14/50 current_auc = 0.6004310344827586
User 124102 AUC after training: 0.5995689655172414
User 124102 does not improve AUC. Reverting changes.
Training on augumented user 91344 15/50 current_auc = 0.6004310344827586
User 91344 AUC after training: 0.5995689655172414
User 91344 does not improve AUC. Reverting changes.
Training on augumented user 47685 16/50 current_auc = 0.6004310344827586
User 47685 AUC after training: 0.6012931034482759
User 47685 improves AUC. Keeping the model.
Training on augumented user 11426 17/50 current_auc = 0.6012931034482759
User 11426 AUC after training: 0.6004310344827586
User 11426 does not improve AUC. Reverting changes.
Training on augumented user 6817 18/50 current_auc = 0.6012931034482759
User 6817 AUC after training: 0.6017241379310345
User 6817 improves AUC. Keeping the model.
Training on augumented user 43323 19/50 current_auc = 0.6017241379310345
User 43323 AUC after training: 0.6012931034482759
User 43323 does not improve AUC. Reverting changes.
Training on augumented user 19423 20/50 current_auc = 0.6017241379310345
User 19423 AUC after training: 0.6012931034482759
User 19423 does not improve AUC. Reverting changes.
Training on augumented user 112937 21/50 current_auc = 0.6017241379310345
User 112937 AUC after training: 0.6000000000000001
User 112937 does not improve AUC. Reverting changes.
Training on augumented user 47372 22/50 current_auc = 0.6017241379310345
User 47372 AUC after training: 0.6017241379310345
User 47372 does not improve AUC. Reverting changes.
Training on augumented user 105203 23/50 current_auc = 0.6017241379310345
User 105203 AUC after training: 0.6012931034482759
User 105203 does not improve AUC. Reverting changes.
Training on augumented user 7931 24/50 current_auc = 0.6017241379310345
User 7931 AUC after training: 0.6012931034482758
User 7931 does not improve AUC. Reverting changes.
Training on augumented user 63482 25/50 current_auc = 0.6017241379310345
User 63482 AUC after training: 0.5995689655172414
User 63482 does not improve AUC. Reverting changes.
Training on augumented user 61186 26/50 current_auc = 0.6017241379310345
User 61186 AUC after training: 0.6004310344827586
User 61186 does not improve AUC. Reverting changes.
Training on augumented user 96489 27/50 current_auc = 0.6017241379310345
User 96489 AUC after training: 0.6017241379310345
User 96489 does not improve AUC. Reverting changes.
Training on augumented user 70139 28/50 current_auc = 0.6017241379310345
User 70139 AUC after training: 0.6008620689655173
User 70139 does not improve AUC. Reverting changes.
Training on augumented user 50605 29/50 current_auc = 0.6017241379310345
User 50605 AUC after training: 0.6012931034482759
User 50605 does not improve AUC. Reverting changes.
Training on augumented user 72254 30/50 current_auc = 0.6017241379310345
User 72254 AUC after training: 0.6008620689655173
User 72254 does not improve AUC. Reverting changes.
Training on augumented user 71611 31/50 current_auc = 0.6017241379310345
User 71611 AUC after training: 0.6012931034482759
User 71611 does not improve AUC. Reverting changes.
Training on augumented user 7711 32/50 current_auc = 0.6017241379310345
User 7711 AUC after training: 0.6008620689655173
User 7711 does not improve AUC. Reverting changes.
Training on augumented user 97373 33/50 current_auc = 0.6017241379310345
User 97373 AUC after training: 0.6008620689655173
User 97373 does not improve AUC. Reverting changes.
Training on augumented user 78957 34/50 current_auc = 0.6017241379310345
User 78957 AUC after training: 0.5987068965517242
User 78957 does not improve AUC. Reverting changes.
Training on augumented user 35390 35/50 current_auc = 0.6017241379310345
User 35390 AUC after training: 0.6008620689655173
User 35390 does not improve AUC. Reverting changes.
Training on augumented user 93349 36/50 current_auc = 0.6017241379310345
User 93349 AUC after training: 0.6017241379310345
User 93349 does not improve AUC. Reverting changes.
Training on augumented user 93846 37/50 current_auc = 0.6017241379310345
User 93846 AUC after training: 0.6017241379310345
User 93846 does not improve AUC. Reverting changes.
Training on augumented user 106228 38/50 current_auc = 0.6017241379310345
User 106228 AUC after training: 0.6008620689655173
User 106228 does not improve AUC. Reverting changes.
Training on augumented user 73471 39/50 current_auc = 0.6017241379310345
User 73471 AUC after training: 0.6008620689655173
User 73471 does not improve AUC. Reverting changes.
Training on augumented user 14243 40/50 current_auc = 0.6017241379310345
User 14243 AUC after training: 0.6008620689655173
User 14243 does not improve AUC. Reverting changes.
Training on augumented user 104273 41/50 current_auc = 0.6017241379310345
User 104273 AUC after training: 0.6008620689655173
User 104273 does not improve AUC. Reverting changes.
Training on augumented user 33691 42/50 current_auc = 0.6017241379310345
User 33691 AUC after training: 0.6008620689655173
User 33691 does not improve AUC. Reverting changes.
Training on augumented user 35072 43/50 current_auc = 0.6017241379310345
User 35072 AUC after training: 0.6008620689655173
User 35072 does not improve AUC. Reverting changes.
Training on augumented user 133242 44/50 current_auc = 0.6017241379310345
User 133242 AUC after training: 0.6012931034482759
User 133242 does not improve AUC. Reverting changes.
Training on augumented user 64845 45/50 current_auc = 0.6017241379310345
User 64845 AUC after training: 0.6012931034482759
User 64845 does not improve AUC. Reverting changes.
Training on augumented user 6791 46/50 current_auc = 0.6017241379310345
User 6791 AUC after training: 0.6004310344827586
User 6791 does not improve AUC. Reverting changes.
Training on augumented user 65235 47/50 current_auc = 0.6017241379310345
User 65235 AUC after training: 0.5987068965517242
User 65235 does not improve AUC. Reverting changes.
Training on augumented user 63242 48/50 current_auc = 0.6017241379310345
User 63242 AUC after training: 0.6012931034482759
User 63242 does not improve AUC. Reverting changes.
Training on augumented user 109952 49/50 current_auc = 0.6017241379310345
User 109952 AUC after training: 0.6008620689655173
User 109952 does not improve AUC. Reverting changes.
[2024-12-02 19:02:33.907800] start test user 86449 156/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:02:34.921855] start test user 86449 156/568 recall augumented users by random, augumented_users = [92223, 45318, 58602, 112700, 9157, 92590, 2514, 109973, 137553, 131189, 125444, 127927, 86970, 91770, 81155, 131029, 138452, 29852, 44286, 118244, 36778, 5582, 6748, 6944, 37095, 53598, 98261, 72087, 92762, 96267, 63629, 102119, 2087, 125509, 39532, 64919, 126648, 39145, 79013, 106963, 118566, 45232, 73973, 131382, 51919, 117022, 43371, 48004, 55079, 131875]
[2024-12-02 19:02:34.938688] user = 86449 Cloud 156/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:02:34.957807] user = 86449 Local 156/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:02:34.990474] user = 86449 Local+ 156/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:02:36.968910] user = 86449 MPDA- 156/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 92223 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92223 AUC after training: 0.5
User 92223 does not improve AUC. Reverting changes.
Training on augumented user 45318 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45318 AUC after training: 0.5
User 45318 does not improve AUC. Reverting changes.
Training on augumented user 58602 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58602 AUC after training: 0.5
User 58602 does not improve AUC. Reverting changes.
Training on augumented user 112700 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112700 AUC after training: 0.5
User 112700 does not improve AUC. Reverting changes.
Training on augumented user 9157 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9157 AUC after training: 0.5
User 9157 does not improve AUC. Reverting changes.
Training on augumented user 92590 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92590 AUC after training: 0.5
User 92590 does not improve AUC. Reverting changes.
Training on augumented user 2514 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2514 AUC after training: 0.5
User 2514 does not improve AUC. Reverting changes.
Training on augumented user 109973 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109973 AUC after training: 0.5
User 109973 does not improve AUC. Reverting changes.
Training on augumented user 137553 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137553 AUC after training: 0.5
User 137553 does not improve AUC. Reverting changes.
Training on augumented user 131189 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131189 AUC after training: 0.5
User 131189 does not improve AUC. Reverting changes.
Training on augumented user 125444 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125444 AUC after training: 0.5
User 125444 does not improve AUC. Reverting changes.
Training on augumented user 127927 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127927 AUC after training: 0.5
User 127927 does not improve AUC. Reverting changes.
Training on augumented user 86970 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86970 AUC after training: 0.5
User 86970 does not improve AUC. Reverting changes.
Training on augumented user 91770 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91770 AUC after training: 0.5
User 91770 does not improve AUC. Reverting changes.
Training on augumented user 81155 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81155 AUC after training: 0.5
User 81155 does not improve AUC. Reverting changes.
Training on augumented user 131029 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131029 AUC after training: 0.5
User 131029 does not improve AUC. Reverting changes.
Training on augumented user 138452 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138452 AUC after training: 0.5
User 138452 does not improve AUC. Reverting changes.
Training on augumented user 29852 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29852 AUC after training: 0.5
User 29852 does not improve AUC. Reverting changes.
Training on augumented user 44286 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44286 AUC after training: 0.5
User 44286 does not improve AUC. Reverting changes.
Training on augumented user 118244 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118244 AUC after training: 0.5
User 118244 does not improve AUC. Reverting changes.
Training on augumented user 36778 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36778 AUC after training: 0.5
User 36778 does not improve AUC. Reverting changes.
Training on augumented user 5582 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5582 AUC after training: 0.5
User 5582 does not improve AUC. Reverting changes.
Training on augumented user 6748 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6748 AUC after training: 0.5
User 6748 does not improve AUC. Reverting changes.
Training on augumented user 6944 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6944 AUC after training: 0.5
User 6944 does not improve AUC. Reverting changes.
Training on augumented user 37095 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37095 AUC after training: 0.5
User 37095 does not improve AUC. Reverting changes.
Training on augumented user 53598 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53598 AUC after training: 0.5
User 53598 does not improve AUC. Reverting changes.
Training on augumented user 98261 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98261 AUC after training: 0.5
User 98261 does not improve AUC. Reverting changes.
Training on augumented user 72087 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72087 AUC after training: 0.5
User 72087 does not improve AUC. Reverting changes.
Training on augumented user 92762 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92762 AUC after training: 0.5
User 92762 does not improve AUC. Reverting changes.
Training on augumented user 96267 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96267 AUC after training: 0.5
User 96267 does not improve AUC. Reverting changes.
Training on augumented user 63629 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63629 AUC after training: 0.5
User 63629 does not improve AUC. Reverting changes.
Training on augumented user 102119 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102119 AUC after training: 0.5
User 102119 does not improve AUC. Reverting changes.
Training on augumented user 2087 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2087 AUC after training: 0.5
User 2087 does not improve AUC. Reverting changes.
Training on augumented user 125509 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125509 AUC after training: 0.5
User 125509 does not improve AUC. Reverting changes.
Training on augumented user 39532 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39532 AUC after training: 0.5
User 39532 does not improve AUC. Reverting changes.
Training on augumented user 64919 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64919 AUC after training: 0.5
User 64919 does not improve AUC. Reverting changes.
Training on augumented user 126648 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126648 AUC after training: 0.5
User 126648 does not improve AUC. Reverting changes.
Training on augumented user 39145 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39145 AUC after training: 0.5
User 39145 does not improve AUC. Reverting changes.
Training on augumented user 79013 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79013 AUC after training: 0.5
User 79013 does not improve AUC. Reverting changes.
Training on augumented user 106963 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106963 AUC after training: 0.5
User 106963 does not improve AUC. Reverting changes.
Training on augumented user 118566 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118566 AUC after training: 0.5
User 118566 does not improve AUC. Reverting changes.
Training on augumented user 45232 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45232 AUC after training: 0.5
User 45232 does not improve AUC. Reverting changes.
Training on augumented user 73973 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73973 AUC after training: 0.5
User 73973 does not improve AUC. Reverting changes.
Training on augumented user 131382 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131382 AUC after training: 0.5
User 131382 does not improve AUC. Reverting changes.
Training on augumented user 51919 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51919 AUC after training: 0.5
User 51919 does not improve AUC. Reverting changes.
Training on augumented user 117022 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117022 AUC after training: 0.5
User 117022 does not improve AUC. Reverting changes.
Training on augumented user 43371 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43371 AUC after training: 0.5
User 43371 does not improve AUC. Reverting changes.
Training on augumented user 48004 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48004 AUC after training: 0.5
User 48004 does not improve AUC. Reverting changes.
Training on augumented user 55079 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55079 AUC after training: 0.5
User 55079 does not improve AUC. Reverting changes.
Training on augumented user 131875 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131875 AUC after training: 0.5
User 131875 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:03:07.670882] start test user 86461 157/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:03:08.139913] start test user 86461 157/568 recall augumented users by random, augumented_users = [223, 2829, 45809, 113349, 79152, 117222, 36054, 2994, 26648, 80851, 50901, 26754, 87399, 35196, 58063, 75728, 57664, 105833, 67463, 115576, 35514, 81875, 6272, 107675, 402, 92743, 95493, 130032, 104220, 37921, 50585, 102976, 94975, 128973, 38752, 14388, 38950, 79483, 45460, 12832, 63790, 38767, 116650, 88836, 106155, 94795, 72721, 70376, 121910, 38647]
[2024-12-02 19:03:08.154632] user = 86461 Cloud 157/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:03:08.171376] user = 86461 Local 157/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:03:08.255602] user = 86461 Local+ 157/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:03:11.915048] user = 86461 MPDA- 157/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 223 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 223 AUC after training: 0.5
User 223 does not improve AUC. Reverting changes.
Training on augumented user 2829 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2829 AUC after training: 0.5
User 2829 does not improve AUC. Reverting changes.
Training on augumented user 45809 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45809 AUC after training: 0.5
User 45809 does not improve AUC. Reverting changes.
Training on augumented user 113349 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113349 AUC after training: 0.5
User 113349 does not improve AUC. Reverting changes.
Training on augumented user 79152 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79152 AUC after training: 0.5
User 79152 does not improve AUC. Reverting changes.
Training on augumented user 117222 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117222 AUC after training: 0.5
User 117222 does not improve AUC. Reverting changes.
Training on augumented user 36054 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36054 AUC after training: 0.5
User 36054 does not improve AUC. Reverting changes.
Training on augumented user 2994 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2994 AUC after training: 0.5
User 2994 does not improve AUC. Reverting changes.
Training on augumented user 26648 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26648 AUC after training: 0.5
User 26648 does not improve AUC. Reverting changes.
Training on augumented user 80851 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80851 AUC after training: 0.5
User 80851 does not improve AUC. Reverting changes.
Training on augumented user 50901 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50901 AUC after training: 0.5
User 50901 does not improve AUC. Reverting changes.
Training on augumented user 26754 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26754 AUC after training: 0.5
User 26754 does not improve AUC. Reverting changes.
Training on augumented user 87399 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87399 AUC after training: 0.5
User 87399 does not improve AUC. Reverting changes.
Training on augumented user 35196 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35196 AUC after training: 0.5
User 35196 does not improve AUC. Reverting changes.
Training on augumented user 58063 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58063 AUC after training: 0.5
User 58063 does not improve AUC. Reverting changes.
Training on augumented user 75728 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75728 AUC after training: 0.5
User 75728 does not improve AUC. Reverting changes.
Training on augumented user 57664 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57664 AUC after training: 0.5
User 57664 does not improve AUC. Reverting changes.
Training on augumented user 105833 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105833 AUC after training: 0.5
User 105833 does not improve AUC. Reverting changes.
Training on augumented user 67463 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67463 AUC after training: 0.5
User 67463 does not improve AUC. Reverting changes.
Training on augumented user 115576 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115576 AUC after training: 0.5
User 115576 does not improve AUC. Reverting changes.
Training on augumented user 35514 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35514 AUC after training: 0.5
User 35514 does not improve AUC. Reverting changes.
Training on augumented user 81875 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81875 AUC after training: 0.5
User 81875 does not improve AUC. Reverting changes.
Training on augumented user 6272 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6272 AUC after training: 0.5
User 6272 does not improve AUC. Reverting changes.
Training on augumented user 107675 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107675 AUC after training: 0.5
User 107675 does not improve AUC. Reverting changes.
Training on augumented user 402 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 402 AUC after training: 0.5
User 402 does not improve AUC. Reverting changes.
Training on augumented user 92743 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92743 AUC after training: 0.5
User 92743 does not improve AUC. Reverting changes.
Training on augumented user 95493 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95493 AUC after training: 0.5
User 95493 does not improve AUC. Reverting changes.
Training on augumented user 130032 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130032 AUC after training: 0.5
User 130032 does not improve AUC. Reverting changes.
Training on augumented user 104220 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104220 AUC after training: 0.5
User 104220 does not improve AUC. Reverting changes.
Training on augumented user 37921 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37921 AUC after training: 0.5
User 37921 does not improve AUC. Reverting changes.
Training on augumented user 50585 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50585 AUC after training: 0.5
User 50585 does not improve AUC. Reverting changes.
Training on augumented user 102976 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102976 AUC after training: 0.5
User 102976 does not improve AUC. Reverting changes.
Training on augumented user 94975 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94975 AUC after training: 0.5
User 94975 does not improve AUC. Reverting changes.
Training on augumented user 128973 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128973 AUC after training: 0.5
User 128973 does not improve AUC. Reverting changes.
Training on augumented user 38752 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38752 AUC after training: 0.5
User 38752 does not improve AUC. Reverting changes.
Training on augumented user 14388 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14388 AUC after training: 0.5
User 14388 does not improve AUC. Reverting changes.
Training on augumented user 38950 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38950 AUC after training: 0.5
User 38950 does not improve AUC. Reverting changes.
Training on augumented user 79483 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79483 AUC after training: 0.5
User 79483 does not improve AUC. Reverting changes.
Training on augumented user 45460 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45460 AUC after training: 0.5
User 45460 does not improve AUC. Reverting changes.
Training on augumented user 12832 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12832 AUC after training: 0.5
User 12832 does not improve AUC. Reverting changes.
Training on augumented user 63790 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63790 AUC after training: 0.5
User 63790 does not improve AUC. Reverting changes.
Training on augumented user 38767 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38767 AUC after training: 0.5
User 38767 does not improve AUC. Reverting changes.
Training on augumented user 116650 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116650 AUC after training: 0.5
User 116650 does not improve AUC. Reverting changes.
Training on augumented user 88836 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88836 AUC after training: 0.5
User 88836 does not improve AUC. Reverting changes.
Training on augumented user 106155 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106155 AUC after training: 0.5
User 106155 does not improve AUC. Reverting changes.
Training on augumented user 94795 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94795 AUC after training: 0.5
User 94795 does not improve AUC. Reverting changes.
Training on augumented user 72721 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72721 AUC after training: 0.5
User 72721 does not improve AUC. Reverting changes.
Training on augumented user 70376 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70376 AUC after training: 0.5
User 70376 does not improve AUC. Reverting changes.
Training on augumented user 121910 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121910 AUC after training: 0.5
User 121910 does not improve AUC. Reverting changes.
Training on augumented user 38647 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38647 AUC after training: 0.5
User 38647 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:03:44.223396] start test user 86467 158/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:03:44.738477] start test user 86467 158/568 recall augumented users by random, augumented_users = [82629, 1889, 25909, 24675, 6614, 100996, 105287, 84024, 73554, 93015, 57384, 116127, 64272, 64860, 10865, 115096, 13899, 89379, 31800, 46063, 62917, 100244, 76931, 87830, 33185, 111394, 132373, 79394, 126500, 6635, 74311, 6580, 11955, 70778, 3336, 82289, 114750, 10614, 11179, 103648, 86719, 19292, 53571, 132724, 90277, 24512, 128963, 134144, 14, 29415]
[2024-12-02 19:03:44.753618] user = 86467 Cloud 158/568
[2024-12-02 19:03:44.768657] user = 86467 Local 158/568
[2024-12-02 19:03:44.811717] user = 86467 Local+ 158/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:03:47.525819] user = 86467 MPDA- 158/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6613627090983272
Training on augumented user 82629 0/50 current_auc = 0.6613627090983272
User 82629 AUC after training: 0.6597307221542228
User 82629 does not improve AUC. Reverting changes.
Training on augumented user 1889 1/50 current_auc = 0.6613627090983272
User 1889 AUC after training: 0.6597307221542227
User 1889 does not improve AUC. Reverting changes.
Training on augumented user 25909 2/50 current_auc = 0.6613627090983272
User 25909 AUC after training: 0.6613627090983272
User 25909 does not improve AUC. Reverting changes.
Training on augumented user 24675 3/50 current_auc = 0.6613627090983272
User 24675 AUC after training: 0.6613627090983272
User 24675 does not improve AUC. Reverting changes.
Training on augumented user 6614 4/50 current_auc = 0.6613627090983272
User 6614 AUC after training: 0.660546715626275
User 6614 does not improve AUC. Reverting changes.
Training on augumented user 100996 5/50 current_auc = 0.6613627090983272
User 100996 AUC after training: 0.663810689514484
User 100996 improves AUC. Keeping the model.
Training on augumented user 105287 6/50 current_auc = 0.663810689514484
User 105287 AUC after training: 0.6593227254181966
User 105287 does not improve AUC. Reverting changes.
Training on augumented user 84024 7/50 current_auc = 0.663810689514484
User 84024 AUC after training: 0.660546715626275
User 84024 does not improve AUC. Reverting changes.
Training on augumented user 73554 8/50 current_auc = 0.663810689514484
User 73554 AUC after training: 0.6609547123623011
User 73554 does not improve AUC. Reverting changes.
Training on augumented user 93015 9/50 current_auc = 0.663810689514484
User 93015 AUC after training: 0.6617707058343534
User 93015 does not improve AUC. Reverting changes.
Training on augumented user 57384 10/50 current_auc = 0.663810689514484
User 57384 AUC after training: 0.663810689514484
User 57384 does not improve AUC. Reverting changes.
Training on augumented user 116127 11/50 current_auc = 0.663810689514484
User 116127 AUC after training: 0.6613627090983272
User 116127 does not improve AUC. Reverting changes.
Training on augumented user 64272 12/50 current_auc = 0.663810689514484
User 64272 AUC after training: 0.6625866993064056
User 64272 does not improve AUC. Reverting changes.
Training on augumented user 64860 13/50 current_auc = 0.663810689514484
User 64860 AUC after training: 0.6552427580579355
User 64860 does not improve AUC. Reverting changes.
Training on augumented user 10865 14/50 current_auc = 0.663810689514484
User 10865 AUC after training: 0.6638106895144839
User 10865 does not improve AUC. Reverting changes.
Training on augumented user 115096 15/50 current_auc = 0.663810689514484
User 115096 AUC after training: 0.66421868625051
User 115096 improves AUC. Keeping the model.
Training on augumented user 13899 16/50 current_auc = 0.66421868625051
User 13899 AUC after training: 0.6621787025703794
User 13899 does not improve AUC. Reverting changes.
Training on augumented user 89379 17/50 current_auc = 0.66421868625051
User 89379 AUC after training: 0.6609547123623011
User 89379 does not improve AUC. Reverting changes.
Training on augumented user 31800 18/50 current_auc = 0.66421868625051
User 31800 AUC after training: 0.6625866993064056
User 31800 does not improve AUC. Reverting changes.
Training on augumented user 46063 19/50 current_auc = 0.66421868625051
User 46063 AUC after training: 0.6609547123623011
User 46063 does not improve AUC. Reverting changes.
Training on augumented user 62917 20/50 current_auc = 0.66421868625051
User 62917 AUC after training: 0.6593227254181966
User 62917 does not improve AUC. Reverting changes.
Training on augumented user 100244 21/50 current_auc = 0.66421868625051
User 100244 AUC after training: 0.6617707058343534
User 100244 does not improve AUC. Reverting changes.
Training on augumented user 76931 22/50 current_auc = 0.66421868625051
User 76931 AUC after training: 0.6638106895144839
User 76931 does not improve AUC. Reverting changes.
Training on augumented user 87830 23/50 current_auc = 0.66421868625051
User 87830 AUC after training: 0.66421868625051
User 87830 does not improve AUC. Reverting changes.
Training on augumented user 33185 24/50 current_auc = 0.66421868625051
User 33185 AUC after training: 0.6625866993064056
User 33185 does not improve AUC. Reverting changes.
Training on augumented user 111394 25/50 current_auc = 0.66421868625051
User 111394 AUC after training: 0.6617707058343534
User 111394 does not improve AUC. Reverting changes.
Training on augumented user 132373 26/50 current_auc = 0.66421868625051
User 132373 AUC after training: 0.6621787025703795
User 132373 does not improve AUC. Reverting changes.
Training on augumented user 79394 27/50 current_auc = 0.66421868625051
User 79394 AUC after training: 0.6625866993064056
User 79394 does not improve AUC. Reverting changes.
Training on augumented user 126500 28/50 current_auc = 0.66421868625051
User 126500 AUC after training: 0.6609547123623011
User 126500 does not improve AUC. Reverting changes.
Training on augumented user 6635 29/50 current_auc = 0.66421868625051
User 6635 AUC after training: 0.6646266829865362
User 6635 improves AUC. Keeping the model.
Training on augumented user 74311 30/50 current_auc = 0.6646266829865362
User 74311 AUC after training: 0.6609547123623012
User 74311 does not improve AUC. Reverting changes.
Training on augumented user 6580 31/50 current_auc = 0.6646266829865362
User 6580 AUC after training: 0.6613627090983272
User 6580 does not improve AUC. Reverting changes.
Training on augumented user 11955 32/50 current_auc = 0.6646266829865362
User 11955 AUC after training: 0.66421868625051
User 11955 does not improve AUC. Reverting changes.
Training on augumented user 70778 33/50 current_auc = 0.6646266829865362
User 70778 AUC after training: 0.6646266829865362
User 70778 does not improve AUC. Reverting changes.
Training on augumented user 3336 34/50 current_auc = 0.6646266829865362
User 3336 AUC after training: 0.66421868625051
User 3336 does not improve AUC. Reverting changes.
Training on augumented user 82289 35/50 current_auc = 0.6646266829865362
User 82289 AUC after training: 0.6621787025703794
User 82289 does not improve AUC. Reverting changes.
Training on augumented user 114750 36/50 current_auc = 0.6646266829865362
User 114750 AUC after training: 0.6621787025703794
User 114750 does not improve AUC. Reverting changes.
Training on augumented user 10614 37/50 current_auc = 0.6646266829865362
User 10614 AUC after training: 0.6650346797225622
User 10614 improves AUC. Keeping the model.
Training on augumented user 11179 38/50 current_auc = 0.6650346797225622
User 11179 AUC after training: 0.6646266829865362
User 11179 does not improve AUC. Reverting changes.
Training on augumented user 103648 39/50 current_auc = 0.6650346797225622
User 103648 AUC after training: 0.66421868625051
User 103648 does not improve AUC. Reverting changes.
Training on augumented user 86719 40/50 current_auc = 0.6650346797225622
User 86719 AUC after training: 0.660546715626275
User 86719 does not improve AUC. Reverting changes.
Training on augumented user 19292 41/50 current_auc = 0.6650346797225622
User 19292 AUC after training: 0.6609547123623012
User 19292 does not improve AUC. Reverting changes.
Training on augumented user 53571 42/50 current_auc = 0.6650346797225622
User 53571 AUC after training: 0.6625866993064056
User 53571 does not improve AUC. Reverting changes.
Training on augumented user 132724 43/50 current_auc = 0.6650346797225622
User 132724 AUC after training: 0.6621787025703794
User 132724 does not improve AUC. Reverting changes.
Training on augumented user 90277 44/50 current_auc = 0.6650346797225622
User 90277 AUC after training: 0.6629946960424317
User 90277 does not improve AUC. Reverting changes.
Training on augumented user 24512 45/50 current_auc = 0.6650346797225622
User 24512 AUC after training: 0.663810689514484
User 24512 does not improve AUC. Reverting changes.
Training on augumented user 128963 46/50 current_auc = 0.6650346797225622
User 128963 AUC after training: 0.66421868625051
User 128963 does not improve AUC. Reverting changes.
Training on augumented user 134144 47/50 current_auc = 0.6650346797225622
User 134144 AUC after training: 0.6593227254181966
User 134144 does not improve AUC. Reverting changes.
Training on augumented user 14 48/50 current_auc = 0.6650346797225622
User 14 AUC after training: 0.6625866993064056
User 14 does not improve AUC. Reverting changes.
Training on augumented user 29415 49/50 current_auc = 0.6650346797225622
User 29415 AUC after training: 0.6625866993064056
User 29415 does not improve AUC. Reverting changes.
[2024-12-02 19:04:16.952582] start test user 86477 159/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:04:17.477672] start test user 86477 159/568 recall augumented users by random, augumented_users = [38177, 117470, 7506, 61492, 91329, 70341, 91328, 99374, 132038, 114501, 110444, 9424, 30014, 17235, 25602, 113719, 64345, 110669, 130682, 110876, 40463, 69860, 80989, 72191, 42182, 62865, 117480, 114556, 95182, 100690, 115874, 8921, 99271, 134942, 101247, 31570, 75554, 86814, 127980, 11723, 42659, 107667, 121128, 2104, 22914, 29056, 124409, 41302, 64381, 30671]
[2024-12-02 19:04:17.493397] user = 86477 Cloud 159/568
[2024-12-02 19:04:17.510700] user = 86477 Local 159/568
[2024-12-02 19:04:17.535946] user = 86477 Local+ 159/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:04:20.078045] user = 86477 MPDA- 159/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8697368421052631
Training on augumented user 38177 0/50 current_auc = 0.8697368421052631
User 38177 AUC after training: 0.8692982456140351
User 38177 does not improve AUC. Reverting changes.
Training on augumented user 117470 1/50 current_auc = 0.8697368421052631
User 117470 AUC after training: 0.8692982456140351
User 117470 does not improve AUC. Reverting changes.
Training on augumented user 7506 2/50 current_auc = 0.8697368421052631
User 7506 AUC after training: 0.8697368421052631
User 7506 does not improve AUC. Reverting changes.
Training on augumented user 61492 3/50 current_auc = 0.8697368421052631
User 61492 AUC after training: 0.8697368421052631
User 61492 does not improve AUC. Reverting changes.
Training on augumented user 91329 4/50 current_auc = 0.8697368421052631
User 91329 AUC after training: 0.8701754385964913
User 91329 improves AUC. Keeping the model.
Training on augumented user 70341 5/50 current_auc = 0.8701754385964913
User 70341 AUC after training: 0.8697368421052631
User 70341 does not improve AUC. Reverting changes.
Training on augumented user 91328 6/50 current_auc = 0.8701754385964913
User 91328 AUC after training: 0.8697368421052631
User 91328 does not improve AUC. Reverting changes.
Training on augumented user 99374 7/50 current_auc = 0.8701754385964913
User 99374 AUC after training: 0.8697368421052631
User 99374 does not improve AUC. Reverting changes.
Training on augumented user 132038 8/50 current_auc = 0.8701754385964913
User 132038 AUC after training: 0.8692982456140351
User 132038 does not improve AUC. Reverting changes.
Training on augumented user 114501 9/50 current_auc = 0.8701754385964913
User 114501 AUC after training: 0.8697368421052631
User 114501 does not improve AUC. Reverting changes.
Training on augumented user 110444 10/50 current_auc = 0.8701754385964913
User 110444 AUC after training: 0.8697368421052631
User 110444 does not improve AUC. Reverting changes.
Training on augumented user 9424 11/50 current_auc = 0.8701754385964913
User 9424 AUC after training: 0.8710526315789474
User 9424 improves AUC. Keeping the model.
Training on augumented user 30014 12/50 current_auc = 0.8710526315789474
User 30014 AUC after training: 0.8719298245614036
User 30014 improves AUC. Keeping the model.
Training on augumented user 17235 13/50 current_auc = 0.8719298245614036
User 17235 AUC after training: 0.8710526315789474
User 17235 does not improve AUC. Reverting changes.
Training on augumented user 25602 14/50 current_auc = 0.8719298245614036
User 25602 AUC after training: 0.8719298245614036
User 25602 does not improve AUC. Reverting changes.
Training on augumented user 113719 15/50 current_auc = 0.8719298245614036
User 113719 AUC after training: 0.8719298245614036
User 113719 does not improve AUC. Reverting changes.
Training on augumented user 64345 16/50 current_auc = 0.8719298245614036
User 64345 AUC after training: 0.8719298245614036
User 64345 does not improve AUC. Reverting changes.
Training on augumented user 110669 17/50 current_auc = 0.8719298245614036
User 110669 AUC after training: 0.8714912280701754
User 110669 does not improve AUC. Reverting changes.
Training on augumented user 130682 18/50 current_auc = 0.8719298245614036
User 130682 AUC after training: 0.8719298245614036
User 130682 does not improve AUC. Reverting changes.
Training on augumented user 110876 19/50 current_auc = 0.8719298245614036
User 110876 AUC after training: 0.8719298245614036
User 110876 does not improve AUC. Reverting changes.
Training on augumented user 40463 20/50 current_auc = 0.8719298245614036
User 40463 AUC after training: 0.8719298245614036
User 40463 does not improve AUC. Reverting changes.
Training on augumented user 69860 21/50 current_auc = 0.8719298245614036
User 69860 AUC after training: 0.8719298245614036
User 69860 does not improve AUC. Reverting changes.
Training on augumented user 80989 22/50 current_auc = 0.8719298245614036
User 80989 AUC after training: 0.8723684210526317
User 80989 improves AUC. Keeping the model.
Training on augumented user 72191 23/50 current_auc = 0.8723684210526317
User 72191 AUC after training: 0.8723684210526317
User 72191 does not improve AUC. Reverting changes.
Training on augumented user 42182 24/50 current_auc = 0.8723684210526317
User 42182 AUC after training: 0.8723684210526317
User 42182 does not improve AUC. Reverting changes.
Training on augumented user 62865 25/50 current_auc = 0.8723684210526317
User 62865 AUC after training: 0.8732456140350877
User 62865 improves AUC. Keeping the model.
Training on augumented user 117480 26/50 current_auc = 0.8732456140350877
User 117480 AUC after training: 0.8732456140350877
User 117480 does not improve AUC. Reverting changes.
Training on augumented user 114556 27/50 current_auc = 0.8732456140350877
User 114556 AUC after training: 0.8736842105263158
User 114556 improves AUC. Keeping the model.
Training on augumented user 95182 28/50 current_auc = 0.8736842105263158
User 95182 AUC after training: 0.8732456140350877
User 95182 does not improve AUC. Reverting changes.
Training on augumented user 100690 29/50 current_auc = 0.8736842105263158
User 100690 AUC after training: 0.8728070175438596
User 100690 does not improve AUC. Reverting changes.
Training on augumented user 115874 30/50 current_auc = 0.8736842105263158
User 115874 AUC after training: 0.8728070175438596
User 115874 does not improve AUC. Reverting changes.
Training on augumented user 8921 31/50 current_auc = 0.8736842105263158
User 8921 AUC after training: 0.8728070175438597
User 8921 does not improve AUC. Reverting changes.
Training on augumented user 99271 32/50 current_auc = 0.8736842105263158
User 99271 AUC after training: 0.8736842105263158
User 99271 does not improve AUC. Reverting changes.
Training on augumented user 134942 33/50 current_auc = 0.8736842105263158
User 134942 AUC after training: 0.8728070175438596
User 134942 does not improve AUC. Reverting changes.
Training on augumented user 101247 34/50 current_auc = 0.8736842105263158
User 101247 AUC after training: 0.8719298245614036
User 101247 does not improve AUC. Reverting changes.
Training on augumented user 31570 35/50 current_auc = 0.8736842105263158
User 31570 AUC after training: 0.8723684210526317
User 31570 does not improve AUC. Reverting changes.
Training on augumented user 75554 36/50 current_auc = 0.8736842105263158
User 75554 AUC after training: 0.8723684210526317
User 75554 does not improve AUC. Reverting changes.
Training on augumented user 86814 37/50 current_auc = 0.8736842105263158
User 86814 AUC after training: 0.8728070175438597
User 86814 does not improve AUC. Reverting changes.
Training on augumented user 127980 38/50 current_auc = 0.8736842105263158
User 127980 AUC after training: 0.8732456140350877
User 127980 does not improve AUC. Reverting changes.
Training on augumented user 11723 39/50 current_auc = 0.8736842105263158
User 11723 AUC after training: 0.8723684210526316
User 11723 does not improve AUC. Reverting changes.
Training on augumented user 42659 40/50 current_auc = 0.8736842105263158
User 42659 AUC after training: 0.8728070175438596
User 42659 does not improve AUC. Reverting changes.
Training on augumented user 107667 41/50 current_auc = 0.8736842105263158
User 107667 AUC after training: 0.8732456140350877
User 107667 does not improve AUC. Reverting changes.
Training on augumented user 121128 42/50 current_auc = 0.8736842105263158
User 121128 AUC after training: 0.8732456140350877
User 121128 does not improve AUC. Reverting changes.
Training on augumented user 2104 43/50 current_auc = 0.8736842105263158
User 2104 AUC after training: 0.8728070175438597
User 2104 does not improve AUC. Reverting changes.
Training on augumented user 22914 44/50 current_auc = 0.8736842105263158
User 22914 AUC after training: 0.8723684210526316
User 22914 does not improve AUC. Reverting changes.
Training on augumented user 29056 45/50 current_auc = 0.8736842105263158
User 29056 AUC after training: 0.8741228070175437
User 29056 improves AUC. Keeping the model.
Training on augumented user 124409 46/50 current_auc = 0.8741228070175437
User 124409 AUC after training: 0.8736842105263158
User 124409 does not improve AUC. Reverting changes.
Training on augumented user 41302 47/50 current_auc = 0.8741228070175437
User 41302 AUC after training: 0.8741228070175437
User 41302 does not improve AUC. Reverting changes.
Training on augumented user 64381 48/50 current_auc = 0.8741228070175437
User 64381 AUC after training: 0.8741228070175437
User 64381 does not improve AUC. Reverting changes.
Training on augumented user 30671 49/50 current_auc = 0.8741228070175437
User 30671 AUC after training: 0.8723684210526317
User 30671 does not improve AUC. Reverting changes.
[2024-12-02 19:04:50.009735] start test user 86482 160/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:04:50.421918] start test user 86482 160/568 recall augumented users by random, augumented_users = [99563, 97064, 86327, 94127, 82477, 85006, 10068, 29800, 39963, 109708, 111648, 57218, 22371, 79645, 11483, 79774, 95601, 72850, 75704, 119932, 127322, 80950, 7094, 11175, 74071, 42498, 6029, 29160, 98759, 10866, 73280, 125673, 77189, 99766, 11733, 96555, 78063, 98283, 73437, 73782, 119325, 55637, 116222, 93221, 4255, 99919, 17458, 115357, 956, 103835]
[2024-12-02 19:04:50.436348] user = 86482 Cloud 160/568
[2024-12-02 19:04:50.449563] user = 86482 Local 160/568
[2024-12-02 19:04:50.472900] user = 86482 Local+ 160/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:04:52.323366] user = 86482 MPDA- 160/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6453781512605042
Training on augumented user 99563 0/50 current_auc = 0.6453781512605042
User 99563 AUC after training: 0.6436974789915967
User 99563 does not improve AUC. Reverting changes.
Training on augumented user 97064 1/50 current_auc = 0.6453781512605042
User 97064 AUC after training: 0.6449579831932774
User 97064 does not improve AUC. Reverting changes.
Training on augumented user 86327 2/50 current_auc = 0.6453781512605042
User 86327 AUC after training: 0.6453781512605042
User 86327 does not improve AUC. Reverting changes.
Training on augumented user 94127 3/50 current_auc = 0.6453781512605042
User 94127 AUC after training: 0.6441176470588236
User 94127 does not improve AUC. Reverting changes.
Training on augumented user 82477 4/50 current_auc = 0.6453781512605042
User 82477 AUC after training: 0.6441176470588236
User 82477 does not improve AUC. Reverting changes.
Training on augumented user 85006 5/50 current_auc = 0.6453781512605042
User 85006 AUC after training: 0.6453781512605042
User 85006 does not improve AUC. Reverting changes.
Training on augumented user 10068 6/50 current_auc = 0.6453781512605042
User 10068 AUC after training: 0.6457983193277311
User 10068 improves AUC. Keeping the model.
Training on augumented user 29800 7/50 current_auc = 0.6457983193277311
User 29800 AUC after training: 0.646218487394958
User 29800 improves AUC. Keeping the model.
Training on augumented user 39963 8/50 current_auc = 0.646218487394958
User 39963 AUC after training: 0.6451680672268908
User 39963 does not improve AUC. Reverting changes.
Training on augumented user 109708 9/50 current_auc = 0.646218487394958
User 109708 AUC after training: 0.646218487394958
User 109708 does not improve AUC. Reverting changes.
Training on augumented user 111648 10/50 current_auc = 0.646218487394958
User 111648 AUC after training: 0.6453781512605042
User 111648 does not improve AUC. Reverting changes.
Training on augumented user 57218 11/50 current_auc = 0.646218487394958
User 57218 AUC after training: 0.6428571428571429
User 57218 does not improve AUC. Reverting changes.
Training on augumented user 22371 12/50 current_auc = 0.646218487394958
User 22371 AUC after training: 0.644327731092437
User 22371 does not improve AUC. Reverting changes.
Training on augumented user 79645 13/50 current_auc = 0.646218487394958
User 79645 AUC after training: 0.6455882352941177
User 79645 does not improve AUC. Reverting changes.
Training on augumented user 11483 14/50 current_auc = 0.646218487394958
User 11483 AUC after training: 0.6460084033613446
User 11483 does not improve AUC. Reverting changes.
Training on augumented user 79774 15/50 current_auc = 0.646218487394958
User 79774 AUC after training: 0.6439075630252101
User 79774 does not improve AUC. Reverting changes.
Training on augumented user 95601 16/50 current_auc = 0.646218487394958
User 95601 AUC after training: 0.6426470588235295
User 95601 does not improve AUC. Reverting changes.
Training on augumented user 72850 17/50 current_auc = 0.646218487394958
User 72850 AUC after training: 0.6436974789915967
User 72850 does not improve AUC. Reverting changes.
Training on augumented user 75704 18/50 current_auc = 0.646218487394958
User 75704 AUC after training: 0.644327731092437
User 75704 does not improve AUC. Reverting changes.
Training on augumented user 119932 19/50 current_auc = 0.646218487394958
User 119932 AUC after training: 0.6457983193277311
User 119932 does not improve AUC. Reverting changes.
Training on augumented user 127322 20/50 current_auc = 0.646218487394958
User 127322 AUC after training: 0.6428571428571429
User 127322 does not improve AUC. Reverting changes.
Training on augumented user 80950 21/50 current_auc = 0.646218487394958
User 80950 AUC after training: 0.6464285714285715
User 80950 improves AUC. Keeping the model.
Training on augumented user 7094 22/50 current_auc = 0.6464285714285715
User 7094 AUC after training: 0.6468487394957984
User 7094 improves AUC. Keeping the model.
Training on augumented user 11175 23/50 current_auc = 0.6468487394957984
User 11175 AUC after training: 0.6457983193277311
User 11175 does not improve AUC. Reverting changes.
Training on augumented user 74071 24/50 current_auc = 0.6468487394957984
User 74071 AUC after training: 0.6453781512605042
User 74071 does not improve AUC. Reverting changes.
Training on augumented user 42498 25/50 current_auc = 0.6468487394957984
User 42498 AUC after training: 0.6430672268907563
User 42498 does not improve AUC. Reverting changes.
Training on augumented user 6029 26/50 current_auc = 0.6468487394957984
User 6029 AUC after training: 0.6455882352941177
User 6029 does not improve AUC. Reverting changes.
Training on augumented user 29160 27/50 current_auc = 0.6468487394957984
User 29160 AUC after training: 0.6422268907563026
User 29160 does not improve AUC. Reverting changes.
Training on augumented user 98759 28/50 current_auc = 0.6468487394957984
User 98759 AUC after training: 0.6464285714285715
User 98759 does not improve AUC. Reverting changes.
Training on augumented user 10866 29/50 current_auc = 0.6468487394957984
User 10866 AUC after training: 0.6476890756302521
User 10866 improves AUC. Keeping the model.
Training on augumented user 73280 30/50 current_auc = 0.6476890756302521
User 73280 AUC after training: 0.6478991596638656
User 73280 improves AUC. Keeping the model.
Training on augumented user 125673 31/50 current_auc = 0.6478991596638656
User 125673 AUC after training: 0.6468487394957984
User 125673 does not improve AUC. Reverting changes.
Training on augumented user 77189 32/50 current_auc = 0.6478991596638656
User 77189 AUC after training: 0.6468487394957984
User 77189 does not improve AUC. Reverting changes.
Training on augumented user 99766 33/50 current_auc = 0.6478991596638656
User 99766 AUC after training: 0.6472689075630252
User 99766 does not improve AUC. Reverting changes.
Training on augumented user 11733 34/50 current_auc = 0.6478991596638656
User 11733 AUC after training: 0.6474789915966387
User 11733 does not improve AUC. Reverting changes.
Training on augumented user 96555 35/50 current_auc = 0.6478991596638656
User 96555 AUC after training: 0.6470588235294118
User 96555 does not improve AUC. Reverting changes.
Training on augumented user 78063 36/50 current_auc = 0.6478991596638656
User 78063 AUC after training: 0.6470588235294118
User 78063 does not improve AUC. Reverting changes.
Training on augumented user 98283 37/50 current_auc = 0.6478991596638656
User 98283 AUC after training: 0.6468487394957984
User 98283 does not improve AUC. Reverting changes.
Training on augumented user 73437 38/50 current_auc = 0.6478991596638656
User 73437 AUC after training: 0.6474789915966387
User 73437 does not improve AUC. Reverting changes.
Training on augumented user 73782 39/50 current_auc = 0.6478991596638656
User 73782 AUC after training: 0.6476890756302521
User 73782 does not improve AUC. Reverting changes.
Training on augumented user 119325 40/50 current_auc = 0.6478991596638656
User 119325 AUC after training: 0.6478991596638656
User 119325 does not improve AUC. Reverting changes.
Training on augumented user 55637 41/50 current_auc = 0.6478991596638656
User 55637 AUC after training: 0.6468487394957984
User 55637 does not improve AUC. Reverting changes.
Training on augumented user 116222 42/50 current_auc = 0.6478991596638656
User 116222 AUC after training: 0.6472689075630252
User 116222 does not improve AUC. Reverting changes.
Training on augumented user 93221 43/50 current_auc = 0.6478991596638656
User 93221 AUC after training: 0.6478991596638656
User 93221 does not improve AUC. Reverting changes.
Training on augumented user 4255 44/50 current_auc = 0.6478991596638656
User 4255 AUC after training: 0.6472689075630252
User 4255 does not improve AUC. Reverting changes.
Training on augumented user 99919 45/50 current_auc = 0.6478991596638656
User 99919 AUC after training: 0.6460084033613446
User 99919 does not improve AUC. Reverting changes.
Training on augumented user 17458 46/50 current_auc = 0.6478991596638656
User 17458 AUC after training: 0.6466386554621849
User 17458 does not improve AUC. Reverting changes.
Training on augumented user 115357 47/50 current_auc = 0.6478991596638656
User 115357 AUC after training: 0.6468487394957984
User 115357 does not improve AUC. Reverting changes.
Training on augumented user 956 48/50 current_auc = 0.6478991596638656
User 956 AUC after training: 0.6478991596638656
User 956 does not improve AUC. Reverting changes.
Training on augumented user 103835 49/50 current_auc = 0.6478991596638656
User 103835 AUC after training: 0.6474789915966387
User 103835 does not improve AUC. Reverting changes.
[2024-12-02 19:05:18.815260] start test user 86487 161/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:05:19.285420] start test user 86487 161/568 recall augumented users by random, augumented_users = [108388, 77031, 117977, 117034, 137510, 43596, 59790, 130095, 6371, 83922, 26502, 86997, 26943, 124189, 127048, 93279, 68622, 10481, 21052, 73769, 21372, 119567, 12834, 114581, 96305, 40697, 112856, 6922, 47021, 125500, 18043, 1398, 47953, 44854, 68645, 46702, 133775, 13171, 12746, 122433, 58749, 67570, 9097, 83943, 101343, 64099, 89297, 128446, 35847, 118298]
[2024-12-02 19:05:19.340060] user = 86487 Cloud 161/568
[2024-12-02 19:05:19.363293] user = 86487 Local 161/568
[2024-12-02 19:05:19.430069] user = 86487 Local+ 161/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:05:22.367220] user = 86487 MPDA- 161/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6142857142857143
Training on augumented user 108388 0/50 current_auc = 0.6142857142857143
User 108388 AUC after training: 0.6071428571428571
User 108388 does not improve AUC. Reverting changes.
Training on augumented user 77031 1/50 current_auc = 0.6142857142857143
User 77031 AUC after training: 0.6428571428571428
User 77031 improves AUC. Keeping the model.
Training on augumented user 117977 2/50 current_auc = 0.6428571428571428
User 117977 AUC after training: 0.6142857142857143
User 117977 does not improve AUC. Reverting changes.
Training on augumented user 117034 3/50 current_auc = 0.6428571428571428
User 117034 AUC after training: 0.6428571428571428
User 117034 does not improve AUC. Reverting changes.
Training on augumented user 137510 4/50 current_auc = 0.6428571428571428
User 137510 AUC after training: 0.6428571428571428
User 137510 does not improve AUC. Reverting changes.
Training on augumented user 43596 5/50 current_auc = 0.6428571428571428
User 43596 AUC after training: 0.6428571428571428
User 43596 does not improve AUC. Reverting changes.
Training on augumented user 59790 6/50 current_auc = 0.6428571428571428
User 59790 AUC after training: 0.6428571428571428
User 59790 does not improve AUC. Reverting changes.
Training on augumented user 130095 7/50 current_auc = 0.6428571428571428
User 130095 AUC after training: 0.6428571428571428
User 130095 does not improve AUC. Reverting changes.
Training on augumented user 6371 8/50 current_auc = 0.6428571428571428
User 6371 AUC after training: 0.6428571428571428
User 6371 does not improve AUC. Reverting changes.
Training on augumented user 83922 9/50 current_auc = 0.6428571428571428
User 83922 AUC after training: 0.6428571428571428
User 83922 does not improve AUC. Reverting changes.
Training on augumented user 26502 10/50 current_auc = 0.6428571428571428
User 26502 AUC after training: 0.6428571428571428
User 26502 does not improve AUC. Reverting changes.
Training on augumented user 86997 11/50 current_auc = 0.6428571428571428
User 86997 AUC after training: 0.6214285714285714
User 86997 does not improve AUC. Reverting changes.
Training on augumented user 26943 12/50 current_auc = 0.6428571428571428
User 26943 AUC after training: 0.6428571428571428
User 26943 does not improve AUC. Reverting changes.
Training on augumented user 124189 13/50 current_auc = 0.6428571428571428
User 124189 AUC after training: 0.6428571428571428
User 124189 does not improve AUC. Reverting changes.
Training on augumented user 127048 14/50 current_auc = 0.6428571428571428
User 127048 AUC after training: 0.6285714285714286
User 127048 does not improve AUC. Reverting changes.
Training on augumented user 93279 15/50 current_auc = 0.6428571428571428
User 93279 AUC after training: 0.6428571428571428
User 93279 does not improve AUC. Reverting changes.
Training on augumented user 68622 16/50 current_auc = 0.6428571428571428
User 68622 AUC after training: 0.6428571428571428
User 68622 does not improve AUC. Reverting changes.
Training on augumented user 10481 17/50 current_auc = 0.6428571428571428
User 10481 AUC after training: 0.6571428571428571
User 10481 improves AUC. Keeping the model.
Training on augumented user 21052 18/50 current_auc = 0.6571428571428571
User 21052 AUC after training: 0.6642857142857144
User 21052 improves AUC. Keeping the model.
Training on augumented user 73769 19/50 current_auc = 0.6642857142857144
User 73769 AUC after training: 0.6642857142857144
User 73769 does not improve AUC. Reverting changes.
Training on augumented user 21372 20/50 current_auc = 0.6642857142857144
User 21372 AUC after training: 0.6642857142857144
User 21372 does not improve AUC. Reverting changes.
Training on augumented user 119567 21/50 current_auc = 0.6642857142857144
User 119567 AUC after training: 0.6642857142857144
User 119567 does not improve AUC. Reverting changes.
Training on augumented user 12834 22/50 current_auc = 0.6642857142857144
User 12834 AUC after training: 0.6642857142857144
User 12834 does not improve AUC. Reverting changes.
Training on augumented user 114581 23/50 current_auc = 0.6642857142857144
User 114581 AUC after training: 0.6571428571428571
User 114581 does not improve AUC. Reverting changes.
Training on augumented user 96305 24/50 current_auc = 0.6642857142857144
User 96305 AUC after training: 0.6642857142857144
User 96305 does not improve AUC. Reverting changes.
Training on augumented user 40697 25/50 current_auc = 0.6642857142857144
User 40697 AUC after training: 0.6642857142857144
User 40697 does not improve AUC. Reverting changes.
Training on augumented user 112856 26/50 current_auc = 0.6642857142857144
User 112856 AUC after training: 0.6642857142857144
User 112856 does not improve AUC. Reverting changes.
Training on augumented user 6922 27/50 current_auc = 0.6642857142857144
User 6922 AUC after training: 0.6642857142857144
User 6922 does not improve AUC. Reverting changes.
Training on augumented user 47021 28/50 current_auc = 0.6642857142857144
User 47021 AUC after training: 0.6642857142857144
User 47021 does not improve AUC. Reverting changes.
Training on augumented user 125500 29/50 current_auc = 0.6642857142857144
User 125500 AUC after training: 0.6642857142857144
User 125500 does not improve AUC. Reverting changes.
Training on augumented user 18043 30/50 current_auc = 0.6642857142857144
User 18043 AUC after training: 0.6642857142857144
User 18043 does not improve AUC. Reverting changes.
Training on augumented user 1398 31/50 current_auc = 0.6642857142857144
User 1398 AUC after training: 0.6642857142857144
User 1398 does not improve AUC. Reverting changes.
Training on augumented user 47953 32/50 current_auc = 0.6642857142857144
User 47953 AUC after training: 0.6642857142857144
User 47953 does not improve AUC. Reverting changes.
Training on augumented user 44854 33/50 current_auc = 0.6642857142857144
User 44854 AUC after training: 0.6642857142857144
User 44854 does not improve AUC. Reverting changes.
Training on augumented user 68645 34/50 current_auc = 0.6642857142857144
User 68645 AUC after training: 0.6642857142857144
User 68645 does not improve AUC. Reverting changes.
Training on augumented user 46702 35/50 current_auc = 0.6642857142857144
User 46702 AUC after training: 0.6642857142857144
User 46702 does not improve AUC. Reverting changes.
Training on augumented user 133775 36/50 current_auc = 0.6642857142857144
User 133775 AUC after training: 0.6642857142857144
User 133775 does not improve AUC. Reverting changes.
Training on augumented user 13171 37/50 current_auc = 0.6642857142857144
User 13171 AUC after training: 0.6642857142857144
User 13171 does not improve AUC. Reverting changes.
Training on augumented user 12746 38/50 current_auc = 0.6642857142857144
User 12746 AUC after training: 0.6642857142857144
User 12746 does not improve AUC. Reverting changes.
Training on augumented user 122433 39/50 current_auc = 0.6642857142857144
User 122433 AUC after training: 0.6642857142857144
User 122433 does not improve AUC. Reverting changes.
Training on augumented user 58749 40/50 current_auc = 0.6642857142857144
User 58749 AUC after training: 0.6571428571428571
User 58749 does not improve AUC. Reverting changes.
Training on augumented user 67570 41/50 current_auc = 0.6642857142857144
User 67570 AUC after training: 0.6642857142857144
User 67570 does not improve AUC. Reverting changes.
Training on augumented user 9097 42/50 current_auc = 0.6642857142857144
User 9097 AUC after training: 0.6642857142857144
User 9097 does not improve AUC. Reverting changes.
Training on augumented user 83943 43/50 current_auc = 0.6642857142857144
User 83943 AUC after training: 0.6642857142857144
User 83943 does not improve AUC. Reverting changes.
Training on augumented user 101343 44/50 current_auc = 0.6642857142857144
User 101343 AUC after training: 0.6642857142857144
User 101343 does not improve AUC. Reverting changes.
Training on augumented user 64099 45/50 current_auc = 0.6642857142857144
User 64099 AUC after training: 0.6571428571428571
User 64099 does not improve AUC. Reverting changes.
Training on augumented user 89297 46/50 current_auc = 0.6642857142857144
User 89297 AUC after training: 0.6642857142857144
User 89297 does not improve AUC. Reverting changes.
Training on augumented user 128446 47/50 current_auc = 0.6642857142857144
User 128446 AUC after training: 0.6642857142857144
User 128446 does not improve AUC. Reverting changes.
Training on augumented user 35847 48/50 current_auc = 0.6642857142857144
User 35847 AUC after training: 0.6642857142857144
User 35847 does not improve AUC. Reverting changes.
Training on augumented user 118298 49/50 current_auc = 0.6642857142857144
User 118298 AUC after training: 0.6642857142857144
User 118298 does not improve AUC. Reverting changes.
[2024-12-02 19:05:51.870755] start test user 86525 162/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:05:52.582939] start test user 86525 162/568 recall augumented users by random, augumented_users = [103065, 41193, 67331, 80721, 105477, 78138, 133157, 48240, 95586, 123799, 66161, 29268, 137772, 11853, 115230, 131125, 37969, 84798, 88134, 95191, 16754, 70922, 37275, 118692, 1902, 69189, 40629, 3613, 32126, 17153, 31384, 98262, 124107, 25688, 44966, 134789, 47758, 83537, 50109, 14939, 93940, 66315, 8244, 74509, 126664, 74125, 26867, 41629, 104769, 136893]
[2024-12-02 19:05:52.604959] user = 86525 Cloud 162/568
[2024-12-02 19:05:52.616679] user = 86525 Local 162/568
[2024-12-02 19:05:52.717589] user = 86525 Local+ 162/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:05:55.795989] user = 86525 MPDA- 162/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6713286713286712
Training on augumented user 103065 0/50 current_auc = 0.6713286713286712
User 103065 AUC after training: 0.6713286713286712
User 103065 does not improve AUC. Reverting changes.
Training on augumented user 41193 1/50 current_auc = 0.6713286713286712
User 41193 AUC after training: 0.6713286713286712
User 41193 does not improve AUC. Reverting changes.
Training on augumented user 67331 2/50 current_auc = 0.6713286713286712
User 67331 AUC after training: 0.6713286713286712
User 67331 does not improve AUC. Reverting changes.
Training on augumented user 80721 3/50 current_auc = 0.6713286713286712
User 80721 AUC after training: 0.6713286713286712
User 80721 does not improve AUC. Reverting changes.
Training on augumented user 105477 4/50 current_auc = 0.6713286713286712
User 105477 AUC after training: 0.6713286713286712
User 105477 does not improve AUC. Reverting changes.
Training on augumented user 78138 5/50 current_auc = 0.6713286713286712
User 78138 AUC after training: 0.6713286713286712
User 78138 does not improve AUC. Reverting changes.
Training on augumented user 133157 6/50 current_auc = 0.6713286713286712
User 133157 AUC after training: 0.6713286713286712
User 133157 does not improve AUC. Reverting changes.
Training on augumented user 48240 7/50 current_auc = 0.6713286713286712
User 48240 AUC after training: 0.6713286713286712
User 48240 does not improve AUC. Reverting changes.
Training on augumented user 95586 8/50 current_auc = 0.6713286713286712
User 95586 AUC after training: 0.6713286713286712
User 95586 does not improve AUC. Reverting changes.
Training on augumented user 123799 9/50 current_auc = 0.6713286713286712
User 123799 AUC after training: 0.6713286713286712
User 123799 does not improve AUC. Reverting changes.
Training on augumented user 66161 10/50 current_auc = 0.6713286713286712
User 66161 AUC after training: 0.6713286713286712
User 66161 does not improve AUC. Reverting changes.
Training on augumented user 29268 11/50 current_auc = 0.6713286713286712
User 29268 AUC after training: 0.6713286713286712
User 29268 does not improve AUC. Reverting changes.
Training on augumented user 137772 12/50 current_auc = 0.6713286713286712
User 137772 AUC after training: 0.6713286713286712
User 137772 does not improve AUC. Reverting changes.
Training on augumented user 11853 13/50 current_auc = 0.6713286713286712
User 11853 AUC after training: 0.6713286713286712
User 11853 does not improve AUC. Reverting changes.
Training on augumented user 115230 14/50 current_auc = 0.6713286713286712
User 115230 AUC after training: 0.6713286713286712
User 115230 does not improve AUC. Reverting changes.
Training on augumented user 131125 15/50 current_auc = 0.6713286713286712
User 131125 AUC after training: 0.6713286713286712
User 131125 does not improve AUC. Reverting changes.
Training on augumented user 37969 16/50 current_auc = 0.6713286713286712
User 37969 AUC after training: 0.6713286713286712
User 37969 does not improve AUC. Reverting changes.
Training on augumented user 84798 17/50 current_auc = 0.6713286713286712
User 84798 AUC after training: 0.6713286713286712
User 84798 does not improve AUC. Reverting changes.
Training on augumented user 88134 18/50 current_auc = 0.6713286713286712
User 88134 AUC after training: 0.6713286713286712
User 88134 does not improve AUC. Reverting changes.
Training on augumented user 95191 19/50 current_auc = 0.6713286713286712
User 95191 AUC after training: 0.6713286713286712
User 95191 does not improve AUC. Reverting changes.
Training on augumented user 16754 20/50 current_auc = 0.6713286713286712
User 16754 AUC after training: 0.6713286713286712
User 16754 does not improve AUC. Reverting changes.
Training on augumented user 70922 21/50 current_auc = 0.6713286713286712
User 70922 AUC after training: 0.6713286713286712
User 70922 does not improve AUC. Reverting changes.
Training on augumented user 37275 22/50 current_auc = 0.6713286713286712
User 37275 AUC after training: 0.6713286713286712
User 37275 does not improve AUC. Reverting changes.
Training on augumented user 118692 23/50 current_auc = 0.6713286713286712
User 118692 AUC after training: 0.6713286713286712
User 118692 does not improve AUC. Reverting changes.
Training on augumented user 1902 24/50 current_auc = 0.6713286713286712
User 1902 AUC after training: 0.6713286713286712
User 1902 does not improve AUC. Reverting changes.
Training on augumented user 69189 25/50 current_auc = 0.6713286713286712
User 69189 AUC after training: 0.6713286713286712
User 69189 does not improve AUC. Reverting changes.
Training on augumented user 40629 26/50 current_auc = 0.6713286713286712
User 40629 AUC after training: 0.6713286713286712
User 40629 does not improve AUC. Reverting changes.
Training on augumented user 3613 27/50 current_auc = 0.6713286713286712
User 3613 AUC after training: 0.6713286713286712
User 3613 does not improve AUC. Reverting changes.
Training on augumented user 32126 28/50 current_auc = 0.6713286713286712
User 32126 AUC after training: 0.6713286713286712
User 32126 does not improve AUC. Reverting changes.
Training on augumented user 17153 29/50 current_auc = 0.6713286713286712
User 17153 AUC after training: 0.6713286713286712
User 17153 does not improve AUC. Reverting changes.
Training on augumented user 31384 30/50 current_auc = 0.6713286713286712
User 31384 AUC after training: 0.6713286713286712
User 31384 does not improve AUC. Reverting changes.
Training on augumented user 98262 31/50 current_auc = 0.6713286713286712
User 98262 AUC after training: 0.6713286713286712
User 98262 does not improve AUC. Reverting changes.
Training on augumented user 124107 32/50 current_auc = 0.6713286713286712
User 124107 AUC after training: 0.6713286713286712
User 124107 does not improve AUC. Reverting changes.
Training on augumented user 25688 33/50 current_auc = 0.6713286713286712
User 25688 AUC after training: 0.6713286713286712
User 25688 does not improve AUC. Reverting changes.
Training on augumented user 44966 34/50 current_auc = 0.6713286713286712
User 44966 AUC after training: 0.6713286713286712
User 44966 does not improve AUC. Reverting changes.
Training on augumented user 134789 35/50 current_auc = 0.6713286713286712
User 134789 AUC after training: 0.6713286713286712
User 134789 does not improve AUC. Reverting changes.
Training on augumented user 47758 36/50 current_auc = 0.6713286713286712
User 47758 AUC after training: 0.6713286713286712
User 47758 does not improve AUC. Reverting changes.
Training on augumented user 83537 37/50 current_auc = 0.6713286713286712
User 83537 AUC after training: 0.6713286713286712
User 83537 does not improve AUC. Reverting changes.
Training on augumented user 50109 38/50 current_auc = 0.6713286713286712
User 50109 AUC after training: 0.6713286713286712
User 50109 does not improve AUC. Reverting changes.
Training on augumented user 14939 39/50 current_auc = 0.6713286713286712
User 14939 AUC after training: 0.6713286713286712
User 14939 does not improve AUC. Reverting changes.
Training on augumented user 93940 40/50 current_auc = 0.6713286713286712
User 93940 AUC after training: 0.6713286713286712
User 93940 does not improve AUC. Reverting changes.
Training on augumented user 66315 41/50 current_auc = 0.6713286713286712
User 66315 AUC after training: 0.6713286713286712
User 66315 does not improve AUC. Reverting changes.
Training on augumented user 8244 42/50 current_auc = 0.6713286713286712
User 8244 AUC after training: 0.6713286713286712
User 8244 does not improve AUC. Reverting changes.
Training on augumented user 74509 43/50 current_auc = 0.6713286713286712
User 74509 AUC after training: 0.6713286713286712
User 74509 does not improve AUC. Reverting changes.
Training on augumented user 126664 44/50 current_auc = 0.6713286713286712
User 126664 AUC after training: 0.6713286713286712
User 126664 does not improve AUC. Reverting changes.
Training on augumented user 74125 45/50 current_auc = 0.6713286713286712
User 74125 AUC after training: 0.6713286713286712
User 74125 does not improve AUC. Reverting changes.
Training on augumented user 26867 46/50 current_auc = 0.6713286713286712
User 26867 AUC after training: 0.6713286713286712
User 26867 does not improve AUC. Reverting changes.
Training on augumented user 41629 47/50 current_auc = 0.6713286713286712
User 41629 AUC after training: 0.6713286713286712
User 41629 does not improve AUC. Reverting changes.
Training on augumented user 104769 48/50 current_auc = 0.6713286713286712
User 104769 AUC after training: 0.6713286713286712
User 104769 does not improve AUC. Reverting changes.
Training on augumented user 136893 49/50 current_auc = 0.6713286713286712
User 136893 AUC after training: 0.6713286713286712
User 136893 does not improve AUC. Reverting changes.
[2024-12-02 19:06:30.399642] start test user 86529 163/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:06:31.142041] start test user 86529 163/568 recall augumented users by random, augumented_users = [119329, 61634, 46194, 107629, 121832, 97719, 109173, 33990, 110401, 134762, 67206, 68738, 36297, 106291, 91608, 65637, 33977, 116744, 138395, 57219, 49721, 68535, 138320, 17981, 74912, 11305, 134174, 124817, 26930, 3734, 92791, 98661, 75669, 24193, 124483, 16198, 70503, 8140, 65502, 17245, 27151, 60641, 130683, 23036, 115596, 80223, 22744, 11554, 97568, 118952]
[2024-12-02 19:06:31.161943] user = 86529 Cloud 163/568
[2024-12-02 19:06:31.244966] user = 86529 Local 163/568
[2024-12-02 19:06:31.550618] user = 86529 Local+ 163/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:06:33.816835] user = 86529 MPDA- 163/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.616027110786364
Training on augumented user 119329 0/50 current_auc = 0.616027110786364
User 119329 AUC after training: 0.6158381415505556
User 119329 does not improve AUC. Reverting changes.
Training on augumented user 61634 1/50 current_auc = 0.616027110786364
User 61634 AUC after training: 0.6161215954042681
User 61634 improves AUC. Keeping the model.
Training on augumented user 46194 2/50 current_auc = 0.6161215954042681
User 46194 AUC after training: 0.616027110786364
User 46194 does not improve AUC. Reverting changes.
Training on augumented user 107629 3/50 current_auc = 0.6161215954042681
User 107629 AUC after training: 0.6162034820731185
User 107629 improves AUC. Keeping the model.
Training on augumented user 121832 4/50 current_auc = 0.6162034820731185
User 121832 AUC after training: 0.6163294615636574
User 121832 improves AUC. Keeping the model.
Training on augumented user 97719 5/50 current_auc = 0.6163294615636574
User 97719 AUC after training: 0.6161656882259567
User 97719 does not improve AUC. Reverting changes.
Training on augumented user 109173 6/50 current_auc = 0.6163294615636574
User 109173 AUC after training: 0.6162790697674418
User 109173 does not improve AUC. Reverting changes.
Training on augumented user 33990 7/50 current_auc = 0.6163294615636574
User 33990 AUC after training: 0.6164680390032502
User 33990 improves AUC. Keeping the model.
Training on augumented user 110401 8/50 current_auc = 0.6164680390032502
User 110401 AUC after training: 0.6163420595127113
User 110401 does not improve AUC. Reverting changes.
Training on augumented user 134762 9/50 current_auc = 0.6164680390032502
User 134762 AUC after training: 0.6167703897805437
User 134762 improves AUC. Keeping the model.
Training on augumented user 67206 10/50 current_auc = 0.6167703897805437
User 67206 AUC after training: 0.6163546574617652
User 67206 does not improve AUC. Reverting changes.
Training on augumented user 68738 11/50 current_auc = 0.6167703897805437
User 68738 AUC after training: 0.6167577918314899
User 68738 does not improve AUC. Reverting changes.
Training on augumented user 36297 12/50 current_auc = 0.6167703897805437
User 36297 AUC after training: 0.616732595933382
User 36297 does not improve AUC. Reverting changes.
Training on augumented user 106291 13/50 current_auc = 0.6167703897805437
User 106291 AUC after training: 0.6165940184937891
User 106291 does not improve AUC. Reverting changes.
Training on augumented user 91608 14/50 current_auc = 0.6167703897805437
User 91608 AUC after training: 0.6169467610672983
User 91608 improves AUC. Keeping the model.
Training on augumented user 65637 15/50 current_auc = 0.6169467610672983
User 65637 AUC after training: 0.6167451938824359
User 65637 does not improve AUC. Reverting changes.
Training on augumented user 33977 16/50 current_auc = 0.6169467610672983
User 33977 AUC after training: 0.616971956965406
User 33977 improves AUC. Keeping the model.
Training on augumented user 116744 17/50 current_auc = 0.616971956965406
User 116744 AUC after training: 0.6168963692710827
User 116744 does not improve AUC. Reverting changes.
Training on augumented user 138395 18/50 current_auc = 0.616971956965406
User 138395 AUC after training: 0.6169341631182443
User 138395 does not improve AUC. Reverting changes.
Training on augumented user 57219 19/50 current_auc = 0.616971956965406
User 57219 AUC after training: 0.6170097508125678
User 57219 improves AUC. Keeping the model.
Training on augumented user 49721 20/50 current_auc = 0.6170097508125678
User 49721 AUC after training: 0.6171861220993222
User 49721 improves AUC. Keeping the model.
Training on augumented user 68535 21/50 current_auc = 0.6171861220993222
User 68535 AUC after training: 0.6173624933860767
User 68535 improves AUC. Keeping the model.
Training on augumented user 138320 22/50 current_auc = 0.6173624933860767
User 138320 AUC after training: 0.6172239159464838
User 138320 does not improve AUC. Reverting changes.
Training on augumented user 17981 23/50 current_auc = 0.6173624933860767
User 17981 AUC after training: 0.6177026380105319
User 17981 improves AUC. Keeping the model.
Training on augumented user 74912 24/50 current_auc = 0.6177026380105319
User 74912 AUC after training: 0.6183388344377535
User 74912 improves AUC. Keeping the model.
Training on augumented user 11305 25/50 current_auc = 0.6183388344377535
User 11305 AUC after training: 0.6185592985461967
User 11305 improves AUC. Keeping the model.
Training on augumented user 134174 26/50 current_auc = 0.6185592985461967
User 134174 AUC after training: 0.6184333190556577
User 134174 does not improve AUC. Reverting changes.
Training on augumented user 124817 27/50 current_auc = 0.6185592985461967
User 124817 AUC after training: 0.6184837108518733
User 124817 does not improve AUC. Reverting changes.
Training on augumented user 26930 28/50 current_auc = 0.6185592985461967
User 26930 AUC after training: 0.6187230718838972
User 26930 improves AUC. Keeping the model.
Training on augumented user 3734 29/50 current_auc = 0.6187230718838972
User 3734 AUC after training: 0.6186474841895739
User 3734 does not improve AUC. Reverting changes.
Training on augumented user 92791 30/50 current_auc = 0.6187230718838972
User 92791 AUC after training: 0.6189372370178134
User 92791 improves AUC. Keeping the model.
Training on augumented user 98661 31/50 current_auc = 0.6189372370178134
User 98661 AUC after training: 0.6188490513744362
User 98661 does not improve AUC. Reverting changes.
Training on augumented user 75669 32/50 current_auc = 0.6189372370178134
User 75669 AUC after training: 0.6189372370178134
User 75669 does not improve AUC. Reverting changes.
Training on augumented user 24193 33/50 current_auc = 0.6189372370178134
User 24193 AUC after training: 0.6191765980498375
User 24193 improves AUC. Keeping the model.
Training on augumented user 124483 34/50 current_auc = 0.6191765980498375
User 124483 AUC after training: 0.6192521857441609
User 124483 improves AUC. Keeping the model.
Training on augumented user 16198 35/50 current_auc = 0.6192521857441609
User 16198 AUC after training: 0.6191136083045681
User 16198 does not improve AUC. Reverting changes.
Training on augumented user 70503 36/50 current_auc = 0.6192521857441609
User 70503 AUC after training: 0.6191262062536219
User 70503 does not improve AUC. Reverting changes.
Training on augumented user 8140 37/50 current_auc = 0.6192521857441609
User 8140 AUC after training: 0.6193151754894304
User 8140 improves AUC. Keeping the model.
Training on augumented user 65502 38/50 current_auc = 0.6193151754894304
User 65502 AUC after training: 0.6192899795913225
User 65502 does not improve AUC. Reverting changes.
Training on augumented user 17245 39/50 current_auc = 0.6193151754894304
User 17245 AUC after training: 0.6192143918969992
User 17245 does not improve AUC. Reverting changes.
Training on augumented user 27151 40/50 current_auc = 0.6193151754894304
User 27151 AUC after training: 0.6192395877951069
User 27151 does not improve AUC. Reverting changes.
Training on augumented user 60641 41/50 current_auc = 0.6193151754894304
User 60641 AUC after training: 0.6192143918969992
User 60641 does not improve AUC. Reverting changes.
Training on augumented user 130683 42/50 current_auc = 0.6193151754894304
User 130683 AUC after training: 0.6193655672856458
User 130683 improves AUC. Keeping the model.
Training on augumented user 23036 43/50 current_auc = 0.6193655672856458
User 23036 AUC after training: 0.6195671344705082
User 23036 improves AUC. Keeping the model.
Training on augumented user 115596 44/50 current_auc = 0.6195671344705082
User 115596 AUC after training: 0.6186978759857895
User 115596 does not improve AUC. Reverting changes.
Training on augumented user 80223 45/50 current_auc = 0.6195671344705082
User 80223 AUC after training: 0.6192647836932148
User 80223 does not improve AUC. Reverting changes.
Training on augumented user 22744 46/50 current_auc = 0.6195671344705082
User 22744 AUC after training: 0.6199324749930711
User 22744 improves AUC. Keeping the model.
Training on augumented user 11554 47/50 current_auc = 0.6199324749930711
User 11554 AUC after training: 0.6201088462798257
User 11554 improves AUC. Keeping the model.
Training on augumented user 97568 48/50 current_auc = 0.6201088462798257
User 97568 AUC after training: 0.6177656277558013
User 97568 does not improve AUC. Reverting changes.
Training on augumented user 118952 49/50 current_auc = 0.6201088462798257
User 118952 AUC after training: 0.6203356093627956
User 118952 improves AUC. Keeping the model.
[2024-12-02 19:07:09.008281] start test user 86586 164/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:07:09.796017] start test user 86586 164/568 recall augumented users by random, augumented_users = [4495, 17118, 20171, 104618, 90280, 47345, 3863, 109302, 62905, 130072, 56404, 129302, 74128, 30875, 66683, 126433, 42281, 75654, 120473, 64195, 1842, 81419, 62967, 79857, 98189, 14748, 27163, 128127, 79477, 114762, 73651, 26573, 74157, 46819, 71714, 117596, 35043, 1264, 118633, 9601, 114517, 78680, 36152, 41228, 23330, 65669, 16810, 59112, 76592, 69654]
[2024-12-02 19:07:09.810697] user = 86586 Cloud 164/568
[2024-12-02 19:07:09.825934] user = 86586 Local 164/568
[2024-12-02 19:07:09.980975] user = 86586 Local+ 164/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:07:12.107303] user = 86586 MPDA- 164/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8086080586080586
Training on augumented user 4495 0/50 current_auc = 0.8086080586080586
User 4495 AUC after training: 0.8108974358974359
User 4495 improves AUC. Keeping the model.
Training on augumented user 17118 1/50 current_auc = 0.8108974358974359
User 17118 AUC after training: 0.809981684981685
User 17118 does not improve AUC. Reverting changes.
Training on augumented user 20171 2/50 current_auc = 0.8108974358974359
User 20171 AUC after training: 0.8118131868131868
User 20171 improves AUC. Keeping the model.
Training on augumented user 104618 3/50 current_auc = 0.8118131868131868
User 104618 AUC after training: 0.8118131868131868
User 104618 does not improve AUC. Reverting changes.
Training on augumented user 90280 4/50 current_auc = 0.8118131868131868
User 90280 AUC after training: 0.8095238095238095
User 90280 does not improve AUC. Reverting changes.
Training on augumented user 47345 5/50 current_auc = 0.8118131868131868
User 47345 AUC after training: 0.8118131868131868
User 47345 does not improve AUC. Reverting changes.
Training on augumented user 3863 6/50 current_auc = 0.8118131868131868
User 3863 AUC after training: 0.8081501831501832
User 3863 does not improve AUC. Reverting changes.
Training on augumented user 109302 7/50 current_auc = 0.8118131868131868
User 109302 AUC after training: 0.8122710622710623
User 109302 improves AUC. Keeping the model.
Training on augumented user 62905 8/50 current_auc = 0.8122710622710623
User 62905 AUC after training: 0.8131868131868132
User 62905 improves AUC. Keeping the model.
Training on augumented user 130072 9/50 current_auc = 0.8131868131868132
User 130072 AUC after training: 0.8136446886446886
User 130072 improves AUC. Keeping the model.
Training on augumented user 56404 10/50 current_auc = 0.8136446886446886
User 56404 AUC after training: 0.8136446886446886
User 56404 does not improve AUC. Reverting changes.
Training on augumented user 129302 11/50 current_auc = 0.8136446886446886
User 129302 AUC after training: 0.809981684981685
User 129302 does not improve AUC. Reverting changes.
Training on augumented user 74128 12/50 current_auc = 0.8136446886446886
User 74128 AUC after training: 0.8127289377289377
User 74128 does not improve AUC. Reverting changes.
Training on augumented user 30875 13/50 current_auc = 0.8136446886446886
User 30875 AUC after training: 0.804945054945055
User 30875 does not improve AUC. Reverting changes.
Training on augumented user 66683 14/50 current_auc = 0.8136446886446886
User 66683 AUC after training: 0.8136446886446886
User 66683 does not improve AUC. Reverting changes.
Training on augumented user 126433 15/50 current_auc = 0.8136446886446886
User 126433 AUC after training: 0.8136446886446886
User 126433 does not improve AUC. Reverting changes.
Training on augumented user 42281 16/50 current_auc = 0.8136446886446886
User 42281 AUC after training: 0.8141025641025641
User 42281 improves AUC. Keeping the model.
Training on augumented user 75654 17/50 current_auc = 0.8141025641025641
User 75654 AUC after training: 0.8095238095238095
User 75654 does not improve AUC. Reverting changes.
Training on augumented user 120473 18/50 current_auc = 0.8141025641025641
User 120473 AUC after training: 0.8145604395604396
User 120473 improves AUC. Keeping the model.
Training on augumented user 64195 19/50 current_auc = 0.8145604395604396
User 64195 AUC after training: 0.8141025641025641
User 64195 does not improve AUC. Reverting changes.
Training on augumented user 1842 20/50 current_auc = 0.8145604395604396
User 1842 AUC after training: 0.8141025641025641
User 1842 does not improve AUC. Reverting changes.
Training on augumented user 81419 21/50 current_auc = 0.8145604395604396
User 81419 AUC after training: 0.8141025641025641
User 81419 does not improve AUC. Reverting changes.
Training on augumented user 62967 22/50 current_auc = 0.8145604395604396
User 62967 AUC after training: 0.815018315018315
User 62967 improves AUC. Keeping the model.
Training on augumented user 79857 23/50 current_auc = 0.815018315018315
User 79857 AUC after training: 0.8145604395604396
User 79857 does not improve AUC. Reverting changes.
Training on augumented user 98189 24/50 current_auc = 0.815018315018315
User 98189 AUC after training: 0.8136446886446886
User 98189 does not improve AUC. Reverting changes.
Training on augumented user 14748 25/50 current_auc = 0.815018315018315
User 14748 AUC after training: 0.8104395604395604
User 14748 does not improve AUC. Reverting changes.
Training on augumented user 27163 26/50 current_auc = 0.815018315018315
User 27163 AUC after training: 0.8131868131868132
User 27163 does not improve AUC. Reverting changes.
Training on augumented user 128127 27/50 current_auc = 0.815018315018315
User 128127 AUC after training: 0.8141025641025641
User 128127 does not improve AUC. Reverting changes.
Training on augumented user 79477 28/50 current_auc = 0.815018315018315
User 79477 AUC after training: 0.8145604395604396
User 79477 does not improve AUC. Reverting changes.
Training on augumented user 114762 29/50 current_auc = 0.815018315018315
User 114762 AUC after training: 0.8104395604395604
User 114762 does not improve AUC. Reverting changes.
Training on augumented user 73651 30/50 current_auc = 0.815018315018315
User 73651 AUC after training: 0.815018315018315
User 73651 does not improve AUC. Reverting changes.
Training on augumented user 26573 31/50 current_auc = 0.815018315018315
User 26573 AUC after training: 0.815018315018315
User 26573 does not improve AUC. Reverting changes.
Training on augumented user 74157 32/50 current_auc = 0.815018315018315
User 74157 AUC after training: 0.8141025641025641
User 74157 does not improve AUC. Reverting changes.
Training on augumented user 46819 33/50 current_auc = 0.815018315018315
User 46819 AUC after training: 0.8131868131868132
User 46819 does not improve AUC. Reverting changes.
Training on augumented user 71714 34/50 current_auc = 0.815018315018315
User 71714 AUC after training: 0.8136446886446886
User 71714 does not improve AUC. Reverting changes.
Training on augumented user 117596 35/50 current_auc = 0.815018315018315
User 117596 AUC after training: 0.8145604395604396
User 117596 does not improve AUC. Reverting changes.
Training on augumented user 35043 36/50 current_auc = 0.815018315018315
User 35043 AUC after training: 0.8127289377289377
User 35043 does not improve AUC. Reverting changes.
Training on augumented user 1264 37/50 current_auc = 0.815018315018315
User 1264 AUC after training: 0.8136446886446886
User 1264 does not improve AUC. Reverting changes.
Training on augumented user 118633 38/50 current_auc = 0.815018315018315
User 118633 AUC after training: 0.8122710622710623
User 118633 does not improve AUC. Reverting changes.
Training on augumented user 9601 39/50 current_auc = 0.815018315018315
User 9601 AUC after training: 0.8136446886446886
User 9601 does not improve AUC. Reverting changes.
Training on augumented user 114517 40/50 current_auc = 0.815018315018315
User 114517 AUC after training: 0.8145604395604396
User 114517 does not improve AUC. Reverting changes.
Training on augumented user 78680 41/50 current_auc = 0.815018315018315
User 78680 AUC after training: 0.8136446886446886
User 78680 does not improve AUC. Reverting changes.
Training on augumented user 36152 42/50 current_auc = 0.815018315018315
User 36152 AUC after training: 0.8136446886446886
User 36152 does not improve AUC. Reverting changes.
Training on augumented user 41228 43/50 current_auc = 0.815018315018315
User 41228 AUC after training: 0.8131868131868132
User 41228 does not improve AUC. Reverting changes.
Training on augumented user 23330 44/50 current_auc = 0.815018315018315
User 23330 AUC after training: 0.8131868131868132
User 23330 does not improve AUC. Reverting changes.
Training on augumented user 65669 45/50 current_auc = 0.815018315018315
User 65669 AUC after training: 0.8131868131868132
User 65669 does not improve AUC. Reverting changes.
Training on augumented user 16810 46/50 current_auc = 0.815018315018315
User 16810 AUC after training: 0.8136446886446886
User 16810 does not improve AUC. Reverting changes.
Training on augumented user 59112 47/50 current_auc = 0.815018315018315
User 59112 AUC after training: 0.8136446886446886
User 59112 does not improve AUC. Reverting changes.
Training on augumented user 76592 48/50 current_auc = 0.815018315018315
User 76592 AUC after training: 0.8122710622710623
User 76592 does not improve AUC. Reverting changes.
Training on augumented user 69654 49/50 current_auc = 0.815018315018315
User 69654 AUC after training: 0.815018315018315
User 69654 does not improve AUC. Reverting changes.
[2024-12-02 19:07:36.364369] start test user 86592 165/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:07:36.908076] start test user 86592 165/568 recall augumented users by random, augumented_users = [91659, 45039, 118287, 82416, 115192, 35415, 47324, 132580, 115757, 21078, 97477, 24521, 21232, 77721, 12073, 122787, 68048, 136223, 37482, 27026, 85689, 130715, 50968, 116446, 116706, 40038, 38669, 30079, 103775, 131506, 130315, 92320, 45300, 131391, 105048, 114553, 37794, 8099, 120354, 41523, 96950, 70663, 13690, 97918, 103197, 31690, 38944, 124111, 53604, 55457]
[2024-12-02 19:07:36.923403] user = 86592 Cloud 165/568
[2024-12-02 19:07:36.972683] user = 86592 Local 165/568
[2024-12-02 19:07:37.251822] user = 86592 Local+ 165/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:07:40.927592] user = 86592 MPDA- 165/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5851045296167248
Training on augumented user 91659 0/50 current_auc = 0.5851045296167248
User 91659 AUC after training: 0.5846689895470383
User 91659 does not improve AUC. Reverting changes.
Training on augumented user 45039 1/50 current_auc = 0.5851045296167248
User 45039 AUC after training: 0.5848867595818815
User 45039 does not improve AUC. Reverting changes.
Training on augumented user 118287 2/50 current_auc = 0.5851045296167248
User 118287 AUC after training: 0.5853658536585366
User 118287 improves AUC. Keeping the model.
Training on augumented user 82416 3/50 current_auc = 0.5853658536585366
User 82416 AUC after training: 0.5851045296167247
User 82416 does not improve AUC. Reverting changes.
Training on augumented user 115192 4/50 current_auc = 0.5853658536585366
User 115192 AUC after training: 0.5849738675958188
User 115192 does not improve AUC. Reverting changes.
Training on augumented user 35415 5/50 current_auc = 0.5853658536585366
User 35415 AUC after training: 0.5856707317073171
User 35415 improves AUC. Keeping the model.
Training on augumented user 47324 6/50 current_auc = 0.5856707317073171
User 47324 AUC after training: 0.5852351916376306
User 47324 does not improve AUC. Reverting changes.
Training on augumented user 132580 7/50 current_auc = 0.5856707317073171
User 132580 AUC after training: 0.5855836236933798
User 132580 does not improve AUC. Reverting changes.
Training on augumented user 115757 8/50 current_auc = 0.5856707317073171
User 115757 AUC after training: 0.5858013937282229
User 115757 improves AUC. Keeping the model.
Training on augumented user 21078 9/50 current_auc = 0.5858013937282229
User 21078 AUC after training: 0.5841463414634147
User 21078 does not improve AUC. Reverting changes.
Training on augumented user 97477 10/50 current_auc = 0.5858013937282229
User 97477 AUC after training: 0.5850609756097561
User 97477 does not improve AUC. Reverting changes.
Training on augumented user 24521 11/50 current_auc = 0.5858013937282229
User 24521 AUC after training: 0.5856271777003484
User 24521 does not improve AUC. Reverting changes.
Training on augumented user 21232 12/50 current_auc = 0.5858013937282229
User 21232 AUC after training: 0.5846689895470384
User 21232 does not improve AUC. Reverting changes.
Training on augumented user 77721 13/50 current_auc = 0.5858013937282229
User 77721 AUC after training: 0.5858885017421603
User 77721 improves AUC. Keeping the model.
Training on augumented user 12073 14/50 current_auc = 0.5858885017421603
User 12073 AUC after training: 0.585801393728223
User 12073 does not improve AUC. Reverting changes.
Training on augumented user 122787 15/50 current_auc = 0.5858885017421603
User 122787 AUC after training: 0.5858013937282229
User 122787 does not improve AUC. Reverting changes.
Training on augumented user 68048 16/50 current_auc = 0.5858885017421603
User 68048 AUC after training: 0.5856707317073171
User 68048 does not improve AUC. Reverting changes.
Training on augumented user 136223 17/50 current_auc = 0.5858885017421603
User 136223 AUC after training: 0.584843205574913
User 136223 does not improve AUC. Reverting changes.
Training on augumented user 37482 18/50 current_auc = 0.5858885017421603
User 37482 AUC after training: 0.5861062717770036
User 37482 improves AUC. Keeping the model.
Training on augumented user 27026 19/50 current_auc = 0.5861062717770036
User 27026 AUC after training: 0.5851045296167248
User 27026 does not improve AUC. Reverting changes.
Training on augumented user 85689 20/50 current_auc = 0.5861062717770036
User 85689 AUC after training: 0.585452961672474
User 85689 does not improve AUC. Reverting changes.
Training on augumented user 130715 21/50 current_auc = 0.5861062717770036
User 130715 AUC after training: 0.5880226480836237
User 130715 improves AUC. Keeping the model.
Training on augumented user 50968 22/50 current_auc = 0.5880226480836237
User 50968 AUC after training: 0.5883275261324042
User 50968 improves AUC. Keeping the model.
Training on augumented user 116446 23/50 current_auc = 0.5883275261324042
User 116446 AUC after training: 0.5867595818815331
User 116446 does not improve AUC. Reverting changes.
Training on augumented user 116706 24/50 current_auc = 0.5883275261324042
User 116706 AUC after training: 0.5881533101045296
User 116706 does not improve AUC. Reverting changes.
Training on augumented user 40038 25/50 current_auc = 0.5883275261324042
User 40038 AUC after training: 0.5882839721254355
User 40038 does not improve AUC. Reverting changes.
Training on augumented user 38669 26/50 current_auc = 0.5883275261324042
User 38669 AUC after training: 0.5874128919860627
User 38669 does not improve AUC. Reverting changes.
Training on augumented user 30079 27/50 current_auc = 0.5883275261324042
User 30079 AUC after training: 0.5875871080139373
User 30079 does not improve AUC. Reverting changes.
Training on augumented user 103775 28/50 current_auc = 0.5883275261324042
User 103775 AUC after training: 0.5881968641114983
User 103775 does not improve AUC. Reverting changes.
Training on augumented user 131506 29/50 current_auc = 0.5883275261324042
User 131506 AUC after training: 0.5884146341463414
User 131506 improves AUC. Keeping the model.
Training on augumented user 130315 30/50 current_auc = 0.5884146341463414
User 130315 AUC after training: 0.5881533101045296
User 130315 does not improve AUC. Reverting changes.
Training on augumented user 92320 31/50 current_auc = 0.5884146341463414
User 92320 AUC after training: 0.5882839721254356
User 92320 does not improve AUC. Reverting changes.
Training on augumented user 45300 32/50 current_auc = 0.5884146341463414
User 45300 AUC after training: 0.5884146341463414
User 45300 does not improve AUC. Reverting changes.
Training on augumented user 131391 33/50 current_auc = 0.5884146341463414
User 131391 AUC after training: 0.588240418118467
User 131391 does not improve AUC. Reverting changes.
Training on augumented user 105048 34/50 current_auc = 0.5884146341463414
User 105048 AUC after training: 0.5881533101045296
User 105048 does not improve AUC. Reverting changes.
Training on augumented user 114553 35/50 current_auc = 0.5884146341463414
User 114553 AUC after training: 0.5888501742160279
User 114553 improves AUC. Keeping the model.
Training on augumented user 37794 36/50 current_auc = 0.5888501742160279
User 37794 AUC after training: 0.5888066202090593
User 37794 does not improve AUC. Reverting changes.
Training on augumented user 8099 37/50 current_auc = 0.5888501742160279
User 8099 AUC after training: 0.5872822299651568
User 8099 does not improve AUC. Reverting changes.
Training on augumented user 120354 38/50 current_auc = 0.5888501742160279
User 120354 AUC after training: 0.5868466898954704
User 120354 does not improve AUC. Reverting changes.
Training on augumented user 41523 39/50 current_auc = 0.5888501742160279
User 41523 AUC after training: 0.5883710801393729
User 41523 does not improve AUC. Reverting changes.
Training on augumented user 96950 40/50 current_auc = 0.5888501742160279
User 96950 AUC after training: 0.587979094076655
User 96950 does not improve AUC. Reverting changes.
Training on augumented user 70663 41/50 current_auc = 0.5888501742160279
User 70663 AUC after training: 0.5869773519163763
User 70663 does not improve AUC. Reverting changes.
Training on augumented user 13690 42/50 current_auc = 0.5888501742160279
User 13690 AUC after training: 0.587020905923345
User 13690 does not improve AUC. Reverting changes.
Training on augumented user 97918 43/50 current_auc = 0.5888501742160279
User 97918 AUC after training: 0.5886324041811847
User 97918 does not improve AUC. Reverting changes.
Training on augumented user 103197 44/50 current_auc = 0.5888501742160279
User 103197 AUC after training: 0.5880662020905923
User 103197 does not improve AUC. Reverting changes.
Training on augumented user 31690 45/50 current_auc = 0.5888501742160279
User 31690 AUC after training: 0.588240418118467
User 31690 does not improve AUC. Reverting changes.
Training on augumented user 38944 46/50 current_auc = 0.5888501742160279
User 38944 AUC after training: 0.5871080139372823
User 38944 does not improve AUC. Reverting changes.
Training on augumented user 124111 47/50 current_auc = 0.5888501742160279
User 124111 AUC after training: 0.5864982578397212
User 124111 does not improve AUC. Reverting changes.
Training on augumented user 53604 48/50 current_auc = 0.5888501742160279
User 53604 AUC after training: 0.5881968641114983
User 53604 does not improve AUC. Reverting changes.
Training on augumented user 55457 49/50 current_auc = 0.5888501742160279
User 55457 AUC after training: 0.5880662020905923
User 55457 does not improve AUC. Reverting changes.
[2024-12-02 19:08:08.942115] start test user 86619 166/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:08:09.712352] start test user 86619 166/568 recall augumented users by random, augumented_users = [129272, 114997, 110147, 81697, 118510, 97767, 92929, 75253, 46544, 125224, 126855, 35008, 73921, 123980, 132859, 109059, 100841, 89045, 89890, 121359, 129581, 94274, 61467, 4075, 83349, 45000, 66376, 65478, 24123, 94875, 55957, 70642, 98036, 90340, 71653, 109265, 116344, 91138, 32774, 20316, 52687, 27941, 91722, 126323, 5974, 118754, 69603, 134635, 119330, 50287]
[2024-12-02 19:08:09.728281] user = 86619 Cloud 166/568
[2024-12-02 19:08:09.739421] user = 86619 Local 166/568
[2024-12-02 19:08:09.762050] user = 86619 Local+ 166/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:08:12.591115] user = 86619 MPDA- 166/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7479674796747968
Training on augumented user 129272 0/50 current_auc = 0.7479674796747968
User 129272 AUC after training: 0.7479674796747968
User 129272 does not improve AUC. Reverting changes.
Training on augumented user 114997 1/50 current_auc = 0.7479674796747968
User 114997 AUC after training: 0.7479674796747968
User 114997 does not improve AUC. Reverting changes.
Training on augumented user 110147 2/50 current_auc = 0.7479674796747968
User 110147 AUC after training: 0.7479674796747968
User 110147 does not improve AUC. Reverting changes.
Training on augumented user 81697 3/50 current_auc = 0.7479674796747968
User 81697 AUC after training: 0.7466124661246613
User 81697 does not improve AUC. Reverting changes.
Training on augumented user 118510 4/50 current_auc = 0.7479674796747968
User 118510 AUC after training: 0.7506775067750678
User 118510 improves AUC. Keeping the model.
Training on augumented user 97767 5/50 current_auc = 0.7506775067750678
User 97767 AUC after training: 0.7493224932249323
User 97767 does not improve AUC. Reverting changes.
Training on augumented user 92929 6/50 current_auc = 0.7506775067750678
User 92929 AUC after training: 0.7506775067750677
User 92929 does not improve AUC. Reverting changes.
Training on augumented user 75253 7/50 current_auc = 0.7506775067750678
User 75253 AUC after training: 0.7506775067750677
User 75253 does not improve AUC. Reverting changes.
Training on augumented user 46544 8/50 current_auc = 0.7506775067750678
User 46544 AUC after training: 0.7493224932249324
User 46544 does not improve AUC. Reverting changes.
Training on augumented user 125224 9/50 current_auc = 0.7506775067750678
User 125224 AUC after training: 0.7506775067750677
User 125224 does not improve AUC. Reverting changes.
Training on augumented user 126855 10/50 current_auc = 0.7506775067750678
User 126855 AUC after training: 0.7506775067750678
User 126855 does not improve AUC. Reverting changes.
Training on augumented user 35008 11/50 current_auc = 0.7506775067750678
User 35008 AUC after training: 0.7506775067750677
User 35008 does not improve AUC. Reverting changes.
Training on augumented user 73921 12/50 current_auc = 0.7506775067750678
User 73921 AUC after training: 0.7479674796747968
User 73921 does not improve AUC. Reverting changes.
Training on augumented user 123980 13/50 current_auc = 0.7506775067750678
User 123980 AUC after training: 0.7493224932249323
User 123980 does not improve AUC. Reverting changes.
Training on augumented user 132859 14/50 current_auc = 0.7506775067750678
User 132859 AUC after training: 0.7493224932249324
User 132859 does not improve AUC. Reverting changes.
Training on augumented user 109059 15/50 current_auc = 0.7506775067750678
User 109059 AUC after training: 0.7479674796747968
User 109059 does not improve AUC. Reverting changes.
Training on augumented user 100841 16/50 current_auc = 0.7506775067750678
User 100841 AUC after training: 0.7493224932249323
User 100841 does not improve AUC. Reverting changes.
Training on augumented user 89045 17/50 current_auc = 0.7506775067750678
User 89045 AUC after training: 0.7533875338753387
User 89045 improves AUC. Keeping the model.
Training on augumented user 89890 18/50 current_auc = 0.7533875338753387
User 89890 AUC after training: 0.7493224932249323
User 89890 does not improve AUC. Reverting changes.
Training on augumented user 121359 19/50 current_auc = 0.7533875338753387
User 121359 AUC after training: 0.7533875338753387
User 121359 does not improve AUC. Reverting changes.
Training on augumented user 129581 20/50 current_auc = 0.7533875338753387
User 129581 AUC after training: 0.7533875338753387
User 129581 does not improve AUC. Reverting changes.
Training on augumented user 94274 21/50 current_auc = 0.7533875338753387
User 94274 AUC after training: 0.7506775067750677
User 94274 does not improve AUC. Reverting changes.
Training on augumented user 61467 22/50 current_auc = 0.7533875338753387
User 61467 AUC after training: 0.7533875338753387
User 61467 does not improve AUC. Reverting changes.
Training on augumented user 4075 23/50 current_auc = 0.7533875338753387
User 4075 AUC after training: 0.7533875338753387
User 4075 does not improve AUC. Reverting changes.
Training on augumented user 83349 24/50 current_auc = 0.7533875338753387
User 83349 AUC after training: 0.7506775067750677
User 83349 does not improve AUC. Reverting changes.
Training on augumented user 45000 25/50 current_auc = 0.7533875338753387
User 45000 AUC after training: 0.7506775067750677
User 45000 does not improve AUC. Reverting changes.
Training on augumented user 66376 26/50 current_auc = 0.7533875338753387
User 66376 AUC after training: 0.7479674796747968
User 66376 does not improve AUC. Reverting changes.
Training on augumented user 65478 27/50 current_auc = 0.7533875338753387
User 65478 AUC after training: 0.7533875338753387
User 65478 does not improve AUC. Reverting changes.
Training on augumented user 24123 28/50 current_auc = 0.7533875338753387
User 24123 AUC after training: 0.7493224932249323
User 24123 does not improve AUC. Reverting changes.
Training on augumented user 94875 29/50 current_auc = 0.7533875338753387
User 94875 AUC after training: 0.7533875338753387
User 94875 does not improve AUC. Reverting changes.
Training on augumented user 55957 30/50 current_auc = 0.7533875338753387
User 55957 AUC after training: 0.7560975609756098
User 55957 improves AUC. Keeping the model.
Training on augumented user 70642 31/50 current_auc = 0.7560975609756098
User 70642 AUC after training: 0.7560975609756098
User 70642 does not improve AUC. Reverting changes.
Training on augumented user 98036 32/50 current_auc = 0.7560975609756098
User 98036 AUC after training: 0.7560975609756098
User 98036 does not improve AUC. Reverting changes.
Training on augumented user 90340 33/50 current_auc = 0.7560975609756098
User 90340 AUC after training: 0.7560975609756098
User 90340 does not improve AUC. Reverting changes.
Training on augumented user 71653 34/50 current_auc = 0.7560975609756098
User 71653 AUC after training: 0.7506775067750678
User 71653 does not improve AUC. Reverting changes.
Training on augumented user 109265 35/50 current_auc = 0.7560975609756098
User 109265 AUC after training: 0.7560975609756098
User 109265 does not improve AUC. Reverting changes.
Training on augumented user 116344 36/50 current_auc = 0.7560975609756098
User 116344 AUC after training: 0.7560975609756098
User 116344 does not improve AUC. Reverting changes.
Training on augumented user 91138 37/50 current_auc = 0.7560975609756098
User 91138 AUC after training: 0.7560975609756098
User 91138 does not improve AUC. Reverting changes.
Training on augumented user 32774 38/50 current_auc = 0.7560975609756098
User 32774 AUC after training: 0.7560975609756098
User 32774 does not improve AUC. Reverting changes.
Training on augumented user 20316 39/50 current_auc = 0.7560975609756098
User 20316 AUC after training: 0.7560975609756098
User 20316 does not improve AUC. Reverting changes.
Training on augumented user 52687 40/50 current_auc = 0.7560975609756098
User 52687 AUC after training: 0.7547425474254743
User 52687 does not improve AUC. Reverting changes.
Training on augumented user 27941 41/50 current_auc = 0.7560975609756098
User 27941 AUC after training: 0.7560975609756098
User 27941 does not improve AUC. Reverting changes.
Training on augumented user 91722 42/50 current_auc = 0.7560975609756098
User 91722 AUC after training: 0.7560975609756098
User 91722 does not improve AUC. Reverting changes.
Training on augumented user 126323 43/50 current_auc = 0.7560975609756098
User 126323 AUC after training: 0.7560975609756098
User 126323 does not improve AUC. Reverting changes.
Training on augumented user 5974 44/50 current_auc = 0.7560975609756098
User 5974 AUC after training: 0.7560975609756098
User 5974 does not improve AUC. Reverting changes.
Training on augumented user 118754 45/50 current_auc = 0.7560975609756098
User 118754 AUC after training: 0.7520325203252032
User 118754 does not improve AUC. Reverting changes.
Training on augumented user 69603 46/50 current_auc = 0.7560975609756098
User 69603 AUC after training: 0.7506775067750677
User 69603 does not improve AUC. Reverting changes.
Training on augumented user 134635 47/50 current_auc = 0.7560975609756098
User 134635 AUC after training: 0.7560975609756098
User 134635 does not improve AUC. Reverting changes.
Training on augumented user 119330 48/50 current_auc = 0.7560975609756098
User 119330 AUC after training: 0.7560975609756098
User 119330 does not improve AUC. Reverting changes.
Training on augumented user 50287 49/50 current_auc = 0.7560975609756098
User 50287 AUC after training: 0.7560975609756098
User 50287 does not improve AUC. Reverting changes.
[2024-12-02 19:08:44.805246] start test user 86639 167/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:08:45.374346] start test user 86639 167/568 recall augumented users by random, augumented_users = [58942, 107966, 110398, 67954, 88099, 87622, 37505, 67690, 68876, 121792, 111069, 123226, 47572, 65610, 96551, 44366, 137135, 97776, 123086, 21710, 12095, 107624, 137271, 58035, 81991, 118536, 85752, 16801, 33823, 41338, 78288, 85784, 134471, 85029, 21328, 129294, 29976, 77140, 44723, 58508, 15665, 29513, 49656, 36902, 125025, 103020, 35650, 64350, 78481, 98817]
[2024-12-02 19:08:45.389675] user = 86639 Cloud 167/568
[2024-12-02 19:08:45.411270] user = 86639 Local 167/568
[2024-12-02 19:08:45.456121] user = 86639 Local+ 167/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:08:47.639131] user = 86639 MPDA- 167/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6100185528756957
Training on augumented user 58942 0/50 current_auc = 0.6100185528756957
User 58942 AUC after training: 0.6111317254174397
User 58942 improves AUC. Keeping the model.
Training on augumented user 107966 1/50 current_auc = 0.6111317254174397
User 107966 AUC after training: 0.611873840445269
User 107966 improves AUC. Keeping the model.
Training on augumented user 110398 2/50 current_auc = 0.611873840445269
User 110398 AUC after training: 0.6137291280148424
User 110398 improves AUC. Keeping the model.
Training on augumented user 67954 3/50 current_auc = 0.6137291280148424
User 67954 AUC after training: 0.6148423005565863
User 67954 improves AUC. Keeping the model.
Training on augumented user 88099 4/50 current_auc = 0.6148423005565863
User 88099 AUC after training: 0.6159554730983302
User 88099 improves AUC. Keeping the model.
Training on augumented user 87622 5/50 current_auc = 0.6159554730983302
User 87622 AUC after training: 0.6155844155844156
User 87622 does not improve AUC. Reverting changes.
Training on augumented user 37505 6/50 current_auc = 0.6159554730983302
User 37505 AUC after training: 0.6152133580705009
User 37505 does not improve AUC. Reverting changes.
Training on augumented user 67690 7/50 current_auc = 0.6159554730983302
User 67690 AUC after training: 0.6170686456400742
User 67690 improves AUC. Keeping the model.
Training on augumented user 68876 8/50 current_auc = 0.6170686456400742
User 68876 AUC after training: 0.6166975881261596
User 68876 does not improve AUC. Reverting changes.
Training on augumented user 121792 9/50 current_auc = 0.6170686456400742
User 121792 AUC after training: 0.6166975881261596
User 121792 does not improve AUC. Reverting changes.
Training on augumented user 111069 10/50 current_auc = 0.6170686456400742
User 111069 AUC after training: 0.6174397031539889
User 111069 improves AUC. Keeping the model.
Training on augumented user 123226 11/50 current_auc = 0.6174397031539889
User 123226 AUC after training: 0.6170686456400742
User 123226 does not improve AUC. Reverting changes.
Training on augumented user 47572 12/50 current_auc = 0.6174397031539889
User 47572 AUC after training: 0.6159554730983302
User 47572 does not improve AUC. Reverting changes.
Training on augumented user 65610 13/50 current_auc = 0.6174397031539889
User 65610 AUC after training: 0.6152133580705009
User 65610 does not improve AUC. Reverting changes.
Training on augumented user 96551 14/50 current_auc = 0.6174397031539889
User 96551 AUC after training: 0.6155844155844157
User 96551 does not improve AUC. Reverting changes.
Training on augumented user 44366 15/50 current_auc = 0.6174397031539889
User 44366 AUC after training: 0.6181818181818182
User 44366 improves AUC. Keeping the model.
Training on augumented user 137135 16/50 current_auc = 0.6181818181818182
User 137135 AUC after training: 0.6159554730983302
User 137135 does not improve AUC. Reverting changes.
Training on augumented user 97776 17/50 current_auc = 0.6181818181818182
User 97776 AUC after training: 0.6204081632653061
User 97776 improves AUC. Keeping the model.
Training on augumented user 123086 18/50 current_auc = 0.6204081632653061
User 123086 AUC after training: 0.6207792207792208
User 123086 improves AUC. Keeping the model.
Training on augumented user 21710 19/50 current_auc = 0.6207792207792208
User 21710 AUC after training: 0.6215213358070502
User 21710 improves AUC. Keeping the model.
Training on augumented user 12095 20/50 current_auc = 0.6215213358070502
User 12095 AUC after training: 0.6178107606679035
User 12095 does not improve AUC. Reverting changes.
Training on augumented user 107624 21/50 current_auc = 0.6215213358070502
User 107624 AUC after training: 0.6196660482374768
User 107624 does not improve AUC. Reverting changes.
Training on augumented user 137271 22/50 current_auc = 0.6215213358070502
User 137271 AUC after training: 0.6211502782931354
User 137271 does not improve AUC. Reverting changes.
Training on augumented user 58035 23/50 current_auc = 0.6215213358070502
User 58035 AUC after training: 0.6211502782931355
User 58035 does not improve AUC. Reverting changes.
Training on augumented user 81991 24/50 current_auc = 0.6215213358070502
User 81991 AUC after training: 0.6211502782931354
User 81991 does not improve AUC. Reverting changes.
Training on augumented user 118536 25/50 current_auc = 0.6215213358070502
User 118536 AUC after training: 0.6181818181818182
User 118536 does not improve AUC. Reverting changes.
Training on augumented user 85752 26/50 current_auc = 0.6215213358070502
User 85752 AUC after training: 0.6204081632653061
User 85752 does not improve AUC. Reverting changes.
Training on augumented user 16801 27/50 current_auc = 0.6215213358070502
User 16801 AUC after training: 0.6222634508348796
User 16801 improves AUC. Keeping the model.
Training on augumented user 33823 28/50 current_auc = 0.6222634508348796
User 33823 AUC after training: 0.6218923933209648
User 33823 does not improve AUC. Reverting changes.
Training on augumented user 41338 29/50 current_auc = 0.6222634508348796
User 41338 AUC after training: 0.6218923933209648
User 41338 does not improve AUC. Reverting changes.
Training on augumented user 78288 30/50 current_auc = 0.6222634508348796
User 78288 AUC after training: 0.6207792207792209
User 78288 does not improve AUC. Reverting changes.
Training on augumented user 85784 31/50 current_auc = 0.6222634508348796
User 85784 AUC after training: 0.62152133580705
User 85784 does not improve AUC. Reverting changes.
Training on augumented user 134471 32/50 current_auc = 0.6222634508348796
User 134471 AUC after training: 0.6218923933209648
User 134471 does not improve AUC. Reverting changes.
Training on augumented user 85029 33/50 current_auc = 0.6222634508348796
User 85029 AUC after training: 0.6196660482374768
User 85029 does not improve AUC. Reverting changes.
Training on augumented user 21328 34/50 current_auc = 0.6222634508348796
User 21328 AUC after training: 0.6241187384044528
User 21328 improves AUC. Keeping the model.
Training on augumented user 129294 35/50 current_auc = 0.6241187384044528
User 129294 AUC after training: 0.6233766233766235
User 129294 does not improve AUC. Reverting changes.
Training on augumented user 29976 36/50 current_auc = 0.6241187384044528
User 29976 AUC after training: 0.6233766233766235
User 29976 does not improve AUC. Reverting changes.
Training on augumented user 77140 37/50 current_auc = 0.6241187384044528
User 77140 AUC after training: 0.6237476808905381
User 77140 does not improve AUC. Reverting changes.
Training on augumented user 44723 38/50 current_auc = 0.6241187384044528
User 44723 AUC after training: 0.6237476808905381
User 44723 does not improve AUC. Reverting changes.
Training on augumented user 58508 39/50 current_auc = 0.6241187384044528
User 58508 AUC after training: 0.624860853432282
User 58508 improves AUC. Keeping the model.
Training on augumented user 15665 40/50 current_auc = 0.624860853432282
User 15665 AUC after training: 0.6233766233766235
User 15665 does not improve AUC. Reverting changes.
Training on augumented user 29513 41/50 current_auc = 0.624860853432282
User 29513 AUC after training: 0.6252319109461967
User 29513 improves AUC. Keeping the model.
Training on augumented user 49656 42/50 current_auc = 0.6252319109461967
User 49656 AUC after training: 0.6241187384044528
User 49656 does not improve AUC. Reverting changes.
Training on augumented user 36902 43/50 current_auc = 0.6252319109461967
User 36902 AUC after training: 0.6252319109461967
User 36902 does not improve AUC. Reverting changes.
Training on augumented user 125025 44/50 current_auc = 0.6252319109461967
User 125025 AUC after training: 0.6252319109461967
User 125025 does not improve AUC. Reverting changes.
Training on augumented user 103020 45/50 current_auc = 0.6252319109461967
User 103020 AUC after training: 0.6256029684601114
User 103020 improves AUC. Keeping the model.
Training on augumented user 35650 46/50 current_auc = 0.6256029684601114
User 35650 AUC after training: 0.6263450834879407
User 35650 improves AUC. Keeping the model.
Training on augumented user 64350 47/50 current_auc = 0.6263450834879407
User 64350 AUC after training: 0.623747680890538
User 64350 does not improve AUC. Reverting changes.
Training on augumented user 78481 48/50 current_auc = 0.6263450834879407
User 78481 AUC after training: 0.6222634508348794
User 78481 does not improve AUC. Reverting changes.
Training on augumented user 98817 49/50 current_auc = 0.6263450834879407
User 98817 AUC after training: 0.6267161410018554
User 98817 improves AUC. Keeping the model.
[2024-12-02 19:09:15.458307] start test user 86640 168/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:09:15.865137] start test user 86640 168/568 recall augumented users by random, augumented_users = [112789, 55397, 3043, 75628, 71619, 77929, 70043, 38310, 52974, 134123, 33158, 130288, 127246, 2676, 40149, 37853, 121441, 42388, 1566, 63777, 72154, 36094, 73668, 64190, 79069, 73950, 97062, 104610, 74118, 111495, 113137, 90022, 45213, 77170, 54559, 95612, 22411, 116734, 59461, 8911, 125969, 118347, 131474, 38500, 23987, 5313, 49610, 109764, 46845, 91926]
[2024-12-02 19:09:15.880297] user = 86640 Cloud 168/568
[2024-12-02 19:09:15.891766] user = 86640 Local 168/568
[2024-12-02 19:09:15.941848] user = 86640 Local+ 168/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:09:18.471072] user = 86640 MPDA- 168/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7402439024390244
Training on augumented user 112789 0/50 current_auc = 0.7402439024390244
User 112789 AUC after training: 0.7402439024390244
User 112789 does not improve AUC. Reverting changes.
Training on augumented user 55397 1/50 current_auc = 0.7402439024390244
User 55397 AUC after training: 0.7414634146341463
User 55397 improves AUC. Keeping the model.
Training on augumented user 3043 2/50 current_auc = 0.7414634146341463
User 3043 AUC after training: 0.7414634146341463
User 3043 does not improve AUC. Reverting changes.
Training on augumented user 75628 3/50 current_auc = 0.7414634146341463
User 75628 AUC after training: 0.7414634146341463
User 75628 does not improve AUC. Reverting changes.
Training on augumented user 71619 4/50 current_auc = 0.7414634146341463
User 71619 AUC after training: 0.7402439024390244
User 71619 does not improve AUC. Reverting changes.
Training on augumented user 77929 5/50 current_auc = 0.7414634146341463
User 77929 AUC after training: 0.7390243902439024
User 77929 does not improve AUC. Reverting changes.
Training on augumented user 70043 6/50 current_auc = 0.7414634146341463
User 70043 AUC after training: 0.7414634146341463
User 70043 does not improve AUC. Reverting changes.
Training on augumented user 38310 7/50 current_auc = 0.7414634146341463
User 38310 AUC after training: 0.7414634146341463
User 38310 does not improve AUC. Reverting changes.
Training on augumented user 52974 8/50 current_auc = 0.7414634146341463
User 52974 AUC after training: 0.7402439024390244
User 52974 does not improve AUC. Reverting changes.
Training on augumented user 134123 9/50 current_auc = 0.7414634146341463
User 134123 AUC after training: 0.7414634146341463
User 134123 does not improve AUC. Reverting changes.
Training on augumented user 33158 10/50 current_auc = 0.7414634146341463
User 33158 AUC after training: 0.7414634146341463
User 33158 does not improve AUC. Reverting changes.
Training on augumented user 130288 11/50 current_auc = 0.7414634146341463
User 130288 AUC after training: 0.7414634146341463
User 130288 does not improve AUC. Reverting changes.
Training on augumented user 127246 12/50 current_auc = 0.7414634146341463
User 127246 AUC after training: 0.7414634146341463
User 127246 does not improve AUC. Reverting changes.
Training on augumented user 2676 13/50 current_auc = 0.7414634146341463
User 2676 AUC after training: 0.7402439024390244
User 2676 does not improve AUC. Reverting changes.
Training on augumented user 40149 14/50 current_auc = 0.7414634146341463
User 40149 AUC after training: 0.7414634146341463
User 40149 does not improve AUC. Reverting changes.
Training on augumented user 37853 15/50 current_auc = 0.7414634146341463
User 37853 AUC after training: 0.7414634146341463
User 37853 does not improve AUC. Reverting changes.
Training on augumented user 121441 16/50 current_auc = 0.7414634146341463
User 121441 AUC after training: 0.7414634146341463
User 121441 does not improve AUC. Reverting changes.
Training on augumented user 42388 17/50 current_auc = 0.7414634146341463
User 42388 AUC after training: 0.7414634146341463
User 42388 does not improve AUC. Reverting changes.
Training on augumented user 1566 18/50 current_auc = 0.7414634146341463
User 1566 AUC after training: 0.7402439024390244
User 1566 does not improve AUC. Reverting changes.
Training on augumented user 63777 19/50 current_auc = 0.7414634146341463
User 63777 AUC after training: 0.7390243902439024
User 63777 does not improve AUC. Reverting changes.
Training on augumented user 72154 20/50 current_auc = 0.7414634146341463
User 72154 AUC after training: 0.7390243902439024
User 72154 does not improve AUC. Reverting changes.
Training on augumented user 36094 21/50 current_auc = 0.7414634146341463
User 36094 AUC after training: 0.7402439024390244
User 36094 does not improve AUC. Reverting changes.
Training on augumented user 73668 22/50 current_auc = 0.7414634146341463
User 73668 AUC after training: 0.7402439024390244
User 73668 does not improve AUC. Reverting changes.
Training on augumented user 64190 23/50 current_auc = 0.7414634146341463
User 64190 AUC after training: 0.7402439024390244
User 64190 does not improve AUC. Reverting changes.
Training on augumented user 79069 24/50 current_auc = 0.7414634146341463
User 79069 AUC after training: 0.7402439024390244
User 79069 does not improve AUC. Reverting changes.
Training on augumented user 73950 25/50 current_auc = 0.7414634146341463
User 73950 AUC after training: 0.7414634146341463
User 73950 does not improve AUC. Reverting changes.
Training on augumented user 97062 26/50 current_auc = 0.7414634146341463
User 97062 AUC after training: 0.7414634146341463
User 97062 does not improve AUC. Reverting changes.
Training on augumented user 104610 27/50 current_auc = 0.7414634146341463
User 104610 AUC after training: 0.7402439024390244
User 104610 does not improve AUC. Reverting changes.
Training on augumented user 74118 28/50 current_auc = 0.7414634146341463
User 74118 AUC after training: 0.7390243902439024
User 74118 does not improve AUC. Reverting changes.
Training on augumented user 111495 29/50 current_auc = 0.7414634146341463
User 111495 AUC after training: 0.7414634146341463
User 111495 does not improve AUC. Reverting changes.
Training on augumented user 113137 30/50 current_auc = 0.7414634146341463
User 113137 AUC after training: 0.7414634146341463
User 113137 does not improve AUC. Reverting changes.
Training on augumented user 90022 31/50 current_auc = 0.7414634146341463
User 90022 AUC after training: 0.7371951219512195
User 90022 does not improve AUC. Reverting changes.
Training on augumented user 45213 32/50 current_auc = 0.7414634146341463
User 45213 AUC after training: 0.7402439024390244
User 45213 does not improve AUC. Reverting changes.
Training on augumented user 77170 33/50 current_auc = 0.7414634146341463
User 77170 AUC after training: 0.7390243902439024
User 77170 does not improve AUC. Reverting changes.
Training on augumented user 54559 34/50 current_auc = 0.7414634146341463
User 54559 AUC after training: 0.7402439024390244
User 54559 does not improve AUC. Reverting changes.
Training on augumented user 95612 35/50 current_auc = 0.7414634146341463
User 95612 AUC after training: 0.7396341463414634
User 95612 does not improve AUC. Reverting changes.
Training on augumented user 22411 36/50 current_auc = 0.7414634146341463
User 22411 AUC after training: 0.7390243902439024
User 22411 does not improve AUC. Reverting changes.
Training on augumented user 116734 37/50 current_auc = 0.7414634146341463
User 116734 AUC after training: 0.7414634146341463
User 116734 does not improve AUC. Reverting changes.
Training on augumented user 59461 38/50 current_auc = 0.7414634146341463
User 59461 AUC after training: 0.7414634146341463
User 59461 does not improve AUC. Reverting changes.
Training on augumented user 8911 39/50 current_auc = 0.7414634146341463
User 8911 AUC after training: 0.7402439024390244
User 8911 does not improve AUC. Reverting changes.
Training on augumented user 125969 40/50 current_auc = 0.7414634146341463
User 125969 AUC after training: 0.7402439024390244
User 125969 does not improve AUC. Reverting changes.
Training on augumented user 118347 41/50 current_auc = 0.7414634146341463
User 118347 AUC after training: 0.7414634146341463
User 118347 does not improve AUC. Reverting changes.
Training on augumented user 131474 42/50 current_auc = 0.7414634146341463
User 131474 AUC after training: 0.7414634146341463
User 131474 does not improve AUC. Reverting changes.
Training on augumented user 38500 43/50 current_auc = 0.7414634146341463
User 38500 AUC after training: 0.7390243902439024
User 38500 does not improve AUC. Reverting changes.
Training on augumented user 23987 44/50 current_auc = 0.7414634146341463
User 23987 AUC after training: 0.7402439024390244
User 23987 does not improve AUC. Reverting changes.
Training on augumented user 5313 45/50 current_auc = 0.7414634146341463
User 5313 AUC after training: 0.7414634146341463
User 5313 does not improve AUC. Reverting changes.
Training on augumented user 49610 46/50 current_auc = 0.7414634146341463
User 49610 AUC after training: 0.7402439024390244
User 49610 does not improve AUC. Reverting changes.
Training on augumented user 109764 47/50 current_auc = 0.7414634146341463
User 109764 AUC after training: 0.7414634146341463
User 109764 does not improve AUC. Reverting changes.
Training on augumented user 46845 48/50 current_auc = 0.7414634146341463
User 46845 AUC after training: 0.7390243902439024
User 46845 does not improve AUC. Reverting changes.
Training on augumented user 91926 49/50 current_auc = 0.7414634146341463
User 91926 AUC after training: 0.7414634146341463
User 91926 does not improve AUC. Reverting changes.
[2024-12-02 19:09:50.162193] start test user 86684 169/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:09:50.738788] start test user 86684 169/568 recall augumented users by random, augumented_users = [11923, 24423, 117314, 80185, 77264, 109158, 14318, 120368, 45687, 84050, 80665, 12635, 11810, 6532, 5134, 18727, 70471, 127849, 47704, 21700, 98770, 138420, 108212, 124973, 54391, 20071, 50741, 21720, 117838, 82823, 80377, 30017, 111823, 18171, 59869, 2714, 102350, 119076, 63887, 96198, 125573, 11141, 88291, 128120, 38160, 62564, 130315, 113626, 108143, 123799]
[2024-12-02 19:09:50.766333] user = 86684 Cloud 169/568
[2024-12-02 19:09:50.815752] user = 86684 Local 169/568
[2024-12-02 19:09:50.941786] user = 86684 Local+ 169/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:09:53.370658] user = 86684 MPDA- 169/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.84375
Training on augumented user 11923 0/50 current_auc = 0.84375
User 11923 AUC after training: 0.84375
User 11923 does not improve AUC. Reverting changes.
Training on augumented user 24423 1/50 current_auc = 0.84375
User 24423 AUC after training: 0.84375
User 24423 does not improve AUC. Reverting changes.
Training on augumented user 117314 2/50 current_auc = 0.84375
User 117314 AUC after training: 0.875
User 117314 improves AUC. Keeping the model.
Training on augumented user 80185 3/50 current_auc = 0.875
User 80185 AUC after training: 0.84375
User 80185 does not improve AUC. Reverting changes.
Training on augumented user 77264 4/50 current_auc = 0.875
User 77264 AUC after training: 0.875
User 77264 does not improve AUC. Reverting changes.
Training on augumented user 109158 5/50 current_auc = 0.875
User 109158 AUC after training: 0.875
User 109158 does not improve AUC. Reverting changes.
Training on augumented user 14318 6/50 current_auc = 0.875
User 14318 AUC after training: 0.875
User 14318 does not improve AUC. Reverting changes.
Training on augumented user 120368 7/50 current_auc = 0.875
User 120368 AUC after training: 0.875
User 120368 does not improve AUC. Reverting changes.
Training on augumented user 45687 8/50 current_auc = 0.875
User 45687 AUC after training: 0.875
User 45687 does not improve AUC. Reverting changes.
Training on augumented user 84050 9/50 current_auc = 0.875
User 84050 AUC after training: 0.875
User 84050 does not improve AUC. Reverting changes.
Training on augumented user 80665 10/50 current_auc = 0.875
User 80665 AUC after training: 0.875
User 80665 does not improve AUC. Reverting changes.
Training on augumented user 12635 11/50 current_auc = 0.875
User 12635 AUC after training: 0.875
User 12635 does not improve AUC. Reverting changes.
Training on augumented user 11810 12/50 current_auc = 0.875
User 11810 AUC after training: 0.875
User 11810 does not improve AUC. Reverting changes.
Training on augumented user 6532 13/50 current_auc = 0.875
User 6532 AUC after training: 0.875
User 6532 does not improve AUC. Reverting changes.
Training on augumented user 5134 14/50 current_auc = 0.875
User 5134 AUC after training: 0.875
User 5134 does not improve AUC. Reverting changes.
Training on augumented user 18727 15/50 current_auc = 0.875
User 18727 AUC after training: 0.84375
User 18727 does not improve AUC. Reverting changes.
Training on augumented user 70471 16/50 current_auc = 0.875
User 70471 AUC after training: 0.875
User 70471 does not improve AUC. Reverting changes.
Training on augumented user 127849 17/50 current_auc = 0.875
User 127849 AUC after training: 0.84375
User 127849 does not improve AUC. Reverting changes.
Training on augumented user 47704 18/50 current_auc = 0.875
User 47704 AUC after training: 0.875
User 47704 does not improve AUC. Reverting changes.
Training on augumented user 21700 19/50 current_auc = 0.875
User 21700 AUC after training: 0.875
User 21700 does not improve AUC. Reverting changes.
Training on augumented user 98770 20/50 current_auc = 0.875
User 98770 AUC after training: 0.875
User 98770 does not improve AUC. Reverting changes.
Training on augumented user 138420 21/50 current_auc = 0.875
User 138420 AUC after training: 0.875
User 138420 does not improve AUC. Reverting changes.
Training on augumented user 108212 22/50 current_auc = 0.875
User 108212 AUC after training: 0.84375
User 108212 does not improve AUC. Reverting changes.
Training on augumented user 124973 23/50 current_auc = 0.875
User 124973 AUC after training: 0.875
User 124973 does not improve AUC. Reverting changes.
Training on augumented user 54391 24/50 current_auc = 0.875
User 54391 AUC after training: 0.875
User 54391 does not improve AUC. Reverting changes.
Training on augumented user 20071 25/50 current_auc = 0.875
User 20071 AUC after training: 0.875
User 20071 does not improve AUC. Reverting changes.
Training on augumented user 50741 26/50 current_auc = 0.875
User 50741 AUC after training: 0.875
User 50741 does not improve AUC. Reverting changes.
Training on augumented user 21720 27/50 current_auc = 0.875
User 21720 AUC after training: 0.875
User 21720 does not improve AUC. Reverting changes.
Training on augumented user 117838 28/50 current_auc = 0.875
User 117838 AUC after training: 0.875
User 117838 does not improve AUC. Reverting changes.
Training on augumented user 82823 29/50 current_auc = 0.875
User 82823 AUC after training: 0.875
User 82823 does not improve AUC. Reverting changes.
Training on augumented user 80377 30/50 current_auc = 0.875
User 80377 AUC after training: 0.875
User 80377 does not improve AUC. Reverting changes.
Training on augumented user 30017 31/50 current_auc = 0.875
User 30017 AUC after training: 0.875
User 30017 does not improve AUC. Reverting changes.
Training on augumented user 111823 32/50 current_auc = 0.875
User 111823 AUC after training: 0.875
User 111823 does not improve AUC. Reverting changes.
Training on augumented user 18171 33/50 current_auc = 0.875
User 18171 AUC after training: 0.875
User 18171 does not improve AUC. Reverting changes.
Training on augumented user 59869 34/50 current_auc = 0.875
User 59869 AUC after training: 0.84375
User 59869 does not improve AUC. Reverting changes.
Training on augumented user 2714 35/50 current_auc = 0.875
User 2714 AUC after training: 0.875
User 2714 does not improve AUC. Reverting changes.
Training on augumented user 102350 36/50 current_auc = 0.875
User 102350 AUC after training: 0.875
User 102350 does not improve AUC. Reverting changes.
Training on augumented user 119076 37/50 current_auc = 0.875
User 119076 AUC after training: 0.875
User 119076 does not improve AUC. Reverting changes.
Training on augumented user 63887 38/50 current_auc = 0.875
User 63887 AUC after training: 0.875
User 63887 does not improve AUC. Reverting changes.
Training on augumented user 96198 39/50 current_auc = 0.875
User 96198 AUC after training: 0.875
User 96198 does not improve AUC. Reverting changes.
Training on augumented user 125573 40/50 current_auc = 0.875
User 125573 AUC after training: 0.84375
User 125573 does not improve AUC. Reverting changes.
Training on augumented user 11141 41/50 current_auc = 0.875
User 11141 AUC after training: 0.84375
User 11141 does not improve AUC. Reverting changes.
Training on augumented user 88291 42/50 current_auc = 0.875
User 88291 AUC after training: 0.875
User 88291 does not improve AUC. Reverting changes.
Training on augumented user 128120 43/50 current_auc = 0.875
User 128120 AUC after training: 0.875
User 128120 does not improve AUC. Reverting changes.
Training on augumented user 38160 44/50 current_auc = 0.875
User 38160 AUC after training: 0.84375
User 38160 does not improve AUC. Reverting changes.
Training on augumented user 62564 45/50 current_auc = 0.875
User 62564 AUC after training: 0.84375
User 62564 does not improve AUC. Reverting changes.
Training on augumented user 130315 46/50 current_auc = 0.875
User 130315 AUC after training: 0.875
User 130315 does not improve AUC. Reverting changes.
Training on augumented user 113626 47/50 current_auc = 0.875
User 113626 AUC after training: 0.875
User 113626 does not improve AUC. Reverting changes.
Training on augumented user 108143 48/50 current_auc = 0.875
User 108143 AUC after training: 0.875
User 108143 does not improve AUC. Reverting changes.
Training on augumented user 123799 49/50 current_auc = 0.875
User 123799 AUC after training: 0.875
User 123799 does not improve AUC. Reverting changes.
[2024-12-02 19:10:18.137801] start test user 86721 170/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:10:18.552942] start test user 86721 170/568 recall augumented users by random, augumented_users = [65992, 54533, 17642, 98772, 60128, 65715, 68311, 109279, 56228, 114921, 19113, 100402, 58830, 130325, 125904, 120103, 66392, 115749, 56144, 25988, 26446, 67283, 3552, 49858, 81218, 118962, 14490, 112823, 111802, 126733, 74198, 59555, 111959, 7644, 121095, 85358, 48841, 13291, 101485, 89067, 90045, 42144, 20731, 32967, 77767, 1579, 94856, 97031, 2985, 137641]
[2024-12-02 19:10:18.568420] user = 86721 Cloud 170/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:10:18.574770] user = 86721 Local 170/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:10:18.596920] user = 86721 Local+ 170/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:10:20.683027] user = 86721 MPDA- 170/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 65992 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65992 AUC after training: 0.5
User 65992 does not improve AUC. Reverting changes.
Training on augumented user 54533 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54533 AUC after training: 0.5
User 54533 does not improve AUC. Reverting changes.
Training on augumented user 17642 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17642 AUC after training: 0.5
User 17642 does not improve AUC. Reverting changes.
Training on augumented user 98772 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98772 AUC after training: 0.5
User 98772 does not improve AUC. Reverting changes.
Training on augumented user 60128 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60128 AUC after training: 0.5
User 60128 does not improve AUC. Reverting changes.
Training on augumented user 65715 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65715 AUC after training: 0.5
User 65715 does not improve AUC. Reverting changes.
Training on augumented user 68311 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68311 AUC after training: 0.5
User 68311 does not improve AUC. Reverting changes.
Training on augumented user 109279 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109279 AUC after training: 0.5
User 109279 does not improve AUC. Reverting changes.
Training on augumented user 56228 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56228 AUC after training: 0.5
User 56228 does not improve AUC. Reverting changes.
Training on augumented user 114921 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114921 AUC after training: 0.5
User 114921 does not improve AUC. Reverting changes.
Training on augumented user 19113 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19113 AUC after training: 0.5
User 19113 does not improve AUC. Reverting changes.
Training on augumented user 100402 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100402 AUC after training: 0.5
User 100402 does not improve AUC. Reverting changes.
Training on augumented user 58830 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58830 AUC after training: 0.5
User 58830 does not improve AUC. Reverting changes.
Training on augumented user 130325 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130325 AUC after training: 0.5
User 130325 does not improve AUC. Reverting changes.
Training on augumented user 125904 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125904 AUC after training: 0.5
User 125904 does not improve AUC. Reverting changes.
Training on augumented user 120103 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120103 AUC after training: 0.5
User 120103 does not improve AUC. Reverting changes.
Training on augumented user 66392 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66392 AUC after training: 0.5
User 66392 does not improve AUC. Reverting changes.
Training on augumented user 115749 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115749 AUC after training: 0.5
User 115749 does not improve AUC. Reverting changes.
Training on augumented user 56144 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56144 AUC after training: 0.5
User 56144 does not improve AUC. Reverting changes.
Training on augumented user 25988 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25988 AUC after training: 0.5
User 25988 does not improve AUC. Reverting changes.
Training on augumented user 26446 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26446 AUC after training: 0.5
User 26446 does not improve AUC. Reverting changes.
Training on augumented user 67283 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67283 AUC after training: 0.5
User 67283 does not improve AUC. Reverting changes.
Training on augumented user 3552 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3552 AUC after training: 0.5
User 3552 does not improve AUC. Reverting changes.
Training on augumented user 49858 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49858 AUC after training: 0.5
User 49858 does not improve AUC. Reverting changes.
Training on augumented user 81218 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81218 AUC after training: 0.5
User 81218 does not improve AUC. Reverting changes.
Training on augumented user 118962 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118962 AUC after training: 0.5
User 118962 does not improve AUC. Reverting changes.
Training on augumented user 14490 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14490 AUC after training: 0.5
User 14490 does not improve AUC. Reverting changes.
Training on augumented user 112823 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112823 AUC after training: 0.5
User 112823 does not improve AUC. Reverting changes.
Training on augumented user 111802 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111802 AUC after training: 0.5
User 111802 does not improve AUC. Reverting changes.
Training on augumented user 126733 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126733 AUC after training: 0.5
User 126733 does not improve AUC. Reverting changes.
Training on augumented user 74198 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74198 AUC after training: 0.5
User 74198 does not improve AUC. Reverting changes.
Training on augumented user 59555 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59555 AUC after training: 0.5
User 59555 does not improve AUC. Reverting changes.
Training on augumented user 111959 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111959 AUC after training: 0.5
User 111959 does not improve AUC. Reverting changes.
Training on augumented user 7644 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7644 AUC after training: 0.5
User 7644 does not improve AUC. Reverting changes.
Training on augumented user 121095 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121095 AUC after training: 0.5
User 121095 does not improve AUC. Reverting changes.
Training on augumented user 85358 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85358 AUC after training: 0.5
User 85358 does not improve AUC. Reverting changes.
Training on augumented user 48841 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48841 AUC after training: 0.5
User 48841 does not improve AUC. Reverting changes.
Training on augumented user 13291 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13291 AUC after training: 0.5
User 13291 does not improve AUC. Reverting changes.
Training on augumented user 101485 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101485 AUC after training: 0.5
User 101485 does not improve AUC. Reverting changes.
Training on augumented user 89067 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89067 AUC after training: 0.5
User 89067 does not improve AUC. Reverting changes.
Training on augumented user 90045 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90045 AUC after training: 0.5
User 90045 does not improve AUC. Reverting changes.
Training on augumented user 42144 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42144 AUC after training: 0.5
User 42144 does not improve AUC. Reverting changes.
Training on augumented user 20731 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20731 AUC after training: 0.5
User 20731 does not improve AUC. Reverting changes.
Training on augumented user 32967 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32967 AUC after training: 0.5
User 32967 does not improve AUC. Reverting changes.
Training on augumented user 77767 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77767 AUC after training: 0.5
User 77767 does not improve AUC. Reverting changes.
Training on augumented user 1579 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1579 AUC after training: 0.5
User 1579 does not improve AUC. Reverting changes.
Training on augumented user 94856 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94856 AUC after training: 0.5
User 94856 does not improve AUC. Reverting changes.
Training on augumented user 97031 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97031 AUC after training: 0.5
User 97031 does not improve AUC. Reverting changes.
Training on augumented user 2985 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2985 AUC after training: 0.5
User 2985 does not improve AUC. Reverting changes.
Training on augumented user 137641 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137641 AUC after training: 0.5
User 137641 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:10:54.262032] start test user 86722 171/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:10:54.982774] start test user 86722 171/568 recall augumented users by random, augumented_users = [87259, 3895, 60726, 56175, 125525, 55143, 95773, 16593, 16236, 105144, 7488, 93643, 125198, 137065, 118067, 1002, 123596, 84838, 28531, 85562, 105109, 116592, 51707, 7038, 25191, 117729, 48195, 120318, 90150, 120297, 63777, 22855, 122436, 43223, 31720, 130199, 133513, 116606, 16541, 5332, 72483, 87077, 12940, 104330, 125225, 89864, 99714, 128890, 71563, 102006]
[2024-12-02 19:10:54.999966] user = 86722 Cloud 171/568
[2024-12-02 19:10:55.018486] user = 86722 Local 171/568
[2024-12-02 19:10:55.243857] user = 86722 Local+ 171/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:10:58.399698] user = 86722 MPDA- 171/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5520949202817946
Training on augumented user 87259 0/50 current_auc = 0.5520949202817946
User 87259 AUC after training: 0.5528364849833147
User 87259 improves AUC. Keeping the model.
Training on augumented user 3895 1/50 current_auc = 0.5528364849833147
User 3895 AUC after training: 0.5528364849833147
User 3895 does not improve AUC. Reverting changes.
Training on augumented user 60726 2/50 current_auc = 0.5528364849833147
User 60726 AUC after training: 0.5525892967494748
User 60726 does not improve AUC. Reverting changes.
Training on augumented user 56175 3/50 current_auc = 0.5528364849833147
User 56175 AUC after training: 0.5524657026325548
User 56175 does not improve AUC. Reverting changes.
Training on augumented user 125525 4/50 current_auc = 0.5528364849833147
User 125525 AUC after training: 0.5530836732171549
User 125525 improves AUC. Keeping the model.
Training on augumented user 55143 5/50 current_auc = 0.5530836732171549
User 55143 AUC after training: 0.5522185143987146
User 55143 does not improve AUC. Reverting changes.
Training on augumented user 95773 6/50 current_auc = 0.5530836732171549
User 95773 AUC after training: 0.5538252379186751
User 95773 improves AUC. Keeping the model.
Training on augumented user 16593 7/50 current_auc = 0.5538252379186751
User 16593 AUC after training: 0.5528364849833147
User 16593 does not improve AUC. Reverting changes.
Training on augumented user 16236 8/50 current_auc = 0.5538252379186751
User 16236 AUC after training: 0.5520949202817946
User 16236 does not improve AUC. Reverting changes.
Training on augumented user 105144 9/50 current_auc = 0.5538252379186751
User 105144 AUC after training: 0.5529600791002349
User 105144 does not improve AUC. Reverting changes.
Training on augumented user 7488 10/50 current_auc = 0.5538252379186751
User 7488 AUC after training: 0.5541960202694352
User 7488 improves AUC. Keeping the model.
Training on augumented user 93643 11/50 current_auc = 0.5541960202694352
User 93643 AUC after training: 0.5529600791002349
User 93643 does not improve AUC. Reverting changes.
Training on augumented user 125198 12/50 current_auc = 0.5541960202694352
User 125198 AUC after training: 0.5540724261525151
User 125198 does not improve AUC. Reverting changes.
Training on augumented user 137065 13/50 current_auc = 0.5541960202694352
User 137065 AUC after training: 0.553825237918675
User 137065 does not improve AUC. Reverting changes.
Training on augumented user 118067 14/50 current_auc = 0.5541960202694352
User 118067 AUC after training: 0.5544432085032753
User 118067 improves AUC. Keeping the model.
Training on augumented user 1002 15/50 current_auc = 0.5544432085032753
User 1002 AUC after training: 0.5543196143863551
User 1002 does not improve AUC. Reverting changes.
Training on augumented user 123596 16/50 current_auc = 0.5544432085032753
User 123596 AUC after training: 0.553825237918675
User 123596 does not improve AUC. Reverting changes.
Training on augumented user 84838 17/50 current_auc = 0.5544432085032753
User 84838 AUC after training: 0.553701643801755
User 84838 does not improve AUC. Reverting changes.
Training on augumented user 28531 18/50 current_auc = 0.5544432085032753
User 28531 AUC after training: 0.5538252379186751
User 28531 does not improve AUC. Reverting changes.
Training on augumented user 85562 19/50 current_auc = 0.5544432085032753
User 85562 AUC after training: 0.5546903967371153
User 85562 improves AUC. Keeping the model.
Training on augumented user 105109 20/50 current_auc = 0.5546903967371153
User 105109 AUC after training: 0.5546903967371153
User 105109 does not improve AUC. Reverting changes.
Training on augumented user 116592 21/50 current_auc = 0.5546903967371153
User 116592 AUC after training: 0.5534544555679151
User 116592 does not improve AUC. Reverting changes.
Training on augumented user 51707 22/50 current_auc = 0.5546903967371153
User 51707 AUC after training: 0.5539488320355951
User 51707 does not improve AUC. Reverting changes.
Training on augumented user 7038 23/50 current_auc = 0.5546903967371153
User 7038 AUC after training: 0.5530836732171548
User 7038 does not improve AUC. Reverting changes.
Training on augumented user 25191 24/50 current_auc = 0.5546903967371153
User 25191 AUC after training: 0.5543196143863552
User 25191 does not improve AUC. Reverting changes.
Training on augumented user 117729 25/50 current_auc = 0.5546903967371153
User 117729 AUC after training: 0.553578049684835
User 117729 does not improve AUC. Reverting changes.
Training on augumented user 48195 26/50 current_auc = 0.5546903967371153
User 48195 AUC after training: 0.553701643801755
User 48195 does not improve AUC. Reverting changes.
Training on augumented user 120318 27/50 current_auc = 0.5546903967371153
User 120318 AUC after training: 0.5545668026201952
User 120318 does not improve AUC. Reverting changes.
Training on augumented user 90150 28/50 current_auc = 0.5546903967371153
User 90150 AUC after training: 0.5550611790878753
User 90150 improves AUC. Keeping the model.
Training on augumented user 120297 29/50 current_auc = 0.5550611790878753
User 120297 AUC after training: 0.5543196143863552
User 120297 does not improve AUC. Reverting changes.
Training on augumented user 63777 30/50 current_auc = 0.5550611790878753
User 63777 AUC after training: 0.553701643801755
User 63777 does not improve AUC. Reverting changes.
Training on augumented user 22855 31/50 current_auc = 0.5550611790878753
User 22855 AUC after training: 0.5551847732047954
User 22855 improves AUC. Keeping the model.
Training on augumented user 122436 32/50 current_auc = 0.5551847732047954
User 122436 AUC after training: 0.5523421085156347
User 122436 does not improve AUC. Reverting changes.
Training on augumented user 43223 33/50 current_auc = 0.5551847732047954
User 43223 AUC after training: 0.553701643801755
User 43223 does not improve AUC. Reverting changes.
Training on augumented user 31720 34/50 current_auc = 0.5551847732047954
User 31720 AUC after training: 0.5543196143863552
User 31720 does not improve AUC. Reverting changes.
Training on augumented user 130199 35/50 current_auc = 0.5551847732047954
User 130199 AUC after training: 0.5548139908540354
User 130199 does not improve AUC. Reverting changes.
Training on augumented user 133513 36/50 current_auc = 0.5551847732047954
User 133513 AUC after training: 0.5548139908540353
User 133513 does not improve AUC. Reverting changes.
Training on augumented user 116606 37/50 current_auc = 0.5551847732047954
User 116606 AUC after training: 0.553701643801755
User 116606 does not improve AUC. Reverting changes.
Training on augumented user 16541 38/50 current_auc = 0.5551847732047954
User 16541 AUC after training: 0.5540724261525151
User 16541 does not improve AUC. Reverting changes.
Training on augumented user 5332 39/50 current_auc = 0.5551847732047954
User 5332 AUC after training: 0.5517241379310345
User 5332 does not improve AUC. Reverting changes.
Training on augumented user 72483 40/50 current_auc = 0.5551847732047954
User 72483 AUC after training: 0.5551847732047954
User 72483 does not improve AUC. Reverting changes.
Training on augumented user 87077 41/50 current_auc = 0.5551847732047954
User 87077 AUC after training: 0.5548139908540354
User 87077 does not improve AUC. Reverting changes.
Training on augumented user 12940 42/50 current_auc = 0.5551847732047954
User 12940 AUC after training: 0.5545668026201952
User 12940 does not improve AUC. Reverting changes.
Training on augumented user 104330 43/50 current_auc = 0.5551847732047954
User 104330 AUC after training: 0.553701643801755
User 104330 does not improve AUC. Reverting changes.
Training on augumented user 125225 44/50 current_auc = 0.5551847732047954
User 125225 AUC after training: 0.5546903967371153
User 125225 does not improve AUC. Reverting changes.
Training on augumented user 89864 45/50 current_auc = 0.5551847732047954
User 89864 AUC after training: 0.5533308614509949
User 89864 does not improve AUC. Reverting changes.
Training on augumented user 99714 46/50 current_auc = 0.5551847732047954
User 99714 AUC after training: 0.5550611790878753
User 99714 does not improve AUC. Reverting changes.
Training on augumented user 128890 47/50 current_auc = 0.5551847732047954
User 128890 AUC after training: 0.5522185143987146
User 128890 does not improve AUC. Reverting changes.
Training on augumented user 71563 48/50 current_auc = 0.5551847732047954
User 71563 AUC after training: 0.5550611790878754
User 71563 does not improve AUC. Reverting changes.
Training on augumented user 102006 49/50 current_auc = 0.5551847732047954
User 102006 AUC after training: 0.5550611790878753
User 102006 does not improve AUC. Reverting changes.
[2024-12-02 19:11:30.396328] start test user 86730 172/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:11:30.981643] start test user 86730 172/568 recall augumented users by random, augumented_users = [102282, 56633, 33578, 51757, 78081, 95094, 38594, 129974, 23593, 56447, 80689, 57477, 33197, 96283, 13228, 50010, 4622, 2764, 79705, 88800, 124716, 63084, 110540, 81372, 11199, 62715, 103461, 91137, 100545, 38363, 12964, 83636, 97978, 88308, 87, 129779, 50615, 24807, 55791, 25050, 75957, 18928, 214, 65868, 23579, 31800, 66275, 71644, 63926, 110387]
[2024-12-02 19:11:31.022364] user = 86730 Cloud 172/568
[2024-12-02 19:11:31.033478] user = 86730 Local 172/568
[2024-12-02 19:11:31.074660] user = 86730 Local+ 172/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:11:33.415989] user = 86730 MPDA- 172/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5597826086956521
Training on augumented user 102282 0/50 current_auc = 0.5597826086956521
User 102282 AUC after training: 0.5579710144927535
User 102282 does not improve AUC. Reverting changes.
Training on augumented user 56633 1/50 current_auc = 0.5597826086956521
User 56633 AUC after training: 0.5579710144927535
User 56633 does not improve AUC. Reverting changes.
Training on augumented user 33578 2/50 current_auc = 0.5597826086956521
User 33578 AUC after training: 0.5597826086956521
User 33578 does not improve AUC. Reverting changes.
Training on augumented user 51757 3/50 current_auc = 0.5597826086956521
User 51757 AUC after training: 0.5597826086956521
User 51757 does not improve AUC. Reverting changes.
Training on augumented user 78081 4/50 current_auc = 0.5597826086956521
User 78081 AUC after training: 0.5597826086956521
User 78081 does not improve AUC. Reverting changes.
Training on augumented user 95094 5/50 current_auc = 0.5597826086956521
User 95094 AUC after training: 0.5597826086956521
User 95094 does not improve AUC. Reverting changes.
Training on augumented user 38594 6/50 current_auc = 0.5597826086956521
User 38594 AUC after training: 0.5597826086956522
User 38594 improves AUC. Keeping the model.
Training on augumented user 129974 7/50 current_auc = 0.5597826086956522
User 129974 AUC after training: 0.5615942028985507
User 129974 improves AUC. Keeping the model.
Training on augumented user 23593 8/50 current_auc = 0.5615942028985507
User 23593 AUC after training: 0.5597826086956522
User 23593 does not improve AUC. Reverting changes.
Training on augumented user 56447 9/50 current_auc = 0.5615942028985507
User 56447 AUC after training: 0.5615942028985507
User 56447 does not improve AUC. Reverting changes.
Training on augumented user 80689 10/50 current_auc = 0.5615942028985507
User 80689 AUC after training: 0.5597826086956522
User 80689 does not improve AUC. Reverting changes.
Training on augumented user 57477 11/50 current_auc = 0.5615942028985507
User 57477 AUC after training: 0.5634057971014492
User 57477 improves AUC. Keeping the model.
Training on augumented user 33197 12/50 current_auc = 0.5634057971014492
User 33197 AUC after training: 0.5579710144927537
User 33197 does not improve AUC. Reverting changes.
Training on augumented user 96283 13/50 current_auc = 0.5634057971014492
User 96283 AUC after training: 0.5597826086956521
User 96283 does not improve AUC. Reverting changes.
Training on augumented user 13228 14/50 current_auc = 0.5634057971014492
User 13228 AUC after training: 0.5634057971014492
User 13228 does not improve AUC. Reverting changes.
Training on augumented user 50010 15/50 current_auc = 0.5634057971014492
User 50010 AUC after training: 0.5615942028985507
User 50010 does not improve AUC. Reverting changes.
Training on augumented user 4622 16/50 current_auc = 0.5634057971014492
User 4622 AUC after training: 0.5615942028985507
User 4622 does not improve AUC. Reverting changes.
Training on augumented user 2764 17/50 current_auc = 0.5634057971014492
User 2764 AUC after training: 0.5615942028985507
User 2764 does not improve AUC. Reverting changes.
Training on augumented user 79705 18/50 current_auc = 0.5634057971014492
User 79705 AUC after training: 0.5597826086956521
User 79705 does not improve AUC. Reverting changes.
Training on augumented user 88800 19/50 current_auc = 0.5634057971014492
User 88800 AUC after training: 0.5634057971014492
User 88800 does not improve AUC. Reverting changes.
Training on augumented user 124716 20/50 current_auc = 0.5634057971014492
User 124716 AUC after training: 0.5597826086956521
User 124716 does not improve AUC. Reverting changes.
Training on augumented user 63084 21/50 current_auc = 0.5634057971014492
User 63084 AUC after training: 0.5634057971014492
User 63084 does not improve AUC. Reverting changes.
Training on augumented user 110540 22/50 current_auc = 0.5634057971014492
User 110540 AUC after training: 0.5634057971014492
User 110540 does not improve AUC. Reverting changes.
Training on augumented user 81372 23/50 current_auc = 0.5634057971014492
User 81372 AUC after training: 0.5597826086956522
User 81372 does not improve AUC. Reverting changes.
Training on augumented user 11199 24/50 current_auc = 0.5634057971014492
User 11199 AUC after training: 0.5597826086956522
User 11199 does not improve AUC. Reverting changes.
Training on augumented user 62715 25/50 current_auc = 0.5634057971014492
User 62715 AUC after training: 0.5615942028985507
User 62715 does not improve AUC. Reverting changes.
Training on augumented user 103461 26/50 current_auc = 0.5634057971014492
User 103461 AUC after training: 0.5597826086956521
User 103461 does not improve AUC. Reverting changes.
Training on augumented user 91137 27/50 current_auc = 0.5634057971014492
User 91137 AUC after training: 0.5615942028985507
User 91137 does not improve AUC. Reverting changes.
Training on augumented user 100545 28/50 current_auc = 0.5634057971014492
User 100545 AUC after training: 0.5615942028985507
User 100545 does not improve AUC. Reverting changes.
Training on augumented user 38363 29/50 current_auc = 0.5634057971014492
User 38363 AUC after training: 0.5579710144927535
User 38363 does not improve AUC. Reverting changes.
Training on augumented user 12964 30/50 current_auc = 0.5634057971014492
User 12964 AUC after training: 0.5615942028985507
User 12964 does not improve AUC. Reverting changes.
Training on augumented user 83636 31/50 current_auc = 0.5634057971014492
User 83636 AUC after training: 0.5634057971014492
User 83636 does not improve AUC. Reverting changes.
Training on augumented user 97978 32/50 current_auc = 0.5634057971014492
User 97978 AUC after training: 0.5597826086956521
User 97978 does not improve AUC. Reverting changes.
Training on augumented user 88308 33/50 current_auc = 0.5634057971014492
User 88308 AUC after training: 0.5597826086956521
User 88308 does not improve AUC. Reverting changes.
Training on augumented user 87 34/50 current_auc = 0.5634057971014492
User 87 AUC after training: 0.5615942028985507
User 87 does not improve AUC. Reverting changes.
Training on augumented user 129779 35/50 current_auc = 0.5634057971014492
User 129779 AUC after training: 0.5634057971014492
User 129779 does not improve AUC. Reverting changes.
Training on augumented user 50615 36/50 current_auc = 0.5634057971014492
User 50615 AUC after training: 0.5579710144927535
User 50615 does not improve AUC. Reverting changes.
Training on augumented user 24807 37/50 current_auc = 0.5634057971014492
User 24807 AUC after training: 0.5615942028985507
User 24807 does not improve AUC. Reverting changes.
Training on augumented user 55791 38/50 current_auc = 0.5634057971014492
User 55791 AUC after training: 0.5615942028985507
User 55791 does not improve AUC. Reverting changes.
Training on augumented user 25050 39/50 current_auc = 0.5634057971014492
User 25050 AUC after training: 0.5634057971014492
User 25050 does not improve AUC. Reverting changes.
Training on augumented user 75957 40/50 current_auc = 0.5634057971014492
User 75957 AUC after training: 0.5561594202898551
User 75957 does not improve AUC. Reverting changes.
Training on augumented user 18928 41/50 current_auc = 0.5634057971014492
User 18928 AUC after training: 0.5579710144927535
User 18928 does not improve AUC. Reverting changes.
Training on augumented user 214 42/50 current_auc = 0.5634057971014492
User 214 AUC after training: 0.5597826086956521
User 214 does not improve AUC. Reverting changes.
Training on augumented user 65868 43/50 current_auc = 0.5634057971014492
User 65868 AUC after training: 0.5634057971014492
User 65868 does not improve AUC. Reverting changes.
Training on augumented user 23579 44/50 current_auc = 0.5634057971014492
User 23579 AUC after training: 0.5597826086956521
User 23579 does not improve AUC. Reverting changes.
Training on augumented user 31800 45/50 current_auc = 0.5634057971014492
User 31800 AUC after training: 0.5615942028985507
User 31800 does not improve AUC. Reverting changes.
Training on augumented user 66275 46/50 current_auc = 0.5634057971014492
User 66275 AUC after training: 0.5652173913043478
User 66275 improves AUC. Keeping the model.
Training on augumented user 71644 47/50 current_auc = 0.5652173913043478
User 71644 AUC after training: 0.5615942028985507
User 71644 does not improve AUC. Reverting changes.
Training on augumented user 63926 48/50 current_auc = 0.5652173913043478
User 63926 AUC after training: 0.5615942028985507
User 63926 does not improve AUC. Reverting changes.
Training on augumented user 110387 49/50 current_auc = 0.5652173913043478
User 110387 AUC after training: 0.5615942028985507
User 110387 does not improve AUC. Reverting changes.
[2024-12-02 19:12:02.050473] start test user 86741 173/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:12:02.470419] start test user 86741 173/568 recall augumented users by random, augumented_users = [118323, 112682, 114975, 77779, 99500, 62088, 55403, 63655, 5470, 74022, 31206, 75563, 134294, 8129, 68562, 73545, 69389, 76708, 20438, 1608, 15995, 71577, 96430, 113547, 42609, 137300, 960, 76318, 71385, 89517, 22233, 50953, 116228, 66683, 47315, 95690, 496, 2341, 131144, 70025, 62854, 66642, 134443, 136645, 14629, 42546, 98924, 25350, 16448, 52348]
[2024-12-02 19:12:02.487489] user = 86741 Cloud 173/568
[2024-12-02 19:12:02.506572] user = 86741 Local 173/568
[2024-12-02 19:12:02.812221] user = 86741 Local+ 173/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:12:04.823921] user = 86741 MPDA- 173/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6062956204379562
Training on augumented user 118323 0/50 current_auc = 0.6062956204379562
User 118323 AUC after training: 0.6065237226277372
User 118323 improves AUC. Keeping the model.
Training on augumented user 112682 1/50 current_auc = 0.6065237226277372
User 112682 AUC after training: 0.6067518248175182
User 112682 improves AUC. Keeping the model.
Training on augumented user 114975 2/50 current_auc = 0.6067518248175182
User 114975 AUC after training: 0.6067518248175182
User 114975 does not improve AUC. Reverting changes.
Training on augumented user 77779 3/50 current_auc = 0.6067518248175182
User 77779 AUC after training: 0.6065237226277371
User 77779 does not improve AUC. Reverting changes.
Training on augumented user 99500 4/50 current_auc = 0.6067518248175182
User 99500 AUC after training: 0.6062956204379562
User 99500 does not improve AUC. Reverting changes.
Training on augumented user 62088 5/50 current_auc = 0.6067518248175182
User 62088 AUC after training: 0.6065237226277372
User 62088 does not improve AUC. Reverting changes.
Training on augumented user 55403 6/50 current_auc = 0.6067518248175182
User 55403 AUC after training: 0.6069799270072993
User 55403 improves AUC. Keeping the model.
Training on augumented user 63655 7/50 current_auc = 0.6069799270072993
User 63655 AUC after training: 0.6069799270072993
User 63655 does not improve AUC. Reverting changes.
Training on augumented user 5470 8/50 current_auc = 0.6069799270072993
User 5470 AUC after training: 0.6074361313868613
User 5470 improves AUC. Keeping the model.
Training on augumented user 74022 9/50 current_auc = 0.6074361313868613
User 74022 AUC after training: 0.6067518248175183
User 74022 does not improve AUC. Reverting changes.
Training on augumented user 31206 10/50 current_auc = 0.6074361313868613
User 31206 AUC after training: 0.6069799270072993
User 31206 does not improve AUC. Reverting changes.
Training on augumented user 75563 11/50 current_auc = 0.6074361313868613
User 75563 AUC after training: 0.6069799270072993
User 75563 does not improve AUC. Reverting changes.
Training on augumented user 134294 12/50 current_auc = 0.6074361313868613
User 134294 AUC after training: 0.6069799270072993
User 134294 does not improve AUC. Reverting changes.
Training on augumented user 8129 13/50 current_auc = 0.6074361313868613
User 8129 AUC after training: 0.6076642335766423
User 8129 improves AUC. Keeping the model.
Training on augumented user 68562 14/50 current_auc = 0.6076642335766423
User 68562 AUC after training: 0.6062956204379562
User 68562 does not improve AUC. Reverting changes.
Training on augumented user 73545 15/50 current_auc = 0.6076642335766423
User 73545 AUC after training: 0.6076642335766422
User 73545 does not improve AUC. Reverting changes.
Training on augumented user 69389 16/50 current_auc = 0.6076642335766423
User 69389 AUC after training: 0.6074361313868614
User 69389 does not improve AUC. Reverting changes.
Training on augumented user 76708 17/50 current_auc = 0.6076642335766423
User 76708 AUC after training: 0.6072080291970803
User 76708 does not improve AUC. Reverting changes.
Training on augumented user 20438 18/50 current_auc = 0.6076642335766423
User 20438 AUC after training: 0.6074361313868613
User 20438 does not improve AUC. Reverting changes.
Training on augumented user 1608 19/50 current_auc = 0.6076642335766423
User 1608 AUC after training: 0.6069799270072993
User 1608 does not improve AUC. Reverting changes.
Training on augumented user 15995 20/50 current_auc = 0.6076642335766423
User 15995 AUC after training: 0.6072080291970803
User 15995 does not improve AUC. Reverting changes.
Training on augumented user 71577 21/50 current_auc = 0.6076642335766423
User 71577 AUC after training: 0.6076642335766423
User 71577 does not improve AUC. Reverting changes.
Training on augumented user 96430 22/50 current_auc = 0.6076642335766423
User 96430 AUC after training: 0.6067518248175183
User 96430 does not improve AUC. Reverting changes.
Training on augumented user 113547 23/50 current_auc = 0.6076642335766423
User 113547 AUC after training: 0.6072080291970803
User 113547 does not improve AUC. Reverting changes.
Training on augumented user 42609 24/50 current_auc = 0.6076642335766423
User 42609 AUC after training: 0.6078923357664233
User 42609 improves AUC. Keeping the model.
Training on augumented user 137300 25/50 current_auc = 0.6078923357664233
User 137300 AUC after training: 0.6076642335766422
User 137300 does not improve AUC. Reverting changes.
Training on augumented user 960 26/50 current_auc = 0.6078923357664233
User 960 AUC after training: 0.6076642335766423
User 960 does not improve AUC. Reverting changes.
Training on augumented user 76318 27/50 current_auc = 0.6078923357664233
User 76318 AUC after training: 0.6067518248175183
User 76318 does not improve AUC. Reverting changes.
Training on augumented user 71385 28/50 current_auc = 0.6078923357664233
User 71385 AUC after training: 0.6078923357664233
User 71385 does not improve AUC. Reverting changes.
Training on augumented user 89517 29/50 current_auc = 0.6078923357664233
User 89517 AUC after training: 0.6076642335766422
User 89517 does not improve AUC. Reverting changes.
Training on augumented user 22233 30/50 current_auc = 0.6078923357664233
User 22233 AUC after training: 0.6081204379562044
User 22233 improves AUC. Keeping the model.
Training on augumented user 50953 31/50 current_auc = 0.6081204379562044
User 50953 AUC after training: 0.6074361313868613
User 50953 does not improve AUC. Reverting changes.
Training on augumented user 116228 32/50 current_auc = 0.6081204379562044
User 116228 AUC after training: 0.6076642335766422
User 116228 does not improve AUC. Reverting changes.
Training on augumented user 66683 33/50 current_auc = 0.6081204379562044
User 66683 AUC after training: 0.6078923357664233
User 66683 does not improve AUC. Reverting changes.
Training on augumented user 47315 34/50 current_auc = 0.6081204379562044
User 47315 AUC after training: 0.6081204379562044
User 47315 does not improve AUC. Reverting changes.
Training on augumented user 95690 35/50 current_auc = 0.6081204379562044
User 95690 AUC after training: 0.6078923357664233
User 95690 does not improve AUC. Reverting changes.
Training on augumented user 496 36/50 current_auc = 0.6081204379562044
User 496 AUC after training: 0.6072080291970803
User 496 does not improve AUC. Reverting changes.
Training on augumented user 2341 37/50 current_auc = 0.6081204379562044
User 2341 AUC after training: 0.6081204379562044
User 2341 does not improve AUC. Reverting changes.
Training on augumented user 131144 38/50 current_auc = 0.6081204379562044
User 131144 AUC after training: 0.6076642335766423
User 131144 does not improve AUC. Reverting changes.
Training on augumented user 70025 39/50 current_auc = 0.6081204379562044
User 70025 AUC after training: 0.6088047445255474
User 70025 improves AUC. Keeping the model.
Training on augumented user 62854 40/50 current_auc = 0.6088047445255474
User 62854 AUC after training: 0.6081204379562044
User 62854 does not improve AUC. Reverting changes.
Training on augumented user 66642 41/50 current_auc = 0.6088047445255474
User 66642 AUC after training: 0.6083485401459854
User 66642 does not improve AUC. Reverting changes.
Training on augumented user 134443 42/50 current_auc = 0.6088047445255474
User 134443 AUC after training: 0.6085766423357664
User 134443 does not improve AUC. Reverting changes.
Training on augumented user 136645 43/50 current_auc = 0.6088047445255474
User 136645 AUC after training: 0.6088047445255474
User 136645 does not improve AUC. Reverting changes.
Training on augumented user 14629 44/50 current_auc = 0.6088047445255474
User 14629 AUC after training: 0.6088047445255474
User 14629 does not improve AUC. Reverting changes.
Training on augumented user 42546 45/50 current_auc = 0.6088047445255474
User 42546 AUC after training: 0.6085766423357664
User 42546 does not improve AUC. Reverting changes.
Training on augumented user 98924 46/50 current_auc = 0.6088047445255474
User 98924 AUC after training: 0.6078923357664234
User 98924 does not improve AUC. Reverting changes.
Training on augumented user 25350 47/50 current_auc = 0.6088047445255474
User 25350 AUC after training: 0.6083485401459854
User 25350 does not improve AUC. Reverting changes.
Training on augumented user 16448 48/50 current_auc = 0.6088047445255474
User 16448 AUC after training: 0.6088047445255474
User 16448 does not improve AUC. Reverting changes.
Training on augumented user 52348 49/50 current_auc = 0.6088047445255474
User 52348 AUC after training: 0.6085766423357664
User 52348 does not improve AUC. Reverting changes.
[2024-12-02 19:12:35.539389] start test user 86754 174/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:12:36.117149] start test user 86754 174/568 recall augumented users by random, augumented_users = [124590, 125158, 71844, 45359, 55702, 119404, 109521, 135220, 18704, 70647, 31890, 117918, 117050, 104566, 63399, 130192, 38274, 24126, 60584, 100831, 2406, 10169, 59061, 132454, 88872, 47271, 84245, 70910, 17911, 39531, 121747, 75045, 122399, 62647, 42337, 52962, 13128, 6533, 133393, 95888, 19281, 72870, 128366, 61605, 63206, 23681, 45960, 106888, 109688, 36754]
[2024-12-02 19:12:36.134339] user = 86754 Cloud 174/568
[2024-12-02 19:12:36.154977] user = 86754 Local 174/568
[2024-12-02 19:12:36.345283] user = 86754 Local+ 174/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:12:39.215401] user = 86754 MPDA- 174/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8989898989898989
Training on augumented user 124590 0/50 current_auc = 0.8989898989898989
User 124590 AUC after training: 0.8989898989898989
User 124590 does not improve AUC. Reverting changes.
Training on augumented user 125158 1/50 current_auc = 0.8989898989898989
User 125158 AUC after training: 0.8989898989898989
User 125158 does not improve AUC. Reverting changes.
Training on augumented user 71844 2/50 current_auc = 0.8989898989898989
User 71844 AUC after training: 0.8989898989898989
User 71844 does not improve AUC. Reverting changes.
Training on augumented user 45359 3/50 current_auc = 0.8989898989898989
User 45359 AUC after training: 0.8989898989898989
User 45359 does not improve AUC. Reverting changes.
Training on augumented user 55702 4/50 current_auc = 0.8989898989898989
User 55702 AUC after training: 0.8989898989898989
User 55702 does not improve AUC. Reverting changes.
Training on augumented user 119404 5/50 current_auc = 0.8989898989898989
User 119404 AUC after training: 0.8989898989898989
User 119404 does not improve AUC. Reverting changes.
Training on augumented user 109521 6/50 current_auc = 0.8989898989898989
User 109521 AUC after training: 0.8989898989898989
User 109521 does not improve AUC. Reverting changes.
Training on augumented user 135220 7/50 current_auc = 0.8989898989898989
User 135220 AUC after training: 0.8989898989898989
User 135220 does not improve AUC. Reverting changes.
Training on augumented user 18704 8/50 current_auc = 0.8989898989898989
User 18704 AUC after training: 0.8989898989898989
User 18704 does not improve AUC. Reverting changes.
Training on augumented user 70647 9/50 current_auc = 0.8989898989898989
User 70647 AUC after training: 0.8989898989898989
User 70647 does not improve AUC. Reverting changes.
Training on augumented user 31890 10/50 current_auc = 0.8989898989898989
User 31890 AUC after training: 0.8989898989898989
User 31890 does not improve AUC. Reverting changes.
Training on augumented user 117918 11/50 current_auc = 0.8989898989898989
User 117918 AUC after training: 0.8989898989898989
User 117918 does not improve AUC. Reverting changes.
Training on augumented user 117050 12/50 current_auc = 0.8989898989898989
User 117050 AUC after training: 0.8989898989898989
User 117050 does not improve AUC. Reverting changes.
Training on augumented user 104566 13/50 current_auc = 0.8989898989898989
User 104566 AUC after training: 0.8989898989898989
User 104566 does not improve AUC. Reverting changes.
Training on augumented user 63399 14/50 current_auc = 0.8989898989898989
User 63399 AUC after training: 0.8989898989898989
User 63399 does not improve AUC. Reverting changes.
Training on augumented user 130192 15/50 current_auc = 0.8989898989898989
User 130192 AUC after training: 0.8989898989898989
User 130192 does not improve AUC. Reverting changes.
Training on augumented user 38274 16/50 current_auc = 0.8989898989898989
User 38274 AUC after training: 0.8989898989898989
User 38274 does not improve AUC. Reverting changes.
Training on augumented user 24126 17/50 current_auc = 0.8989898989898989
User 24126 AUC after training: 0.8989898989898989
User 24126 does not improve AUC. Reverting changes.
Training on augumented user 60584 18/50 current_auc = 0.8989898989898989
User 60584 AUC after training: 0.8989898989898989
User 60584 does not improve AUC. Reverting changes.
Training on augumented user 100831 19/50 current_auc = 0.8989898989898989
User 100831 AUC after training: 0.8989898989898989
User 100831 does not improve AUC. Reverting changes.
Training on augumented user 2406 20/50 current_auc = 0.8989898989898989
User 2406 AUC after training: 0.8989898989898989
User 2406 does not improve AUC. Reverting changes.
Training on augumented user 10169 21/50 current_auc = 0.8989898989898989
User 10169 AUC after training: 0.8989898989898989
User 10169 does not improve AUC. Reverting changes.
Training on augumented user 59061 22/50 current_auc = 0.8989898989898989
User 59061 AUC after training: 0.8989898989898989
User 59061 does not improve AUC. Reverting changes.
Training on augumented user 132454 23/50 current_auc = 0.8989898989898989
User 132454 AUC after training: 0.8989898989898989
User 132454 does not improve AUC. Reverting changes.
Training on augumented user 88872 24/50 current_auc = 0.8989898989898989
User 88872 AUC after training: 0.8989898989898989
User 88872 does not improve AUC. Reverting changes.
Training on augumented user 47271 25/50 current_auc = 0.8989898989898989
User 47271 AUC after training: 0.8989898989898989
User 47271 does not improve AUC. Reverting changes.
Training on augumented user 84245 26/50 current_auc = 0.8989898989898989
User 84245 AUC after training: 0.8989898989898989
User 84245 does not improve AUC. Reverting changes.
Training on augumented user 70910 27/50 current_auc = 0.8989898989898989
User 70910 AUC after training: 0.8989898989898989
User 70910 does not improve AUC. Reverting changes.
Training on augumented user 17911 28/50 current_auc = 0.8989898989898989
User 17911 AUC after training: 0.8989898989898989
User 17911 does not improve AUC. Reverting changes.
Training on augumented user 39531 29/50 current_auc = 0.8989898989898989
User 39531 AUC after training: 0.8989898989898989
User 39531 does not improve AUC. Reverting changes.
Training on augumented user 121747 30/50 current_auc = 0.8989898989898989
User 121747 AUC after training: 0.8989898989898989
User 121747 does not improve AUC. Reverting changes.
Training on augumented user 75045 31/50 current_auc = 0.8989898989898989
User 75045 AUC after training: 0.8989898989898989
User 75045 does not improve AUC. Reverting changes.
Training on augumented user 122399 32/50 current_auc = 0.8989898989898989
User 122399 AUC after training: 0.8989898989898989
User 122399 does not improve AUC. Reverting changes.
Training on augumented user 62647 33/50 current_auc = 0.8989898989898989
User 62647 AUC after training: 0.8989898989898989
User 62647 does not improve AUC. Reverting changes.
Training on augumented user 42337 34/50 current_auc = 0.8989898989898989
User 42337 AUC after training: 0.8989898989898989
User 42337 does not improve AUC. Reverting changes.
Training on augumented user 52962 35/50 current_auc = 0.8989898989898989
User 52962 AUC after training: 0.8989898989898989
User 52962 does not improve AUC. Reverting changes.
Training on augumented user 13128 36/50 current_auc = 0.8989898989898989
User 13128 AUC after training: 0.8989898989898989
User 13128 does not improve AUC. Reverting changes.
Training on augumented user 6533 37/50 current_auc = 0.8989898989898989
User 6533 AUC after training: 0.8989898989898989
User 6533 does not improve AUC. Reverting changes.
Training on augumented user 133393 38/50 current_auc = 0.8989898989898989
User 133393 AUC after training: 0.8989898989898989
User 133393 does not improve AUC. Reverting changes.
Training on augumented user 95888 39/50 current_auc = 0.8989898989898989
User 95888 AUC after training: 0.8989898989898989
User 95888 does not improve AUC. Reverting changes.
Training on augumented user 19281 40/50 current_auc = 0.8989898989898989
User 19281 AUC after training: 0.8989898989898989
User 19281 does not improve AUC. Reverting changes.
Training on augumented user 72870 41/50 current_auc = 0.8989898989898989
User 72870 AUC after training: 0.8989898989898989
User 72870 does not improve AUC. Reverting changes.
Training on augumented user 128366 42/50 current_auc = 0.8989898989898989
User 128366 AUC after training: 0.8989898989898989
User 128366 does not improve AUC. Reverting changes.
Training on augumented user 61605 43/50 current_auc = 0.8989898989898989
User 61605 AUC after training: 0.8989898989898989
User 61605 does not improve AUC. Reverting changes.
Training on augumented user 63206 44/50 current_auc = 0.8989898989898989
User 63206 AUC after training: 0.8989898989898989
User 63206 does not improve AUC. Reverting changes.
Training on augumented user 23681 45/50 current_auc = 0.8989898989898989
User 23681 AUC after training: 0.8989898989898989
User 23681 does not improve AUC. Reverting changes.
Training on augumented user 45960 46/50 current_auc = 0.8989898989898989
User 45960 AUC after training: 0.8989898989898989
User 45960 does not improve AUC. Reverting changes.
Training on augumented user 106888 47/50 current_auc = 0.8989898989898989
User 106888 AUC after training: 0.8989898989898989
User 106888 does not improve AUC. Reverting changes.
Training on augumented user 109688 48/50 current_auc = 0.8989898989898989
User 109688 AUC after training: 0.8989898989898989
User 109688 does not improve AUC. Reverting changes.
Training on augumented user 36754 49/50 current_auc = 0.8989898989898989
User 36754 AUC after training: 0.8989898989898989
User 36754 does not improve AUC. Reverting changes.
[2024-12-02 19:13:08.622955] start test user 86768 175/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:13:09.318559] start test user 86768 175/568 recall augumented users by random, augumented_users = [23899, 61649, 74441, 24367, 130712, 119988, 92253, 20828, 127035, 98841, 48437, 122169, 90650, 60051, 36377, 41490, 75984, 5977, 12990, 20288, 138434, 32847, 8110, 132419, 136833, 128724, 23404, 60853, 103063, 22354, 129831, 134818, 59804, 40842, 137008, 12045, 136747, 20686, 73703, 106213, 96443, 103407, 77507, 1117, 125006, 71251, 19908, 86374, 84296, 63195]
[2024-12-02 19:13:09.390960] user = 86768 Cloud 175/568
[2024-12-02 19:13:09.479270] user = 86768 Local 175/568
[2024-12-02 19:13:09.760329] user = 86768 Local+ 175/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:13:12.283409] user = 86768 MPDA- 175/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.611179060665362
Training on augumented user 23899 0/50 current_auc = 0.611179060665362
User 23899 AUC after training: 0.611545988258317
User 23899 improves AUC. Keeping the model.
Training on augumented user 61649 1/50 current_auc = 0.611545988258317
User 61649 AUC after training: 0.611545988258317
User 61649 does not improve AUC. Reverting changes.
Training on augumented user 74441 2/50 current_auc = 0.611545988258317
User 74441 AUC after training: 0.611545988258317
User 74441 does not improve AUC. Reverting changes.
Training on augumented user 24367 3/50 current_auc = 0.611545988258317
User 24367 AUC after training: 0.611545988258317
User 24367 does not improve AUC. Reverting changes.
Training on augumented user 130712 4/50 current_auc = 0.611545988258317
User 130712 AUC after training: 0.611912915851272
User 130712 improves AUC. Keeping the model.
Training on augumented user 119988 5/50 current_auc = 0.611912915851272
User 119988 AUC after training: 0.6114236790606654
User 119988 does not improve AUC. Reverting changes.
Training on augumented user 92253 6/50 current_auc = 0.611912915851272
User 92253 AUC after training: 0.6114236790606653
User 92253 does not improve AUC. Reverting changes.
Training on augumented user 20828 7/50 current_auc = 0.611912915851272
User 20828 AUC after training: 0.6119129158512719
User 20828 does not improve AUC. Reverting changes.
Training on augumented user 127035 8/50 current_auc = 0.611912915851272
User 127035 AUC after training: 0.6116682974559687
User 127035 does not improve AUC. Reverting changes.
Training on augumented user 98841 9/50 current_auc = 0.611912915851272
User 98841 AUC after training: 0.6117906066536203
User 98841 does not improve AUC. Reverting changes.
Training on augumented user 48437 10/50 current_auc = 0.611912915851272
User 48437 AUC after training: 0.6110567514677103
User 48437 does not improve AUC. Reverting changes.
Training on augumented user 122169 11/50 current_auc = 0.611912915851272
User 122169 AUC after training: 0.6119129158512719
User 122169 does not improve AUC. Reverting changes.
Training on augumented user 90650 12/50 current_auc = 0.611912915851272
User 90650 AUC after training: 0.6116682974559686
User 90650 does not improve AUC. Reverting changes.
Training on augumented user 60051 13/50 current_auc = 0.611912915851272
User 60051 AUC after training: 0.6114236790606653
User 60051 does not improve AUC. Reverting changes.
Training on augumented user 36377 14/50 current_auc = 0.611912915851272
User 36377 AUC after training: 0.6113013698630136
User 36377 does not improve AUC. Reverting changes.
Training on augumented user 41490 15/50 current_auc = 0.611912915851272
User 41490 AUC after training: 0.6117906066536203
User 41490 does not improve AUC. Reverting changes.
Training on augumented user 75984 16/50 current_auc = 0.611912915851272
User 75984 AUC after training: 0.6120352250489236
User 75984 improves AUC. Keeping the model.
Training on augumented user 5977 17/50 current_auc = 0.6120352250489236
User 5977 AUC after training: 0.611545988258317
User 5977 does not improve AUC. Reverting changes.
Training on augumented user 12990 18/50 current_auc = 0.6120352250489236
User 12990 AUC after training: 0.611179060665362
User 12990 does not improve AUC. Reverting changes.
Training on augumented user 20288 19/50 current_auc = 0.6120352250489236
User 20288 AUC after training: 0.611179060665362
User 20288 does not improve AUC. Reverting changes.
Training on augumented user 138434 20/50 current_auc = 0.6120352250489236
User 138434 AUC after training: 0.6119129158512719
User 138434 does not improve AUC. Reverting changes.
Training on augumented user 32847 21/50 current_auc = 0.6120352250489236
User 32847 AUC after training: 0.610812133072407
User 32847 does not improve AUC. Reverting changes.
Training on augumented user 8110 22/50 current_auc = 0.6120352250489236
User 8110 AUC after training: 0.6116682974559686
User 8110 does not improve AUC. Reverting changes.
Training on augumented user 132419 23/50 current_auc = 0.6120352250489236
User 132419 AUC after training: 0.6098336594911937
User 132419 does not improve AUC. Reverting changes.
Training on augumented user 136833 24/50 current_auc = 0.6120352250489236
User 136833 AUC after training: 0.6113013698630136
User 136833 does not improve AUC. Reverting changes.
Training on augumented user 128724 25/50 current_auc = 0.6120352250489236
User 128724 AUC after training: 0.6097113502935421
User 128724 does not improve AUC. Reverting changes.
Training on augumented user 23404 26/50 current_auc = 0.6120352250489236
User 23404 AUC after training: 0.6109344422700587
User 23404 does not improve AUC. Reverting changes.
Training on augumented user 60853 27/50 current_auc = 0.6120352250489236
User 60853 AUC after training: 0.6119129158512719
User 60853 does not improve AUC. Reverting changes.
Training on augumented user 103063 28/50 current_auc = 0.6120352250489236
User 103063 AUC after training: 0.6113013698630136
User 103063 does not improve AUC. Reverting changes.
Training on augumented user 22354 29/50 current_auc = 0.6120352250489236
User 22354 AUC after training: 0.613747553816047
User 22354 improves AUC. Keeping the model.
Training on augumented user 129831 30/50 current_auc = 0.613747553816047
User 129831 AUC after training: 0.613380626223092
User 129831 does not improve AUC. Reverting changes.
Training on augumented user 134818 31/50 current_auc = 0.613747553816047
User 134818 AUC after training: 0.6132583170254402
User 134818 does not improve AUC. Reverting changes.
Training on augumented user 59804 32/50 current_auc = 0.613747553816047
User 59804 AUC after training: 0.613380626223092
User 59804 does not improve AUC. Reverting changes.
Training on augumented user 40842 33/50 current_auc = 0.613747553816047
User 40842 AUC after training: 0.6138698630136986
User 40842 improves AUC. Keeping the model.
Training on augumented user 137008 34/50 current_auc = 0.6138698630136986
User 137008 AUC after training: 0.6128913894324853
User 137008 does not improve AUC. Reverting changes.
Training on augumented user 12045 35/50 current_auc = 0.6138698630136986
User 12045 AUC after training: 0.6138698630136987
User 12045 improves AUC. Keeping the model.
Training on augumented user 136747 36/50 current_auc = 0.6138698630136987
User 136747 AUC after training: 0.613380626223092
User 136747 does not improve AUC. Reverting changes.
Training on augumented user 20686 37/50 current_auc = 0.6138698630136987
User 20686 AUC after training: 0.6138698630136985
User 20686 does not improve AUC. Reverting changes.
Training on augumented user 73703 38/50 current_auc = 0.6138698630136987
User 73703 AUC after training: 0.6138698630136987
User 73703 does not improve AUC. Reverting changes.
Training on augumented user 106213 39/50 current_auc = 0.6138698630136987
User 106213 AUC after training: 0.6141144814090019
User 106213 improves AUC. Keeping the model.
Training on augumented user 96443 40/50 current_auc = 0.6141144814090019
User 96443 AUC after training: 0.6151541095890412
User 96443 improves AUC. Keeping the model.
Training on augumented user 103407 41/50 current_auc = 0.6151541095890412
User 103407 AUC after training: 0.6150929549902152
User 103407 does not improve AUC. Reverting changes.
Training on augumented user 77507 42/50 current_auc = 0.6151541095890412
User 77507 AUC after training: 0.6147260273972602
User 77507 does not improve AUC. Reverting changes.
Training on augumented user 1117 43/50 current_auc = 0.6151541095890412
User 1117 AUC after training: 0.6146037181996087
User 1117 does not improve AUC. Reverting changes.
Training on augumented user 125006 44/50 current_auc = 0.6151541095890412
User 125006 AUC after training: 0.6150929549902153
User 125006 does not improve AUC. Reverting changes.
Training on augumented user 71251 45/50 current_auc = 0.6151541095890412
User 71251 AUC after training: 0.614481409001957
User 71251 does not improve AUC. Reverting changes.
Training on augumented user 19908 46/50 current_auc = 0.6151541095890412
User 19908 AUC after training: 0.6142367906066536
User 19908 does not improve AUC. Reverting changes.
Training on augumented user 86374 47/50 current_auc = 0.6151541095890412
User 86374 AUC after training: 0.614848336594912
User 86374 does not improve AUC. Reverting changes.
Training on augumented user 84296 48/50 current_auc = 0.6151541095890412
User 84296 AUC after training: 0.6149706457925637
User 84296 does not improve AUC. Reverting changes.
Training on augumented user 63195 49/50 current_auc = 0.6151541095890412
User 63195 AUC after training: 0.6149706457925636
User 63195 does not improve AUC. Reverting changes.
[2024-12-02 19:13:42.502258] start test user 86783 176/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:13:43.363861] start test user 86783 176/568 recall augumented users by random, augumented_users = [40571, 87620, 137439, 43827, 123570, 133812, 2707, 53031, 133423, 120008, 42809, 101189, 54702, 60869, 112858, 127003, 93240, 100994, 41460, 116978, 108850, 44185, 60444, 34646, 105635, 108763, 20793, 103735, 5561, 32049, 115391, 116165, 35949, 29372, 38174, 78156, 31236, 105510, 117102, 108289, 79022, 81113, 2989, 74238, 96360, 137002, 39459, 30351, 52483, 104751]
[2024-12-02 19:13:43.380102] user = 86783 Cloud 176/568
[2024-12-02 19:13:43.413666] user = 86783 Local 176/568
[2024-12-02 19:13:43.474512] user = 86783 Local+ 176/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:13:45.921424] user = 86783 MPDA- 176/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7044513457556937
Training on augumented user 40571 0/50 current_auc = 0.7044513457556937
User 40571 AUC after training: 0.704968944099379
User 40571 improves AUC. Keeping the model.
Training on augumented user 87620 1/50 current_auc = 0.704968944099379
User 87620 AUC after training: 0.7062629399585921
User 87620 improves AUC. Keeping the model.
Training on augumented user 137439 2/50 current_auc = 0.7062629399585921
User 137439 AUC after training: 0.7057453416149069
User 137439 does not improve AUC. Reverting changes.
Training on augumented user 43827 3/50 current_auc = 0.7062629399585921
User 43827 AUC after training: 0.7057453416149069
User 43827 does not improve AUC. Reverting changes.
Training on augumented user 123570 4/50 current_auc = 0.7062629399585921
User 123570 AUC after training: 0.7052277432712216
User 123570 does not improve AUC. Reverting changes.
Training on augumented user 133812 5/50 current_auc = 0.7062629399585921
User 133812 AUC after training: 0.7072981366459629
User 133812 improves AUC. Keeping the model.
Training on augumented user 2707 6/50 current_auc = 0.7072981366459629
User 2707 AUC after training: 0.7072981366459629
User 2707 does not improve AUC. Reverting changes.
Training on augumented user 53031 7/50 current_auc = 0.7072981366459629
User 53031 AUC after training: 0.7072981366459629
User 53031 does not improve AUC. Reverting changes.
Training on augumented user 133423 8/50 current_auc = 0.7072981366459629
User 133423 AUC after training: 0.7060041407867496
User 133423 does not improve AUC. Reverting changes.
Training on augumented user 120008 9/50 current_auc = 0.7072981366459629
User 120008 AUC after training: 0.7067805383022775
User 120008 does not improve AUC. Reverting changes.
Training on augumented user 42809 10/50 current_auc = 0.7072981366459629
User 42809 AUC after training: 0.7049689440993789
User 42809 does not improve AUC. Reverting changes.
Training on augumented user 101189 11/50 current_auc = 0.7072981366459629
User 101189 AUC after training: 0.7062629399585922
User 101189 does not improve AUC. Reverting changes.
Training on augumented user 54702 12/50 current_auc = 0.7072981366459629
User 54702 AUC after training: 0.7067805383022775
User 54702 does not improve AUC. Reverting changes.
Training on augumented user 60869 13/50 current_auc = 0.7072981366459629
User 60869 AUC after training: 0.7067805383022775
User 60869 does not improve AUC. Reverting changes.
Training on augumented user 112858 14/50 current_auc = 0.7072981366459629
User 112858 AUC after training: 0.7060041407867496
User 112858 does not improve AUC. Reverting changes.
Training on augumented user 127003 15/50 current_auc = 0.7072981366459629
User 127003 AUC after training: 0.707815734989648
User 127003 improves AUC. Keeping the model.
Training on augumented user 93240 16/50 current_auc = 0.707815734989648
User 93240 AUC after training: 0.7062629399585922
User 93240 does not improve AUC. Reverting changes.
Training on augumented user 100994 17/50 current_auc = 0.707815734989648
User 100994 AUC after training: 0.7070393374741202
User 100994 does not improve AUC. Reverting changes.
Training on augumented user 41460 18/50 current_auc = 0.707815734989648
User 41460 AUC after training: 0.707815734989648
User 41460 does not improve AUC. Reverting changes.
Training on augumented user 116978 19/50 current_auc = 0.707815734989648
User 116978 AUC after training: 0.7062629399585921
User 116978 does not improve AUC. Reverting changes.
Training on augumented user 108850 20/50 current_auc = 0.707815734989648
User 108850 AUC after training: 0.705745341614907
User 108850 does not improve AUC. Reverting changes.
Training on augumented user 44185 21/50 current_auc = 0.707815734989648
User 44185 AUC after training: 0.7067805383022775
User 44185 does not improve AUC. Reverting changes.
Training on augumented user 60444 22/50 current_auc = 0.707815734989648
User 60444 AUC after training: 0.7062629399585922
User 60444 does not improve AUC. Reverting changes.
Training on augumented user 34646 23/50 current_auc = 0.707815734989648
User 34646 AUC after training: 0.7072981366459629
User 34646 does not improve AUC. Reverting changes.
Training on augumented user 105635 24/50 current_auc = 0.707815734989648
User 105635 AUC after training: 0.7070393374741202
User 105635 does not improve AUC. Reverting changes.
Training on augumented user 108763 25/50 current_auc = 0.707815734989648
User 108763 AUC after training: 0.705745341614907
User 108763 does not improve AUC. Reverting changes.
Training on augumented user 20793 26/50 current_auc = 0.707815734989648
User 20793 AUC after training: 0.7067805383022775
User 20793 does not improve AUC. Reverting changes.
Training on augumented user 103735 27/50 current_auc = 0.707815734989648
User 103735 AUC after training: 0.7072981366459629
User 103735 does not improve AUC. Reverting changes.
Training on augumented user 5561 28/50 current_auc = 0.707815734989648
User 5561 AUC after training: 0.7072981366459629
User 5561 does not improve AUC. Reverting changes.
Training on augumented user 32049 29/50 current_auc = 0.707815734989648
User 32049 AUC after training: 0.7067805383022775
User 32049 does not improve AUC. Reverting changes.
Training on augumented user 115391 30/50 current_auc = 0.707815734989648
User 115391 AUC after training: 0.7067805383022775
User 115391 does not improve AUC. Reverting changes.
Training on augumented user 116165 31/50 current_auc = 0.707815734989648
User 116165 AUC after training: 0.7072981366459629
User 116165 does not improve AUC. Reverting changes.
Training on augumented user 35949 32/50 current_auc = 0.707815734989648
User 35949 AUC after training: 0.707815734989648
User 35949 does not improve AUC. Reverting changes.
Training on augumented user 29372 33/50 current_auc = 0.707815734989648
User 29372 AUC after training: 0.7070393374741201
User 29372 does not improve AUC. Reverting changes.
Training on augumented user 38174 34/50 current_auc = 0.707815734989648
User 38174 AUC after training: 0.7065217391304348
User 38174 does not improve AUC. Reverting changes.
Training on augumented user 78156 35/50 current_auc = 0.707815734989648
User 78156 AUC after training: 0.707815734989648
User 78156 does not improve AUC. Reverting changes.
Training on augumented user 31236 36/50 current_auc = 0.707815734989648
User 31236 AUC after training: 0.7062629399585921
User 31236 does not improve AUC. Reverting changes.
Training on augumented user 105510 37/50 current_auc = 0.707815734989648
User 105510 AUC after training: 0.7054865424430642
User 105510 does not improve AUC. Reverting changes.
Training on augumented user 117102 38/50 current_auc = 0.707815734989648
User 117102 AUC after training: 0.707815734989648
User 117102 does not improve AUC. Reverting changes.
Training on augumented user 108289 39/50 current_auc = 0.707815734989648
User 108289 AUC after training: 0.7075569358178054
User 108289 does not improve AUC. Reverting changes.
Training on augumented user 79022 40/50 current_auc = 0.707815734989648
User 79022 AUC after training: 0.7062629399585921
User 79022 does not improve AUC. Reverting changes.
Training on augumented user 81113 41/50 current_auc = 0.707815734989648
User 81113 AUC after training: 0.7070393374741202
User 81113 does not improve AUC. Reverting changes.
Training on augumented user 2989 42/50 current_auc = 0.707815734989648
User 2989 AUC after training: 0.7070393374741202
User 2989 does not improve AUC. Reverting changes.
Training on augumented user 74238 43/50 current_auc = 0.707815734989648
User 74238 AUC after training: 0.7039337474120083
User 74238 does not improve AUC. Reverting changes.
Training on augumented user 96360 44/50 current_auc = 0.707815734989648
User 96360 AUC after training: 0.7072981366459629
User 96360 does not improve AUC. Reverting changes.
Training on augumented user 137002 45/50 current_auc = 0.707815734989648
User 137002 AUC after training: 0.7067805383022775
User 137002 does not improve AUC. Reverting changes.
Training on augumented user 39459 46/50 current_auc = 0.707815734989648
User 39459 AUC after training: 0.7039337474120083
User 39459 does not improve AUC. Reverting changes.
Training on augumented user 30351 47/50 current_auc = 0.707815734989648
User 30351 AUC after training: 0.7036749482401657
User 30351 does not improve AUC. Reverting changes.
Training on augumented user 52483 48/50 current_auc = 0.707815734989648
User 52483 AUC after training: 0.7072981366459629
User 52483 does not improve AUC. Reverting changes.
Training on augumented user 104751 49/50 current_auc = 0.707815734989648
User 104751 AUC after training: 0.707815734989648
User 104751 does not improve AUC. Reverting changes.
[2024-12-02 19:14:15.216265] start test user 86821 177/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:14:15.983806] start test user 86821 177/568 recall augumented users by random, augumented_users = [77078, 60381, 48065, 119330, 135540, 132576, 110768, 115738, 62602, 68088, 19936, 132926, 20566, 26321, 48172, 123299, 120118, 44440, 74120, 127099, 16241, 60648, 93835, 74275, 59012, 123055, 77949, 61045, 97338, 37178, 25452, 21249, 70615, 92029, 52591, 48110, 40885, 4936, 26992, 87581, 4110, 10731, 123777, 90066, 52291, 95266, 15492, 78691, 37688, 136405]
[2024-12-02 19:14:16.001375] user = 86821 Cloud 177/568
[2024-12-02 19:14:16.024943] user = 86821 Local 177/568
[2024-12-02 19:14:16.062838] user = 86821 Local+ 177/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:14:19.247916] user = 86821 MPDA- 177/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5652573529411764
Training on augumented user 77078 0/50 current_auc = 0.5652573529411764
User 77078 AUC after training: 0.5615808823529411
User 77078 does not improve AUC. Reverting changes.
Training on augumented user 60381 1/50 current_auc = 0.5652573529411764
User 60381 AUC after training: 0.5634191176470588
User 60381 does not improve AUC. Reverting changes.
Training on augumented user 48065 2/50 current_auc = 0.5652573529411764
User 48065 AUC after training: 0.5597426470588236
User 48065 does not improve AUC. Reverting changes.
Training on augumented user 119330 3/50 current_auc = 0.5652573529411764
User 119330 AUC after training: 0.5652573529411765
User 119330 improves AUC. Keeping the model.
Training on augumented user 135540 4/50 current_auc = 0.5652573529411765
User 135540 AUC after training: 0.5634191176470589
User 135540 does not improve AUC. Reverting changes.
Training on augumented user 132576 5/50 current_auc = 0.5652573529411765
User 132576 AUC after training: 0.5652573529411765
User 132576 does not improve AUC. Reverting changes.
Training on augumented user 110768 6/50 current_auc = 0.5652573529411765
User 110768 AUC after training: 0.5634191176470589
User 110768 does not improve AUC. Reverting changes.
Training on augumented user 115738 7/50 current_auc = 0.5652573529411765
User 115738 AUC after training: 0.5652573529411765
User 115738 does not improve AUC. Reverting changes.
Training on augumented user 62602 8/50 current_auc = 0.5652573529411765
User 62602 AUC after training: 0.5615808823529412
User 62602 does not improve AUC. Reverting changes.
Training on augumented user 68088 9/50 current_auc = 0.5652573529411765
User 68088 AUC after training: 0.5634191176470589
User 68088 does not improve AUC. Reverting changes.
Training on augumented user 19936 10/50 current_auc = 0.5652573529411765
User 19936 AUC after training: 0.5652573529411765
User 19936 does not improve AUC. Reverting changes.
Training on augumented user 132926 11/50 current_auc = 0.5652573529411765
User 132926 AUC after training: 0.5652573529411765
User 132926 does not improve AUC. Reverting changes.
Training on augumented user 20566 12/50 current_auc = 0.5652573529411765
User 20566 AUC after training: 0.5652573529411765
User 20566 does not improve AUC. Reverting changes.
Training on augumented user 26321 13/50 current_auc = 0.5652573529411765
User 26321 AUC after training: 0.5652573529411765
User 26321 does not improve AUC. Reverting changes.
Training on augumented user 48172 14/50 current_auc = 0.5652573529411765
User 48172 AUC after training: 0.5652573529411765
User 48172 does not improve AUC. Reverting changes.
Training on augumented user 123299 15/50 current_auc = 0.5652573529411765
User 123299 AUC after training: 0.5652573529411765
User 123299 does not improve AUC. Reverting changes.
Training on augumented user 120118 16/50 current_auc = 0.5652573529411765
User 120118 AUC after training: 0.5615808823529411
User 120118 does not improve AUC. Reverting changes.
Training on augumented user 44440 17/50 current_auc = 0.5652573529411765
User 44440 AUC after training: 0.5597426470588236
User 44440 does not improve AUC. Reverting changes.
Training on augumented user 74120 18/50 current_auc = 0.5652573529411765
User 74120 AUC after training: 0.5634191176470589
User 74120 does not improve AUC. Reverting changes.
Training on augumented user 127099 19/50 current_auc = 0.5652573529411765
User 127099 AUC after training: 0.5615808823529412
User 127099 does not improve AUC. Reverting changes.
Training on augumented user 16241 20/50 current_auc = 0.5652573529411765
User 16241 AUC after training: 0.5597426470588235
User 16241 does not improve AUC. Reverting changes.
Training on augumented user 60648 21/50 current_auc = 0.5652573529411765
User 60648 AUC after training: 0.5652573529411764
User 60648 does not improve AUC. Reverting changes.
Training on augumented user 93835 22/50 current_auc = 0.5652573529411765
User 93835 AUC after training: 0.5634191176470589
User 93835 does not improve AUC. Reverting changes.
Training on augumented user 74275 23/50 current_auc = 0.5652573529411765
User 74275 AUC after training: 0.5615808823529412
User 74275 does not improve AUC. Reverting changes.
Training on augumented user 59012 24/50 current_auc = 0.5652573529411765
User 59012 AUC after training: 0.5652573529411765
User 59012 does not improve AUC. Reverting changes.
Training on augumented user 123055 25/50 current_auc = 0.5652573529411765
User 123055 AUC after training: 0.5652573529411764
User 123055 does not improve AUC. Reverting changes.
Training on augumented user 77949 26/50 current_auc = 0.5652573529411765
User 77949 AUC after training: 0.5634191176470588
User 77949 does not improve AUC. Reverting changes.
Training on augumented user 61045 27/50 current_auc = 0.5652573529411765
User 61045 AUC after training: 0.5670955882352942
User 61045 improves AUC. Keeping the model.
Training on augumented user 97338 28/50 current_auc = 0.5670955882352942
User 97338 AUC after training: 0.5670955882352942
User 97338 does not improve AUC. Reverting changes.
Training on augumented user 37178 29/50 current_auc = 0.5670955882352942
User 37178 AUC after training: 0.5652573529411765
User 37178 does not improve AUC. Reverting changes.
Training on augumented user 25452 30/50 current_auc = 0.5670955882352942
User 25452 AUC after training: 0.5661764705882353
User 25452 does not improve AUC. Reverting changes.
Training on augumented user 21249 31/50 current_auc = 0.5670955882352942
User 21249 AUC after training: 0.5652573529411765
User 21249 does not improve AUC. Reverting changes.
Training on augumented user 70615 32/50 current_auc = 0.5670955882352942
User 70615 AUC after training: 0.5652573529411765
User 70615 does not improve AUC. Reverting changes.
Training on augumented user 92029 33/50 current_auc = 0.5670955882352942
User 92029 AUC after training: 0.5615808823529411
User 92029 does not improve AUC. Reverting changes.
Training on augumented user 52591 34/50 current_auc = 0.5670955882352942
User 52591 AUC after training: 0.5652573529411765
User 52591 does not improve AUC. Reverting changes.
Training on augumented user 48110 35/50 current_auc = 0.5670955882352942
User 48110 AUC after training: 0.5661764705882353
User 48110 does not improve AUC. Reverting changes.
Training on augumented user 40885 36/50 current_auc = 0.5670955882352942
User 40885 AUC after training: 0.5670955882352942
User 40885 does not improve AUC. Reverting changes.
Training on augumented user 4936 37/50 current_auc = 0.5670955882352942
User 4936 AUC after training: 0.5652573529411764
User 4936 does not improve AUC. Reverting changes.
Training on augumented user 26992 38/50 current_auc = 0.5670955882352942
User 26992 AUC after training: 0.5652573529411765
User 26992 does not improve AUC. Reverting changes.
Training on augumented user 87581 39/50 current_auc = 0.5670955882352942
User 87581 AUC after training: 0.5670955882352942
User 87581 does not improve AUC. Reverting changes.
Training on augumented user 4110 40/50 current_auc = 0.5670955882352942
User 4110 AUC after training: 0.5652573529411764
User 4110 does not improve AUC. Reverting changes.
Training on augumented user 10731 41/50 current_auc = 0.5670955882352942
User 10731 AUC after training: 0.5652573529411765
User 10731 does not improve AUC. Reverting changes.
Training on augumented user 123777 42/50 current_auc = 0.5670955882352942
User 123777 AUC after training: 0.5670955882352942
User 123777 does not improve AUC. Reverting changes.
Training on augumented user 90066 43/50 current_auc = 0.5670955882352942
User 90066 AUC after training: 0.5652573529411764
User 90066 does not improve AUC. Reverting changes.
Training on augumented user 52291 44/50 current_auc = 0.5670955882352942
User 52291 AUC after training: 0.5652573529411765
User 52291 does not improve AUC. Reverting changes.
Training on augumented user 95266 45/50 current_auc = 0.5670955882352942
User 95266 AUC after training: 0.5652573529411765
User 95266 does not improve AUC. Reverting changes.
Training on augumented user 15492 46/50 current_auc = 0.5670955882352942
User 15492 AUC after training: 0.5652573529411764
User 15492 does not improve AUC. Reverting changes.
Training on augumented user 78691 47/50 current_auc = 0.5670955882352942
User 78691 AUC after training: 0.5670955882352942
User 78691 does not improve AUC. Reverting changes.
Training on augumented user 37688 48/50 current_auc = 0.5670955882352942
User 37688 AUC after training: 0.5661764705882353
User 37688 does not improve AUC. Reverting changes.
Training on augumented user 136405 49/50 current_auc = 0.5670955882352942
User 136405 AUC after training: 0.5652573529411765
User 136405 does not improve AUC. Reverting changes.
[2024-12-02 19:14:41.522954] start test user 86840 178/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:14:41.951455] start test user 86840 178/568 recall augumented users by random, augumented_users = [96314, 98732, 86878, 85517, 67269, 11834, 74032, 75497, 37666, 123075, 117937, 16883, 50934, 30679, 53453, 90321, 100375, 67781, 38404, 51247, 39738, 75326, 22276, 126807, 78072, 116503, 125137, 29605, 64085, 50772, 14717, 73424, 35802, 13186, 92456, 33791, 104024, 72006, 55735, 101930, 13479, 2868, 15901, 107520, 105972, 118703, 37384, 2935, 137004, 132388]
[2024-12-02 19:14:41.965900] user = 86840 Cloud 178/568
[2024-12-02 19:14:41.975773] user = 86840 Local 178/568
[2024-12-02 19:14:42.013528] user = 86840 Local+ 178/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:14:44.400862] user = 86840 MPDA- 178/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 96314 0/50 current_auc = 0.5
User 96314 AUC after training: 0.5
User 96314 does not improve AUC. Reverting changes.
Training on augumented user 98732 1/50 current_auc = 0.5
User 98732 AUC after training: 0.5
User 98732 does not improve AUC. Reverting changes.
Training on augumented user 86878 2/50 current_auc = 0.5
User 86878 AUC after training: 0.5
User 86878 does not improve AUC. Reverting changes.
Training on augumented user 85517 3/50 current_auc = 0.5
User 85517 AUC after training: 0.5
User 85517 does not improve AUC. Reverting changes.
Training on augumented user 67269 4/50 current_auc = 0.5
User 67269 AUC after training: 0.5
User 67269 does not improve AUC. Reverting changes.
Training on augumented user 11834 5/50 current_auc = 0.5
User 11834 AUC after training: 0.5
User 11834 does not improve AUC. Reverting changes.
Training on augumented user 74032 6/50 current_auc = 0.5
User 74032 AUC after training: 0.5
User 74032 does not improve AUC. Reverting changes.
Training on augumented user 75497 7/50 current_auc = 0.5
User 75497 AUC after training: 0.5
User 75497 does not improve AUC. Reverting changes.
Training on augumented user 37666 8/50 current_auc = 0.5
User 37666 AUC after training: 0.5
User 37666 does not improve AUC. Reverting changes.
Training on augumented user 123075 9/50 current_auc = 0.5
User 123075 AUC after training: 0.5
User 123075 does not improve AUC. Reverting changes.
Training on augumented user 117937 10/50 current_auc = 0.5
User 117937 AUC after training: 0.5
User 117937 does not improve AUC. Reverting changes.
Training on augumented user 16883 11/50 current_auc = 0.5
User 16883 AUC after training: 0.5
User 16883 does not improve AUC. Reverting changes.
Training on augumented user 50934 12/50 current_auc = 0.5
User 50934 AUC after training: 0.5
User 50934 does not improve AUC. Reverting changes.
Training on augumented user 30679 13/50 current_auc = 0.5
User 30679 AUC after training: 0.5
User 30679 does not improve AUC. Reverting changes.
Training on augumented user 53453 14/50 current_auc = 0.5
User 53453 AUC after training: 0.5
User 53453 does not improve AUC. Reverting changes.
Training on augumented user 90321 15/50 current_auc = 0.5
User 90321 AUC after training: 0.5
User 90321 does not improve AUC. Reverting changes.
Training on augumented user 100375 16/50 current_auc = 0.5
User 100375 AUC after training: 0.5
User 100375 does not improve AUC. Reverting changes.
Training on augumented user 67781 17/50 current_auc = 0.5
User 67781 AUC after training: 0.5
User 67781 does not improve AUC. Reverting changes.
Training on augumented user 38404 18/50 current_auc = 0.5
User 38404 AUC after training: 0.5
User 38404 does not improve AUC. Reverting changes.
Training on augumented user 51247 19/50 current_auc = 0.5
User 51247 AUC after training: 0.5
User 51247 does not improve AUC. Reverting changes.
Training on augumented user 39738 20/50 current_auc = 0.5
User 39738 AUC after training: 0.5
User 39738 does not improve AUC. Reverting changes.
Training on augumented user 75326 21/50 current_auc = 0.5
User 75326 AUC after training: 0.5
User 75326 does not improve AUC. Reverting changes.
Training on augumented user 22276 22/50 current_auc = 0.5
User 22276 AUC after training: 0.5
User 22276 does not improve AUC. Reverting changes.
Training on augumented user 126807 23/50 current_auc = 0.5
User 126807 AUC after training: 0.5
User 126807 does not improve AUC. Reverting changes.
Training on augumented user 78072 24/50 current_auc = 0.5
User 78072 AUC after training: 0.5
User 78072 does not improve AUC. Reverting changes.
Training on augumented user 116503 25/50 current_auc = 0.5
User 116503 AUC after training: 0.5
User 116503 does not improve AUC. Reverting changes.
Training on augumented user 125137 26/50 current_auc = 0.5
User 125137 AUC after training: 0.5
User 125137 does not improve AUC. Reverting changes.
Training on augumented user 29605 27/50 current_auc = 0.5
User 29605 AUC after training: 0.5
User 29605 does not improve AUC. Reverting changes.
Training on augumented user 64085 28/50 current_auc = 0.5
User 64085 AUC after training: 0.5
User 64085 does not improve AUC. Reverting changes.
Training on augumented user 50772 29/50 current_auc = 0.5
User 50772 AUC after training: 0.5
User 50772 does not improve AUC. Reverting changes.
Training on augumented user 14717 30/50 current_auc = 0.5
User 14717 AUC after training: 0.5
User 14717 does not improve AUC. Reverting changes.
Training on augumented user 73424 31/50 current_auc = 0.5
User 73424 AUC after training: 0.5
User 73424 does not improve AUC. Reverting changes.
Training on augumented user 35802 32/50 current_auc = 0.5
User 35802 AUC after training: 0.5
User 35802 does not improve AUC. Reverting changes.
Training on augumented user 13186 33/50 current_auc = 0.5
User 13186 AUC after training: 0.5
User 13186 does not improve AUC. Reverting changes.
Training on augumented user 92456 34/50 current_auc = 0.5
User 92456 AUC after training: 0.5
User 92456 does not improve AUC. Reverting changes.
Training on augumented user 33791 35/50 current_auc = 0.5
User 33791 AUC after training: 0.5
User 33791 does not improve AUC. Reverting changes.
Training on augumented user 104024 36/50 current_auc = 0.5
User 104024 AUC after training: 0.5
User 104024 does not improve AUC. Reverting changes.
Training on augumented user 72006 37/50 current_auc = 0.5
User 72006 AUC after training: 0.5
User 72006 does not improve AUC. Reverting changes.
Training on augumented user 55735 38/50 current_auc = 0.5
User 55735 AUC after training: 0.5
User 55735 does not improve AUC. Reverting changes.
Training on augumented user 101930 39/50 current_auc = 0.5
User 101930 AUC after training: 0.5
User 101930 does not improve AUC. Reverting changes.
Training on augumented user 13479 40/50 current_auc = 0.5
User 13479 AUC after training: 0.5
User 13479 does not improve AUC. Reverting changes.
Training on augumented user 2868 41/50 current_auc = 0.5
User 2868 AUC after training: 0.5
User 2868 does not improve AUC. Reverting changes.
Training on augumented user 15901 42/50 current_auc = 0.5
User 15901 AUC after training: 0.5
User 15901 does not improve AUC. Reverting changes.
Training on augumented user 107520 43/50 current_auc = 0.5
User 107520 AUC after training: 0.5
User 107520 does not improve AUC. Reverting changes.
Training on augumented user 105972 44/50 current_auc = 0.5
User 105972 AUC after training: 0.5
User 105972 does not improve AUC. Reverting changes.
Training on augumented user 118703 45/50 current_auc = 0.5
User 118703 AUC after training: 0.5
User 118703 does not improve AUC. Reverting changes.
Training on augumented user 37384 46/50 current_auc = 0.5
User 37384 AUC after training: 0.5
User 37384 does not improve AUC. Reverting changes.
Training on augumented user 2935 47/50 current_auc = 0.5
User 2935 AUC after training: 0.5
User 2935 does not improve AUC. Reverting changes.
Training on augumented user 137004 48/50 current_auc = 0.5
User 137004 AUC after training: 0.5
User 137004 does not improve AUC. Reverting changes.
Training on augumented user 132388 49/50 current_auc = 0.5
User 132388 AUC after training: 0.5
User 132388 does not improve AUC. Reverting changes.
[2024-12-02 19:15:08.181210] start test user 86847 179/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:15:08.778873] start test user 86847 179/568 recall augumented users by random, augumented_users = [112964, 111689, 86842, 50898, 100533, 1817, 23126, 117483, 60461, 133650, 98322, 59945, 6711, 14011, 78001, 111873, 44764, 57255, 104201, 93216, 105183, 123544, 103289, 44102, 45967, 27973, 91895, 47655, 24284, 47034, 99968, 10602, 2885, 121878, 16011, 81916, 83013, 83048, 52280, 28892, 98326, 122702, 109048, 54174, 121124, 28203, 68679, 35762, 135506, 22879]
[2024-12-02 19:15:08.800042] user = 86847 Cloud 179/568
[2024-12-02 19:15:08.845815] user = 86847 Local 179/568
[2024-12-02 19:15:08.942489] user = 86847 Local+ 179/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:15:11.427775] user = 86847 MPDA- 179/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6069620253164557
Training on augumented user 112964 0/50 current_auc = 0.6069620253164557
User 112964 AUC after training: 0.6069620253164557
User 112964 does not improve AUC. Reverting changes.
Training on augumented user 111689 1/50 current_auc = 0.6069620253164557
User 111689 AUC after training: 0.6075949367088608
User 111689 improves AUC. Keeping the model.
Training on augumented user 86842 2/50 current_auc = 0.6075949367088608
User 86842 AUC after training: 0.6091772151898733
User 86842 improves AUC. Keeping the model.
Training on augumented user 50898 3/50 current_auc = 0.6091772151898733
User 50898 AUC after training: 0.6063291139240506
User 50898 does not improve AUC. Reverting changes.
Training on augumented user 100533 4/50 current_auc = 0.6091772151898733
User 100533 AUC after training: 0.6088607594936709
User 100533 does not improve AUC. Reverting changes.
Training on augumented user 1817 5/50 current_auc = 0.6091772151898733
User 1817 AUC after training: 0.6079113924050633
User 1817 does not improve AUC. Reverting changes.
Training on augumented user 23126 6/50 current_auc = 0.6091772151898733
User 23126 AUC after training: 0.6082278481012658
User 23126 does not improve AUC. Reverting changes.
Training on augumented user 117483 7/50 current_auc = 0.6091772151898733
User 117483 AUC after training: 0.6088607594936709
User 117483 does not improve AUC. Reverting changes.
Training on augumented user 60461 8/50 current_auc = 0.6091772151898733
User 60461 AUC after training: 0.6085443037974684
User 60461 does not improve AUC. Reverting changes.
Training on augumented user 133650 9/50 current_auc = 0.6091772151898733
User 133650 AUC after training: 0.6082278481012658
User 133650 does not improve AUC. Reverting changes.
Training on augumented user 98322 10/50 current_auc = 0.6091772151898733
User 98322 AUC after training: 0.6082278481012657
User 98322 does not improve AUC. Reverting changes.
Training on augumented user 59945 11/50 current_auc = 0.6091772151898733
User 59945 AUC after training: 0.6079113924050633
User 59945 does not improve AUC. Reverting changes.
Training on augumented user 6711 12/50 current_auc = 0.6091772151898733
User 6711 AUC after training: 0.6079113924050633
User 6711 does not improve AUC. Reverting changes.
Training on augumented user 14011 13/50 current_auc = 0.6091772151898733
User 14011 AUC after training: 0.6085443037974683
User 14011 does not improve AUC. Reverting changes.
Training on augumented user 78001 14/50 current_auc = 0.6091772151898733
User 78001 AUC after training: 0.6098101265822785
User 78001 improves AUC. Keeping the model.
Training on augumented user 111873 15/50 current_auc = 0.6098101265822785
User 111873 AUC after training: 0.6085443037974684
User 111873 does not improve AUC. Reverting changes.
Training on augumented user 44764 16/50 current_auc = 0.6098101265822785
User 44764 AUC after training: 0.6101265822784809
User 44764 improves AUC. Keeping the model.
Training on augumented user 57255 17/50 current_auc = 0.6101265822784809
User 57255 AUC after training: 0.6091772151898734
User 57255 does not improve AUC. Reverting changes.
Training on augumented user 104201 18/50 current_auc = 0.6101265822784809
User 104201 AUC after training: 0.6091772151898734
User 104201 does not improve AUC. Reverting changes.
Training on augumented user 93216 19/50 current_auc = 0.6101265822784809
User 93216 AUC after training: 0.6094936708860759
User 93216 does not improve AUC. Reverting changes.
Training on augumented user 105183 20/50 current_auc = 0.6101265822784809
User 105183 AUC after training: 0.6098101265822785
User 105183 does not improve AUC. Reverting changes.
Training on augumented user 123544 21/50 current_auc = 0.6101265822784809
User 123544 AUC after training: 0.609493670886076
User 123544 does not improve AUC. Reverting changes.
Training on augumented user 103289 22/50 current_auc = 0.6101265822784809
User 103289 AUC after training: 0.6091772151898734
User 103289 does not improve AUC. Reverting changes.
Training on augumented user 44102 23/50 current_auc = 0.6101265822784809
User 44102 AUC after training: 0.6091772151898734
User 44102 does not improve AUC. Reverting changes.
Training on augumented user 45967 24/50 current_auc = 0.6101265822784809
User 45967 AUC after training: 0.6091772151898734
User 45967 does not improve AUC. Reverting changes.
Training on augumented user 27973 25/50 current_auc = 0.6101265822784809
User 27973 AUC after training: 0.6101265822784809
User 27973 does not improve AUC. Reverting changes.
Training on augumented user 91895 26/50 current_auc = 0.6101265822784809
User 91895 AUC after training: 0.6098101265822784
User 91895 does not improve AUC. Reverting changes.
Training on augumented user 47655 27/50 current_auc = 0.6101265822784809
User 47655 AUC after training: 0.6091772151898734
User 47655 does not improve AUC. Reverting changes.
Training on augumented user 24284 28/50 current_auc = 0.6101265822784809
User 24284 AUC after training: 0.6098101265822784
User 24284 does not improve AUC. Reverting changes.
Training on augumented user 47034 29/50 current_auc = 0.6101265822784809
User 47034 AUC after training: 0.6091772151898734
User 47034 does not improve AUC. Reverting changes.
Training on augumented user 99968 30/50 current_auc = 0.6101265822784809
User 99968 AUC after training: 0.6088607594936709
User 99968 does not improve AUC. Reverting changes.
Training on augumented user 10602 31/50 current_auc = 0.6101265822784809
User 10602 AUC after training: 0.6101265822784809
User 10602 does not improve AUC. Reverting changes.
Training on augumented user 2885 32/50 current_auc = 0.6101265822784809
User 2885 AUC after training: 0.6088607594936709
User 2885 does not improve AUC. Reverting changes.
Training on augumented user 121878 33/50 current_auc = 0.6101265822784809
User 121878 AUC after training: 0.6091772151898734
User 121878 does not improve AUC. Reverting changes.
Training on augumented user 16011 34/50 current_auc = 0.6101265822784809
User 16011 AUC after training: 0.609493670886076
User 16011 does not improve AUC. Reverting changes.
Training on augumented user 81916 35/50 current_auc = 0.6101265822784809
User 81916 AUC after training: 0.6091772151898734
User 81916 does not improve AUC. Reverting changes.
Training on augumented user 83013 36/50 current_auc = 0.6101265822784809
User 83013 AUC after training: 0.6098101265822785
User 83013 does not improve AUC. Reverting changes.
Training on augumented user 83048 37/50 current_auc = 0.6101265822784809
User 83048 AUC after training: 0.609493670886076
User 83048 does not improve AUC. Reverting changes.
Training on augumented user 52280 38/50 current_auc = 0.6101265822784809
User 52280 AUC after training: 0.609493670886076
User 52280 does not improve AUC. Reverting changes.
Training on augumented user 28892 39/50 current_auc = 0.6101265822784809
User 28892 AUC after training: 0.6085443037974683
User 28892 does not improve AUC. Reverting changes.
Training on augumented user 98326 40/50 current_auc = 0.6101265822784809
User 98326 AUC after training: 0.6104430379746836
User 98326 improves AUC. Keeping the model.
Training on augumented user 122702 41/50 current_auc = 0.6104430379746836
User 122702 AUC after training: 0.6091772151898734
User 122702 does not improve AUC. Reverting changes.
Training on augumented user 109048 42/50 current_auc = 0.6104430379746836
User 109048 AUC after training: 0.6101265822784809
User 109048 does not improve AUC. Reverting changes.
Training on augumented user 54174 43/50 current_auc = 0.6104430379746836
User 54174 AUC after training: 0.6098101265822785
User 54174 does not improve AUC. Reverting changes.
Training on augumented user 121124 44/50 current_auc = 0.6104430379746836
User 121124 AUC after training: 0.6091772151898734
User 121124 does not improve AUC. Reverting changes.
Training on augumented user 28203 45/50 current_auc = 0.6104430379746836
User 28203 AUC after training: 0.609493670886076
User 28203 does not improve AUC. Reverting changes.
Training on augumented user 68679 46/50 current_auc = 0.6104430379746836
User 68679 AUC after training: 0.609493670886076
User 68679 does not improve AUC. Reverting changes.
Training on augumented user 35762 47/50 current_auc = 0.6104430379746836
User 35762 AUC after training: 0.6088607594936709
User 35762 does not improve AUC. Reverting changes.
Training on augumented user 135506 48/50 current_auc = 0.6104430379746836
User 135506 AUC after training: 0.6079113924050633
User 135506 does not improve AUC. Reverting changes.
Training on augumented user 22879 49/50 current_auc = 0.6104430379746836
User 22879 AUC after training: 0.6098101265822785
User 22879 does not improve AUC. Reverting changes.
[2024-12-02 19:15:41.940361] start test user 86852 180/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:15:42.342748] start test user 86852 180/568 recall augumented users by random, augumented_users = [43347, 126506, 87944, 94741, 119821, 130119, 31393, 9348, 44743, 88176, 70428, 14821, 118417, 119486, 112684, 5559, 92320, 84397, 61906, 70715, 49539, 93722, 135321, 41303, 116553, 6224, 87664, 113740, 102116, 115672, 87732, 25107, 114530, 104512, 80394, 96554, 132320, 3077, 39664, 56714, 36242, 126249, 64069, 131872, 118784, 91856, 40435, 36447, 39899, 131913]
[2024-12-02 19:15:42.357274] user = 86852 Cloud 180/568
[2024-12-02 19:15:42.371356] user = 86852 Local 180/568
[2024-12-02 19:15:42.422232] user = 86852 Local+ 180/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:15:44.212930] user = 86852 MPDA- 180/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5623885918003565
Training on augumented user 43347 0/50 current_auc = 0.5623885918003565
User 43347 AUC after training: 0.5614973262032086
User 43347 does not improve AUC. Reverting changes.
Training on augumented user 126506 1/50 current_auc = 0.5623885918003565
User 126506 AUC after training: 0.5606060606060607
User 126506 does not improve AUC. Reverting changes.
Training on augumented user 87944 2/50 current_auc = 0.5623885918003565
User 87944 AUC after training: 0.5632798573975045
User 87944 improves AUC. Keeping the model.
Training on augumented user 94741 3/50 current_auc = 0.5632798573975045
User 94741 AUC after training: 0.5614973262032086
User 94741 does not improve AUC. Reverting changes.
Training on augumented user 119821 4/50 current_auc = 0.5632798573975045
User 119821 AUC after training: 0.5623885918003566
User 119821 does not improve AUC. Reverting changes.
Training on augumented user 130119 5/50 current_auc = 0.5632798573975045
User 130119 AUC after training: 0.5641711229946523
User 130119 improves AUC. Keeping the model.
Training on augumented user 31393 6/50 current_auc = 0.5641711229946523
User 31393 AUC after training: 0.5650623885918004
User 31393 improves AUC. Keeping the model.
Training on augumented user 9348 7/50 current_auc = 0.5650623885918004
User 9348 AUC after training: 0.5668449197860962
User 9348 improves AUC. Keeping the model.
Training on augumented user 44743 8/50 current_auc = 0.5668449197860962
User 44743 AUC after training: 0.5668449197860963
User 44743 improves AUC. Keeping the model.
Training on augumented user 88176 9/50 current_auc = 0.5668449197860963
User 88176 AUC after training: 0.5641711229946523
User 88176 does not improve AUC. Reverting changes.
Training on augumented user 70428 10/50 current_auc = 0.5668449197860963
User 70428 AUC after training: 0.5623885918003566
User 70428 does not improve AUC. Reverting changes.
Training on augumented user 14821 11/50 current_auc = 0.5668449197860963
User 14821 AUC after training: 0.5668449197860962
User 14821 does not improve AUC. Reverting changes.
Training on augumented user 118417 12/50 current_auc = 0.5668449197860963
User 118417 AUC after training: 0.5659536541889483
User 118417 does not improve AUC. Reverting changes.
Training on augumented user 119486 13/50 current_auc = 0.5668449197860963
User 119486 AUC after training: 0.5659536541889483
User 119486 does not improve AUC. Reverting changes.
Training on augumented user 112684 14/50 current_auc = 0.5668449197860963
User 112684 AUC after training: 0.5659536541889483
User 112684 does not improve AUC. Reverting changes.
Training on augumented user 5559 15/50 current_auc = 0.5668449197860963
User 5559 AUC after training: 0.5668449197860963
User 5559 does not improve AUC. Reverting changes.
Training on augumented user 92320 16/50 current_auc = 0.5668449197860963
User 92320 AUC after training: 0.5659536541889483
User 92320 does not improve AUC. Reverting changes.
Training on augumented user 84397 17/50 current_auc = 0.5668449197860963
User 84397 AUC after training: 0.5632798573975045
User 84397 does not improve AUC. Reverting changes.
Training on augumented user 61906 18/50 current_auc = 0.5668449197860963
User 61906 AUC after training: 0.5668449197860962
User 61906 does not improve AUC. Reverting changes.
Training on augumented user 70715 19/50 current_auc = 0.5668449197860963
User 70715 AUC after training: 0.5650623885918005
User 70715 does not improve AUC. Reverting changes.
Training on augumented user 49539 20/50 current_auc = 0.5668449197860963
User 49539 AUC after training: 0.5668449197860963
User 49539 does not improve AUC. Reverting changes.
Training on augumented user 93722 21/50 current_auc = 0.5668449197860963
User 93722 AUC after training: 0.5668449197860963
User 93722 does not improve AUC. Reverting changes.
Training on augumented user 135321 22/50 current_auc = 0.5668449197860963
User 135321 AUC after training: 0.5668449197860963
User 135321 does not improve AUC. Reverting changes.
Training on augumented user 41303 23/50 current_auc = 0.5668449197860963
User 41303 AUC after training: 0.5686274509803921
User 41303 improves AUC. Keeping the model.
Training on augumented user 116553 24/50 current_auc = 0.5686274509803921
User 116553 AUC after training: 0.5677361853832442
User 116553 does not improve AUC. Reverting changes.
Training on augumented user 6224 25/50 current_auc = 0.5686274509803921
User 6224 AUC after training: 0.5668449197860963
User 6224 does not improve AUC. Reverting changes.
Training on augumented user 87664 26/50 current_auc = 0.5686274509803921
User 87664 AUC after training: 0.5668449197860962
User 87664 does not improve AUC. Reverting changes.
Training on augumented user 113740 27/50 current_auc = 0.5686274509803921
User 113740 AUC after training: 0.5650623885918004
User 113740 does not improve AUC. Reverting changes.
Training on augumented user 102116 28/50 current_auc = 0.5686274509803921
User 102116 AUC after training: 0.5677361853832442
User 102116 does not improve AUC. Reverting changes.
Training on augumented user 115672 29/50 current_auc = 0.5686274509803921
User 115672 AUC after training: 0.5650623885918004
User 115672 does not improve AUC. Reverting changes.
Training on augumented user 87732 30/50 current_auc = 0.5686274509803921
User 87732 AUC after training: 0.5677361853832442
User 87732 does not improve AUC. Reverting changes.
Training on augumented user 25107 31/50 current_auc = 0.5686274509803921
User 25107 AUC after training: 0.5677361853832443
User 25107 does not improve AUC. Reverting changes.
Training on augumented user 114530 32/50 current_auc = 0.5686274509803921
User 114530 AUC after training: 0.5677361853832443
User 114530 does not improve AUC. Reverting changes.
Training on augumented user 104512 33/50 current_auc = 0.5686274509803921
User 104512 AUC after training: 0.5668449197860963
User 104512 does not improve AUC. Reverting changes.
Training on augumented user 80394 34/50 current_auc = 0.5686274509803921
User 80394 AUC after training: 0.5668449197860962
User 80394 does not improve AUC. Reverting changes.
Training on augumented user 96554 35/50 current_auc = 0.5686274509803921
User 96554 AUC after training: 0.5677361853832442
User 96554 does not improve AUC. Reverting changes.
Training on augumented user 132320 36/50 current_auc = 0.5686274509803921
User 132320 AUC after training: 0.5677361853832443
User 132320 does not improve AUC. Reverting changes.
Training on augumented user 3077 37/50 current_auc = 0.5686274509803921
User 3077 AUC after training: 0.5668449197860962
User 3077 does not improve AUC. Reverting changes.
Training on augumented user 39664 38/50 current_auc = 0.5686274509803921
User 39664 AUC after training: 0.5677361853832442
User 39664 does not improve AUC. Reverting changes.
Training on augumented user 56714 39/50 current_auc = 0.5686274509803921
User 56714 AUC after training: 0.5677361853832442
User 56714 does not improve AUC. Reverting changes.
Training on augumented user 36242 40/50 current_auc = 0.5686274509803921
User 36242 AUC after training: 0.5668449197860962
User 36242 does not improve AUC. Reverting changes.
Training on augumented user 126249 41/50 current_auc = 0.5686274509803921
User 126249 AUC after training: 0.5677361853832443
User 126249 does not improve AUC. Reverting changes.
Training on augumented user 64069 42/50 current_auc = 0.5686274509803921
User 64069 AUC after training: 0.5677361853832442
User 64069 does not improve AUC. Reverting changes.
Training on augumented user 131872 43/50 current_auc = 0.5686274509803921
User 131872 AUC after training: 0.5677361853832442
User 131872 does not improve AUC. Reverting changes.
Training on augumented user 118784 44/50 current_auc = 0.5686274509803921
User 118784 AUC after training: 0.5677361853832442
User 118784 does not improve AUC. Reverting changes.
Training on augumented user 91856 45/50 current_auc = 0.5686274509803921
User 91856 AUC after training: 0.5677361853832443
User 91856 does not improve AUC. Reverting changes.
Training on augumented user 40435 46/50 current_auc = 0.5686274509803921
User 40435 AUC after training: 0.5686274509803922
User 40435 improves AUC. Keeping the model.
Training on augumented user 36447 47/50 current_auc = 0.5686274509803922
User 36447 AUC after training: 0.5686274509803921
User 36447 does not improve AUC. Reverting changes.
Training on augumented user 39899 48/50 current_auc = 0.5686274509803922
User 39899 AUC after training: 0.5686274509803922
User 39899 does not improve AUC. Reverting changes.
Training on augumented user 131913 49/50 current_auc = 0.5686274509803922
User 131913 AUC after training: 0.5677361853832442
User 131913 does not improve AUC. Reverting changes.
[2024-12-02 19:16:13.671676] start test user 86875 181/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:16:14.479832] start test user 86875 181/568 recall augumented users by random, augumented_users = [54031, 28202, 52523, 12393, 138159, 18701, 131231, 88004, 37504, 92151, 89634, 115990, 45918, 99869, 82563, 129970, 99097, 123160, 60552, 31021, 80205, 62263, 88773, 119608, 119313, 120973, 59364, 126065, 116681, 107397, 106399, 6226, 76230, 129451, 98819, 117293, 137594, 21810, 21265, 83845, 62208, 11560, 34794, 115529, 2009, 107185, 9780, 14856, 72779, 34428]
[2024-12-02 19:16:14.518094] user = 86875 Cloud 181/568
[2024-12-02 19:16:14.530883] user = 86875 Local 181/568
[2024-12-02 19:16:14.585039] user = 86875 Local+ 181/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:16:17.234804] user = 86875 MPDA- 181/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6488294314381271
Training on augumented user 54031 0/50 current_auc = 0.6488294314381271
User 54031 AUC after training: 0.6488294314381271
User 54031 does not improve AUC. Reverting changes.
Training on augumented user 28202 1/50 current_auc = 0.6488294314381271
User 28202 AUC after training: 0.6505016722408027
User 28202 improves AUC. Keeping the model.
Training on augumented user 52523 2/50 current_auc = 0.6505016722408027
User 52523 AUC after training: 0.6505016722408027
User 52523 does not improve AUC. Reverting changes.
Training on augumented user 12393 3/50 current_auc = 0.6505016722408027
User 12393 AUC after training: 0.6488294314381271
User 12393 does not improve AUC. Reverting changes.
Training on augumented user 138159 4/50 current_auc = 0.6505016722408027
User 138159 AUC after training: 0.6505016722408027
User 138159 does not improve AUC. Reverting changes.
Training on augumented user 18701 5/50 current_auc = 0.6505016722408027
User 18701 AUC after training: 0.6505016722408027
User 18701 does not improve AUC. Reverting changes.
Training on augumented user 131231 6/50 current_auc = 0.6505016722408027
User 131231 AUC after training: 0.6505016722408027
User 131231 does not improve AUC. Reverting changes.
Training on augumented user 88004 7/50 current_auc = 0.6505016722408027
User 88004 AUC after training: 0.6488294314381271
User 88004 does not improve AUC. Reverting changes.
Training on augumented user 37504 8/50 current_auc = 0.6505016722408027
User 37504 AUC after training: 0.6471571906354515
User 37504 does not improve AUC. Reverting changes.
Training on augumented user 92151 9/50 current_auc = 0.6505016722408027
User 92151 AUC after training: 0.6454849498327759
User 92151 does not improve AUC. Reverting changes.
Training on augumented user 89634 10/50 current_auc = 0.6505016722408027
User 89634 AUC after training: 0.6505016722408027
User 89634 does not improve AUC. Reverting changes.
Training on augumented user 115990 11/50 current_auc = 0.6505016722408027
User 115990 AUC after training: 0.6438127090301003
User 115990 does not improve AUC. Reverting changes.
Training on augumented user 45918 12/50 current_auc = 0.6505016722408027
User 45918 AUC after training: 0.6505016722408027
User 45918 does not improve AUC. Reverting changes.
Training on augumented user 99869 13/50 current_auc = 0.6505016722408027
User 99869 AUC after training: 0.6505016722408027
User 99869 does not improve AUC. Reverting changes.
Training on augumented user 82563 14/50 current_auc = 0.6505016722408027
User 82563 AUC after training: 0.6488294314381271
User 82563 does not improve AUC. Reverting changes.
Training on augumented user 129970 15/50 current_auc = 0.6505016722408027
User 129970 AUC after training: 0.6454849498327759
User 129970 does not improve AUC. Reverting changes.
Training on augumented user 99097 16/50 current_auc = 0.6505016722408027
User 99097 AUC after training: 0.6471571906354515
User 99097 does not improve AUC. Reverting changes.
Training on augumented user 123160 17/50 current_auc = 0.6505016722408027
User 123160 AUC after training: 0.6488294314381271
User 123160 does not improve AUC. Reverting changes.
Training on augumented user 60552 18/50 current_auc = 0.6505016722408027
User 60552 AUC after training: 0.6488294314381271
User 60552 does not improve AUC. Reverting changes.
Training on augumented user 31021 19/50 current_auc = 0.6505016722408027
User 31021 AUC after training: 0.6505016722408027
User 31021 does not improve AUC. Reverting changes.
Training on augumented user 80205 20/50 current_auc = 0.6505016722408027
User 80205 AUC after training: 0.6488294314381271
User 80205 does not improve AUC. Reverting changes.
Training on augumented user 62263 21/50 current_auc = 0.6505016722408027
User 62263 AUC after training: 0.6488294314381271
User 62263 does not improve AUC. Reverting changes.
Training on augumented user 88773 22/50 current_auc = 0.6505016722408027
User 88773 AUC after training: 0.6505016722408027
User 88773 does not improve AUC. Reverting changes.
Training on augumented user 119608 23/50 current_auc = 0.6505016722408027
User 119608 AUC after training: 0.6488294314381271
User 119608 does not improve AUC. Reverting changes.
Training on augumented user 119313 24/50 current_auc = 0.6505016722408027
User 119313 AUC after training: 0.6505016722408027
User 119313 does not improve AUC. Reverting changes.
Training on augumented user 120973 25/50 current_auc = 0.6505016722408027
User 120973 AUC after training: 0.6471571906354515
User 120973 does not improve AUC. Reverting changes.
Training on augumented user 59364 26/50 current_auc = 0.6505016722408027
User 59364 AUC after training: 0.6488294314381271
User 59364 does not improve AUC. Reverting changes.
Training on augumented user 126065 27/50 current_auc = 0.6505016722408027
User 126065 AUC after training: 0.6505016722408027
User 126065 does not improve AUC. Reverting changes.
Training on augumented user 116681 28/50 current_auc = 0.6505016722408027
User 116681 AUC after training: 0.6488294314381271
User 116681 does not improve AUC. Reverting changes.
Training on augumented user 107397 29/50 current_auc = 0.6505016722408027
User 107397 AUC after training: 0.6488294314381271
User 107397 does not improve AUC. Reverting changes.
Training on augumented user 106399 30/50 current_auc = 0.6505016722408027
User 106399 AUC after training: 0.6505016722408027
User 106399 does not improve AUC. Reverting changes.
Training on augumented user 6226 31/50 current_auc = 0.6505016722408027
User 6226 AUC after training: 0.6488294314381271
User 6226 does not improve AUC. Reverting changes.
Training on augumented user 76230 32/50 current_auc = 0.6505016722408027
User 76230 AUC after training: 0.6505016722408027
User 76230 does not improve AUC. Reverting changes.
Training on augumented user 129451 33/50 current_auc = 0.6505016722408027
User 129451 AUC after training: 0.6488294314381271
User 129451 does not improve AUC. Reverting changes.
Training on augumented user 98819 34/50 current_auc = 0.6505016722408027
User 98819 AUC after training: 0.6505016722408027
User 98819 does not improve AUC. Reverting changes.
Training on augumented user 117293 35/50 current_auc = 0.6505016722408027
User 117293 AUC after training: 0.6488294314381271
User 117293 does not improve AUC. Reverting changes.
Training on augumented user 137594 36/50 current_auc = 0.6505016722408027
User 137594 AUC after training: 0.6488294314381271
User 137594 does not improve AUC. Reverting changes.
Training on augumented user 21810 37/50 current_auc = 0.6505016722408027
User 21810 AUC after training: 0.6488294314381271
User 21810 does not improve AUC. Reverting changes.
Training on augumented user 21265 38/50 current_auc = 0.6505016722408027
User 21265 AUC after training: 0.6488294314381271
User 21265 does not improve AUC. Reverting changes.
Training on augumented user 83845 39/50 current_auc = 0.6505016722408027
User 83845 AUC after training: 0.6488294314381271
User 83845 does not improve AUC. Reverting changes.
Training on augumented user 62208 40/50 current_auc = 0.6505016722408027
User 62208 AUC after training: 0.6488294314381271
User 62208 does not improve AUC. Reverting changes.
Training on augumented user 11560 41/50 current_auc = 0.6505016722408027
User 11560 AUC after training: 0.6454849498327759
User 11560 does not improve AUC. Reverting changes.
Training on augumented user 34794 42/50 current_auc = 0.6505016722408027
User 34794 AUC after training: 0.6505016722408027
User 34794 does not improve AUC. Reverting changes.
Training on augumented user 115529 43/50 current_auc = 0.6505016722408027
User 115529 AUC after training: 0.6505016722408027
User 115529 does not improve AUC. Reverting changes.
Training on augumented user 2009 44/50 current_auc = 0.6505016722408027
User 2009 AUC after training: 0.6471571906354515
User 2009 does not improve AUC. Reverting changes.
Training on augumented user 107185 45/50 current_auc = 0.6505016722408027
User 107185 AUC after training: 0.6488294314381271
User 107185 does not improve AUC. Reverting changes.
Training on augumented user 9780 46/50 current_auc = 0.6505016722408027
User 9780 AUC after training: 0.6488294314381271
User 9780 does not improve AUC. Reverting changes.
Training on augumented user 14856 47/50 current_auc = 0.6505016722408027
User 14856 AUC after training: 0.6454849498327759
User 14856 does not improve AUC. Reverting changes.
Training on augumented user 72779 48/50 current_auc = 0.6505016722408027
User 72779 AUC after training: 0.6505016722408027
User 72779 does not improve AUC. Reverting changes.
Training on augumented user 34428 49/50 current_auc = 0.6505016722408027
User 34428 AUC after training: 0.6488294314381271
User 34428 does not improve AUC. Reverting changes.
[2024-12-02 19:16:42.368711] start test user 86883 182/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:16:42.791497] start test user 86883 182/568 recall augumented users by random, augumented_users = [67995, 50559, 129528, 15422, 12260, 134929, 18801, 15568, 7657, 7048, 360, 15091, 70227, 22871, 85119, 85099, 27799, 41304, 32421, 97291, 1442, 20610, 110861, 90575, 18113, 128908, 49888, 112280, 11583, 113721, 121529, 62563, 37108, 96968, 79397, 64406, 12152, 1881, 65655, 97278, 124095, 36264, 115779, 91318, 138198, 21383, 132552, 77992, 31989, 113458]
[2024-12-02 19:16:42.807013] user = 86883 Cloud 182/568
[2024-12-02 19:16:42.839318] user = 86883 Local 182/568
[2024-12-02 19:16:42.867882] user = 86883 Local+ 182/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:16:44.324278] user = 86883 MPDA- 182/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.638132911392405
Training on augumented user 67995 0/50 current_auc = 0.638132911392405
User 67995 AUC after training: 0.6376582278481013
User 67995 does not improve AUC. Reverting changes.
Training on augumented user 50559 1/50 current_auc = 0.638132911392405
User 50559 AUC after training: 0.6369462025316456
User 50559 does not improve AUC. Reverting changes.
Training on augumented user 129528 2/50 current_auc = 0.638132911392405
User 129528 AUC after training: 0.6393987341772152
User 129528 improves AUC. Keeping the model.
Training on augumented user 15422 3/50 current_auc = 0.6393987341772152
User 15422 AUC after training: 0.6386075949367088
User 15422 does not improve AUC. Reverting changes.
Training on augumented user 12260 4/50 current_auc = 0.6393987341772152
User 12260 AUC after training: 0.6389240506329114
User 12260 does not improve AUC. Reverting changes.
Training on augumented user 134929 5/50 current_auc = 0.6393987341772152
User 134929 AUC after training: 0.639636075949367
User 134929 improves AUC. Keeping the model.
Training on augumented user 18801 6/50 current_auc = 0.639636075949367
User 18801 AUC after training: 0.640506329113924
User 18801 improves AUC. Keeping the model.
Training on augumented user 15568 7/50 current_auc = 0.640506329113924
User 15568 AUC after training: 0.6406645569620253
User 15568 improves AUC. Keeping the model.
Training on augumented user 7657 8/50 current_auc = 0.6406645569620253
User 7657 AUC after training: 0.639873417721519
User 7657 does not improve AUC. Reverting changes.
Training on augumented user 7048 9/50 current_auc = 0.6406645569620253
User 7048 AUC after training: 0.6400316455696202
User 7048 does not improve AUC. Reverting changes.
Training on augumented user 360 10/50 current_auc = 0.6406645569620253
User 360 AUC after training: 0.6401107594936709
User 360 does not improve AUC. Reverting changes.
Training on augumented user 15091 11/50 current_auc = 0.6406645569620253
User 15091 AUC after training: 0.641139240506329
User 15091 improves AUC. Keeping the model.
Training on augumented user 70227 12/50 current_auc = 0.641139240506329
User 70227 AUC after training: 0.640506329113924
User 70227 does not improve AUC. Reverting changes.
Training on augumented user 22871 13/50 current_auc = 0.641139240506329
User 22871 AUC after training: 0.6400316455696202
User 22871 does not improve AUC. Reverting changes.
Training on augumented user 85119 14/50 current_auc = 0.641139240506329
User 85119 AUC after training: 0.6412974683544304
User 85119 improves AUC. Keeping the model.
Training on augumented user 85099 15/50 current_auc = 0.6412974683544304
User 85099 AUC after training: 0.6409810126582278
User 85099 does not improve AUC. Reverting changes.
Training on augumented user 27799 16/50 current_auc = 0.6412974683544304
User 27799 AUC after training: 0.6400316455696202
User 27799 does not improve AUC. Reverting changes.
Training on augumented user 41304 17/50 current_auc = 0.6412974683544304
User 41304 AUC after training: 0.6409810126582278
User 41304 does not improve AUC. Reverting changes.
Training on augumented user 32421 18/50 current_auc = 0.6412974683544304
User 32421 AUC after training: 0.6409018987341772
User 32421 does not improve AUC. Reverting changes.
Training on augumented user 97291 19/50 current_auc = 0.6412974683544304
User 97291 AUC after training: 0.6409810126582278
User 97291 does not improve AUC. Reverting changes.
Training on augumented user 1442 20/50 current_auc = 0.6412974683544304
User 1442 AUC after training: 0.6409810126582278
User 1442 does not improve AUC. Reverting changes.
Training on augumented user 20610 21/50 current_auc = 0.6412974683544304
User 20610 AUC after training: 0.6414556962025317
User 20610 improves AUC. Keeping the model.
Training on augumented user 110861 22/50 current_auc = 0.6414556962025317
User 110861 AUC after training: 0.6409810126582279
User 110861 does not improve AUC. Reverting changes.
Training on augumented user 90575 23/50 current_auc = 0.6414556962025317
User 90575 AUC after training: 0.6395569620253165
User 90575 does not improve AUC. Reverting changes.
Training on augumented user 18113 24/50 current_auc = 0.6414556962025317
User 18113 AUC after training: 0.6409810126582277
User 18113 does not improve AUC. Reverting changes.
Training on augumented user 128908 25/50 current_auc = 0.6414556962025317
User 128908 AUC after training: 0.6409810126582278
User 128908 does not improve AUC. Reverting changes.
Training on augumented user 49888 26/50 current_auc = 0.6414556962025317
User 49888 AUC after training: 0.6412974683544304
User 49888 does not improve AUC. Reverting changes.
Training on augumented user 112280 27/50 current_auc = 0.6414556962025317
User 112280 AUC after training: 0.6409810126582278
User 112280 does not improve AUC. Reverting changes.
Training on augumented user 11583 28/50 current_auc = 0.6414556962025317
User 11583 AUC after training: 0.6397151898734177
User 11583 does not improve AUC. Reverting changes.
Training on augumented user 113721 29/50 current_auc = 0.6414556962025317
User 113721 AUC after training: 0.6409810126582278
User 113721 does not improve AUC. Reverting changes.
Training on augumented user 121529 30/50 current_auc = 0.6414556962025317
User 121529 AUC after training: 0.6408227848101266
User 121529 does not improve AUC. Reverting changes.
Training on augumented user 62563 31/50 current_auc = 0.6414556962025317
User 62563 AUC after training: 0.6411392405063291
User 62563 does not improve AUC. Reverting changes.
Training on augumented user 37108 32/50 current_auc = 0.6414556962025317
User 37108 AUC after training: 0.640506329113924
User 37108 does not improve AUC. Reverting changes.
Training on augumented user 96968 33/50 current_auc = 0.6414556962025317
User 96968 AUC after training: 0.6409810126582278
User 96968 does not improve AUC. Reverting changes.
Training on augumented user 79397 34/50 current_auc = 0.6414556962025317
User 79397 AUC after training: 0.6409810126582278
User 79397 does not improve AUC. Reverting changes.
Training on augumented user 64406 35/50 current_auc = 0.6414556962025317
User 64406 AUC after training: 0.6385284810126581
User 64406 does not improve AUC. Reverting changes.
Training on augumented user 12152 36/50 current_auc = 0.6414556962025317
User 12152 AUC after training: 0.6404272151898734
User 12152 does not improve AUC. Reverting changes.
Training on augumented user 1881 37/50 current_auc = 0.6414556962025317
User 1881 AUC after training: 0.6414556962025316
User 1881 does not improve AUC. Reverting changes.
Training on augumented user 65655 38/50 current_auc = 0.6414556962025317
User 65655 AUC after training: 0.6406645569620253
User 65655 does not improve AUC. Reverting changes.
Training on augumented user 97278 39/50 current_auc = 0.6414556962025317
User 97278 AUC after training: 0.6411392405063292
User 97278 does not improve AUC. Reverting changes.
Training on augumented user 124095 40/50 current_auc = 0.6414556962025317
User 124095 AUC after training: 0.6408227848101266
User 124095 does not improve AUC. Reverting changes.
Training on augumented user 36264 41/50 current_auc = 0.6414556962025317
User 36264 AUC after training: 0.6406645569620253
User 36264 does not improve AUC. Reverting changes.
Training on augumented user 115779 42/50 current_auc = 0.6414556962025317
User 115779 AUC after training: 0.6409810126582278
User 115779 does not improve AUC. Reverting changes.
Training on augumented user 91318 43/50 current_auc = 0.6414556962025317
User 91318 AUC after training: 0.6414556962025316
User 91318 does not improve AUC. Reverting changes.
Training on augumented user 138198 44/50 current_auc = 0.6414556962025317
User 138198 AUC after training: 0.6412974683544304
User 138198 does not improve AUC. Reverting changes.
Training on augumented user 21383 45/50 current_auc = 0.6414556962025317
User 21383 AUC after training: 0.6397151898734176
User 21383 does not improve AUC. Reverting changes.
Training on augumented user 132552 46/50 current_auc = 0.6414556962025317
User 132552 AUC after training: 0.6412974683544304
User 132552 does not improve AUC. Reverting changes.
Training on augumented user 77992 47/50 current_auc = 0.6414556962025317
User 77992 AUC after training: 0.6411392405063292
User 77992 does not improve AUC. Reverting changes.
Training on augumented user 31989 48/50 current_auc = 0.6414556962025317
User 31989 AUC after training: 0.639873417721519
User 31989 does not improve AUC. Reverting changes.
Training on augumented user 113458 49/50 current_auc = 0.6414556962025317
User 113458 AUC after training: 0.6408227848101266
User 113458 does not improve AUC. Reverting changes.
[2024-12-02 19:17:10.487119] start test user 86921 183/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:17:11.185881] start test user 86921 183/568 recall augumented users by random, augumented_users = [75393, 55344, 101370, 52431, 89191, 26630, 53776, 5692, 113107, 20150, 49368, 50212, 10455, 421, 20828, 99504, 89242, 87869, 133659, 137127, 106655, 87640, 64661, 66569, 63079, 29024, 116365, 106898, 42645, 71795, 90470, 125478, 77140, 114381, 20917, 100972, 96219, 59655, 57222, 46989, 17719, 129856, 26083, 127598, 15916, 47786, 82516, 57588, 79971, 103703]
[2024-12-02 19:17:11.200722] user = 86921 Cloud 183/568
[2024-12-02 19:17:11.211916] user = 86921 Local 183/568
[2024-12-02 19:17:11.244310] user = 86921 Local+ 183/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:17:13.436102] user = 86921 MPDA- 183/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6875
Training on augumented user 75393 0/50 current_auc = 0.6875
User 75393 AUC after training: 0.6875
User 75393 does not improve AUC. Reverting changes.
Training on augumented user 55344 1/50 current_auc = 0.6875
User 55344 AUC after training: 0.6875
User 55344 does not improve AUC. Reverting changes.
Training on augumented user 101370 2/50 current_auc = 0.6875
User 101370 AUC after training: 0.6899509803921569
User 101370 improves AUC. Keeping the model.
Training on augumented user 52431 3/50 current_auc = 0.6899509803921569
User 52431 AUC after training: 0.6924019607843137
User 52431 improves AUC. Keeping the model.
Training on augumented user 89191 4/50 current_auc = 0.6924019607843137
User 89191 AUC after training: 0.6924019607843137
User 89191 does not improve AUC. Reverting changes.
Training on augumented user 26630 5/50 current_auc = 0.6924019607843137
User 26630 AUC after training: 0.6973039215686274
User 26630 improves AUC. Keeping the model.
Training on augumented user 53776 6/50 current_auc = 0.6973039215686274
User 53776 AUC after training: 0.6973039215686274
User 53776 does not improve AUC. Reverting changes.
Training on augumented user 5692 7/50 current_auc = 0.6973039215686274
User 5692 AUC after training: 0.6973039215686274
User 5692 does not improve AUC. Reverting changes.
Training on augumented user 113107 8/50 current_auc = 0.6973039215686274
User 113107 AUC after training: 0.6948529411764706
User 113107 does not improve AUC. Reverting changes.
Training on augumented user 20150 9/50 current_auc = 0.6973039215686274
User 20150 AUC after training: 0.6973039215686274
User 20150 does not improve AUC. Reverting changes.
Training on augumented user 49368 10/50 current_auc = 0.6973039215686274
User 49368 AUC after training: 0.6924019607843137
User 49368 does not improve AUC. Reverting changes.
Training on augumented user 50212 11/50 current_auc = 0.6973039215686274
User 50212 AUC after training: 0.6948529411764706
User 50212 does not improve AUC. Reverting changes.
Training on augumented user 10455 12/50 current_auc = 0.6973039215686274
User 10455 AUC after training: 0.6899509803921569
User 10455 does not improve AUC. Reverting changes.
Training on augumented user 421 13/50 current_auc = 0.6973039215686274
User 421 AUC after training: 0.6899509803921569
User 421 does not improve AUC. Reverting changes.
Training on augumented user 20828 14/50 current_auc = 0.6973039215686274
User 20828 AUC after training: 0.6973039215686274
User 20828 does not improve AUC. Reverting changes.
Training on augumented user 99504 15/50 current_auc = 0.6973039215686274
User 99504 AUC after training: 0.6924019607843137
User 99504 does not improve AUC. Reverting changes.
Training on augumented user 89242 16/50 current_auc = 0.6973039215686274
User 89242 AUC after training: 0.6924019607843137
User 89242 does not improve AUC. Reverting changes.
Training on augumented user 87869 17/50 current_auc = 0.6973039215686274
User 87869 AUC after training: 0.6948529411764706
User 87869 does not improve AUC. Reverting changes.
Training on augumented user 133659 18/50 current_auc = 0.6973039215686274
User 133659 AUC after training: 0.6875
User 133659 does not improve AUC. Reverting changes.
Training on augumented user 137127 19/50 current_auc = 0.6973039215686274
User 137127 AUC after training: 0.6948529411764706
User 137127 does not improve AUC. Reverting changes.
Training on augumented user 106655 20/50 current_auc = 0.6973039215686274
User 106655 AUC after training: 0.6924019607843137
User 106655 does not improve AUC. Reverting changes.
Training on augumented user 87640 21/50 current_auc = 0.6973039215686274
User 87640 AUC after training: 0.6973039215686274
User 87640 does not improve AUC. Reverting changes.
Training on augumented user 64661 22/50 current_auc = 0.6973039215686274
User 64661 AUC after training: 0.6948529411764706
User 64661 does not improve AUC. Reverting changes.
Training on augumented user 66569 23/50 current_auc = 0.6973039215686274
User 66569 AUC after training: 0.6997549019607843
User 66569 improves AUC. Keeping the model.
Training on augumented user 63079 24/50 current_auc = 0.6997549019607843
User 63079 AUC after training: 0.6899509803921569
User 63079 does not improve AUC. Reverting changes.
Training on augumented user 29024 25/50 current_auc = 0.6997549019607843
User 29024 AUC after training: 0.6924019607843137
User 29024 does not improve AUC. Reverting changes.
Training on augumented user 116365 26/50 current_auc = 0.6997549019607843
User 116365 AUC after training: 0.6997549019607843
User 116365 does not improve AUC. Reverting changes.
Training on augumented user 106898 27/50 current_auc = 0.6997549019607843
User 106898 AUC after training: 0.6973039215686274
User 106898 does not improve AUC. Reverting changes.
Training on augumented user 42645 28/50 current_auc = 0.6997549019607843
User 42645 AUC after training: 0.6973039215686274
User 42645 does not improve AUC. Reverting changes.
Training on augumented user 71795 29/50 current_auc = 0.6997549019607843
User 71795 AUC after training: 0.6924019607843137
User 71795 does not improve AUC. Reverting changes.
Training on augumented user 90470 30/50 current_auc = 0.6997549019607843
User 90470 AUC after training: 0.6924019607843137
User 90470 does not improve AUC. Reverting changes.
Training on augumented user 125478 31/50 current_auc = 0.6997549019607843
User 125478 AUC after training: 0.6948529411764706
User 125478 does not improve AUC. Reverting changes.
Training on augumented user 77140 32/50 current_auc = 0.6997549019607843
User 77140 AUC after training: 0.6997549019607843
User 77140 does not improve AUC. Reverting changes.
Training on augumented user 114381 33/50 current_auc = 0.6997549019607843
User 114381 AUC after training: 0.6997549019607844
User 114381 improves AUC. Keeping the model.
Training on augumented user 20917 34/50 current_auc = 0.6997549019607844
User 20917 AUC after training: 0.7022058823529412
User 20917 improves AUC. Keeping the model.
Training on augumented user 100972 35/50 current_auc = 0.7022058823529412
User 100972 AUC after training: 0.7022058823529412
User 100972 does not improve AUC. Reverting changes.
Training on augumented user 96219 36/50 current_auc = 0.7022058823529412
User 96219 AUC after training: 0.704656862745098
User 96219 improves AUC. Keeping the model.
Training on augumented user 59655 37/50 current_auc = 0.704656862745098
User 59655 AUC after training: 0.704656862745098
User 59655 does not improve AUC. Reverting changes.
Training on augumented user 57222 38/50 current_auc = 0.704656862745098
User 57222 AUC after training: 0.704656862745098
User 57222 does not improve AUC. Reverting changes.
Training on augumented user 46989 39/50 current_auc = 0.704656862745098
User 46989 AUC after training: 0.6997549019607843
User 46989 does not improve AUC. Reverting changes.
Training on augumented user 17719 40/50 current_auc = 0.704656862745098
User 17719 AUC after training: 0.6973039215686274
User 17719 does not improve AUC. Reverting changes.
Training on augumented user 129856 41/50 current_auc = 0.704656862745098
User 129856 AUC after training: 0.7022058823529411
User 129856 does not improve AUC. Reverting changes.
Training on augumented user 26083 42/50 current_auc = 0.704656862745098
User 26083 AUC after training: 0.6973039215686274
User 26083 does not improve AUC. Reverting changes.
Training on augumented user 127598 43/50 current_auc = 0.704656862745098
User 127598 AUC after training: 0.6997549019607844
User 127598 does not improve AUC. Reverting changes.
Training on augumented user 15916 44/50 current_auc = 0.704656862745098
User 15916 AUC after training: 0.704656862745098
User 15916 does not improve AUC. Reverting changes.
Training on augumented user 47786 45/50 current_auc = 0.704656862745098
User 47786 AUC after training: 0.7022058823529412
User 47786 does not improve AUC. Reverting changes.
Training on augumented user 82516 46/50 current_auc = 0.704656862745098
User 82516 AUC after training: 0.704656862745098
User 82516 does not improve AUC. Reverting changes.
Training on augumented user 57588 47/50 current_auc = 0.704656862745098
User 57588 AUC after training: 0.704656862745098
User 57588 does not improve AUC. Reverting changes.
Training on augumented user 79971 48/50 current_auc = 0.704656862745098
User 79971 AUC after training: 0.704656862745098
User 79971 does not improve AUC. Reverting changes.
Training on augumented user 103703 49/50 current_auc = 0.704656862745098
User 103703 AUC after training: 0.6973039215686274
User 103703 does not improve AUC. Reverting changes.
[2024-12-02 19:17:39.792007] start test user 86922 184/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:17:40.237082] start test user 86922 184/568 recall augumented users by random, augumented_users = [94222, 21183, 26827, 98903, 12753, 66531, 45226, 83954, 76230, 35500, 127841, 59602, 99917, 131617, 127470, 28016, 78097, 131306, 55757, 123870, 108822, 49525, 53214, 1622, 982, 91480, 17290, 35046, 137494, 131503, 59523, 27814, 7769, 119599, 22438, 60042, 116508, 116226, 129876, 78132, 63750, 111582, 4549, 127695, 54364, 51127, 64490, 28251, 919, 128063]
[2024-12-02 19:17:40.251461] user = 86922 Cloud 184/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:17:40.270320] user = 86922 Local 184/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:17:40.310613] user = 86922 Local+ 184/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:17:42.247648] user = 86922 MPDA- 184/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 94222 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94222 AUC after training: 0.5
User 94222 does not improve AUC. Reverting changes.
Training on augumented user 21183 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21183 AUC after training: 0.5
User 21183 does not improve AUC. Reverting changes.
Training on augumented user 26827 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26827 AUC after training: 0.5
User 26827 does not improve AUC. Reverting changes.
Training on augumented user 98903 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98903 AUC after training: 0.5
User 98903 does not improve AUC. Reverting changes.
Training on augumented user 12753 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12753 AUC after training: 0.5
User 12753 does not improve AUC. Reverting changes.
Training on augumented user 66531 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66531 AUC after training: 0.5
User 66531 does not improve AUC. Reverting changes.
Training on augumented user 45226 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45226 AUC after training: 0.5
User 45226 does not improve AUC. Reverting changes.
Training on augumented user 83954 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83954 AUC after training: 0.5
User 83954 does not improve AUC. Reverting changes.
Training on augumented user 76230 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76230 AUC after training: 0.5
User 76230 does not improve AUC. Reverting changes.
Training on augumented user 35500 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35500 AUC after training: 0.5
User 35500 does not improve AUC. Reverting changes.
Training on augumented user 127841 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127841 AUC after training: 0.5
User 127841 does not improve AUC. Reverting changes.
Training on augumented user 59602 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59602 AUC after training: 0.5
User 59602 does not improve AUC. Reverting changes.
Training on augumented user 99917 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99917 AUC after training: 0.5
User 99917 does not improve AUC. Reverting changes.
Training on augumented user 131617 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131617 AUC after training: 0.5
User 131617 does not improve AUC. Reverting changes.
Training on augumented user 127470 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127470 AUC after training: 0.5
User 127470 does not improve AUC. Reverting changes.
Training on augumented user 28016 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28016 AUC after training: 0.5
User 28016 does not improve AUC. Reverting changes.
Training on augumented user 78097 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78097 AUC after training: 0.5
User 78097 does not improve AUC. Reverting changes.
Training on augumented user 131306 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131306 AUC after training: 0.5
User 131306 does not improve AUC. Reverting changes.
Training on augumented user 55757 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55757 AUC after training: 0.5
User 55757 does not improve AUC. Reverting changes.
Training on augumented user 123870 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123870 AUC after training: 0.5
User 123870 does not improve AUC. Reverting changes.
Training on augumented user 108822 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108822 AUC after training: 0.5
User 108822 does not improve AUC. Reverting changes.
Training on augumented user 49525 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49525 AUC after training: 0.5
User 49525 does not improve AUC. Reverting changes.
Training on augumented user 53214 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53214 AUC after training: 0.5
User 53214 does not improve AUC. Reverting changes.
Training on augumented user 1622 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1622 AUC after training: 0.5
User 1622 does not improve AUC. Reverting changes.
Training on augumented user 982 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 982 AUC after training: 0.5
User 982 does not improve AUC. Reverting changes.
Training on augumented user 91480 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91480 AUC after training: 0.5
User 91480 does not improve AUC. Reverting changes.
Training on augumented user 17290 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17290 AUC after training: 0.5
User 17290 does not improve AUC. Reverting changes.
Training on augumented user 35046 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35046 AUC after training: 0.5
User 35046 does not improve AUC. Reverting changes.
Training on augumented user 137494 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137494 AUC after training: 0.5
User 137494 does not improve AUC. Reverting changes.
Training on augumented user 131503 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131503 AUC after training: 0.5
User 131503 does not improve AUC. Reverting changes.
Training on augumented user 59523 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59523 AUC after training: 0.5
User 59523 does not improve AUC. Reverting changes.
Training on augumented user 27814 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27814 AUC after training: 0.5
User 27814 does not improve AUC. Reverting changes.
Training on augumented user 7769 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7769 AUC after training: 0.5
User 7769 does not improve AUC. Reverting changes.
Training on augumented user 119599 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119599 AUC after training: 0.5
User 119599 does not improve AUC. Reverting changes.
Training on augumented user 22438 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22438 AUC after training: 0.5
User 22438 does not improve AUC. Reverting changes.
Training on augumented user 60042 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60042 AUC after training: 0.5
User 60042 does not improve AUC. Reverting changes.
Training on augumented user 116508 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116508 AUC after training: 0.5
User 116508 does not improve AUC. Reverting changes.
Training on augumented user 116226 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116226 AUC after training: 0.5
User 116226 does not improve AUC. Reverting changes.
Training on augumented user 129876 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129876 AUC after training: 0.5
User 129876 does not improve AUC. Reverting changes.
Training on augumented user 78132 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78132 AUC after training: 0.5
User 78132 does not improve AUC. Reverting changes.
Training on augumented user 63750 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63750 AUC after training: 0.5
User 63750 does not improve AUC. Reverting changes.
Training on augumented user 111582 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111582 AUC after training: 0.5
User 111582 does not improve AUC. Reverting changes.
Training on augumented user 4549 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4549 AUC after training: 0.5
User 4549 does not improve AUC. Reverting changes.
Training on augumented user 127695 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127695 AUC after training: 0.5
User 127695 does not improve AUC. Reverting changes.
Training on augumented user 54364 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54364 AUC after training: 0.5
User 54364 does not improve AUC. Reverting changes.
Training on augumented user 51127 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51127 AUC after training: 0.5
User 51127 does not improve AUC. Reverting changes.
Training on augumented user 64490 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64490 AUC after training: 0.5
User 64490 does not improve AUC. Reverting changes.
Training on augumented user 28251 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28251 AUC after training: 0.5
User 28251 does not improve AUC. Reverting changes.
Training on augumented user 919 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 919 AUC after training: 0.5
User 919 does not improve AUC. Reverting changes.
Training on augumented user 128063 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128063 AUC after training: 0.5
User 128063 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:18:08.657681] start test user 86965 185/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:18:09.214338] start test user 86965 185/568 recall augumented users by random, augumented_users = [46923, 37740, 92045, 20609, 16679, 93542, 51358, 19188, 113954, 3403, 62025, 115069, 21883, 19427, 73257, 94624, 90806, 22431, 26153, 39664, 106490, 78989, 69860, 116664, 35207, 67396, 116994, 51607, 133123, 4336, 35121, 28824, 6815, 45674, 89190, 104314, 51525, 49905, 98725, 100553, 127710, 136590, 114343, 72517, 76848, 136251, 94632, 6217, 54705, 77334]
[2024-12-02 19:18:09.229096] user = 86965 Cloud 185/568
[2024-12-02 19:18:09.238549] user = 86965 Local 185/568
[2024-12-02 19:18:09.257944] user = 86965 Local+ 185/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:18:11.520503] user = 86965 MPDA- 185/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.25
Training on augumented user 46923 0/50 current_auc = 0.25
User 46923 AUC after training: 0.25
User 46923 does not improve AUC. Reverting changes.
Training on augumented user 37740 1/50 current_auc = 0.25
User 37740 AUC after training: 0.25
User 37740 does not improve AUC. Reverting changes.
Training on augumented user 92045 2/50 current_auc = 0.25
User 92045 AUC after training: 0.25
User 92045 does not improve AUC. Reverting changes.
Training on augumented user 20609 3/50 current_auc = 0.25
User 20609 AUC after training: 0.25
User 20609 does not improve AUC. Reverting changes.
Training on augumented user 16679 4/50 current_auc = 0.25
User 16679 AUC after training: 0.25
User 16679 does not improve AUC. Reverting changes.
Training on augumented user 93542 5/50 current_auc = 0.25
User 93542 AUC after training: 0.25
User 93542 does not improve AUC. Reverting changes.
Training on augumented user 51358 6/50 current_auc = 0.25
User 51358 AUC after training: 0.25
User 51358 does not improve AUC. Reverting changes.
Training on augumented user 19188 7/50 current_auc = 0.25
User 19188 AUC after training: 0.375
User 19188 improves AUC. Keeping the model.
Training on augumented user 113954 8/50 current_auc = 0.375
User 113954 AUC after training: 0.25
User 113954 does not improve AUC. Reverting changes.
Training on augumented user 3403 9/50 current_auc = 0.375
User 3403 AUC after training: 0.25
User 3403 does not improve AUC. Reverting changes.
Training on augumented user 62025 10/50 current_auc = 0.375
User 62025 AUC after training: 0.25
User 62025 does not improve AUC. Reverting changes.
Training on augumented user 115069 11/50 current_auc = 0.375
User 115069 AUC after training: 0.25
User 115069 does not improve AUC. Reverting changes.
Training on augumented user 21883 12/50 current_auc = 0.375
User 21883 AUC after training: 0.375
User 21883 does not improve AUC. Reverting changes.
Training on augumented user 19427 13/50 current_auc = 0.375
User 19427 AUC after training: 0.25
User 19427 does not improve AUC. Reverting changes.
Training on augumented user 73257 14/50 current_auc = 0.375
User 73257 AUC after training: 0.25
User 73257 does not improve AUC. Reverting changes.
Training on augumented user 94624 15/50 current_auc = 0.375
User 94624 AUC after training: 0.25
User 94624 does not improve AUC. Reverting changes.
Training on augumented user 90806 16/50 current_auc = 0.375
User 90806 AUC after training: 0.25
User 90806 does not improve AUC. Reverting changes.
Training on augumented user 22431 17/50 current_auc = 0.375
User 22431 AUC after training: 0.25
User 22431 does not improve AUC. Reverting changes.
Training on augumented user 26153 18/50 current_auc = 0.375
User 26153 AUC after training: 0.25
User 26153 does not improve AUC. Reverting changes.
Training on augumented user 39664 19/50 current_auc = 0.375
User 39664 AUC after training: 0.375
User 39664 does not improve AUC. Reverting changes.
Training on augumented user 106490 20/50 current_auc = 0.375
User 106490 AUC after training: 0.25
User 106490 does not improve AUC. Reverting changes.
Training on augumented user 78989 21/50 current_auc = 0.375
User 78989 AUC after training: 0.25
User 78989 does not improve AUC. Reverting changes.
Training on augumented user 69860 22/50 current_auc = 0.375
User 69860 AUC after training: 0.25
User 69860 does not improve AUC. Reverting changes.
Training on augumented user 116664 23/50 current_auc = 0.375
User 116664 AUC after training: 0.375
User 116664 does not improve AUC. Reverting changes.
Training on augumented user 35207 24/50 current_auc = 0.375
User 35207 AUC after training: 0.375
User 35207 does not improve AUC. Reverting changes.
Training on augumented user 67396 25/50 current_auc = 0.375
User 67396 AUC after training: 0.25
User 67396 does not improve AUC. Reverting changes.
Training on augumented user 116994 26/50 current_auc = 0.375
User 116994 AUC after training: 0.25
User 116994 does not improve AUC. Reverting changes.
Training on augumented user 51607 27/50 current_auc = 0.375
User 51607 AUC after training: 0.25
User 51607 does not improve AUC. Reverting changes.
Training on augumented user 133123 28/50 current_auc = 0.375
User 133123 AUC after training: 0.375
User 133123 does not improve AUC. Reverting changes.
Training on augumented user 4336 29/50 current_auc = 0.375
User 4336 AUC after training: 0.25
User 4336 does not improve AUC. Reverting changes.
Training on augumented user 35121 30/50 current_auc = 0.375
User 35121 AUC after training: 0.25
User 35121 does not improve AUC. Reverting changes.
Training on augumented user 28824 31/50 current_auc = 0.375
User 28824 AUC after training: 0.25
User 28824 does not improve AUC. Reverting changes.
Training on augumented user 6815 32/50 current_auc = 0.375
User 6815 AUC after training: 0.25
User 6815 does not improve AUC. Reverting changes.
Training on augumented user 45674 33/50 current_auc = 0.375
User 45674 AUC after training: 0.25
User 45674 does not improve AUC. Reverting changes.
Training on augumented user 89190 34/50 current_auc = 0.375
User 89190 AUC after training: 0.25
User 89190 does not improve AUC. Reverting changes.
Training on augumented user 104314 35/50 current_auc = 0.375
User 104314 AUC after training: 0.25
User 104314 does not improve AUC. Reverting changes.
Training on augumented user 51525 36/50 current_auc = 0.375
User 51525 AUC after training: 0.25
User 51525 does not improve AUC. Reverting changes.
Training on augumented user 49905 37/50 current_auc = 0.375
User 49905 AUC after training: 0.375
User 49905 does not improve AUC. Reverting changes.
Training on augumented user 98725 38/50 current_auc = 0.375
User 98725 AUC after training: 0.375
User 98725 does not improve AUC. Reverting changes.
Training on augumented user 100553 39/50 current_auc = 0.375
User 100553 AUC after training: 0.375
User 100553 does not improve AUC. Reverting changes.
Training on augumented user 127710 40/50 current_auc = 0.375
User 127710 AUC after training: 0.375
User 127710 does not improve AUC. Reverting changes.
Training on augumented user 136590 41/50 current_auc = 0.375
User 136590 AUC after training: 0.25
User 136590 does not improve AUC. Reverting changes.
Training on augumented user 114343 42/50 current_auc = 0.375
User 114343 AUC after training: 0.375
User 114343 does not improve AUC. Reverting changes.
Training on augumented user 72517 43/50 current_auc = 0.375
User 72517 AUC after training: 0.25
User 72517 does not improve AUC. Reverting changes.
Training on augumented user 76848 44/50 current_auc = 0.375
User 76848 AUC after training: 0.25
User 76848 does not improve AUC. Reverting changes.
Training on augumented user 136251 45/50 current_auc = 0.375
User 136251 AUC after training: 0.25
User 136251 does not improve AUC. Reverting changes.
Training on augumented user 94632 46/50 current_auc = 0.375
User 94632 AUC after training: 0.25
User 94632 does not improve AUC. Reverting changes.
Training on augumented user 6217 47/50 current_auc = 0.375
User 6217 AUC after training: 0.375
User 6217 does not improve AUC. Reverting changes.
Training on augumented user 54705 48/50 current_auc = 0.375
User 54705 AUC after training: 0.25
User 54705 does not improve AUC. Reverting changes.
Training on augumented user 77334 49/50 current_auc = 0.375
User 77334 AUC after training: 0.375
User 77334 does not improve AUC. Reverting changes.
[2024-12-02 19:18:40.802761] start test user 86973 186/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:18:41.228668] start test user 86973 186/568 recall augumented users by random, augumented_users = [10896, 124073, 57060, 128284, 81796, 61597, 33600, 102832, 55727, 96532, 43837, 103652, 68781, 113024, 36316, 36064, 25475, 102891, 124377, 71580, 133583, 43886, 126185, 23993, 108257, 95053, 77978, 27073, 8297, 8540, 115124, 39778, 84987, 95031, 93324, 15556, 109614, 46446, 129228, 97102, 7484, 99378, 137152, 104625, 41607, 72699, 132550, 44900, 4080, 100438]
[2024-12-02 19:18:41.244211] user = 86973 Cloud 186/568
[2024-12-02 19:18:41.254755] user = 86973 Local 186/568
[2024-12-02 19:18:41.325354] user = 86973 Local+ 186/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:18:44.531563] user = 86973 MPDA- 186/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8
Training on augumented user 10896 0/50 current_auc = 0.8
User 10896 AUC after training: 0.9
User 10896 improves AUC. Keeping the model.
Training on augumented user 124073 1/50 current_auc = 0.9
User 124073 AUC after training: 0.9
User 124073 does not improve AUC. Reverting changes.
Training on augumented user 57060 2/50 current_auc = 0.9
User 57060 AUC after training: 0.9
User 57060 does not improve AUC. Reverting changes.
Training on augumented user 128284 3/50 current_auc = 0.9
User 128284 AUC after training: 0.9
User 128284 does not improve AUC. Reverting changes.
Training on augumented user 81796 4/50 current_auc = 0.9
User 81796 AUC after training: 0.8
User 81796 does not improve AUC. Reverting changes.
Training on augumented user 61597 5/50 current_auc = 0.9
User 61597 AUC after training: 0.9
User 61597 does not improve AUC. Reverting changes.
Training on augumented user 33600 6/50 current_auc = 0.9
User 33600 AUC after training: 0.9
User 33600 does not improve AUC. Reverting changes.
Training on augumented user 102832 7/50 current_auc = 0.9
User 102832 AUC after training: 0.9
User 102832 does not improve AUC. Reverting changes.
Training on augumented user 55727 8/50 current_auc = 0.9
User 55727 AUC after training: 0.9
User 55727 does not improve AUC. Reverting changes.
Training on augumented user 96532 9/50 current_auc = 0.9
User 96532 AUC after training: 0.9
User 96532 does not improve AUC. Reverting changes.
Training on augumented user 43837 10/50 current_auc = 0.9
User 43837 AUC after training: 0.9
User 43837 does not improve AUC. Reverting changes.
Training on augumented user 103652 11/50 current_auc = 0.9
User 103652 AUC after training: 0.8
User 103652 does not improve AUC. Reverting changes.
Training on augumented user 68781 12/50 current_auc = 0.9
User 68781 AUC after training: 0.9
User 68781 does not improve AUC. Reverting changes.
Training on augumented user 113024 13/50 current_auc = 0.9
User 113024 AUC after training: 0.8
User 113024 does not improve AUC. Reverting changes.
Training on augumented user 36316 14/50 current_auc = 0.9
User 36316 AUC after training: 0.9
User 36316 does not improve AUC. Reverting changes.
Training on augumented user 36064 15/50 current_auc = 0.9
User 36064 AUC after training: 0.9
User 36064 does not improve AUC. Reverting changes.
Training on augumented user 25475 16/50 current_auc = 0.9
User 25475 AUC after training: 0.8
User 25475 does not improve AUC. Reverting changes.
Training on augumented user 102891 17/50 current_auc = 0.9
User 102891 AUC after training: 0.9
User 102891 does not improve AUC. Reverting changes.
Training on augumented user 124377 18/50 current_auc = 0.9
User 124377 AUC after training: 0.9
User 124377 does not improve AUC. Reverting changes.
Training on augumented user 71580 19/50 current_auc = 0.9
User 71580 AUC after training: 0.8
User 71580 does not improve AUC. Reverting changes.
Training on augumented user 133583 20/50 current_auc = 0.9
User 133583 AUC after training: 0.9
User 133583 does not improve AUC. Reverting changes.
Training on augumented user 43886 21/50 current_auc = 0.9
User 43886 AUC after training: 0.8
User 43886 does not improve AUC. Reverting changes.
Training on augumented user 126185 22/50 current_auc = 0.9
User 126185 AUC after training: 0.9
User 126185 does not improve AUC. Reverting changes.
Training on augumented user 23993 23/50 current_auc = 0.9
User 23993 AUC after training: 0.9
User 23993 does not improve AUC. Reverting changes.
Training on augumented user 108257 24/50 current_auc = 0.9
User 108257 AUC after training: 0.9
User 108257 does not improve AUC. Reverting changes.
Training on augumented user 95053 25/50 current_auc = 0.9
User 95053 AUC after training: 0.9
User 95053 does not improve AUC. Reverting changes.
Training on augumented user 77978 26/50 current_auc = 0.9
User 77978 AUC after training: 0.9
User 77978 does not improve AUC. Reverting changes.
Training on augumented user 27073 27/50 current_auc = 0.9
User 27073 AUC after training: 0.8
User 27073 does not improve AUC. Reverting changes.
Training on augumented user 8297 28/50 current_auc = 0.9
User 8297 AUC after training: 0.8
User 8297 does not improve AUC. Reverting changes.
Training on augumented user 8540 29/50 current_auc = 0.9
User 8540 AUC after training: 0.9
User 8540 does not improve AUC. Reverting changes.
Training on augumented user 115124 30/50 current_auc = 0.9
User 115124 AUC after training: 0.8
User 115124 does not improve AUC. Reverting changes.
Training on augumented user 39778 31/50 current_auc = 0.9
User 39778 AUC after training: 0.9
User 39778 does not improve AUC. Reverting changes.
Training on augumented user 84987 32/50 current_auc = 0.9
User 84987 AUC after training: 0.9
User 84987 does not improve AUC. Reverting changes.
Training on augumented user 95031 33/50 current_auc = 0.9
User 95031 AUC after training: 0.8
User 95031 does not improve AUC. Reverting changes.
Training on augumented user 93324 34/50 current_auc = 0.9
User 93324 AUC after training: 0.9
User 93324 does not improve AUC. Reverting changes.
Training on augumented user 15556 35/50 current_auc = 0.9
User 15556 AUC after training: 0.9
User 15556 does not improve AUC. Reverting changes.
Training on augumented user 109614 36/50 current_auc = 0.9
User 109614 AUC after training: 0.9
User 109614 does not improve AUC. Reverting changes.
Training on augumented user 46446 37/50 current_auc = 0.9
User 46446 AUC after training: 0.9
User 46446 does not improve AUC. Reverting changes.
Training on augumented user 129228 38/50 current_auc = 0.9
User 129228 AUC after training: 0.9
User 129228 does not improve AUC. Reverting changes.
Training on augumented user 97102 39/50 current_auc = 0.9
User 97102 AUC after training: 0.8
User 97102 does not improve AUC. Reverting changes.
Training on augumented user 7484 40/50 current_auc = 0.9
User 7484 AUC after training: 0.8
User 7484 does not improve AUC. Reverting changes.
Training on augumented user 99378 41/50 current_auc = 0.9
User 99378 AUC after training: 0.9
User 99378 does not improve AUC. Reverting changes.
Training on augumented user 137152 42/50 current_auc = 0.9
User 137152 AUC after training: 0.9
User 137152 does not improve AUC. Reverting changes.
Training on augumented user 104625 43/50 current_auc = 0.9
User 104625 AUC after training: 0.9
User 104625 does not improve AUC. Reverting changes.
Training on augumented user 41607 44/50 current_auc = 0.9
User 41607 AUC after training: 0.9
User 41607 does not improve AUC. Reverting changes.
Training on augumented user 72699 45/50 current_auc = 0.9
User 72699 AUC after training: 0.8
User 72699 does not improve AUC. Reverting changes.
Training on augumented user 132550 46/50 current_auc = 0.9
User 132550 AUC after training: 0.9
User 132550 does not improve AUC. Reverting changes.
Training on augumented user 44900 47/50 current_auc = 0.9
User 44900 AUC after training: 0.9
User 44900 does not improve AUC. Reverting changes.
Training on augumented user 4080 48/50 current_auc = 0.9
User 4080 AUC after training: 0.9
User 4080 does not improve AUC. Reverting changes.
Training on augumented user 100438 49/50 current_auc = 0.9
User 100438 AUC after training: 0.9
User 100438 does not improve AUC. Reverting changes.
[2024-12-02 19:19:15.973113] start test user 87009 187/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:19:16.851521] start test user 87009 187/568 recall augumented users by random, augumented_users = [66433, 50540, 83228, 8961, 73902, 95326, 122613, 116321, 83022, 28479, 110716, 94353, 40518, 4113, 69836, 60953, 19387, 131693, 70715, 111328, 88327, 111069, 112119, 76231, 88558, 1082, 13285, 137179, 121260, 39015, 125302, 115585, 93941, 64043, 92065, 610, 30832, 18738, 80205, 129987, 38764, 77988, 116466, 37251, 72405, 100019, 77759, 121155, 62721, 54222]
[2024-12-02 19:19:16.868895] user = 87009 Cloud 187/568
[2024-12-02 19:19:16.904007] user = 87009 Local 187/568
[2024-12-02 19:19:16.969388] user = 87009 Local+ 187/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:19:18.982607] user = 87009 MPDA- 187/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.716397179286274
Training on augumented user 66433 0/50 current_auc = 0.716397179286274
User 66433 AUC after training: 0.7166108697200655
User 66433 improves AUC. Keeping the model.
Training on augumented user 50540 1/50 current_auc = 0.7166108697200655
User 50540 AUC after training: 0.7166108697200655
User 50540 does not improve AUC. Reverting changes.
Training on augumented user 83228 2/50 current_auc = 0.7166108697200655
User 83228 AUC after training: 0.7156492627680034
User 83228 does not improve AUC. Reverting changes.
Training on augumented user 8961 3/50 current_auc = 0.7166108697200655
User 8961 AUC after training: 0.7157204929126006
User 8961 does not improve AUC. Reverting changes.
Training on augumented user 73902 4/50 current_auc = 0.7166108697200655
User 73902 AUC after training: 0.7160766436355865
User 73902 does not improve AUC. Reverting changes.
Training on augumented user 95326 5/50 current_auc = 0.7166108697200655
User 95326 AUC after training: 0.715506802478809
User 95326 does not improve AUC. Reverting changes.
Training on augumented user 122613 6/50 current_auc = 0.7166108697200655
User 122613 AUC after training: 0.7167889450815585
User 122613 improves AUC. Keeping the model.
Training on augumented user 116321 7/50 current_auc = 0.7167889450815585
User 116321 AUC after training: 0.7159341833463921
User 116321 does not improve AUC. Reverting changes.
Training on augumented user 83022 8/50 current_auc = 0.7167889450815585
User 83022 AUC after training: 0.7168601752261556
User 83022 improves AUC. Keeping the model.
Training on augumented user 28479 9/50 current_auc = 0.7168601752261556
User 28479 AUC after training: 0.7163615642139753
User 28479 does not improve AUC. Reverting changes.
Training on augumented user 110716 10/50 current_auc = 0.7168601752261556
User 110716 AUC after training: 0.7166464847923641
User 110716 does not improve AUC. Reverting changes.
Training on augumented user 94353 11/50 current_auc = 0.7168601752261556
User 94353 AUC after training: 0.7163615642139753
User 94353 does not improve AUC. Reverting changes.
Training on augumented user 40518 12/50 current_auc = 0.7168601752261556
User 40518 AUC after training: 0.7171450958045444
User 40518 improves AUC. Keeping the model.
Training on augumented user 4113 13/50 current_auc = 0.7171450958045444
User 4113 AUC after training: 0.717287556093739
User 4113 improves AUC. Keeping the model.
Training on augumented user 69836 14/50 current_auc = 0.717287556093739
User 69836 AUC after training: 0.7167177149369613
User 69836 does not improve AUC. Reverting changes.
Training on augumented user 60953 15/50 current_auc = 0.717287556093739
User 60953 AUC after training: 0.7172163259491418
User 60953 does not improve AUC. Reverting changes.
Training on augumented user 19387 16/50 current_auc = 0.717287556093739
User 19387 AUC after training: 0.7167889450815585
User 19387 does not improve AUC. Reverting changes.
Training on augumented user 131693 17/50 current_auc = 0.717287556093739
User 131693 AUC after training: 0.7172163259491418
User 131693 does not improve AUC. Reverting changes.
Training on augumented user 70715 18/50 current_auc = 0.717287556093739
User 70715 AUC after training: 0.7174300163829332
User 70715 improves AUC. Keeping the model.
Training on augumented user 111328 19/50 current_auc = 0.7174300163829332
User 111328 AUC after training: 0.7170738656599472
User 111328 does not improve AUC. Reverting changes.
Training on augumented user 88327 20/50 current_auc = 0.7174300163829332
User 88327 AUC after training: 0.7173587862383362
User 88327 does not improve AUC. Reverting changes.
Training on augumented user 111069 21/50 current_auc = 0.7174300163829332
User 111069 AUC after training: 0.716931405370753
User 111069 does not improve AUC. Reverting changes.
Training on augumented user 112119 22/50 current_auc = 0.7174300163829332
User 112119 AUC after training: 0.7172875560937388
User 112119 does not improve AUC. Reverting changes.
Training on augumented user 76231 23/50 current_auc = 0.7174300163829332
User 76231 AUC after training: 0.7172875560937388
User 76231 does not improve AUC. Reverting changes.
Training on augumented user 88558 24/50 current_auc = 0.7174300163829332
User 88558 AUC after training: 0.717358786238336
User 88558 does not improve AUC. Reverting changes.
Training on augumented user 1082 25/50 current_auc = 0.7174300163829332
User 1082 AUC after training: 0.7172875560937388
User 1082 does not improve AUC. Reverting changes.
Training on augumented user 13285 26/50 current_auc = 0.7174300163829332
User 13285 AUC after training: 0.7208490633235984
User 13285 improves AUC. Keeping the model.
Training on augumented user 137179 27/50 current_auc = 0.7208490633235984
User 137179 AUC after training: 0.720991523612793
User 137179 improves AUC. Keeping the model.
Training on augumented user 121260 28/50 current_auc = 0.720991523612793
User 121260 AUC after training: 0.720279222166821
User 121260 does not improve AUC. Reverting changes.
Training on augumented user 39015 29/50 current_auc = 0.720991523612793
User 39015 AUC after training: 0.720457297528314
User 39015 does not improve AUC. Reverting changes.
Training on augumented user 125302 30/50 current_auc = 0.720991523612793
User 125302 AUC after training: 0.720991523612793
User 125302 does not improve AUC. Reverting changes.
Training on augumented user 115585 31/50 current_auc = 0.720991523612793
User 115585 AUC after training: 0.7198874563715365
User 115585 does not improve AUC. Reverting changes.
Training on augumented user 93941 32/50 current_auc = 0.720991523612793
User 93941 AUC after training: 0.7209202934681957
User 93941 does not improve AUC. Reverting changes.
Training on augumented user 64043 33/50 current_auc = 0.720991523612793
User 64043 AUC after training: 0.7208490633235985
User 64043 does not improve AUC. Reverting changes.
Training on augumented user 92065 34/50 current_auc = 0.720991523612793
User 92065 AUC after training: 0.7207422181067027
User 92065 does not improve AUC. Reverting changes.
Training on augumented user 610 35/50 current_auc = 0.720991523612793
User 610 AUC after training: 0.7220599757817509
User 610 improves AUC. Keeping the model.
Training on augumented user 30832 36/50 current_auc = 0.7220599757817509
User 30832 AUC after training: 0.7219531305648551
User 30832 does not improve AUC. Reverting changes.
Training on augumented user 18738 37/50 current_auc = 0.7220599757817509
User 18738 AUC after training: 0.7208134482513
User 18738 does not improve AUC. Reverting changes.
Training on augumented user 80205 38/50 current_auc = 0.7220599757817509
User 80205 AUC after training: 0.721418904480376
User 80205 does not improve AUC. Reverting changes.
Training on augumented user 129987 39/50 current_auc = 0.7220599757817509
User 129987 AUC after training: 0.7219175154925564
User 129987 does not improve AUC. Reverting changes.
Training on augumented user 38764 40/50 current_auc = 0.7220599757817509
User 38764 AUC after training: 0.7213120592634803
User 38764 does not improve AUC. Reverting changes.
Training on augumented user 77988 41/50 current_auc = 0.7220599757817509
User 77988 AUC after training: 0.7214901346249734
User 77988 does not improve AUC. Reverting changes.
Training on augumented user 116466 42/50 current_auc = 0.7220599757817509
User 116466 AUC after training: 0.721347674335779
User 116466 does not improve AUC. Reverting changes.
Training on augumented user 37251 43/50 current_auc = 0.7220599757817509
User 37251 AUC after training: 0.7192820001424602
User 37251 does not improve AUC. Reverting changes.
Training on augumented user 72405 44/50 current_auc = 0.7220599757817509
User 72405 AUC after training: 0.7207066030344043
User 72405 does not improve AUC. Reverting changes.
Training on augumented user 100019 45/50 current_auc = 0.7220599757817509
User 100019 AUC after training: 0.721775055203362
User 100019 does not improve AUC. Reverting changes.
Training on augumented user 77759 46/50 current_auc = 0.7220599757817509
User 77759 AUC after training: 0.7212052140465846
User 77759 does not improve AUC. Reverting changes.
Training on augumented user 121155 47/50 current_auc = 0.7220599757817509
User 121155 AUC after training: 0.7208134482513
User 121155 does not improve AUC. Reverting changes.
Training on augumented user 62721 48/50 current_auc = 0.7220599757817509
User 62721 AUC after training: 0.7218462853479592
User 62721 does not improve AUC. Reverting changes.
Training on augumented user 54222 49/50 current_auc = 0.7220599757817509
User 54222 AUC after training: 0.7218106702756607
User 54222 does not improve AUC. Reverting changes.
[2024-12-02 19:19:46.576954] start test user 87012 188/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:19:47.011522] start test user 87012 188/568 recall augumented users by random, augumented_users = [82753, 43076, 118684, 9799, 20504, 107446, 43887, 126483, 123840, 8907, 1225, 60945, 111558, 125178, 48665, 105972, 3828, 64489, 107093, 95589, 62179, 73864, 48440, 43768, 44683, 92518, 97926, 120658, 26127, 58466, 114385, 105395, 55840, 129397, 99626, 102190, 52150, 99800, 94620, 23093, 30011, 55855, 71816, 89668, 34812, 71714, 5831, 83809, 30055, 124973]
[2024-12-02 19:19:47.024599] user = 87012 Cloud 188/568
[2024-12-02 19:19:47.038173] user = 87012 Local 188/568
[2024-12-02 19:19:47.125462] user = 87012 Local+ 188/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:19:49.873777] user = 87012 MPDA- 188/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.513477088948787
Training on augumented user 82753 0/50 current_auc = 0.513477088948787
User 82753 AUC after training: 0.5161725067385444
User 82753 improves AUC. Keeping the model.
Training on augumented user 43076 1/50 current_auc = 0.5161725067385444
User 43076 AUC after training: 0.5168463611859838
User 43076 improves AUC. Keeping the model.
Training on augumented user 118684 2/50 current_auc = 0.5168463611859838
User 118684 AUC after training: 0.5161725067385444
User 118684 does not improve AUC. Reverting changes.
Training on augumented user 9799 3/50 current_auc = 0.5168463611859838
User 9799 AUC after training: 0.5128032345013477
User 9799 does not improve AUC. Reverting changes.
Training on augumented user 20504 4/50 current_auc = 0.5168463611859838
User 20504 AUC after training: 0.5175202156334232
User 20504 improves AUC. Keeping the model.
Training on augumented user 107446 5/50 current_auc = 0.5175202156334232
User 107446 AUC after training: 0.5168463611859838
User 107446 does not improve AUC. Reverting changes.
Training on augumented user 43887 6/50 current_auc = 0.5175202156334232
User 43887 AUC after training: 0.5181940700808625
User 43887 improves AUC. Keeping the model.
Training on augumented user 126483 7/50 current_auc = 0.5181940700808625
User 126483 AUC after training: 0.5188679245283019
User 126483 improves AUC. Keeping the model.
Training on augumented user 123840 8/50 current_auc = 0.5188679245283019
User 123840 AUC after training: 0.5181940700808625
User 123840 does not improve AUC. Reverting changes.
Training on augumented user 8907 9/50 current_auc = 0.5188679245283019
User 8907 AUC after training: 0.5181940700808625
User 8907 does not improve AUC. Reverting changes.
Training on augumented user 1225 10/50 current_auc = 0.5188679245283019
User 1225 AUC after training: 0.5181940700808625
User 1225 does not improve AUC. Reverting changes.
Training on augumented user 60945 11/50 current_auc = 0.5188679245283019
User 60945 AUC after training: 0.5188679245283019
User 60945 does not improve AUC. Reverting changes.
Training on augumented user 111558 12/50 current_auc = 0.5188679245283019
User 111558 AUC after training: 0.5195417789757413
User 111558 improves AUC. Keeping the model.
Training on augumented user 125178 13/50 current_auc = 0.5195417789757413
User 125178 AUC after training: 0.5168463611859839
User 125178 does not improve AUC. Reverting changes.
Training on augumented user 48665 14/50 current_auc = 0.5195417789757413
User 48665 AUC after training: 0.5168463611859838
User 48665 does not improve AUC. Reverting changes.
Training on augumented user 105972 15/50 current_auc = 0.5195417789757413
User 105972 AUC after training: 0.5181940700808625
User 105972 does not improve AUC. Reverting changes.
Training on augumented user 3828 16/50 current_auc = 0.5195417789757413
User 3828 AUC after training: 0.5181940700808625
User 3828 does not improve AUC. Reverting changes.
Training on augumented user 64489 17/50 current_auc = 0.5195417789757413
User 64489 AUC after training: 0.5181940700808625
User 64489 does not improve AUC. Reverting changes.
Training on augumented user 107093 18/50 current_auc = 0.5195417789757413
User 107093 AUC after training: 0.5175202156334231
User 107093 does not improve AUC. Reverting changes.
Training on augumented user 95589 19/50 current_auc = 0.5195417789757413
User 95589 AUC after training: 0.5202156334231806
User 95589 improves AUC. Keeping the model.
Training on augumented user 62179 20/50 current_auc = 0.5202156334231806
User 62179 AUC after training: 0.5195417789757413
User 62179 does not improve AUC. Reverting changes.
Training on augumented user 73864 21/50 current_auc = 0.5202156334231806
User 73864 AUC after training: 0.5208894878706198
User 73864 improves AUC. Keeping the model.
Training on augumented user 48440 22/50 current_auc = 0.5208894878706198
User 48440 AUC after training: 0.5215633423180592
User 48440 improves AUC. Keeping the model.
Training on augumented user 43768 23/50 current_auc = 0.5215633423180592
User 43768 AUC after training: 0.5202156334231806
User 43768 does not improve AUC. Reverting changes.
Training on augumented user 44683 24/50 current_auc = 0.5215633423180592
User 44683 AUC after training: 0.5208894878706198
User 44683 does not improve AUC. Reverting changes.
Training on augumented user 92518 25/50 current_auc = 0.5215633423180592
User 92518 AUC after training: 0.5148247978436657
User 92518 does not improve AUC. Reverting changes.
Training on augumented user 97926 26/50 current_auc = 0.5215633423180592
User 97926 AUC after training: 0.522911051212938
User 97926 improves AUC. Keeping the model.
Training on augumented user 120658 27/50 current_auc = 0.522911051212938
User 120658 AUC after training: 0.5235849056603773
User 120658 improves AUC. Keeping the model.
Training on augumented user 26127 28/50 current_auc = 0.5235849056603773
User 26127 AUC after training: 0.5242587601078167
User 26127 improves AUC. Keeping the model.
Training on augumented user 58466 29/50 current_auc = 0.5242587601078167
User 58466 AUC after training: 0.52088948787062
User 58466 does not improve AUC. Reverting changes.
Training on augumented user 114385 30/50 current_auc = 0.5242587601078167
User 114385 AUC after training: 0.5242587601078167
User 114385 does not improve AUC. Reverting changes.
Training on augumented user 105395 31/50 current_auc = 0.5242587601078167
User 105395 AUC after training: 0.5202156334231806
User 105395 does not improve AUC. Reverting changes.
Training on augumented user 55840 32/50 current_auc = 0.5242587601078167
User 55840 AUC after training: 0.5242587601078167
User 55840 does not improve AUC. Reverting changes.
Training on augumented user 129397 33/50 current_auc = 0.5242587601078167
User 129397 AUC after training: 0.5175202156334232
User 129397 does not improve AUC. Reverting changes.
Training on augumented user 99626 34/50 current_auc = 0.5242587601078167
User 99626 AUC after training: 0.5235849056603774
User 99626 does not improve AUC. Reverting changes.
Training on augumented user 102190 35/50 current_auc = 0.5242587601078167
User 102190 AUC after training: 0.5229110512129379
User 102190 does not improve AUC. Reverting changes.
Training on augumented user 52150 36/50 current_auc = 0.5242587601078167
User 52150 AUC after training: 0.5215633423180593
User 52150 does not improve AUC. Reverting changes.
Training on augumented user 99800 37/50 current_auc = 0.5242587601078167
User 99800 AUC after training: 0.5256064690026954
User 99800 improves AUC. Keeping the model.
Training on augumented user 94620 38/50 current_auc = 0.5256064690026954
User 94620 AUC after training: 0.5256064690026954
User 94620 does not improve AUC. Reverting changes.
Training on augumented user 23093 39/50 current_auc = 0.5256064690026954
User 23093 AUC after training: 0.5202156334231806
User 23093 does not improve AUC. Reverting changes.
Training on augumented user 30011 40/50 current_auc = 0.5256064690026954
User 30011 AUC after training: 0.5215633423180592
User 30011 does not improve AUC. Reverting changes.
Training on augumented user 55855 41/50 current_auc = 0.5256064690026954
User 55855 AUC after training: 0.5249326145552561
User 55855 does not improve AUC. Reverting changes.
Training on augumented user 71816 42/50 current_auc = 0.5256064690026954
User 71816 AUC after training: 0.5262803234501348
User 71816 improves AUC. Keeping the model.
Training on augumented user 89668 43/50 current_auc = 0.5262803234501348
User 89668 AUC after training: 0.5181940700808625
User 89668 does not improve AUC. Reverting changes.
Training on augumented user 34812 44/50 current_auc = 0.5262803234501348
User 34812 AUC after training: 0.5222371967654986
User 34812 does not improve AUC. Reverting changes.
Training on augumented user 71714 45/50 current_auc = 0.5262803234501348
User 71714 AUC after training: 0.5242587601078168
User 71714 does not improve AUC. Reverting changes.
Training on augumented user 5831 46/50 current_auc = 0.5262803234501348
User 5831 AUC after training: 0.522911051212938
User 5831 does not improve AUC. Reverting changes.
Training on augumented user 83809 47/50 current_auc = 0.5262803234501348
User 83809 AUC after training: 0.522911051212938
User 83809 does not improve AUC. Reverting changes.
Training on augumented user 30055 48/50 current_auc = 0.5262803234501348
User 30055 AUC after training: 0.522911051212938
User 30055 does not improve AUC. Reverting changes.
Training on augumented user 124973 49/50 current_auc = 0.5262803234501348
User 124973 AUC after training: 0.5235849056603773
User 124973 does not improve AUC. Reverting changes.
[2024-12-02 19:20:19.050825] start test user 87062 189/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:20:19.627839] start test user 87062 189/568 recall augumented users by random, augumented_users = [108707, 7906, 133579, 108034, 84182, 110313, 71889, 38035, 4224, 62498, 49638, 131627, 78714, 82926, 82806, 122862, 137578, 39870, 124276, 80632, 114926, 28757, 46617, 18959, 89956, 136643, 63894, 19577, 67890, 66222, 76622, 23853, 72873, 32979, 129353, 123266, 115294, 73353, 122309, 57317, 13292, 83717, 18010, 74953, 27878, 4868, 109980, 7229, 117468, 25411]
[2024-12-02 19:20:19.650224] user = 87062 Cloud 189/568
[2024-12-02 19:20:19.661080] user = 87062 Local 189/568
[2024-12-02 19:20:19.919744] user = 87062 Local+ 189/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:20:22.159211] user = 87062 MPDA- 189/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.603125
Training on augumented user 108707 0/50 current_auc = 0.603125
User 108707 AUC after training: 0.603125
User 108707 does not improve AUC. Reverting changes.
Training on augumented user 7906 1/50 current_auc = 0.603125
User 7906 AUC after training: 0.603125
User 7906 does not improve AUC. Reverting changes.
Training on augumented user 133579 2/50 current_auc = 0.603125
User 133579 AUC after training: 0.6
User 133579 does not improve AUC. Reverting changes.
Training on augumented user 108034 3/50 current_auc = 0.603125
User 108034 AUC after training: 0.603125
User 108034 does not improve AUC. Reverting changes.
Training on augumented user 84182 4/50 current_auc = 0.603125
User 84182 AUC after training: 0.6
User 84182 does not improve AUC. Reverting changes.
Training on augumented user 110313 5/50 current_auc = 0.603125
User 110313 AUC after training: 0.6
User 110313 does not improve AUC. Reverting changes.
Training on augumented user 71889 6/50 current_auc = 0.603125
User 71889 AUC after training: 0.6031249999999999
User 71889 does not improve AUC. Reverting changes.
Training on augumented user 38035 7/50 current_auc = 0.603125
User 38035 AUC after training: 0.603125
User 38035 does not improve AUC. Reverting changes.
Training on augumented user 4224 8/50 current_auc = 0.603125
User 4224 AUC after training: 0.603125
User 4224 does not improve AUC. Reverting changes.
Training on augumented user 62498 9/50 current_auc = 0.603125
User 62498 AUC after training: 0.6000000000000001
User 62498 does not improve AUC. Reverting changes.
Training on augumented user 49638 10/50 current_auc = 0.603125
User 49638 AUC after training: 0.6000000000000001
User 49638 does not improve AUC. Reverting changes.
Training on augumented user 131627 11/50 current_auc = 0.603125
User 131627 AUC after training: 0.6
User 131627 does not improve AUC. Reverting changes.
Training on augumented user 78714 12/50 current_auc = 0.603125
User 78714 AUC after training: 0.603125
User 78714 does not improve AUC. Reverting changes.
Training on augumented user 82926 13/50 current_auc = 0.603125
User 82926 AUC after training: 0.603125
User 82926 does not improve AUC. Reverting changes.
Training on augumented user 82806 14/50 current_auc = 0.603125
User 82806 AUC after training: 0.603125
User 82806 does not improve AUC. Reverting changes.
Training on augumented user 122862 15/50 current_auc = 0.603125
User 122862 AUC after training: 0.609375
User 122862 improves AUC. Keeping the model.
Training on augumented user 137578 16/50 current_auc = 0.609375
User 137578 AUC after training: 0.609375
User 137578 does not improve AUC. Reverting changes.
Training on augumented user 39870 17/50 current_auc = 0.609375
User 39870 AUC after training: 0.603125
User 39870 does not improve AUC. Reverting changes.
Training on augumented user 124276 18/50 current_auc = 0.609375
User 124276 AUC after training: 0.609375
User 124276 does not improve AUC. Reverting changes.
Training on augumented user 80632 19/50 current_auc = 0.609375
User 80632 AUC after training: 0.609375
User 80632 does not improve AUC. Reverting changes.
Training on augumented user 114926 20/50 current_auc = 0.609375
User 114926 AUC after training: 0.60625
User 114926 does not improve AUC. Reverting changes.
Training on augumented user 28757 21/50 current_auc = 0.609375
User 28757 AUC after training: 0.6031249999999999
User 28757 does not improve AUC. Reverting changes.
Training on augumented user 46617 22/50 current_auc = 0.609375
User 46617 AUC after training: 0.609375
User 46617 does not improve AUC. Reverting changes.
Training on augumented user 18959 23/50 current_auc = 0.609375
User 18959 AUC after training: 0.609375
User 18959 does not improve AUC. Reverting changes.
Training on augumented user 89956 24/50 current_auc = 0.609375
User 89956 AUC after training: 0.6031249999999999
User 89956 does not improve AUC. Reverting changes.
Training on augumented user 136643 25/50 current_auc = 0.609375
User 136643 AUC after training: 0.6124999999999999
User 136643 improves AUC. Keeping the model.
Training on augumented user 63894 26/50 current_auc = 0.6124999999999999
User 63894 AUC after training: 0.609375
User 63894 does not improve AUC. Reverting changes.
Training on augumented user 19577 27/50 current_auc = 0.6124999999999999
User 19577 AUC after training: 0.6031249999999999
User 19577 does not improve AUC. Reverting changes.
Training on augumented user 67890 28/50 current_auc = 0.6124999999999999
User 67890 AUC after training: 0.6124999999999999
User 67890 does not improve AUC. Reverting changes.
Training on augumented user 66222 29/50 current_auc = 0.6124999999999999
User 66222 AUC after training: 0.6031249999999999
User 66222 does not improve AUC. Reverting changes.
Training on augumented user 76622 30/50 current_auc = 0.6124999999999999
User 76622 AUC after training: 0.6031249999999999
User 76622 does not improve AUC. Reverting changes.
Training on augumented user 23853 31/50 current_auc = 0.6124999999999999
User 23853 AUC after training: 0.609375
User 23853 does not improve AUC. Reverting changes.
Training on augumented user 72873 32/50 current_auc = 0.6124999999999999
User 72873 AUC after training: 0.6031249999999999
User 72873 does not improve AUC. Reverting changes.
Training on augumented user 32979 33/50 current_auc = 0.6124999999999999
User 32979 AUC after training: 0.609375
User 32979 does not improve AUC. Reverting changes.
Training on augumented user 129353 34/50 current_auc = 0.6124999999999999
User 129353 AUC after training: 0.609375
User 129353 does not improve AUC. Reverting changes.
Training on augumented user 123266 35/50 current_auc = 0.6124999999999999
User 123266 AUC after training: 0.6031249999999999
User 123266 does not improve AUC. Reverting changes.
Training on augumented user 115294 36/50 current_auc = 0.6124999999999999
User 115294 AUC after training: 0.609375
User 115294 does not improve AUC. Reverting changes.
Training on augumented user 73353 37/50 current_auc = 0.6124999999999999
User 73353 AUC after training: 0.6124999999999999
User 73353 does not improve AUC. Reverting changes.
Training on augumented user 122309 38/50 current_auc = 0.6124999999999999
User 122309 AUC after training: 0.60625
User 122309 does not improve AUC. Reverting changes.
Training on augumented user 57317 39/50 current_auc = 0.6124999999999999
User 57317 AUC after training: 0.6093749999999999
User 57317 does not improve AUC. Reverting changes.
Training on augumented user 13292 40/50 current_auc = 0.6124999999999999
User 13292 AUC after training: 0.60625
User 13292 does not improve AUC. Reverting changes.
Training on augumented user 83717 41/50 current_auc = 0.6124999999999999
User 83717 AUC after training: 0.596875
User 83717 does not improve AUC. Reverting changes.
Training on augumented user 18010 42/50 current_auc = 0.6124999999999999
User 18010 AUC after training: 0.6062500000000001
User 18010 does not improve AUC. Reverting changes.
Training on augumented user 74953 43/50 current_auc = 0.6124999999999999
User 74953 AUC after training: 0.6124999999999999
User 74953 does not improve AUC. Reverting changes.
Training on augumented user 27878 44/50 current_auc = 0.6124999999999999
User 27878 AUC after training: 0.6
User 27878 does not improve AUC. Reverting changes.
Training on augumented user 4868 45/50 current_auc = 0.6124999999999999
User 4868 AUC after training: 0.60625
User 4868 does not improve AUC. Reverting changes.
Training on augumented user 109980 46/50 current_auc = 0.6124999999999999
User 109980 AUC after training: 0.6
User 109980 does not improve AUC. Reverting changes.
Training on augumented user 7229 47/50 current_auc = 0.6124999999999999
User 7229 AUC after training: 0.6031249999999999
User 7229 does not improve AUC. Reverting changes.
Training on augumented user 117468 48/50 current_auc = 0.6124999999999999
User 117468 AUC after training: 0.6124999999999999
User 117468 does not improve AUC. Reverting changes.
Training on augumented user 25411 49/50 current_auc = 0.6124999999999999
User 25411 AUC after training: 0.609375
User 25411 does not improve AUC. Reverting changes.
[2024-12-02 19:20:50.918608] start test user 87066 190/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:20:51.818652] start test user 87066 190/568 recall augumented users by random, augumented_users = [13731, 34823, 12475, 90968, 124980, 129566, 99768, 65393, 114009, 135579, 939, 133920, 77523, 6519, 105522, 39432, 122545, 44284, 73088, 17223, 111759, 122210, 79444, 45466, 130855, 1297, 74945, 85537, 93001, 23615, 82830, 90190, 132539, 49625, 86838, 65183, 125704, 73015, 29469, 12832, 134336, 59189, 103727, 433, 17348, 42126, 60267, 40058, 9792, 5333]
[2024-12-02 19:20:51.834226] user = 87066 Cloud 190/568
[2024-12-02 19:20:51.864862] user = 87066 Local 190/568
[2024-12-02 19:20:51.964134] user = 87066 Local+ 190/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:20:55.316440] user = 87066 MPDA- 190/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5691477272727272
Training on augumented user 13731 0/50 current_auc = 0.5691477272727272
User 13731 AUC after training: 0.5692234848484848
User 13731 improves AUC. Keeping the model.
Training on augumented user 34823 1/50 current_auc = 0.5692234848484848
User 34823 AUC after training: 0.5701325757575757
User 34823 improves AUC. Keeping the model.
Training on augumented user 12475 2/50 current_auc = 0.5701325757575757
User 12475 AUC after training: 0.5702083333333333
User 12475 improves AUC. Keeping the model.
Training on augumented user 90968 3/50 current_auc = 0.5702083333333333
User 90968 AUC after training: 0.5701515151515152
User 90968 does not improve AUC. Reverting changes.
Training on augumented user 124980 4/50 current_auc = 0.5702083333333333
User 124980 AUC after training: 0.5704545454545454
User 124980 improves AUC. Keeping the model.
Training on augumented user 129566 5/50 current_auc = 0.5704545454545454
User 129566 AUC after training: 0.5716666666666667
User 129566 improves AUC. Keeping the model.
Training on augumented user 99768 6/50 current_auc = 0.5716666666666667
User 99768 AUC after training: 0.5715151515151515
User 99768 does not improve AUC. Reverting changes.
Training on augumented user 65393 7/50 current_auc = 0.5716666666666667
User 65393 AUC after training: 0.5700378787878788
User 65393 does not improve AUC. Reverting changes.
Training on augumented user 114009 8/50 current_auc = 0.5716666666666667
User 114009 AUC after training: 0.5722916666666666
User 114009 improves AUC. Keeping the model.
Training on augumented user 135579 9/50 current_auc = 0.5722916666666666
User 135579 AUC after training: 0.5723484848484849
User 135579 improves AUC. Keeping the model.
Training on augumented user 939 10/50 current_auc = 0.5723484848484849
User 939 AUC after training: 0.5731439393939394
User 939 improves AUC. Keeping the model.
Training on augumented user 133920 11/50 current_auc = 0.5731439393939394
User 133920 AUC after training: 0.5728977272727274
User 133920 does not improve AUC. Reverting changes.
Training on augumented user 77523 12/50 current_auc = 0.5731439393939394
User 77523 AUC after training: 0.5735984848484847
User 77523 improves AUC. Keeping the model.
Training on augumented user 6519 13/50 current_auc = 0.5735984848484847
User 6519 AUC after training: 0.5729924242424242
User 6519 does not improve AUC. Reverting changes.
Training on augumented user 105522 14/50 current_auc = 0.5735984848484847
User 105522 AUC after training: 0.5736742424242424
User 105522 improves AUC. Keeping the model.
Training on augumented user 39432 15/50 current_auc = 0.5736742424242424
User 39432 AUC after training: 0.5727083333333334
User 39432 does not improve AUC. Reverting changes.
Training on augumented user 122545 16/50 current_auc = 0.5736742424242424
User 122545 AUC after training: 0.5741287878787878
User 122545 improves AUC. Keeping the model.
Training on augumented user 44284 17/50 current_auc = 0.5741287878787878
User 44284 AUC after training: 0.5736742424242425
User 44284 does not improve AUC. Reverting changes.
Training on augumented user 73088 18/50 current_auc = 0.5741287878787878
User 73088 AUC after training: 0.5734469696969697
User 73088 does not improve AUC. Reverting changes.
Training on augumented user 17223 19/50 current_auc = 0.5741287878787878
User 17223 AUC after training: 0.5739015151515151
User 17223 does not improve AUC. Reverting changes.
Training on augumented user 111759 20/50 current_auc = 0.5741287878787878
User 111759 AUC after training: 0.5738636363636364
User 111759 does not improve AUC. Reverting changes.
Training on augumented user 122210 21/50 current_auc = 0.5741287878787878
User 122210 AUC after training: 0.5739772727272727
User 122210 does not improve AUC. Reverting changes.
Training on augumented user 79444 22/50 current_auc = 0.5741287878787878
User 79444 AUC after training: 0.5742803030303031
User 79444 improves AUC. Keeping the model.
Training on augumented user 45466 23/50 current_auc = 0.5742803030303031
User 45466 AUC after training: 0.5742803030303031
User 45466 does not improve AUC. Reverting changes.
Training on augumented user 130855 24/50 current_auc = 0.5742803030303031
User 130855 AUC after training: 0.5741666666666667
User 130855 does not improve AUC. Reverting changes.
Training on augumented user 1297 25/50 current_auc = 0.5742803030303031
User 1297 AUC after training: 0.5746212121212122
User 1297 improves AUC. Keeping the model.
Training on augumented user 74945 26/50 current_auc = 0.5746212121212122
User 74945 AUC after training: 0.5739772727272727
User 74945 does not improve AUC. Reverting changes.
Training on augumented user 85537 27/50 current_auc = 0.5746212121212122
User 85537 AUC after training: 0.5747348484848485
User 85537 improves AUC. Keeping the model.
Training on augumented user 93001 28/50 current_auc = 0.5747348484848485
User 93001 AUC after training: 0.5747727272727272
User 93001 improves AUC. Keeping the model.
Training on augumented user 23615 29/50 current_auc = 0.5747727272727272
User 23615 AUC after training: 0.5746212121212121
User 23615 does not improve AUC. Reverting changes.
Training on augumented user 82830 30/50 current_auc = 0.5747727272727272
User 82830 AUC after training: 0.574469696969697
User 82830 does not improve AUC. Reverting changes.
Training on augumented user 90190 31/50 current_auc = 0.5747727272727272
User 90190 AUC after training: 0.5751136363636364
User 90190 improves AUC. Keeping the model.
Training on augumented user 132539 32/50 current_auc = 0.5751136363636364
User 132539 AUC after training: 0.5745075757575757
User 132539 does not improve AUC. Reverting changes.
Training on augumented user 49625 33/50 current_auc = 0.5751136363636364
User 49625 AUC after training: 0.5753787878787878
User 49625 improves AUC. Keeping the model.
Training on augumented user 86838 34/50 current_auc = 0.5753787878787878
User 86838 AUC after training: 0.5743181818181818
User 86838 does not improve AUC. Reverting changes.
Training on augumented user 65183 35/50 current_auc = 0.5753787878787878
User 65183 AUC after training: 0.5748106060606061
User 65183 does not improve AUC. Reverting changes.
Training on augumented user 125704 36/50 current_auc = 0.5753787878787878
User 125704 AUC after training: 0.5752651515151516
User 125704 does not improve AUC. Reverting changes.
Training on augumented user 73015 37/50 current_auc = 0.5753787878787878
User 73015 AUC after training: 0.5755303030303031
User 73015 improves AUC. Keeping the model.
Training on augumented user 29469 38/50 current_auc = 0.5755303030303031
User 29469 AUC after training: 0.5749621212121213
User 29469 does not improve AUC. Reverting changes.
Training on augumented user 12832 39/50 current_auc = 0.5755303030303031
User 12832 AUC after training: 0.5751136363636363
User 12832 does not improve AUC. Reverting changes.
Training on augumented user 134336 40/50 current_auc = 0.5755303030303031
User 134336 AUC after training: 0.5760984848484849
User 134336 improves AUC. Keeping the model.
Training on augumented user 59189 41/50 current_auc = 0.5760984848484849
User 59189 AUC after training: 0.5760416666666667
User 59189 does not improve AUC. Reverting changes.
Training on augumented user 103727 42/50 current_auc = 0.5760984848484849
User 103727 AUC after training: 0.5755303030303031
User 103727 does not improve AUC. Reverting changes.
Training on augumented user 433 43/50 current_auc = 0.5760984848484849
User 433 AUC after training: 0.575530303030303
User 433 does not improve AUC. Reverting changes.
Training on augumented user 17348 44/50 current_auc = 0.5760984848484849
User 17348 AUC after training: 0.5760606060606059
User 17348 does not improve AUC. Reverting changes.
Training on augumented user 42126 45/50 current_auc = 0.5760984848484849
User 42126 AUC after training: 0.5754545454545454
User 42126 does not improve AUC. Reverting changes.
Training on augumented user 60267 46/50 current_auc = 0.5760984848484849
User 60267 AUC after training: 0.5755113636363637
User 60267 does not improve AUC. Reverting changes.
Training on augumented user 40058 47/50 current_auc = 0.5760984848484849
User 40058 AUC after training: 0.5749621212121212
User 40058 does not improve AUC. Reverting changes.
Training on augumented user 9792 48/50 current_auc = 0.5760984848484849
User 9792 AUC after training: 0.5756628787878788
User 9792 does not improve AUC. Reverting changes.
Training on augumented user 5333 49/50 current_auc = 0.5760984848484849
User 5333 AUC after training: 0.5764204545454545
User 5333 improves AUC. Keeping the model.
[2024-12-02 19:21:21.984284] start test user 87070 191/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:21:22.402794] start test user 87070 191/568 recall augumented users by random, augumented_users = [56873, 3116, 21667, 4976, 34147, 107234, 71174, 131556, 111663, 106806, 44744, 86230, 111303, 103599, 101416, 43102, 52136, 23275, 56032, 111184, 115471, 125797, 136609, 20071, 66048, 31885, 8146, 89607, 136546, 70030, 24216, 75731, 107428, 61982, 100962, 75505, 46699, 102025, 86233, 14227, 40230, 118912, 9983, 125522, 38815, 15344, 53562, 66364, 85673, 31932]
[2024-12-02 19:21:22.417950] user = 87070 Cloud 191/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:21:22.424448] user = 87070 Local 191/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:21:22.471858] user = 87070 Local+ 191/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:21:24.976244] user = 87070 MPDA- 191/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 56873 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56873 AUC after training: 0.5
User 56873 does not improve AUC. Reverting changes.
Training on augumented user 3116 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3116 AUC after training: 0.5
User 3116 does not improve AUC. Reverting changes.
Training on augumented user 21667 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21667 AUC after training: 0.5
User 21667 does not improve AUC. Reverting changes.
Training on augumented user 4976 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4976 AUC after training: 0.5
User 4976 does not improve AUC. Reverting changes.
Training on augumented user 34147 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34147 AUC after training: 0.5
User 34147 does not improve AUC. Reverting changes.
Training on augumented user 107234 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107234 AUC after training: 0.5
User 107234 does not improve AUC. Reverting changes.
Training on augumented user 71174 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71174 AUC after training: 0.5
User 71174 does not improve AUC. Reverting changes.
Training on augumented user 131556 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131556 AUC after training: 0.5
User 131556 does not improve AUC. Reverting changes.
Training on augumented user 111663 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111663 AUC after training: 0.5
User 111663 does not improve AUC. Reverting changes.
Training on augumented user 106806 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106806 AUC after training: 0.5
User 106806 does not improve AUC. Reverting changes.
Training on augumented user 44744 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44744 AUC after training: 0.5
User 44744 does not improve AUC. Reverting changes.
Training on augumented user 86230 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86230 AUC after training: 0.5
User 86230 does not improve AUC. Reverting changes.
Training on augumented user 111303 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111303 AUC after training: 0.5
User 111303 does not improve AUC. Reverting changes.
Training on augumented user 103599 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103599 AUC after training: 0.5
User 103599 does not improve AUC. Reverting changes.
Training on augumented user 101416 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101416 AUC after training: 0.5
User 101416 does not improve AUC. Reverting changes.
Training on augumented user 43102 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43102 AUC after training: 0.5
User 43102 does not improve AUC. Reverting changes.
Training on augumented user 52136 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52136 AUC after training: 0.5
User 52136 does not improve AUC. Reverting changes.
Training on augumented user 23275 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23275 AUC after training: 0.5
User 23275 does not improve AUC. Reverting changes.
Training on augumented user 56032 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56032 AUC after training: 0.5
User 56032 does not improve AUC. Reverting changes.
Training on augumented user 111184 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111184 AUC after training: 0.5
User 111184 does not improve AUC. Reverting changes.
Training on augumented user 115471 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115471 AUC after training: 0.5
User 115471 does not improve AUC. Reverting changes.
Training on augumented user 125797 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125797 AUC after training: 0.5
User 125797 does not improve AUC. Reverting changes.
Training on augumented user 136609 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136609 AUC after training: 0.5
User 136609 does not improve AUC. Reverting changes.
Training on augumented user 20071 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20071 AUC after training: 0.5
User 20071 does not improve AUC. Reverting changes.
Training on augumented user 66048 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66048 AUC after training: 0.5
User 66048 does not improve AUC. Reverting changes.
Training on augumented user 31885 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31885 AUC after training: 0.5
User 31885 does not improve AUC. Reverting changes.
Training on augumented user 8146 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8146 AUC after training: 0.5
User 8146 does not improve AUC. Reverting changes.
Training on augumented user 89607 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89607 AUC after training: 0.5
User 89607 does not improve AUC. Reverting changes.
Training on augumented user 136546 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136546 AUC after training: 0.5
User 136546 does not improve AUC. Reverting changes.
Training on augumented user 70030 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70030 AUC after training: 0.5
User 70030 does not improve AUC. Reverting changes.
Training on augumented user 24216 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24216 AUC after training: 0.5
User 24216 does not improve AUC. Reverting changes.
Training on augumented user 75731 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75731 AUC after training: 0.5
User 75731 does not improve AUC. Reverting changes.
Training on augumented user 107428 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107428 AUC after training: 0.5
User 107428 does not improve AUC. Reverting changes.
Training on augumented user 61982 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61982 AUC after training: 0.5
User 61982 does not improve AUC. Reverting changes.
Training on augumented user 100962 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100962 AUC after training: 0.5
User 100962 does not improve AUC. Reverting changes.
Training on augumented user 75505 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75505 AUC after training: 0.5
User 75505 does not improve AUC. Reverting changes.
Training on augumented user 46699 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46699 AUC after training: 0.5
User 46699 does not improve AUC. Reverting changes.
Training on augumented user 102025 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102025 AUC after training: 0.5
User 102025 does not improve AUC. Reverting changes.
Training on augumented user 86233 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86233 AUC after training: 0.5
User 86233 does not improve AUC. Reverting changes.
Training on augumented user 14227 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14227 AUC after training: 0.5
User 14227 does not improve AUC. Reverting changes.
Training on augumented user 40230 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40230 AUC after training: 0.5
User 40230 does not improve AUC. Reverting changes.
Training on augumented user 118912 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118912 AUC after training: 0.5
User 118912 does not improve AUC. Reverting changes.
Training on augumented user 9983 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9983 AUC after training: 0.5
User 9983 does not improve AUC. Reverting changes.
Training on augumented user 125522 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125522 AUC after training: 0.5
User 125522 does not improve AUC. Reverting changes.
Training on augumented user 38815 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38815 AUC after training: 0.5
User 38815 does not improve AUC. Reverting changes.
Training on augumented user 15344 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15344 AUC after training: 0.5
User 15344 does not improve AUC. Reverting changes.
Training on augumented user 53562 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53562 AUC after training: 0.5
User 53562 does not improve AUC. Reverting changes.
Training on augumented user 66364 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66364 AUC after training: 0.5
User 66364 does not improve AUC. Reverting changes.
Training on augumented user 85673 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85673 AUC after training: 0.5
User 85673 does not improve AUC. Reverting changes.
Training on augumented user 31932 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31932 AUC after training: 0.5
User 31932 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:21:52.984622] start test user 87094 192/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:21:53.433852] start test user 87094 192/568 recall augumented users by random, augumented_users = [133735, 49782, 53465, 9959, 33649, 51915, 85280, 134739, 82834, 74518, 124842, 95731, 4516, 111047, 76597, 50099, 51517, 115620, 106545, 27866, 113349, 53374, 56762, 27957, 111561, 91006, 73595, 98326, 5633, 84708, 128893, 104378, 49533, 113258, 110314, 73600, 68991, 108411, 120064, 80565, 133977, 65244, 87520, 46728, 66541, 122848, 120478, 121677, 53866, 137070]
[2024-12-02 19:21:53.450129] user = 87094 Cloud 192/568
[2024-12-02 19:21:53.471723] user = 87094 Local 192/568
[2024-12-02 19:21:53.710952] user = 87094 Local+ 192/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:21:55.981996] user = 87094 MPDA- 192/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5861244019138756
Training on augumented user 133735 0/50 current_auc = 0.5861244019138756
User 133735 AUC after training: 0.5861244019138756
User 133735 does not improve AUC. Reverting changes.
Training on augumented user 49782 1/50 current_auc = 0.5861244019138756
User 49782 AUC after training: 0.583732057416268
User 49782 does not improve AUC. Reverting changes.
Training on augumented user 53465 2/50 current_auc = 0.5861244019138756
User 53465 AUC after training: 0.5861244019138756
User 53465 does not improve AUC. Reverting changes.
Training on augumented user 9959 3/50 current_auc = 0.5861244019138756
User 9959 AUC after training: 0.5861244019138756
User 9959 does not improve AUC. Reverting changes.
Training on augumented user 33649 4/50 current_auc = 0.5861244019138756
User 33649 AUC after training: 0.583732057416268
User 33649 does not improve AUC. Reverting changes.
Training on augumented user 51915 5/50 current_auc = 0.5861244019138756
User 51915 AUC after training: 0.5861244019138756
User 51915 does not improve AUC. Reverting changes.
Training on augumented user 85280 6/50 current_auc = 0.5861244019138756
User 85280 AUC after training: 0.583732057416268
User 85280 does not improve AUC. Reverting changes.
Training on augumented user 134739 7/50 current_auc = 0.5861244019138756
User 134739 AUC after training: 0.5861244019138756
User 134739 does not improve AUC. Reverting changes.
Training on augumented user 82834 8/50 current_auc = 0.5861244019138756
User 82834 AUC after training: 0.5861244019138756
User 82834 does not improve AUC. Reverting changes.
Training on augumented user 74518 9/50 current_auc = 0.5861244019138756
User 74518 AUC after training: 0.583732057416268
User 74518 does not improve AUC. Reverting changes.
Training on augumented user 124842 10/50 current_auc = 0.5861244019138756
User 124842 AUC after training: 0.5861244019138756
User 124842 does not improve AUC. Reverting changes.
Training on augumented user 95731 11/50 current_auc = 0.5861244019138756
User 95731 AUC after training: 0.5861244019138756
User 95731 does not improve AUC. Reverting changes.
Training on augumented user 4516 12/50 current_auc = 0.5861244019138756
User 4516 AUC after training: 0.5861244019138756
User 4516 does not improve AUC. Reverting changes.
Training on augumented user 111047 13/50 current_auc = 0.5861244019138756
User 111047 AUC after training: 0.5885167464114833
User 111047 improves AUC. Keeping the model.
Training on augumented user 76597 14/50 current_auc = 0.5885167464114833
User 76597 AUC after training: 0.5861244019138756
User 76597 does not improve AUC. Reverting changes.
Training on augumented user 50099 15/50 current_auc = 0.5885167464114833
User 50099 AUC after training: 0.5861244019138756
User 50099 does not improve AUC. Reverting changes.
Training on augumented user 51517 16/50 current_auc = 0.5885167464114833
User 51517 AUC after training: 0.5885167464114833
User 51517 does not improve AUC. Reverting changes.
Training on augumented user 115620 17/50 current_auc = 0.5885167464114833
User 115620 AUC after training: 0.5861244019138756
User 115620 does not improve AUC. Reverting changes.
Training on augumented user 106545 18/50 current_auc = 0.5885167464114833
User 106545 AUC after training: 0.5861244019138756
User 106545 does not improve AUC. Reverting changes.
Training on augumented user 27866 19/50 current_auc = 0.5885167464114833
User 27866 AUC after training: 0.5861244019138756
User 27866 does not improve AUC. Reverting changes.
Training on augumented user 113349 20/50 current_auc = 0.5885167464114833
User 113349 AUC after training: 0.5861244019138756
User 113349 does not improve AUC. Reverting changes.
Training on augumented user 53374 21/50 current_auc = 0.5885167464114833
User 53374 AUC after training: 0.5861244019138756
User 53374 does not improve AUC. Reverting changes.
Training on augumented user 56762 22/50 current_auc = 0.5885167464114833
User 56762 AUC after training: 0.5861244019138756
User 56762 does not improve AUC. Reverting changes.
Training on augumented user 27957 23/50 current_auc = 0.5885167464114833
User 27957 AUC after training: 0.5861244019138756
User 27957 does not improve AUC. Reverting changes.
Training on augumented user 111561 24/50 current_auc = 0.5885167464114833
User 111561 AUC after training: 0.5861244019138756
User 111561 does not improve AUC. Reverting changes.
Training on augumented user 91006 25/50 current_auc = 0.5885167464114833
User 91006 AUC after training: 0.5861244019138756
User 91006 does not improve AUC. Reverting changes.
Training on augumented user 73595 26/50 current_auc = 0.5885167464114833
User 73595 AUC after training: 0.5885167464114833
User 73595 does not improve AUC. Reverting changes.
Training on augumented user 98326 27/50 current_auc = 0.5885167464114833
User 98326 AUC after training: 0.583732057416268
User 98326 does not improve AUC. Reverting changes.
Training on augumented user 5633 28/50 current_auc = 0.5885167464114833
User 5633 AUC after training: 0.5861244019138756
User 5633 does not improve AUC. Reverting changes.
Training on augumented user 84708 29/50 current_auc = 0.5885167464114833
User 84708 AUC after training: 0.5885167464114833
User 84708 does not improve AUC. Reverting changes.
Training on augumented user 128893 30/50 current_auc = 0.5885167464114833
User 128893 AUC after training: 0.5933014354066986
User 128893 improves AUC. Keeping the model.
Training on augumented user 104378 31/50 current_auc = 0.5933014354066986
User 104378 AUC after training: 0.5909090909090909
User 104378 does not improve AUC. Reverting changes.
Training on augumented user 49533 32/50 current_auc = 0.5933014354066986
User 49533 AUC after training: 0.5909090909090909
User 49533 does not improve AUC. Reverting changes.
Training on augumented user 113258 33/50 current_auc = 0.5933014354066986
User 113258 AUC after training: 0.5933014354066986
User 113258 does not improve AUC. Reverting changes.
Training on augumented user 110314 34/50 current_auc = 0.5933014354066986
User 110314 AUC after training: 0.5933014354066986
User 110314 does not improve AUC. Reverting changes.
Training on augumented user 73600 35/50 current_auc = 0.5933014354066986
User 73600 AUC after training: 0.5933014354066986
User 73600 does not improve AUC. Reverting changes.
Training on augumented user 68991 36/50 current_auc = 0.5933014354066986
User 68991 AUC after training: 0.5933014354066986
User 68991 does not improve AUC. Reverting changes.
Training on augumented user 108411 37/50 current_auc = 0.5933014354066986
User 108411 AUC after training: 0.5909090909090909
User 108411 does not improve AUC. Reverting changes.
Training on augumented user 120064 38/50 current_auc = 0.5933014354066986
User 120064 AUC after training: 0.5933014354066986
User 120064 does not improve AUC. Reverting changes.
Training on augumented user 80565 39/50 current_auc = 0.5933014354066986
User 80565 AUC after training: 0.5909090909090909
User 80565 does not improve AUC. Reverting changes.
Training on augumented user 133977 40/50 current_auc = 0.5933014354066986
User 133977 AUC after training: 0.5933014354066986
User 133977 does not improve AUC. Reverting changes.
Training on augumented user 65244 41/50 current_auc = 0.5933014354066986
User 65244 AUC after training: 0.5885167464114833
User 65244 does not improve AUC. Reverting changes.
Training on augumented user 87520 42/50 current_auc = 0.5933014354066986
User 87520 AUC after training: 0.5861244019138756
User 87520 does not improve AUC. Reverting changes.
Training on augumented user 46728 43/50 current_auc = 0.5933014354066986
User 46728 AUC after training: 0.5909090909090909
User 46728 does not improve AUC. Reverting changes.
Training on augumented user 66541 44/50 current_auc = 0.5933014354066986
User 66541 AUC after training: 0.5933014354066986
User 66541 does not improve AUC. Reverting changes.
Training on augumented user 122848 45/50 current_auc = 0.5933014354066986
User 122848 AUC after training: 0.5909090909090909
User 122848 does not improve AUC. Reverting changes.
Training on augumented user 120478 46/50 current_auc = 0.5933014354066986
User 120478 AUC after training: 0.5933014354066986
User 120478 does not improve AUC. Reverting changes.
Training on augumented user 121677 47/50 current_auc = 0.5933014354066986
User 121677 AUC after training: 0.5885167464114833
User 121677 does not improve AUC. Reverting changes.
Training on augumented user 53866 48/50 current_auc = 0.5933014354066986
User 53866 AUC after training: 0.5909090909090909
User 53866 does not improve AUC. Reverting changes.
Training on augumented user 137070 49/50 current_auc = 0.5933014354066986
User 137070 AUC after training: 0.5909090909090909
User 137070 does not improve AUC. Reverting changes.
[2024-12-02 19:22:24.175858] start test user 87135 193/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:22:24.781488] start test user 87135 193/568 recall augumented users by random, augumented_users = [103753, 135161, 137730, 18537, 110812, 106096, 50935, 84985, 41620, 19053, 109209, 24707, 97457, 105773, 131807, 17619, 135149, 118079, 17945, 133083, 38374, 121766, 122627, 112591, 128103, 113571, 97859, 10900, 109873, 1534, 129757, 138015, 15003, 134900, 2359, 34214, 20715, 57687, 19852, 107299, 46114, 126187, 55893, 79462, 17020, 120042, 102464, 36396, 50912, 12770]
[2024-12-02 19:22:24.798928] user = 87135 Cloud 193/568
[2024-12-02 19:22:24.859284] user = 87135 Local 193/568
[2024-12-02 19:22:25.158206] user = 87135 Local+ 193/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:22:28.179249] user = 87135 MPDA- 193/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6559607680618871
Training on augumented user 103753 0/50 current_auc = 0.6559607680618871
User 103753 AUC after training: 0.6560989086890454
User 103753 improves AUC. Keeping the model.
Training on augumented user 135161 1/50 current_auc = 0.6560989086890454
User 135161 AUC after training: 0.6560643735322558
User 135161 does not improve AUC. Reverting changes.
Training on augumented user 137730 2/50 current_auc = 0.6560989086890454
User 137730 AUC after training: 0.6566169360408897
User 137730 improves AUC. Keeping the model.
Training on augumented user 18537 3/50 current_auc = 0.6566169360408897
User 18537 AUC after training: 0.656409725100152
User 18537 does not improve AUC. Reverting changes.
Training on augumented user 110812 4/50 current_auc = 0.6566169360408897
User 110812 AUC after training: 0.6565478657273104
User 110812 does not improve AUC. Reverting changes.
Training on augumented user 106096 5/50 current_auc = 0.6566169360408897
User 106096 AUC after training: 0.6543030805359857
User 106096 does not improve AUC. Reverting changes.
Training on augumented user 50935 6/50 current_auc = 0.6566169360408897
User 50935 AUC after training: 0.6564787954137312
User 50935 does not improve AUC. Reverting changes.
Training on augumented user 84985 7/50 current_auc = 0.6566169360408897
User 84985 AUC after training: 0.6564097251001519
User 84985 does not improve AUC. Reverting changes.
Training on augumented user 41620 8/50 current_auc = 0.6566169360408897
User 41620 AUC after training: 0.656306119629783
User 41620 does not improve AUC. Reverting changes.
Training on augumented user 19053 9/50 current_auc = 0.6566169360408897
User 19053 AUC after training: 0.6561679790026247
User 19053 does not improve AUC. Reverting changes.
Training on augumented user 109209 10/50 current_auc = 0.6566169360408897
User 109209 AUC after training: 0.6563751899433624
User 109209 does not improve AUC. Reverting changes.
Training on augumented user 24707 11/50 current_auc = 0.6566169360408897
User 24707 AUC after training: 0.6564097251001519
User 24707 does not improve AUC. Reverting changes.
Training on augumented user 97457 12/50 current_auc = 0.6566169360408897
User 97457 AUC after training: 0.6567550766680481
User 97457 improves AUC. Keeping the model.
Training on augumented user 105773 13/50 current_auc = 0.6567550766680481
User 105773 AUC after training: 0.6555808813372013
User 105773 does not improve AUC. Reverting changes.
Training on augumented user 131807 14/50 current_auc = 0.6567550766680481
User 131807 AUC after training: 0.6567205415112585
User 131807 does not improve AUC. Reverting changes.
Training on augumented user 17619 15/50 current_auc = 0.6567550766680481
User 17619 AUC after training: 0.6565478657273104
User 17619 does not improve AUC. Reverting changes.
Training on augumented user 135149 16/50 current_auc = 0.6567550766680481
User 135149 AUC after training: 0.6563406547865728
User 135149 does not improve AUC. Reverting changes.
Training on augumented user 118079 17/50 current_auc = 0.6567550766680481
User 118079 AUC after training: 0.6562370493162039
User 118079 does not improve AUC. Reverting changes.
Training on augumented user 17945 18/50 current_auc = 0.6567550766680481
User 17945 AUC after training: 0.6552700649260947
User 17945 does not improve AUC. Reverting changes.
Training on augumented user 133083 19/50 current_auc = 0.6567550766680481
User 133083 AUC after training: 0.6565478657273105
User 133083 does not improve AUC. Reverting changes.
Training on augumented user 38374 20/50 current_auc = 0.6567550766680481
User 38374 AUC after training: 0.6563751899433623
User 38374 does not improve AUC. Reverting changes.
Training on augumented user 121766 21/50 current_auc = 0.6567550766680481
User 121766 AUC after training: 0.6564442602569415
User 121766 does not improve AUC. Reverting changes.
Training on augumented user 122627 22/50 current_auc = 0.6567550766680481
User 122627 AUC after training: 0.6566860063544688
User 122627 does not improve AUC. Reverting changes.
Training on augumented user 112591 23/50 current_auc = 0.6567550766680481
User 112591 AUC after training: 0.6565478657273104
User 112591 does not improve AUC. Reverting changes.
Training on augumented user 128103 24/50 current_auc = 0.6567550766680481
User 128103 AUC after training: 0.6565824008841
User 128103 does not improve AUC. Reverting changes.
Training on augumented user 113571 25/50 current_auc = 0.6567550766680481
User 113571 AUC after training: 0.6560643735322559
User 113571 does not improve AUC. Reverting changes.
Training on augumented user 97859 26/50 current_auc = 0.6567550766680481
User 97859 AUC after training: 0.6566169360408898
User 97859 does not improve AUC. Reverting changes.
Training on augumented user 10900 27/50 current_auc = 0.6567550766680481
User 10900 AUC after training: 0.656237049316204
User 10900 does not improve AUC. Reverting changes.
Training on augumented user 109873 28/50 current_auc = 0.6567550766680481
User 109873 AUC after training: 0.6566860063544688
User 109873 does not improve AUC. Reverting changes.
Training on augumented user 1534 29/50 current_auc = 0.6567550766680481
User 1534 AUC after training: 0.6564442602569416
User 1534 does not improve AUC. Reverting changes.
Training on augumented user 129757 30/50 current_auc = 0.6567550766680481
User 129757 AUC after training: 0.6563406547865728
User 129757 does not improve AUC. Reverting changes.
Training on augumented user 138015 31/50 current_auc = 0.6567550766680481
User 138015 AUC after training: 0.6568586821384168
User 138015 improves AUC. Keeping the model.
Training on augumented user 15003 32/50 current_auc = 0.6568586821384168
User 15003 AUC after training: 0.6567205415112585
User 15003 does not improve AUC. Reverting changes.
Training on augumented user 134900 33/50 current_auc = 0.6568586821384168
User 134900 AUC after training: 0.6568241469816272
User 134900 does not improve AUC. Reverting changes.
Training on augumented user 2359 34/50 current_auc = 0.6568586821384168
User 2359 AUC after training: 0.6567896118248377
User 2359 does not improve AUC. Reverting changes.
Training on augumented user 34214 35/50 current_auc = 0.6568586821384168
User 34214 AUC after training: 0.6576357231661832
User 34214 improves AUC. Keeping the model.
Training on augumented user 20715 36/50 current_auc = 0.6576357231661832
User 20715 AUC after training: 0.6565824008841001
User 20715 does not improve AUC. Reverting changes.
Training on augumented user 57687 37/50 current_auc = 0.6576357231661832
User 57687 AUC after training: 0.6572213012847079
User 57687 does not improve AUC. Reverting changes.
Training on augumented user 19852 38/50 current_auc = 0.6576357231661832
User 19852 AUC after training: 0.6577047934797624
User 19852 improves AUC. Keeping the model.
Training on augumented user 107299 39/50 current_auc = 0.6577047934797624
User 107299 AUC after training: 0.6568414145600221
User 107299 does not improve AUC. Reverting changes.
Training on augumented user 46114 40/50 current_auc = 0.6577047934797624
User 46114 AUC after training: 0.6575321176958143
User 46114 does not improve AUC. Reverting changes.
Training on augumented user 126187 41/50 current_auc = 0.6577047934797624
User 126187 AUC after training: 0.6579120044205
User 126187 improves AUC. Keeping the model.
Training on augumented user 55893 42/50 current_auc = 0.6579120044205
User 55893 AUC after training: 0.6574803149606299
User 55893 does not improve AUC. Reverting changes.
Training on augumented user 79462 43/50 current_auc = 0.6579120044205
User 79462 AUC after training: 0.6577047934797623
User 79462 does not improve AUC. Reverting changes.
Training on augumented user 17020 44/50 current_auc = 0.6579120044205
User 17020 AUC after training: 0.657739328636552
User 17020 does not improve AUC. Reverting changes.
Training on augumented user 120042 45/50 current_auc = 0.6579120044205
User 120042 AUC after training: 0.657290371598287
User 120042 does not improve AUC. Reverting changes.
Training on augumented user 102464 46/50 current_auc = 0.6579120044205
User 102464 AUC after training: 0.6578774692637105
User 102464 does not improve AUC. Reverting changes.
Training on augumented user 36396 47/50 current_auc = 0.6579120044205
User 36396 AUC after training: 0.6579810747340793
User 36396 improves AUC. Keeping the model.
Training on augumented user 50912 48/50 current_auc = 0.6579810747340793
User 50912 AUC after training: 0.6572040337063131
User 50912 does not improve AUC. Reverting changes.
Training on augumented user 12770 49/50 current_auc = 0.6579810747340793
User 12770 AUC after training: 0.6570140903439702
User 12770 does not improve AUC. Reverting changes.
[2024-12-02 19:23:00.081604] start test user 87163 194/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:23:00.531658] start test user 87163 194/568 recall augumented users by random, augumented_users = [109937, 28132, 68061, 120008, 119235, 87873, 67941, 11372, 90082, 131149, 116238, 35712, 51466, 138464, 58281, 42331, 100295, 57704, 60730, 113596, 16550, 68128, 23396, 28821, 59070, 32905, 108524, 131591, 64882, 128924, 28931, 51987, 66404, 51148, 93844, 109142, 102882, 79754, 47707, 97730, 125040, 31382, 69729, 66550, 129562, 102770, 78660, 38137, 77749, 120005]
[2024-12-02 19:23:00.546814] user = 87163 Cloud 194/568
[2024-12-02 19:23:00.567853] user = 87163 Local 194/568
[2024-12-02 19:23:00.631868] user = 87163 Local+ 194/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:23:02.032599] user = 87163 MPDA- 194/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6176470588235294
Training on augumented user 109937 0/50 current_auc = 0.6176470588235294
User 109937 AUC after training: 0.6197478991596639
User 109937 improves AUC. Keeping the model.
Training on augumented user 28132 1/50 current_auc = 0.6197478991596639
User 28132 AUC after training: 0.6176470588235294
User 28132 does not improve AUC. Reverting changes.
Training on augumented user 68061 2/50 current_auc = 0.6197478991596639
User 68061 AUC after training: 0.6184873949579832
User 68061 does not improve AUC. Reverting changes.
Training on augumented user 120008 3/50 current_auc = 0.6197478991596639
User 120008 AUC after training: 0.6172268907563025
User 120008 does not improve AUC. Reverting changes.
Training on augumented user 119235 4/50 current_auc = 0.6197478991596639
User 119235 AUC after training: 0.6168067226890757
User 119235 does not improve AUC. Reverting changes.
Training on augumented user 87873 5/50 current_auc = 0.6197478991596639
User 87873 AUC after training: 0.6205882352941177
User 87873 improves AUC. Keeping the model.
Training on augumented user 67941 6/50 current_auc = 0.6205882352941177
User 67941 AUC after training: 0.6205882352941177
User 67941 does not improve AUC. Reverting changes.
Training on augumented user 11372 7/50 current_auc = 0.6205882352941177
User 11372 AUC after training: 0.6210084033613446
User 11372 improves AUC. Keeping the model.
Training on augumented user 90082 8/50 current_auc = 0.6210084033613446
User 90082 AUC after training: 0.6197478991596639
User 90082 does not improve AUC. Reverting changes.
Training on augumented user 131149 9/50 current_auc = 0.6210084033613446
User 131149 AUC after training: 0.6210084033613446
User 131149 does not improve AUC. Reverting changes.
Training on augumented user 116238 10/50 current_auc = 0.6210084033613446
User 116238 AUC after training: 0.6163865546218488
User 116238 does not improve AUC. Reverting changes.
Training on augumented user 35712 11/50 current_auc = 0.6210084033613446
User 35712 AUC after training: 0.6197478991596639
User 35712 does not improve AUC. Reverting changes.
Training on augumented user 51466 12/50 current_auc = 0.6210084033613446
User 51466 AUC after training: 0.6184873949579832
User 51466 does not improve AUC. Reverting changes.
Training on augumented user 138464 13/50 current_auc = 0.6210084033613446
User 138464 AUC after training: 0.619327731092437
User 138464 does not improve AUC. Reverting changes.
Training on augumented user 58281 14/50 current_auc = 0.6210084033613446
User 58281 AUC after training: 0.619327731092437
User 58281 does not improve AUC. Reverting changes.
Training on augumented user 42331 15/50 current_auc = 0.6210084033613446
User 42331 AUC after training: 0.6197478991596639
User 42331 does not improve AUC. Reverting changes.
Training on augumented user 100295 16/50 current_auc = 0.6210084033613446
User 100295 AUC after training: 0.6201680672268908
User 100295 does not improve AUC. Reverting changes.
Training on augumented user 57704 17/50 current_auc = 0.6210084033613446
User 57704 AUC after training: 0.6197478991596639
User 57704 does not improve AUC. Reverting changes.
Training on augumented user 60730 18/50 current_auc = 0.6210084033613446
User 60730 AUC after training: 0.6197478991596639
User 60730 does not improve AUC. Reverting changes.
Training on augumented user 113596 19/50 current_auc = 0.6210084033613446
User 113596 AUC after training: 0.6214285714285714
User 113596 improves AUC. Keeping the model.
Training on augumented user 16550 20/50 current_auc = 0.6214285714285714
User 16550 AUC after training: 0.6197478991596639
User 16550 does not improve AUC. Reverting changes.
Training on augumented user 68128 21/50 current_auc = 0.6214285714285714
User 68128 AUC after training: 0.6201680672268908
User 68128 does not improve AUC. Reverting changes.
Training on augumented user 23396 22/50 current_auc = 0.6214285714285714
User 23396 AUC after training: 0.6210084033613446
User 23396 does not improve AUC. Reverting changes.
Training on augumented user 28821 23/50 current_auc = 0.6214285714285714
User 28821 AUC after training: 0.6205882352941177
User 28821 does not improve AUC. Reverting changes.
Training on augumented user 59070 24/50 current_auc = 0.6214285714285714
User 59070 AUC after training: 0.6205882352941177
User 59070 does not improve AUC. Reverting changes.
Training on augumented user 32905 25/50 current_auc = 0.6214285714285714
User 32905 AUC after training: 0.6184873949579832
User 32905 does not improve AUC. Reverting changes.
Training on augumented user 108524 26/50 current_auc = 0.6214285714285714
User 108524 AUC after training: 0.6239495798319328
User 108524 improves AUC. Keeping the model.
Training on augumented user 131591 27/50 current_auc = 0.6239495798319328
User 131591 AUC after training: 0.6226890756302521
User 131591 does not improve AUC. Reverting changes.
Training on augumented user 64882 28/50 current_auc = 0.6239495798319328
User 64882 AUC after training: 0.6214285714285714
User 64882 does not improve AUC. Reverting changes.
Training on augumented user 128924 29/50 current_auc = 0.6239495798319328
User 128924 AUC after training: 0.6231092436974789
User 128924 does not improve AUC. Reverting changes.
Training on augumented user 28931 30/50 current_auc = 0.6239495798319328
User 28931 AUC after training: 0.6235294117647059
User 28931 does not improve AUC. Reverting changes.
Training on augumented user 51987 31/50 current_auc = 0.6239495798319328
User 51987 AUC after training: 0.6243697478991597
User 51987 improves AUC. Keeping the model.
Training on augumented user 66404 32/50 current_auc = 0.6243697478991597
User 66404 AUC after training: 0.6239495798319328
User 66404 does not improve AUC. Reverting changes.
Training on augumented user 51148 33/50 current_auc = 0.6243697478991597
User 51148 AUC after training: 0.6247899159663866
User 51148 improves AUC. Keeping the model.
Training on augumented user 93844 34/50 current_auc = 0.6247899159663866
User 93844 AUC after training: 0.6243697478991597
User 93844 does not improve AUC. Reverting changes.
Training on augumented user 109142 35/50 current_auc = 0.6247899159663866
User 109142 AUC after training: 0.6239495798319328
User 109142 does not improve AUC. Reverting changes.
Training on augumented user 102882 36/50 current_auc = 0.6247899159663866
User 102882 AUC after training: 0.6239495798319328
User 102882 does not improve AUC. Reverting changes.
Training on augumented user 79754 37/50 current_auc = 0.6247899159663866
User 79754 AUC after training: 0.6239495798319328
User 79754 does not improve AUC. Reverting changes.
Training on augumented user 47707 38/50 current_auc = 0.6247899159663866
User 47707 AUC after training: 0.6239495798319328
User 47707 does not improve AUC. Reverting changes.
Training on augumented user 97730 39/50 current_auc = 0.6247899159663866
User 97730 AUC after training: 0.6214285714285714
User 97730 does not improve AUC. Reverting changes.
Training on augumented user 125040 40/50 current_auc = 0.6247899159663866
User 125040 AUC after training: 0.6243697478991597
User 125040 does not improve AUC. Reverting changes.
Training on augumented user 31382 41/50 current_auc = 0.6247899159663866
User 31382 AUC after training: 0.6235294117647059
User 31382 does not improve AUC. Reverting changes.
Training on augumented user 69729 42/50 current_auc = 0.6247899159663866
User 69729 AUC after training: 0.6235294117647059
User 69729 does not improve AUC. Reverting changes.
Training on augumented user 66550 43/50 current_auc = 0.6247899159663866
User 66550 AUC after training: 0.6226890756302521
User 66550 does not improve AUC. Reverting changes.
Training on augumented user 129562 44/50 current_auc = 0.6247899159663866
User 129562 AUC after training: 0.6247899159663866
User 129562 does not improve AUC. Reverting changes.
Training on augumented user 102770 45/50 current_auc = 0.6247899159663866
User 102770 AUC after training: 0.6256302521008403
User 102770 improves AUC. Keeping the model.
Training on augumented user 78660 46/50 current_auc = 0.6256302521008403
User 78660 AUC after training: 0.6235294117647059
User 78660 does not improve AUC. Reverting changes.
Training on augumented user 38137 47/50 current_auc = 0.6256302521008403
User 38137 AUC after training: 0.6252100840336134
User 38137 does not improve AUC. Reverting changes.
Training on augumented user 77749 48/50 current_auc = 0.6256302521008403
User 77749 AUC after training: 0.623109243697479
User 77749 does not improve AUC. Reverting changes.
Training on augumented user 120005 49/50 current_auc = 0.6256302521008403
User 120005 AUC after training: 0.623109243697479
User 120005 does not improve AUC. Reverting changes.
[2024-12-02 19:23:29.244464] start test user 87267 195/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:23:29.671682] start test user 87267 195/568 recall augumented users by random, augumented_users = [95146, 2732, 121975, 99192, 101514, 112202, 65352, 108976, 79128, 58757, 108956, 81652, 98074, 91162, 68600, 68800, 97840, 10612, 86901, 37167, 105433, 26012, 111313, 91232, 49103, 84735, 102343, 83989, 135883, 18035, 119843, 33934, 49565, 72339, 54483, 11888, 40678, 48303, 33024, 71424, 92898, 9387, 52424, 25078, 28619, 115788, 98157, 48576, 76772, 55211]
[2024-12-02 19:23:29.687302] user = 87267 Cloud 195/568
[2024-12-02 19:23:29.718077] user = 87267 Local 195/568
[2024-12-02 19:23:29.771299] user = 87267 Local+ 195/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:23:32.390861] user = 87267 MPDA- 195/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5966285162713735
Training on augumented user 95146 0/50 current_auc = 0.5966285162713735
User 95146 AUC after training: 0.5968698290126861
User 95146 improves AUC. Keeping the model.
Training on augumented user 2732 1/50 current_auc = 0.5968698290126861
User 2732 AUC after training: 0.5964906232763375
User 2732 does not improve AUC. Reverting changes.
Training on augumented user 121975 2/50 current_auc = 0.5968698290126861
User 121975 AUC after training: 0.597972972972973
User 121975 improves AUC. Keeping the model.
Training on augumented user 99192 3/50 current_auc = 0.597972972972973
User 99192 AUC after training: 0.5980763927192498
User 99192 improves AUC. Keeping the model.
Training on augumented user 101514 4/50 current_auc = 0.5980763927192498
User 101514 AUC after training: 0.5990416436845009
User 101514 improves AUC. Keeping the model.
Training on augumented user 112202 5/50 current_auc = 0.5990416436845009
User 112202 AUC after training: 0.5986969111969112
User 112202 does not improve AUC. Reverting changes.
Training on augumented user 65352 6/50 current_auc = 0.5990416436845009
User 65352 AUC after training: 0.5976282404853834
User 65352 does not improve AUC. Reverting changes.
Training on augumented user 108976 7/50 current_auc = 0.5990416436845009
User 108976 AUC after training: 0.5976282404853833
User 108976 does not improve AUC. Reverting changes.
Training on augumented user 79128 8/50 current_auc = 0.5990416436845009
User 79128 AUC after training: 0.6002137341423056
User 79128 improves AUC. Keeping the model.
Training on augumented user 58757 9/50 current_auc = 0.6002137341423056
User 58757 AUC after training: 0.5984900717043574
User 58757 does not improve AUC. Reverting changes.
Training on augumented user 108956 10/50 current_auc = 0.6002137341423056
User 108956 AUC after training: 0.6001447876447876
User 108956 does not improve AUC. Reverting changes.
Training on augumented user 81652 11/50 current_auc = 0.6002137341423056
User 81652 AUC after training: 0.5985245449531164
User 81652 does not improve AUC. Reverting changes.
Training on augumented user 98074 12/50 current_auc = 0.6002137341423056
User 98074 AUC after training: 0.598834804191947
User 98074 does not improve AUC. Reverting changes.
Training on augumented user 91162 13/50 current_auc = 0.6002137341423056
User 91162 AUC after training: 0.6001447876447876
User 91162 does not improve AUC. Reverting changes.
Training on augumented user 68600 14/50 current_auc = 0.6002137341423056
User 68600 AUC after training: 0.6001447876447876
User 68600 does not improve AUC. Reverting changes.
Training on augumented user 68800 15/50 current_auc = 0.6002137341423056
User 68800 AUC after training: 0.6003171538885825
User 68800 improves AUC. Keeping the model.
Training on augumented user 97840 16/50 current_auc = 0.6003171538885825
User 97840 AUC after training: 0.6006618863761721
User 97840 improves AUC. Keeping the model.
Training on augumented user 10612 17/50 current_auc = 0.6006618863761721
User 10612 AUC after training: 0.6010755653612796
User 10612 improves AUC. Keeping the model.
Training on augumented user 86901 18/50 current_auc = 0.6010755653612796
User 86901 AUC after training: 0.6011100386100385
User 86901 improves AUC. Keeping the model.
Training on augumented user 37167 19/50 current_auc = 0.6011100386100385
User 37167 AUC after training: 0.6012824048538334
User 37167 improves AUC. Keeping the model.
Training on augumented user 105433 20/50 current_auc = 0.6012824048538334
User 105433 AUC after training: 0.6018684500827358
User 105433 improves AUC. Keeping the model.
Training on augumented user 26012 21/50 current_auc = 0.6018684500827358
User 26012 AUC after training: 0.6000068946497518
User 26012 does not improve AUC. Reverting changes.
Training on augumented user 111313 22/50 current_auc = 0.6018684500827358
User 111313 AUC after training: 0.6013858246001104
User 111313 does not improve AUC. Reverting changes.
Training on augumented user 91232 23/50 current_auc = 0.6018684500827358
User 91232 AUC after training: 0.6015926640926641
User 91232 does not improve AUC. Reverting changes.
Training on augumented user 49103 24/50 current_auc = 0.6018684500827358
User 49103 AUC after training: 0.6022821290678434
User 49103 improves AUC. Keeping the model.
Training on augumented user 84735 25/50 current_auc = 0.6022821290678434
User 84735 AUC after training: 0.6008687258687259
User 84735 does not improve AUC. Reverting changes.
Training on augumented user 102343 26/50 current_auc = 0.6022821290678434
User 102343 AUC after training: 0.6020752895752896
User 102343 does not improve AUC. Reverting changes.
Training on augumented user 83989 27/50 current_auc = 0.6022821290678434
User 83989 AUC after training: 0.6016616105901821
User 83989 does not improve AUC. Reverting changes.
Training on augumented user 135883 28/50 current_auc = 0.6022821290678434
User 135883 AUC after training: 0.6029715940430226
User 135883 improves AUC. Keeping the model.
Training on augumented user 18035 29/50 current_auc = 0.6029715940430226
User 18035 AUC after training: 0.6021787093215665
User 18035 does not improve AUC. Reverting changes.
Training on augumented user 119843 30/50 current_auc = 0.6029715940430226
User 119843 AUC after training: 0.6019373965802537
User 119843 does not improve AUC. Reverting changes.
Training on augumented user 33934 31/50 current_auc = 0.6029715940430226
User 33934 AUC after training: 0.6031784335355763
User 33934 improves AUC. Keeping the model.
Training on augumented user 49565 32/50 current_auc = 0.6031784335355763
User 49565 AUC after training: 0.603626585769443
User 49565 improves AUC. Keeping the model.
Training on augumented user 72339 33/50 current_auc = 0.603626585769443
User 72339 AUC after training: 0.603626585769443
User 72339 does not improve AUC. Reverting changes.
Training on augumented user 54483 34/50 current_auc = 0.603626585769443
User 54483 AUC after training: 0.6032129067843354
User 54483 does not improve AUC. Reverting changes.
Training on augumented user 11888 35/50 current_auc = 0.603626585769443
User 11888 AUC after training: 0.603488692774407
User 11888 does not improve AUC. Reverting changes.
Training on augumented user 40678 36/50 current_auc = 0.603626585769443
User 40678 AUC after training: 0.6030405405405405
User 40678 does not improve AUC. Reverting changes.
Training on augumented user 48303 37/50 current_auc = 0.603626585769443
User 48303 AUC after training: 0.6032129067843354
User 48303 does not improve AUC. Reverting changes.
Training on augumented user 33024 38/50 current_auc = 0.603626585769443
User 33024 AUC after training: 0.6021097628240486
User 33024 does not improve AUC. Reverting changes.
Training on augumented user 71424 39/50 current_auc = 0.603626585769443
User 71424 AUC after training: 0.6031094870380584
User 71424 does not improve AUC. Reverting changes.
Training on augumented user 92898 40/50 current_auc = 0.603626585769443
User 92898 AUC after training: 0.6032818532818532
User 92898 does not improve AUC. Reverting changes.
Training on augumented user 9387 41/50 current_auc = 0.603626585769443
User 9387 AUC after training: 0.6038334252619967
User 9387 improves AUC. Keeping the model.
Training on augumented user 52424 42/50 current_auc = 0.6038334252619967
User 52424 AUC after training: 0.6039368450082736
User 52424 improves AUC. Keeping the model.
Training on augumented user 25078 43/50 current_auc = 0.6039368450082736
User 25078 AUC after training: 0.6041781577495864
User 25078 improves AUC. Keeping the model.
Training on augumented user 28619 44/50 current_auc = 0.6041781577495864
User 28619 AUC after training: 0.6030405405405406
User 28619 does not improve AUC. Reverting changes.
Training on augumented user 115788 45/50 current_auc = 0.6041781577495864
User 115788 AUC after training: 0.6035231660231659
User 115788 does not improve AUC. Reverting changes.
Training on augumented user 98157 46/50 current_auc = 0.6041781577495864
User 98157 AUC after training: 0.6034542195256482
User 98157 does not improve AUC. Reverting changes.
Training on augumented user 48576 47/50 current_auc = 0.6041781577495864
User 48576 AUC after training: 0.6039023717595147
User 48576 does not improve AUC. Reverting changes.
Training on augumented user 76772 48/50 current_auc = 0.6041781577495864
User 76772 AUC after training: 0.6037989520132377
User 76772 does not improve AUC. Reverting changes.
Training on augumented user 55211 49/50 current_auc = 0.6041781577495864
User 55211 AUC after training: 0.6041436845008274
User 55211 does not improve AUC. Reverting changes.
[2024-12-02 19:24:02.097192] start test user 87271 196/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:24:02.703070] start test user 87271 196/568 recall augumented users by random, augumented_users = [19788, 55837, 39281, 102908, 39924, 102020, 126217, 85713, 79907, 24645, 97769, 30801, 32574, 8742, 9894, 105774, 89854, 127918, 75069, 6349, 95736, 135122, 22893, 16421, 86806, 9198, 92832, 16452, 23637, 126337, 127704, 14634, 5292, 71447, 133650, 128223, 111731, 123775, 4034, 87792, 138111, 544, 66047, 72789, 129857, 19473, 59702, 84800, 82424, 48167]
[2024-12-02 19:24:02.727361] user = 87271 Cloud 196/568
[2024-12-02 19:24:02.739375] user = 87271 Local 196/568
[2024-12-02 19:24:02.804739] user = 87271 Local+ 196/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:24:05.714523] user = 87271 MPDA- 196/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.41145833333333337
Training on augumented user 19788 0/50 current_auc = 0.41145833333333337
User 19788 AUC after training: 0.42057291666666663
User 19788 improves AUC. Keeping the model.
Training on augumented user 55837 1/50 current_auc = 0.42057291666666663
User 55837 AUC after training: 0.40234375
User 55837 does not improve AUC. Reverting changes.
Training on augumented user 39281 2/50 current_auc = 0.42057291666666663
User 39281 AUC after training: 0.4205729166666667
User 39281 improves AUC. Keeping the model.
Training on augumented user 102908 3/50 current_auc = 0.4205729166666667
User 102908 AUC after training: 0.42317708333333337
User 102908 improves AUC. Keeping the model.
Training on augumented user 39924 4/50 current_auc = 0.42317708333333337
User 39924 AUC after training: 0.41796875
User 39924 does not improve AUC. Reverting changes.
Training on augumented user 102020 5/50 current_auc = 0.42317708333333337
User 102020 AUC after training: 0.4244791666666667
User 102020 improves AUC. Keeping the model.
Training on augumented user 126217 6/50 current_auc = 0.4244791666666667
User 126217 AUC after training: 0.4283854166666667
User 126217 improves AUC. Keeping the model.
Training on augumented user 85713 7/50 current_auc = 0.4283854166666667
User 85713 AUC after training: 0.4283854166666667
User 85713 does not improve AUC. Reverting changes.
Training on augumented user 79907 8/50 current_auc = 0.4283854166666667
User 79907 AUC after training: 0.42578125
User 79907 does not improve AUC. Reverting changes.
Training on augumented user 24645 9/50 current_auc = 0.4283854166666667
User 24645 AUC after training: 0.43098958333333337
User 24645 improves AUC. Keeping the model.
Training on augumented user 97769 10/50 current_auc = 0.43098958333333337
User 97769 AUC after training: 0.4309895833333333
User 97769 does not improve AUC. Reverting changes.
Training on augumented user 30801 11/50 current_auc = 0.43098958333333337
User 30801 AUC after training: 0.43359375
User 30801 improves AUC. Keeping the model.
Training on augumented user 32574 12/50 current_auc = 0.43359375
User 32574 AUC after training: 0.4375
User 32574 improves AUC. Keeping the model.
Training on augumented user 8742 13/50 current_auc = 0.4375
User 8742 AUC after training: 0.44270833333333337
User 8742 improves AUC. Keeping the model.
Training on augumented user 9894 14/50 current_auc = 0.44270833333333337
User 9894 AUC after training: 0.4401041666666667
User 9894 does not improve AUC. Reverting changes.
Training on augumented user 105774 15/50 current_auc = 0.44270833333333337
User 105774 AUC after training: 0.43750000000000006
User 105774 does not improve AUC. Reverting changes.
Training on augumented user 89854 16/50 current_auc = 0.44270833333333337
User 89854 AUC after training: 0.421875
User 89854 does not improve AUC. Reverting changes.
Training on augumented user 127918 17/50 current_auc = 0.44270833333333337
User 127918 AUC after training: 0.43489583333333337
User 127918 does not improve AUC. Reverting changes.
Training on augumented user 75069 18/50 current_auc = 0.44270833333333337
User 75069 AUC after training: 0.44140625
User 75069 does not improve AUC. Reverting changes.
Training on augumented user 6349 19/50 current_auc = 0.44270833333333337
User 6349 AUC after training: 0.43880208333333337
User 6349 does not improve AUC. Reverting changes.
Training on augumented user 95736 20/50 current_auc = 0.44270833333333337
User 95736 AUC after training: 0.4453125
User 95736 improves AUC. Keeping the model.
Training on augumented user 135122 21/50 current_auc = 0.4453125
User 135122 AUC after training: 0.4401041666666667
User 135122 does not improve AUC. Reverting changes.
Training on augumented user 22893 22/50 current_auc = 0.4453125
User 22893 AUC after training: 0.4440104166666667
User 22893 does not improve AUC. Reverting changes.
Training on augumented user 16421 23/50 current_auc = 0.4453125
User 16421 AUC after training: 0.4401041666666667
User 16421 does not improve AUC. Reverting changes.
Training on augumented user 86806 24/50 current_auc = 0.4453125
User 86806 AUC after training: 0.4427083333333333
User 86806 does not improve AUC. Reverting changes.
Training on augumented user 9198 25/50 current_auc = 0.4453125
User 9198 AUC after training: 0.44140625
User 9198 does not improve AUC. Reverting changes.
Training on augumented user 92832 26/50 current_auc = 0.4453125
User 92832 AUC after training: 0.4401041666666667
User 92832 does not improve AUC. Reverting changes.
Training on augumented user 16452 27/50 current_auc = 0.4453125
User 16452 AUC after training: 0.40625
User 16452 does not improve AUC. Reverting changes.
Training on augumented user 23637 28/50 current_auc = 0.4453125
User 23637 AUC after training: 0.44270833333333337
User 23637 does not improve AUC. Reverting changes.
Training on augumented user 126337 29/50 current_auc = 0.4453125
User 126337 AUC after training: 0.4348958333333333
User 126337 does not improve AUC. Reverting changes.
Training on augumented user 127704 30/50 current_auc = 0.4453125
User 127704 AUC after training: 0.42187500000000006
User 127704 does not improve AUC. Reverting changes.
Training on augumented user 14634 31/50 current_auc = 0.4453125
User 14634 AUC after training: 0.4375
User 14634 does not improve AUC. Reverting changes.
Training on augumented user 5292 32/50 current_auc = 0.4453125
User 5292 AUC after training: 0.4322916666666667
User 5292 does not improve AUC. Reverting changes.
Training on augumented user 71447 33/50 current_auc = 0.4453125
User 71447 AUC after training: 0.4453125
User 71447 does not improve AUC. Reverting changes.
Training on augumented user 133650 34/50 current_auc = 0.4453125
User 133650 AUC after training: 0.4361979166666667
User 133650 does not improve AUC. Reverting changes.
Training on augumented user 128223 35/50 current_auc = 0.4453125
User 128223 AUC after training: 0.4453125
User 128223 does not improve AUC. Reverting changes.
Training on augumented user 111731 36/50 current_auc = 0.4453125
User 111731 AUC after training: 0.44270833333333337
User 111731 does not improve AUC. Reverting changes.
Training on augumented user 123775 37/50 current_auc = 0.4453125
User 123775 AUC after training: 0.4479166666666667
User 123775 improves AUC. Keeping the model.
Training on augumented user 4034 38/50 current_auc = 0.4479166666666667
User 4034 AUC after training: 0.4479166666666667
User 4034 does not improve AUC. Reverting changes.
Training on augumented user 87792 39/50 current_auc = 0.4479166666666667
User 87792 AUC after training: 0.4453125
User 87792 does not improve AUC. Reverting changes.
Training on augumented user 138111 40/50 current_auc = 0.4479166666666667
User 138111 AUC after training: 0.44270833333333337
User 138111 does not improve AUC. Reverting changes.
Training on augumented user 544 41/50 current_auc = 0.4479166666666667
User 544 AUC after training: 0.4375
User 544 does not improve AUC. Reverting changes.
Training on augumented user 66047 42/50 current_auc = 0.4479166666666667
User 66047 AUC after training: 0.4166666666666667
User 66047 does not improve AUC. Reverting changes.
Training on augumented user 72789 43/50 current_auc = 0.4479166666666667
User 72789 AUC after training: 0.4296875
User 72789 does not improve AUC. Reverting changes.
Training on augumented user 129857 44/50 current_auc = 0.4479166666666667
User 129857 AUC after training: 0.4453125
User 129857 does not improve AUC. Reverting changes.
Training on augumented user 19473 45/50 current_auc = 0.4479166666666667
User 19473 AUC after training: 0.4010416666666667
User 19473 does not improve AUC. Reverting changes.
Training on augumented user 59702 46/50 current_auc = 0.4479166666666667
User 59702 AUC after training: 0.41145833333333337
User 59702 does not improve AUC. Reverting changes.
Training on augumented user 84800 47/50 current_auc = 0.4479166666666667
User 84800 AUC after training: 0.4427083333333333
User 84800 does not improve AUC. Reverting changes.
Training on augumented user 82424 48/50 current_auc = 0.4479166666666667
User 82424 AUC after training: 0.4401041666666667
User 82424 does not improve AUC. Reverting changes.
Training on augumented user 48167 49/50 current_auc = 0.4479166666666667
User 48167 AUC after training: 0.4453125
User 48167 does not improve AUC. Reverting changes.
[2024-12-02 19:24:36.355383] start test user 87290 197/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:24:36.815630] start test user 87290 197/568 recall augumented users by random, augumented_users = [23724, 8532, 99298, 68320, 42470, 66005, 67092, 101818, 33888, 15068, 98341, 127050, 8109, 79588, 7530, 123220, 14318, 12087, 56509, 127382, 77332, 80886, 107006, 24514, 11581, 126289, 46582, 100904, 64516, 69600, 122310, 89208, 108791, 6487, 109383, 134895, 49784, 99030, 55019, 60905, 84602, 101788, 131498, 39586, 19699, 34986, 57694, 39667, 41702, 93946]
[2024-12-02 19:24:36.830995] user = 87290 Cloud 197/568
[2024-12-02 19:24:36.872663] user = 87290 Local 197/568
[2024-12-02 19:24:36.955906] user = 87290 Local+ 197/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:24:39.614759] user = 87290 MPDA- 197/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.627906976744186
Training on augumented user 23724 0/50 current_auc = 0.627906976744186
User 23724 AUC after training: 0.6286821705426356
User 23724 improves AUC. Keeping the model.
Training on augumented user 8532 1/50 current_auc = 0.6286821705426356
User 8532 AUC after training: 0.6285852713178295
User 8532 does not improve AUC. Reverting changes.
Training on augumented user 99298 2/50 current_auc = 0.6286821705426356
User 99298 AUC after training: 0.6288759689922481
User 99298 improves AUC. Keeping the model.
Training on augumented user 68320 3/50 current_auc = 0.6288759689922481
User 68320 AUC after training: 0.6297480620155039
User 68320 improves AUC. Keeping the model.
Training on augumented user 42470 4/50 current_auc = 0.6297480620155039
User 42470 AUC after training: 0.6285852713178295
User 42470 does not improve AUC. Reverting changes.
Training on augumented user 66005 5/50 current_auc = 0.6297480620155039
User 66005 AUC after training: 0.6292635658914728
User 66005 does not improve AUC. Reverting changes.
Training on augumented user 67092 6/50 current_auc = 0.6297480620155039
User 67092 AUC after training: 0.6300387596899224
User 67092 improves AUC. Keeping the model.
Training on augumented user 101818 7/50 current_auc = 0.6300387596899224
User 101818 AUC after training: 0.6296511627906977
User 101818 does not improve AUC. Reverting changes.
Training on augumented user 33888 8/50 current_auc = 0.6300387596899224
User 33888 AUC after training: 0.6299418604651164
User 33888 does not improve AUC. Reverting changes.
Training on augumented user 15068 9/50 current_auc = 0.6300387596899224
User 15068 AUC after training: 0.6298449612403101
User 15068 does not improve AUC. Reverting changes.
Training on augumented user 98341 10/50 current_auc = 0.6300387596899224
User 98341 AUC after training: 0.6294089147286821
User 98341 does not improve AUC. Reverting changes.
Training on augumented user 127050 11/50 current_auc = 0.6300387596899224
User 127050 AUC after training: 0.6292635658914728
User 127050 does not improve AUC. Reverting changes.
Training on augumented user 8109 12/50 current_auc = 0.6300387596899224
User 8109 AUC after training: 0.6297480620155038
User 8109 does not improve AUC. Reverting changes.
Training on augumented user 79588 13/50 current_auc = 0.6300387596899224
User 79588 AUC after training: 0.6296511627906977
User 79588 does not improve AUC. Reverting changes.
Training on augumented user 7530 14/50 current_auc = 0.6300387596899224
User 7530 AUC after training: 0.6293604651162791
User 7530 does not improve AUC. Reverting changes.
Training on augumented user 123220 15/50 current_auc = 0.6300387596899224
User 123220 AUC after training: 0.6299418604651162
User 123220 does not improve AUC. Reverting changes.
Training on augumented user 14318 16/50 current_auc = 0.6300387596899224
User 14318 AUC after training: 0.6301356589147287
User 14318 improves AUC. Keeping the model.
Training on augumented user 12087 17/50 current_auc = 0.6301356589147287
User 12087 AUC after training: 0.6290697674418605
User 12087 does not improve AUC. Reverting changes.
Training on augumented user 56509 18/50 current_auc = 0.6301356589147287
User 56509 AUC after training: 0.6284883720930232
User 56509 does not improve AUC. Reverting changes.
Training on augumented user 127382 19/50 current_auc = 0.6301356589147287
User 127382 AUC after training: 0.6299418604651162
User 127382 does not improve AUC. Reverting changes.
Training on augumented user 77332 20/50 current_auc = 0.6301356589147287
User 77332 AUC after training: 0.6292635658914729
User 77332 does not improve AUC. Reverting changes.
Training on augumented user 80886 21/50 current_auc = 0.6301356589147287
User 80886 AUC after training: 0.6267926356589149
User 80886 does not improve AUC. Reverting changes.
Training on augumented user 107006 22/50 current_auc = 0.6301356589147287
User 107006 AUC after training: 0.6291666666666667
User 107006 does not improve AUC. Reverting changes.
Training on augumented user 24514 23/50 current_auc = 0.6301356589147287
User 24514 AUC after training: 0.6304263565891473
User 24514 improves AUC. Keeping the model.
Training on augumented user 11581 24/50 current_auc = 0.6304263565891473
User 11581 AUC after training: 0.6306201550387597
User 11581 improves AUC. Keeping the model.
Training on augumented user 126289 25/50 current_auc = 0.6306201550387597
User 126289 AUC after training: 0.6305232558139535
User 126289 does not improve AUC. Reverting changes.
Training on augumented user 46582 26/50 current_auc = 0.6306201550387597
User 46582 AUC after training: 0.6294573643410852
User 46582 does not improve AUC. Reverting changes.
Training on augumented user 100904 27/50 current_auc = 0.6306201550387597
User 100904 AUC after training: 0.6304263565891473
User 100904 does not improve AUC. Reverting changes.
Training on augumented user 64516 28/50 current_auc = 0.6306201550387597
User 64516 AUC after training: 0.6297480620155038
User 64516 does not improve AUC. Reverting changes.
Training on augumented user 69600 29/50 current_auc = 0.6306201550387597
User 69600 AUC after training: 0.6299418604651162
User 69600 does not improve AUC. Reverting changes.
Training on augumented user 122310 30/50 current_auc = 0.6306201550387597
User 122310 AUC after training: 0.629796511627907
User 122310 does not improve AUC. Reverting changes.
Training on augumented user 89208 31/50 current_auc = 0.6306201550387597
User 89208 AUC after training: 0.6298449612403101
User 89208 does not improve AUC. Reverting changes.
Training on augumented user 108791 32/50 current_auc = 0.6306201550387597
User 108791 AUC after training: 0.630717054263566
User 108791 improves AUC. Keeping the model.
Training on augumented user 6487 33/50 current_auc = 0.630717054263566
User 6487 AUC after training: 0.6308139534883721
User 6487 improves AUC. Keeping the model.
Training on augumented user 109383 34/50 current_auc = 0.6308139534883721
User 109383 AUC after training: 0.6302325581395348
User 109383 does not improve AUC. Reverting changes.
Training on augumented user 134895 35/50 current_auc = 0.6308139534883721
User 134895 AUC after training: 0.6287790697674419
User 134895 does not improve AUC. Reverting changes.
Training on augumented user 49784 36/50 current_auc = 0.6308139534883721
User 49784 AUC after training: 0.6293604651162791
User 49784 does not improve AUC. Reverting changes.
Training on augumented user 99030 37/50 current_auc = 0.6308139534883721
User 99030 AUC after training: 0.6293604651162791
User 99030 does not improve AUC. Reverting changes.
Training on augumented user 55019 38/50 current_auc = 0.6308139534883721
User 55019 AUC after training: 0.6297480620155039
User 55019 does not improve AUC. Reverting changes.
Training on augumented user 60905 39/50 current_auc = 0.6308139534883721
User 60905 AUC after training: 0.6304263565891473
User 60905 does not improve AUC. Reverting changes.
Training on augumented user 84602 40/50 current_auc = 0.6308139534883721
User 84602 AUC after training: 0.6304263565891474
User 84602 does not improve AUC. Reverting changes.
Training on augumented user 101788 41/50 current_auc = 0.6308139534883721
User 101788 AUC after training: 0.6296511627906977
User 101788 does not improve AUC. Reverting changes.
Training on augumented user 131498 42/50 current_auc = 0.6308139534883721
User 131498 AUC after training: 0.6310077519379845
User 131498 improves AUC. Keeping the model.
Training on augumented user 39586 43/50 current_auc = 0.6310077519379845
User 39586 AUC after training: 0.6311046511627907
User 39586 improves AUC. Keeping the model.
Training on augumented user 19699 44/50 current_auc = 0.6311046511627907
User 19699 AUC after training: 0.6295058139534884
User 19699 does not improve AUC. Reverting changes.
Training on augumented user 34986 45/50 current_auc = 0.6311046511627907
User 34986 AUC after training: 0.6304748062015504
User 34986 does not improve AUC. Reverting changes.
Training on augumented user 57694 46/50 current_auc = 0.6311046511627907
User 57694 AUC after training: 0.6304263565891473
User 57694 does not improve AUC. Reverting changes.
Training on augumented user 39667 47/50 current_auc = 0.6311046511627907
User 39667 AUC after training: 0.6287790697674418
User 39667 does not improve AUC. Reverting changes.
Training on augumented user 41702 48/50 current_auc = 0.6311046511627907
User 41702 AUC after training: 0.6305232558139535
User 41702 does not improve AUC. Reverting changes.
Training on augumented user 93946 49/50 current_auc = 0.6311046511627907
User 93946 AUC after training: 0.6298449612403101
User 93946 does not improve AUC. Reverting changes.
[2024-12-02 19:25:09.613399] start test user 87321 198/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:25:10.311070] start test user 87321 198/568 recall augumented users by random, augumented_users = [5246, 89754, 70391, 56579, 27422, 70342, 23165, 51947, 7687, 129285, 79493, 73649, 32092, 16427, 8140, 39042, 117498, 12844, 29801, 78300, 80449, 68077, 116048, 67740, 103872, 90255, 116421, 34617, 55245, 74328, 7507, 89719, 80340, 125760, 18752, 83943, 69291, 137559, 49431, 81376, 122614, 16527, 76071, 71624, 105300, 52365, 87932, 137151, 60561, 124196]
[2024-12-02 19:25:10.327708] user = 87321 Cloud 198/568
[2024-12-02 19:25:10.337619] user = 87321 Local 198/568
[2024-12-02 19:25:10.585940] user = 87321 Local+ 198/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:25:13.480939] user = 87321 MPDA- 198/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7291666666666666
Training on augumented user 5246 0/50 current_auc = 0.7291666666666666
User 5246 AUC after training: 0.7291666666666666
User 5246 does not improve AUC. Reverting changes.
Training on augumented user 89754 1/50 current_auc = 0.7291666666666666
User 89754 AUC after training: 0.7291666666666666
User 89754 does not improve AUC. Reverting changes.
Training on augumented user 70391 2/50 current_auc = 0.7291666666666666
User 70391 AUC after training: 0.7291666666666666
User 70391 does not improve AUC. Reverting changes.
Training on augumented user 56579 3/50 current_auc = 0.7291666666666666
User 56579 AUC after training: 0.7291666666666666
User 56579 does not improve AUC. Reverting changes.
Training on augumented user 27422 4/50 current_auc = 0.7291666666666666
User 27422 AUC after training: 0.7291666666666666
User 27422 does not improve AUC. Reverting changes.
Training on augumented user 70342 5/50 current_auc = 0.7291666666666666
User 70342 AUC after training: 0.7291666666666666
User 70342 does not improve AUC. Reverting changes.
Training on augumented user 23165 6/50 current_auc = 0.7291666666666666
User 23165 AUC after training: 0.7291666666666666
User 23165 does not improve AUC. Reverting changes.
Training on augumented user 51947 7/50 current_auc = 0.7291666666666666
User 51947 AUC after training: 0.7291666666666666
User 51947 does not improve AUC. Reverting changes.
Training on augumented user 7687 8/50 current_auc = 0.7291666666666666
User 7687 AUC after training: 0.7291666666666666
User 7687 does not improve AUC. Reverting changes.
Training on augumented user 129285 9/50 current_auc = 0.7291666666666666
User 129285 AUC after training: 0.7291666666666666
User 129285 does not improve AUC. Reverting changes.
Training on augumented user 79493 10/50 current_auc = 0.7291666666666666
User 79493 AUC after training: 0.7291666666666666
User 79493 does not improve AUC. Reverting changes.
Training on augumented user 73649 11/50 current_auc = 0.7291666666666666
User 73649 AUC after training: 0.7291666666666666
User 73649 does not improve AUC. Reverting changes.
Training on augumented user 32092 12/50 current_auc = 0.7291666666666666
User 32092 AUC after training: 0.7291666666666666
User 32092 does not improve AUC. Reverting changes.
Training on augumented user 16427 13/50 current_auc = 0.7291666666666666
User 16427 AUC after training: 0.7291666666666666
User 16427 does not improve AUC. Reverting changes.
Training on augumented user 8140 14/50 current_auc = 0.7291666666666666
User 8140 AUC after training: 0.7291666666666666
User 8140 does not improve AUC. Reverting changes.
Training on augumented user 39042 15/50 current_auc = 0.7291666666666666
User 39042 AUC after training: 0.7291666666666666
User 39042 does not improve AUC. Reverting changes.
Training on augumented user 117498 16/50 current_auc = 0.7291666666666666
User 117498 AUC after training: 0.7291666666666666
User 117498 does not improve AUC. Reverting changes.
Training on augumented user 12844 17/50 current_auc = 0.7291666666666666
User 12844 AUC after training: 0.7291666666666666
User 12844 does not improve AUC. Reverting changes.
Training on augumented user 29801 18/50 current_auc = 0.7291666666666666
User 29801 AUC after training: 0.7291666666666666
User 29801 does not improve AUC. Reverting changes.
Training on augumented user 78300 19/50 current_auc = 0.7291666666666666
User 78300 AUC after training: 0.7291666666666666
User 78300 does not improve AUC. Reverting changes.
Training on augumented user 80449 20/50 current_auc = 0.7291666666666666
User 80449 AUC after training: 0.7291666666666666
User 80449 does not improve AUC. Reverting changes.
Training on augumented user 68077 21/50 current_auc = 0.7291666666666666
User 68077 AUC after training: 0.7291666666666666
User 68077 does not improve AUC. Reverting changes.
Training on augumented user 116048 22/50 current_auc = 0.7291666666666666
User 116048 AUC after training: 0.7291666666666666
User 116048 does not improve AUC. Reverting changes.
Training on augumented user 67740 23/50 current_auc = 0.7291666666666666
User 67740 AUC after training: 0.7291666666666666
User 67740 does not improve AUC. Reverting changes.
Training on augumented user 103872 24/50 current_auc = 0.7291666666666666
User 103872 AUC after training: 0.7291666666666666
User 103872 does not improve AUC. Reverting changes.
Training on augumented user 90255 25/50 current_auc = 0.7291666666666666
User 90255 AUC after training: 0.7291666666666666
User 90255 does not improve AUC. Reverting changes.
Training on augumented user 116421 26/50 current_auc = 0.7291666666666666
User 116421 AUC after training: 0.7291666666666666
User 116421 does not improve AUC. Reverting changes.
Training on augumented user 34617 27/50 current_auc = 0.7291666666666666
User 34617 AUC after training: 0.7291666666666666
User 34617 does not improve AUC. Reverting changes.
Training on augumented user 55245 28/50 current_auc = 0.7291666666666666
User 55245 AUC after training: 0.7291666666666666
User 55245 does not improve AUC. Reverting changes.
Training on augumented user 74328 29/50 current_auc = 0.7291666666666666
User 74328 AUC after training: 0.7291666666666666
User 74328 does not improve AUC. Reverting changes.
Training on augumented user 7507 30/50 current_auc = 0.7291666666666666
User 7507 AUC after training: 0.7291666666666666
User 7507 does not improve AUC. Reverting changes.
Training on augumented user 89719 31/50 current_auc = 0.7291666666666666
User 89719 AUC after training: 0.7291666666666666
User 89719 does not improve AUC. Reverting changes.
Training on augumented user 80340 32/50 current_auc = 0.7291666666666666
User 80340 AUC after training: 0.7291666666666666
User 80340 does not improve AUC. Reverting changes.
Training on augumented user 125760 33/50 current_auc = 0.7291666666666666
User 125760 AUC after training: 0.7291666666666666
User 125760 does not improve AUC. Reverting changes.
Training on augumented user 18752 34/50 current_auc = 0.7291666666666666
User 18752 AUC after training: 0.7291666666666666
User 18752 does not improve AUC. Reverting changes.
Training on augumented user 83943 35/50 current_auc = 0.7291666666666666
User 83943 AUC after training: 0.7291666666666666
User 83943 does not improve AUC. Reverting changes.
Training on augumented user 69291 36/50 current_auc = 0.7291666666666666
User 69291 AUC after training: 0.7291666666666666
User 69291 does not improve AUC. Reverting changes.
Training on augumented user 137559 37/50 current_auc = 0.7291666666666666
User 137559 AUC after training: 0.7291666666666666
User 137559 does not improve AUC. Reverting changes.
Training on augumented user 49431 38/50 current_auc = 0.7291666666666666
User 49431 AUC after training: 0.7291666666666666
User 49431 does not improve AUC. Reverting changes.
Training on augumented user 81376 39/50 current_auc = 0.7291666666666666
User 81376 AUC after training: 0.7291666666666666
User 81376 does not improve AUC. Reverting changes.
Training on augumented user 122614 40/50 current_auc = 0.7291666666666666
User 122614 AUC after training: 0.7291666666666666
User 122614 does not improve AUC. Reverting changes.
Training on augumented user 16527 41/50 current_auc = 0.7291666666666666
User 16527 AUC after training: 0.7291666666666666
User 16527 does not improve AUC. Reverting changes.
Training on augumented user 76071 42/50 current_auc = 0.7291666666666666
User 76071 AUC after training: 0.7291666666666666
User 76071 does not improve AUC. Reverting changes.
Training on augumented user 71624 43/50 current_auc = 0.7291666666666666
User 71624 AUC after training: 0.7291666666666666
User 71624 does not improve AUC. Reverting changes.
Training on augumented user 105300 44/50 current_auc = 0.7291666666666666
User 105300 AUC after training: 0.7291666666666666
User 105300 does not improve AUC. Reverting changes.
Training on augumented user 52365 45/50 current_auc = 0.7291666666666666
User 52365 AUC after training: 0.7291666666666666
User 52365 does not improve AUC. Reverting changes.
Training on augumented user 87932 46/50 current_auc = 0.7291666666666666
User 87932 AUC after training: 0.7291666666666666
User 87932 does not improve AUC. Reverting changes.
Training on augumented user 137151 47/50 current_auc = 0.7291666666666666
User 137151 AUC after training: 0.7291666666666666
User 137151 does not improve AUC. Reverting changes.
Training on augumented user 60561 48/50 current_auc = 0.7291666666666666
User 60561 AUC after training: 0.7291666666666666
User 60561 does not improve AUC. Reverting changes.
Training on augumented user 124196 49/50 current_auc = 0.7291666666666666
User 124196 AUC after training: 0.7291666666666666
User 124196 does not improve AUC. Reverting changes.
[2024-12-02 19:25:41.890256] start test user 87329 199/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:25:42.424857] start test user 87329 199/568 recall augumented users by random, augumented_users = [6860, 117529, 95676, 127729, 132552, 32297, 131122, 84032, 106813, 67498, 56895, 89630, 97313, 15848, 61345, 38455, 81621, 42365, 69189, 84075, 57880, 67333, 87444, 110751, 32411, 45780, 50167, 93664, 14425, 31141, 18290, 93939, 11752, 61874, 90829, 42604, 54505, 75735, 96900, 5853, 2640, 91502, 75642, 17994, 125867, 85818, 136806, 114050, 87309, 98744]
[2024-12-02 19:25:42.460614] user = 87329 Cloud 199/568
[2024-12-02 19:25:42.487690] user = 87329 Local 199/568
[2024-12-02 19:25:42.546402] user = 87329 Local+ 199/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:25:45.199329] user = 87329 MPDA- 199/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7941176470588236
Training on augumented user 6860 0/50 current_auc = 0.7941176470588236
User 6860 AUC after training: 0.7941176470588235
User 6860 does not improve AUC. Reverting changes.
Training on augumented user 117529 1/50 current_auc = 0.7941176470588236
User 117529 AUC after training: 0.7941176470588236
User 117529 does not improve AUC. Reverting changes.
Training on augumented user 95676 2/50 current_auc = 0.7941176470588236
User 95676 AUC after training: 0.7921568627450981
User 95676 does not improve AUC. Reverting changes.
Training on augumented user 127729 3/50 current_auc = 0.7941176470588236
User 127729 AUC after training: 0.7921568627450981
User 127729 does not improve AUC. Reverting changes.
Training on augumented user 132552 4/50 current_auc = 0.7941176470588236
User 132552 AUC after training: 0.7941176470588236
User 132552 does not improve AUC. Reverting changes.
Training on augumented user 32297 5/50 current_auc = 0.7941176470588236
User 32297 AUC after training: 0.7941176470588236
User 32297 does not improve AUC. Reverting changes.
Training on augumented user 131122 6/50 current_auc = 0.7941176470588236
User 131122 AUC after training: 0.7941176470588236
User 131122 does not improve AUC. Reverting changes.
Training on augumented user 84032 7/50 current_auc = 0.7941176470588236
User 84032 AUC after training: 0.7921568627450981
User 84032 does not improve AUC. Reverting changes.
Training on augumented user 106813 8/50 current_auc = 0.7941176470588236
User 106813 AUC after training: 0.792156862745098
User 106813 does not improve AUC. Reverting changes.
Training on augumented user 67498 9/50 current_auc = 0.7941176470588236
User 67498 AUC after training: 0.7901960784313726
User 67498 does not improve AUC. Reverting changes.
Training on augumented user 56895 10/50 current_auc = 0.7941176470588236
User 56895 AUC after training: 0.792156862745098
User 56895 does not improve AUC. Reverting changes.
Training on augumented user 89630 11/50 current_auc = 0.7941176470588236
User 89630 AUC after training: 0.7921568627450981
User 89630 does not improve AUC. Reverting changes.
Training on augumented user 97313 12/50 current_auc = 0.7941176470588236
User 97313 AUC after training: 0.7921568627450981
User 97313 does not improve AUC. Reverting changes.
Training on augumented user 15848 13/50 current_auc = 0.7941176470588236
User 15848 AUC after training: 0.7960784313725491
User 15848 improves AUC. Keeping the model.
Training on augumented user 61345 14/50 current_auc = 0.7960784313725491
User 61345 AUC after training: 0.7941176470588236
User 61345 does not improve AUC. Reverting changes.
Training on augumented user 38455 15/50 current_auc = 0.7960784313725491
User 38455 AUC after training: 0.7921568627450981
User 38455 does not improve AUC. Reverting changes.
Training on augumented user 81621 16/50 current_auc = 0.7960784313725491
User 81621 AUC after training: 0.7941176470588236
User 81621 does not improve AUC. Reverting changes.
Training on augumented user 42365 17/50 current_auc = 0.7960784313725491
User 42365 AUC after training: 0.7941176470588236
User 42365 does not improve AUC. Reverting changes.
Training on augumented user 69189 18/50 current_auc = 0.7960784313725491
User 69189 AUC after training: 0.7960784313725491
User 69189 does not improve AUC. Reverting changes.
Training on augumented user 84075 19/50 current_auc = 0.7960784313725491
User 84075 AUC after training: 0.7960784313725491
User 84075 does not improve AUC. Reverting changes.
Training on augumented user 57880 20/50 current_auc = 0.7960784313725491
User 57880 AUC after training: 0.7960784313725491
User 57880 does not improve AUC. Reverting changes.
Training on augumented user 67333 21/50 current_auc = 0.7960784313725491
User 67333 AUC after training: 0.7941176470588235
User 67333 does not improve AUC. Reverting changes.
Training on augumented user 87444 22/50 current_auc = 0.7960784313725491
User 87444 AUC after training: 0.7941176470588236
User 87444 does not improve AUC. Reverting changes.
Training on augumented user 110751 23/50 current_auc = 0.7960784313725491
User 110751 AUC after training: 0.7960784313725491
User 110751 does not improve AUC. Reverting changes.
Training on augumented user 32411 24/50 current_auc = 0.7960784313725491
User 32411 AUC after training: 0.7960784313725491
User 32411 does not improve AUC. Reverting changes.
Training on augumented user 45780 25/50 current_auc = 0.7960784313725491
User 45780 AUC after training: 0.7941176470588236
User 45780 does not improve AUC. Reverting changes.
Training on augumented user 50167 26/50 current_auc = 0.7960784313725491
User 50167 AUC after training: 0.7941176470588236
User 50167 does not improve AUC. Reverting changes.
Training on augumented user 93664 27/50 current_auc = 0.7960784313725491
User 93664 AUC after training: 0.7941176470588236
User 93664 does not improve AUC. Reverting changes.
Training on augumented user 14425 28/50 current_auc = 0.7960784313725491
User 14425 AUC after training: 0.7960784313725491
User 14425 does not improve AUC. Reverting changes.
Training on augumented user 31141 29/50 current_auc = 0.7960784313725491
User 31141 AUC after training: 0.7960784313725491
User 31141 does not improve AUC. Reverting changes.
Training on augumented user 18290 30/50 current_auc = 0.7960784313725491
User 18290 AUC after training: 0.7960784313725491
User 18290 does not improve AUC. Reverting changes.
Training on augumented user 93939 31/50 current_auc = 0.7960784313725491
User 93939 AUC after training: 0.7941176470588236
User 93939 does not improve AUC. Reverting changes.
Training on augumented user 11752 32/50 current_auc = 0.7960784313725491
User 11752 AUC after training: 0.7960784313725491
User 11752 does not improve AUC. Reverting changes.
Training on augumented user 61874 33/50 current_auc = 0.7960784313725491
User 61874 AUC after training: 0.7980392156862746
User 61874 improves AUC. Keeping the model.
Training on augumented user 90829 34/50 current_auc = 0.7980392156862746
User 90829 AUC after training: 0.7960784313725491
User 90829 does not improve AUC. Reverting changes.
Training on augumented user 42604 35/50 current_auc = 0.7980392156862746
User 42604 AUC after training: 0.7921568627450981
User 42604 does not improve AUC. Reverting changes.
Training on augumented user 54505 36/50 current_auc = 0.7980392156862746
User 54505 AUC after training: 0.7980392156862746
User 54505 does not improve AUC. Reverting changes.
Training on augumented user 75735 37/50 current_auc = 0.7980392156862746
User 75735 AUC after training: 0.7980392156862746
User 75735 does not improve AUC. Reverting changes.
Training on augumented user 96900 38/50 current_auc = 0.7980392156862746
User 96900 AUC after training: 0.7941176470588235
User 96900 does not improve AUC. Reverting changes.
Training on augumented user 5853 39/50 current_auc = 0.7980392156862746
User 5853 AUC after training: 0.792156862745098
User 5853 does not improve AUC. Reverting changes.
Training on augumented user 2640 40/50 current_auc = 0.7980392156862746
User 2640 AUC after training: 0.7941176470588235
User 2640 does not improve AUC. Reverting changes.
Training on augumented user 91502 41/50 current_auc = 0.7980392156862746
User 91502 AUC after training: 0.7941176470588236
User 91502 does not improve AUC. Reverting changes.
Training on augumented user 75642 42/50 current_auc = 0.7980392156862746
User 75642 AUC after training: 0.7941176470588236
User 75642 does not improve AUC. Reverting changes.
Training on augumented user 17994 43/50 current_auc = 0.7980392156862746
User 17994 AUC after training: 0.7980392156862746
User 17994 does not improve AUC. Reverting changes.
Training on augumented user 125867 44/50 current_auc = 0.7980392156862746
User 125867 AUC after training: 0.7980392156862746
User 125867 does not improve AUC. Reverting changes.
Training on augumented user 85818 45/50 current_auc = 0.7980392156862746
User 85818 AUC after training: 0.7960784313725491
User 85818 does not improve AUC. Reverting changes.
Training on augumented user 136806 46/50 current_auc = 0.7980392156862746
User 136806 AUC after training: 0.8019607843137255
User 136806 improves AUC. Keeping the model.
Training on augumented user 114050 47/50 current_auc = 0.8019607843137255
User 114050 AUC after training: 0.8
User 114050 does not improve AUC. Reverting changes.
Training on augumented user 87309 48/50 current_auc = 0.8019607843137255
User 87309 AUC after training: 0.8019607843137255
User 87309 does not improve AUC. Reverting changes.
Training on augumented user 98744 49/50 current_auc = 0.8019607843137255
User 98744 AUC after training: 0.8
User 98744 does not improve AUC. Reverting changes.
[2024-12-02 19:26:09.469022] start test user 87331 200/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:26:09.991550] start test user 87331 200/568 recall augumented users by random, augumented_users = [92360, 63882, 90862, 11177, 127089, 112046, 121976, 119595, 18975, 221, 96906, 115387, 132889, 7627, 124600, 84089, 32615, 96353, 70522, 93004, 83242, 107066, 87954, 41868, 37217, 1080, 66007, 118413, 86024, 56746, 32737, 79115, 71479, 97630, 85201, 16705, 68972, 128815, 75489, 8982, 138226, 70727, 33575, 113238, 50604, 9088, 66823, 27057, 8798, 8258]
[2024-12-02 19:26:10.006473] user = 87331 Cloud 200/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:26:10.013483] user = 87331 Local 200/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:26:10.036475] user = 87331 Local+ 200/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:26:12.675479] user = 87331 MPDA- 200/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 92360 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92360 AUC after training: 0.5
User 92360 does not improve AUC. Reverting changes.
Training on augumented user 63882 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63882 AUC after training: 0.5
User 63882 does not improve AUC. Reverting changes.
Training on augumented user 90862 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90862 AUC after training: 0.5
User 90862 does not improve AUC. Reverting changes.
Training on augumented user 11177 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11177 AUC after training: 0.5
User 11177 does not improve AUC. Reverting changes.
Training on augumented user 127089 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127089 AUC after training: 0.5
User 127089 does not improve AUC. Reverting changes.
Training on augumented user 112046 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112046 AUC after training: 0.5
User 112046 does not improve AUC. Reverting changes.
Training on augumented user 121976 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121976 AUC after training: 0.5
User 121976 does not improve AUC. Reverting changes.
Training on augumented user 119595 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119595 AUC after training: 0.5
User 119595 does not improve AUC. Reverting changes.
Training on augumented user 18975 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18975 AUC after training: 0.5
User 18975 does not improve AUC. Reverting changes.
Training on augumented user 221 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 221 AUC after training: 0.5
User 221 does not improve AUC. Reverting changes.
Training on augumented user 96906 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96906 AUC after training: 0.5
User 96906 does not improve AUC. Reverting changes.
Training on augumented user 115387 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115387 AUC after training: 0.5
User 115387 does not improve AUC. Reverting changes.
Training on augumented user 132889 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132889 AUC after training: 0.5
User 132889 does not improve AUC. Reverting changes.
Training on augumented user 7627 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7627 AUC after training: 0.5
User 7627 does not improve AUC. Reverting changes.
Training on augumented user 124600 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124600 AUC after training: 0.5
User 124600 does not improve AUC. Reverting changes.
Training on augumented user 84089 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84089 AUC after training: 0.5
User 84089 does not improve AUC. Reverting changes.
Training on augumented user 32615 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32615 AUC after training: 0.5
User 32615 does not improve AUC. Reverting changes.
Training on augumented user 96353 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96353 AUC after training: 0.5
User 96353 does not improve AUC. Reverting changes.
Training on augumented user 70522 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70522 AUC after training: 0.5
User 70522 does not improve AUC. Reverting changes.
Training on augumented user 93004 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93004 AUC after training: 0.5
User 93004 does not improve AUC. Reverting changes.
Training on augumented user 83242 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83242 AUC after training: 0.5
User 83242 does not improve AUC. Reverting changes.
Training on augumented user 107066 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107066 AUC after training: 0.5
User 107066 does not improve AUC. Reverting changes.
Training on augumented user 87954 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87954 AUC after training: 0.5
User 87954 does not improve AUC. Reverting changes.
Training on augumented user 41868 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41868 AUC after training: 0.5
User 41868 does not improve AUC. Reverting changes.
Training on augumented user 37217 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37217 AUC after training: 0.5
User 37217 does not improve AUC. Reverting changes.
Training on augumented user 1080 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1080 AUC after training: 0.5
User 1080 does not improve AUC. Reverting changes.
Training on augumented user 66007 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66007 AUC after training: 0.5
User 66007 does not improve AUC. Reverting changes.
Training on augumented user 118413 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118413 AUC after training: 0.5
User 118413 does not improve AUC. Reverting changes.
Training on augumented user 86024 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86024 AUC after training: 0.5
User 86024 does not improve AUC. Reverting changes.
Training on augumented user 56746 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56746 AUC after training: 0.5
User 56746 does not improve AUC. Reverting changes.
Training on augumented user 32737 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32737 AUC after training: 0.5
User 32737 does not improve AUC. Reverting changes.
Training on augumented user 79115 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79115 AUC after training: 0.5
User 79115 does not improve AUC. Reverting changes.
Training on augumented user 71479 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71479 AUC after training: 0.5
User 71479 does not improve AUC. Reverting changes.
Training on augumented user 97630 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97630 AUC after training: 0.5
User 97630 does not improve AUC. Reverting changes.
Training on augumented user 85201 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85201 AUC after training: 0.5
User 85201 does not improve AUC. Reverting changes.
Training on augumented user 16705 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16705 AUC after training: 0.5
User 16705 does not improve AUC. Reverting changes.
Training on augumented user 68972 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68972 AUC after training: 0.5
User 68972 does not improve AUC. Reverting changes.
Training on augumented user 128815 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128815 AUC after training: 0.5
User 128815 does not improve AUC. Reverting changes.
Training on augumented user 75489 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75489 AUC after training: 0.5
User 75489 does not improve AUC. Reverting changes.
Training on augumented user 8982 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8982 AUC after training: 0.5
User 8982 does not improve AUC. Reverting changes.
Training on augumented user 138226 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138226 AUC after training: 0.5
User 138226 does not improve AUC. Reverting changes.
Training on augumented user 70727 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70727 AUC after training: 0.5
User 70727 does not improve AUC. Reverting changes.
Training on augumented user 33575 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33575 AUC after training: 0.5
User 33575 does not improve AUC. Reverting changes.
Training on augumented user 113238 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113238 AUC after training: 0.5
User 113238 does not improve AUC. Reverting changes.
Training on augumented user 50604 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50604 AUC after training: 0.5
User 50604 does not improve AUC. Reverting changes.
Training on augumented user 9088 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9088 AUC after training: 0.5
User 9088 does not improve AUC. Reverting changes.
Training on augumented user 66823 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66823 AUC after training: 0.5
User 66823 does not improve AUC. Reverting changes.
Training on augumented user 27057 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27057 AUC after training: 0.5
User 27057 does not improve AUC. Reverting changes.
Training on augumented user 8798 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8798 AUC after training: 0.5
User 8798 does not improve AUC. Reverting changes.
Training on augumented user 8258 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8258 AUC after training: 0.5
User 8258 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:26:39.164938] start test user 87348 201/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:26:39.593707] start test user 87348 201/568 recall augumented users by random, augumented_users = [115742, 64299, 105887, 27931, 64754, 44847, 122131, 88748, 26821, 37848, 19227, 70656, 16031, 16174, 51222, 72957, 114074, 126691, 87271, 104721, 133725, 7157, 11388, 14900, 52018, 40935, 99366, 94473, 122990, 31922, 102891, 6225, 51994, 46949, 58564, 75692, 76768, 2309, 27384, 27534, 30636, 4135, 102286, 91447, 41394, 7381, 63417, 67394, 76248, 120441]
[2024-12-02 19:26:39.609056] user = 87348 Cloud 201/568
[2024-12-02 19:26:39.623585] user = 87348 Local 201/568
[2024-12-02 19:26:39.657730] user = 87348 Local+ 201/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:26:42.542428] user = 87348 MPDA- 201/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.380952380952381
Training on augumented user 115742 0/50 current_auc = 0.380952380952381
User 115742 AUC after training: 0.380952380952381
User 115742 does not improve AUC. Reverting changes.
Training on augumented user 64299 1/50 current_auc = 0.380952380952381
User 64299 AUC after training: 0.380952380952381
User 64299 does not improve AUC. Reverting changes.
Training on augumented user 105887 2/50 current_auc = 0.380952380952381
User 105887 AUC after training: 0.3862433862433863
User 105887 improves AUC. Keeping the model.
Training on augumented user 27931 3/50 current_auc = 0.3862433862433863
User 27931 AUC after training: 0.380952380952381
User 27931 does not improve AUC. Reverting changes.
Training on augumented user 64754 4/50 current_auc = 0.3862433862433863
User 64754 AUC after training: 0.3862433862433863
User 64754 does not improve AUC. Reverting changes.
Training on augumented user 44847 5/50 current_auc = 0.3862433862433863
User 44847 AUC after training: 0.380952380952381
User 44847 does not improve AUC. Reverting changes.
Training on augumented user 122131 6/50 current_auc = 0.3862433862433863
User 122131 AUC after training: 0.3862433862433863
User 122131 does not improve AUC. Reverting changes.
Training on augumented user 88748 7/50 current_auc = 0.3862433862433863
User 88748 AUC after training: 0.3862433862433863
User 88748 does not improve AUC. Reverting changes.
Training on augumented user 26821 8/50 current_auc = 0.3862433862433863
User 26821 AUC after training: 0.3756613756613757
User 26821 does not improve AUC. Reverting changes.
Training on augumented user 37848 9/50 current_auc = 0.3862433862433863
User 37848 AUC after training: 0.3862433862433863
User 37848 does not improve AUC. Reverting changes.
Training on augumented user 19227 10/50 current_auc = 0.3862433862433863
User 19227 AUC after training: 0.380952380952381
User 19227 does not improve AUC. Reverting changes.
Training on augumented user 70656 11/50 current_auc = 0.3862433862433863
User 70656 AUC after training: 0.3862433862433863
User 70656 does not improve AUC. Reverting changes.
Training on augumented user 16031 12/50 current_auc = 0.3862433862433863
User 16031 AUC after training: 0.3862433862433863
User 16031 does not improve AUC. Reverting changes.
Training on augumented user 16174 13/50 current_auc = 0.3862433862433863
User 16174 AUC after training: 0.380952380952381
User 16174 does not improve AUC. Reverting changes.
Training on augumented user 51222 14/50 current_auc = 0.3862433862433863
User 51222 AUC after training: 0.3862433862433863
User 51222 does not improve AUC. Reverting changes.
Training on augumented user 72957 15/50 current_auc = 0.3862433862433863
User 72957 AUC after training: 0.3862433862433863
User 72957 does not improve AUC. Reverting changes.
Training on augumented user 114074 16/50 current_auc = 0.3862433862433863
User 114074 AUC after training: 0.3862433862433863
User 114074 does not improve AUC. Reverting changes.
Training on augumented user 126691 17/50 current_auc = 0.3862433862433863
User 126691 AUC after training: 0.380952380952381
User 126691 does not improve AUC. Reverting changes.
Training on augumented user 87271 18/50 current_auc = 0.3862433862433863
User 87271 AUC after training: 0.380952380952381
User 87271 does not improve AUC. Reverting changes.
Training on augumented user 104721 19/50 current_auc = 0.3862433862433863
User 104721 AUC after training: 0.3862433862433863
User 104721 does not improve AUC. Reverting changes.
Training on augumented user 133725 20/50 current_auc = 0.3862433862433863
User 133725 AUC after training: 0.3862433862433863
User 133725 does not improve AUC. Reverting changes.
Training on augumented user 7157 21/50 current_auc = 0.3862433862433863
User 7157 AUC after training: 0.3862433862433863
User 7157 does not improve AUC. Reverting changes.
Training on augumented user 11388 22/50 current_auc = 0.3862433862433863
User 11388 AUC after training: 0.3862433862433863
User 11388 does not improve AUC. Reverting changes.
Training on augumented user 14900 23/50 current_auc = 0.3862433862433863
User 14900 AUC after training: 0.3862433862433863
User 14900 does not improve AUC. Reverting changes.
Training on augumented user 52018 24/50 current_auc = 0.3862433862433863
User 52018 AUC after training: 0.3862433862433863
User 52018 does not improve AUC. Reverting changes.
Training on augumented user 40935 25/50 current_auc = 0.3862433862433863
User 40935 AUC after training: 0.3862433862433863
User 40935 does not improve AUC. Reverting changes.
Training on augumented user 99366 26/50 current_auc = 0.3862433862433863
User 99366 AUC after training: 0.3862433862433863
User 99366 does not improve AUC. Reverting changes.
Training on augumented user 94473 27/50 current_auc = 0.3862433862433863
User 94473 AUC after training: 0.3862433862433863
User 94473 does not improve AUC. Reverting changes.
Training on augumented user 122990 28/50 current_auc = 0.3862433862433863
User 122990 AUC after training: 0.3862433862433863
User 122990 does not improve AUC. Reverting changes.
Training on augumented user 31922 29/50 current_auc = 0.3862433862433863
User 31922 AUC after training: 0.380952380952381
User 31922 does not improve AUC. Reverting changes.
Training on augumented user 102891 30/50 current_auc = 0.3862433862433863
User 102891 AUC after training: 0.3862433862433863
User 102891 does not improve AUC. Reverting changes.
Training on augumented user 6225 31/50 current_auc = 0.3862433862433863
User 6225 AUC after training: 0.380952380952381
User 6225 does not improve AUC. Reverting changes.
Training on augumented user 51994 32/50 current_auc = 0.3862433862433863
User 51994 AUC after training: 0.3862433862433863
User 51994 does not improve AUC. Reverting changes.
Training on augumented user 46949 33/50 current_auc = 0.3862433862433863
User 46949 AUC after training: 0.3862433862433863
User 46949 does not improve AUC. Reverting changes.
Training on augumented user 58564 34/50 current_auc = 0.3862433862433863
User 58564 AUC after training: 0.3862433862433863
User 58564 does not improve AUC. Reverting changes.
Training on augumented user 75692 35/50 current_auc = 0.3862433862433863
User 75692 AUC after training: 0.3862433862433863
User 75692 does not improve AUC. Reverting changes.
Training on augumented user 76768 36/50 current_auc = 0.3862433862433863
User 76768 AUC after training: 0.380952380952381
User 76768 does not improve AUC. Reverting changes.
Training on augumented user 2309 37/50 current_auc = 0.3862433862433863
User 2309 AUC after training: 0.3862433862433863
User 2309 does not improve AUC. Reverting changes.
Training on augumented user 27384 38/50 current_auc = 0.3862433862433863
User 27384 AUC after training: 0.3862433862433863
User 27384 does not improve AUC. Reverting changes.
Training on augumented user 27534 39/50 current_auc = 0.3862433862433863
User 27534 AUC after training: 0.3862433862433863
User 27534 does not improve AUC. Reverting changes.
Training on augumented user 30636 40/50 current_auc = 0.3862433862433863
User 30636 AUC after training: 0.3862433862433863
User 30636 does not improve AUC. Reverting changes.
Training on augumented user 4135 41/50 current_auc = 0.3862433862433863
User 4135 AUC after training: 0.3862433862433863
User 4135 does not improve AUC. Reverting changes.
Training on augumented user 102286 42/50 current_auc = 0.3862433862433863
User 102286 AUC after training: 0.3862433862433863
User 102286 does not improve AUC. Reverting changes.
Training on augumented user 91447 43/50 current_auc = 0.3862433862433863
User 91447 AUC after training: 0.3862433862433863
User 91447 does not improve AUC. Reverting changes.
Training on augumented user 41394 44/50 current_auc = 0.3862433862433863
User 41394 AUC after training: 0.3862433862433863
User 41394 does not improve AUC. Reverting changes.
Training on augumented user 7381 45/50 current_auc = 0.3862433862433863
User 7381 AUC after training: 0.3862433862433863
User 7381 does not improve AUC. Reverting changes.
Training on augumented user 63417 46/50 current_auc = 0.3862433862433863
User 63417 AUC after training: 0.3862433862433863
User 63417 does not improve AUC. Reverting changes.
Training on augumented user 67394 47/50 current_auc = 0.3862433862433863
User 67394 AUC after training: 0.3862433862433863
User 67394 does not improve AUC. Reverting changes.
Training on augumented user 76248 48/50 current_auc = 0.3862433862433863
User 76248 AUC after training: 0.3862433862433863
User 76248 does not improve AUC. Reverting changes.
Training on augumented user 120441 49/50 current_auc = 0.3862433862433863
User 120441 AUC after training: 0.3862433862433863
User 120441 does not improve AUC. Reverting changes.
[2024-12-02 19:27:11.778644] start test user 87360 202/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:27:12.320423] start test user 87360 202/568 recall augumented users by random, augumented_users = [62348, 54365, 28246, 43651, 49341, 31318, 44537, 65459, 36192, 95280, 104727, 61168, 57561, 32957, 131947, 56765, 62390, 69702, 43988, 109556, 4569, 42669, 101034, 49587, 83601, 3960, 19004, 30859, 16407, 58760, 18521, 134273, 116596, 136510, 118425, 13641, 88943, 75760, 54200, 109657, 70718, 79640, 124078, 27850, 122571, 48888, 99833, 36742, 79221, 86984]
[2024-12-02 19:27:12.335766] user = 87360 Cloud 202/568
[2024-12-02 19:27:12.345878] user = 87360 Local 202/568
[2024-12-02 19:27:12.397018] user = 87360 Local+ 202/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:27:15.317551] user = 87360 MPDA- 202/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.3525641025641026
Training on augumented user 62348 0/50 current_auc = 0.3525641025641026
User 62348 AUC after training: 0.3525641025641026
User 62348 does not improve AUC. Reverting changes.
Training on augumented user 54365 1/50 current_auc = 0.3525641025641026
User 54365 AUC after training: 0.3525641025641026
User 54365 does not improve AUC. Reverting changes.
Training on augumented user 28246 2/50 current_auc = 0.3525641025641026
User 28246 AUC after training: 0.3525641025641026
User 28246 does not improve AUC. Reverting changes.
Training on augumented user 43651 3/50 current_auc = 0.3525641025641026
User 43651 AUC after training: 0.3525641025641026
User 43651 does not improve AUC. Reverting changes.
Training on augumented user 49341 4/50 current_auc = 0.3525641025641026
User 49341 AUC after training: 0.3525641025641026
User 49341 does not improve AUC. Reverting changes.
Training on augumented user 31318 5/50 current_auc = 0.3525641025641026
User 31318 AUC after training: 0.3525641025641026
User 31318 does not improve AUC. Reverting changes.
Training on augumented user 44537 6/50 current_auc = 0.3525641025641026
User 44537 AUC after training: 0.3525641025641026
User 44537 does not improve AUC. Reverting changes.
Training on augumented user 65459 7/50 current_auc = 0.3525641025641026
User 65459 AUC after training: 0.3525641025641026
User 65459 does not improve AUC. Reverting changes.
Training on augumented user 36192 8/50 current_auc = 0.3525641025641026
User 36192 AUC after training: 0.3525641025641026
User 36192 does not improve AUC. Reverting changes.
Training on augumented user 95280 9/50 current_auc = 0.3525641025641026
User 95280 AUC after training: 0.3525641025641026
User 95280 does not improve AUC. Reverting changes.
Training on augumented user 104727 10/50 current_auc = 0.3525641025641026
User 104727 AUC after training: 0.3525641025641026
User 104727 does not improve AUC. Reverting changes.
Training on augumented user 61168 11/50 current_auc = 0.3525641025641026
User 61168 AUC after training: 0.3525641025641026
User 61168 does not improve AUC. Reverting changes.
Training on augumented user 57561 12/50 current_auc = 0.3525641025641026
User 57561 AUC after training: 0.3525641025641026
User 57561 does not improve AUC. Reverting changes.
Training on augumented user 32957 13/50 current_auc = 0.3525641025641026
User 32957 AUC after training: 0.3525641025641026
User 32957 does not improve AUC. Reverting changes.
Training on augumented user 131947 14/50 current_auc = 0.3525641025641026
User 131947 AUC after training: 0.3525641025641026
User 131947 does not improve AUC. Reverting changes.
Training on augumented user 56765 15/50 current_auc = 0.3525641025641026
User 56765 AUC after training: 0.3525641025641026
User 56765 does not improve AUC. Reverting changes.
Training on augumented user 62390 16/50 current_auc = 0.3525641025641026
User 62390 AUC after training: 0.3525641025641026
User 62390 does not improve AUC. Reverting changes.
Training on augumented user 69702 17/50 current_auc = 0.3525641025641026
User 69702 AUC after training: 0.3525641025641026
User 69702 does not improve AUC. Reverting changes.
Training on augumented user 43988 18/50 current_auc = 0.3525641025641026
User 43988 AUC after training: 0.3653846153846154
User 43988 improves AUC. Keeping the model.
Training on augumented user 109556 19/50 current_auc = 0.3653846153846154
User 109556 AUC after training: 0.3653846153846154
User 109556 does not improve AUC. Reverting changes.
Training on augumented user 4569 20/50 current_auc = 0.3653846153846154
User 4569 AUC after training: 0.3653846153846154
User 4569 does not improve AUC. Reverting changes.
Training on augumented user 42669 21/50 current_auc = 0.3653846153846154
User 42669 AUC after training: 0.3653846153846154
User 42669 does not improve AUC. Reverting changes.
Training on augumented user 101034 22/50 current_auc = 0.3653846153846154
User 101034 AUC after training: 0.3653846153846154
User 101034 does not improve AUC. Reverting changes.
Training on augumented user 49587 23/50 current_auc = 0.3653846153846154
User 49587 AUC after training: 0.3653846153846154
User 49587 does not improve AUC. Reverting changes.
Training on augumented user 83601 24/50 current_auc = 0.3653846153846154
User 83601 AUC after training: 0.3653846153846154
User 83601 does not improve AUC. Reverting changes.
Training on augumented user 3960 25/50 current_auc = 0.3653846153846154
User 3960 AUC after training: 0.3653846153846154
User 3960 does not improve AUC. Reverting changes.
Training on augumented user 19004 26/50 current_auc = 0.3653846153846154
User 19004 AUC after training: 0.3653846153846154
User 19004 does not improve AUC. Reverting changes.
Training on augumented user 30859 27/50 current_auc = 0.3653846153846154
User 30859 AUC after training: 0.3653846153846154
User 30859 does not improve AUC. Reverting changes.
Training on augumented user 16407 28/50 current_auc = 0.3653846153846154
User 16407 AUC after training: 0.3525641025641026
User 16407 does not improve AUC. Reverting changes.
Training on augumented user 58760 29/50 current_auc = 0.3653846153846154
User 58760 AUC after training: 0.3653846153846154
User 58760 does not improve AUC. Reverting changes.
Training on augumented user 18521 30/50 current_auc = 0.3653846153846154
User 18521 AUC after training: 0.3525641025641026
User 18521 does not improve AUC. Reverting changes.
Training on augumented user 134273 31/50 current_auc = 0.3653846153846154
User 134273 AUC after training: 0.3525641025641026
User 134273 does not improve AUC. Reverting changes.
Training on augumented user 116596 32/50 current_auc = 0.3653846153846154
User 116596 AUC after training: 0.3653846153846154
User 116596 does not improve AUC. Reverting changes.
Training on augumented user 136510 33/50 current_auc = 0.3653846153846154
User 136510 AUC after training: 0.3653846153846154
User 136510 does not improve AUC. Reverting changes.
Training on augumented user 118425 34/50 current_auc = 0.3653846153846154
User 118425 AUC after training: 0.3653846153846154
User 118425 does not improve AUC. Reverting changes.
Training on augumented user 13641 35/50 current_auc = 0.3653846153846154
User 13641 AUC after training: 0.3653846153846154
User 13641 does not improve AUC. Reverting changes.
Training on augumented user 88943 36/50 current_auc = 0.3653846153846154
User 88943 AUC after training: 0.3525641025641026
User 88943 does not improve AUC. Reverting changes.
Training on augumented user 75760 37/50 current_auc = 0.3653846153846154
User 75760 AUC after training: 0.3653846153846154
User 75760 does not improve AUC. Reverting changes.
Training on augumented user 54200 38/50 current_auc = 0.3653846153846154
User 54200 AUC after training: 0.3653846153846154
User 54200 does not improve AUC. Reverting changes.
Training on augumented user 109657 39/50 current_auc = 0.3653846153846154
User 109657 AUC after training: 0.3653846153846154
User 109657 does not improve AUC. Reverting changes.
Training on augumented user 70718 40/50 current_auc = 0.3653846153846154
User 70718 AUC after training: 0.3653846153846154
User 70718 does not improve AUC. Reverting changes.
Training on augumented user 79640 41/50 current_auc = 0.3653846153846154
User 79640 AUC after training: 0.3653846153846154
User 79640 does not improve AUC. Reverting changes.
Training on augumented user 124078 42/50 current_auc = 0.3653846153846154
User 124078 AUC after training: 0.3525641025641026
User 124078 does not improve AUC. Reverting changes.
Training on augumented user 27850 43/50 current_auc = 0.3653846153846154
User 27850 AUC after training: 0.3525641025641026
User 27850 does not improve AUC. Reverting changes.
Training on augumented user 122571 44/50 current_auc = 0.3653846153846154
User 122571 AUC after training: 0.3653846153846154
User 122571 does not improve AUC. Reverting changes.
Training on augumented user 48888 45/50 current_auc = 0.3653846153846154
User 48888 AUC after training: 0.3653846153846154
User 48888 does not improve AUC. Reverting changes.
Training on augumented user 99833 46/50 current_auc = 0.3653846153846154
User 99833 AUC after training: 0.3525641025641026
User 99833 does not improve AUC. Reverting changes.
Training on augumented user 36742 47/50 current_auc = 0.3653846153846154
User 36742 AUC after training: 0.3525641025641026
User 36742 does not improve AUC. Reverting changes.
Training on augumented user 79221 48/50 current_auc = 0.3653846153846154
User 79221 AUC after training: 0.3653846153846154
User 79221 does not improve AUC. Reverting changes.
Training on augumented user 86984 49/50 current_auc = 0.3653846153846154
User 86984 AUC after training: 0.3653846153846154
User 86984 does not improve AUC. Reverting changes.
[2024-12-02 19:27:42.717710] start test user 87383 203/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:27:43.146884] start test user 87383 203/568 recall augumented users by random, augumented_users = [128911, 116507, 103274, 137263, 85099, 9635, 115223, 112276, 77029, 117115, 63310, 8525, 134407, 716, 59317, 120442, 120246, 63504, 73501, 32940, 61577, 2647, 23114, 69539, 128235, 23870, 84346, 134905, 53349, 35187, 27065, 8662, 61862, 68295, 111044, 35337, 30208, 57890, 124651, 22186, 116739, 63914, 36520, 31776, 116413, 79336, 128863, 106378, 119022, 9738]
[2024-12-02 19:27:43.163112] user = 87383 Cloud 203/568
[2024-12-02 19:27:43.191105] user = 87383 Local 203/568
[2024-12-02 19:27:43.352693] user = 87383 Local+ 203/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:27:44.820147] user = 87383 MPDA- 203/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6558955895589559
Training on augumented user 128911 0/50 current_auc = 0.6558955895589559
User 128911 AUC after training: 0.6561656165616562
User 128911 improves AUC. Keeping the model.
Training on augumented user 116507 1/50 current_auc = 0.6561656165616562
User 116507 AUC after training: 0.6564356435643565
User 116507 improves AUC. Keeping the model.
Training on augumented user 103274 2/50 current_auc = 0.6564356435643565
User 103274 AUC after training: 0.6560756075607561
User 103274 does not improve AUC. Reverting changes.
Training on augumented user 137263 3/50 current_auc = 0.6564356435643565
User 137263 AUC after training: 0.6566156615661566
User 137263 improves AUC. Keeping the model.
Training on augumented user 85099 4/50 current_auc = 0.6566156615661566
User 85099 AUC after training: 0.6564356435643565
User 85099 does not improve AUC. Reverting changes.
Training on augumented user 9635 5/50 current_auc = 0.6566156615661566
User 9635 AUC after training: 0.6565256525652564
User 9635 does not improve AUC. Reverting changes.
Training on augumented user 115223 6/50 current_auc = 0.6566156615661566
User 115223 AUC after training: 0.6564356435643565
User 115223 does not improve AUC. Reverting changes.
Training on augumented user 112276 7/50 current_auc = 0.6566156615661566
User 112276 AUC after training: 0.6567956795679569
User 112276 improves AUC. Keeping the model.
Training on augumented user 77029 8/50 current_auc = 0.6567956795679569
User 77029 AUC after training: 0.6563456345634564
User 77029 does not improve AUC. Reverting changes.
Training on augumented user 117115 9/50 current_auc = 0.6567956795679569
User 117115 AUC after training: 0.6567956795679568
User 117115 does not improve AUC. Reverting changes.
Training on augumented user 63310 10/50 current_auc = 0.6567956795679569
User 63310 AUC after training: 0.6562556255625563
User 63310 does not improve AUC. Reverting changes.
Training on augumented user 8525 11/50 current_auc = 0.6567956795679569
User 8525 AUC after training: 0.6565256525652565
User 8525 does not improve AUC. Reverting changes.
Training on augumented user 134407 12/50 current_auc = 0.6567956795679569
User 134407 AUC after training: 0.6558955895589559
User 134407 does not improve AUC. Reverting changes.
Training on augumented user 716 13/50 current_auc = 0.6567956795679569
User 716 AUC after training: 0.6563456345634563
User 716 does not improve AUC. Reverting changes.
Training on augumented user 59317 14/50 current_auc = 0.6567956795679569
User 59317 AUC after training: 0.6555355535553555
User 59317 does not improve AUC. Reverting changes.
Training on augumented user 120442 15/50 current_auc = 0.6567956795679569
User 120442 AUC after training: 0.6558955895589559
User 120442 does not improve AUC. Reverting changes.
Training on augumented user 120246 16/50 current_auc = 0.6567956795679569
User 120246 AUC after training: 0.6557155715571558
User 120246 does not improve AUC. Reverting changes.
Training on augumented user 63504 17/50 current_auc = 0.6567956795679569
User 63504 AUC after training: 0.6560756075607561
User 63504 does not improve AUC. Reverting changes.
Training on augumented user 73501 18/50 current_auc = 0.6567956795679569
User 73501 AUC after training: 0.6559855985598559
User 73501 does not improve AUC. Reverting changes.
Training on augumented user 32940 19/50 current_auc = 0.6567956795679569
User 32940 AUC after training: 0.6562556255625563
User 32940 does not improve AUC. Reverting changes.
Training on augumented user 61577 20/50 current_auc = 0.6567956795679569
User 61577 AUC after training: 0.6567056705670568
User 61577 does not improve AUC. Reverting changes.
Training on augumented user 2647 21/50 current_auc = 0.6567956795679569
User 2647 AUC after training: 0.6560756075607561
User 2647 does not improve AUC. Reverting changes.
Training on augumented user 23114 22/50 current_auc = 0.6567956795679569
User 23114 AUC after training: 0.6558955895589559
User 23114 does not improve AUC. Reverting changes.
Training on augumented user 69539 23/50 current_auc = 0.6567956795679569
User 69539 AUC after training: 0.6567056705670568
User 69539 does not improve AUC. Reverting changes.
Training on augumented user 128235 24/50 current_auc = 0.6567956795679569
User 128235 AUC after training: 0.6567056705670568
User 128235 does not improve AUC. Reverting changes.
Training on augumented user 23870 25/50 current_auc = 0.6567956795679569
User 23870 AUC after training: 0.6561656165616562
User 23870 does not improve AUC. Reverting changes.
Training on augumented user 84346 26/50 current_auc = 0.6567956795679569
User 84346 AUC after training: 0.6567056705670568
User 84346 does not improve AUC. Reverting changes.
Training on augumented user 134905 27/50 current_auc = 0.6567956795679569
User 134905 AUC after training: 0.6570657065706571
User 134905 improves AUC. Keeping the model.
Training on augumented user 53349 28/50 current_auc = 0.6570657065706571
User 53349 AUC after training: 0.6567056705670568
User 53349 does not improve AUC. Reverting changes.
Training on augumented user 35187 29/50 current_auc = 0.6570657065706571
User 35187 AUC after training: 0.6567956795679568
User 35187 does not improve AUC. Reverting changes.
Training on augumented user 27065 30/50 current_auc = 0.6570657065706571
User 27065 AUC after training: 0.6562556255625563
User 27065 does not improve AUC. Reverting changes.
Training on augumented user 8662 31/50 current_auc = 0.6570657065706571
User 8662 AUC after training: 0.6564356435643565
User 8662 does not improve AUC. Reverting changes.
Training on augumented user 61862 32/50 current_auc = 0.6570657065706571
User 61862 AUC after training: 0.6565256525652565
User 61862 does not improve AUC. Reverting changes.
Training on augumented user 68295 33/50 current_auc = 0.6570657065706571
User 68295 AUC after training: 0.6568856885688569
User 68295 does not improve AUC. Reverting changes.
Training on augumented user 111044 34/50 current_auc = 0.6570657065706571
User 111044 AUC after training: 0.6567056705670568
User 111044 does not improve AUC. Reverting changes.
Training on augumented user 35337 35/50 current_auc = 0.6570657065706571
User 35337 AUC after training: 0.6571557155715573
User 35337 improves AUC. Keeping the model.
Training on augumented user 30208 36/50 current_auc = 0.6571557155715573
User 30208 AUC after training: 0.6574257425742575
User 30208 improves AUC. Keeping the model.
Training on augumented user 57890 37/50 current_auc = 0.6574257425742575
User 57890 AUC after training: 0.6575157515751575
User 57890 improves AUC. Keeping the model.
Training on augumented user 124651 38/50 current_auc = 0.6575157515751575
User 124651 AUC after training: 0.6575157515751575
User 124651 does not improve AUC. Reverting changes.
Training on augumented user 22186 39/50 current_auc = 0.6575157515751575
User 22186 AUC after training: 0.6575157515751575
User 22186 does not improve AUC. Reverting changes.
Training on augumented user 116739 40/50 current_auc = 0.6575157515751575
User 116739 AUC after training: 0.6576057605760577
User 116739 improves AUC. Keeping the model.
Training on augumented user 63914 41/50 current_auc = 0.6576057605760577
User 63914 AUC after training: 0.657065706570657
User 63914 does not improve AUC. Reverting changes.
Training on augumented user 36520 42/50 current_auc = 0.6576057605760577
User 36520 AUC after training: 0.6575157515751575
User 36520 does not improve AUC. Reverting changes.
Training on augumented user 31776 43/50 current_auc = 0.6576057605760577
User 31776 AUC after training: 0.6568856885688569
User 31776 does not improve AUC. Reverting changes.
Training on augumented user 116413 44/50 current_auc = 0.6576057605760577
User 116413 AUC after training: 0.656975697569757
User 116413 does not improve AUC. Reverting changes.
Training on augumented user 79336 45/50 current_auc = 0.6576057605760577
User 79336 AUC after training: 0.6564356435643565
User 79336 does not improve AUC. Reverting changes.
Training on augumented user 128863 46/50 current_auc = 0.6576057605760577
User 128863 AUC after training: 0.6576957695769577
User 128863 improves AUC. Keeping the model.
Training on augumented user 106378 47/50 current_auc = 0.6576957695769577
User 106378 AUC after training: 0.6577857785778578
User 106378 improves AUC. Keeping the model.
Training on augumented user 119022 48/50 current_auc = 0.6577857785778578
User 119022 AUC after training: 0.6576957695769577
User 119022 does not improve AUC. Reverting changes.
Training on augumented user 9738 49/50 current_auc = 0.6577857785778578
User 9738 AUC after training: 0.6582358235823581
User 9738 improves AUC. Keeping the model.
[2024-12-02 19:28:10.974935] start test user 87385 204/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:28:11.371858] start test user 87385 204/568 recall augumented users by random, augumented_users = [26508, 93774, 27750, 126476, 132141, 93792, 78150, 22055, 79770, 54946, 113529, 81368, 108365, 32944, 10156, 26592, 5454, 68107, 8759, 110616, 17766, 96677, 30129, 50524, 111218, 82064, 128095, 75286, 22379, 21065, 108227, 33945, 112371, 116369, 132883, 23235, 63416, 105439, 63275, 52452, 49924, 59710, 85873, 56033, 18058, 128460, 109580, 56473, 7746, 112868]
[2024-12-02 19:28:11.386505] user = 87385 Cloud 204/568
[2024-12-02 19:28:11.395716] user = 87385 Local 204/568
[2024-12-02 19:28:11.420610] user = 87385 Local+ 204/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:28:13.732772] user = 87385 MPDA- 204/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.9
Training on augumented user 26508 0/50 current_auc = 0.9
User 26508 AUC after training: 0.9
User 26508 does not improve AUC. Reverting changes.
Training on augumented user 93774 1/50 current_auc = 0.9
User 93774 AUC after training: 0.9
User 93774 does not improve AUC. Reverting changes.
Training on augumented user 27750 2/50 current_auc = 0.9
User 27750 AUC after training: 0.9
User 27750 does not improve AUC. Reverting changes.
Training on augumented user 126476 3/50 current_auc = 0.9
User 126476 AUC after training: 0.9
User 126476 does not improve AUC. Reverting changes.
Training on augumented user 132141 4/50 current_auc = 0.9
User 132141 AUC after training: 0.9
User 132141 does not improve AUC. Reverting changes.
Training on augumented user 93792 5/50 current_auc = 0.9
User 93792 AUC after training: 0.9
User 93792 does not improve AUC. Reverting changes.
Training on augumented user 78150 6/50 current_auc = 0.9
User 78150 AUC after training: 0.9
User 78150 does not improve AUC. Reverting changes.
Training on augumented user 22055 7/50 current_auc = 0.9
User 22055 AUC after training: 0.9
User 22055 does not improve AUC. Reverting changes.
Training on augumented user 79770 8/50 current_auc = 0.9
User 79770 AUC after training: 0.9
User 79770 does not improve AUC. Reverting changes.
Training on augumented user 54946 9/50 current_auc = 0.9
User 54946 AUC after training: 0.8
User 54946 does not improve AUC. Reverting changes.
Training on augumented user 113529 10/50 current_auc = 0.9
User 113529 AUC after training: 0.9
User 113529 does not improve AUC. Reverting changes.
Training on augumented user 81368 11/50 current_auc = 0.9
User 81368 AUC after training: 0.9
User 81368 does not improve AUC. Reverting changes.
Training on augumented user 108365 12/50 current_auc = 0.9
User 108365 AUC after training: 0.9
User 108365 does not improve AUC. Reverting changes.
Training on augumented user 32944 13/50 current_auc = 0.9
User 32944 AUC after training: 0.9
User 32944 does not improve AUC. Reverting changes.
Training on augumented user 10156 14/50 current_auc = 0.9
User 10156 AUC after training: 0.9
User 10156 does not improve AUC. Reverting changes.
Training on augumented user 26592 15/50 current_auc = 0.9
User 26592 AUC after training: 0.9
User 26592 does not improve AUC. Reverting changes.
Training on augumented user 5454 16/50 current_auc = 0.9
User 5454 AUC after training: 0.9
User 5454 does not improve AUC. Reverting changes.
Training on augumented user 68107 17/50 current_auc = 0.9
User 68107 AUC after training: 0.9
User 68107 does not improve AUC. Reverting changes.
Training on augumented user 8759 18/50 current_auc = 0.9
User 8759 AUC after training: 0.9
User 8759 does not improve AUC. Reverting changes.
Training on augumented user 110616 19/50 current_auc = 0.9
User 110616 AUC after training: 0.9
User 110616 does not improve AUC. Reverting changes.
Training on augumented user 17766 20/50 current_auc = 0.9
User 17766 AUC after training: 0.9
User 17766 does not improve AUC. Reverting changes.
Training on augumented user 96677 21/50 current_auc = 0.9
User 96677 AUC after training: 0.9
User 96677 does not improve AUC. Reverting changes.
Training on augumented user 30129 22/50 current_auc = 0.9
User 30129 AUC after training: 0.9
User 30129 does not improve AUC. Reverting changes.
Training on augumented user 50524 23/50 current_auc = 0.9
User 50524 AUC after training: 0.9
User 50524 does not improve AUC. Reverting changes.
Training on augumented user 111218 24/50 current_auc = 0.9
User 111218 AUC after training: 0.9
User 111218 does not improve AUC. Reverting changes.
Training on augumented user 82064 25/50 current_auc = 0.9
User 82064 AUC after training: 0.9
User 82064 does not improve AUC. Reverting changes.
Training on augumented user 128095 26/50 current_auc = 0.9
User 128095 AUC after training: 0.9
User 128095 does not improve AUC. Reverting changes.
Training on augumented user 75286 27/50 current_auc = 0.9
User 75286 AUC after training: 0.9
User 75286 does not improve AUC. Reverting changes.
Training on augumented user 22379 28/50 current_auc = 0.9
User 22379 AUC after training: 0.9
User 22379 does not improve AUC. Reverting changes.
Training on augumented user 21065 29/50 current_auc = 0.9
User 21065 AUC after training: 0.9
User 21065 does not improve AUC. Reverting changes.
Training on augumented user 108227 30/50 current_auc = 0.9
User 108227 AUC after training: 0.9
User 108227 does not improve AUC. Reverting changes.
Training on augumented user 33945 31/50 current_auc = 0.9
User 33945 AUC after training: 0.9
User 33945 does not improve AUC. Reverting changes.
Training on augumented user 112371 32/50 current_auc = 0.9
User 112371 AUC after training: 0.9
User 112371 does not improve AUC. Reverting changes.
Training on augumented user 116369 33/50 current_auc = 0.9
User 116369 AUC after training: 0.9
User 116369 does not improve AUC. Reverting changes.
Training on augumented user 132883 34/50 current_auc = 0.9
User 132883 AUC after training: 0.9
User 132883 does not improve AUC. Reverting changes.
Training on augumented user 23235 35/50 current_auc = 0.9
User 23235 AUC after training: 0.9
User 23235 does not improve AUC. Reverting changes.
Training on augumented user 63416 36/50 current_auc = 0.9
User 63416 AUC after training: 0.9
User 63416 does not improve AUC. Reverting changes.
Training on augumented user 105439 37/50 current_auc = 0.9
User 105439 AUC after training: 0.9
User 105439 does not improve AUC. Reverting changes.
Training on augumented user 63275 38/50 current_auc = 0.9
User 63275 AUC after training: 0.9
User 63275 does not improve AUC. Reverting changes.
Training on augumented user 52452 39/50 current_auc = 0.9
User 52452 AUC after training: 0.9
User 52452 does not improve AUC. Reverting changes.
Training on augumented user 49924 40/50 current_auc = 0.9
User 49924 AUC after training: 0.9
User 49924 does not improve AUC. Reverting changes.
Training on augumented user 59710 41/50 current_auc = 0.9
User 59710 AUC after training: 0.9
User 59710 does not improve AUC. Reverting changes.
Training on augumented user 85873 42/50 current_auc = 0.9
User 85873 AUC after training: 0.9
User 85873 does not improve AUC. Reverting changes.
Training on augumented user 56033 43/50 current_auc = 0.9
User 56033 AUC after training: 0.9
User 56033 does not improve AUC. Reverting changes.
Training on augumented user 18058 44/50 current_auc = 0.9
User 18058 AUC after training: 0.8
User 18058 does not improve AUC. Reverting changes.
Training on augumented user 128460 45/50 current_auc = 0.9
User 128460 AUC after training: 0.9
User 128460 does not improve AUC. Reverting changes.
Training on augumented user 109580 46/50 current_auc = 0.9
User 109580 AUC after training: 0.9
User 109580 does not improve AUC. Reverting changes.
Training on augumented user 56473 47/50 current_auc = 0.9
User 56473 AUC after training: 0.9
User 56473 does not improve AUC. Reverting changes.
Training on augumented user 7746 48/50 current_auc = 0.9
User 7746 AUC after training: 0.9
User 7746 does not improve AUC. Reverting changes.
Training on augumented user 112868 49/50 current_auc = 0.9
User 112868 AUC after training: 0.9
User 112868 does not improve AUC. Reverting changes.
[2024-12-02 19:28:41.353447] start test user 87405 205/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:28:42.023345] start test user 87405 205/568 recall augumented users by random, augumented_users = [102320, 99902, 53802, 37807, 59682, 29447, 27902, 76501, 60680, 74175, 36329, 77806, 1565, 40789, 58085, 86715, 8104, 47031, 135045, 52179, 21652, 71258, 99098, 63806, 19877, 124889, 94149, 114585, 105267, 76716, 121499, 12073, 78423, 31488, 114850, 61751, 23447, 76663, 86764, 136960, 126259, 127233, 122701, 98404, 18714, 88678, 134508, 115168, 135655, 81882]
[2024-12-02 19:28:42.040145] user = 87405 Cloud 205/568
[2024-12-02 19:28:42.050617] user = 87405 Local 205/568
[2024-12-02 19:28:42.108611] user = 87405 Local+ 205/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:28:44.993117] user = 87405 MPDA- 205/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8181818181818182
Training on augumented user 102320 0/50 current_auc = 0.8181818181818182
User 102320 AUC after training: 0.8181818181818182
User 102320 does not improve AUC. Reverting changes.
Training on augumented user 99902 1/50 current_auc = 0.8181818181818182
User 99902 AUC after training: 0.8181818181818182
User 99902 does not improve AUC. Reverting changes.
Training on augumented user 53802 2/50 current_auc = 0.8181818181818182
User 53802 AUC after training: 0.8181818181818182
User 53802 does not improve AUC. Reverting changes.
Training on augumented user 37807 3/50 current_auc = 0.8181818181818182
User 37807 AUC after training: 0.8181818181818182
User 37807 does not improve AUC. Reverting changes.
Training on augumented user 59682 4/50 current_auc = 0.8181818181818182
User 59682 AUC after training: 0.8181818181818182
User 59682 does not improve AUC. Reverting changes.
Training on augumented user 29447 5/50 current_auc = 0.8181818181818182
User 29447 AUC after training: 0.8181818181818182
User 29447 does not improve AUC. Reverting changes.
Training on augumented user 27902 6/50 current_auc = 0.8181818181818182
User 27902 AUC after training: 0.8181818181818182
User 27902 does not improve AUC. Reverting changes.
Training on augumented user 76501 7/50 current_auc = 0.8181818181818182
User 76501 AUC after training: 0.8181818181818182
User 76501 does not improve AUC. Reverting changes.
Training on augumented user 60680 8/50 current_auc = 0.8181818181818182
User 60680 AUC after training: 0.8181818181818182
User 60680 does not improve AUC. Reverting changes.
Training on augumented user 74175 9/50 current_auc = 0.8181818181818182
User 74175 AUC after training: 0.8181818181818182
User 74175 does not improve AUC. Reverting changes.
Training on augumented user 36329 10/50 current_auc = 0.8181818181818182
User 36329 AUC after training: 0.8181818181818182
User 36329 does not improve AUC. Reverting changes.
Training on augumented user 77806 11/50 current_auc = 0.8181818181818182
User 77806 AUC after training: 0.8181818181818182
User 77806 does not improve AUC. Reverting changes.
Training on augumented user 1565 12/50 current_auc = 0.8181818181818182
User 1565 AUC after training: 0.8181818181818182
User 1565 does not improve AUC. Reverting changes.
Training on augumented user 40789 13/50 current_auc = 0.8181818181818182
User 40789 AUC after training: 0.8181818181818182
User 40789 does not improve AUC. Reverting changes.
Training on augumented user 58085 14/50 current_auc = 0.8181818181818182
User 58085 AUC after training: 0.8181818181818182
User 58085 does not improve AUC. Reverting changes.
Training on augumented user 86715 15/50 current_auc = 0.8181818181818182
User 86715 AUC after training: 0.8181818181818182
User 86715 does not improve AUC. Reverting changes.
Training on augumented user 8104 16/50 current_auc = 0.8181818181818182
User 8104 AUC after training: 0.8181818181818182
User 8104 does not improve AUC. Reverting changes.
Training on augumented user 47031 17/50 current_auc = 0.8181818181818182
User 47031 AUC after training: 0.8181818181818182
User 47031 does not improve AUC. Reverting changes.
Training on augumented user 135045 18/50 current_auc = 0.8181818181818182
User 135045 AUC after training: 0.8181818181818182
User 135045 does not improve AUC. Reverting changes.
Training on augumented user 52179 19/50 current_auc = 0.8181818181818182
User 52179 AUC after training: 0.8181818181818182
User 52179 does not improve AUC. Reverting changes.
Training on augumented user 21652 20/50 current_auc = 0.8181818181818182
User 21652 AUC after training: 0.8181818181818182
User 21652 does not improve AUC. Reverting changes.
Training on augumented user 71258 21/50 current_auc = 0.8181818181818182
User 71258 AUC after training: 0.8181818181818182
User 71258 does not improve AUC. Reverting changes.
Training on augumented user 99098 22/50 current_auc = 0.8181818181818182
User 99098 AUC after training: 0.8181818181818182
User 99098 does not improve AUC. Reverting changes.
Training on augumented user 63806 23/50 current_auc = 0.8181818181818182
User 63806 AUC after training: 0.8181818181818182
User 63806 does not improve AUC. Reverting changes.
Training on augumented user 19877 24/50 current_auc = 0.8181818181818182
User 19877 AUC after training: 0.8181818181818182
User 19877 does not improve AUC. Reverting changes.
Training on augumented user 124889 25/50 current_auc = 0.8181818181818182
User 124889 AUC after training: 0.8181818181818182
User 124889 does not improve AUC. Reverting changes.
Training on augumented user 94149 26/50 current_auc = 0.8181818181818182
User 94149 AUC after training: 0.8181818181818182
User 94149 does not improve AUC. Reverting changes.
Training on augumented user 114585 27/50 current_auc = 0.8181818181818182
User 114585 AUC after training: 0.8181818181818182
User 114585 does not improve AUC. Reverting changes.
Training on augumented user 105267 28/50 current_auc = 0.8181818181818182
User 105267 AUC after training: 0.8181818181818182
User 105267 does not improve AUC. Reverting changes.
Training on augumented user 76716 29/50 current_auc = 0.8181818181818182
User 76716 AUC after training: 0.8181818181818182
User 76716 does not improve AUC. Reverting changes.
Training on augumented user 121499 30/50 current_auc = 0.8181818181818182
User 121499 AUC after training: 0.8181818181818182
User 121499 does not improve AUC. Reverting changes.
Training on augumented user 12073 31/50 current_auc = 0.8181818181818182
User 12073 AUC after training: 0.8181818181818182
User 12073 does not improve AUC. Reverting changes.
Training on augumented user 78423 32/50 current_auc = 0.8181818181818182
User 78423 AUC after training: 0.8181818181818182
User 78423 does not improve AUC. Reverting changes.
Training on augumented user 31488 33/50 current_auc = 0.8181818181818182
User 31488 AUC after training: 0.8181818181818182
User 31488 does not improve AUC. Reverting changes.
Training on augumented user 114850 34/50 current_auc = 0.8181818181818182
User 114850 AUC after training: 0.8181818181818182
User 114850 does not improve AUC. Reverting changes.
Training on augumented user 61751 35/50 current_auc = 0.8181818181818182
User 61751 AUC after training: 0.8181818181818182
User 61751 does not improve AUC. Reverting changes.
Training on augumented user 23447 36/50 current_auc = 0.8181818181818182
User 23447 AUC after training: 0.8181818181818182
User 23447 does not improve AUC. Reverting changes.
Training on augumented user 76663 37/50 current_auc = 0.8181818181818182
User 76663 AUC after training: 0.8181818181818182
User 76663 does not improve AUC. Reverting changes.
Training on augumented user 86764 38/50 current_auc = 0.8181818181818182
User 86764 AUC after training: 0.8181818181818182
User 86764 does not improve AUC. Reverting changes.
Training on augumented user 136960 39/50 current_auc = 0.8181818181818182
User 136960 AUC after training: 0.8181818181818182
User 136960 does not improve AUC. Reverting changes.
Training on augumented user 126259 40/50 current_auc = 0.8181818181818182
User 126259 AUC after training: 0.8181818181818182
User 126259 does not improve AUC. Reverting changes.
Training on augumented user 127233 41/50 current_auc = 0.8181818181818182
User 127233 AUC after training: 0.8181818181818182
User 127233 does not improve AUC. Reverting changes.
Training on augumented user 122701 42/50 current_auc = 0.8181818181818182
User 122701 AUC after training: 0.8181818181818182
User 122701 does not improve AUC. Reverting changes.
Training on augumented user 98404 43/50 current_auc = 0.8181818181818182
User 98404 AUC after training: 0.8181818181818182
User 98404 does not improve AUC. Reverting changes.
Training on augumented user 18714 44/50 current_auc = 0.8181818181818182
User 18714 AUC after training: 0.8181818181818182
User 18714 does not improve AUC. Reverting changes.
Training on augumented user 88678 45/50 current_auc = 0.8181818181818182
User 88678 AUC after training: 0.8181818181818182
User 88678 does not improve AUC. Reverting changes.
Training on augumented user 134508 46/50 current_auc = 0.8181818181818182
User 134508 AUC after training: 0.8181818181818182
User 134508 does not improve AUC. Reverting changes.
Training on augumented user 115168 47/50 current_auc = 0.8181818181818182
User 115168 AUC after training: 0.8181818181818182
User 115168 does not improve AUC. Reverting changes.
Training on augumented user 135655 48/50 current_auc = 0.8181818181818182
User 135655 AUC after training: 0.8181818181818182
User 135655 does not improve AUC. Reverting changes.
Training on augumented user 81882 49/50 current_auc = 0.8181818181818182
User 81882 AUC after training: 0.8181818181818182
User 81882 does not improve AUC. Reverting changes.
[2024-12-02 19:29:10.326961] start test user 87416 206/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:29:10.744322] start test user 87416 206/568 recall augumented users by random, augumented_users = [88124, 28118, 136543, 47098, 24400, 49698, 112772, 50125, 29641, 31358, 63449, 41325, 31211, 56930, 34107, 125564, 1937, 83922, 11492, 43285, 72946, 94448, 65620, 106955, 57561, 132889, 61111, 29731, 27207, 69760, 4967, 30313, 33129, 22884, 88026, 61287, 34560, 7577, 116202, 85306, 47526, 74012, 122671, 35772, 37465, 14071, 46081, 28761, 30184, 113377]
[2024-12-02 19:29:10.759768] user = 87416 Cloud 206/568
[2024-12-02 19:29:10.774672] user = 87416 Local 206/568
[2024-12-02 19:29:10.868401] user = 87416 Local+ 206/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:29:13.059094] user = 87416 MPDA- 206/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4642857142857143
Training on augumented user 88124 0/50 current_auc = 0.4642857142857143
User 88124 AUC after training: 0.4624384236453202
User 88124 does not improve AUC. Reverting changes.
Training on augumented user 28118 1/50 current_auc = 0.4642857142857143
User 28118 AUC after training: 0.4636699507389163
User 28118 does not improve AUC. Reverting changes.
Training on augumented user 136543 2/50 current_auc = 0.4642857142857143
User 136543 AUC after training: 0.46059113300492616
User 136543 does not improve AUC. Reverting changes.
Training on augumented user 47098 3/50 current_auc = 0.4642857142857143
User 47098 AUC after training: 0.46674876847290636
User 47098 improves AUC. Keeping the model.
Training on augumented user 24400 4/50 current_auc = 0.46674876847290636
User 24400 AUC after training: 0.46798029556650245
User 24400 improves AUC. Keeping the model.
Training on augumented user 49698 5/50 current_auc = 0.46798029556650245
User 49698 AUC after training: 0.46798029556650245
User 49698 does not improve AUC. Reverting changes.
Training on augumented user 112772 6/50 current_auc = 0.46798029556650245
User 112772 AUC after training: 0.4673645320197044
User 112772 does not improve AUC. Reverting changes.
Training on augumented user 50125 7/50 current_auc = 0.46798029556650245
User 50125 AUC after training: 0.4642857142857143
User 50125 does not improve AUC. Reverting changes.
Training on augumented user 29641 8/50 current_auc = 0.46798029556650245
User 29641 AUC after training: 0.4661330049261084
User 29641 does not improve AUC. Reverting changes.
Training on augumented user 31358 9/50 current_auc = 0.46798029556650245
User 31358 AUC after training: 0.4667487684729064
User 31358 does not improve AUC. Reverting changes.
Training on augumented user 63449 10/50 current_auc = 0.46798029556650245
User 63449 AUC after training: 0.46551724137931033
User 63449 does not improve AUC. Reverting changes.
Training on augumented user 41325 11/50 current_auc = 0.46798029556650245
User 41325 AUC after training: 0.4704433497536946
User 41325 improves AUC. Keeping the model.
Training on augumented user 31211 12/50 current_auc = 0.4704433497536946
User 31211 AUC after training: 0.4685960591133005
User 31211 does not improve AUC. Reverting changes.
Training on augumented user 56930 13/50 current_auc = 0.4704433497536946
User 56930 AUC after training: 0.4710591133004926
User 56930 improves AUC. Keeping the model.
Training on augumented user 34107 14/50 current_auc = 0.4710591133004926
User 34107 AUC after training: 0.4735221674876847
User 34107 improves AUC. Keeping the model.
Training on augumented user 125564 15/50 current_auc = 0.4735221674876847
User 125564 AUC after training: 0.47229064039408863
User 125564 does not improve AUC. Reverting changes.
Training on augumented user 1937 16/50 current_auc = 0.4735221674876847
User 1937 AUC after training: 0.4704433497536946
User 1937 does not improve AUC. Reverting changes.
Training on augumented user 83922 17/50 current_auc = 0.4735221674876847
User 83922 AUC after training: 0.47044334975369456
User 83922 does not improve AUC. Reverting changes.
Training on augumented user 11492 18/50 current_auc = 0.4735221674876847
User 11492 AUC after training: 0.47167487684729065
User 11492 does not improve AUC. Reverting changes.
Training on augumented user 43285 19/50 current_auc = 0.4735221674876847
User 43285 AUC after training: 0.47413793103448276
User 43285 improves AUC. Keeping the model.
Training on augumented user 72946 20/50 current_auc = 0.47413793103448276
User 72946 AUC after training: 0.4673645320197044
User 72946 does not improve AUC. Reverting changes.
Training on augumented user 94448 21/50 current_auc = 0.47413793103448276
User 94448 AUC after training: 0.4735221674876848
User 94448 does not improve AUC. Reverting changes.
Training on augumented user 65620 22/50 current_auc = 0.47413793103448276
User 65620 AUC after training: 0.47475369458128075
User 65620 improves AUC. Keeping the model.
Training on augumented user 106955 23/50 current_auc = 0.47475369458128075
User 106955 AUC after training: 0.47229064039408863
User 106955 does not improve AUC. Reverting changes.
Training on augumented user 57561 24/50 current_auc = 0.47475369458128075
User 57561 AUC after training: 0.4685960591133005
User 57561 does not improve AUC. Reverting changes.
Training on augumented user 132889 25/50 current_auc = 0.47475369458128075
User 132889 AUC after training: 0.4716748768472906
User 132889 does not improve AUC. Reverting changes.
Training on augumented user 61111 26/50 current_auc = 0.47475369458128075
User 61111 AUC after training: 0.47598522167487683
User 61111 improves AUC. Keeping the model.
Training on augumented user 29731 27/50 current_auc = 0.47598522167487683
User 29731 AUC after training: 0.47475369458128075
User 29731 does not improve AUC. Reverting changes.
Training on augumented user 27207 28/50 current_auc = 0.47598522167487683
User 27207 AUC after training: 0.4710591133004926
User 27207 does not improve AUC. Reverting changes.
Training on augumented user 69760 29/50 current_auc = 0.47598522167487683
User 69760 AUC after training: 0.47475369458128075
User 69760 does not improve AUC. Reverting changes.
Training on augumented user 4967 30/50 current_auc = 0.47598522167487683
User 4967 AUC after training: 0.46798029556650256
User 4967 does not improve AUC. Reverting changes.
Training on augumented user 30313 31/50 current_auc = 0.47598522167487683
User 30313 AUC after training: 0.4753694581280788
User 30313 does not improve AUC. Reverting changes.
Training on augumented user 33129 32/50 current_auc = 0.47598522167487683
User 33129 AUC after training: 0.47044334975369456
User 33129 does not improve AUC. Reverting changes.
Training on augumented user 22884 33/50 current_auc = 0.47598522167487683
User 22884 AUC after training: 0.4747536945812808
User 22884 does not improve AUC. Reverting changes.
Training on augumented user 88026 34/50 current_auc = 0.47598522167487683
User 88026 AUC after training: 0.4735221674876847
User 88026 does not improve AUC. Reverting changes.
Training on augumented user 61287 35/50 current_auc = 0.47598522167487683
User 61287 AUC after training: 0.4735221674876847
User 61287 does not improve AUC. Reverting changes.
Training on augumented user 34560 36/50 current_auc = 0.47598522167487683
User 34560 AUC after training: 0.47475369458128075
User 34560 does not improve AUC. Reverting changes.
Training on augumented user 7577 37/50 current_auc = 0.47598522167487683
User 7577 AUC after training: 0.4729064039408867
User 7577 does not improve AUC. Reverting changes.
Training on augumented user 116202 38/50 current_auc = 0.47598522167487683
User 116202 AUC after training: 0.47536945812807885
User 116202 does not improve AUC. Reverting changes.
Training on augumented user 85306 39/50 current_auc = 0.47598522167487683
User 85306 AUC after training: 0.4741379310344827
User 85306 does not improve AUC. Reverting changes.
Training on augumented user 47526 40/50 current_auc = 0.47598522167487683
User 47526 AUC after training: 0.4735221674876848
User 47526 does not improve AUC. Reverting changes.
Training on augumented user 74012 41/50 current_auc = 0.47598522167487683
User 74012 AUC after training: 0.47475369458128075
User 74012 does not improve AUC. Reverting changes.
Training on augumented user 122671 42/50 current_auc = 0.47598522167487683
User 122671 AUC after training: 0.47598522167487683
User 122671 does not improve AUC. Reverting changes.
Training on augumented user 35772 43/50 current_auc = 0.47598522167487683
User 35772 AUC after training: 0.47844827586206895
User 35772 improves AUC. Keeping the model.
Training on augumented user 37465 44/50 current_auc = 0.47844827586206895
User 37465 AUC after training: 0.4753694581280788
User 37465 does not improve AUC. Reverting changes.
Training on augumented user 14071 45/50 current_auc = 0.47844827586206895
User 14071 AUC after training: 0.4722906403940887
User 14071 does not improve AUC. Reverting changes.
Training on augumented user 46081 46/50 current_auc = 0.47844827586206895
User 46081 AUC after training: 0.4753694581280788
User 46081 does not improve AUC. Reverting changes.
Training on augumented user 28761 47/50 current_auc = 0.47844827586206895
User 28761 AUC after training: 0.47721674876847286
User 28761 does not improve AUC. Reverting changes.
Training on augumented user 30184 48/50 current_auc = 0.47844827586206895
User 30184 AUC after training: 0.4735221674876847
User 30184 does not improve AUC. Reverting changes.
Training on augumented user 113377 49/50 current_auc = 0.47844827586206895
User 113377 AUC after training: 0.47413793103448276
User 113377 does not improve AUC. Reverting changes.
[2024-12-02 19:29:42.835723] start test user 87428 207/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:29:43.305410] start test user 87428 207/568 recall augumented users by random, augumented_users = [82290, 72122, 28841, 109334, 39325, 107000, 87489, 111664, 128296, 49718, 69306, 82323, 134741, 106917, 68407, 37713, 125483, 101922, 24098, 70583, 58999, 52371, 2737, 31928, 12390, 48566, 48421, 133418, 36413, 117114, 51738, 31522, 32572, 40312, 137883, 80562, 133044, 79933, 106572, 129807, 65994, 56462, 97422, 124596, 24395, 904, 86017, 114635, 70904, 56566]
[2024-12-02 19:29:43.322056] user = 87428 Cloud 207/568
[2024-12-02 19:29:43.366375] user = 87428 Local 207/568
[2024-12-02 19:29:43.676866] user = 87428 Local+ 207/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:29:45.836272] user = 87428 MPDA- 207/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6170419254658386
Training on augumented user 82290 0/50 current_auc = 0.6170419254658386
User 82290 AUC after training: 0.6172575914423741
User 82290 improves AUC. Keeping the model.
Training on augumented user 72122 1/50 current_auc = 0.6172575914423741
User 72122 AUC after training: 0.617645790200138
User 72122 improves AUC. Keeping the model.
Training on augumented user 28841 2/50 current_auc = 0.617645790200138
User 28841 AUC after training: 0.6180771221532091
User 28841 improves AUC. Keeping the model.
Training on augumented user 109334 3/50 current_auc = 0.6180771221532091
User 109334 AUC after training: 0.6179908557625949
User 109334 does not improve AUC. Reverting changes.
Training on augumented user 39325 4/50 current_auc = 0.6180771221532091
User 39325 AUC after training: 0.618033988957902
User 39325 does not improve AUC. Reverting changes.
Training on augumented user 107000 5/50 current_auc = 0.6180771221532091
User 107000 AUC after training: 0.6180771221532091
User 107000 does not improve AUC. Reverting changes.
Training on augumented user 87489 6/50 current_auc = 0.6180771221532091
User 87489 AUC after training: 0.6178183229813665
User 87489 does not improve AUC. Reverting changes.
Training on augumented user 111664 7/50 current_auc = 0.6180771221532091
User 111664 AUC after training: 0.6189182194616978
User 111664 improves AUC. Keeping the model.
Training on augumented user 128296 8/50 current_auc = 0.6189182194616978
User 128296 AUC after training: 0.6188319530710835
User 128296 does not improve AUC. Reverting changes.
Training on augumented user 49718 9/50 current_auc = 0.6189182194616978
User 49718 AUC after training: 0.6193064182194616
User 49718 improves AUC. Keeping the model.
Training on augumented user 69306 10/50 current_auc = 0.6193064182194616
User 69306 AUC after training: 0.6202984817115254
User 69306 improves AUC. Keeping the model.
Training on augumented user 82323 11/50 current_auc = 0.6202984817115254
User 82323 AUC after training: 0.6196514837819185
User 82323 does not improve AUC. Reverting changes.
Training on augumented user 134741 12/50 current_auc = 0.6202984817115254
User 134741 AUC after training: 0.6203847481021394
User 134741 improves AUC. Keeping the model.
Training on augumented user 106917 13/50 current_auc = 0.6203847481021394
User 106917 AUC after training: 0.620212215320911
User 106917 does not improve AUC. Reverting changes.
Training on augumented user 68407 14/50 current_auc = 0.6203847481021394
User 68407 AUC after training: 0.6199965493443754
User 68407 does not improve AUC. Reverting changes.
Training on augumented user 37713 15/50 current_auc = 0.6203847481021394
User 37713 AUC after training: 0.6196946169772257
User 37713 does not improve AUC. Reverting changes.
Training on augumented user 125483 16/50 current_auc = 0.6203847481021394
User 125483 AUC after training: 0.6204710144927535
User 125483 improves AUC. Keeping the model.
Training on augumented user 101922 17/50 current_auc = 0.6204710144927535
User 101922 AUC after training: 0.6209023464458248
User 101922 improves AUC. Keeping the model.
Training on augumented user 24098 18/50 current_auc = 0.6209023464458248
User 24098 AUC after training: 0.621031746031746
User 24098 improves AUC. Keeping the model.
Training on augumented user 70583 19/50 current_auc = 0.621031746031746
User 70583 AUC after training: 0.6204278812974465
User 70583 does not improve AUC. Reverting changes.
Training on augumented user 58999 20/50 current_auc = 0.621031746031746
User 58999 AUC after training: 0.6212474120082815
User 58999 improves AUC. Keeping the model.
Training on augumented user 52371 21/50 current_auc = 0.6212474120082815
User 52371 AUC after training: 0.6209023464458248
User 52371 does not improve AUC. Reverting changes.
Training on augumented user 2737 22/50 current_auc = 0.6212474120082815
User 2737 AUC after training: 0.6216356107660455
User 2737 improves AUC. Keeping the model.
Training on augumented user 31928 23/50 current_auc = 0.6216356107660455
User 31928 AUC after training: 0.621808143547274
User 31928 improves AUC. Keeping the model.
Training on augumented user 12390 24/50 current_auc = 0.621808143547274
User 12390 AUC after training: 0.6215493443754314
User 12390 does not improve AUC. Reverting changes.
Training on augumented user 48566 25/50 current_auc = 0.621808143547274
User 48566 AUC after training: 0.6213336783988958
User 48566 does not improve AUC. Reverting changes.
Training on augumented user 48421 26/50 current_auc = 0.621808143547274
User 48421 AUC after training: 0.6216356107660456
User 48421 does not improve AUC. Reverting changes.
Training on augumented user 133418 27/50 current_auc = 0.621808143547274
User 133418 AUC after training: 0.6214199447895099
User 133418 does not improve AUC. Reverting changes.
Training on augumented user 36413 28/50 current_auc = 0.621808143547274
User 36413 AUC after training: 0.6217218771566597
User 36413 does not improve AUC. Reverting changes.
Training on augumented user 117114 29/50 current_auc = 0.621808143547274
User 117114 AUC after training: 0.6216356107660456
User 117114 does not improve AUC. Reverting changes.
Training on augumented user 51738 30/50 current_auc = 0.621808143547274
User 51738 AUC after training: 0.6210317460317459
User 51738 does not improve AUC. Reverting changes.
Training on augumented user 31522 31/50 current_auc = 0.621808143547274
User 31522 AUC after training: 0.621463077984817
User 31522 does not improve AUC. Reverting changes.
Training on augumented user 32572 32/50 current_auc = 0.621808143547274
User 32572 AUC after training: 0.6211611456176673
User 32572 does not improve AUC. Reverting changes.
Training on augumented user 40312 33/50 current_auc = 0.621808143547274
User 40312 AUC after training: 0.621463077984817
User 40312 does not improve AUC. Reverting changes.
Training on augumented user 137883 34/50 current_auc = 0.621808143547274
User 137883 AUC after training: 0.6215493443754314
User 137883 does not improve AUC. Reverting changes.
Training on augumented user 80562 35/50 current_auc = 0.621808143547274
User 80562 AUC after training: 0.6215277777777778
User 80562 does not improve AUC. Reverting changes.
Training on augumented user 133044 36/50 current_auc = 0.621808143547274
User 133044 AUC after training: 0.6221532091097309
User 133044 improves AUC. Keeping the model.
Training on augumented user 79933 37/50 current_auc = 0.6221532091097309
User 79933 AUC after training: 0.621808143547274
User 79933 does not improve AUC. Reverting changes.
Training on augumented user 106572 38/50 current_auc = 0.6221532091097309
User 106572 AUC after training: 0.6219806763285024
User 106572 does not improve AUC. Reverting changes.
Training on augumented user 129807 39/50 current_auc = 0.6221532091097309
User 129807 AUC after training: 0.622627674258109
User 129807 improves AUC. Keeping the model.
Training on augumented user 65994 40/50 current_auc = 0.622627674258109
User 65994 AUC after training: 0.6225845410628018
User 65994 does not improve AUC. Reverting changes.
Training on augumented user 56462 41/50 current_auc = 0.622627674258109
User 56462 AUC after training: 0.6225845410628019
User 56462 does not improve AUC. Reverting changes.
Training on augumented user 97422 42/50 current_auc = 0.622627674258109
User 97422 AUC after training: 0.6228433402346445
User 97422 improves AUC. Keeping the model.
Training on augumented user 124596 43/50 current_auc = 0.6228433402346445
User 124596 AUC after training: 0.6227570738440303
User 124596 does not improve AUC. Reverting changes.
Training on augumented user 24395 44/50 current_auc = 0.6228433402346445
User 24395 AUC after training: 0.6228002070393375
User 24395 does not improve AUC. Reverting changes.
Training on augumented user 904 45/50 current_auc = 0.6228433402346445
User 904 AUC after training: 0.623015873015873
User 904 improves AUC. Keeping the model.
Training on augumented user 86017 46/50 current_auc = 0.623015873015873
User 86017 AUC after training: 0.6231021394064872
User 86017 improves AUC. Keeping the model.
Training on augumented user 114635 47/50 current_auc = 0.6231021394064872
User 114635 AUC after training: 0.6234472049689441
User 114635 improves AUC. Keeping the model.
Training on augumented user 70904 48/50 current_auc = 0.6234472049689441
User 70904 AUC after training: 0.6231884057971016
User 70904 does not improve AUC. Reverting changes.
Training on augumented user 56566 49/50 current_auc = 0.6234472049689441
User 56566 AUC after training: 0.6231884057971013
User 56566 does not improve AUC. Reverting changes.
[2024-12-02 19:30:13.503573] start test user 87441 208/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:30:14.048773] start test user 87441 208/568 recall augumented users by random, augumented_users = [60851, 19095, 106070, 8479, 74626, 61092, 41503, 19631, 125092, 63460, 28183, 10729, 6199, 104982, 125058, 35654, 99316, 111213, 10116, 80681, 121427, 118593, 840, 90207, 55734, 2178, 77493, 51303, 73258, 87788, 26614, 123140, 123861, 113825, 127816, 7403, 127775, 10136, 129643, 128716, 81014, 26647, 122975, 27788, 45941, 117564, 16032, 127423, 44801, 87623]
[2024-12-02 19:30:14.071309] user = 87441 Cloud 208/568
[2024-12-02 19:30:14.085192] user = 87441 Local 208/568
[2024-12-02 19:30:14.234148] user = 87441 Local+ 208/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:30:16.568294] user = 87441 MPDA- 208/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5277272727272727
Training on augumented user 60851 0/50 current_auc = 0.5277272727272727
User 60851 AUC after training: 0.5272727272727273
User 60851 does not improve AUC. Reverting changes.
Training on augumented user 19095 1/50 current_auc = 0.5277272727272727
User 19095 AUC after training: 0.5277272727272727
User 19095 does not improve AUC. Reverting changes.
Training on augumented user 106070 2/50 current_auc = 0.5277272727272727
User 106070 AUC after training: 0.5281818181818182
User 106070 improves AUC. Keeping the model.
Training on augumented user 8479 3/50 current_auc = 0.5281818181818182
User 8479 AUC after training: 0.5286363636363636
User 8479 improves AUC. Keeping the model.
Training on augumented user 74626 4/50 current_auc = 0.5286363636363636
User 74626 AUC after training: 0.5281818181818182
User 74626 does not improve AUC. Reverting changes.
Training on augumented user 61092 5/50 current_auc = 0.5286363636363636
User 61092 AUC after training: 0.5290909090909091
User 61092 improves AUC. Keeping the model.
Training on augumented user 41503 6/50 current_auc = 0.5290909090909091
User 41503 AUC after training: 0.5286363636363636
User 41503 does not improve AUC. Reverting changes.
Training on augumented user 19631 7/50 current_auc = 0.5290909090909091
User 19631 AUC after training: 0.5281818181818183
User 19631 does not improve AUC. Reverting changes.
Training on augumented user 125092 8/50 current_auc = 0.5290909090909091
User 125092 AUC after training: 0.5286363636363637
User 125092 does not improve AUC. Reverting changes.
Training on augumented user 63460 9/50 current_auc = 0.5290909090909091
User 63460 AUC after training: 0.5286363636363637
User 63460 does not improve AUC. Reverting changes.
Training on augumented user 28183 10/50 current_auc = 0.5290909090909091
User 28183 AUC after training: 0.5286363636363637
User 28183 does not improve AUC. Reverting changes.
Training on augumented user 10729 11/50 current_auc = 0.5290909090909091
User 10729 AUC after training: 0.5286363636363636
User 10729 does not improve AUC. Reverting changes.
Training on augumented user 6199 12/50 current_auc = 0.5290909090909091
User 6199 AUC after training: 0.5290909090909091
User 6199 does not improve AUC. Reverting changes.
Training on augumented user 104982 13/50 current_auc = 0.5290909090909091
User 104982 AUC after training: 0.5286363636363637
User 104982 does not improve AUC. Reverting changes.
Training on augumented user 125058 14/50 current_auc = 0.5290909090909091
User 125058 AUC after training: 0.5286363636363636
User 125058 does not improve AUC. Reverting changes.
Training on augumented user 35654 15/50 current_auc = 0.5290909090909091
User 35654 AUC after training: 0.5286363636363637
User 35654 does not improve AUC. Reverting changes.
Training on augumented user 99316 16/50 current_auc = 0.5290909090909091
User 99316 AUC after training: 0.5290909090909091
User 99316 does not improve AUC. Reverting changes.
Training on augumented user 111213 17/50 current_auc = 0.5290909090909091
User 111213 AUC after training: 0.5290909090909091
User 111213 does not improve AUC. Reverting changes.
Training on augumented user 10116 18/50 current_auc = 0.5290909090909091
User 10116 AUC after training: 0.5290909090909091
User 10116 does not improve AUC. Reverting changes.
Training on augumented user 80681 19/50 current_auc = 0.5290909090909091
User 80681 AUC after training: 0.5286363636363636
User 80681 does not improve AUC. Reverting changes.
Training on augumented user 121427 20/50 current_auc = 0.5290909090909091
User 121427 AUC after training: 0.5281818181818182
User 121427 does not improve AUC. Reverting changes.
Training on augumented user 118593 21/50 current_auc = 0.5290909090909091
User 118593 AUC after training: 0.53
User 118593 improves AUC. Keeping the model.
Training on augumented user 840 22/50 current_auc = 0.53
User 840 AUC after training: 0.53
User 840 does not improve AUC. Reverting changes.
Training on augumented user 90207 23/50 current_auc = 0.53
User 90207 AUC after training: 0.5290909090909091
User 90207 does not improve AUC. Reverting changes.
Training on augumented user 55734 24/50 current_auc = 0.53
User 55734 AUC after training: 0.5295454545454545
User 55734 does not improve AUC. Reverting changes.
Training on augumented user 2178 25/50 current_auc = 0.53
User 2178 AUC after training: 0.5295454545454545
User 2178 does not improve AUC. Reverting changes.
Training on augumented user 77493 26/50 current_auc = 0.53
User 77493 AUC after training: 0.53
User 77493 does not improve AUC. Reverting changes.
Training on augumented user 51303 27/50 current_auc = 0.53
User 51303 AUC after training: 0.5290909090909091
User 51303 does not improve AUC. Reverting changes.
Training on augumented user 73258 28/50 current_auc = 0.53
User 73258 AUC after training: 0.5304545454545455
User 73258 improves AUC. Keeping the model.
Training on augumented user 87788 29/50 current_auc = 0.5304545454545455
User 87788 AUC after training: 0.53
User 87788 does not improve AUC. Reverting changes.
Training on augumented user 26614 30/50 current_auc = 0.5304545454545455
User 26614 AUC after training: 0.53
User 26614 does not improve AUC. Reverting changes.
Training on augumented user 123140 31/50 current_auc = 0.5304545454545455
User 123140 AUC after training: 0.53
User 123140 does not improve AUC. Reverting changes.
Training on augumented user 123861 32/50 current_auc = 0.5304545454545455
User 123861 AUC after training: 0.53
User 123861 does not improve AUC. Reverting changes.
Training on augumented user 113825 33/50 current_auc = 0.5304545454545455
User 113825 AUC after training: 0.53
User 113825 does not improve AUC. Reverting changes.
Training on augumented user 127816 34/50 current_auc = 0.5304545454545455
User 127816 AUC after training: 0.5304545454545455
User 127816 does not improve AUC. Reverting changes.
Training on augumented user 7403 35/50 current_auc = 0.5304545454545455
User 7403 AUC after training: 0.5295454545454545
User 7403 does not improve AUC. Reverting changes.
Training on augumented user 127775 36/50 current_auc = 0.5304545454545455
User 127775 AUC after training: 0.5304545454545455
User 127775 does not improve AUC. Reverting changes.
Training on augumented user 10136 37/50 current_auc = 0.5304545454545455
User 10136 AUC after training: 0.53
User 10136 does not improve AUC. Reverting changes.
Training on augumented user 129643 38/50 current_auc = 0.5304545454545455
User 129643 AUC after training: 0.5309090909090908
User 129643 improves AUC. Keeping the model.
Training on augumented user 128716 39/50 current_auc = 0.5309090909090908
User 128716 AUC after training: 0.5309090909090908
User 128716 does not improve AUC. Reverting changes.
Training on augumented user 81014 40/50 current_auc = 0.5309090909090908
User 81014 AUC after training: 0.5309090909090909
User 81014 improves AUC. Keeping the model.
Training on augumented user 26647 41/50 current_auc = 0.5309090909090909
User 26647 AUC after training: 0.5309090909090909
User 26647 does not improve AUC. Reverting changes.
Training on augumented user 122975 42/50 current_auc = 0.5309090909090909
User 122975 AUC after training: 0.5309090909090909
User 122975 does not improve AUC. Reverting changes.
Training on augumented user 27788 43/50 current_auc = 0.5309090909090909
User 27788 AUC after training: 0.5309090909090909
User 27788 does not improve AUC. Reverting changes.
Training on augumented user 45941 44/50 current_auc = 0.5309090909090909
User 45941 AUC after training: 0.5290909090909091
User 45941 does not improve AUC. Reverting changes.
Training on augumented user 117564 45/50 current_auc = 0.5309090909090909
User 117564 AUC after training: 0.5313636363636364
User 117564 improves AUC. Keeping the model.
Training on augumented user 16032 46/50 current_auc = 0.5313636363636364
User 16032 AUC after training: 0.5313636363636364
User 16032 does not improve AUC. Reverting changes.
Training on augumented user 127423 47/50 current_auc = 0.5313636363636364
User 127423 AUC after training: 0.5297727272727274
User 127423 does not improve AUC. Reverting changes.
Training on augumented user 44801 48/50 current_auc = 0.5313636363636364
User 44801 AUC after training: 0.5302272727272728
User 44801 does not improve AUC. Reverting changes.
Training on augumented user 87623 49/50 current_auc = 0.5313636363636364
User 87623 AUC after training: 0.530909090909091
User 87623 does not improve AUC. Reverting changes.
[2024-12-02 19:30:44.695497] start test user 87444 209/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:30:45.121264] start test user 87444 209/568 recall augumented users by random, augumented_users = [53970, 121023, 87108, 92307, 44290, 122764, 68158, 46049, 81195, 129355, 16947, 125745, 86963, 51374, 55807, 55511, 59314, 56258, 128999, 13541, 43557, 23520, 108006, 22264, 71370, 71174, 5450, 57505, 124328, 66943, 93670, 44768, 28811, 47582, 29158, 73909, 104665, 66704, 38149, 47999, 81996, 11107, 115424, 5112, 107618, 105603, 79146, 85538, 40545, 130425]
[2024-12-02 19:30:45.135549] user = 87444 Cloud 209/568
[2024-12-02 19:30:45.144763] user = 87444 Local 209/568
[2024-12-02 19:30:45.162557] user = 87444 Local+ 209/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:30:47.512469] user = 87444 MPDA- 209/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.48484848484848486
Training on augumented user 53970 0/50 current_auc = 0.48484848484848486
User 53970 AUC after training: 0.48484848484848486
User 53970 does not improve AUC. Reverting changes.
Training on augumented user 121023 1/50 current_auc = 0.48484848484848486
User 121023 AUC after training: 0.48484848484848486
User 121023 does not improve AUC. Reverting changes.
Training on augumented user 87108 2/50 current_auc = 0.48484848484848486
User 87108 AUC after training: 0.48484848484848486
User 87108 does not improve AUC. Reverting changes.
Training on augumented user 92307 3/50 current_auc = 0.48484848484848486
User 92307 AUC after training: 0.48484848484848486
User 92307 does not improve AUC. Reverting changes.
Training on augumented user 44290 4/50 current_auc = 0.48484848484848486
User 44290 AUC after training: 0.48484848484848486
User 44290 does not improve AUC. Reverting changes.
Training on augumented user 122764 5/50 current_auc = 0.48484848484848486
User 122764 AUC after training: 0.48484848484848486
User 122764 does not improve AUC. Reverting changes.
Training on augumented user 68158 6/50 current_auc = 0.48484848484848486
User 68158 AUC after training: 0.48484848484848486
User 68158 does not improve AUC. Reverting changes.
Training on augumented user 46049 7/50 current_auc = 0.48484848484848486
User 46049 AUC after training: 0.48484848484848486
User 46049 does not improve AUC. Reverting changes.
Training on augumented user 81195 8/50 current_auc = 0.48484848484848486
User 81195 AUC after training: 0.48484848484848486
User 81195 does not improve AUC. Reverting changes.
Training on augumented user 129355 9/50 current_auc = 0.48484848484848486
User 129355 AUC after training: 0.48484848484848486
User 129355 does not improve AUC. Reverting changes.
Training on augumented user 16947 10/50 current_auc = 0.48484848484848486
User 16947 AUC after training: 0.48484848484848486
User 16947 does not improve AUC. Reverting changes.
Training on augumented user 125745 11/50 current_auc = 0.48484848484848486
User 125745 AUC after training: 0.48484848484848486
User 125745 does not improve AUC. Reverting changes.
Training on augumented user 86963 12/50 current_auc = 0.48484848484848486
User 86963 AUC after training: 0.48484848484848486
User 86963 does not improve AUC. Reverting changes.
Training on augumented user 51374 13/50 current_auc = 0.48484848484848486
User 51374 AUC after training: 0.45454545454545453
User 51374 does not improve AUC. Reverting changes.
Training on augumented user 55807 14/50 current_auc = 0.48484848484848486
User 55807 AUC after training: 0.48484848484848486
User 55807 does not improve AUC. Reverting changes.
Training on augumented user 55511 15/50 current_auc = 0.48484848484848486
User 55511 AUC after training: 0.48484848484848486
User 55511 does not improve AUC. Reverting changes.
Training on augumented user 59314 16/50 current_auc = 0.48484848484848486
User 59314 AUC after training: 0.48484848484848486
User 59314 does not improve AUC. Reverting changes.
Training on augumented user 56258 17/50 current_auc = 0.48484848484848486
User 56258 AUC after training: 0.48484848484848486
User 56258 does not improve AUC. Reverting changes.
Training on augumented user 128999 18/50 current_auc = 0.48484848484848486
User 128999 AUC after training: 0.48484848484848486
User 128999 does not improve AUC. Reverting changes.
Training on augumented user 13541 19/50 current_auc = 0.48484848484848486
User 13541 AUC after training: 0.48484848484848486
User 13541 does not improve AUC. Reverting changes.
Training on augumented user 43557 20/50 current_auc = 0.48484848484848486
User 43557 AUC after training: 0.48484848484848486
User 43557 does not improve AUC. Reverting changes.
Training on augumented user 23520 21/50 current_auc = 0.48484848484848486
User 23520 AUC after training: 0.48484848484848486
User 23520 does not improve AUC. Reverting changes.
Training on augumented user 108006 22/50 current_auc = 0.48484848484848486
User 108006 AUC after training: 0.48484848484848486
User 108006 does not improve AUC. Reverting changes.
Training on augumented user 22264 23/50 current_auc = 0.48484848484848486
User 22264 AUC after training: 0.48484848484848486
User 22264 does not improve AUC. Reverting changes.
Training on augumented user 71370 24/50 current_auc = 0.48484848484848486
User 71370 AUC after training: 0.48484848484848486
User 71370 does not improve AUC. Reverting changes.
Training on augumented user 71174 25/50 current_auc = 0.48484848484848486
User 71174 AUC after training: 0.48484848484848486
User 71174 does not improve AUC. Reverting changes.
Training on augumented user 5450 26/50 current_auc = 0.48484848484848486
User 5450 AUC after training: 0.45454545454545453
User 5450 does not improve AUC. Reverting changes.
Training on augumented user 57505 27/50 current_auc = 0.48484848484848486
User 57505 AUC after training: 0.48484848484848486
User 57505 does not improve AUC. Reverting changes.
Training on augumented user 124328 28/50 current_auc = 0.48484848484848486
User 124328 AUC after training: 0.48484848484848486
User 124328 does not improve AUC. Reverting changes.
Training on augumented user 66943 29/50 current_auc = 0.48484848484848486
User 66943 AUC after training: 0.45454545454545453
User 66943 does not improve AUC. Reverting changes.
Training on augumented user 93670 30/50 current_auc = 0.48484848484848486
User 93670 AUC after training: 0.45454545454545453
User 93670 does not improve AUC. Reverting changes.
Training on augumented user 44768 31/50 current_auc = 0.48484848484848486
User 44768 AUC after training: 0.48484848484848486
User 44768 does not improve AUC. Reverting changes.
Training on augumented user 28811 32/50 current_auc = 0.48484848484848486
User 28811 AUC after training: 0.48484848484848486
User 28811 does not improve AUC. Reverting changes.
Training on augumented user 47582 33/50 current_auc = 0.48484848484848486
User 47582 AUC after training: 0.48484848484848486
User 47582 does not improve AUC. Reverting changes.
Training on augumented user 29158 34/50 current_auc = 0.48484848484848486
User 29158 AUC after training: 0.48484848484848486
User 29158 does not improve AUC. Reverting changes.
Training on augumented user 73909 35/50 current_auc = 0.48484848484848486
User 73909 AUC after training: 0.48484848484848486
User 73909 does not improve AUC. Reverting changes.
Training on augumented user 104665 36/50 current_auc = 0.48484848484848486
User 104665 AUC after training: 0.48484848484848486
User 104665 does not improve AUC. Reverting changes.
Training on augumented user 66704 37/50 current_auc = 0.48484848484848486
User 66704 AUC after training: 0.48484848484848486
User 66704 does not improve AUC. Reverting changes.
Training on augumented user 38149 38/50 current_auc = 0.48484848484848486
User 38149 AUC after training: 0.48484848484848486
User 38149 does not improve AUC. Reverting changes.
Training on augumented user 47999 39/50 current_auc = 0.48484848484848486
User 47999 AUC after training: 0.48484848484848486
User 47999 does not improve AUC. Reverting changes.
Training on augumented user 81996 40/50 current_auc = 0.48484848484848486
User 81996 AUC after training: 0.48484848484848486
User 81996 does not improve AUC. Reverting changes.
Training on augumented user 11107 41/50 current_auc = 0.48484848484848486
User 11107 AUC after training: 0.48484848484848486
User 11107 does not improve AUC. Reverting changes.
Training on augumented user 115424 42/50 current_auc = 0.48484848484848486
User 115424 AUC after training: 0.45454545454545453
User 115424 does not improve AUC. Reverting changes.
Training on augumented user 5112 43/50 current_auc = 0.48484848484848486
User 5112 AUC after training: 0.48484848484848486
User 5112 does not improve AUC. Reverting changes.
Training on augumented user 107618 44/50 current_auc = 0.48484848484848486
User 107618 AUC after training: 0.48484848484848486
User 107618 does not improve AUC. Reverting changes.
Training on augumented user 105603 45/50 current_auc = 0.48484848484848486
User 105603 AUC after training: 0.48484848484848486
User 105603 does not improve AUC. Reverting changes.
Training on augumented user 79146 46/50 current_auc = 0.48484848484848486
User 79146 AUC after training: 0.48484848484848486
User 79146 does not improve AUC. Reverting changes.
Training on augumented user 85538 47/50 current_auc = 0.48484848484848486
User 85538 AUC after training: 0.48484848484848486
User 85538 does not improve AUC. Reverting changes.
Training on augumented user 40545 48/50 current_auc = 0.48484848484848486
User 40545 AUC after training: 0.48484848484848486
User 40545 does not improve AUC. Reverting changes.
Training on augumented user 130425 49/50 current_auc = 0.48484848484848486
User 130425 AUC after training: 0.45454545454545453
User 130425 does not improve AUC. Reverting changes.
[2024-12-02 19:31:15.147598] start test user 87445 210/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:31:15.584801] start test user 87445 210/568 recall augumented users by random, augumented_users = [107113, 57280, 23624, 45559, 53850, 11228, 33220, 35092, 31437, 94968, 52324, 93406, 114040, 29512, 14476, 105194, 64319, 40294, 114635, 123848, 54605, 82956, 65639, 8515, 26398, 122039, 13419, 32680, 126573, 64849, 122046, 399, 62695, 35425, 66302, 14530, 118799, 32421, 57292, 39222, 138347, 117974, 121852, 20831, 20634, 72416, 83687, 10518, 25763, 92855]
[2024-12-02 19:31:15.599872] user = 87445 Cloud 210/568
[2024-12-02 19:31:15.610389] user = 87445 Local 210/568
[2024-12-02 19:31:15.701241] user = 87445 Local+ 210/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:31:17.791999] user = 87445 MPDA- 210/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7291666666666667
Training on augumented user 107113 0/50 current_auc = 0.7291666666666667
User 107113 AUC after training: 0.7407407407407407
User 107113 improves AUC. Keeping the model.
Training on augumented user 57280 1/50 current_auc = 0.7407407407407407
User 57280 AUC after training: 0.75
User 57280 improves AUC. Keeping the model.
Training on augumented user 23624 2/50 current_auc = 0.75
User 23624 AUC after training: 0.75
User 23624 does not improve AUC. Reverting changes.
Training on augumented user 45559 3/50 current_auc = 0.75
User 45559 AUC after training: 0.7407407407407407
User 45559 does not improve AUC. Reverting changes.
Training on augumented user 53850 4/50 current_auc = 0.75
User 53850 AUC after training: 0.75
User 53850 does not improve AUC. Reverting changes.
Training on augumented user 11228 5/50 current_auc = 0.75
User 11228 AUC after training: 0.75
User 11228 does not improve AUC. Reverting changes.
Training on augumented user 33220 6/50 current_auc = 0.75
User 33220 AUC after training: 0.7407407407407407
User 33220 does not improve AUC. Reverting changes.
Training on augumented user 35092 7/50 current_auc = 0.75
User 35092 AUC after training: 0.7453703703703703
User 35092 does not improve AUC. Reverting changes.
Training on augumented user 31437 8/50 current_auc = 0.75
User 31437 AUC after training: 0.7453703703703703
User 31437 does not improve AUC. Reverting changes.
Training on augumented user 94968 9/50 current_auc = 0.75
User 94968 AUC after training: 0.75
User 94968 does not improve AUC. Reverting changes.
Training on augumented user 52324 10/50 current_auc = 0.75
User 52324 AUC after training: 0.75
User 52324 does not improve AUC. Reverting changes.
Training on augumented user 93406 11/50 current_auc = 0.75
User 93406 AUC after training: 0.7407407407407407
User 93406 does not improve AUC. Reverting changes.
Training on augumented user 114040 12/50 current_auc = 0.75
User 114040 AUC after training: 0.736111111111111
User 114040 does not improve AUC. Reverting changes.
Training on augumented user 29512 13/50 current_auc = 0.75
User 29512 AUC after training: 0.75
User 29512 does not improve AUC. Reverting changes.
Training on augumented user 14476 14/50 current_auc = 0.75
User 14476 AUC after training: 0.75
User 14476 does not improve AUC. Reverting changes.
Training on augumented user 105194 15/50 current_auc = 0.75
User 105194 AUC after training: 0.75
User 105194 does not improve AUC. Reverting changes.
Training on augumented user 64319 16/50 current_auc = 0.75
User 64319 AUC after training: 0.7314814814814815
User 64319 does not improve AUC. Reverting changes.
Training on augumented user 40294 17/50 current_auc = 0.75
User 40294 AUC after training: 0.7453703703703703
User 40294 does not improve AUC. Reverting changes.
Training on augumented user 114635 18/50 current_auc = 0.75
User 114635 AUC after training: 0.736111111111111
User 114635 does not improve AUC. Reverting changes.
Training on augumented user 123848 19/50 current_auc = 0.75
User 123848 AUC after training: 0.7453703703703703
User 123848 does not improve AUC. Reverting changes.
Training on augumented user 54605 20/50 current_auc = 0.75
User 54605 AUC after training: 0.7453703703703703
User 54605 does not improve AUC. Reverting changes.
Training on augumented user 82956 21/50 current_auc = 0.75
User 82956 AUC after training: 0.7453703703703703
User 82956 does not improve AUC. Reverting changes.
Training on augumented user 65639 22/50 current_auc = 0.75
User 65639 AUC after training: 0.7453703703703703
User 65639 does not improve AUC. Reverting changes.
Training on augumented user 8515 23/50 current_auc = 0.75
User 8515 AUC after training: 0.7453703703703703
User 8515 does not improve AUC. Reverting changes.
Training on augumented user 26398 24/50 current_auc = 0.75
User 26398 AUC after training: 0.7453703703703703
User 26398 does not improve AUC. Reverting changes.
Training on augumented user 122039 25/50 current_auc = 0.75
User 122039 AUC after training: 0.7407407407407407
User 122039 does not improve AUC. Reverting changes.
Training on augumented user 13419 26/50 current_auc = 0.75
User 13419 AUC after training: 0.7384259259259259
User 13419 does not improve AUC. Reverting changes.
Training on augumented user 32680 27/50 current_auc = 0.75
User 32680 AUC after training: 0.7476851851851852
User 32680 does not improve AUC. Reverting changes.
Training on augumented user 126573 28/50 current_auc = 0.75
User 126573 AUC after training: 0.7453703703703703
User 126573 does not improve AUC. Reverting changes.
Training on augumented user 64849 29/50 current_auc = 0.75
User 64849 AUC after training: 0.7453703703703703
User 64849 does not improve AUC. Reverting changes.
Training on augumented user 122046 30/50 current_auc = 0.75
User 122046 AUC after training: 0.7453703703703703
User 122046 does not improve AUC. Reverting changes.
Training on augumented user 399 31/50 current_auc = 0.75
User 399 AUC after training: 0.7453703703703703
User 399 does not improve AUC. Reverting changes.
Training on augumented user 62695 32/50 current_auc = 0.75
User 62695 AUC after training: 0.7407407407407407
User 62695 does not improve AUC. Reverting changes.
Training on augumented user 35425 33/50 current_auc = 0.75
User 35425 AUC after training: 0.75
User 35425 does not improve AUC. Reverting changes.
Training on augumented user 66302 34/50 current_auc = 0.75
User 66302 AUC after training: 0.7453703703703703
User 66302 does not improve AUC. Reverting changes.
Training on augumented user 14530 35/50 current_auc = 0.75
User 14530 AUC after training: 0.75
User 14530 does not improve AUC. Reverting changes.
Training on augumented user 118799 36/50 current_auc = 0.75
User 118799 AUC after training: 0.7453703703703703
User 118799 does not improve AUC. Reverting changes.
Training on augumented user 32421 37/50 current_auc = 0.75
User 32421 AUC after training: 0.7453703703703703
User 32421 does not improve AUC. Reverting changes.
Training on augumented user 57292 38/50 current_auc = 0.75
User 57292 AUC after training: 0.7453703703703703
User 57292 does not improve AUC. Reverting changes.
Training on augumented user 39222 39/50 current_auc = 0.75
User 39222 AUC after training: 0.7407407407407407
User 39222 does not improve AUC. Reverting changes.
Training on augumented user 138347 40/50 current_auc = 0.75
User 138347 AUC after training: 0.75
User 138347 does not improve AUC. Reverting changes.
Training on augumented user 117974 41/50 current_auc = 0.75
User 117974 AUC after training: 0.7407407407407407
User 117974 does not improve AUC. Reverting changes.
Training on augumented user 121852 42/50 current_auc = 0.75
User 121852 AUC after training: 0.7314814814814815
User 121852 does not improve AUC. Reverting changes.
Training on augumented user 20831 43/50 current_auc = 0.75
User 20831 AUC after training: 0.7314814814814815
User 20831 does not improve AUC. Reverting changes.
Training on augumented user 20634 44/50 current_auc = 0.75
User 20634 AUC after training: 0.75
User 20634 does not improve AUC. Reverting changes.
Training on augumented user 72416 45/50 current_auc = 0.75
User 72416 AUC after training: 0.7453703703703703
User 72416 does not improve AUC. Reverting changes.
Training on augumented user 83687 46/50 current_auc = 0.75
User 83687 AUC after training: 0.7453703703703703
User 83687 does not improve AUC. Reverting changes.
Training on augumented user 10518 47/50 current_auc = 0.75
User 10518 AUC after training: 0.736111111111111
User 10518 does not improve AUC. Reverting changes.
Training on augumented user 25763 48/50 current_auc = 0.75
User 25763 AUC after training: 0.75
User 25763 does not improve AUC. Reverting changes.
Training on augumented user 92855 49/50 current_auc = 0.75
User 92855 AUC after training: 0.7453703703703703
User 92855 does not improve AUC. Reverting changes.
[2024-12-02 19:31:50.941248] start test user 87486 211/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:31:51.420447] start test user 87486 211/568 recall augumented users by random, augumented_users = [36733, 108589, 135371, 36363, 28662, 134285, 2537, 81413, 23513, 24452, 96055, 49288, 75948, 83401, 6742, 6503, 78291, 41440, 130167, 104163, 92118, 110288, 107462, 79931, 12871, 64018, 115576, 91284, 90070, 116263, 90046, 132371, 8731, 12887, 48552, 26844, 73587, 102189, 9938, 117312, 59788, 60780, 17479, 12719, 21562, 90190, 134504, 81256, 60290, 116341]
[2024-12-02 19:31:51.438623] user = 87486 Cloud 211/568
[2024-12-02 19:31:51.448809] user = 87486 Local 211/568
[2024-12-02 19:31:51.545626] user = 87486 Local+ 211/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:31:53.788749] user = 87486 MPDA- 211/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4
Training on augumented user 36733 0/50 current_auc = 0.4
User 36733 AUC after training: 0.4
User 36733 does not improve AUC. Reverting changes.
Training on augumented user 108589 1/50 current_auc = 0.4
User 108589 AUC after training: 0.4
User 108589 does not improve AUC. Reverting changes.
Training on augumented user 135371 2/50 current_auc = 0.4
User 135371 AUC after training: 0.4
User 135371 does not improve AUC. Reverting changes.
Training on augumented user 36363 3/50 current_auc = 0.4
User 36363 AUC after training: 0.4
User 36363 does not improve AUC. Reverting changes.
Training on augumented user 28662 4/50 current_auc = 0.4
User 28662 AUC after training: 0.4
User 28662 does not improve AUC. Reverting changes.
Training on augumented user 134285 5/50 current_auc = 0.4
User 134285 AUC after training: 0.4
User 134285 does not improve AUC. Reverting changes.
Training on augumented user 2537 6/50 current_auc = 0.4
User 2537 AUC after training: 0.4
User 2537 does not improve AUC. Reverting changes.
Training on augumented user 81413 7/50 current_auc = 0.4
User 81413 AUC after training: 0.4
User 81413 does not improve AUC. Reverting changes.
Training on augumented user 23513 8/50 current_auc = 0.4
User 23513 AUC after training: 0.4
User 23513 does not improve AUC. Reverting changes.
Training on augumented user 24452 9/50 current_auc = 0.4
User 24452 AUC after training: 0.4
User 24452 does not improve AUC. Reverting changes.
Training on augumented user 96055 10/50 current_auc = 0.4
User 96055 AUC after training: 0.4
User 96055 does not improve AUC. Reverting changes.
Training on augumented user 49288 11/50 current_auc = 0.4
User 49288 AUC after training: 0.4
User 49288 does not improve AUC. Reverting changes.
Training on augumented user 75948 12/50 current_auc = 0.4
User 75948 AUC after training: 0.4
User 75948 does not improve AUC. Reverting changes.
Training on augumented user 83401 13/50 current_auc = 0.4
User 83401 AUC after training: 0.4
User 83401 does not improve AUC. Reverting changes.
Training on augumented user 6742 14/50 current_auc = 0.4
User 6742 AUC after training: 0.4
User 6742 does not improve AUC. Reverting changes.
Training on augumented user 6503 15/50 current_auc = 0.4
User 6503 AUC after training: 0.4
User 6503 does not improve AUC. Reverting changes.
Training on augumented user 78291 16/50 current_auc = 0.4
User 78291 AUC after training: 0.4
User 78291 does not improve AUC. Reverting changes.
Training on augumented user 41440 17/50 current_auc = 0.4
User 41440 AUC after training: 0.4
User 41440 does not improve AUC. Reverting changes.
Training on augumented user 130167 18/50 current_auc = 0.4
User 130167 AUC after training: 0.4
User 130167 does not improve AUC. Reverting changes.
Training on augumented user 104163 19/50 current_auc = 0.4
User 104163 AUC after training: 0.4
User 104163 does not improve AUC. Reverting changes.
Training on augumented user 92118 20/50 current_auc = 0.4
User 92118 AUC after training: 0.4
User 92118 does not improve AUC. Reverting changes.
Training on augumented user 110288 21/50 current_auc = 0.4
User 110288 AUC after training: 0.4
User 110288 does not improve AUC. Reverting changes.
Training on augumented user 107462 22/50 current_auc = 0.4
User 107462 AUC after training: 0.4
User 107462 does not improve AUC. Reverting changes.
Training on augumented user 79931 23/50 current_auc = 0.4
User 79931 AUC after training: 0.4
User 79931 does not improve AUC. Reverting changes.
Training on augumented user 12871 24/50 current_auc = 0.4
User 12871 AUC after training: 0.4
User 12871 does not improve AUC. Reverting changes.
Training on augumented user 64018 25/50 current_auc = 0.4
User 64018 AUC after training: 0.4
User 64018 does not improve AUC. Reverting changes.
Training on augumented user 115576 26/50 current_auc = 0.4
User 115576 AUC after training: 0.4
User 115576 does not improve AUC. Reverting changes.
Training on augumented user 91284 27/50 current_auc = 0.4
User 91284 AUC after training: 0.4
User 91284 does not improve AUC. Reverting changes.
Training on augumented user 90070 28/50 current_auc = 0.4
User 90070 AUC after training: 0.4
User 90070 does not improve AUC. Reverting changes.
Training on augumented user 116263 29/50 current_auc = 0.4
User 116263 AUC after training: 0.4
User 116263 does not improve AUC. Reverting changes.
Training on augumented user 90046 30/50 current_auc = 0.4
User 90046 AUC after training: 0.4
User 90046 does not improve AUC. Reverting changes.
Training on augumented user 132371 31/50 current_auc = 0.4
User 132371 AUC after training: 0.4
User 132371 does not improve AUC. Reverting changes.
Training on augumented user 8731 32/50 current_auc = 0.4
User 8731 AUC after training: 0.4
User 8731 does not improve AUC. Reverting changes.
Training on augumented user 12887 33/50 current_auc = 0.4
User 12887 AUC after training: 0.4
User 12887 does not improve AUC. Reverting changes.
Training on augumented user 48552 34/50 current_auc = 0.4
User 48552 AUC after training: 0.4
User 48552 does not improve AUC. Reverting changes.
Training on augumented user 26844 35/50 current_auc = 0.4
User 26844 AUC after training: 0.4
User 26844 does not improve AUC. Reverting changes.
Training on augumented user 73587 36/50 current_auc = 0.4
User 73587 AUC after training: 0.4
User 73587 does not improve AUC. Reverting changes.
Training on augumented user 102189 37/50 current_auc = 0.4
User 102189 AUC after training: 0.4
User 102189 does not improve AUC. Reverting changes.
Training on augumented user 9938 38/50 current_auc = 0.4
User 9938 AUC after training: 0.4
User 9938 does not improve AUC. Reverting changes.
Training on augumented user 117312 39/50 current_auc = 0.4
User 117312 AUC after training: 0.4
User 117312 does not improve AUC. Reverting changes.
Training on augumented user 59788 40/50 current_auc = 0.4
User 59788 AUC after training: 0.4
User 59788 does not improve AUC. Reverting changes.
Training on augumented user 60780 41/50 current_auc = 0.4
User 60780 AUC after training: 0.4
User 60780 does not improve AUC. Reverting changes.
Training on augumented user 17479 42/50 current_auc = 0.4
User 17479 AUC after training: 0.4
User 17479 does not improve AUC. Reverting changes.
Training on augumented user 12719 43/50 current_auc = 0.4
User 12719 AUC after training: 0.4
User 12719 does not improve AUC. Reverting changes.
Training on augumented user 21562 44/50 current_auc = 0.4
User 21562 AUC after training: 0.4
User 21562 does not improve AUC. Reverting changes.
Training on augumented user 90190 45/50 current_auc = 0.4
User 90190 AUC after training: 0.4
User 90190 does not improve AUC. Reverting changes.
Training on augumented user 134504 46/50 current_auc = 0.4
User 134504 AUC after training: 0.4
User 134504 does not improve AUC. Reverting changes.
Training on augumented user 81256 47/50 current_auc = 0.4
User 81256 AUC after training: 0.4
User 81256 does not improve AUC. Reverting changes.
Training on augumented user 60290 48/50 current_auc = 0.4
User 60290 AUC after training: 0.4
User 60290 does not improve AUC. Reverting changes.
Training on augumented user 116341 49/50 current_auc = 0.4
User 116341 AUC after training: 0.4
User 116341 does not improve AUC. Reverting changes.
[2024-12-02 19:32:21.517286] start test user 87495 212/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:32:21.957604] start test user 87495 212/568 recall augumented users by random, augumented_users = [26104, 16678, 98771, 4694, 29262, 91160, 40389, 61320, 76565, 34093, 43460, 8695, 93379, 111189, 11876, 77518, 20814, 2486, 45535, 107056, 50160, 59795, 124057, 25753, 24135, 39395, 47302, 38369, 54846, 25745, 120173, 36781, 9285, 84146, 58068, 30592, 39711, 19812, 124305, 24791, 20263, 25721, 100266, 18157, 92690, 12864, 19, 69454, 17543, 78781]
[2024-12-02 19:32:21.972924] user = 87495 Cloud 212/568
[2024-12-02 19:32:21.986809] user = 87495 Local 212/568
[2024-12-02 19:32:22.099174] user = 87495 Local+ 212/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:32:24.369959] user = 87495 MPDA- 212/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5317035905271199
Training on augumented user 26104 0/50 current_auc = 0.5317035905271199
User 26104 AUC after training: 0.5314489432136491
User 26104 does not improve AUC. Reverting changes.
Training on augumented user 16678 1/50 current_auc = 0.5317035905271199
User 16678 AUC after training: 0.5309396485867074
User 16678 does not improve AUC. Reverting changes.
Training on augumented user 98771 2/50 current_auc = 0.5317035905271199
User 98771 AUC after training: 0.5309396485867074
User 98771 does not improve AUC. Reverting changes.
Training on augumented user 4694 3/50 current_auc = 0.5317035905271199
User 4694 AUC after training: 0.5311942959001783
User 4694 does not improve AUC. Reverting changes.
Training on augumented user 29262 4/50 current_auc = 0.5317035905271199
User 29262 AUC after training: 0.5311942959001782
User 29262 does not improve AUC. Reverting changes.
Training on augumented user 91160 5/50 current_auc = 0.5317035905271199
User 91160 AUC after training: 0.5324675324675324
User 91160 improves AUC. Keeping the model.
Training on augumented user 40389 6/50 current_auc = 0.5324675324675324
User 40389 AUC after training: 0.5309396485867074
User 40389 does not improve AUC. Reverting changes.
Training on augumented user 61320 7/50 current_auc = 0.5324675324675324
User 61320 AUC after training: 0.5319582378405908
User 61320 does not improve AUC. Reverting changes.
Training on augumented user 76565 8/50 current_auc = 0.5324675324675324
User 76565 AUC after training: 0.5306850012732366
User 76565 does not improve AUC. Reverting changes.
Training on augumented user 34093 9/50 current_auc = 0.5324675324675324
User 34093 AUC after training: 0.5309396485867074
User 34093 does not improve AUC. Reverting changes.
Training on augumented user 43460 10/50 current_auc = 0.5324675324675324
User 43460 AUC after training: 0.5314489432136491
User 43460 does not improve AUC. Reverting changes.
Training on augumented user 8695 11/50 current_auc = 0.5324675324675324
User 8695 AUC after training: 0.5327221797810033
User 8695 improves AUC. Keeping the model.
Training on augumented user 93379 12/50 current_auc = 0.5327221797810033
User 93379 AUC after training: 0.5324675324675324
User 93379 does not improve AUC. Reverting changes.
Training on augumented user 111189 13/50 current_auc = 0.5327221797810033
User 111189 AUC after training: 0.529921059332824
User 111189 does not improve AUC. Reverting changes.
Training on augumented user 11876 14/50 current_auc = 0.5327221797810033
User 11876 AUC after training: 0.5324675324675324
User 11876 does not improve AUC. Reverting changes.
Training on augumented user 77518 15/50 current_auc = 0.5327221797810033
User 77518 AUC after training: 0.5375604787369493
User 77518 improves AUC. Keeping the model.
Training on augumented user 20814 16/50 current_auc = 0.5375604787369493
User 20814 AUC after training: 0.538324420677362
User 20814 improves AUC. Keeping the model.
Training on augumented user 2486 17/50 current_auc = 0.538324420677362
User 2486 AUC after training: 0.5388337153043036
User 2486 improves AUC. Keeping the model.
Training on augumented user 45535 18/50 current_auc = 0.5388337153043036
User 45535 AUC after training: 0.5388337153043035
User 45535 does not improve AUC. Reverting changes.
Training on augumented user 107056 19/50 current_auc = 0.5388337153043036
User 107056 AUC after training: 0.5378151260504201
User 107056 does not improve AUC. Reverting changes.
Training on augumented user 50160 20/50 current_auc = 0.5388337153043036
User 50160 AUC after training: 0.5403615991851286
User 50160 improves AUC. Keeping the model.
Training on augumented user 59795 21/50 current_auc = 0.5403615991851286
User 59795 AUC after training: 0.5395976572447161
User 59795 does not improve AUC. Reverting changes.
Training on augumented user 124057 22/50 current_auc = 0.5403615991851286
User 124057 AUC after training: 0.5403615991851286
User 124057 does not improve AUC. Reverting changes.
Training on augumented user 25753 23/50 current_auc = 0.5403615991851286
User 25753 AUC after training: 0.5403615991851286
User 25753 does not improve AUC. Reverting changes.
Training on augumented user 24135 24/50 current_auc = 0.5403615991851286
User 24135 AUC after training: 0.5352686529157118
User 24135 does not improve AUC. Reverting changes.
Training on augumented user 39395 25/50 current_auc = 0.5403615991851286
User 39395 AUC after training: 0.5403615991851286
User 39395 does not improve AUC. Reverting changes.
Training on augumented user 47302 26/50 current_auc = 0.5403615991851286
User 47302 AUC after training: 0.5406162464985994
User 47302 improves AUC. Keeping the model.
Training on augumented user 38369 27/50 current_auc = 0.5406162464985994
User 38369 AUC after training: 0.5406162464985994
User 38369 does not improve AUC. Reverting changes.
Training on augumented user 54846 28/50 current_auc = 0.5406162464985994
User 54846 AUC after training: 0.5390883626177744
User 54846 does not improve AUC. Reverting changes.
Training on augumented user 25745 29/50 current_auc = 0.5406162464985994
User 25745 AUC after training: 0.5401069518716578
User 25745 does not improve AUC. Reverting changes.
Training on augumented user 120173 30/50 current_auc = 0.5406162464985994
User 120173 AUC after training: 0.5395976572447161
User 120173 does not improve AUC. Reverting changes.
Training on augumented user 36781 31/50 current_auc = 0.5406162464985994
User 36781 AUC after training: 0.5385790679908327
User 36781 does not improve AUC. Reverting changes.
Training on augumented user 9285 32/50 current_auc = 0.5406162464985994
User 9285 AUC after training: 0.5385790679908327
User 9285 does not improve AUC. Reverting changes.
Training on augumented user 84146 33/50 current_auc = 0.5406162464985994
User 84146 AUC after training: 0.5390883626177744
User 84146 does not improve AUC. Reverting changes.
Training on augumented user 58068 34/50 current_auc = 0.5406162464985994
User 58068 AUC after training: 0.5390883626177744
User 58068 does not improve AUC. Reverting changes.
Training on augumented user 30592 35/50 current_auc = 0.5406162464985994
User 30592 AUC after training: 0.5393430099312452
User 30592 does not improve AUC. Reverting changes.
Training on augumented user 39711 36/50 current_auc = 0.5406162464985994
User 39711 AUC after training: 0.5403615991851286
User 39711 does not improve AUC. Reverting changes.
Training on augumented user 19812 37/50 current_auc = 0.5406162464985994
User 19812 AUC after training: 0.5411255411255412
User 19812 improves AUC. Keeping the model.
Training on augumented user 124305 38/50 current_auc = 0.5411255411255412
User 124305 AUC after training: 0.541380188439012
User 124305 improves AUC. Keeping the model.
Training on augumented user 24791 39/50 current_auc = 0.541380188439012
User 24791 AUC after training: 0.5393430099312452
User 24791 does not improve AUC. Reverting changes.
Training on augumented user 20263 40/50 current_auc = 0.541380188439012
User 20263 AUC after training: 0.5385790679908327
User 20263 does not improve AUC. Reverting changes.
Training on augumented user 25721 41/50 current_auc = 0.541380188439012
User 25721 AUC after training: 0.5398523045581869
User 25721 does not improve AUC. Reverting changes.
Training on augumented user 100266 42/50 current_auc = 0.541380188439012
User 100266 AUC after training: 0.5401069518716578
User 100266 does not improve AUC. Reverting changes.
Training on augumented user 18157 43/50 current_auc = 0.541380188439012
User 18157 AUC after training: 0.5406162464985994
User 18157 does not improve AUC. Reverting changes.
Training on augumented user 92690 44/50 current_auc = 0.541380188439012
User 92690 AUC after training: 0.5388337153043035
User 92690 does not improve AUC. Reverting changes.
Training on augumented user 12864 45/50 current_auc = 0.541380188439012
User 12864 AUC after training: 0.5411255411255411
User 12864 does not improve AUC. Reverting changes.
Training on augumented user 19 46/50 current_auc = 0.541380188439012
User 19 AUC after training: 0.5408708938120703
User 19 does not improve AUC. Reverting changes.
Training on augumented user 69454 47/50 current_auc = 0.541380188439012
User 69454 AUC after training: 0.5406162464985994
User 69454 does not improve AUC. Reverting changes.
Training on augumented user 17543 48/50 current_auc = 0.541380188439012
User 17543 AUC after training: 0.5398523045581869
User 17543 does not improve AUC. Reverting changes.
Training on augumented user 78781 49/50 current_auc = 0.541380188439012
User 78781 AUC after training: 0.538069773363891
User 78781 does not improve AUC. Reverting changes.
[2024-12-02 19:32:57.929205] start test user 87502 213/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:32:58.375754] start test user 87502 213/568 recall augumented users by random, augumented_users = [130020, 114650, 2066, 128951, 134310, 137410, 9774, 51210, 121733, 125215, 1145, 73510, 20143, 126749, 78768, 120641, 68253, 73985, 63516, 32350, 44661, 102168, 130074, 43383, 52419, 40258, 77995, 14665, 27017, 33444, 117440, 130868, 7152, 89596, 78663, 130383, 62395, 76162, 125486, 96554, 57330, 69386, 11946, 63987, 90899, 802, 40502, 121339, 97994, 54134]
[2024-12-02 19:32:58.391678] user = 87502 Cloud 213/568
[2024-12-02 19:32:58.411869] user = 87502 Local 213/568
[2024-12-02 19:32:58.550844] user = 87502 Local+ 213/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:33:00.896082] user = 87502 MPDA- 213/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.600630733944954
Training on augumented user 130020 0/50 current_auc = 0.600630733944954
User 130020 AUC after training: 0.5987385321100918
User 130020 does not improve AUC. Reverting changes.
Training on augumented user 114650 1/50 current_auc = 0.600630733944954
User 114650 AUC after training: 0.6006880733944955
User 114650 improves AUC. Keeping the model.
Training on augumented user 2066 2/50 current_auc = 0.6006880733944955
User 2066 AUC after training: 0.6007454128440367
User 2066 improves AUC. Keeping the model.
Training on augumented user 128951 3/50 current_auc = 0.6007454128440367
User 128951 AUC after training: 0.6007454128440367
User 128951 does not improve AUC. Reverting changes.
Training on augumented user 134310 4/50 current_auc = 0.6007454128440367
User 134310 AUC after training: 0.6009174311926606
User 134310 improves AUC. Keeping the model.
Training on augumented user 137410 5/50 current_auc = 0.6009174311926606
User 137410 AUC after training: 0.6001146788990827
User 137410 does not improve AUC. Reverting changes.
Training on augumented user 9774 6/50 current_auc = 0.6009174311926606
User 9774 AUC after training: 0.6009174311926606
User 9774 does not improve AUC. Reverting changes.
Training on augumented user 51210 7/50 current_auc = 0.6009174311926606
User 51210 AUC after training: 0.5985091743119266
User 51210 does not improve AUC. Reverting changes.
Training on augumented user 121733 8/50 current_auc = 0.6009174311926606
User 121733 AUC after training: 0.6012614678899083
User 121733 improves AUC. Keeping the model.
Training on augumented user 125215 9/50 current_auc = 0.6012614678899083
User 125215 AUC after training: 0.5981651376146789
User 125215 does not improve AUC. Reverting changes.
Training on augumented user 1145 10/50 current_auc = 0.6012614678899083
User 1145 AUC after training: 0.6005733944954129
User 1145 does not improve AUC. Reverting changes.
Training on augumented user 73510 11/50 current_auc = 0.6012614678899083
User 73510 AUC after training: 0.601204128440367
User 73510 does not improve AUC. Reverting changes.
Training on augumented user 20143 12/50 current_auc = 0.6012614678899083
User 20143 AUC after training: 0.5982798165137615
User 20143 does not improve AUC. Reverting changes.
Training on augumented user 126749 13/50 current_auc = 0.6012614678899083
User 126749 AUC after training: 0.6002293577981651
User 126749 does not improve AUC. Reverting changes.
Training on augumented user 78768 14/50 current_auc = 0.6012614678899083
User 78768 AUC after training: 0.6014908256880734
User 78768 improves AUC. Keeping the model.
Training on augumented user 120641 15/50 current_auc = 0.6014908256880734
User 120641 AUC after training: 0.6022935779816514
User 120641 improves AUC. Keeping the model.
Training on augumented user 68253 16/50 current_auc = 0.6022935779816514
User 68253 AUC after training: 0.6018922018348624
User 68253 does not improve AUC. Reverting changes.
Training on augumented user 73985 17/50 current_auc = 0.6022935779816514
User 73985 AUC after training: 0.600802752293578
User 73985 does not improve AUC. Reverting changes.
Training on augumented user 63516 18/50 current_auc = 0.6022935779816514
User 63516 AUC after training: 0.6009174311926605
User 63516 does not improve AUC. Reverting changes.
Training on augumented user 32350 19/50 current_auc = 0.6022935779816514
User 32350 AUC after training: 0.5998853211009174
User 32350 does not improve AUC. Reverting changes.
Training on augumented user 44661 20/50 current_auc = 0.6022935779816514
User 44661 AUC after training: 0.6018348623853211
User 44661 does not improve AUC. Reverting changes.
Training on augumented user 102168 21/50 current_auc = 0.6022935779816514
User 102168 AUC after training: 0.6009174311926606
User 102168 does not improve AUC. Reverting changes.
Training on augumented user 130074 22/50 current_auc = 0.6022935779816514
User 130074 AUC after training: 0.6021215596330276
User 130074 does not improve AUC. Reverting changes.
Training on augumented user 43383 23/50 current_auc = 0.6022935779816514
User 43383 AUC after training: 0.602006880733945
User 43383 does not improve AUC. Reverting changes.
Training on augumented user 52419 24/50 current_auc = 0.6022935779816514
User 52419 AUC after training: 0.5995412844036698
User 52419 does not improve AUC. Reverting changes.
Training on augumented user 40258 25/50 current_auc = 0.6022935779816514
User 40258 AUC after training: 0.6012614678899083
User 40258 does not improve AUC. Reverting changes.
Training on augumented user 77995 26/50 current_auc = 0.6022935779816514
User 77995 AUC after training: 0.6018922018348624
User 77995 does not improve AUC. Reverting changes.
Training on augumented user 14665 27/50 current_auc = 0.6022935779816514
User 14665 AUC after training: 0.5988532110091743
User 14665 does not improve AUC. Reverting changes.
Training on augumented user 27017 28/50 current_auc = 0.6022935779816514
User 27017 AUC after training: 0.6011467889908257
User 27017 does not improve AUC. Reverting changes.
Training on augumented user 33444 29/50 current_auc = 0.6022935779816514
User 33444 AUC after training: 0.6011467889908257
User 33444 does not improve AUC. Reverting changes.
Training on augumented user 117440 30/50 current_auc = 0.6022935779816514
User 117440 AUC after training: 0.6021788990825688
User 117440 does not improve AUC. Reverting changes.
Training on augumented user 130868 31/50 current_auc = 0.6022935779816514
User 130868 AUC after training: 0.5997706422018348
User 130868 does not improve AUC. Reverting changes.
Training on augumented user 7152 32/50 current_auc = 0.6022935779816514
User 7152 AUC after training: 0.6021788990825688
User 7152 does not improve AUC. Reverting changes.
Training on augumented user 89596 33/50 current_auc = 0.6022935779816514
User 89596 AUC after training: 0.6021215596330275
User 89596 does not improve AUC. Reverting changes.
Training on augumented user 78663 34/50 current_auc = 0.6022935779816514
User 78663 AUC after training: 0.6020642201834863
User 78663 does not improve AUC. Reverting changes.
Training on augumented user 130383 35/50 current_auc = 0.6022935779816514
User 130383 AUC after training: 0.6019495412844037
User 130383 does not improve AUC. Reverting changes.
Training on augumented user 62395 36/50 current_auc = 0.6022935779816514
User 62395 AUC after training: 0.601605504587156
User 62395 does not improve AUC. Reverting changes.
Training on augumented user 76162 37/50 current_auc = 0.6022935779816514
User 76162 AUC after training: 0.6013761467889908
User 76162 does not improve AUC. Reverting changes.
Training on augumented user 125486 38/50 current_auc = 0.6022935779816514
User 125486 AUC after training: 0.601204128440367
User 125486 does not improve AUC. Reverting changes.
Training on augumented user 96554 39/50 current_auc = 0.6022935779816514
User 96554 AUC after training: 0.6018922018348625
User 96554 does not improve AUC. Reverting changes.
Training on augumented user 57330 40/50 current_auc = 0.6022935779816514
User 57330 AUC after training: 0.6021788990825688
User 57330 does not improve AUC. Reverting changes.
Training on augumented user 69386 41/50 current_auc = 0.6022935779816514
User 69386 AUC after training: 0.6019495412844037
User 69386 does not improve AUC. Reverting changes.
Training on augumented user 11946 42/50 current_auc = 0.6022935779816514
User 11946 AUC after training: 0.6018348623853211
User 11946 does not improve AUC. Reverting changes.
Training on augumented user 63987 43/50 current_auc = 0.6022935779816514
User 63987 AUC after training: 0.6012614678899083
User 63987 does not improve AUC. Reverting changes.
Training on augumented user 90899 44/50 current_auc = 0.6022935779816514
User 90899 AUC after training: 0.6014908256880734
User 90899 does not improve AUC. Reverting changes.
Training on augumented user 802 45/50 current_auc = 0.6022935779816514
User 802 AUC after training: 0.5989678899082569
User 802 does not improve AUC. Reverting changes.
Training on augumented user 40502 46/50 current_auc = 0.6022935779816514
User 40502 AUC after training: 0.6014908256880734
User 40502 does not improve AUC. Reverting changes.
Training on augumented user 121339 47/50 current_auc = 0.6022935779816514
User 121339 AUC after training: 0.6018922018348625
User 121339 does not improve AUC. Reverting changes.
Training on augumented user 97994 48/50 current_auc = 0.6022935779816514
User 97994 AUC after training: 0.601605504587156
User 97994 does not improve AUC. Reverting changes.
Training on augumented user 54134 49/50 current_auc = 0.6022935779816514
User 54134 AUC after training: 0.5989678899082569
User 54134 does not improve AUC. Reverting changes.
[2024-12-02 19:33:31.312793] start test user 87503 214/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:33:31.742066] start test user 87503 214/568 recall augumented users by random, augumented_users = [22334, 50140, 133976, 105199, 122002, 42839, 128595, 127619, 67487, 48671, 32849, 24158, 10661, 65542, 137930, 119100, 72218, 63878, 97001, 110314, 117551, 59531, 127329, 26845, 113706, 26886, 31238, 73651, 106149, 1085, 133818, 21946, 2181, 17395, 67333, 39321, 30966, 114825, 19695, 31717, 115750, 118910, 120497, 29962, 88942, 38380, 55868, 82173, 18327, 108728]
[2024-12-02 19:33:31.756949] user = 87503 Cloud 214/568
[2024-12-02 19:33:31.767273] user = 87503 Local 214/568
[2024-12-02 19:33:31.810763] user = 87503 Local+ 214/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:33:34.613243] user = 87503 MPDA- 214/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.47252747252747246
Training on augumented user 22334 0/50 current_auc = 0.47252747252747246
User 22334 AUC after training: 0.48351648351648346
User 22334 improves AUC. Keeping the model.
Training on augumented user 50140 1/50 current_auc = 0.48351648351648346
User 50140 AUC after training: 0.47252747252747246
User 50140 does not improve AUC. Reverting changes.
Training on augumented user 133976 2/50 current_auc = 0.48351648351648346
User 133976 AUC after training: 0.48351648351648346
User 133976 does not improve AUC. Reverting changes.
Training on augumented user 105199 3/50 current_auc = 0.48351648351648346
User 105199 AUC after training: 0.48351648351648346
User 105199 does not improve AUC. Reverting changes.
Training on augumented user 122002 4/50 current_auc = 0.48351648351648346
User 122002 AUC after training: 0.48351648351648346
User 122002 does not improve AUC. Reverting changes.
Training on augumented user 42839 5/50 current_auc = 0.48351648351648346
User 42839 AUC after training: 0.48351648351648346
User 42839 does not improve AUC. Reverting changes.
Training on augumented user 128595 6/50 current_auc = 0.48351648351648346
User 128595 AUC after training: 0.48351648351648346
User 128595 does not improve AUC. Reverting changes.
Training on augumented user 127619 7/50 current_auc = 0.48351648351648346
User 127619 AUC after training: 0.48351648351648346
User 127619 does not improve AUC. Reverting changes.
Training on augumented user 67487 8/50 current_auc = 0.48351648351648346
User 67487 AUC after training: 0.48351648351648346
User 67487 does not improve AUC. Reverting changes.
Training on augumented user 48671 9/50 current_auc = 0.48351648351648346
User 48671 AUC after training: 0.48351648351648346
User 48671 does not improve AUC. Reverting changes.
Training on augumented user 32849 10/50 current_auc = 0.48351648351648346
User 32849 AUC after training: 0.48351648351648346
User 32849 does not improve AUC. Reverting changes.
Training on augumented user 24158 11/50 current_auc = 0.48351648351648346
User 24158 AUC after training: 0.48351648351648346
User 24158 does not improve AUC. Reverting changes.
Training on augumented user 10661 12/50 current_auc = 0.48351648351648346
User 10661 AUC after training: 0.47252747252747246
User 10661 does not improve AUC. Reverting changes.
Training on augumented user 65542 13/50 current_auc = 0.48351648351648346
User 65542 AUC after training: 0.48351648351648346
User 65542 does not improve AUC. Reverting changes.
Training on augumented user 137930 14/50 current_auc = 0.48351648351648346
User 137930 AUC after training: 0.48351648351648346
User 137930 does not improve AUC. Reverting changes.
Training on augumented user 119100 15/50 current_auc = 0.48351648351648346
User 119100 AUC after training: 0.48351648351648346
User 119100 does not improve AUC. Reverting changes.
Training on augumented user 72218 16/50 current_auc = 0.48351648351648346
User 72218 AUC after training: 0.48351648351648346
User 72218 does not improve AUC. Reverting changes.
Training on augumented user 63878 17/50 current_auc = 0.48351648351648346
User 63878 AUC after training: 0.48351648351648346
User 63878 does not improve AUC. Reverting changes.
Training on augumented user 97001 18/50 current_auc = 0.48351648351648346
User 97001 AUC after training: 0.48351648351648346
User 97001 does not improve AUC. Reverting changes.
Training on augumented user 110314 19/50 current_auc = 0.48351648351648346
User 110314 AUC after training: 0.48351648351648346
User 110314 does not improve AUC. Reverting changes.
Training on augumented user 117551 20/50 current_auc = 0.48351648351648346
User 117551 AUC after training: 0.48351648351648346
User 117551 does not improve AUC. Reverting changes.
Training on augumented user 59531 21/50 current_auc = 0.48351648351648346
User 59531 AUC after training: 0.48351648351648346
User 59531 does not improve AUC. Reverting changes.
Training on augumented user 127329 22/50 current_auc = 0.48351648351648346
User 127329 AUC after training: 0.47252747252747246
User 127329 does not improve AUC. Reverting changes.
Training on augumented user 26845 23/50 current_auc = 0.48351648351648346
User 26845 AUC after training: 0.48351648351648346
User 26845 does not improve AUC. Reverting changes.
Training on augumented user 113706 24/50 current_auc = 0.48351648351648346
User 113706 AUC after training: 0.48351648351648346
User 113706 does not improve AUC. Reverting changes.
Training on augumented user 26886 25/50 current_auc = 0.48351648351648346
User 26886 AUC after training: 0.48351648351648346
User 26886 does not improve AUC. Reverting changes.
Training on augumented user 31238 26/50 current_auc = 0.48351648351648346
User 31238 AUC after training: 0.48351648351648346
User 31238 does not improve AUC. Reverting changes.
Training on augumented user 73651 27/50 current_auc = 0.48351648351648346
User 73651 AUC after training: 0.48351648351648346
User 73651 does not improve AUC. Reverting changes.
Training on augumented user 106149 28/50 current_auc = 0.48351648351648346
User 106149 AUC after training: 0.47252747252747246
User 106149 does not improve AUC. Reverting changes.
Training on augumented user 1085 29/50 current_auc = 0.48351648351648346
User 1085 AUC after training: 0.47252747252747246
User 1085 does not improve AUC. Reverting changes.
Training on augumented user 133818 30/50 current_auc = 0.48351648351648346
User 133818 AUC after training: 0.48351648351648346
User 133818 does not improve AUC. Reverting changes.
Training on augumented user 21946 31/50 current_auc = 0.48351648351648346
User 21946 AUC after training: 0.48351648351648346
User 21946 does not improve AUC. Reverting changes.
Training on augumented user 2181 32/50 current_auc = 0.48351648351648346
User 2181 AUC after training: 0.47252747252747246
User 2181 does not improve AUC. Reverting changes.
Training on augumented user 17395 33/50 current_auc = 0.48351648351648346
User 17395 AUC after training: 0.47252747252747246
User 17395 does not improve AUC. Reverting changes.
Training on augumented user 67333 34/50 current_auc = 0.48351648351648346
User 67333 AUC after training: 0.48351648351648346
User 67333 does not improve AUC. Reverting changes.
Training on augumented user 39321 35/50 current_auc = 0.48351648351648346
User 39321 AUC after training: 0.48351648351648346
User 39321 does not improve AUC. Reverting changes.
Training on augumented user 30966 36/50 current_auc = 0.48351648351648346
User 30966 AUC after training: 0.48351648351648346
User 30966 does not improve AUC. Reverting changes.
Training on augumented user 114825 37/50 current_auc = 0.48351648351648346
User 114825 AUC after training: 0.48351648351648346
User 114825 does not improve AUC. Reverting changes.
Training on augumented user 19695 38/50 current_auc = 0.48351648351648346
User 19695 AUC after training: 0.48351648351648346
User 19695 does not improve AUC. Reverting changes.
Training on augumented user 31717 39/50 current_auc = 0.48351648351648346
User 31717 AUC after training: 0.48351648351648346
User 31717 does not improve AUC. Reverting changes.
Training on augumented user 115750 40/50 current_auc = 0.48351648351648346
User 115750 AUC after training: 0.48351648351648346
User 115750 does not improve AUC. Reverting changes.
Training on augumented user 118910 41/50 current_auc = 0.48351648351648346
User 118910 AUC after training: 0.48351648351648346
User 118910 does not improve AUC. Reverting changes.
Training on augumented user 120497 42/50 current_auc = 0.48351648351648346
User 120497 AUC after training: 0.48351648351648346
User 120497 does not improve AUC. Reverting changes.
Training on augumented user 29962 43/50 current_auc = 0.48351648351648346
User 29962 AUC after training: 0.48351648351648346
User 29962 does not improve AUC. Reverting changes.
Training on augumented user 88942 44/50 current_auc = 0.48351648351648346
User 88942 AUC after training: 0.48351648351648346
User 88942 does not improve AUC. Reverting changes.
Training on augumented user 38380 45/50 current_auc = 0.48351648351648346
User 38380 AUC after training: 0.48351648351648346
User 38380 does not improve AUC. Reverting changes.
Training on augumented user 55868 46/50 current_auc = 0.48351648351648346
User 55868 AUC after training: 0.48351648351648346
User 55868 does not improve AUC. Reverting changes.
Training on augumented user 82173 47/50 current_auc = 0.48351648351648346
User 82173 AUC after training: 0.48351648351648346
User 82173 does not improve AUC. Reverting changes.
Training on augumented user 18327 48/50 current_auc = 0.48351648351648346
User 18327 AUC after training: 0.48351648351648346
User 18327 does not improve AUC. Reverting changes.
Training on augumented user 108728 49/50 current_auc = 0.48351648351648346
User 108728 AUC after training: 0.48351648351648346
User 108728 does not improve AUC. Reverting changes.
[2024-12-02 19:34:04.771889] start test user 87532 215/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:34:05.211977] start test user 87532 215/568 recall augumented users by random, augumented_users = [116521, 2678, 131847, 133240, 43073, 11125, 3285, 34646, 102830, 25305, 5224, 7812, 103027, 1639, 125674, 126240, 49215, 112320, 71720, 84943, 69743, 63692, 41635, 24466, 117358, 54885, 61919, 56418, 100033, 98687, 87769, 57086, 21052, 31406, 6033, 136997, 122816, 1585, 62306, 7477, 135486, 79579, 129343, 135498, 67097, 71553, 8541, 121892, 68278, 117053]
[2024-12-02 19:34:05.227085] user = 87532 Cloud 215/568
[2024-12-02 19:34:05.241343] user = 87532 Local 215/568
[2024-12-02 19:34:05.299627] user = 87532 Local+ 215/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:34:07.672499] user = 87532 MPDA- 215/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6536687631027254
Training on augumented user 116521 0/50 current_auc = 0.6536687631027254
User 116521 AUC after training: 0.6519916142557652
User 116521 does not improve AUC. Reverting changes.
Training on augumented user 2678 1/50 current_auc = 0.6536687631027254
User 2678 AUC after training: 0.6557651991614256
User 2678 improves AUC. Keeping the model.
Training on augumented user 131847 2/50 current_auc = 0.6557651991614256
User 131847 AUC after training: 0.6524109014675052
User 131847 does not improve AUC. Reverting changes.
Training on augumented user 133240 3/50 current_auc = 0.6557651991614256
User 133240 AUC after training: 0.6540880503144654
User 133240 does not improve AUC. Reverting changes.
Training on augumented user 43073 4/50 current_auc = 0.6557651991614256
User 43073 AUC after training: 0.6540880503144654
User 43073 does not improve AUC. Reverting changes.
Training on augumented user 11125 5/50 current_auc = 0.6557651991614256
User 11125 AUC after training: 0.6528301886792454
User 11125 does not improve AUC. Reverting changes.
Training on augumented user 3285 6/50 current_auc = 0.6557651991614256
User 3285 AUC after training: 0.6549266247379455
User 3285 does not improve AUC. Reverting changes.
Training on augumented user 34646 7/50 current_auc = 0.6557651991614256
User 34646 AUC after training: 0.6536687631027254
User 34646 does not improve AUC. Reverting changes.
Training on augumented user 102830 8/50 current_auc = 0.6557651991614256
User 102830 AUC after training: 0.6536687631027254
User 102830 does not improve AUC. Reverting changes.
Training on augumented user 25305 9/50 current_auc = 0.6557651991614256
User 25305 AUC after training: 0.6536687631027254
User 25305 does not improve AUC. Reverting changes.
Training on augumented user 5224 10/50 current_auc = 0.6557651991614256
User 5224 AUC after training: 0.6532494758909853
User 5224 does not improve AUC. Reverting changes.
Training on augumented user 7812 11/50 current_auc = 0.6557651991614256
User 7812 AUC after training: 0.6540880503144655
User 7812 does not improve AUC. Reverting changes.
Training on augumented user 103027 12/50 current_auc = 0.6557651991614256
User 103027 AUC after training: 0.6545073375262054
User 103027 does not improve AUC. Reverting changes.
Training on augumented user 1639 13/50 current_auc = 0.6557651991614256
User 1639 AUC after training: 0.6549266247379455
User 1639 does not improve AUC. Reverting changes.
Training on augumented user 125674 14/50 current_auc = 0.6557651991614256
User 125674 AUC after training: 0.6549266247379455
User 125674 does not improve AUC. Reverting changes.
Training on augumented user 126240 15/50 current_auc = 0.6557651991614256
User 126240 AUC after training: 0.6532494758909853
User 126240 does not improve AUC. Reverting changes.
Training on augumented user 49215 16/50 current_auc = 0.6557651991614256
User 49215 AUC after training: 0.6549266247379455
User 49215 does not improve AUC. Reverting changes.
Training on augumented user 112320 17/50 current_auc = 0.6557651991614256
User 112320 AUC after training: 0.6566037735849056
User 112320 improves AUC. Keeping the model.
Training on augumented user 71720 18/50 current_auc = 0.6566037735849056
User 71720 AUC after training: 0.6524109014675052
User 71720 does not improve AUC. Reverting changes.
Training on augumented user 84943 19/50 current_auc = 0.6566037735849056
User 84943 AUC after training: 0.6557651991614256
User 84943 does not improve AUC. Reverting changes.
Training on augumented user 69743 20/50 current_auc = 0.6566037735849056
User 69743 AUC after training: 0.6570230607966457
User 69743 improves AUC. Keeping the model.
Training on augumented user 63692 21/50 current_auc = 0.6570230607966457
User 63692 AUC after training: 0.6561844863731656
User 63692 does not improve AUC. Reverting changes.
Training on augumented user 41635 22/50 current_auc = 0.6570230607966457
User 41635 AUC after training: 0.650314465408805
User 41635 does not improve AUC. Reverting changes.
Training on augumented user 24466 23/50 current_auc = 0.6570230607966457
User 24466 AUC after training: 0.6540880503144655
User 24466 does not improve AUC. Reverting changes.
Training on augumented user 117358 24/50 current_auc = 0.6570230607966457
User 117358 AUC after training: 0.6553459119496855
User 117358 does not improve AUC. Reverting changes.
Training on augumented user 54885 25/50 current_auc = 0.6570230607966457
User 54885 AUC after training: 0.6540880503144655
User 54885 does not improve AUC. Reverting changes.
Training on augumented user 61919 26/50 current_auc = 0.6570230607966457
User 61919 AUC after training: 0.6561844863731656
User 61919 does not improve AUC. Reverting changes.
Training on augumented user 56418 27/50 current_auc = 0.6570230607966457
User 56418 AUC after training: 0.6561844863731656
User 56418 does not improve AUC. Reverting changes.
Training on augumented user 100033 28/50 current_auc = 0.6570230607966457
User 100033 AUC after training: 0.6553459119496856
User 100033 does not improve AUC. Reverting changes.
Training on augumented user 98687 29/50 current_auc = 0.6570230607966457
User 98687 AUC after training: 0.6540880503144654
User 98687 does not improve AUC. Reverting changes.
Training on augumented user 87769 30/50 current_auc = 0.6570230607966457
User 87769 AUC after training: 0.6561844863731656
User 87769 does not improve AUC. Reverting changes.
Training on augumented user 57086 31/50 current_auc = 0.6570230607966457
User 57086 AUC after training: 0.6553459119496856
User 57086 does not improve AUC. Reverting changes.
Training on augumented user 21052 32/50 current_auc = 0.6570230607966457
User 21052 AUC after training: 0.6545073375262055
User 21052 does not improve AUC. Reverting changes.
Training on augumented user 31406 33/50 current_auc = 0.6570230607966457
User 31406 AUC after training: 0.6545073375262055
User 31406 does not improve AUC. Reverting changes.
Training on augumented user 6033 34/50 current_auc = 0.6570230607966457
User 6033 AUC after training: 0.6561844863731656
User 6033 does not improve AUC. Reverting changes.
Training on augumented user 136997 35/50 current_auc = 0.6570230607966457
User 136997 AUC after training: 0.6566037735849056
User 136997 does not improve AUC. Reverting changes.
Training on augumented user 122816 36/50 current_auc = 0.6570230607966457
User 122816 AUC after training: 0.6549266247379455
User 122816 does not improve AUC. Reverting changes.
Training on augumented user 1585 37/50 current_auc = 0.6570230607966457
User 1585 AUC after training: 0.6570230607966456
User 1585 does not improve AUC. Reverting changes.
Training on augumented user 62306 38/50 current_auc = 0.6570230607966457
User 62306 AUC after training: 0.6557651991614255
User 62306 does not improve AUC. Reverting changes.
Training on augumented user 7477 39/50 current_auc = 0.6570230607966457
User 7477 AUC after training: 0.6553459119496856
User 7477 does not improve AUC. Reverting changes.
Training on augumented user 135486 40/50 current_auc = 0.6570230607966457
User 135486 AUC after training: 0.649895178197065
User 135486 does not improve AUC. Reverting changes.
Training on augumented user 79579 41/50 current_auc = 0.6570230607966457
User 79579 AUC after training: 0.6587002096436059
User 79579 improves AUC. Keeping the model.
Training on augumented user 129343 42/50 current_auc = 0.6587002096436059
User 129343 AUC after training: 0.659119496855346
User 129343 improves AUC. Keeping the model.
Training on augumented user 135498 43/50 current_auc = 0.659119496855346
User 135498 AUC after training: 0.6612159329140461
User 135498 improves AUC. Keeping the model.
Training on augumented user 67097 44/50 current_auc = 0.6612159329140461
User 67097 AUC after training: 0.6641509433962265
User 67097 improves AUC. Keeping the model.
Training on augumented user 71553 45/50 current_auc = 0.6641509433962265
User 71553 AUC after training: 0.6637316561844864
User 71553 does not improve AUC. Reverting changes.
Training on augumented user 8541 46/50 current_auc = 0.6641509433962265
User 8541 AUC after training: 0.659538784067086
User 8541 does not improve AUC. Reverting changes.
Training on augumented user 121892 47/50 current_auc = 0.6641509433962265
User 121892 AUC after training: 0.6645702306079665
User 121892 improves AUC. Keeping the model.
Training on augumented user 68278 48/50 current_auc = 0.6645702306079665
User 68278 AUC after training: 0.6620545073375262
User 68278 does not improve AUC. Reverting changes.
Training on augumented user 117053 49/50 current_auc = 0.6645702306079665
User 117053 AUC after training: 0.6624737945492662
User 117053 does not improve AUC. Reverting changes.
[2024-12-02 19:34:37.607148] start test user 87537 216/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:34:38.069034] start test user 87537 216/568 recall augumented users by random, augumented_users = [91759, 103849, 52288, 41053, 55493, 74162, 95693, 63014, 76078, 90050, 113189, 92395, 137636, 11686, 10159, 132643, 48076, 25541, 114414, 70335, 102752, 94948, 83331, 35506, 105252, 82405, 36332, 62114, 5233, 81821, 118946, 137395, 53418, 78928, 95132, 9268, 99369, 76390, 38819, 96266, 108537, 107911, 8146, 81249, 99292, 77835, 45834, 90479, 111264, 56552]
[2024-12-02 19:34:38.084225] user = 87537 Cloud 216/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:34:38.090909] user = 87537 Local 216/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:34:38.312415] user = 87537 Local+ 216/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:34:40.427957] user = 87537 MPDA- 216/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 91759 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91759 AUC after training: 0.5
User 91759 does not improve AUC. Reverting changes.
Training on augumented user 103849 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103849 AUC after training: 0.5
User 103849 does not improve AUC. Reverting changes.
Training on augumented user 52288 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52288 AUC after training: 0.5
User 52288 does not improve AUC. Reverting changes.
Training on augumented user 41053 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41053 AUC after training: 0.5
User 41053 does not improve AUC. Reverting changes.
Training on augumented user 55493 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55493 AUC after training: 0.5
User 55493 does not improve AUC. Reverting changes.
Training on augumented user 74162 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74162 AUC after training: 0.5
User 74162 does not improve AUC. Reverting changes.
Training on augumented user 95693 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95693 AUC after training: 0.5
User 95693 does not improve AUC. Reverting changes.
Training on augumented user 63014 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63014 AUC after training: 0.5
User 63014 does not improve AUC. Reverting changes.
Training on augumented user 76078 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76078 AUC after training: 0.5
User 76078 does not improve AUC. Reverting changes.
Training on augumented user 90050 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90050 AUC after training: 0.5
User 90050 does not improve AUC. Reverting changes.
Training on augumented user 113189 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113189 AUC after training: 0.5
User 113189 does not improve AUC. Reverting changes.
Training on augumented user 92395 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92395 AUC after training: 0.5
User 92395 does not improve AUC. Reverting changes.
Training on augumented user 137636 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137636 AUC after training: 0.5
User 137636 does not improve AUC. Reverting changes.
Training on augumented user 11686 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11686 AUC after training: 0.5
User 11686 does not improve AUC. Reverting changes.
Training on augumented user 10159 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10159 AUC after training: 0.5
User 10159 does not improve AUC. Reverting changes.
Training on augumented user 132643 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132643 AUC after training: 0.5
User 132643 does not improve AUC. Reverting changes.
Training on augumented user 48076 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48076 AUC after training: 0.5
User 48076 does not improve AUC. Reverting changes.
Training on augumented user 25541 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25541 AUC after training: 0.5
User 25541 does not improve AUC. Reverting changes.
Training on augumented user 114414 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114414 AUC after training: 0.5
User 114414 does not improve AUC. Reverting changes.
Training on augumented user 70335 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70335 AUC after training: 0.5
User 70335 does not improve AUC. Reverting changes.
Training on augumented user 102752 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102752 AUC after training: 0.5
User 102752 does not improve AUC. Reverting changes.
Training on augumented user 94948 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94948 AUC after training: 0.5
User 94948 does not improve AUC. Reverting changes.
Training on augumented user 83331 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83331 AUC after training: 0.5
User 83331 does not improve AUC. Reverting changes.
Training on augumented user 35506 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35506 AUC after training: 0.5
User 35506 does not improve AUC. Reverting changes.
Training on augumented user 105252 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105252 AUC after training: 0.5
User 105252 does not improve AUC. Reverting changes.
Training on augumented user 82405 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82405 AUC after training: 0.5
User 82405 does not improve AUC. Reverting changes.
Training on augumented user 36332 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36332 AUC after training: 0.5
User 36332 does not improve AUC. Reverting changes.
Training on augumented user 62114 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62114 AUC after training: 0.5
User 62114 does not improve AUC. Reverting changes.
Training on augumented user 5233 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5233 AUC after training: 0.5
User 5233 does not improve AUC. Reverting changes.
Training on augumented user 81821 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81821 AUC after training: 0.5
User 81821 does not improve AUC. Reverting changes.
Training on augumented user 118946 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118946 AUC after training: 0.5
User 118946 does not improve AUC. Reverting changes.
Training on augumented user 137395 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137395 AUC after training: 0.5
User 137395 does not improve AUC. Reverting changes.
Training on augumented user 53418 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53418 AUC after training: 0.5
User 53418 does not improve AUC. Reverting changes.
Training on augumented user 78928 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78928 AUC after training: 0.5
User 78928 does not improve AUC. Reverting changes.
Training on augumented user 95132 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95132 AUC after training: 0.5
User 95132 does not improve AUC. Reverting changes.
Training on augumented user 9268 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9268 AUC after training: 0.5
User 9268 does not improve AUC. Reverting changes.
Training on augumented user 99369 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99369 AUC after training: 0.5
User 99369 does not improve AUC. Reverting changes.
Training on augumented user 76390 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76390 AUC after training: 0.5
User 76390 does not improve AUC. Reverting changes.
Training on augumented user 38819 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38819 AUC after training: 0.5
User 38819 does not improve AUC. Reverting changes.
Training on augumented user 96266 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96266 AUC after training: 0.5
User 96266 does not improve AUC. Reverting changes.
Training on augumented user 108537 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108537 AUC after training: 0.5
User 108537 does not improve AUC. Reverting changes.
Training on augumented user 107911 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107911 AUC after training: 0.5
User 107911 does not improve AUC. Reverting changes.
Training on augumented user 8146 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8146 AUC after training: 0.5
User 8146 does not improve AUC. Reverting changes.
Training on augumented user 81249 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81249 AUC after training: 0.5
User 81249 does not improve AUC. Reverting changes.
Training on augumented user 99292 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99292 AUC after training: 0.5
User 99292 does not improve AUC. Reverting changes.
Training on augumented user 77835 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77835 AUC after training: 0.5
User 77835 does not improve AUC. Reverting changes.
Training on augumented user 45834 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45834 AUC after training: 0.5
User 45834 does not improve AUC. Reverting changes.
Training on augumented user 90479 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90479 AUC after training: 0.5
User 90479 does not improve AUC. Reverting changes.
Training on augumented user 111264 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111264 AUC after training: 0.5
User 111264 does not improve AUC. Reverting changes.
Training on augumented user 56552 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56552 AUC after training: 0.5
User 56552 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:35:09.077796] start test user 87573 217/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:35:09.796109] start test user 87573 217/568 recall augumented users by random, augumented_users = [81390, 16026, 123131, 72979, 104912, 105488, 82846, 94722, 14815, 56278, 88405, 25843, 117654, 127340, 64375, 16820, 57783, 64841, 130737, 12634, 105079, 110751, 50372, 96110, 132619, 18379, 26653, 18143, 6834, 133060, 100640, 86520, 111515, 16924, 33225, 13234, 26535, 130223, 28212, 94883, 109544, 33726, 20887, 6260, 49645, 1085, 8741, 114782, 9693, 119072]
[2024-12-02 19:35:09.828384] user = 87573 Cloud 217/568
[2024-12-02 19:35:09.868577] user = 87573 Local 217/568
[2024-12-02 19:35:10.024997] user = 87573 Local+ 217/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:35:12.606055] user = 87573 MPDA- 217/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6998145979703357
Training on augumented user 81390 0/50 current_auc = 0.6998145979703357
User 81390 AUC after training: 0.699756049960968
User 81390 does not improve AUC. Reverting changes.
Training on augumented user 16026 1/50 current_auc = 0.6998145979703357
User 16026 AUC after training: 0.6998829039812646
User 16026 improves AUC. Keeping the model.
Training on augumented user 123131 2/50 current_auc = 0.6998829039812646
User 123131 AUC after training: 0.6999609679937548
User 123131 improves AUC. Keeping the model.
Training on augumented user 72979 3/50 current_auc = 0.6999609679937548
User 72979 AUC after training: 0.6998145979703356
User 72979 does not improve AUC. Reverting changes.
Training on augumented user 104912 4/50 current_auc = 0.6999609679937548
User 104912 AUC after training: 0.6998829039812646
User 104912 does not improve AUC. Reverting changes.
Training on augumented user 105488 5/50 current_auc = 0.6999609679937548
User 105488 AUC after training: 0.699824355971897
User 105488 does not improve AUC. Reverting changes.
Training on augumented user 82846 6/50 current_auc = 0.6999609679937548
User 82846 AUC after training: 0.7001951600312255
User 82846 improves AUC. Keeping the model.
Training on augumented user 94722 7/50 current_auc = 0.7001951600312255
User 94722 AUC after training: 0.6999902419984387
User 94722 does not improve AUC. Reverting changes.
Training on augumented user 14815 8/50 current_auc = 0.7001951600312255
User 14815 AUC after training: 0.6999414519906323
User 14815 does not improve AUC. Reverting changes.
Training on augumented user 56278 9/50 current_auc = 0.7001951600312255
User 56278 AUC after training: 0.7001463700234192
User 56278 does not improve AUC. Reverting changes.
Training on augumented user 88405 10/50 current_auc = 0.7001951600312255
User 88405 AUC after training: 0.7002146760343482
User 88405 improves AUC. Keeping the model.
Training on augumented user 25843 11/50 current_auc = 0.7002146760343482
User 25843 AUC after training: 0.7004098360655738
User 25843 improves AUC. Keeping the model.
Training on augumented user 117654 12/50 current_auc = 0.7004098360655738
User 117654 AUC after training: 0.7004098360655738
User 117654 does not improve AUC. Reverting changes.
Training on augumented user 127340 13/50 current_auc = 0.7004098360655738
User 127340 AUC after training: 0.7003122560499611
User 127340 does not improve AUC. Reverting changes.
Training on augumented user 64375 14/50 current_auc = 0.7004098360655738
User 64375 AUC after training: 0.7005366900858705
User 64375 improves AUC. Keeping the model.
Training on augumented user 16820 15/50 current_auc = 0.7005366900858705
User 16820 AUC after training: 0.7004586260733802
User 16820 does not improve AUC. Reverting changes.
Training on augumented user 57783 16/50 current_auc = 0.7005366900858705
User 57783 AUC after training: 0.7005074160811866
User 57783 does not improve AUC. Reverting changes.
Training on augumented user 64841 17/50 current_auc = 0.7005366900858705
User 64841 AUC after training: 0.7004488680718188
User 64841 does not improve AUC. Reverting changes.
Training on augumented user 130737 18/50 current_auc = 0.7005366900858705
User 130737 AUC after training: 0.7004488680718188
User 130737 does not improve AUC. Reverting changes.
Training on augumented user 12634 19/50 current_auc = 0.7005366900858705
User 12634 AUC after training: 0.7002732240437157
User 12634 does not improve AUC. Reverting changes.
Training on augumented user 105079 20/50 current_auc = 0.7005366900858705
User 105079 AUC after training: 0.7003903200624513
User 105079 does not improve AUC. Reverting changes.
Training on augumented user 110751 21/50 current_auc = 0.7005366900858705
User 110751 AUC after training: 0.7003903200624512
User 110751 does not improve AUC. Reverting changes.
Training on augumented user 50372 22/50 current_auc = 0.7005366900858705
User 50372 AUC after training: 0.700556206088993
User 50372 improves AUC. Keeping the model.
Training on augumented user 96110 23/50 current_auc = 0.700556206088993
User 96110 AUC after training: 0.6999121779859485
User 96110 does not improve AUC. Reverting changes.
Training on augumented user 132619 24/50 current_auc = 0.700556206088993
User 132619 AUC after training: 0.7004976580796254
User 132619 does not improve AUC. Reverting changes.
Training on augumented user 18379 25/50 current_auc = 0.700556206088993
User 18379 AUC after training: 0.7003220140515223
User 18379 does not improve AUC. Reverting changes.
Training on augumented user 26653 26/50 current_auc = 0.700556206088993
User 26653 AUC after training: 0.7003805620608899
User 26653 does not improve AUC. Reverting changes.
Training on augumented user 18143 27/50 current_auc = 0.700556206088993
User 18143 AUC after training: 0.7001268540202966
User 18143 does not improve AUC. Reverting changes.
Training on augumented user 6834 28/50 current_auc = 0.700556206088993
User 6834 AUC after training: 0.7003317720530835
User 6834 does not improve AUC. Reverting changes.
Training on augumented user 133060 29/50 current_auc = 0.700556206088993
User 133060 AUC after training: 0.7002732240437158
User 133060 does not improve AUC. Reverting changes.
Training on augumented user 100640 30/50 current_auc = 0.700556206088993
User 100640 AUC after training: 0.6997170179547229
User 100640 does not improve AUC. Reverting changes.
Training on augumented user 86520 31/50 current_auc = 0.700556206088993
User 86520 AUC after training: 0.700136612021858
User 86520 does not improve AUC. Reverting changes.
Training on augumented user 111515 32/50 current_auc = 0.700556206088993
User 111515 AUC after training: 0.7003512880562061
User 111515 does not improve AUC. Reverting changes.
Training on augumented user 16924 33/50 current_auc = 0.700556206088993
User 16924 AUC after training: 0.6994730679156909
User 16924 does not improve AUC. Reverting changes.
Training on augumented user 33225 34/50 current_auc = 0.700556206088993
User 33225 AUC after training: 0.6997072599531615
User 33225 does not improve AUC. Reverting changes.
Training on augumented user 13234 35/50 current_auc = 0.700556206088993
User 13234 AUC after training: 0.7002829820452772
User 13234 does not improve AUC. Reverting changes.
Training on augumented user 26535 36/50 current_auc = 0.700556206088993
User 26535 AUC after training: 0.6992974238875878
User 26535 does not improve AUC. Reverting changes.
Training on augumented user 130223 37/50 current_auc = 0.700556206088993
User 130223 AUC after training: 0.7002537080405933
User 130223 does not improve AUC. Reverting changes.
Training on augumented user 28212 38/50 current_auc = 0.700556206088993
User 28212 AUC after training: 0.7001658860265418
User 28212 does not improve AUC. Reverting changes.
Training on augumented user 94883 39/50 current_auc = 0.700556206088993
User 94883 AUC after training: 0.7000975800156128
User 94883 does not improve AUC. Reverting changes.
Training on augumented user 109544 40/50 current_auc = 0.700556206088993
User 109544 AUC after training: 0.700341530054645
User 109544 does not improve AUC. Reverting changes.
Training on augumented user 33726 41/50 current_auc = 0.700556206088993
User 33726 AUC after training: 0.7003805620608899
User 33726 does not improve AUC. Reverting changes.
Training on augumented user 20887 42/50 current_auc = 0.700556206088993
User 20887 AUC after training: 0.7003220140515222
User 20887 does not improve AUC. Reverting changes.
Training on augumented user 6260 43/50 current_auc = 0.700556206088993
User 6260 AUC after training: 0.7002049180327868
User 6260 does not improve AUC. Reverting changes.
Training on augumented user 49645 44/50 current_auc = 0.700556206088993
User 49645 AUC after training: 0.7008684621389539
User 49645 improves AUC. Keeping the model.
Training on augumented user 1085 45/50 current_auc = 0.7008684621389539
User 1085 AUC after training: 0.699443793911007
User 1085 does not improve AUC. Reverting changes.
Training on augumented user 8741 46/50 current_auc = 0.7008684621389539
User 8741 AUC after training: 0.7001951600312255
User 8741 does not improve AUC. Reverting changes.
Training on augumented user 114782 47/50 current_auc = 0.7008684621389539
User 114782 AUC after training: 0.7006830601092897
User 114782 does not improve AUC. Reverting changes.
Training on augumented user 9693 48/50 current_auc = 0.7008684621389539
User 9693 AUC after training: 0.7007220921155348
User 9693 does not improve AUC. Reverting changes.
Training on augumented user 119072 49/50 current_auc = 0.7008684621389539
User 119072 AUC after training: 0.7007220921155348
User 119072 does not improve AUC. Reverting changes.
[2024-12-02 19:35:41.745498] start test user 87576 218/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:35:42.507758] start test user 87576 218/568 recall augumented users by random, augumented_users = [11388, 75869, 58412, 8779, 4925, 1932, 127690, 51224, 19007, 114417, 86023, 45564, 50691, 134030, 66051, 17664, 46298, 113903, 48602, 112691, 42824, 21946, 115941, 70, 94334, 127548, 97, 40205, 64649, 136230, 23025, 25399, 93738, 3748, 26341, 102658, 134140, 45717, 28425, 89629, 122491, 89741, 81068, 123, 101475, 77732, 52092, 28729, 42405, 59280]
[2024-12-02 19:35:42.522881] user = 87576 Cloud 218/568
[2024-12-02 19:35:42.533657] user = 87576 Local 218/568
[2024-12-02 19:35:42.613486] user = 87576 Local+ 218/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:35:44.732374] user = 87576 MPDA- 218/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7205387205387206
Training on augumented user 11388 0/50 current_auc = 0.7205387205387206
User 11388 AUC after training: 0.7222222222222223
User 11388 improves AUC. Keeping the model.
Training on augumented user 75869 1/50 current_auc = 0.7222222222222223
User 75869 AUC after training: 0.7205387205387206
User 75869 does not improve AUC. Reverting changes.
Training on augumented user 58412 2/50 current_auc = 0.7222222222222223
User 58412 AUC after training: 0.7222222222222223
User 58412 does not improve AUC. Reverting changes.
Training on augumented user 8779 3/50 current_auc = 0.7222222222222223
User 8779 AUC after training: 0.7222222222222223
User 8779 does not improve AUC. Reverting changes.
Training on augumented user 4925 4/50 current_auc = 0.7222222222222223
User 4925 AUC after training: 0.7222222222222223
User 4925 does not improve AUC. Reverting changes.
Training on augumented user 1932 5/50 current_auc = 0.7222222222222223
User 1932 AUC after training: 0.7205387205387206
User 1932 does not improve AUC. Reverting changes.
Training on augumented user 127690 6/50 current_auc = 0.7222222222222223
User 127690 AUC after training: 0.7222222222222223
User 127690 does not improve AUC. Reverting changes.
Training on augumented user 51224 7/50 current_auc = 0.7222222222222223
User 51224 AUC after training: 0.7222222222222223
User 51224 does not improve AUC. Reverting changes.
Training on augumented user 19007 8/50 current_auc = 0.7222222222222223
User 19007 AUC after training: 0.7222222222222223
User 19007 does not improve AUC. Reverting changes.
Training on augumented user 114417 9/50 current_auc = 0.7222222222222223
User 114417 AUC after training: 0.7205387205387206
User 114417 does not improve AUC. Reverting changes.
Training on augumented user 86023 10/50 current_auc = 0.7222222222222223
User 86023 AUC after training: 0.7222222222222223
User 86023 does not improve AUC. Reverting changes.
Training on augumented user 45564 11/50 current_auc = 0.7222222222222223
User 45564 AUC after training: 0.7222222222222223
User 45564 does not improve AUC. Reverting changes.
Training on augumented user 50691 12/50 current_auc = 0.7222222222222223
User 50691 AUC after training: 0.7222222222222223
User 50691 does not improve AUC. Reverting changes.
Training on augumented user 134030 13/50 current_auc = 0.7222222222222223
User 134030 AUC after training: 0.7239057239057239
User 134030 improves AUC. Keeping the model.
Training on augumented user 66051 14/50 current_auc = 0.7239057239057239
User 66051 AUC after training: 0.7222222222222222
User 66051 does not improve AUC. Reverting changes.
Training on augumented user 17664 15/50 current_auc = 0.7239057239057239
User 17664 AUC after training: 0.7222222222222223
User 17664 does not improve AUC. Reverting changes.
Training on augumented user 46298 16/50 current_auc = 0.7239057239057239
User 46298 AUC after training: 0.7239057239057239
User 46298 does not improve AUC. Reverting changes.
Training on augumented user 113903 17/50 current_auc = 0.7239057239057239
User 113903 AUC after training: 0.7239057239057239
User 113903 does not improve AUC. Reverting changes.
Training on augumented user 48602 18/50 current_auc = 0.7239057239057239
User 48602 AUC after training: 0.7239057239057239
User 48602 does not improve AUC. Reverting changes.
Training on augumented user 112691 19/50 current_auc = 0.7239057239057239
User 112691 AUC after training: 0.7239057239057239
User 112691 does not improve AUC. Reverting changes.
Training on augumented user 42824 20/50 current_auc = 0.7239057239057239
User 42824 AUC after training: 0.7239057239057239
User 42824 does not improve AUC. Reverting changes.
Training on augumented user 21946 21/50 current_auc = 0.7239057239057239
User 21946 AUC after training: 0.7222222222222222
User 21946 does not improve AUC. Reverting changes.
Training on augumented user 115941 22/50 current_auc = 0.7239057239057239
User 115941 AUC after training: 0.7222222222222222
User 115941 does not improve AUC. Reverting changes.
Training on augumented user 70 23/50 current_auc = 0.7239057239057239
User 70 AUC after training: 0.7222222222222222
User 70 does not improve AUC. Reverting changes.
Training on augumented user 94334 24/50 current_auc = 0.7239057239057239
User 94334 AUC after training: 0.7239057239057239
User 94334 does not improve AUC. Reverting changes.
Training on augumented user 127548 25/50 current_auc = 0.7239057239057239
User 127548 AUC after training: 0.7272727272727273
User 127548 improves AUC. Keeping the model.
Training on augumented user 97 26/50 current_auc = 0.7272727272727273
User 97 AUC after training: 0.7272727272727273
User 97 does not improve AUC. Reverting changes.
Training on augumented user 40205 27/50 current_auc = 0.7272727272727273
User 40205 AUC after training: 0.7272727272727273
User 40205 does not improve AUC. Reverting changes.
Training on augumented user 64649 28/50 current_auc = 0.7272727272727273
User 64649 AUC after training: 0.7272727272727273
User 64649 does not improve AUC. Reverting changes.
Training on augumented user 136230 29/50 current_auc = 0.7272727272727273
User 136230 AUC after training: 0.7272727272727273
User 136230 does not improve AUC. Reverting changes.
Training on augumented user 23025 30/50 current_auc = 0.7272727272727273
User 23025 AUC after training: 0.7272727272727273
User 23025 does not improve AUC. Reverting changes.
Training on augumented user 25399 31/50 current_auc = 0.7272727272727273
User 25399 AUC after training: 0.7306397306397308
User 25399 improves AUC. Keeping the model.
Training on augumented user 93738 32/50 current_auc = 0.7306397306397308
User 93738 AUC after training: 0.7272727272727273
User 93738 does not improve AUC. Reverting changes.
Training on augumented user 3748 33/50 current_auc = 0.7306397306397308
User 3748 AUC after training: 0.7272727272727273
User 3748 does not improve AUC. Reverting changes.
Training on augumented user 26341 34/50 current_auc = 0.7306397306397308
User 26341 AUC after training: 0.7306397306397308
User 26341 does not improve AUC. Reverting changes.
Training on augumented user 102658 35/50 current_auc = 0.7306397306397308
User 102658 AUC after training: 0.728956228956229
User 102658 does not improve AUC. Reverting changes.
Training on augumented user 134140 36/50 current_auc = 0.7306397306397308
User 134140 AUC after training: 0.7306397306397308
User 134140 does not improve AUC. Reverting changes.
Training on augumented user 45717 37/50 current_auc = 0.7306397306397308
User 45717 AUC after training: 0.728956228956229
User 45717 does not improve AUC. Reverting changes.
Training on augumented user 28425 38/50 current_auc = 0.7306397306397308
User 28425 AUC after training: 0.728956228956229
User 28425 does not improve AUC. Reverting changes.
Training on augumented user 89629 39/50 current_auc = 0.7306397306397308
User 89629 AUC after training: 0.7306397306397308
User 89629 does not improve AUC. Reverting changes.
Training on augumented user 122491 40/50 current_auc = 0.7306397306397308
User 122491 AUC after training: 0.728956228956229
User 122491 does not improve AUC. Reverting changes.
Training on augumented user 89741 41/50 current_auc = 0.7306397306397308
User 89741 AUC after training: 0.7255892255892256
User 89741 does not improve AUC. Reverting changes.
Training on augumented user 81068 42/50 current_auc = 0.7306397306397308
User 81068 AUC after training: 0.7306397306397308
User 81068 does not improve AUC. Reverting changes.
Training on augumented user 123 43/50 current_auc = 0.7306397306397308
User 123 AUC after training: 0.728956228956229
User 123 does not improve AUC. Reverting changes.
Training on augumented user 101475 44/50 current_auc = 0.7306397306397308
User 101475 AUC after training: 0.728956228956229
User 101475 does not improve AUC. Reverting changes.
Training on augumented user 77732 45/50 current_auc = 0.7306397306397308
User 77732 AUC after training: 0.728956228956229
User 77732 does not improve AUC. Reverting changes.
Training on augumented user 52092 46/50 current_auc = 0.7306397306397308
User 52092 AUC after training: 0.728956228956229
User 52092 does not improve AUC. Reverting changes.
Training on augumented user 28729 47/50 current_auc = 0.7306397306397308
User 28729 AUC after training: 0.728956228956229
User 28729 does not improve AUC. Reverting changes.
Training on augumented user 42405 48/50 current_auc = 0.7306397306397308
User 42405 AUC after training: 0.7255892255892256
User 42405 does not improve AUC. Reverting changes.
Training on augumented user 59280 49/50 current_auc = 0.7306397306397308
User 59280 AUC after training: 0.728956228956229
User 59280 does not improve AUC. Reverting changes.
[2024-12-02 19:36:09.888458] start test user 87577 219/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:36:10.509878] start test user 87577 219/568 recall augumented users by random, augumented_users = [108289, 83652, 66274, 7547, 91718, 101962, 104159, 125185, 99286, 11793, 120855, 98379, 59841, 116974, 20089, 60886, 47715, 76753, 124039, 93908, 14476, 13874, 79066, 16664, 7384, 111086, 49132, 131903, 59636, 129811, 54793, 95364, 10827, 14754, 73803, 45354, 101889, 123924, 71727, 89389, 73949, 28596, 85540, 27901, 103317, 59765, 117043, 93415, 92113, 34449]
[2024-12-02 19:36:10.525003] user = 87577 Cloud 219/568
[2024-12-02 19:36:10.545837] user = 87577 Local 219/568
[2024-12-02 19:36:10.654512] user = 87577 Local+ 219/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:36:12.641726] user = 87577 MPDA- 219/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 108289 0/50 current_auc = 0.5
User 108289 AUC after training: 0.5
User 108289 does not improve AUC. Reverting changes.
Training on augumented user 83652 1/50 current_auc = 0.5
User 83652 AUC after training: 0.5
User 83652 does not improve AUC. Reverting changes.
Training on augumented user 66274 2/50 current_auc = 0.5
User 66274 AUC after training: 0.5
User 66274 does not improve AUC. Reverting changes.
Training on augumented user 7547 3/50 current_auc = 0.5
User 7547 AUC after training: 0.5
User 7547 does not improve AUC. Reverting changes.
Training on augumented user 91718 4/50 current_auc = 0.5
User 91718 AUC after training: 0.5
User 91718 does not improve AUC. Reverting changes.
Training on augumented user 101962 5/50 current_auc = 0.5
User 101962 AUC after training: 0.5
User 101962 does not improve AUC. Reverting changes.
Training on augumented user 104159 6/50 current_auc = 0.5
User 104159 AUC after training: 0.5
User 104159 does not improve AUC. Reverting changes.
Training on augumented user 125185 7/50 current_auc = 0.5
User 125185 AUC after training: 0.5
User 125185 does not improve AUC. Reverting changes.
Training on augumented user 99286 8/50 current_auc = 0.5
User 99286 AUC after training: 0.5
User 99286 does not improve AUC. Reverting changes.
Training on augumented user 11793 9/50 current_auc = 0.5
User 11793 AUC after training: 0.5
User 11793 does not improve AUC. Reverting changes.
Training on augumented user 120855 10/50 current_auc = 0.5
User 120855 AUC after training: 0.5
User 120855 does not improve AUC. Reverting changes.
Training on augumented user 98379 11/50 current_auc = 0.5
User 98379 AUC after training: 0.5
User 98379 does not improve AUC. Reverting changes.
Training on augumented user 59841 12/50 current_auc = 0.5
User 59841 AUC after training: 0.5
User 59841 does not improve AUC. Reverting changes.
Training on augumented user 116974 13/50 current_auc = 0.5
User 116974 AUC after training: 0.5
User 116974 does not improve AUC. Reverting changes.
Training on augumented user 20089 14/50 current_auc = 0.5
User 20089 AUC after training: 0.5
User 20089 does not improve AUC. Reverting changes.
Training on augumented user 60886 15/50 current_auc = 0.5
User 60886 AUC after training: 0.5
User 60886 does not improve AUC. Reverting changes.
Training on augumented user 47715 16/50 current_auc = 0.5
User 47715 AUC after training: 0.5
User 47715 does not improve AUC. Reverting changes.
Training on augumented user 76753 17/50 current_auc = 0.5
User 76753 AUC after training: 0.5
User 76753 does not improve AUC. Reverting changes.
Training on augumented user 124039 18/50 current_auc = 0.5
User 124039 AUC after training: 0.5
User 124039 does not improve AUC. Reverting changes.
Training on augumented user 93908 19/50 current_auc = 0.5
User 93908 AUC after training: 0.5
User 93908 does not improve AUC. Reverting changes.
Training on augumented user 14476 20/50 current_auc = 0.5
User 14476 AUC after training: 0.5
User 14476 does not improve AUC. Reverting changes.
Training on augumented user 13874 21/50 current_auc = 0.5
User 13874 AUC after training: 0.5
User 13874 does not improve AUC. Reverting changes.
Training on augumented user 79066 22/50 current_auc = 0.5
User 79066 AUC after training: 0.5
User 79066 does not improve AUC. Reverting changes.
Training on augumented user 16664 23/50 current_auc = 0.5
User 16664 AUC after training: 0.5
User 16664 does not improve AUC. Reverting changes.
Training on augumented user 7384 24/50 current_auc = 0.5
User 7384 AUC after training: 0.5
User 7384 does not improve AUC. Reverting changes.
Training on augumented user 111086 25/50 current_auc = 0.5
User 111086 AUC after training: 0.5
User 111086 does not improve AUC. Reverting changes.
Training on augumented user 49132 26/50 current_auc = 0.5
User 49132 AUC after training: 0.5
User 49132 does not improve AUC. Reverting changes.
Training on augumented user 131903 27/50 current_auc = 0.5
User 131903 AUC after training: 0.5
User 131903 does not improve AUC. Reverting changes.
Training on augumented user 59636 28/50 current_auc = 0.5
User 59636 AUC after training: 0.5
User 59636 does not improve AUC. Reverting changes.
Training on augumented user 129811 29/50 current_auc = 0.5
User 129811 AUC after training: 0.5
User 129811 does not improve AUC. Reverting changes.
Training on augumented user 54793 30/50 current_auc = 0.5
User 54793 AUC after training: 0.5
User 54793 does not improve AUC. Reverting changes.
Training on augumented user 95364 31/50 current_auc = 0.5
User 95364 AUC after training: 0.5
User 95364 does not improve AUC. Reverting changes.
Training on augumented user 10827 32/50 current_auc = 0.5
User 10827 AUC after training: 0.5
User 10827 does not improve AUC. Reverting changes.
Training on augumented user 14754 33/50 current_auc = 0.5
User 14754 AUC after training: 0.5
User 14754 does not improve AUC. Reverting changes.
Training on augumented user 73803 34/50 current_auc = 0.5
User 73803 AUC after training: 0.5
User 73803 does not improve AUC. Reverting changes.
Training on augumented user 45354 35/50 current_auc = 0.5
User 45354 AUC after training: 0.5
User 45354 does not improve AUC. Reverting changes.
Training on augumented user 101889 36/50 current_auc = 0.5
User 101889 AUC after training: 0.5
User 101889 does not improve AUC. Reverting changes.
Training on augumented user 123924 37/50 current_auc = 0.5
User 123924 AUC after training: 0.5
User 123924 does not improve AUC. Reverting changes.
Training on augumented user 71727 38/50 current_auc = 0.5
User 71727 AUC after training: 0.5
User 71727 does not improve AUC. Reverting changes.
Training on augumented user 89389 39/50 current_auc = 0.5
User 89389 AUC after training: 0.5
User 89389 does not improve AUC. Reverting changes.
Training on augumented user 73949 40/50 current_auc = 0.5
User 73949 AUC after training: 0.5
User 73949 does not improve AUC. Reverting changes.
Training on augumented user 28596 41/50 current_auc = 0.5
User 28596 AUC after training: 0.5
User 28596 does not improve AUC. Reverting changes.
Training on augumented user 85540 42/50 current_auc = 0.5
User 85540 AUC after training: 0.5
User 85540 does not improve AUC. Reverting changes.
Training on augumented user 27901 43/50 current_auc = 0.5
User 27901 AUC after training: 0.5
User 27901 does not improve AUC. Reverting changes.
Training on augumented user 103317 44/50 current_auc = 0.5
User 103317 AUC after training: 0.5
User 103317 does not improve AUC. Reverting changes.
Training on augumented user 59765 45/50 current_auc = 0.5
User 59765 AUC after training: 0.5
User 59765 does not improve AUC. Reverting changes.
Training on augumented user 117043 46/50 current_auc = 0.5
User 117043 AUC after training: 0.5
User 117043 does not improve AUC. Reverting changes.
Training on augumented user 93415 47/50 current_auc = 0.5
User 93415 AUC after training: 0.5
User 93415 does not improve AUC. Reverting changes.
Training on augumented user 92113 48/50 current_auc = 0.5
User 92113 AUC after training: 0.5
User 92113 does not improve AUC. Reverting changes.
Training on augumented user 34449 49/50 current_auc = 0.5
User 34449 AUC after training: 0.5
User 34449 does not improve AUC. Reverting changes.
[2024-12-02 19:36:42.542904] start test user 87586 220/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:36:42.955851] start test user 87586 220/568 recall augumented users by random, augumented_users = [65240, 55359, 75155, 120862, 107789, 22700, 85173, 112625, 102595, 5976, 79173, 79146, 111656, 58863, 93584, 49224, 36496, 6872, 103150, 117680, 17055, 20939, 64318, 66603, 65436, 26981, 109503, 23943, 42144, 67107, 12111, 125903, 51993, 73543, 75560, 91889, 109055, 85086, 64979, 35510, 3850, 22390, 52587, 110211, 56533, 44873, 108565, 55881, 17040, 119125]
[2024-12-02 19:36:42.971475] user = 87586 Cloud 220/568
[2024-12-02 19:36:42.987119] user = 87586 Local 220/568
[2024-12-02 19:36:43.109166] user = 87586 Local+ 220/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:36:45.871161] user = 87586 MPDA- 220/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5888888888888889
Training on augumented user 65240 0/50 current_auc = 0.5888888888888889
User 65240 AUC after training: 0.5900000000000001
User 65240 improves AUC. Keeping the model.
Training on augumented user 55359 1/50 current_auc = 0.5900000000000001
User 55359 AUC after training: 0.5894444444444445
User 55359 does not improve AUC. Reverting changes.
Training on augumented user 75155 2/50 current_auc = 0.5900000000000001
User 75155 AUC after training: 0.5900000000000001
User 75155 does not improve AUC. Reverting changes.
Training on augumented user 120862 3/50 current_auc = 0.5900000000000001
User 120862 AUC after training: 0.5911111111111111
User 120862 improves AUC. Keeping the model.
Training on augumented user 107789 4/50 current_auc = 0.5911111111111111
User 107789 AUC after training: 0.5905555555555556
User 107789 does not improve AUC. Reverting changes.
Training on augumented user 22700 5/50 current_auc = 0.5911111111111111
User 22700 AUC after training: 0.5911111111111111
User 22700 does not improve AUC. Reverting changes.
Training on augumented user 85173 6/50 current_auc = 0.5911111111111111
User 85173 AUC after training: 0.5905555555555556
User 85173 does not improve AUC. Reverting changes.
Training on augumented user 112625 7/50 current_auc = 0.5911111111111111
User 112625 AUC after training: 0.5911111111111111
User 112625 does not improve AUC. Reverting changes.
Training on augumented user 102595 8/50 current_auc = 0.5911111111111111
User 102595 AUC after training: 0.5877777777777777
User 102595 does not improve AUC. Reverting changes.
Training on augumented user 5976 9/50 current_auc = 0.5911111111111111
User 5976 AUC after training: 0.5905555555555556
User 5976 does not improve AUC. Reverting changes.
Training on augumented user 79173 10/50 current_auc = 0.5911111111111111
User 79173 AUC after training: 0.5883333333333334
User 79173 does not improve AUC. Reverting changes.
Training on augumented user 79146 11/50 current_auc = 0.5911111111111111
User 79146 AUC after training: 0.5888888888888889
User 79146 does not improve AUC. Reverting changes.
Training on augumented user 111656 12/50 current_auc = 0.5911111111111111
User 111656 AUC after training: 0.59
User 111656 does not improve AUC. Reverting changes.
Training on augumented user 58863 13/50 current_auc = 0.5911111111111111
User 58863 AUC after training: 0.5905555555555555
User 58863 does not improve AUC. Reverting changes.
Training on augumented user 93584 14/50 current_auc = 0.5911111111111111
User 93584 AUC after training: 0.591111111111111
User 93584 does not improve AUC. Reverting changes.
Training on augumented user 49224 15/50 current_auc = 0.5911111111111111
User 49224 AUC after training: 0.5888888888888889
User 49224 does not improve AUC. Reverting changes.
Training on augumented user 36496 16/50 current_auc = 0.5911111111111111
User 36496 AUC after training: 0.5894444444444445
User 36496 does not improve AUC. Reverting changes.
Training on augumented user 6872 17/50 current_auc = 0.5911111111111111
User 6872 AUC after training: 0.5900000000000001
User 6872 does not improve AUC. Reverting changes.
Training on augumented user 103150 18/50 current_auc = 0.5911111111111111
User 103150 AUC after training: 0.59
User 103150 does not improve AUC. Reverting changes.
Training on augumented user 117680 19/50 current_auc = 0.5911111111111111
User 117680 AUC after training: 0.5916666666666668
User 117680 improves AUC. Keeping the model.
Training on augumented user 17055 20/50 current_auc = 0.5916666666666668
User 17055 AUC after training: 0.5916666666666667
User 17055 does not improve AUC. Reverting changes.
Training on augumented user 20939 21/50 current_auc = 0.5916666666666668
User 20939 AUC after training: 0.5911111111111111
User 20939 does not improve AUC. Reverting changes.
Training on augumented user 64318 22/50 current_auc = 0.5916666666666668
User 64318 AUC after training: 0.5927777777777778
User 64318 improves AUC. Keeping the model.
Training on augumented user 66603 23/50 current_auc = 0.5927777777777778
User 66603 AUC after training: 0.5927777777777778
User 66603 does not improve AUC. Reverting changes.
Training on augumented user 65436 24/50 current_auc = 0.5927777777777778
User 65436 AUC after training: 0.5922222222222223
User 65436 does not improve AUC. Reverting changes.
Training on augumented user 26981 25/50 current_auc = 0.5927777777777778
User 26981 AUC after training: 0.5911111111111111
User 26981 does not improve AUC. Reverting changes.
Training on augumented user 109503 26/50 current_auc = 0.5927777777777778
User 109503 AUC after training: 0.5902777777777778
User 109503 does not improve AUC. Reverting changes.
Training on augumented user 23943 27/50 current_auc = 0.5927777777777778
User 23943 AUC after training: 0.5911111111111111
User 23943 does not improve AUC. Reverting changes.
Training on augumented user 42144 28/50 current_auc = 0.5927777777777778
User 42144 AUC after training: 0.5938888888888889
User 42144 improves AUC. Keeping the model.
Training on augumented user 67107 29/50 current_auc = 0.5938888888888889
User 67107 AUC after training: 0.5927777777777778
User 67107 does not improve AUC. Reverting changes.
Training on augumented user 12111 30/50 current_auc = 0.5938888888888889
User 12111 AUC after training: 0.5916666666666667
User 12111 does not improve AUC. Reverting changes.
Training on augumented user 125903 31/50 current_auc = 0.5938888888888889
User 125903 AUC after training: 0.5922222222222223
User 125903 does not improve AUC. Reverting changes.
Training on augumented user 51993 32/50 current_auc = 0.5938888888888889
User 51993 AUC after training: 0.5938888888888888
User 51993 does not improve AUC. Reverting changes.
Training on augumented user 73543 33/50 current_auc = 0.5938888888888889
User 73543 AUC after training: 0.5938888888888889
User 73543 does not improve AUC. Reverting changes.
Training on augumented user 75560 34/50 current_auc = 0.5938888888888889
User 75560 AUC after training: 0.5905555555555556
User 75560 does not improve AUC. Reverting changes.
Training on augumented user 91889 35/50 current_auc = 0.5938888888888889
User 91889 AUC after training: 0.5922222222222223
User 91889 does not improve AUC. Reverting changes.
Training on augumented user 109055 36/50 current_auc = 0.5938888888888889
User 109055 AUC after training: 0.5933333333333334
User 109055 does not improve AUC. Reverting changes.
Training on augumented user 85086 37/50 current_auc = 0.5938888888888889
User 85086 AUC after training: 0.5911111111111111
User 85086 does not improve AUC. Reverting changes.
Training on augumented user 64979 38/50 current_auc = 0.5938888888888889
User 64979 AUC after training: 0.5944444444444444
User 64979 improves AUC. Keeping the model.
Training on augumented user 35510 39/50 current_auc = 0.5944444444444444
User 35510 AUC after training: 0.5905555555555556
User 35510 does not improve AUC. Reverting changes.
Training on augumented user 3850 40/50 current_auc = 0.5944444444444444
User 3850 AUC after training: 0.5950000000000001
User 3850 improves AUC. Keeping the model.
Training on augumented user 22390 41/50 current_auc = 0.5950000000000001
User 22390 AUC after training: 0.5944444444444444
User 22390 does not improve AUC. Reverting changes.
Training on augumented user 52587 42/50 current_auc = 0.5950000000000001
User 52587 AUC after training: 0.5938888888888889
User 52587 does not improve AUC. Reverting changes.
Training on augumented user 110211 43/50 current_auc = 0.5950000000000001
User 110211 AUC after training: 0.5944444444444444
User 110211 does not improve AUC. Reverting changes.
Training on augumented user 56533 44/50 current_auc = 0.5950000000000001
User 56533 AUC after training: 0.5938888888888889
User 56533 does not improve AUC. Reverting changes.
Training on augumented user 44873 45/50 current_auc = 0.5950000000000001
User 44873 AUC after training: 0.5938888888888889
User 44873 does not improve AUC. Reverting changes.
Training on augumented user 108565 46/50 current_auc = 0.5950000000000001
User 108565 AUC after training: 0.5944444444444444
User 108565 does not improve AUC. Reverting changes.
Training on augumented user 55881 47/50 current_auc = 0.5950000000000001
User 55881 AUC after training: 0.595
User 55881 does not improve AUC. Reverting changes.
Training on augumented user 17040 48/50 current_auc = 0.5950000000000001
User 17040 AUC after training: 0.5944444444444444
User 17040 does not improve AUC. Reverting changes.
Training on augumented user 119125 49/50 current_auc = 0.5950000000000001
User 119125 AUC after training: 0.5933333333333335
User 119125 does not improve AUC. Reverting changes.
[2024-12-02 19:37:14.905946] start test user 87694 221/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:37:15.358003] start test user 87694 221/568 recall augumented users by random, augumented_users = [71768, 3261, 49395, 3836, 41067, 39274, 4456, 122701, 2990, 63705, 115358, 87594, 127954, 31535, 111676, 19175, 98732, 131627, 106134, 116667, 66223, 97297, 123741, 33150, 123347, 9579, 109617, 109007, 66596, 69487, 104266, 46535, 99460, 72097, 111894, 115983, 116467, 34877, 34300, 14900, 127491, 30188, 5890, 95035, 18891, 89382, 115769, 124566, 78278, 89039]
[2024-12-02 19:37:15.373586] user = 87694 Cloud 221/568
[2024-12-02 19:37:15.393912] user = 87694 Local 221/568
[2024-12-02 19:37:15.470665] user = 87694 Local+ 221/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:37:17.742165] user = 87694 MPDA- 221/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5850694444444445
Training on augumented user 71768 0/50 current_auc = 0.5850694444444445
User 71768 AUC after training: 0.5810185185185186
User 71768 does not improve AUC. Reverting changes.
Training on augumented user 3261 1/50 current_auc = 0.5850694444444445
User 3261 AUC after training: 0.5858796296296297
User 3261 improves AUC. Keeping the model.
Training on augumented user 49395 2/50 current_auc = 0.5858796296296297
User 49395 AUC after training: 0.5840277777777778
User 49395 does not improve AUC. Reverting changes.
Training on augumented user 3836 3/50 current_auc = 0.5858796296296297
User 3836 AUC after training: 0.5855324074074073
User 3836 does not improve AUC. Reverting changes.
Training on augumented user 41067 4/50 current_auc = 0.5858796296296297
User 41067 AUC after training: 0.5846064814814815
User 41067 does not improve AUC. Reverting changes.
Training on augumented user 39274 5/50 current_auc = 0.5858796296296297
User 39274 AUC after training: 0.5855324074074074
User 39274 does not improve AUC. Reverting changes.
Training on augumented user 4456 6/50 current_auc = 0.5858796296296297
User 4456 AUC after training: 0.584837962962963
User 4456 does not improve AUC. Reverting changes.
Training on augumented user 122701 7/50 current_auc = 0.5858796296296297
User 122701 AUC after training: 0.5863425925925926
User 122701 improves AUC. Keeping the model.
Training on augumented user 2990 8/50 current_auc = 0.5863425925925926
User 2990 AUC after training: 0.586574074074074
User 2990 improves AUC. Keeping the model.
Training on augumented user 63705 9/50 current_auc = 0.586574074074074
User 63705 AUC after training: 0.580787037037037
User 63705 does not improve AUC. Reverting changes.
Training on augumented user 115358 10/50 current_auc = 0.586574074074074
User 115358 AUC after training: 0.5832175925925926
User 115358 does not improve AUC. Reverting changes.
Training on augumented user 87594 11/50 current_auc = 0.586574074074074
User 87594 AUC after training: 0.5861111111111111
User 87594 does not improve AUC. Reverting changes.
Training on augumented user 127954 12/50 current_auc = 0.586574074074074
User 127954 AUC after training: 0.5855324074074073
User 127954 does not improve AUC. Reverting changes.
Training on augumented user 31535 13/50 current_auc = 0.586574074074074
User 31535 AUC after training: 0.5835648148148147
User 31535 does not improve AUC. Reverting changes.
Training on augumented user 111676 14/50 current_auc = 0.586574074074074
User 111676 AUC after training: 0.5869212962962963
User 111676 improves AUC. Keeping the model.
Training on augumented user 19175 15/50 current_auc = 0.5869212962962963
User 19175 AUC after training: 0.5872685185185186
User 19175 improves AUC. Keeping the model.
Training on augumented user 98732 16/50 current_auc = 0.5872685185185186
User 98732 AUC after training: 0.5854166666666668
User 98732 does not improve AUC. Reverting changes.
Training on augumented user 131627 17/50 current_auc = 0.5872685185185186
User 131627 AUC after training: 0.5861111111111111
User 131627 does not improve AUC. Reverting changes.
Training on augumented user 106134 18/50 current_auc = 0.5872685185185186
User 106134 AUC after training: 0.5877314814814815
User 106134 improves AUC. Keeping the model.
Training on augumented user 116667 19/50 current_auc = 0.5877314814814815
User 116667 AUC after training: 0.5863425925925926
User 116667 does not improve AUC. Reverting changes.
Training on augumented user 66223 20/50 current_auc = 0.5877314814814815
User 66223 AUC after training: 0.5869212962962963
User 66223 does not improve AUC. Reverting changes.
Training on augumented user 97297 21/50 current_auc = 0.5877314814814815
User 97297 AUC after training: 0.5869212962962963
User 97297 does not improve AUC. Reverting changes.
Training on augumented user 123741 22/50 current_auc = 0.5877314814814815
User 123741 AUC after training: 0.5880787037037037
User 123741 improves AUC. Keeping the model.
Training on augumented user 33150 23/50 current_auc = 0.5880787037037037
User 33150 AUC after training: 0.5887731481481482
User 33150 improves AUC. Keeping the model.
Training on augumented user 123347 24/50 current_auc = 0.5887731481481482
User 123347 AUC after training: 0.5881944444444445
User 123347 does not improve AUC. Reverting changes.
Training on augumented user 9579 25/50 current_auc = 0.5887731481481482
User 9579 AUC after training: 0.5851851851851853
User 9579 does not improve AUC. Reverting changes.
Training on augumented user 109617 26/50 current_auc = 0.5887731481481482
User 109617 AUC after training: 0.5873842592592593
User 109617 does not improve AUC. Reverting changes.
Training on augumented user 109007 27/50 current_auc = 0.5887731481481482
User 109007 AUC after training: 0.5877314814814815
User 109007 does not improve AUC. Reverting changes.
Training on augumented user 66596 28/50 current_auc = 0.5887731481481482
User 66596 AUC after training: 0.5892361111111111
User 66596 improves AUC. Keeping the model.
Training on augumented user 69487 29/50 current_auc = 0.5892361111111111
User 69487 AUC after training: 0.5878472222222222
User 69487 does not improve AUC. Reverting changes.
Training on augumented user 104266 30/50 current_auc = 0.5892361111111111
User 104266 AUC after training: 0.5886574074074075
User 104266 does not improve AUC. Reverting changes.
Training on augumented user 46535 31/50 current_auc = 0.5892361111111111
User 46535 AUC after training: 0.5880787037037036
User 46535 does not improve AUC. Reverting changes.
Training on augumented user 99460 32/50 current_auc = 0.5892361111111111
User 99460 AUC after training: 0.5872685185185185
User 99460 does not improve AUC. Reverting changes.
Training on augumented user 72097 33/50 current_auc = 0.5892361111111111
User 72097 AUC after training: 0.5876157407407407
User 72097 does not improve AUC. Reverting changes.
Training on augumented user 111894 34/50 current_auc = 0.5892361111111111
User 111894 AUC after training: 0.5903935185185185
User 111894 improves AUC. Keeping the model.
Training on augumented user 115983 35/50 current_auc = 0.5903935185185185
User 115983 AUC after training: 0.5907407407407407
User 115983 improves AUC. Keeping the model.
Training on augumented user 116467 36/50 current_auc = 0.5907407407407407
User 116467 AUC after training: 0.5888888888888889
User 116467 does not improve AUC. Reverting changes.
Training on augumented user 34877 37/50 current_auc = 0.5907407407407407
User 34877 AUC after training: 0.5893518518518519
User 34877 does not improve AUC. Reverting changes.
Training on augumented user 34300 38/50 current_auc = 0.5907407407407407
User 34300 AUC after training: 0.5902777777777778
User 34300 does not improve AUC. Reverting changes.
Training on augumented user 14900 39/50 current_auc = 0.5907407407407407
User 14900 AUC after training: 0.5864583333333333
User 14900 does not improve AUC. Reverting changes.
Training on augumented user 127491 40/50 current_auc = 0.5907407407407407
User 127491 AUC after training: 0.5903935185185185
User 127491 does not improve AUC. Reverting changes.
Training on augumented user 30188 41/50 current_auc = 0.5907407407407407
User 30188 AUC after training: 0.590625
User 30188 does not improve AUC. Reverting changes.
Training on augumented user 5890 42/50 current_auc = 0.5907407407407407
User 5890 AUC after training: 0.5901620370370371
User 5890 does not improve AUC. Reverting changes.
Training on augumented user 95035 43/50 current_auc = 0.5907407407407407
User 95035 AUC after training: 0.5914351851851851
User 95035 improves AUC. Keeping the model.
Training on augumented user 18891 44/50 current_auc = 0.5914351851851851
User 18891 AUC after training: 0.591550925925926
User 18891 improves AUC. Keeping the model.
Training on augumented user 89382 45/50 current_auc = 0.591550925925926
User 89382 AUC after training: 0.5918981481481481
User 89382 improves AUC. Keeping the model.
Training on augumented user 115769 46/50 current_auc = 0.5918981481481481
User 115769 AUC after training: 0.5903935185185185
User 115769 does not improve AUC. Reverting changes.
Training on augumented user 124566 47/50 current_auc = 0.5918981481481481
User 124566 AUC after training: 0.5912037037037037
User 124566 does not improve AUC. Reverting changes.
Training on augumented user 78278 48/50 current_auc = 0.5918981481481481
User 78278 AUC after training: 0.5918981481481481
User 78278 does not improve AUC. Reverting changes.
Training on augumented user 89039 49/50 current_auc = 0.5918981481481481
User 89039 AUC after training: 0.591087962962963
User 89039 does not improve AUC. Reverting changes.
[2024-12-02 19:37:43.847133] start test user 87703 222/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:37:44.355406] start test user 87703 222/568 recall augumented users by random, augumented_users = [132243, 68982, 7052, 41091, 1146, 76604, 107638, 128097, 32190, 59094, 15594, 81408, 29105, 17578, 118737, 64419, 73818, 16728, 26429, 57805, 129503, 72507, 122781, 50342, 126977, 44454, 46472, 84272, 36828, 36211, 28776, 5699, 105011, 101021, 97476, 75490, 60789, 109057, 44038, 75267, 74931, 65290, 26360, 123916, 101887, 97801, 113253, 75869, 73671, 19496]
[2024-12-02 19:37:44.377633] user = 87703 Cloud 222/568
[2024-12-02 19:37:44.443388] user = 87703 Local 222/568
[2024-12-02 19:37:44.505678] user = 87703 Local+ 222/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:37:47.173462] user = 87703 MPDA- 222/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6120063480437038
Training on augumented user 132243 0/50 current_auc = 0.6120063480437038
User 132243 AUC after training: 0.6122199841298908
User 132243 improves AUC. Keeping the model.
Training on augumented user 68982 1/50 current_auc = 0.6122199841298908
User 68982 AUC after training: 0.6121589452481231
User 68982 does not improve AUC. Reverting changes.
Training on augumented user 7052 2/50 current_auc = 0.6122199841298908
User 7052 AUC after training: 0.6121894646890069
User 7052 does not improve AUC. Reverting changes.
Training on augumented user 41091 3/50 current_auc = 0.6122199841298908
User 41091 AUC after training: 0.6117469327961912
User 41091 does not improve AUC. Reverting changes.
Training on augumented user 1146 4/50 current_auc = 0.6122199841298908
User 1146 AUC after training: 0.6122199841298908
User 1146 does not improve AUC. Reverting changes.
Training on augumented user 76604 5/50 current_auc = 0.6122199841298908
User 76604 AUC after training: 0.6120826466459134
User 76604 does not improve AUC. Reverting changes.
Training on augumented user 107638 6/50 current_auc = 0.6122199841298908
User 107638 AUC after training: 0.6119605688823782
User 107638 does not improve AUC. Reverting changes.
Training on augumented user 128097 7/50 current_auc = 0.6122199841298908
User 128097 AUC after training: 0.6123115424525423
User 128097 improves AUC. Keeping the model.
Training on augumented user 32190 8/50 current_auc = 0.6123115424525423
User 32190 AUC after training: 0.6123878410547519
User 32190 improves AUC. Keeping the model.
Training on augumented user 59094 9/50 current_auc = 0.6123878410547519
User 59094 AUC after training: 0.6124259903558567
User 59094 improves AUC. Keeping the model.
Training on augumented user 15594 10/50 current_auc = 0.6124259903558567
User 15594 AUC after training: 0.6123878410547519
User 15594 does not improve AUC. Reverting changes.
Training on augumented user 81408 11/50 current_auc = 0.6124259903558567
User 81408 AUC after training: 0.6124717695171824
User 81408 improves AUC. Keeping the model.
Training on augumented user 29105 12/50 current_auc = 0.6124717695171824
User 29105 AUC after training: 0.6126091070011597
User 29105 improves AUC. Keeping the model.
Training on augumented user 17578 13/50 current_auc = 0.6126091070011597
User 17578 AUC after training: 0.612563327839834
User 17578 does not improve AUC. Reverting changes.
Training on augumented user 118737 14/50 current_auc = 0.6126091070011597
User 118737 AUC after training: 0.6126548861624854
User 118737 improves AUC. Keeping the model.
Training on augumented user 64419 15/50 current_auc = 0.6126548861624854
User 64419 AUC after training: 0.6122657632912165
User 64419 does not improve AUC. Reverting changes.
Training on augumented user 73818 16/50 current_auc = 0.6126548861624854
User 73818 AUC after training: 0.6126091070011597
User 73818 does not improve AUC. Reverting changes.
Training on augumented user 16728 17/50 current_auc = 0.6126548861624854
User 16728 AUC after training: 0.6126472563022646
User 16728 does not improve AUC. Reverting changes.
Training on augumented user 26429 18/50 current_auc = 0.6126548861624854
User 26429 AUC after training: 0.612158945248123
User 26429 does not improve AUC. Reverting changes.
Training on augumented user 57805 19/50 current_auc = 0.6126548861624854
User 57805 AUC after training: 0.6122505035707746
User 57805 does not improve AUC. Reverting changes.
Training on augumented user 129503 20/50 current_auc = 0.6126548861624854
User 129503 AUC after training: 0.6126319965818225
User 129503 does not improve AUC. Reverting changes.
Training on augumented user 72507 21/50 current_auc = 0.6126548861624854
User 72507 AUC after training: 0.6125404382591711
User 72507 does not improve AUC. Reverting changes.
Training on augumented user 122781 22/50 current_auc = 0.6126548861624854
User 122781 AUC after training: 0.6124717695171825
User 122781 does not improve AUC. Reverting changes.
Training on augumented user 50342 23/50 current_auc = 0.6126548861624854
User 50342 AUC after training: 0.6123420618934261
User 50342 does not improve AUC. Reverting changes.
Training on augumented user 126977 24/50 current_auc = 0.6126548861624854
User 126977 AUC after training: 0.6127769639260209
User 126977 improves AUC. Keeping the model.
Training on augumented user 44454 25/50 current_auc = 0.6127769639260209
User 44454 AUC after training: 0.6125022889580662
User 44454 does not improve AUC. Reverting changes.
Training on augumented user 46472 26/50 current_auc = 0.6127769639260209
User 46472 AUC after training: 0.6120063480437038
User 46472 does not improve AUC. Reverting changes.
Training on augumented user 84272 27/50 current_auc = 0.6127769639260209
User 84272 AUC after training: 0.6131660867972899
User 84272 improves AUC. Keeping the model.
Training on augumented user 36828 28/50 current_auc = 0.6131660867972899
User 36828 AUC after training: 0.6134331319050235
User 36828 improves AUC. Keeping the model.
Training on augumented user 36211 29/50 current_auc = 0.6134331319050235
User 36211 AUC after training: 0.6131966062381737
User 36211 does not improve AUC. Reverting changes.
Training on augumented user 28776 30/50 current_auc = 0.6134331319050235
User 28776 AUC after training: 0.6132347555392785
User 28776 does not improve AUC. Reverting changes.
Training on augumented user 5699 31/50 current_auc = 0.6134331319050235
User 5699 AUC after training: 0.6134560214856865
User 5699 improves AUC. Keeping the model.
Training on augumented user 105011 32/50 current_auc = 0.6134560214856865
User 105011 AUC after training: 0.6132957944210462
User 105011 does not improve AUC. Reverting changes.
Training on augumented user 101021 33/50 current_auc = 0.6134560214856865
User 101021 AUC after training: 0.6130134895928707
User 101021 does not improve AUC. Reverting changes.
Training on augumented user 97476 34/50 current_auc = 0.6134560214856865
User 97476 AUC after training: 0.6133949826039187
User 97476 does not improve AUC. Reverting changes.
Training on augumented user 75490 35/50 current_auc = 0.6134560214856865
User 75490 AUC after training: 0.6134026124641396
User 75490 does not improve AUC. Reverting changes.
Training on augumented user 60789 36/50 current_auc = 0.6134560214856865
User 60789 AUC after training: 0.6133492034425929
User 60789 does not improve AUC. Reverting changes.
Training on augumented user 109057 37/50 current_auc = 0.6134560214856865
User 109057 AUC after training: 0.612761704205579
User 109057 does not improve AUC. Reverting changes.
Training on augumented user 44038 38/50 current_auc = 0.6134560214856865
User 44038 AUC after training: 0.6145470914972837
User 44038 improves AUC. Keeping the model.
Training on augumented user 75267 39/50 current_auc = 0.6145470914972837
User 75267 AUC after training: 0.6145699810779467
User 75267 improves AUC. Keeping the model.
Training on augumented user 74931 40/50 current_auc = 0.6145699810779467
User 74931 AUC after training: 0.6144479033144113
User 74931 does not improve AUC. Reverting changes.
Training on augumented user 65290 41/50 current_auc = 0.6145699810779467
User 65290 AUC after training: 0.6142495269486663
User 65290 does not improve AUC. Reverting changes.
Training on augumented user 26360 42/50 current_auc = 0.6145699810779467
User 26360 AUC after training: 0.6142342672282244
User 26360 does not improve AUC. Reverting changes.
Training on augumented user 123916 43/50 current_auc = 0.6145699810779467
User 123916 AUC after training: 0.61411981932491
User 123916 does not improve AUC. Reverting changes.
Training on augumented user 101887 44/50 current_auc = 0.6145699810779467
User 101887 AUC after training: 0.6144631630348532
User 101887 does not improve AUC. Reverting changes.
Training on augumented user 97801 45/50 current_auc = 0.6145699810779467
User 97801 AUC after training: 0.6146462796801563
User 97801 improves AUC. Keeping the model.
Training on augumented user 113253 46/50 current_auc = 0.6146462796801563
User 113253 AUC after training: 0.6143258255508759
User 113253 does not improve AUC. Reverting changes.
Training on augumented user 75869 47/50 current_auc = 0.6146462796801563
User 75869 AUC after training: 0.6141427089055728
User 75869 does not improve AUC. Reverting changes.
Training on augumented user 73671 48/50 current_auc = 0.6146462796801563
User 73671 AUC after training: 0.6141808582066777
User 73671 does not improve AUC. Reverting changes.
Training on augumented user 19496 49/50 current_auc = 0.6146462796801563
User 19496 AUC after training: 0.6145699810779466
User 19496 does not improve AUC. Reverting changes.
[2024-12-02 19:38:14.595853] start test user 87737 223/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:38:15.077568] start test user 87737 223/568 recall augumented users by random, augumented_users = [52181, 1103, 77100, 10146, 29015, 91409, 48443, 69046, 26086, 1249, 72160, 91831, 98963, 35764, 125592, 91437, 7521, 4346, 17866, 122607, 118611, 96154, 345, 61751, 18797, 14812, 5241, 109681, 92496, 63747, 16187, 58389, 137970, 46336, 8677, 98731, 68020, 40627, 118549, 22143, 7804, 98278, 70913, 120931, 12532, 86430, 61086, 83299, 10312, 70102]
[2024-12-02 19:38:15.094512] user = 87737 Cloud 223/568
[2024-12-02 19:38:15.105260] user = 87737 Local 223/568
[2024-12-02 19:38:15.133889] user = 87737 Local+ 223/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:38:17.751292] user = 87737 MPDA- 223/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.46875
Training on augumented user 52181 0/50 current_auc = 0.46875
User 52181 AUC after training: 0.46875
User 52181 does not improve AUC. Reverting changes.
Training on augumented user 1103 1/50 current_auc = 0.46875
User 1103 AUC after training: 0.46875
User 1103 does not improve AUC. Reverting changes.
Training on augumented user 77100 2/50 current_auc = 0.46875
User 77100 AUC after training: 0.46875
User 77100 does not improve AUC. Reverting changes.
Training on augumented user 10146 3/50 current_auc = 0.46875
User 10146 AUC after training: 0.46875
User 10146 does not improve AUC. Reverting changes.
Training on augumented user 29015 4/50 current_auc = 0.46875
User 29015 AUC after training: 0.46875
User 29015 does not improve AUC. Reverting changes.
Training on augumented user 91409 5/50 current_auc = 0.46875
User 91409 AUC after training: 0.46875
User 91409 does not improve AUC. Reverting changes.
Training on augumented user 48443 6/50 current_auc = 0.46875
User 48443 AUC after training: 0.46875
User 48443 does not improve AUC. Reverting changes.
Training on augumented user 69046 7/50 current_auc = 0.46875
User 69046 AUC after training: 0.46875
User 69046 does not improve AUC. Reverting changes.
Training on augumented user 26086 8/50 current_auc = 0.46875
User 26086 AUC after training: 0.46875
User 26086 does not improve AUC. Reverting changes.
Training on augumented user 1249 9/50 current_auc = 0.46875
User 1249 AUC after training: 0.46875
User 1249 does not improve AUC. Reverting changes.
Training on augumented user 72160 10/50 current_auc = 0.46875
User 72160 AUC after training: 0.46875
User 72160 does not improve AUC. Reverting changes.
Training on augumented user 91831 11/50 current_auc = 0.46875
User 91831 AUC after training: 0.46875
User 91831 does not improve AUC. Reverting changes.
Training on augumented user 98963 12/50 current_auc = 0.46875
User 98963 AUC after training: 0.46875
User 98963 does not improve AUC. Reverting changes.
Training on augumented user 35764 13/50 current_auc = 0.46875
User 35764 AUC after training: 0.46875
User 35764 does not improve AUC. Reverting changes.
Training on augumented user 125592 14/50 current_auc = 0.46875
User 125592 AUC after training: 0.46875
User 125592 does not improve AUC. Reverting changes.
Training on augumented user 91437 15/50 current_auc = 0.46875
User 91437 AUC after training: 0.46875
User 91437 does not improve AUC. Reverting changes.
Training on augumented user 7521 16/50 current_auc = 0.46875
User 7521 AUC after training: 0.5
User 7521 improves AUC. Keeping the model.
Training on augumented user 4346 17/50 current_auc = 0.5
User 4346 AUC after training: 0.5
User 4346 does not improve AUC. Reverting changes.
Training on augumented user 17866 18/50 current_auc = 0.5
User 17866 AUC after training: 0.5
User 17866 does not improve AUC. Reverting changes.
Training on augumented user 122607 19/50 current_auc = 0.5
User 122607 AUC after training: 0.5
User 122607 does not improve AUC. Reverting changes.
Training on augumented user 118611 20/50 current_auc = 0.5
User 118611 AUC after training: 0.5
User 118611 does not improve AUC. Reverting changes.
Training on augumented user 96154 21/50 current_auc = 0.5
User 96154 AUC after training: 0.5
User 96154 does not improve AUC. Reverting changes.
Training on augumented user 345 22/50 current_auc = 0.5
User 345 AUC after training: 0.5
User 345 does not improve AUC. Reverting changes.
Training on augumented user 61751 23/50 current_auc = 0.5
User 61751 AUC after training: 0.5
User 61751 does not improve AUC. Reverting changes.
Training on augumented user 18797 24/50 current_auc = 0.5
User 18797 AUC after training: 0.5
User 18797 does not improve AUC. Reverting changes.
Training on augumented user 14812 25/50 current_auc = 0.5
User 14812 AUC after training: 0.5
User 14812 does not improve AUC. Reverting changes.
Training on augumented user 5241 26/50 current_auc = 0.5
User 5241 AUC after training: 0.5
User 5241 does not improve AUC. Reverting changes.
Training on augumented user 109681 27/50 current_auc = 0.5
User 109681 AUC after training: 0.5
User 109681 does not improve AUC. Reverting changes.
Training on augumented user 92496 28/50 current_auc = 0.5
User 92496 AUC after training: 0.5
User 92496 does not improve AUC. Reverting changes.
Training on augumented user 63747 29/50 current_auc = 0.5
User 63747 AUC after training: 0.5
User 63747 does not improve AUC. Reverting changes.
Training on augumented user 16187 30/50 current_auc = 0.5
User 16187 AUC after training: 0.5
User 16187 does not improve AUC. Reverting changes.
Training on augumented user 58389 31/50 current_auc = 0.5
User 58389 AUC after training: 0.5
User 58389 does not improve AUC. Reverting changes.
Training on augumented user 137970 32/50 current_auc = 0.5
User 137970 AUC after training: 0.5
User 137970 does not improve AUC. Reverting changes.
Training on augumented user 46336 33/50 current_auc = 0.5
User 46336 AUC after training: 0.5
User 46336 does not improve AUC. Reverting changes.
Training on augumented user 8677 34/50 current_auc = 0.5
User 8677 AUC after training: 0.5
User 8677 does not improve AUC. Reverting changes.
Training on augumented user 98731 35/50 current_auc = 0.5
User 98731 AUC after training: 0.5
User 98731 does not improve AUC. Reverting changes.
Training on augumented user 68020 36/50 current_auc = 0.5
User 68020 AUC after training: 0.5
User 68020 does not improve AUC. Reverting changes.
Training on augumented user 40627 37/50 current_auc = 0.5
User 40627 AUC after training: 0.5
User 40627 does not improve AUC. Reverting changes.
Training on augumented user 118549 38/50 current_auc = 0.5
User 118549 AUC after training: 0.5
User 118549 does not improve AUC. Reverting changes.
Training on augumented user 22143 39/50 current_auc = 0.5
User 22143 AUC after training: 0.5
User 22143 does not improve AUC. Reverting changes.
Training on augumented user 7804 40/50 current_auc = 0.5
User 7804 AUC after training: 0.46875
User 7804 does not improve AUC. Reverting changes.
Training on augumented user 98278 41/50 current_auc = 0.5
User 98278 AUC after training: 0.5
User 98278 does not improve AUC. Reverting changes.
Training on augumented user 70913 42/50 current_auc = 0.5
User 70913 AUC after training: 0.5
User 70913 does not improve AUC. Reverting changes.
Training on augumented user 120931 43/50 current_auc = 0.5
User 120931 AUC after training: 0.5
User 120931 does not improve AUC. Reverting changes.
Training on augumented user 12532 44/50 current_auc = 0.5
User 12532 AUC after training: 0.5
User 12532 does not improve AUC. Reverting changes.
Training on augumented user 86430 45/50 current_auc = 0.5
User 86430 AUC after training: 0.5
User 86430 does not improve AUC. Reverting changes.
Training on augumented user 61086 46/50 current_auc = 0.5
User 61086 AUC after training: 0.5
User 61086 does not improve AUC. Reverting changes.
Training on augumented user 83299 47/50 current_auc = 0.5
User 83299 AUC after training: 0.5
User 83299 does not improve AUC. Reverting changes.
Training on augumented user 10312 48/50 current_auc = 0.5
User 10312 AUC after training: 0.5
User 10312 does not improve AUC. Reverting changes.
Training on augumented user 70102 49/50 current_auc = 0.5
User 70102 AUC after training: 0.5
User 70102 does not improve AUC. Reverting changes.
[2024-12-02 19:38:37.323145] start test user 87746 224/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:38:37.748872] start test user 87746 224/568 recall augumented users by random, augumented_users = [34425, 90450, 129764, 120535, 18905, 128004, 96688, 14753, 111354, 14068, 62320, 27650, 105101, 59017, 120163, 7367, 100825, 27759, 137899, 7186, 33592, 131559, 121396, 127091, 68319, 49152, 508, 127962, 105493, 31727, 127651, 100909, 111873, 38743, 37082, 23162, 13277, 8743, 4824, 96246, 118185, 29950, 122196, 44060, 104208, 22588, 109465, 65807, 54238, 9793]
[2024-12-02 19:38:37.765528] user = 87746 Cloud 224/568
[2024-12-02 19:38:37.793510] user = 87746 Local 224/568
[2024-12-02 19:38:37.935351] user = 87746 Local+ 224/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:38:40.610825] user = 87746 MPDA- 224/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6696391823295377
Training on augumented user 34425 0/50 current_auc = 0.6696391823295377
User 34425 AUC after training: 0.6690904102071615
User 34425 does not improve AUC. Reverting changes.
Training on augumented user 90450 1/50 current_auc = 0.6696391823295377
User 90450 AUC after training: 0.6688160241459734
User 90450 does not improve AUC. Reverting changes.
Training on augumented user 129764 2/50 current_auc = 0.6696391823295377
User 129764 AUC after training: 0.6695019892989437
User 129764 does not improve AUC. Reverting changes.
Training on augumented user 120535 3/50 current_auc = 0.6696391823295377
User 120535 AUC after training: 0.6701879544519139
User 120535 improves AUC. Keeping the model.
Training on augumented user 18905 4/50 current_auc = 0.6701879544519139
User 18905 AUC after training: 0.6703251474825079
User 18905 improves AUC. Keeping the model.
Training on augumented user 128004 5/50 current_auc = 0.6703251474825079
User 128004 AUC after training: 0.6701879544519139
User 128004 does not improve AUC. Reverting changes.
Training on augumented user 96688 6/50 current_auc = 0.6703251474825079
User 96688 AUC after training: 0.6701879544519139
User 96688 does not improve AUC. Reverting changes.
Training on augumented user 14753 7/50 current_auc = 0.6703251474825079
User 14753 AUC after training: 0.6696391823295377
User 14753 does not improve AUC. Reverting changes.
Training on augumented user 111354 8/50 current_auc = 0.6703251474825079
User 111354 AUC after training: 0.6695019892989437
User 111354 does not improve AUC. Reverting changes.
Training on augumented user 14068 9/50 current_auc = 0.6703251474825079
User 14068 AUC after training: 0.6695019892989437
User 14068 does not improve AUC. Reverting changes.
Training on augumented user 62320 10/50 current_auc = 0.6703251474825079
User 62320 AUC after training: 0.6701879544519139
User 62320 does not improve AUC. Reverting changes.
Training on augumented user 27650 11/50 current_auc = 0.6703251474825079
User 27650 AUC after training: 0.670599533543696
User 27650 improves AUC. Keeping the model.
Training on augumented user 105101 12/50 current_auc = 0.670599533543696
User 105101 AUC after training: 0.6695705858142407
User 105101 does not improve AUC. Reverting changes.
Training on augumented user 59017 13/50 current_auc = 0.670599533543696
User 59017 AUC after training: 0.6725202359720126
User 59017 improves AUC. Keeping the model.
Training on augumented user 120163 14/50 current_auc = 0.6725202359720126
User 120163 AUC after training: 0.6725202359720126
User 120163 does not improve AUC. Reverting changes.
Training on augumented user 7367 15/50 current_auc = 0.6725202359720126
User 7367 AUC after training: 0.6726574290026066
User 7367 improves AUC. Keeping the model.
Training on augumented user 100825 16/50 current_auc = 0.6726574290026066
User 100825 AUC after training: 0.6725202359720126
User 100825 does not improve AUC. Reverting changes.
Training on augumented user 27759 17/50 current_auc = 0.6726574290026066
User 27759 AUC after training: 0.6726574290026067
User 27759 improves AUC. Keeping the model.
Training on augumented user 137899 18/50 current_auc = 0.6726574290026067
User 137899 AUC after training: 0.6729318150637947
User 137899 improves AUC. Keeping the model.
Training on augumented user 7186 19/50 current_auc = 0.6729318150637947
User 7186 AUC after training: 0.6730690080943889
User 7186 improves AUC. Keeping the model.
Training on augumented user 33592 20/50 current_auc = 0.6730690080943889
User 33592 AUC after training: 0.6727946220332007
User 33592 does not improve AUC. Reverting changes.
Training on augumented user 131559 21/50 current_auc = 0.6730690080943889
User 131559 AUC after training: 0.6723830429414186
User 131559 does not improve AUC. Reverting changes.
Training on augumented user 121396 22/50 current_auc = 0.6730690080943889
User 121396 AUC after training: 0.6732062011249829
User 121396 improves AUC. Keeping the model.
Training on augumented user 127091 23/50 current_auc = 0.6732062011249829
User 127091 AUC after training: 0.6738921662779531
User 127091 improves AUC. Keeping the model.
Training on augumented user 68319 24/50 current_auc = 0.6738921662779531
User 68319 AUC after training: 0.6744409384003293
User 68319 improves AUC. Keeping the model.
Training on augumented user 49152 25/50 current_auc = 0.6744409384003293
User 49152 AUC after training: 0.6741665523391412
User 49152 does not improve AUC. Reverting changes.
Training on augumented user 508 26/50 current_auc = 0.6744409384003293
User 508 AUC after training: 0.673617780216765
User 508 does not improve AUC. Reverting changes.
Training on augumented user 127962 27/50 current_auc = 0.6744409384003293
User 127962 AUC after training: 0.6745781314309233
User 127962 improves AUC. Keeping the model.
Training on augumented user 105493 28/50 current_auc = 0.6745781314309233
User 105493 AUC after training: 0.673480587186171
User 105493 does not improve AUC. Reverting changes.
Training on augumented user 31727 29/50 current_auc = 0.6745781314309233
User 31727 AUC after training: 0.6738921662779531
User 31727 does not improve AUC. Reverting changes.
Training on augumented user 127651 30/50 current_auc = 0.6745781314309233
User 127651 AUC after training: 0.6740293593085471
User 127651 does not improve AUC. Reverting changes.
Training on augumented user 100909 31/50 current_auc = 0.6745781314309233
User 100909 AUC after training: 0.6741665523391411
User 100909 does not improve AUC. Reverting changes.
Training on augumented user 111873 32/50 current_auc = 0.6745781314309233
User 111873 AUC after training: 0.6747153244615174
User 111873 improves AUC. Keeping the model.
Training on augumented user 38743 33/50 current_auc = 0.6747153244615174
User 38743 AUC after training: 0.6751269035532995
User 38743 improves AUC. Keeping the model.
Training on augumented user 37082 34/50 current_auc = 0.6751269035532995
User 37082 AUC after training: 0.6743723418850323
User 37082 does not improve AUC. Reverting changes.
Training on augumented user 23162 35/50 current_auc = 0.6751269035532995
User 23162 AUC after training: 0.673549183701468
User 23162 does not improve AUC. Reverting changes.
Training on augumented user 13277 36/50 current_auc = 0.6751269035532995
User 13277 AUC after training: 0.6737549732473591
User 13277 does not improve AUC. Reverting changes.
Training on augumented user 8743 37/50 current_auc = 0.6751269035532995
User 8743 AUC after training: 0.673343394155577
User 8743 does not improve AUC. Reverting changes.
Training on augumented user 4824 38/50 current_auc = 0.6751269035532995
User 4824 AUC after training: 0.6740293593085471
User 4824 does not improve AUC. Reverting changes.
Training on augumented user 96246 39/50 current_auc = 0.6751269035532995
User 96246 AUC after training: 0.6732062011249829
User 96246 does not improve AUC. Reverting changes.
Training on augumented user 118185 40/50 current_auc = 0.6751269035532995
User 118185 AUC after training: 0.673206201124983
User 118185 does not improve AUC. Reverting changes.
Training on augumented user 29950 41/50 current_auc = 0.6751269035532995
User 29950 AUC after training: 0.6730690080943889
User 29950 does not improve AUC. Reverting changes.
Training on augumented user 122196 42/50 current_auc = 0.6751269035532995
User 122196 AUC after training: 0.6747153244615174
User 122196 does not improve AUC. Reverting changes.
Training on augumented user 44060 43/50 current_auc = 0.6751269035532995
User 44060 AUC after training: 0.6726574290026067
User 44060 does not improve AUC. Reverting changes.
Training on augumented user 104208 44/50 current_auc = 0.6751269035532995
User 104208 AUC after training: 0.6748525174921114
User 104208 does not improve AUC. Reverting changes.
Training on augumented user 22588 45/50 current_auc = 0.6751269035532995
User 22588 AUC after training: 0.6745781314309233
User 22588 does not improve AUC. Reverting changes.
Training on augumented user 109465 46/50 current_auc = 0.6751269035532995
User 109465 AUC after training: 0.6743037453697353
User 109465 does not improve AUC. Reverting changes.
Training on augumented user 65807 47/50 current_auc = 0.6751269035532995
User 65807 AUC after training: 0.6740293593085471
User 65807 does not improve AUC. Reverting changes.
Training on augumented user 54238 48/50 current_auc = 0.6751269035532995
User 54238 AUC after training: 0.6745781314309233
User 54238 does not improve AUC. Reverting changes.
Training on augumented user 9793 49/50 current_auc = 0.6751269035532995
User 9793 AUC after training: 0.6725202359720126
User 9793 does not improve AUC. Reverting changes.
[2024-12-02 19:39:10.959226] start test user 87797 225/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:39:11.387422] start test user 87797 225/568 recall augumented users by random, augumented_users = [137945, 79644, 12571, 57748, 68577, 73061, 22575, 135012, 131012, 66892, 25869, 114844, 17052, 46807, 95577, 101730, 66826, 32086, 51315, 25117, 29414, 7713, 124224, 41313, 125749, 76771, 68351, 97091, 54276, 34704, 116840, 125134, 21880, 98774, 31899, 18750, 110469, 77617, 52029, 83976, 66898, 84186, 66043, 63513, 105718, 67150, 118561, 121551, 134280, 71312]
[2024-12-02 19:39:11.402718] user = 87797 Cloud 225/568
[2024-12-02 19:39:11.437958] user = 87797 Local 225/568
[2024-12-02 19:39:11.508350] user = 87797 Local+ 225/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:39:12.879530] user = 87797 MPDA- 225/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7236832466485972
Training on augumented user 137945 0/50 current_auc = 0.7236832466485972
User 137945 AUC after training: 0.7244890484213611
User 137945 improves AUC. Keeping the model.
Training on augumented user 79644 1/50 current_auc = 0.7244890484213611
User 79644 AUC after training: 0.7244402119502844
User 79644 does not improve AUC. Reverting changes.
Training on augumented user 12571 2/50 current_auc = 0.7244890484213611
User 12571 AUC after training: 0.7246111395990525
User 12571 improves AUC. Keeping the model.
Training on augumented user 57748 3/50 current_auc = 0.7246111395990525
User 57748 AUC after training: 0.725136131663126
User 57748 improves AUC. Keeping the model.
Training on augumented user 68577 4/50 current_auc = 0.725136131663126
User 68577 AUC after training: 0.7253314775474324
User 68577 improves AUC. Keeping the model.
Training on augumented user 73061 5/50 current_auc = 0.7253314775474324
User 73061 AUC after training: 0.7254901960784313
User 73061 improves AUC. Keeping the model.
Training on augumented user 22575 6/50 current_auc = 0.7254901960784313
User 22575 AUC after training: 0.7255146143139697
User 22575 improves AUC. Keeping the model.
Training on augumented user 135012 7/50 current_auc = 0.7255146143139697
User 135012 AUC after training: 0.7260396063780431
User 135012 improves AUC. Keeping the model.
Training on augumented user 131012 8/50 current_auc = 0.7260396063780431
User 131012 AUC after training: 0.7258076331404293
User 131012 does not improve AUC. Reverting changes.
Training on augumented user 66892 9/50 current_auc = 0.7260396063780431
User 66892 AUC after training: 0.7260518154958122
User 66892 improves AUC. Keeping the model.
Training on augumented user 25869 10/50 current_auc = 0.7260518154958122
User 25869 AUC after training: 0.7267111078553463
User 25869 improves AUC. Keeping the model.
Training on augumented user 114844 11/50 current_auc = 0.7267111078553463
User 114844 AUC after training: 0.7274070275681879
User 114844 improves AUC. Keeping the model.
Training on augumented user 17052 12/50 current_auc = 0.7274070275681879
User 17052 AUC after training: 0.7279686469855688
User 17052 improves AUC. Keeping the model.
Training on augumented user 46807 13/50 current_auc = 0.7279686469855688
User 46807 AUC after training: 0.7271750543305739
User 46807 does not improve AUC. Reverting changes.
Training on augumented user 95577 14/50 current_auc = 0.7279686469855688
User 95577 AUC after training: 0.7272605181549581
User 95577 does not improve AUC. Reverting changes.
Training on augumented user 101730 15/50 current_auc = 0.7279686469855688
User 101730 AUC after training: 0.7282982931653358
User 101730 improves AUC. Keeping the model.
Training on augumented user 66826 16/50 current_auc = 0.7282982931653358
User 66826 AUC after training: 0.7281517837521061
User 66826 does not improve AUC. Reverting changes.
Training on augumented user 32086 17/50 current_auc = 0.7282982931653358
User 32086 AUC after training: 0.7281762019876444
User 32086 does not improve AUC. Reverting changes.
Training on augumented user 51315 18/50 current_auc = 0.7282982931653358
User 51315 AUC after training: 0.7287011940517178
User 51315 improves AUC. Keeping the model.
Training on augumented user 25117 19/50 current_auc = 0.7287011940517178
User 25117 AUC after training: 0.7285180572851806
User 25117 does not improve AUC. Reverting changes.
Training on augumented user 29414 20/50 current_auc = 0.7287011940517178
User 29414 AUC after training: 0.7279198105144923
User 29414 does not improve AUC. Reverting changes.
Training on augumented user 7713 21/50 current_auc = 0.7287011940517178
User 7713 AUC after training: 0.7285180572851806
User 7713 does not improve AUC. Reverting changes.
Training on augumented user 124224 22/50 current_auc = 0.7287011940517178
User 124224 AUC after training: 0.7280785290454912
User 124224 does not improve AUC. Reverting changes.
Training on augumented user 41313 23/50 current_auc = 0.7287011940517178
User 41313 AUC after training: 0.7284570116963348
User 41313 does not improve AUC. Reverting changes.
Training on augumented user 125749 24/50 current_auc = 0.7287011940517178
User 125749 AUC after training: 0.7292017678802529
User 125749 improves AUC. Keeping the model.
Training on augumented user 76771 25/50 current_auc = 0.7292017678802529
User 76771 AUC after training: 0.7295436231777891
User 76771 improves AUC. Keeping the model.
Training on augumented user 68351 26/50 current_auc = 0.7295436231777891
User 68351 AUC after training: 0.7311185993700096
User 68351 improves AUC. Keeping the model.
Training on augumented user 97091 27/50 current_auc = 0.7311185993700096
User 97091 AUC after training: 0.7296901325910189
User 97091 does not improve AUC. Reverting changes.
Training on augumented user 54276 28/50 current_auc = 0.7311185993700096
User 54276 AUC after training: 0.7308744170146265
User 54276 does not improve AUC. Reverting changes.
Training on augumented user 34704 29/50 current_auc = 0.7311185993700096
User 34704 AUC after training: 0.7313627817253926
User 34704 improves AUC. Keeping the model.
Training on augumented user 116840 30/50 current_auc = 0.7313627817253926
User 116840 AUC after training: 0.7314360364320074
User 116840 improves AUC. Keeping the model.
Training on augumented user 125134 31/50 current_auc = 0.7314360364320074
User 125134 AUC after training: 0.7316558005518521
User 125134 improves AUC. Keeping the model.
Training on augumented user 21880 32/50 current_auc = 0.7316558005518521
User 21880 AUC after training: 0.7308377896613191
User 21880 does not improve AUC. Reverting changes.
Training on augumented user 98774 33/50 current_auc = 0.7316558005518521
User 98774 AUC after training: 0.731240690547701
User 98774 does not improve AUC. Reverting changes.
Training on augumented user 31899 34/50 current_auc = 0.7316558005518521
User 31899 AUC after training: 0.7318999829072351
User 31899 improves AUC. Keeping the model.
Training on augumented user 18750 35/50 current_auc = 0.7318999829072351
User 18750 AUC after training: 0.7318755646716967
User 18750 does not improve AUC. Reverting changes.
Training on augumented user 110469 36/50 current_auc = 0.7318999829072351
User 110469 AUC after training: 0.7312162723121628
User 110469 does not improve AUC. Reverting changes.
Training on augumented user 77617 37/50 current_auc = 0.7318999829072351
User 77617 AUC after training: 0.7317046370229288
User 77617 does not improve AUC. Reverting changes.
Training on augumented user 52029 38/50 current_auc = 0.7318999829072351
User 52029 AUC after training: 0.7317168461406979
User 52029 does not improve AUC. Reverting changes.
Training on augumented user 83976 39/50 current_auc = 0.7318999829072351
User 83976 AUC after training: 0.7320709105560032
User 83976 improves AUC. Keeping the model.
Training on augumented user 66898 40/50 current_auc = 0.7320709105560032
User 66898 AUC after training: 0.732290674675848
User 66898 improves AUC. Keeping the model.
Training on augumented user 84186 41/50 current_auc = 0.732290674675848
User 84186 AUC after training: 0.7319732376138499
User 84186 does not improve AUC. Reverting changes.
Training on augumented user 66043 42/50 current_auc = 0.732290674675848
User 66043 AUC after training: 0.7332185676263033
User 66043 improves AUC. Keeping the model.
Training on augumented user 63513 43/50 current_auc = 0.7332185676263033
User 63513 AUC after training: 0.7333894952750715
User 63513 improves AUC. Keeping the model.
Training on augumented user 105718 44/50 current_auc = 0.7333894952750715
User 105718 AUC after training: 0.7322784655580789
User 105718 does not improve AUC. Reverting changes.
Training on augumented user 67150 45/50 current_auc = 0.7333894952750715
User 67150 AUC after training: 0.7333772861573022
User 67150 does not improve AUC. Reverting changes.
Training on augumented user 118561 46/50 current_auc = 0.7333894952750715
User 118561 AUC after training: 0.7322418382047712
User 118561 does not improve AUC. Reverting changes.
Training on augumented user 121551 47/50 current_auc = 0.7333894952750715
User 121551 AUC after training: 0.7329865943886894
User 121551 does not improve AUC. Reverting changes.
Training on augumented user 134280 48/50 current_auc = 0.7333894952750715
User 134280 AUC after training: 0.7329011305643054
User 134280 does not improve AUC. Reverting changes.
Training on augumented user 71312 49/50 current_auc = 0.7333894952750715
User 71312 AUC after training: 0.7335604229238395
User 71312 improves AUC. Keeping the model.
[2024-12-02 19:39:44.795812] start test user 87803 226/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:39:45.271031] start test user 87803 226/568 recall augumented users by random, augumented_users = [21374, 90962, 25166, 91909, 65095, 74643, 70551, 61884, 90876, 78768, 109696, 38700, 29371, 58358, 94329, 78477, 107089, 92326, 83152, 46131, 134000, 68681, 60248, 53906, 69319, 101616, 10396, 23703, 123153, 11258, 112038, 66876, 19218, 14011, 18567, 76167, 87343, 30398, 89226, 8903, 66360, 76886, 81309, 11900, 104434, 92412, 67865, 104067, 110353, 95696]
[2024-12-02 19:39:45.286736] user = 87803 Cloud 226/568
[2024-12-02 19:39:45.305478] user = 87803 Local 226/568
[2024-12-02 19:39:45.356605] user = 87803 Local+ 226/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:39:48.800695] user = 87803 MPDA- 226/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.701525054466231
Training on augumented user 21374 0/50 current_auc = 0.701525054466231
User 21374 AUC after training: 0.7008714596949891
User 21374 does not improve AUC. Reverting changes.
Training on augumented user 90962 1/50 current_auc = 0.701525054466231
User 90962 AUC after training: 0.7015250544662309
User 90962 does not improve AUC. Reverting changes.
Training on augumented user 25166 2/50 current_auc = 0.701525054466231
User 25166 AUC after training: 0.7010893246187364
User 25166 does not improve AUC. Reverting changes.
Training on augumented user 91909 3/50 current_auc = 0.701525054466231
User 91909 AUC after training: 0.7028322440087147
User 91909 improves AUC. Keeping the model.
Training on augumented user 65095 4/50 current_auc = 0.7028322440087147
User 65095 AUC after training: 0.7021786492374728
User 65095 does not improve AUC. Reverting changes.
Training on augumented user 74643 5/50 current_auc = 0.7028322440087147
User 74643 AUC after training: 0.7021786492374728
User 74643 does not improve AUC. Reverting changes.
Training on augumented user 70551 6/50 current_auc = 0.7028322440087147
User 70551 AUC after training: 0.7037037037037038
User 70551 improves AUC. Keeping the model.
Training on augumented user 61884 7/50 current_auc = 0.7037037037037038
User 61884 AUC after training: 0.7050108932461874
User 61884 improves AUC. Keeping the model.
Training on augumented user 90876 8/50 current_auc = 0.7050108932461874
User 90876 AUC after training: 0.7050108932461874
User 90876 does not improve AUC. Reverting changes.
Training on augumented user 78768 9/50 current_auc = 0.7050108932461874
User 78768 AUC after training: 0.7045751633986929
User 78768 does not improve AUC. Reverting changes.
Training on augumented user 109696 10/50 current_auc = 0.7050108932461874
User 109696 AUC after training: 0.7028322440087146
User 109696 does not improve AUC. Reverting changes.
Training on augumented user 38700 11/50 current_auc = 0.7050108932461874
User 38700 AUC after training: 0.7023965141612201
User 38700 does not improve AUC. Reverting changes.
Training on augumented user 29371 12/50 current_auc = 0.7050108932461874
User 29371 AUC after training: 0.7045751633986929
User 29371 does not improve AUC. Reverting changes.
Training on augumented user 58358 13/50 current_auc = 0.7050108932461874
User 58358 AUC after training: 0.7045751633986927
User 58358 does not improve AUC. Reverting changes.
Training on augumented user 94329 14/50 current_auc = 0.7050108932461874
User 94329 AUC after training: 0.7058823529411764
User 94329 improves AUC. Keeping the model.
Training on augumented user 78477 15/50 current_auc = 0.7058823529411764
User 78477 AUC after training: 0.7045751633986929
User 78477 does not improve AUC. Reverting changes.
Training on augumented user 107089 16/50 current_auc = 0.7058823529411764
User 107089 AUC after training: 0.7037037037037037
User 107089 does not improve AUC. Reverting changes.
Training on augumented user 92326 17/50 current_auc = 0.7058823529411764
User 92326 AUC after training: 0.7054466230936819
User 92326 does not improve AUC. Reverting changes.
Training on augumented user 83152 18/50 current_auc = 0.7058823529411764
User 83152 AUC after training: 0.7037037037037037
User 83152 does not improve AUC. Reverting changes.
Training on augumented user 46131 19/50 current_auc = 0.7058823529411764
User 46131 AUC after training: 0.7045751633986929
User 46131 does not improve AUC. Reverting changes.
Training on augumented user 134000 20/50 current_auc = 0.7058823529411764
User 134000 AUC after training: 0.7010893246187364
User 134000 does not improve AUC. Reverting changes.
Training on augumented user 68681 21/50 current_auc = 0.7058823529411764
User 68681 AUC after training: 0.7054466230936819
User 68681 does not improve AUC. Reverting changes.
Training on augumented user 60248 22/50 current_auc = 0.7058823529411764
User 60248 AUC after training: 0.7028322440087147
User 60248 does not improve AUC. Reverting changes.
Training on augumented user 53906 23/50 current_auc = 0.7058823529411764
User 53906 AUC after training: 0.7054466230936819
User 53906 does not improve AUC. Reverting changes.
Training on augumented user 69319 24/50 current_auc = 0.7058823529411764
User 69319 AUC after training: 0.7041394335511983
User 69319 does not improve AUC. Reverting changes.
Training on augumented user 101616 25/50 current_auc = 0.7058823529411764
User 101616 AUC after training: 0.7054466230936819
User 101616 does not improve AUC. Reverting changes.
Training on augumented user 10396 26/50 current_auc = 0.7058823529411764
User 10396 AUC after training: 0.7054466230936819
User 10396 does not improve AUC. Reverting changes.
Training on augumented user 23703 27/50 current_auc = 0.7058823529411764
User 23703 AUC after training: 0.7045751633986929
User 23703 does not improve AUC. Reverting changes.
Training on augumented user 123153 28/50 current_auc = 0.7058823529411764
User 123153 AUC after training: 0.7045751633986929
User 123153 does not improve AUC. Reverting changes.
Training on augumented user 11258 29/50 current_auc = 0.7058823529411764
User 11258 AUC after training: 0.7041394335511982
User 11258 does not improve AUC. Reverting changes.
Training on augumented user 112038 30/50 current_auc = 0.7058823529411764
User 112038 AUC after training: 0.7041394335511982
User 112038 does not improve AUC. Reverting changes.
Training on augumented user 66876 31/50 current_auc = 0.7058823529411764
User 66876 AUC after training: 0.7041394335511982
User 66876 does not improve AUC. Reverting changes.
Training on augumented user 19218 32/50 current_auc = 0.7058823529411764
User 19218 AUC after training: 0.7045751633986929
User 19218 does not improve AUC. Reverting changes.
Training on augumented user 14011 33/50 current_auc = 0.7058823529411764
User 14011 AUC after training: 0.7041394335511982
User 14011 does not improve AUC. Reverting changes.
Training on augumented user 18567 34/50 current_auc = 0.7058823529411764
User 18567 AUC after training: 0.7045751633986927
User 18567 does not improve AUC. Reverting changes.
Training on augumented user 76167 35/50 current_auc = 0.7058823529411764
User 76167 AUC after training: 0.7050108932461874
User 76167 does not improve AUC. Reverting changes.
Training on augumented user 87343 36/50 current_auc = 0.7058823529411764
User 87343 AUC after training: 0.7019607843137254
User 87343 does not improve AUC. Reverting changes.
Training on augumented user 30398 37/50 current_auc = 0.7058823529411764
User 30398 AUC after training: 0.7037037037037037
User 30398 does not improve AUC. Reverting changes.
Training on augumented user 89226 38/50 current_auc = 0.7058823529411764
User 89226 AUC after training: 0.7045751633986927
User 89226 does not improve AUC. Reverting changes.
Training on augumented user 8903 39/50 current_auc = 0.7058823529411764
User 8903 AUC after training: 0.7047930283224401
User 8903 does not improve AUC. Reverting changes.
Training on augumented user 66360 40/50 current_auc = 0.7058823529411764
User 66360 AUC after training: 0.7058823529411764
User 66360 does not improve AUC. Reverting changes.
Training on augumented user 76886 41/50 current_auc = 0.7058823529411764
User 76886 AUC after training: 0.7041394335511982
User 76886 does not improve AUC. Reverting changes.
Training on augumented user 81309 42/50 current_auc = 0.7058823529411764
User 81309 AUC after training: 0.7050108932461874
User 81309 does not improve AUC. Reverting changes.
Training on augumented user 11900 43/50 current_auc = 0.7058823529411764
User 11900 AUC after training: 0.7010893246187364
User 11900 does not improve AUC. Reverting changes.
Training on augumented user 104434 44/50 current_auc = 0.7058823529411764
User 104434 AUC after training: 0.705446623093682
User 104434 does not improve AUC. Reverting changes.
Training on augumented user 92412 45/50 current_auc = 0.7058823529411764
User 92412 AUC after training: 0.7054466230936819
User 92412 does not improve AUC. Reverting changes.
Training on augumented user 67865 46/50 current_auc = 0.7058823529411764
User 67865 AUC after training: 0.7032679738562091
User 67865 does not improve AUC. Reverting changes.
Training on augumented user 104067 47/50 current_auc = 0.7058823529411764
User 104067 AUC after training: 0.7054466230936819
User 104067 does not improve AUC. Reverting changes.
Training on augumented user 110353 48/50 current_auc = 0.7058823529411764
User 110353 AUC after training: 0.7037037037037037
User 110353 does not improve AUC. Reverting changes.
Training on augumented user 95696 49/50 current_auc = 0.7058823529411764
User 95696 AUC after training: 0.7015250544662309
User 95696 does not improve AUC. Reverting changes.
[2024-12-02 19:40:15.974559] start test user 87832 227/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:40:16.856235] start test user 87832 227/568 recall augumented users by random, augumented_users = [130542, 112306, 110631, 122551, 71107, 31866, 57862, 16182, 63028, 99630, 90646, 128336, 2643, 109337, 130948, 5100, 21217, 38537, 128216, 113212, 37156, 29993, 121607, 87948, 54029, 51643, 108775, 102048, 50117, 21928, 131165, 122257, 80715, 37301, 111243, 52661, 136619, 86440, 48446, 77988, 46350, 89055, 121452, 135744, 10898, 129354, 19780, 43221, 94825, 96609]
[2024-12-02 19:40:16.887539] user = 87832 Cloud 227/568
[2024-12-02 19:40:16.904314] user = 87832 Local 227/568
[2024-12-02 19:40:16.954546] user = 87832 Local+ 227/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:40:20.689198] user = 87832 MPDA- 227/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6315789473684211
Training on augumented user 130542 0/50 current_auc = 0.6315789473684211
User 130542 AUC after training: 0.6306555863342567
User 130542 does not improve AUC. Reverting changes.
Training on augumented user 112306 1/50 current_auc = 0.6315789473684211
User 112306 AUC after training: 0.6315789473684211
User 112306 does not improve AUC. Reverting changes.
Training on augumented user 110631 2/50 current_auc = 0.6315789473684211
User 110631 AUC after training: 0.6306555863342567
User 110631 does not improve AUC. Reverting changes.
Training on augumented user 122551 3/50 current_auc = 0.6315789473684211
User 122551 AUC after training: 0.6306555863342567
User 122551 does not improve AUC. Reverting changes.
Training on augumented user 71107 4/50 current_auc = 0.6315789473684211
User 71107 AUC after training: 0.6306555863342567
User 71107 does not improve AUC. Reverting changes.
Training on augumented user 31866 5/50 current_auc = 0.6315789473684211
User 31866 AUC after training: 0.6315789473684211
User 31866 does not improve AUC. Reverting changes.
Training on augumented user 57862 6/50 current_auc = 0.6315789473684211
User 57862 AUC after training: 0.6315789473684211
User 57862 does not improve AUC. Reverting changes.
Training on augumented user 16182 7/50 current_auc = 0.6315789473684211
User 16182 AUC after training: 0.6315789473684211
User 16182 does not improve AUC. Reverting changes.
Training on augumented user 63028 8/50 current_auc = 0.6315789473684211
User 63028 AUC after training: 0.6306555863342567
User 63028 does not improve AUC. Reverting changes.
Training on augumented user 99630 9/50 current_auc = 0.6315789473684211
User 99630 AUC after training: 0.631578947368421
User 99630 does not improve AUC. Reverting changes.
Training on augumented user 90646 10/50 current_auc = 0.6315789473684211
User 90646 AUC after training: 0.6325023084025855
User 90646 improves AUC. Keeping the model.
Training on augumented user 128336 11/50 current_auc = 0.6325023084025855
User 128336 AUC after training: 0.6325023084025854
User 128336 does not improve AUC. Reverting changes.
Training on augumented user 2643 12/50 current_auc = 0.6325023084025855
User 2643 AUC after training: 0.6315789473684211
User 2643 does not improve AUC. Reverting changes.
Training on augumented user 109337 13/50 current_auc = 0.6325023084025855
User 109337 AUC after training: 0.6343490304709142
User 109337 improves AUC. Keeping the model.
Training on augumented user 130948 14/50 current_auc = 0.6343490304709142
User 130948 AUC after training: 0.6334256694367498
User 130948 does not improve AUC. Reverting changes.
Training on augumented user 5100 15/50 current_auc = 0.6343490304709142
User 5100 AUC after training: 0.6315789473684211
User 5100 does not improve AUC. Reverting changes.
Training on augumented user 21217 16/50 current_auc = 0.6343490304709142
User 21217 AUC after training: 0.6334256694367498
User 21217 does not improve AUC. Reverting changes.
Training on augumented user 38537 17/50 current_auc = 0.6343490304709142
User 38537 AUC after training: 0.6334256694367498
User 38537 does not improve AUC. Reverting changes.
Training on augumented user 128216 18/50 current_auc = 0.6343490304709142
User 128216 AUC after training: 0.6325023084025855
User 128216 does not improve AUC. Reverting changes.
Training on augumented user 113212 19/50 current_auc = 0.6343490304709142
User 113212 AUC after training: 0.6334256694367498
User 113212 does not improve AUC. Reverting changes.
Training on augumented user 37156 20/50 current_auc = 0.6343490304709142
User 37156 AUC after training: 0.6325023084025855
User 37156 does not improve AUC. Reverting changes.
Training on augumented user 29993 21/50 current_auc = 0.6343490304709142
User 29993 AUC after training: 0.6343490304709142
User 29993 does not improve AUC. Reverting changes.
Training on augumented user 121607 22/50 current_auc = 0.6343490304709142
User 121607 AUC after training: 0.6334256694367498
User 121607 does not improve AUC. Reverting changes.
Training on augumented user 87948 23/50 current_auc = 0.6343490304709142
User 87948 AUC after training: 0.631578947368421
User 87948 does not improve AUC. Reverting changes.
Training on augumented user 54029 24/50 current_auc = 0.6343490304709142
User 54029 AUC after training: 0.6334256694367498
User 54029 does not improve AUC. Reverting changes.
Training on augumented user 51643 25/50 current_auc = 0.6343490304709142
User 51643 AUC after training: 0.631578947368421
User 51643 does not improve AUC. Reverting changes.
Training on augumented user 108775 26/50 current_auc = 0.6343490304709142
User 108775 AUC after training: 0.6334256694367498
User 108775 does not improve AUC. Reverting changes.
Training on augumented user 102048 27/50 current_auc = 0.6343490304709142
User 102048 AUC after training: 0.6315789473684211
User 102048 does not improve AUC. Reverting changes.
Training on augumented user 50117 28/50 current_auc = 0.6343490304709142
User 50117 AUC after training: 0.6325023084025855
User 50117 does not improve AUC. Reverting changes.
Training on augumented user 21928 29/50 current_auc = 0.6343490304709142
User 21928 AUC after training: 0.6343490304709142
User 21928 does not improve AUC. Reverting changes.
Training on augumented user 131165 30/50 current_auc = 0.6343490304709142
User 131165 AUC after training: 0.6334256694367498
User 131165 does not improve AUC. Reverting changes.
Training on augumented user 122257 31/50 current_auc = 0.6343490304709142
User 122257 AUC after training: 0.6325023084025855
User 122257 does not improve AUC. Reverting changes.
Training on augumented user 80715 32/50 current_auc = 0.6343490304709142
User 80715 AUC after training: 0.6334256694367498
User 80715 does not improve AUC. Reverting changes.
Training on augumented user 37301 33/50 current_auc = 0.6343490304709142
User 37301 AUC after training: 0.6325023084025855
User 37301 does not improve AUC. Reverting changes.
Training on augumented user 111243 34/50 current_auc = 0.6343490304709142
User 111243 AUC after training: 0.6334256694367498
User 111243 does not improve AUC. Reverting changes.
Training on augumented user 52661 35/50 current_auc = 0.6343490304709142
User 52661 AUC after training: 0.6315789473684211
User 52661 does not improve AUC. Reverting changes.
Training on augumented user 136619 36/50 current_auc = 0.6343490304709142
User 136619 AUC after training: 0.6343490304709142
User 136619 does not improve AUC. Reverting changes.
Training on augumented user 86440 37/50 current_auc = 0.6343490304709142
User 86440 AUC after training: 0.6325023084025855
User 86440 does not improve AUC. Reverting changes.
Training on augumented user 48446 38/50 current_auc = 0.6343490304709142
User 48446 AUC after training: 0.6306555863342568
User 48446 does not improve AUC. Reverting changes.
Training on augumented user 77988 39/50 current_auc = 0.6343490304709142
User 77988 AUC after training: 0.631578947368421
User 77988 does not improve AUC. Reverting changes.
Training on augumented user 46350 40/50 current_auc = 0.6343490304709142
User 46350 AUC after training: 0.6343490304709142
User 46350 does not improve AUC. Reverting changes.
Training on augumented user 89055 41/50 current_auc = 0.6343490304709142
User 89055 AUC after training: 0.6334256694367497
User 89055 does not improve AUC. Reverting changes.
Training on augumented user 121452 42/50 current_auc = 0.6343490304709142
User 121452 AUC after training: 0.6334256694367498
User 121452 does not improve AUC. Reverting changes.
Training on augumented user 135744 43/50 current_auc = 0.6343490304709142
User 135744 AUC after training: 0.6334256694367498
User 135744 does not improve AUC. Reverting changes.
Training on augumented user 10898 44/50 current_auc = 0.6343490304709142
User 10898 AUC after training: 0.6343490304709142
User 10898 does not improve AUC. Reverting changes.
Training on augumented user 129354 45/50 current_auc = 0.6343490304709142
User 129354 AUC after training: 0.6343490304709142
User 129354 does not improve AUC. Reverting changes.
Training on augumented user 19780 46/50 current_auc = 0.6343490304709142
User 19780 AUC after training: 0.6325023084025855
User 19780 does not improve AUC. Reverting changes.
Training on augumented user 43221 47/50 current_auc = 0.6343490304709142
User 43221 AUC after training: 0.6325023084025855
User 43221 does not improve AUC. Reverting changes.
Training on augumented user 94825 48/50 current_auc = 0.6343490304709142
User 94825 AUC after training: 0.6325023084025855
User 94825 does not improve AUC. Reverting changes.
Training on augumented user 96609 49/50 current_auc = 0.6343490304709142
User 96609 AUC after training: 0.6315789473684211
User 96609 does not improve AUC. Reverting changes.
[2024-12-02 19:40:47.643746] start test user 87838 228/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:40:48.180374] start test user 87838 228/568 recall augumented users by random, augumented_users = [30498, 70800, 8052, 16600, 95238, 26108, 71527, 59938, 81569, 84739, 12425, 76133, 116352, 120, 56818, 100767, 136393, 30319, 124716, 37232, 18213, 127141, 80177, 137080, 105131, 134049, 34602, 76439, 44429, 50555, 52767, 28006, 14241, 30352, 84024, 134597, 68360, 11268, 83458, 118907, 30547, 46549, 112341, 93556, 31545, 111405, 56650, 914, 16855, 37940]
[2024-12-02 19:40:48.195138] user = 87838 Cloud 228/568
[2024-12-02 19:40:48.205384] user = 87838 Local 228/568
[2024-12-02 19:40:48.253367] user = 87838 Local+ 228/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:40:50.270395] user = 87838 MPDA- 228/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.45454545454545453
Training on augumented user 30498 0/50 current_auc = 0.45454545454545453
User 30498 AUC after training: 0.45454545454545453
User 30498 does not improve AUC. Reverting changes.
Training on augumented user 70800 1/50 current_auc = 0.45454545454545453
User 70800 AUC after training: 0.45454545454545453
User 70800 does not improve AUC. Reverting changes.
Training on augumented user 8052 2/50 current_auc = 0.45454545454545453
User 8052 AUC after training: 0.45454545454545453
User 8052 does not improve AUC. Reverting changes.
Training on augumented user 16600 3/50 current_auc = 0.45454545454545453
User 16600 AUC after training: 0.45454545454545453
User 16600 does not improve AUC. Reverting changes.
Training on augumented user 95238 4/50 current_auc = 0.45454545454545453
User 95238 AUC after training: 0.45454545454545453
User 95238 does not improve AUC. Reverting changes.
Training on augumented user 26108 5/50 current_auc = 0.45454545454545453
User 26108 AUC after training: 0.40909090909090906
User 26108 does not improve AUC. Reverting changes.
Training on augumented user 71527 6/50 current_auc = 0.45454545454545453
User 71527 AUC after training: 0.40909090909090906
User 71527 does not improve AUC. Reverting changes.
Training on augumented user 59938 7/50 current_auc = 0.45454545454545453
User 59938 AUC after training: 0.45454545454545453
User 59938 does not improve AUC. Reverting changes.
Training on augumented user 81569 8/50 current_auc = 0.45454545454545453
User 81569 AUC after training: 0.45454545454545453
User 81569 does not improve AUC. Reverting changes.
Training on augumented user 84739 9/50 current_auc = 0.45454545454545453
User 84739 AUC after training: 0.45454545454545453
User 84739 does not improve AUC. Reverting changes.
Training on augumented user 12425 10/50 current_auc = 0.45454545454545453
User 12425 AUC after training: 0.45454545454545453
User 12425 does not improve AUC. Reverting changes.
Training on augumented user 76133 11/50 current_auc = 0.45454545454545453
User 76133 AUC after training: 0.40909090909090906
User 76133 does not improve AUC. Reverting changes.
Training on augumented user 116352 12/50 current_auc = 0.45454545454545453
User 116352 AUC after training: 0.45454545454545453
User 116352 does not improve AUC. Reverting changes.
Training on augumented user 120 13/50 current_auc = 0.45454545454545453
User 120 AUC after training: 0.45454545454545453
User 120 does not improve AUC. Reverting changes.
Training on augumented user 56818 14/50 current_auc = 0.45454545454545453
User 56818 AUC after training: 0.40909090909090906
User 56818 does not improve AUC. Reverting changes.
Training on augumented user 100767 15/50 current_auc = 0.45454545454545453
User 100767 AUC after training: 0.45454545454545453
User 100767 does not improve AUC. Reverting changes.
Training on augumented user 136393 16/50 current_auc = 0.45454545454545453
User 136393 AUC after training: 0.45454545454545453
User 136393 does not improve AUC. Reverting changes.
Training on augumented user 30319 17/50 current_auc = 0.45454545454545453
User 30319 AUC after training: 0.40909090909090906
User 30319 does not improve AUC. Reverting changes.
Training on augumented user 124716 18/50 current_auc = 0.45454545454545453
User 124716 AUC after training: 0.40909090909090906
User 124716 does not improve AUC. Reverting changes.
Training on augumented user 37232 19/50 current_auc = 0.45454545454545453
User 37232 AUC after training: 0.45454545454545453
User 37232 does not improve AUC. Reverting changes.
Training on augumented user 18213 20/50 current_auc = 0.45454545454545453
User 18213 AUC after training: 0.45454545454545453
User 18213 does not improve AUC. Reverting changes.
Training on augumented user 127141 21/50 current_auc = 0.45454545454545453
User 127141 AUC after training: 0.45454545454545453
User 127141 does not improve AUC. Reverting changes.
Training on augumented user 80177 22/50 current_auc = 0.45454545454545453
User 80177 AUC after training: 0.45454545454545453
User 80177 does not improve AUC. Reverting changes.
Training on augumented user 137080 23/50 current_auc = 0.45454545454545453
User 137080 AUC after training: 0.45454545454545453
User 137080 does not improve AUC. Reverting changes.
Training on augumented user 105131 24/50 current_auc = 0.45454545454545453
User 105131 AUC after training: 0.36363636363636365
User 105131 does not improve AUC. Reverting changes.
Training on augumented user 134049 25/50 current_auc = 0.45454545454545453
User 134049 AUC after training: 0.45454545454545453
User 134049 does not improve AUC. Reverting changes.
Training on augumented user 34602 26/50 current_auc = 0.45454545454545453
User 34602 AUC after training: 0.40909090909090906
User 34602 does not improve AUC. Reverting changes.
Training on augumented user 76439 27/50 current_auc = 0.45454545454545453
User 76439 AUC after training: 0.40909090909090906
User 76439 does not improve AUC. Reverting changes.
Training on augumented user 44429 28/50 current_auc = 0.45454545454545453
User 44429 AUC after training: 0.40909090909090906
User 44429 does not improve AUC. Reverting changes.
Training on augumented user 50555 29/50 current_auc = 0.45454545454545453
User 50555 AUC after training: 0.45454545454545453
User 50555 does not improve AUC. Reverting changes.
Training on augumented user 52767 30/50 current_auc = 0.45454545454545453
User 52767 AUC after training: 0.45454545454545453
User 52767 does not improve AUC. Reverting changes.
Training on augumented user 28006 31/50 current_auc = 0.45454545454545453
User 28006 AUC after training: 0.45454545454545453
User 28006 does not improve AUC. Reverting changes.
Training on augumented user 14241 32/50 current_auc = 0.45454545454545453
User 14241 AUC after training: 0.45454545454545453
User 14241 does not improve AUC. Reverting changes.
Training on augumented user 30352 33/50 current_auc = 0.45454545454545453
User 30352 AUC after training: 0.45454545454545453
User 30352 does not improve AUC. Reverting changes.
Training on augumented user 84024 34/50 current_auc = 0.45454545454545453
User 84024 AUC after training: 0.40909090909090906
User 84024 does not improve AUC. Reverting changes.
Training on augumented user 134597 35/50 current_auc = 0.45454545454545453
User 134597 AUC after training: 0.45454545454545453
User 134597 does not improve AUC. Reverting changes.
Training on augumented user 68360 36/50 current_auc = 0.45454545454545453
User 68360 AUC after training: 0.40909090909090906
User 68360 does not improve AUC. Reverting changes.
Training on augumented user 11268 37/50 current_auc = 0.45454545454545453
User 11268 AUC after training: 0.40909090909090906
User 11268 does not improve AUC. Reverting changes.
Training on augumented user 83458 38/50 current_auc = 0.45454545454545453
User 83458 AUC after training: 0.40909090909090906
User 83458 does not improve AUC. Reverting changes.
Training on augumented user 118907 39/50 current_auc = 0.45454545454545453
User 118907 AUC after training: 0.45454545454545453
User 118907 does not improve AUC. Reverting changes.
Training on augumented user 30547 40/50 current_auc = 0.45454545454545453
User 30547 AUC after training: 0.45454545454545453
User 30547 does not improve AUC. Reverting changes.
Training on augumented user 46549 41/50 current_auc = 0.45454545454545453
User 46549 AUC after training: 0.45454545454545453
User 46549 does not improve AUC. Reverting changes.
Training on augumented user 112341 42/50 current_auc = 0.45454545454545453
User 112341 AUC after training: 0.40909090909090906
User 112341 does not improve AUC. Reverting changes.
Training on augumented user 93556 43/50 current_auc = 0.45454545454545453
User 93556 AUC after training: 0.45454545454545453
User 93556 does not improve AUC. Reverting changes.
Training on augumented user 31545 44/50 current_auc = 0.45454545454545453
User 31545 AUC after training: 0.45454545454545453
User 31545 does not improve AUC. Reverting changes.
Training on augumented user 111405 45/50 current_auc = 0.45454545454545453
User 111405 AUC after training: 0.45454545454545453
User 111405 does not improve AUC. Reverting changes.
Training on augumented user 56650 46/50 current_auc = 0.45454545454545453
User 56650 AUC after training: 0.40909090909090906
User 56650 does not improve AUC. Reverting changes.
Training on augumented user 914 47/50 current_auc = 0.45454545454545453
User 914 AUC after training: 0.45454545454545453
User 914 does not improve AUC. Reverting changes.
Training on augumented user 16855 48/50 current_auc = 0.45454545454545453
User 16855 AUC after training: 0.45454545454545453
User 16855 does not improve AUC. Reverting changes.
Training on augumented user 37940 49/50 current_auc = 0.45454545454545453
User 37940 AUC after training: 0.45454545454545453
User 37940 does not improve AUC. Reverting changes.
[2024-12-02 19:41:17.824517] start test user 87931 229/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:41:18.580852] start test user 87931 229/568 recall augumented users by random, augumented_users = [89183, 6033, 65482, 24004, 95138, 61395, 137038, 7698, 49301, 31585, 14379, 108312, 130183, 37060, 108465, 64175, 32874, 31127, 87275, 22193, 83836, 42724, 130872, 73858, 75078, 56875, 72641, 55607, 95508, 60168, 1186, 89892, 124706, 75567, 127045, 65153, 108708, 29362, 78276, 97317, 6116, 113907, 20650, 21096, 62696, 36171, 125868, 74566, 77678, 133260]
[2024-12-02 19:41:18.618401] user = 87931 Cloud 229/568
[2024-12-02 19:41:18.634371] user = 87931 Local 229/568
[2024-12-02 19:41:18.815372] user = 87931 Local+ 229/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:41:21.160084] user = 87931 MPDA- 229/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5672119487908962
Training on augumented user 89183 0/50 current_auc = 0.5672119487908962
User 89183 AUC after training: 0.5665007112375533
User 89183 does not improve AUC. Reverting changes.
Training on augumented user 6033 1/50 current_auc = 0.5672119487908962
User 6033 AUC after training: 0.5665007112375534
User 6033 does not improve AUC. Reverting changes.
Training on augumented user 65482 2/50 current_auc = 0.5672119487908962
User 65482 AUC after training: 0.567923186344239
User 65482 improves AUC. Keeping the model.
Training on augumented user 24004 3/50 current_auc = 0.567923186344239
User 24004 AUC after training: 0.5650782361308677
User 24004 does not improve AUC. Reverting changes.
Training on augumented user 95138 4/50 current_auc = 0.567923186344239
User 95138 AUC after training: 0.567923186344239
User 95138 does not improve AUC. Reverting changes.
Training on augumented user 61395 5/50 current_auc = 0.567923186344239
User 61395 AUC after training: 0.567923186344239
User 61395 does not improve AUC. Reverting changes.
Training on augumented user 137038 6/50 current_auc = 0.567923186344239
User 137038 AUC after training: 0.5668563300142248
User 137038 does not improve AUC. Reverting changes.
Training on augumented user 7698 7/50 current_auc = 0.567923186344239
User 7698 AUC after training: 0.5682788051209103
User 7698 improves AUC. Keeping the model.
Training on augumented user 49301 8/50 current_auc = 0.5682788051209103
User 49301 AUC after training: 0.5672119487908962
User 49301 does not improve AUC. Reverting changes.
Training on augumented user 31585 9/50 current_auc = 0.5682788051209103
User 31585 AUC after training: 0.5657894736842105
User 31585 does not improve AUC. Reverting changes.
Training on augumented user 14379 10/50 current_auc = 0.5682788051209103
User 14379 AUC after training: 0.5686344238975818
User 14379 improves AUC. Keeping the model.
Training on augumented user 108312 11/50 current_auc = 0.5686344238975818
User 108312 AUC after training: 0.5672119487908962
User 108312 does not improve AUC. Reverting changes.
Training on augumented user 130183 12/50 current_auc = 0.5686344238975818
User 130183 AUC after training: 0.5675675675675675
User 130183 does not improve AUC. Reverting changes.
Training on augumented user 37060 13/50 current_auc = 0.5686344238975818
User 37060 AUC after training: 0.5686344238975819
User 37060 improves AUC. Keeping the model.
Training on augumented user 108465 14/50 current_auc = 0.5686344238975819
User 108465 AUC after training: 0.5672119487908962
User 108465 does not improve AUC. Reverting changes.
Training on augumented user 64175 15/50 current_auc = 0.5686344238975819
User 64175 AUC after training: 0.5643669985775249
User 64175 does not improve AUC. Reverting changes.
Training on augumented user 32874 16/50 current_auc = 0.5686344238975819
User 32874 AUC after training: 0.5668563300142248
User 32874 does not improve AUC. Reverting changes.
Training on augumented user 31127 17/50 current_auc = 0.5686344238975819
User 31127 AUC after training: 0.5682788051209104
User 31127 does not improve AUC. Reverting changes.
Training on augumented user 87275 18/50 current_auc = 0.5686344238975819
User 87275 AUC after training: 0.567923186344239
User 87275 does not improve AUC. Reverting changes.
Training on augumented user 22193 19/50 current_auc = 0.5686344238975819
User 22193 AUC after training: 0.5668563300142248
User 22193 does not improve AUC. Reverting changes.
Training on augumented user 83836 20/50 current_auc = 0.5686344238975819
User 83836 AUC after training: 0.5672119487908962
User 83836 does not improve AUC. Reverting changes.
Training on augumented user 42724 21/50 current_auc = 0.5686344238975819
User 42724 AUC after training: 0.5682788051209104
User 42724 does not improve AUC. Reverting changes.
Training on augumented user 130872 22/50 current_auc = 0.5686344238975819
User 130872 AUC after training: 0.5679231863442389
User 130872 does not improve AUC. Reverting changes.
Training on augumented user 73858 23/50 current_auc = 0.5686344238975819
User 73858 AUC after training: 0.5675675675675677
User 73858 does not improve AUC. Reverting changes.
Training on augumented user 75078 24/50 current_auc = 0.5686344238975819
User 75078 AUC after training: 0.5682788051209104
User 75078 does not improve AUC. Reverting changes.
Training on augumented user 56875 25/50 current_auc = 0.5686344238975819
User 56875 AUC after training: 0.5689900426742532
User 56875 improves AUC. Keeping the model.
Training on augumented user 72641 26/50 current_auc = 0.5689900426742532
User 72641 AUC after training: 0.5675675675675675
User 72641 does not improve AUC. Reverting changes.
Training on augumented user 55607 27/50 current_auc = 0.5689900426742532
User 55607 AUC after training: 0.5689900426742532
User 55607 does not improve AUC. Reverting changes.
Training on augumented user 95508 28/50 current_auc = 0.5689900426742532
User 95508 AUC after training: 0.5675675675675675
User 95508 does not improve AUC. Reverting changes.
Training on augumented user 60168 29/50 current_auc = 0.5689900426742532
User 60168 AUC after training: 0.5689900426742532
User 60168 does not improve AUC. Reverting changes.
Training on augumented user 1186 30/50 current_auc = 0.5689900426742532
User 1186 AUC after training: 0.5675675675675677
User 1186 does not improve AUC. Reverting changes.
Training on augumented user 89892 31/50 current_auc = 0.5689900426742532
User 89892 AUC after training: 0.5689900426742532
User 89892 does not improve AUC. Reverting changes.
Training on augumented user 124706 32/50 current_auc = 0.5689900426742532
User 124706 AUC after training: 0.5682788051209104
User 124706 does not improve AUC. Reverting changes.
Training on augumented user 75567 33/50 current_auc = 0.5689900426742532
User 75567 AUC after training: 0.5668563300142248
User 75567 does not improve AUC. Reverting changes.
Training on augumented user 127045 34/50 current_auc = 0.5689900426742532
User 127045 AUC after training: 0.5675675675675675
User 127045 does not improve AUC. Reverting changes.
Training on augumented user 65153 35/50 current_auc = 0.5689900426742532
User 65153 AUC after training: 0.5665007112375533
User 65153 does not improve AUC. Reverting changes.
Training on augumented user 108708 36/50 current_auc = 0.5689900426742532
User 108708 AUC after training: 0.5693456614509247
User 108708 improves AUC. Keeping the model.
Training on augumented user 29362 37/50 current_auc = 0.5693456614509247
User 29362 AUC after training: 0.569701280227596
User 29362 improves AUC. Keeping the model.
Training on augumented user 78276 38/50 current_auc = 0.569701280227596
User 78276 AUC after training: 0.567923186344239
User 78276 does not improve AUC. Reverting changes.
Training on augumented user 97317 39/50 current_auc = 0.569701280227596
User 97317 AUC after training: 0.5693456614509247
User 97317 does not improve AUC. Reverting changes.
Training on augumented user 6116 40/50 current_auc = 0.569701280227596
User 6116 AUC after training: 0.5693456614509247
User 6116 does not improve AUC. Reverting changes.
Training on augumented user 113907 41/50 current_auc = 0.569701280227596
User 113907 AUC after training: 0.5704125177809388
User 113907 improves AUC. Keeping the model.
Training on augumented user 20650 42/50 current_auc = 0.5704125177809388
User 20650 AUC after training: 0.5689900426742532
User 20650 does not improve AUC. Reverting changes.
Training on augumented user 21096 43/50 current_auc = 0.5704125177809388
User 21096 AUC after training: 0.5668563300142248
User 21096 does not improve AUC. Reverting changes.
Training on augumented user 62696 44/50 current_auc = 0.5704125177809388
User 62696 AUC after training: 0.5693456614509247
User 62696 does not improve AUC. Reverting changes.
Training on augumented user 36171 45/50 current_auc = 0.5704125177809388
User 36171 AUC after training: 0.5693456614509247
User 36171 does not improve AUC. Reverting changes.
Training on augumented user 125868 46/50 current_auc = 0.5704125177809388
User 125868 AUC after training: 0.569701280227596
User 125868 does not improve AUC. Reverting changes.
Training on augumented user 74566 47/50 current_auc = 0.5704125177809388
User 74566 AUC after training: 0.5700568990042674
User 74566 does not improve AUC. Reverting changes.
Training on augumented user 77678 48/50 current_auc = 0.5704125177809388
User 77678 AUC after training: 0.5711237553342817
User 77678 improves AUC. Keeping the model.
Training on augumented user 133260 49/50 current_auc = 0.5711237553342817
User 133260 AUC after training: 0.5700568990042675
User 133260 does not improve AUC. Reverting changes.
[2024-12-02 19:41:53.677950] start test user 87942 230/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:41:54.343876] start test user 87942 230/568 recall augumented users by random, augumented_users = [115839, 62691, 120012, 136970, 50962, 61007, 90418, 131558, 13739, 124511, 82044, 88848, 130250, 7926, 87963, 77433, 46863, 66753, 19458, 59158, 86431, 77495, 91625, 53617, 70002, 114159, 56711, 81989, 59138, 48171, 58546, 63882, 38683, 19905, 133344, 70636, 83733, 27531, 105800, 23962, 130976, 60306, 4147, 55118, 17246, 57818, 102962, 128661, 31545, 77713]
[2024-12-02 19:41:54.394451] user = 87942 Cloud 230/568
[2024-12-02 19:41:54.435929] user = 87942 Local 230/568
[2024-12-02 19:41:54.673679] user = 87942 Local+ 230/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:41:57.923592] user = 87942 MPDA- 230/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5685483870967742
Training on augumented user 115839 0/50 current_auc = 0.5685483870967742
User 115839 AUC after training: 0.5685483870967742
User 115839 does not improve AUC. Reverting changes.
Training on augumented user 62691 1/50 current_auc = 0.5685483870967742
User 62691 AUC after training: 0.5685483870967742
User 62691 does not improve AUC. Reverting changes.
Training on augumented user 120012 2/50 current_auc = 0.5685483870967742
User 120012 AUC after training: 0.5766129032258065
User 120012 improves AUC. Keeping the model.
Training on augumented user 136970 3/50 current_auc = 0.5766129032258065
User 136970 AUC after training: 0.5806451612903225
User 136970 improves AUC. Keeping the model.
Training on augumented user 50962 4/50 current_auc = 0.5806451612903225
User 50962 AUC after training: 0.5766129032258065
User 50962 does not improve AUC. Reverting changes.
Training on augumented user 61007 5/50 current_auc = 0.5806451612903225
User 61007 AUC after training: 0.5806451612903225
User 61007 does not improve AUC. Reverting changes.
Training on augumented user 90418 6/50 current_auc = 0.5806451612903225
User 90418 AUC after training: 0.5725806451612903
User 90418 does not improve AUC. Reverting changes.
Training on augumented user 131558 7/50 current_auc = 0.5806451612903225
User 131558 AUC after training: 0.5725806451612903
User 131558 does not improve AUC. Reverting changes.
Training on augumented user 13739 8/50 current_auc = 0.5806451612903225
User 13739 AUC after training: 0.5806451612903225
User 13739 does not improve AUC. Reverting changes.
Training on augumented user 124511 9/50 current_auc = 0.5806451612903225
User 124511 AUC after training: 0.5766129032258065
User 124511 does not improve AUC. Reverting changes.
Training on augumented user 82044 10/50 current_auc = 0.5806451612903225
User 82044 AUC after training: 0.5685483870967742
User 82044 does not improve AUC. Reverting changes.
Training on augumented user 88848 11/50 current_auc = 0.5806451612903225
User 88848 AUC after training: 0.5725806451612903
User 88848 does not improve AUC. Reverting changes.
Training on augumented user 130250 12/50 current_auc = 0.5806451612903225
User 130250 AUC after training: 0.5766129032258065
User 130250 does not improve AUC. Reverting changes.
Training on augumented user 7926 13/50 current_auc = 0.5806451612903225
User 7926 AUC after training: 0.5806451612903225
User 7926 does not improve AUC. Reverting changes.
Training on augumented user 87963 14/50 current_auc = 0.5806451612903225
User 87963 AUC after training: 0.5846774193548387
User 87963 improves AUC. Keeping the model.
Training on augumented user 77433 15/50 current_auc = 0.5846774193548387
User 77433 AUC after training: 0.5725806451612903
User 77433 does not improve AUC. Reverting changes.
Training on augumented user 46863 16/50 current_auc = 0.5846774193548387
User 46863 AUC after training: 0.5685483870967742
User 46863 does not improve AUC. Reverting changes.
Training on augumented user 66753 17/50 current_auc = 0.5846774193548387
User 66753 AUC after training: 0.5846774193548387
User 66753 does not improve AUC. Reverting changes.
Training on augumented user 19458 18/50 current_auc = 0.5846774193548387
User 19458 AUC after training: 0.5766129032258065
User 19458 does not improve AUC. Reverting changes.
Training on augumented user 59158 19/50 current_auc = 0.5846774193548387
User 59158 AUC after training: 0.5806451612903225
User 59158 does not improve AUC. Reverting changes.
Training on augumented user 86431 20/50 current_auc = 0.5846774193548387
User 86431 AUC after training: 0.5806451612903225
User 86431 does not improve AUC. Reverting changes.
Training on augumented user 77495 21/50 current_auc = 0.5846774193548387
User 77495 AUC after training: 0.5685483870967742
User 77495 does not improve AUC. Reverting changes.
Training on augumented user 91625 22/50 current_auc = 0.5846774193548387
User 91625 AUC after training: 0.5725806451612903
User 91625 does not improve AUC. Reverting changes.
Training on augumented user 53617 23/50 current_auc = 0.5846774193548387
User 53617 AUC after training: 0.5846774193548387
User 53617 does not improve AUC. Reverting changes.
Training on augumented user 70002 24/50 current_auc = 0.5846774193548387
User 70002 AUC after training: 0.5806451612903225
User 70002 does not improve AUC. Reverting changes.
Training on augumented user 114159 25/50 current_auc = 0.5846774193548387
User 114159 AUC after training: 0.5806451612903225
User 114159 does not improve AUC. Reverting changes.
Training on augumented user 56711 26/50 current_auc = 0.5846774193548387
User 56711 AUC after training: 0.5725806451612903
User 56711 does not improve AUC. Reverting changes.
Training on augumented user 81989 27/50 current_auc = 0.5846774193548387
User 81989 AUC after training: 0.5846774193548387
User 81989 does not improve AUC. Reverting changes.
Training on augumented user 59138 28/50 current_auc = 0.5846774193548387
User 59138 AUC after training: 0.5766129032258065
User 59138 does not improve AUC. Reverting changes.
Training on augumented user 48171 29/50 current_auc = 0.5846774193548387
User 48171 AUC after training: 0.5685483870967742
User 48171 does not improve AUC. Reverting changes.
Training on augumented user 58546 30/50 current_auc = 0.5846774193548387
User 58546 AUC after training: 0.5806451612903225
User 58546 does not improve AUC. Reverting changes.
Training on augumented user 63882 31/50 current_auc = 0.5846774193548387
User 63882 AUC after training: 0.5806451612903225
User 63882 does not improve AUC. Reverting changes.
Training on augumented user 38683 32/50 current_auc = 0.5846774193548387
User 38683 AUC after training: 0.5846774193548387
User 38683 does not improve AUC. Reverting changes.
Training on augumented user 19905 33/50 current_auc = 0.5846774193548387
User 19905 AUC after training: 0.5806451612903225
User 19905 does not improve AUC. Reverting changes.
Training on augumented user 133344 34/50 current_auc = 0.5846774193548387
User 133344 AUC after training: 0.5846774193548387
User 133344 does not improve AUC. Reverting changes.
Training on augumented user 70636 35/50 current_auc = 0.5846774193548387
User 70636 AUC after training: 0.5685483870967742
User 70636 does not improve AUC. Reverting changes.
Training on augumented user 83733 36/50 current_auc = 0.5846774193548387
User 83733 AUC after training: 0.5806451612903225
User 83733 does not improve AUC. Reverting changes.
Training on augumented user 27531 37/50 current_auc = 0.5846774193548387
User 27531 AUC after training: 0.5806451612903225
User 27531 does not improve AUC. Reverting changes.
Training on augumented user 105800 38/50 current_auc = 0.5846774193548387
User 105800 AUC after training: 0.5806451612903225
User 105800 does not improve AUC. Reverting changes.
Training on augumented user 23962 39/50 current_auc = 0.5846774193548387
User 23962 AUC after training: 0.5766129032258065
User 23962 does not improve AUC. Reverting changes.
Training on augumented user 130976 40/50 current_auc = 0.5846774193548387
User 130976 AUC after training: 0.5766129032258065
User 130976 does not improve AUC. Reverting changes.
Training on augumented user 60306 41/50 current_auc = 0.5846774193548387
User 60306 AUC after training: 0.5806451612903225
User 60306 does not improve AUC. Reverting changes.
Training on augumented user 4147 42/50 current_auc = 0.5846774193548387
User 4147 AUC after training: 0.5846774193548387
User 4147 does not improve AUC. Reverting changes.
Training on augumented user 55118 43/50 current_auc = 0.5846774193548387
User 55118 AUC after training: 0.5887096774193548
User 55118 improves AUC. Keeping the model.
Training on augumented user 17246 44/50 current_auc = 0.5887096774193548
User 17246 AUC after training: 0.5846774193548387
User 17246 does not improve AUC. Reverting changes.
Training on augumented user 57818 45/50 current_auc = 0.5887096774193548
User 57818 AUC after training: 0.5806451612903225
User 57818 does not improve AUC. Reverting changes.
Training on augumented user 102962 46/50 current_auc = 0.5887096774193548
User 102962 AUC after training: 0.5887096774193548
User 102962 does not improve AUC. Reverting changes.
Training on augumented user 128661 47/50 current_auc = 0.5887096774193548
User 128661 AUC after training: 0.5846774193548387
User 128661 does not improve AUC. Reverting changes.
Training on augumented user 31545 48/50 current_auc = 0.5887096774193548
User 31545 AUC after training: 0.5887096774193548
User 31545 does not improve AUC. Reverting changes.
Training on augumented user 77713 49/50 current_auc = 0.5887096774193548
User 77713 AUC after training: 0.5846774193548387
User 77713 does not improve AUC. Reverting changes.
[2024-12-02 19:42:24.630733] start test user 87954 231/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:42:25.464736] start test user 87954 231/568 recall augumented users by random, augumented_users = [121862, 13584, 118092, 5009, 127089, 45971, 15483, 120749, 127671, 130583, 63233, 131777, 37456, 109943, 68258, 23891, 11207, 57563, 45962, 138090, 133484, 50740, 109063, 111476, 120677, 87330, 65051, 98070, 97312, 43751, 60281, 54436, 36514, 6659, 137496, 41895, 29221, 124841, 116202, 87715, 91861, 93997, 47022, 58652, 93747, 11468, 56455, 15336, 16447, 30795]
[2024-12-02 19:42:25.504143] user = 87954 Cloud 231/568
[2024-12-02 19:42:25.532616] user = 87954 Local 231/568
[2024-12-02 19:42:25.756946] user = 87954 Local+ 231/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:42:28.378970] user = 87954 MPDA- 231/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5134759759759759
Training on augumented user 121862 0/50 current_auc = 0.5134759759759759
User 121862 AUC after training: 0.5112612612612613
User 121862 does not improve AUC. Reverting changes.
Training on augumented user 13584 1/50 current_auc = 0.5134759759759759
User 13584 AUC after training: 0.511036036036036
User 13584 does not improve AUC. Reverting changes.
Training on augumented user 118092 2/50 current_auc = 0.5134759759759759
User 118092 AUC after training: 0.5128378378378378
User 118092 does not improve AUC. Reverting changes.
Training on augumented user 5009 3/50 current_auc = 0.5134759759759759
User 5009 AUC after training: 0.5105105105105106
User 5009 does not improve AUC. Reverting changes.
Training on augumented user 127089 4/50 current_auc = 0.5134759759759759
User 127089 AUC after training: 0.5137387387387388
User 127089 improves AUC. Keeping the model.
Training on augumented user 45971 5/50 current_auc = 0.5137387387387388
User 45971 AUC after training: 0.5096096096096097
User 45971 does not improve AUC. Reverting changes.
Training on augumented user 15483 6/50 current_auc = 0.5137387387387388
User 15483 AUC after training: 0.5117867867867868
User 15483 does not improve AUC. Reverting changes.
Training on augumented user 120749 7/50 current_auc = 0.5137387387387388
User 120749 AUC after training: 0.5162912912912914
User 120749 improves AUC. Keeping the model.
Training on augumented user 127671 8/50 current_auc = 0.5162912912912914
User 127671 AUC after training: 0.5181681681681681
User 127671 improves AUC. Keeping the model.
Training on augumented user 130583 9/50 current_auc = 0.5181681681681681
User 130583 AUC after training: 0.5186186186186186
User 130583 improves AUC. Keeping the model.
Training on augumented user 63233 10/50 current_auc = 0.5186186186186186
User 63233 AUC after training: 0.5184684684684685
User 63233 does not improve AUC. Reverting changes.
Training on augumented user 131777 11/50 current_auc = 0.5186186186186186
User 131777 AUC after training: 0.517942942942943
User 131777 does not improve AUC. Reverting changes.
Training on augumented user 37456 12/50 current_auc = 0.5186186186186186
User 37456 AUC after training: 0.5144144144144145
User 37456 does not improve AUC. Reverting changes.
Training on augumented user 109943 13/50 current_auc = 0.5186186186186186
User 109943 AUC after training: 0.5167417417417417
User 109943 does not improve AUC. Reverting changes.
Training on augumented user 68258 14/50 current_auc = 0.5186186186186186
User 68258 AUC after training: 0.5188438438438439
User 68258 improves AUC. Keeping the model.
Training on augumented user 23891 15/50 current_auc = 0.5188438438438439
User 23891 AUC after training: 0.5159159159159159
User 23891 does not improve AUC. Reverting changes.
Training on augumented user 11207 16/50 current_auc = 0.5188438438438439
User 11207 AUC after training: 0.5194444444444444
User 11207 improves AUC. Keeping the model.
Training on augumented user 57563 17/50 current_auc = 0.5194444444444444
User 57563 AUC after training: 0.5180180180180181
User 57563 does not improve AUC. Reverting changes.
Training on augumented user 45962 18/50 current_auc = 0.5194444444444444
User 45962 AUC after training: 0.516966966966967
User 45962 does not improve AUC. Reverting changes.
Training on augumented user 138090 19/50 current_auc = 0.5194444444444444
User 138090 AUC after training: 0.5217717717717718
User 138090 improves AUC. Keeping the model.
Training on augumented user 133484 20/50 current_auc = 0.5217717717717718
User 133484 AUC after training: 0.5186186186186186
User 133484 does not improve AUC. Reverting changes.
Training on augumented user 50740 21/50 current_auc = 0.5217717717717718
User 50740 AUC after training: 0.5240990990990991
User 50740 improves AUC. Keeping the model.
Training on augumented user 109063 22/50 current_auc = 0.5240990990990991
User 109063 AUC after training: 0.5231981981981982
User 109063 does not improve AUC. Reverting changes.
Training on augumented user 111476 23/50 current_auc = 0.5240990990990991
User 111476 AUC after training: 0.5292042042042042
User 111476 improves AUC. Keeping the model.
Training on augumented user 120677 24/50 current_auc = 0.5292042042042042
User 120677 AUC after training: 0.526951951951952
User 120677 does not improve AUC. Reverting changes.
Training on augumented user 87330 25/50 current_auc = 0.5292042042042042
User 87330 AUC after training: 0.5285285285285285
User 87330 does not improve AUC. Reverting changes.
Training on augumented user 65051 26/50 current_auc = 0.5292042042042042
User 65051 AUC after training: 0.5187687687687688
User 65051 does not improve AUC. Reverting changes.
Training on augumented user 98070 27/50 current_auc = 0.5292042042042042
User 98070 AUC after training: 0.5308558558558558
User 98070 improves AUC. Keeping the model.
Training on augumented user 97312 28/50 current_auc = 0.5308558558558558
User 97312 AUC after training: 0.5237987987987989
User 97312 does not improve AUC. Reverting changes.
Training on augumented user 43751 29/50 current_auc = 0.5308558558558558
User 43751 AUC after training: 0.524924924924925
User 43751 does not improve AUC. Reverting changes.
Training on augumented user 60281 30/50 current_auc = 0.5308558558558558
User 60281 AUC after training: 0.5292042042042042
User 60281 does not improve AUC. Reverting changes.
Training on augumented user 54436 31/50 current_auc = 0.5308558558558558
User 54436 AUC after training: 0.528078078078078
User 54436 does not improve AUC. Reverting changes.
Training on augumented user 36514 32/50 current_auc = 0.5308558558558558
User 36514 AUC after training: 0.532957957957958
User 36514 improves AUC. Keeping the model.
Training on augumented user 6659 33/50 current_auc = 0.532957957957958
User 6659 AUC after training: 0.5356606606606606
User 6659 improves AUC. Keeping the model.
Training on augumented user 137496 34/50 current_auc = 0.5356606606606606
User 137496 AUC after training: 0.5335585585585587
User 137496 does not improve AUC. Reverting changes.
Training on augumented user 41895 35/50 current_auc = 0.5356606606606606
User 41895 AUC after training: 0.5340840840840841
User 41895 does not improve AUC. Reverting changes.
Training on augumented user 29221 36/50 current_auc = 0.5356606606606606
User 29221 AUC after training: 0.5398648648648648
User 29221 improves AUC. Keeping the model.
Training on augumented user 124841 37/50 current_auc = 0.5398648648648648
User 124841 AUC after training: 0.5376876876876877
User 124841 does not improve AUC. Reverting changes.
Training on augumented user 116202 38/50 current_auc = 0.5398648648648648
User 116202 AUC after training: 0.5387387387387388
User 116202 does not improve AUC. Reverting changes.
Training on augumented user 87715 39/50 current_auc = 0.5398648648648648
User 87715 AUC after training: 0.5353603603603604
User 87715 does not improve AUC. Reverting changes.
Training on augumented user 91861 40/50 current_auc = 0.5398648648648648
User 91861 AUC after training: 0.5388888888888889
User 91861 does not improve AUC. Reverting changes.
Training on augumented user 93997 41/50 current_auc = 0.5398648648648648
User 93997 AUC after training: 0.539114114114114
User 93997 does not improve AUC. Reverting changes.
Training on augumented user 47022 42/50 current_auc = 0.5398648648648648
User 47022 AUC after training: 0.5408408408408408
User 47022 improves AUC. Keeping the model.
Training on augumented user 58652 43/50 current_auc = 0.5408408408408408
User 58652 AUC after training: 0.5412162162162162
User 58652 improves AUC. Keeping the model.
Training on augumented user 93747 44/50 current_auc = 0.5412162162162162
User 93747 AUC after training: 0.5384384384384384
User 93747 does not improve AUC. Reverting changes.
Training on augumented user 11468 45/50 current_auc = 0.5412162162162162
User 11468 AUC after training: 0.545045045045045
User 11468 improves AUC. Keeping the model.
Training on augumented user 56455 46/50 current_auc = 0.545045045045045
User 56455 AUC after training: 0.5437687687687687
User 56455 does not improve AUC. Reverting changes.
Training on augumented user 15336 47/50 current_auc = 0.545045045045045
User 15336 AUC after training: 0.5458708708708709
User 15336 improves AUC. Keeping the model.
Training on augumented user 16447 48/50 current_auc = 0.5458708708708709
User 16447 AUC after training: 0.5385135135135135
User 16447 does not improve AUC. Reverting changes.
Training on augumented user 30795 49/50 current_auc = 0.5458708708708709
User 30795 AUC after training: 0.543918918918919
User 30795 does not improve AUC. Reverting changes.
[2024-12-02 19:42:57.955684] start test user 87992 232/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:42:58.396297] start test user 87992 232/568 recall augumented users by random, augumented_users = [48017, 28639, 75298, 136546, 72814, 50766, 98057, 106160, 86608, 116133, 65489, 104746, 90115, 83639, 74343, 8765, 30477, 85713, 23252, 121824, 137307, 59547, 126133, 88241, 27702, 62383, 118601, 88481, 123024, 23502, 109652, 58800, 71828, 129964, 101087, 114786, 119858, 45875, 57732, 111420, 46144, 111601, 12187, 75638, 17107, 55164, 46813, 80466, 121458, 57470]
[2024-12-02 19:42:58.411804] user = 87992 Cloud 232/568
[2024-12-02 19:42:58.462388] user = 87992 Local 232/568
[2024-12-02 19:42:58.518661] user = 87992 Local+ 232/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:43:00.014531] user = 87992 MPDA- 232/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7821552010430375
Training on augumented user 48017 0/50 current_auc = 0.7821552010430375
User 48017 AUC after training: 0.7824750003074993
User 48017 improves AUC. Keeping the model.
Training on augumented user 28639 1/50 current_auc = 0.7824750003074993
User 28639 AUC after training: 0.7824627003357892
User 28639 does not improve AUC. Reverting changes.
Training on augumented user 75298 2/50 current_auc = 0.7824750003074993
User 75298 AUC after training: 0.7823643005621087
User 75298 does not improve AUC. Reverting changes.
Training on augumented user 136546 3/50 current_auc = 0.7824750003074993
User 136546 AUC after training: 0.7825119002226295
User 136546 improves AUC. Keeping the model.
Training on augumented user 72814 4/50 current_auc = 0.7825119002226295
User 72814 AUC after training: 0.782056801269357
User 72814 does not improve AUC. Reverting changes.
Training on augumented user 50766 5/50 current_auc = 0.7825119002226295
User 50766 AUC after training: 0.7825242001943395
User 50766 improves AUC. Keeping the model.
Training on augumented user 98057 6/50 current_auc = 0.7825242001943395
User 98057 AUC after training: 0.7824627003357891
User 98057 does not improve AUC. Reverting changes.
Training on augumented user 106160 7/50 current_auc = 0.7825242001943395
User 106160 AUC after training: 0.7821306010996175
User 106160 does not improve AUC. Reverting changes.
Training on augumented user 86608 8/50 current_auc = 0.7825242001943395
User 86608 AUC after training: 0.7822290008732979
User 86608 does not improve AUC. Reverting changes.
Training on augumented user 116133 9/50 current_auc = 0.7825242001943395
User 116133 AUC after training: 0.7824750003074993
User 116133 does not improve AUC. Reverting changes.
Training on augumented user 65489 10/50 current_auc = 0.7825242001943395
User 65489 AUC after training: 0.7821183011279074
User 65489 does not improve AUC. Reverting changes.
Training on augumented user 104746 11/50 current_auc = 0.7825242001943395
User 104746 AUC after training: 0.7822659007884282
User 104746 does not improve AUC. Reverting changes.
Training on augumented user 90115 12/50 current_auc = 0.7825242001943395
User 90115 AUC after training: 0.7822905007318484
User 90115 does not improve AUC. Reverting changes.
Training on augumented user 83639 13/50 current_auc = 0.7825242001943395
User 83639 AUC after training: 0.7823643005621088
User 83639 does not improve AUC. Reverting changes.
Training on augumented user 74343 14/50 current_auc = 0.7825242001943395
User 74343 AUC after training: 0.782413500448949
User 74343 does not improve AUC. Reverting changes.
Training on augumented user 8765 15/50 current_auc = 0.7825242001943395
User 8765 AUC after training: 0.7823151006752684
User 8765 does not improve AUC. Reverting changes.
Training on augumented user 30477 16/50 current_auc = 0.7825242001943395
User 30477 AUC after training: 0.782425800420659
User 30477 does not improve AUC. Reverting changes.
Training on augumented user 85713 17/50 current_auc = 0.7825242001943395
User 85713 AUC after training: 0.7825857000528899
User 85713 improves AUC. Keeping the model.
Training on augumented user 23252 18/50 current_auc = 0.7825857000528899
User 23252 AUC after training: 0.7826102999963099
User 23252 improves AUC. Keeping the model.
Training on augumented user 121824 19/50 current_auc = 0.7826102999963099
User 121824 AUC after training: 0.7826225999680201
User 121824 improves AUC. Keeping the model.
Training on augumented user 137307 20/50 current_auc = 0.7826225999680201
User 137307 AUC after training: 0.7827209997417006
User 137307 improves AUC. Keeping the model.
Training on augumented user 59547 21/50 current_auc = 0.7827209997417006
User 59547 AUC after training: 0.7826348999397301
User 59547 does not improve AUC. Reverting changes.
Training on augumented user 126133 22/50 current_auc = 0.7827209997417006
User 126133 AUC after training: 0.7825734000811797
User 126133 does not improve AUC. Reverting changes.
Training on augumented user 88241 23/50 current_auc = 0.7827209997417006
User 88241 AUC after training: 0.7826717998548604
User 88241 does not improve AUC. Reverting changes.
Training on augumented user 27702 24/50 current_auc = 0.7827209997417006
User 27702 AUC after training: 0.7828931993456415
User 27702 improves AUC. Keeping the model.
Training on augumented user 62383 25/50 current_auc = 0.7828931993456415
User 62383 AUC after training: 0.7824012004772389
User 62383 does not improve AUC. Reverting changes.
Training on augumented user 118601 26/50 current_auc = 0.7828931993456415
User 118601 AUC after training: 0.782794799571961
User 118601 does not improve AUC. Reverting changes.
Training on augumented user 88481 27/50 current_auc = 0.7828931993456415
User 88481 AUC after training: 0.7828808993739313
User 88481 does not improve AUC. Reverting changes.
Training on augumented user 123024 28/50 current_auc = 0.7828931993456415
User 123024 AUC after training: 0.783176098694973
User 123024 improves AUC. Keeping the model.
Training on augumented user 23502 29/50 current_auc = 0.783176098694973
User 23502 AUC after training: 0.783176098694973
User 23502 does not improve AUC. Reverting changes.
Training on augumented user 109652 30/50 current_auc = 0.783176098694973
User 109652 AUC after training: 0.7826840998265704
User 109652 does not improve AUC. Reverting changes.
Training on augumented user 58800 31/50 current_auc = 0.783176098694973
User 58800 AUC after training: 0.7830899988930025
User 58800 does not improve AUC. Reverting changes.
Training on augumented user 71828 32/50 current_auc = 0.783176098694973
User 71828 AUC after training: 0.7828316994870913
User 71828 does not improve AUC. Reverting changes.
Training on augumented user 129964 33/50 current_auc = 0.783176098694973
User 129964 AUC after training: 0.7830407990061623
User 129964 does not improve AUC. Reverting changes.
Training on augumented user 101087 34/50 current_auc = 0.783176098694973
User 101087 AUC after training: 0.783188398666683
User 101087 improves AUC. Keeping the model.
Training on augumented user 114786 35/50 current_auc = 0.783188398666683
User 114786 AUC after training: 0.7832375985535233
User 114786 improves AUC. Keeping the model.
Training on augumented user 119858 36/50 current_auc = 0.7832375985535233
User 119858 AUC after training: 0.7831022988647127
User 119858 does not improve AUC. Reverting changes.
Training on augumented user 45875 37/50 current_auc = 0.7832375985535233
User 45875 AUC after training: 0.7832744984686535
User 45875 improves AUC. Keeping the model.
Training on augumented user 57732 38/50 current_auc = 0.7832744984686535
User 57732 AUC after training: 0.783176098694973
User 57732 does not improve AUC. Reverting changes.
Training on augumented user 111420 39/50 current_auc = 0.7832744984686535
User 111420 AUC after training: 0.7830530989778723
User 111420 does not improve AUC. Reverting changes.
Training on augumented user 46144 40/50 current_auc = 0.7832744984686535
User 46144 AUC after training: 0.7831637987232629
User 46144 does not improve AUC. Reverting changes.
Training on augumented user 111601 41/50 current_auc = 0.7832744984686535
User 111601 AUC after training: 0.7831145988364228
User 111601 does not improve AUC. Reverting changes.
Training on augumented user 12187 42/50 current_auc = 0.7832744984686535
User 12187 AUC after training: 0.7831637987232629
User 12187 does not improve AUC. Reverting changes.
Training on augumented user 75638 43/50 current_auc = 0.7832744984686535
User 75638 AUC after training: 0.7829177992890617
User 75638 does not improve AUC. Reverting changes.
Training on augumented user 17107 44/50 current_auc = 0.7832744984686535
User 17107 AUC after training: 0.7826471999114404
User 17107 does not improve AUC. Reverting changes.
Training on augumented user 55164 45/50 current_auc = 0.7832744984686535
User 55164 AUC after training: 0.7832744984686535
User 55164 does not improve AUC. Reverting changes.
Training on augumented user 46813 46/50 current_auc = 0.7832744984686535
User 46813 AUC after training: 0.7830284990344522
User 46813 does not improve AUC. Reverting changes.
Training on augumented user 80466 47/50 current_auc = 0.7832744984686535
User 80466 AUC after training: 0.783016199062742
User 80466 does not improve AUC. Reverting changes.
Training on augumented user 121458 48/50 current_auc = 0.7832744984686535
User 121458 AUC after training: 0.7831637987232629
User 121458 does not improve AUC. Reverting changes.
Training on augumented user 57470 49/50 current_auc = 0.7832744984686535
User 57470 AUC after training: 0.7832990984120737
User 57470 improves AUC. Keeping the model.
[2024-12-02 19:43:26.425065] start test user 88015 233/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:43:26.899060] start test user 88015 233/568 recall augumented users by random, augumented_users = [5558, 56215, 23633, 1769, 62481, 48799, 65322, 109640, 88659, 56276, 50966, 66237, 71808, 93993, 93666, 118882, 135455, 79374, 24185, 105324, 74525, 125811, 130277, 88784, 74638, 47079, 87975, 17357, 85054, 117729, 44407, 36828, 138322, 64799, 62905, 34534, 128957, 81418, 48017, 68168, 101302, 39657, 98976, 88769, 129468, 97459, 117195, 57689, 21133, 63872]
[2024-12-02 19:43:26.918416] user = 88015 Cloud 233/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:43:26.929813] user = 88015 Local 233/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:43:27.047015] user = 88015 Local+ 233/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:43:29.305925] user = 88015 MPDA- 233/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 5558 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5558 AUC after training: 0.5
User 5558 does not improve AUC. Reverting changes.
Training on augumented user 56215 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56215 AUC after training: 0.5
User 56215 does not improve AUC. Reverting changes.
Training on augumented user 23633 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23633 AUC after training: 0.5
User 23633 does not improve AUC. Reverting changes.
Training on augumented user 1769 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1769 AUC after training: 0.5
User 1769 does not improve AUC. Reverting changes.
Training on augumented user 62481 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62481 AUC after training: 0.5
User 62481 does not improve AUC. Reverting changes.
Training on augumented user 48799 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48799 AUC after training: 0.5
User 48799 does not improve AUC. Reverting changes.
Training on augumented user 65322 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65322 AUC after training: 0.5
User 65322 does not improve AUC. Reverting changes.
Training on augumented user 109640 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109640 AUC after training: 0.5
User 109640 does not improve AUC. Reverting changes.
Training on augumented user 88659 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88659 AUC after training: 0.5
User 88659 does not improve AUC. Reverting changes.
Training on augumented user 56276 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56276 AUC after training: 0.5
User 56276 does not improve AUC. Reverting changes.
Training on augumented user 50966 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50966 AUC after training: 0.5
User 50966 does not improve AUC. Reverting changes.
Training on augumented user 66237 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66237 AUC after training: 0.5
User 66237 does not improve AUC. Reverting changes.
Training on augumented user 71808 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71808 AUC after training: 0.5
User 71808 does not improve AUC. Reverting changes.
Training on augumented user 93993 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93993 AUC after training: 0.5
User 93993 does not improve AUC. Reverting changes.
Training on augumented user 93666 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93666 AUC after training: 0.5
User 93666 does not improve AUC. Reverting changes.
Training on augumented user 118882 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118882 AUC after training: 0.5
User 118882 does not improve AUC. Reverting changes.
Training on augumented user 135455 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135455 AUC after training: 0.5
User 135455 does not improve AUC. Reverting changes.
Training on augumented user 79374 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79374 AUC after training: 0.5
User 79374 does not improve AUC. Reverting changes.
Training on augumented user 24185 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24185 AUC after training: 0.5
User 24185 does not improve AUC. Reverting changes.
Training on augumented user 105324 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105324 AUC after training: 0.5
User 105324 does not improve AUC. Reverting changes.
Training on augumented user 74525 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74525 AUC after training: 0.5
User 74525 does not improve AUC. Reverting changes.
Training on augumented user 125811 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125811 AUC after training: 0.5
User 125811 does not improve AUC. Reverting changes.
Training on augumented user 130277 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130277 AUC after training: 0.5
User 130277 does not improve AUC. Reverting changes.
Training on augumented user 88784 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88784 AUC after training: 0.5
User 88784 does not improve AUC. Reverting changes.
Training on augumented user 74638 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74638 AUC after training: 0.5
User 74638 does not improve AUC. Reverting changes.
Training on augumented user 47079 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47079 AUC after training: 0.5
User 47079 does not improve AUC. Reverting changes.
Training on augumented user 87975 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87975 AUC after training: 0.5
User 87975 does not improve AUC. Reverting changes.
Training on augumented user 17357 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17357 AUC after training: 0.5
User 17357 does not improve AUC. Reverting changes.
Training on augumented user 85054 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85054 AUC after training: 0.5
User 85054 does not improve AUC. Reverting changes.
Training on augumented user 117729 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117729 AUC after training: 0.5
User 117729 does not improve AUC. Reverting changes.
Training on augumented user 44407 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44407 AUC after training: 0.5
User 44407 does not improve AUC. Reverting changes.
Training on augumented user 36828 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36828 AUC after training: 0.5
User 36828 does not improve AUC. Reverting changes.
Training on augumented user 138322 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138322 AUC after training: 0.5
User 138322 does not improve AUC. Reverting changes.
Training on augumented user 64799 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64799 AUC after training: 0.5
User 64799 does not improve AUC. Reverting changes.
Training on augumented user 62905 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62905 AUC after training: 0.5
User 62905 does not improve AUC. Reverting changes.
Training on augumented user 34534 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34534 AUC after training: 0.5
User 34534 does not improve AUC. Reverting changes.
Training on augumented user 128957 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128957 AUC after training: 0.5
User 128957 does not improve AUC. Reverting changes.
Training on augumented user 81418 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81418 AUC after training: 0.5
User 81418 does not improve AUC. Reverting changes.
Training on augumented user 48017 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48017 AUC after training: 0.5
User 48017 does not improve AUC. Reverting changes.
Training on augumented user 68168 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68168 AUC after training: 0.5
User 68168 does not improve AUC. Reverting changes.
Training on augumented user 101302 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101302 AUC after training: 0.5
User 101302 does not improve AUC. Reverting changes.
Training on augumented user 39657 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39657 AUC after training: 0.5
User 39657 does not improve AUC. Reverting changes.
Training on augumented user 98976 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98976 AUC after training: 0.5
User 98976 does not improve AUC. Reverting changes.
Training on augumented user 88769 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88769 AUC after training: 0.5
User 88769 does not improve AUC. Reverting changes.
Training on augumented user 129468 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129468 AUC after training: 0.5
User 129468 does not improve AUC. Reverting changes.
Training on augumented user 97459 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97459 AUC after training: 0.5
User 97459 does not improve AUC. Reverting changes.
Training on augumented user 117195 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117195 AUC after training: 0.5
User 117195 does not improve AUC. Reverting changes.
Training on augumented user 57689 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57689 AUC after training: 0.5
User 57689 does not improve AUC. Reverting changes.
Training on augumented user 21133 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21133 AUC after training: 0.5
User 21133 does not improve AUC. Reverting changes.
Training on augumented user 63872 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63872 AUC after training: 0.5
User 63872 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:44:00.296746] start test user 88044 234/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:44:01.239106] start test user 88044 234/568 recall augumented users by random, augumented_users = [48267, 55135, 79499, 82792, 63022, 49104, 15750, 83212, 137601, 68264, 102363, 94935, 21850, 106395, 85409, 130634, 107227, 104707, 39640, 64424, 69629, 31252, 96025, 15028, 93097, 30100, 35745, 62295, 39071, 88734, 2940, 89722, 61353, 61488, 2947, 81394, 5391, 101200, 93939, 129880, 5336, 112189, 47010, 6943, 98288, 136012, 3002, 70859, 61804, 40296]
[2024-12-02 19:44:01.256939] user = 88044 Cloud 234/568
[2024-12-02 19:44:01.316134] user = 88044 Local 234/568
[2024-12-02 19:44:01.382274] user = 88044 Local+ 234/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:44:04.534533] user = 88044 MPDA- 234/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5870915032679739
Training on augumented user 48267 0/50 current_auc = 0.5870915032679739
User 48267 AUC after training: 0.5867647058823529
User 48267 does not improve AUC. Reverting changes.
Training on augumented user 55135 1/50 current_auc = 0.5870915032679739
User 55135 AUC after training: 0.5862044817927171
User 55135 does not improve AUC. Reverting changes.
Training on augumented user 79499 2/50 current_auc = 0.5870915032679739
User 79499 AUC after training: 0.5857843137254902
User 79499 does not improve AUC. Reverting changes.
Training on augumented user 82792 3/50 current_auc = 0.5870915032679739
User 82792 AUC after training: 0.5863211951447246
User 82792 does not improve AUC. Reverting changes.
Training on augumented user 63022 4/50 current_auc = 0.5870915032679739
User 63022 AUC after training: 0.5865079365079365
User 63022 does not improve AUC. Reverting changes.
Training on augumented user 49104 5/50 current_auc = 0.5870915032679739
User 49104 AUC after training: 0.586577964519141
User 49104 does not improve AUC. Reverting changes.
Training on augumented user 15750 6/50 current_auc = 0.5870915032679739
User 15750 AUC after training: 0.586437908496732
User 15750 does not improve AUC. Reverting changes.
Training on augumented user 83212 7/50 current_auc = 0.5870915032679739
User 83212 AUC after training: 0.5869747899159664
User 83212 does not improve AUC. Reverting changes.
Training on augumented user 137601 8/50 current_auc = 0.5870915032679739
User 137601 AUC after training: 0.5880018674136321
User 137601 improves AUC. Keeping the model.
Training on augumented user 68264 9/50 current_auc = 0.5880018674136321
User 68264 AUC after training: 0.586577964519141
User 68264 does not improve AUC. Reverting changes.
Training on augumented user 102363 10/50 current_auc = 0.5880018674136321
User 102363 AUC after training: 0.5856442577030813
User 102363 does not improve AUC. Reverting changes.
Training on augumented user 94935 11/50 current_auc = 0.5880018674136321
User 94935 AUC after training: 0.588328664799253
User 94935 improves AUC. Keeping the model.
Training on augumented user 21850 12/50 current_auc = 0.588328664799253
User 21850 AUC after training: 0.5867880485527545
User 21850 does not improve AUC. Reverting changes.
Training on augumented user 106395 13/50 current_auc = 0.588328664799253
User 106395 AUC after training: 0.5881419234360411
User 106395 does not improve AUC. Reverting changes.
Training on augumented user 85409 14/50 current_auc = 0.588328664799253
User 85409 AUC after training: 0.5855742296918768
User 85409 does not improve AUC. Reverting changes.
Training on augumented user 130634 15/50 current_auc = 0.588328664799253
User 130634 AUC after training: 0.5878384687208217
User 130634 does not improve AUC. Reverting changes.
Training on augumented user 107227 16/50 current_auc = 0.588328664799253
User 107227 AUC after training: 0.5881886087768441
User 107227 does not improve AUC. Reverting changes.
Training on augumented user 104707 17/50 current_auc = 0.588328664799253
User 104707 AUC after training: 0.5882119514472456
User 104707 does not improve AUC. Reverting changes.
Training on augumented user 39640 18/50 current_auc = 0.588328664799253
User 39640 AUC after training: 0.5872782446311858
User 39640 does not improve AUC. Reverting changes.
Training on augumented user 64424 19/50 current_auc = 0.588328664799253
User 64424 AUC after training: 0.5875350140056023
User 64424 does not improve AUC. Reverting changes.
Training on augumented user 69629 20/50 current_auc = 0.588328664799253
User 69629 AUC after training: 0.5876283846872082
User 69629 does not improve AUC. Reverting changes.
Training on augumented user 31252 21/50 current_auc = 0.588328664799253
User 31252 AUC after training: 0.5871381886087769
User 31252 does not improve AUC. Reverting changes.
Training on augumented user 96025 22/50 current_auc = 0.588328664799253
User 96025 AUC after training: 0.586811391223156
User 96025 does not improve AUC. Reverting changes.
Training on augumented user 15028 23/50 current_auc = 0.588328664799253
User 15028 AUC after training: 0.5885854341736695
User 15028 improves AUC. Keeping the model.
Training on augumented user 93097 24/50 current_auc = 0.5885854341736695
User 93097 AUC after training: 0.5881419234360411
User 93097 does not improve AUC. Reverting changes.
Training on augumented user 30100 25/50 current_auc = 0.5885854341736695
User 30100 AUC after training: 0.5858776844070962
User 30100 does not improve AUC. Reverting changes.
Training on augumented user 35745 26/50 current_auc = 0.5885854341736695
User 35745 AUC after training: 0.5870214752567693
User 35745 does not improve AUC. Reverting changes.
Training on augumented user 62295 27/50 current_auc = 0.5885854341736695
User 62295 AUC after training: 0.5887488328664799
User 62295 improves AUC. Keeping the model.
Training on augumented user 39071 28/50 current_auc = 0.5887488328664799
User 39071 AUC after training: 0.5880485527544351
User 39071 does not improve AUC. Reverting changes.
Training on augumented user 88734 29/50 current_auc = 0.5887488328664799
User 88734 AUC after training: 0.588468720821662
User 88734 does not improve AUC. Reverting changes.
Training on augumented user 2940 30/50 current_auc = 0.5887488328664799
User 2940 AUC after training: 0.588375350140056
User 2940 does not improve AUC. Reverting changes.
Training on augumented user 89722 31/50 current_auc = 0.5887488328664799
User 89722 AUC after training: 0.588375350140056
User 89722 does not improve AUC. Reverting changes.
Training on augumented user 61353 32/50 current_auc = 0.5887488328664799
User 61353 AUC after training: 0.5883053221288516
User 61353 does not improve AUC. Reverting changes.
Training on augumented user 61488 33/50 current_auc = 0.5887488328664799
User 61488 AUC after training: 0.5880252100840336
User 61488 does not improve AUC. Reverting changes.
Training on augumented user 2947 34/50 current_auc = 0.5887488328664799
User 2947 AUC after training: 0.5882586367880486
User 2947 does not improve AUC. Reverting changes.
Training on augumented user 81394 35/50 current_auc = 0.5887488328664799
User 81394 AUC after training: 0.5878151260504202
User 81394 does not improve AUC. Reverting changes.
Training on augumented user 5391 36/50 current_auc = 0.5887488328664799
User 5391 AUC after training: 0.5882819794584501
User 5391 does not improve AUC. Reverting changes.
Training on augumented user 101200 37/50 current_auc = 0.5887488328664799
User 101200 AUC after training: 0.5890756302521009
User 101200 improves AUC. Keeping the model.
Training on augumented user 93939 38/50 current_auc = 0.5890756302521009
User 93939 AUC after training: 0.5881886087768441
User 93939 does not improve AUC. Reverting changes.
Training on augumented user 129880 39/50 current_auc = 0.5890756302521009
User 129880 AUC after training: 0.588468720821662
User 129880 does not improve AUC. Reverting changes.
Training on augumented user 5336 40/50 current_auc = 0.5890756302521009
User 5336 AUC after training: 0.5885620915032679
User 5336 does not improve AUC. Reverting changes.
Training on augumented user 112189 41/50 current_auc = 0.5890756302521009
User 112189 AUC after training: 0.588608776844071
User 112189 does not improve AUC. Reverting changes.
Training on augumented user 47010 42/50 current_auc = 0.5890756302521009
User 47010 AUC after training: 0.5882586367880486
User 47010 does not improve AUC. Reverting changes.
Training on augumented user 6943 43/50 current_auc = 0.5890756302521009
User 6943 AUC after training: 0.5890056022408964
User 6943 does not improve AUC. Reverting changes.
Training on augumented user 98288 44/50 current_auc = 0.5890756302521009
User 98288 AUC after training: 0.5879318394024277
User 98288 does not improve AUC. Reverting changes.
Training on augumented user 136012 45/50 current_auc = 0.5890756302521009
User 136012 AUC after training: 0.5885737628384687
User 136012 does not improve AUC. Reverting changes.
Training on augumented user 3002 46/50 current_auc = 0.5890756302521009
User 3002 AUC after training: 0.5889122315592903
User 3002 does not improve AUC. Reverting changes.
Training on augumented user 70859 47/50 current_auc = 0.5890756302521009
User 70859 AUC after training: 0.5888655462184874
User 70859 does not improve AUC. Reverting changes.
Training on augumented user 61804 48/50 current_auc = 0.5890756302521009
User 61804 AUC after training: 0.5866946778711485
User 61804 does not improve AUC. Reverting changes.
Training on augumented user 40296 49/50 current_auc = 0.5890756302521009
User 40296 AUC after training: 0.5891456582633053
User 40296 improves AUC. Keeping the model.
[2024-12-02 19:44:37.841716] start test user 88126 235/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:44:38.460143] start test user 88126 235/568 recall augumented users by random, augumented_users = [79579, 122037, 101383, 88641, 91692, 137112, 88043, 4689, 13365, 132020, 39507, 2761, 44113, 22829, 48320, 126359, 81680, 121846, 117470, 97995, 53580, 116523, 62726, 130183, 25999, 19518, 133564, 136847, 99854, 62597, 32952, 47521, 84640, 38702, 531, 100191, 92638, 122340, 72030, 28499, 108215, 85865, 13933, 61042, 15944, 6281, 5261, 9302, 54264, 62209]
[2024-12-02 19:44:38.488295] user = 88126 Cloud 235/568
[2024-12-02 19:44:38.504369] user = 88126 Local 235/568
[2024-12-02 19:44:38.577889] user = 88126 Local+ 235/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:44:41.171318] user = 88126 MPDA- 235/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6533333333333333
Training on augumented user 79579 0/50 current_auc = 0.6533333333333333
User 79579 AUC after training: 0.6533333333333333
User 79579 does not improve AUC. Reverting changes.
Training on augumented user 122037 1/50 current_auc = 0.6533333333333333
User 122037 AUC after training: 0.6533333333333333
User 122037 does not improve AUC. Reverting changes.
Training on augumented user 101383 2/50 current_auc = 0.6533333333333333
User 101383 AUC after training: 0.6533333333333333
User 101383 does not improve AUC. Reverting changes.
Training on augumented user 88641 3/50 current_auc = 0.6533333333333333
User 88641 AUC after training: 0.6799999999999999
User 88641 improves AUC. Keeping the model.
Training on augumented user 91692 4/50 current_auc = 0.6799999999999999
User 91692 AUC after training: 0.6799999999999999
User 91692 does not improve AUC. Reverting changes.
Training on augumented user 137112 5/50 current_auc = 0.6799999999999999
User 137112 AUC after training: 0.6799999999999999
User 137112 does not improve AUC. Reverting changes.
Training on augumented user 88043 6/50 current_auc = 0.6799999999999999
User 88043 AUC after training: 0.6666666666666666
User 88043 does not improve AUC. Reverting changes.
Training on augumented user 4689 7/50 current_auc = 0.6799999999999999
User 4689 AUC after training: 0.6799999999999999
User 4689 does not improve AUC. Reverting changes.
Training on augumented user 13365 8/50 current_auc = 0.6799999999999999
User 13365 AUC after training: 0.6533333333333333
User 13365 does not improve AUC. Reverting changes.
Training on augumented user 132020 9/50 current_auc = 0.6799999999999999
User 132020 AUC after training: 0.6666666666666666
User 132020 does not improve AUC. Reverting changes.
Training on augumented user 39507 10/50 current_auc = 0.6799999999999999
User 39507 AUC after training: 0.6666666666666666
User 39507 does not improve AUC. Reverting changes.
Training on augumented user 2761 11/50 current_auc = 0.6799999999999999
User 2761 AUC after training: 0.6799999999999999
User 2761 does not improve AUC. Reverting changes.
Training on augumented user 44113 12/50 current_auc = 0.6799999999999999
User 44113 AUC after training: 0.6799999999999999
User 44113 does not improve AUC. Reverting changes.
Training on augumented user 22829 13/50 current_auc = 0.6799999999999999
User 22829 AUC after training: 0.6666666666666666
User 22829 does not improve AUC. Reverting changes.
Training on augumented user 48320 14/50 current_auc = 0.6799999999999999
User 48320 AUC after training: 0.6799999999999999
User 48320 does not improve AUC. Reverting changes.
Training on augumented user 126359 15/50 current_auc = 0.6799999999999999
User 126359 AUC after training: 0.6666666666666666
User 126359 does not improve AUC. Reverting changes.
Training on augumented user 81680 16/50 current_auc = 0.6799999999999999
User 81680 AUC after training: 0.6799999999999999
User 81680 does not improve AUC. Reverting changes.
Training on augumented user 121846 17/50 current_auc = 0.6799999999999999
User 121846 AUC after training: 0.6666666666666666
User 121846 does not improve AUC. Reverting changes.
Training on augumented user 117470 18/50 current_auc = 0.6799999999999999
User 117470 AUC after training: 0.6799999999999999
User 117470 does not improve AUC. Reverting changes.
Training on augumented user 97995 19/50 current_auc = 0.6799999999999999
User 97995 AUC after training: 0.6666666666666666
User 97995 does not improve AUC. Reverting changes.
Training on augumented user 53580 20/50 current_auc = 0.6799999999999999
User 53580 AUC after training: 0.6666666666666666
User 53580 does not improve AUC. Reverting changes.
Training on augumented user 116523 21/50 current_auc = 0.6799999999999999
User 116523 AUC after training: 0.6533333333333333
User 116523 does not improve AUC. Reverting changes.
Training on augumented user 62726 22/50 current_auc = 0.6799999999999999
User 62726 AUC after training: 0.6799999999999999
User 62726 does not improve AUC. Reverting changes.
Training on augumented user 130183 23/50 current_auc = 0.6799999999999999
User 130183 AUC after training: 0.6666666666666666
User 130183 does not improve AUC. Reverting changes.
Training on augumented user 25999 24/50 current_auc = 0.6799999999999999
User 25999 AUC after training: 0.6799999999999999
User 25999 does not improve AUC. Reverting changes.
Training on augumented user 19518 25/50 current_auc = 0.6799999999999999
User 19518 AUC after training: 0.6666666666666666
User 19518 does not improve AUC. Reverting changes.
Training on augumented user 133564 26/50 current_auc = 0.6799999999999999
User 133564 AUC after training: 0.6666666666666666
User 133564 does not improve AUC. Reverting changes.
Training on augumented user 136847 27/50 current_auc = 0.6799999999999999
User 136847 AUC after training: 0.6533333333333333
User 136847 does not improve AUC. Reverting changes.
Training on augumented user 99854 28/50 current_auc = 0.6799999999999999
User 99854 AUC after training: 0.6666666666666666
User 99854 does not improve AUC. Reverting changes.
Training on augumented user 62597 29/50 current_auc = 0.6799999999999999
User 62597 AUC after training: 0.6533333333333333
User 62597 does not improve AUC. Reverting changes.
Training on augumented user 32952 30/50 current_auc = 0.6799999999999999
User 32952 AUC after training: 0.6666666666666666
User 32952 does not improve AUC. Reverting changes.
Training on augumented user 47521 31/50 current_auc = 0.6799999999999999
User 47521 AUC after training: 0.6666666666666666
User 47521 does not improve AUC. Reverting changes.
Training on augumented user 84640 32/50 current_auc = 0.6799999999999999
User 84640 AUC after training: 0.6799999999999999
User 84640 does not improve AUC. Reverting changes.
Training on augumented user 38702 33/50 current_auc = 0.6799999999999999
User 38702 AUC after training: 0.6666666666666666
User 38702 does not improve AUC. Reverting changes.
Training on augumented user 531 34/50 current_auc = 0.6799999999999999
User 531 AUC after training: 0.6533333333333333
User 531 does not improve AUC. Reverting changes.
Training on augumented user 100191 35/50 current_auc = 0.6799999999999999
User 100191 AUC after training: 0.6666666666666666
User 100191 does not improve AUC. Reverting changes.
Training on augumented user 92638 36/50 current_auc = 0.6799999999999999
User 92638 AUC after training: 0.6666666666666666
User 92638 does not improve AUC. Reverting changes.
Training on augumented user 122340 37/50 current_auc = 0.6799999999999999
User 122340 AUC after training: 0.6666666666666666
User 122340 does not improve AUC. Reverting changes.
Training on augumented user 72030 38/50 current_auc = 0.6799999999999999
User 72030 AUC after training: 0.6533333333333333
User 72030 does not improve AUC. Reverting changes.
Training on augumented user 28499 39/50 current_auc = 0.6799999999999999
User 28499 AUC after training: 0.6533333333333333
User 28499 does not improve AUC. Reverting changes.
Training on augumented user 108215 40/50 current_auc = 0.6799999999999999
User 108215 AUC after training: 0.6799999999999999
User 108215 does not improve AUC. Reverting changes.
Training on augumented user 85865 41/50 current_auc = 0.6799999999999999
User 85865 AUC after training: 0.6666666666666666
User 85865 does not improve AUC. Reverting changes.
Training on augumented user 13933 42/50 current_auc = 0.6799999999999999
User 13933 AUC after training: 0.6799999999999999
User 13933 does not improve AUC. Reverting changes.
Training on augumented user 61042 43/50 current_auc = 0.6799999999999999
User 61042 AUC after training: 0.6533333333333333
User 61042 does not improve AUC. Reverting changes.
Training on augumented user 15944 44/50 current_auc = 0.6799999999999999
User 15944 AUC after training: 0.6666666666666666
User 15944 does not improve AUC. Reverting changes.
Training on augumented user 6281 45/50 current_auc = 0.6799999999999999
User 6281 AUC after training: 0.6533333333333333
User 6281 does not improve AUC. Reverting changes.
Training on augumented user 5261 46/50 current_auc = 0.6799999999999999
User 5261 AUC after training: 0.64
User 5261 does not improve AUC. Reverting changes.
Training on augumented user 9302 47/50 current_auc = 0.6799999999999999
User 9302 AUC after training: 0.6799999999999999
User 9302 does not improve AUC. Reverting changes.
Training on augumented user 54264 48/50 current_auc = 0.6799999999999999
User 54264 AUC after training: 0.6799999999999999
User 54264 does not improve AUC. Reverting changes.
Training on augumented user 62209 49/50 current_auc = 0.6799999999999999
User 62209 AUC after training: 0.6666666666666666
User 62209 does not improve AUC. Reverting changes.
[2024-12-02 19:45:11.285305] start test user 88134 236/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:45:11.682680] start test user 88134 236/568 recall augumented users by random, augumented_users = [1124, 136205, 20134, 51613, 66139, 113437, 93308, 49969, 36198, 92629, 110799, 17040, 102520, 90718, 14341, 106531, 17063, 26559, 45240, 34589, 46899, 20820, 102338, 10858, 96001, 97808, 120952, 5568, 102503, 88438, 32546, 25010, 37420, 33471, 51837, 103654, 37859, 78370, 133348, 43271, 136481, 5449, 133961, 121957, 25830, 28338, 83550, 30180, 25995, 137119]
[2024-12-02 19:45:11.697157] user = 88134 Cloud 236/568
[2024-12-02 19:45:11.715570] user = 88134 Local 236/568
[2024-12-02 19:45:11.738951] user = 88134 Local+ 236/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:45:14.478330] user = 88134 MPDA- 236/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.46710526315789475
Training on augumented user 1124 0/50 current_auc = 0.46710526315789475
User 1124 AUC after training: 0.46710526315789475
User 1124 does not improve AUC. Reverting changes.
Training on augumented user 136205 1/50 current_auc = 0.46710526315789475
User 136205 AUC after training: 0.4683845029239766
User 136205 improves AUC. Keeping the model.
Training on augumented user 20134 2/50 current_auc = 0.4683845029239766
User 20134 AUC after training: 0.46655701754385964
User 20134 does not improve AUC. Reverting changes.
Training on augumented user 51613 3/50 current_auc = 0.4683845029239766
User 51613 AUC after training: 0.46929824561403505
User 51613 improves AUC. Keeping the model.
Training on augumented user 66139 4/50 current_auc = 0.46929824561403505
User 66139 AUC after training: 0.47021198830409355
User 66139 improves AUC. Keeping the model.
Training on augumented user 113437 5/50 current_auc = 0.47021198830409355
User 113437 AUC after training: 0.47021198830409355
User 113437 does not improve AUC. Reverting changes.
Training on augumented user 93308 6/50 current_auc = 0.47021198830409355
User 93308 AUC after training: 0.4698464912280702
User 93308 does not improve AUC. Reverting changes.
Training on augumented user 49969 7/50 current_auc = 0.47021198830409355
User 49969 AUC after training: 0.46801900584795325
User 49969 does not improve AUC. Reverting changes.
Training on augumented user 36198 8/50 current_auc = 0.47021198830409355
User 36198 AUC after training: 0.46838450292397665
User 36198 does not improve AUC. Reverting changes.
Training on augumented user 92629 9/50 current_auc = 0.47021198830409355
User 92629 AUC after training: 0.47057748538011696
User 92629 improves AUC. Keeping the model.
Training on augumented user 110799 10/50 current_auc = 0.47057748538011696
User 110799 AUC after training: 0.46984649122807026
User 110799 does not improve AUC. Reverting changes.
Training on augumented user 17040 11/50 current_auc = 0.47057748538011696
User 17040 AUC after training: 0.46637426900584794
User 17040 does not improve AUC. Reverting changes.
Training on augumented user 102520 12/50 current_auc = 0.47057748538011696
User 102520 AUC after training: 0.46984649122807015
User 102520 does not improve AUC. Reverting changes.
Training on augumented user 90718 13/50 current_auc = 0.47057748538011696
User 90718 AUC after training: 0.47021198830409355
User 90718 does not improve AUC. Reverting changes.
Training on augumented user 14341 14/50 current_auc = 0.47057748538011696
User 14341 AUC after training: 0.46747076023391815
User 14341 does not improve AUC. Reverting changes.
Training on augumented user 106531 15/50 current_auc = 0.47057748538011696
User 106531 AUC after training: 0.46911549707602335
User 106531 does not improve AUC. Reverting changes.
Training on augumented user 17063 16/50 current_auc = 0.47057748538011696
User 17063 AUC after training: 0.46984649122807015
User 17063 does not improve AUC. Reverting changes.
Training on augumented user 26559 17/50 current_auc = 0.47057748538011696
User 26559 AUC after training: 0.47021198830409355
User 26559 does not improve AUC. Reverting changes.
Training on augumented user 45240 18/50 current_auc = 0.47057748538011696
User 45240 AUC after training: 0.47057748538011696
User 45240 does not improve AUC. Reverting changes.
Training on augumented user 34589 19/50 current_auc = 0.47057748538011696
User 34589 AUC after training: 0.47021198830409355
User 34589 does not improve AUC. Reverting changes.
Training on augumented user 46899 20/50 current_auc = 0.47057748538011696
User 46899 AUC after training: 0.47021198830409355
User 46899 does not improve AUC. Reverting changes.
Training on augumented user 20820 21/50 current_auc = 0.47057748538011696
User 20820 AUC after training: 0.47076023391812866
User 20820 improves AUC. Keeping the model.
Training on augumented user 102338 22/50 current_auc = 0.47076023391812866
User 102338 AUC after training: 0.47076023391812866
User 102338 does not improve AUC. Reverting changes.
Training on augumented user 10858 23/50 current_auc = 0.47076023391812866
User 10858 AUC after training: 0.47112573099415206
User 10858 improves AUC. Keeping the model.
Training on augumented user 96001 24/50 current_auc = 0.47112573099415206
User 96001 AUC after training: 0.47039473684210525
User 96001 does not improve AUC. Reverting changes.
Training on augumented user 97808 25/50 current_auc = 0.47112573099415206
User 97808 AUC after training: 0.470577485380117
User 97808 does not improve AUC. Reverting changes.
Training on augumented user 120952 26/50 current_auc = 0.47112573099415206
User 120952 AUC after training: 0.47130847953216376
User 120952 improves AUC. Keeping the model.
Training on augumented user 5568 27/50 current_auc = 0.47130847953216376
User 5568 AUC after training: 0.47057748538011696
User 5568 does not improve AUC. Reverting changes.
Training on augumented user 102503 28/50 current_auc = 0.47130847953216376
User 102503 AUC after training: 0.4720394736842105
User 102503 improves AUC. Keeping the model.
Training on augumented user 88438 29/50 current_auc = 0.4720394736842105
User 88438 AUC after training: 0.4722222222222222
User 88438 improves AUC. Keeping the model.
Training on augumented user 32546 30/50 current_auc = 0.4722222222222222
User 32546 AUC after training: 0.4692982456140351
User 32546 does not improve AUC. Reverting changes.
Training on augumented user 25010 31/50 current_auc = 0.4722222222222222
User 25010 AUC after training: 0.4722222222222222
User 25010 does not improve AUC. Reverting changes.
Training on augumented user 37420 32/50 current_auc = 0.4722222222222222
User 37420 AUC after training: 0.47149122807017546
User 37420 does not improve AUC. Reverting changes.
Training on augumented user 33471 33/50 current_auc = 0.4722222222222222
User 33471 AUC after training: 0.47222222222222227
User 33471 improves AUC. Keeping the model.
Training on augumented user 51837 34/50 current_auc = 0.47222222222222227
User 51837 AUC after training: 0.47112573099415206
User 51837 does not improve AUC. Reverting changes.
Training on augumented user 103654 35/50 current_auc = 0.47222222222222227
User 103654 AUC after training: 0.471125730994152
User 103654 does not improve AUC. Reverting changes.
Training on augumented user 37859 36/50 current_auc = 0.47222222222222227
User 37859 AUC after training: 0.46783625730994155
User 37859 does not improve AUC. Reverting changes.
Training on augumented user 78370 37/50 current_auc = 0.47222222222222227
User 78370 AUC after training: 0.47185672514619886
User 78370 does not improve AUC. Reverting changes.
Training on augumented user 133348 38/50 current_auc = 0.47222222222222227
User 133348 AUC after training: 0.46966374269005845
User 133348 does not improve AUC. Reverting changes.
Training on augumented user 43271 39/50 current_auc = 0.47222222222222227
User 43271 AUC after training: 0.4703947368421053
User 43271 does not improve AUC. Reverting changes.
Training on augumented user 136481 40/50 current_auc = 0.47222222222222227
User 136481 AUC after training: 0.4698464912280702
User 136481 does not improve AUC. Reverting changes.
Training on augumented user 5449 41/50 current_auc = 0.47222222222222227
User 5449 AUC after training: 0.47222222222222227
User 5449 does not improve AUC. Reverting changes.
Training on augumented user 133961 42/50 current_auc = 0.47222222222222227
User 133961 AUC after training: 0.4694809941520468
User 133961 does not improve AUC. Reverting changes.
Training on augumented user 121957 43/50 current_auc = 0.47222222222222227
User 121957 AUC after training: 0.47112573099415206
User 121957 does not improve AUC. Reverting changes.
Training on augumented user 25830 44/50 current_auc = 0.47222222222222227
User 25830 AUC after training: 0.4656432748538012
User 25830 does not improve AUC. Reverting changes.
Training on augumented user 28338 45/50 current_auc = 0.47222222222222227
User 28338 AUC after training: 0.47258771929824567
User 28338 improves AUC. Keeping the model.
Training on augumented user 83550 46/50 current_auc = 0.47258771929824567
User 83550 AUC after training: 0.47112573099415206
User 83550 does not improve AUC. Reverting changes.
Training on augumented user 30180 47/50 current_auc = 0.47258771929824567
User 30180 AUC after training: 0.47222222222222227
User 30180 does not improve AUC. Reverting changes.
Training on augumented user 25995 48/50 current_auc = 0.47258771929824567
User 25995 AUC after training: 0.4694809941520468
User 25995 does not improve AUC. Reverting changes.
Training on augumented user 137119 49/50 current_auc = 0.47258771929824567
User 137119 AUC after training: 0.47185672514619886
User 137119 does not improve AUC. Reverting changes.
[2024-12-02 19:45:45.693305] start test user 88164 237/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:45:46.487925] start test user 88164 237/568 recall augumented users by random, augumented_users = [96249, 67887, 91310, 64778, 24869, 120414, 99039, 86989, 30989, 19023, 65677, 138360, 32906, 104798, 40367, 94371, 67082, 99077, 131943, 124838, 102322, 102539, 59217, 27210, 77791, 9410, 99672, 13120, 33915, 80499, 1436, 83084, 47789, 5326, 132637, 66199, 70505, 64992, 50625, 52073, 44752, 102768, 100088, 87070, 10591, 74214, 123647, 42220, 77012, 5621]
[2024-12-02 19:45:46.503111] user = 88164 Cloud 237/568
[2024-12-02 19:45:46.513674] user = 88164 Local 237/568
[2024-12-02 19:45:46.645050] user = 88164 Local+ 237/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:45:49.263581] user = 88164 MPDA- 237/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6977777777777777
Training on augumented user 96249 0/50 current_auc = 0.6977777777777777
User 96249 AUC after training: 0.6977777777777777
User 96249 does not improve AUC. Reverting changes.
Training on augumented user 67887 1/50 current_auc = 0.6977777777777777
User 67887 AUC after training: 0.6977777777777777
User 67887 does not improve AUC. Reverting changes.
Training on augumented user 91310 2/50 current_auc = 0.6977777777777777
User 91310 AUC after training: 0.6977777777777777
User 91310 does not improve AUC. Reverting changes.
Training on augumented user 64778 3/50 current_auc = 0.6977777777777777
User 64778 AUC after training: 0.6977777777777777
User 64778 does not improve AUC. Reverting changes.
Training on augumented user 24869 4/50 current_auc = 0.6977777777777777
User 24869 AUC after training: 0.6977777777777777
User 24869 does not improve AUC. Reverting changes.
Training on augumented user 120414 5/50 current_auc = 0.6977777777777777
User 120414 AUC after training: 0.6977777777777777
User 120414 does not improve AUC. Reverting changes.
Training on augumented user 99039 6/50 current_auc = 0.6977777777777777
User 99039 AUC after training: 0.6977777777777777
User 99039 does not improve AUC. Reverting changes.
Training on augumented user 86989 7/50 current_auc = 0.6977777777777777
User 86989 AUC after training: 0.7022222222222221
User 86989 improves AUC. Keeping the model.
Training on augumented user 30989 8/50 current_auc = 0.7022222222222221
User 30989 AUC after training: 0.7022222222222221
User 30989 does not improve AUC. Reverting changes.
Training on augumented user 19023 9/50 current_auc = 0.7022222222222221
User 19023 AUC after training: 0.7022222222222221
User 19023 does not improve AUC. Reverting changes.
Training on augumented user 65677 10/50 current_auc = 0.7022222222222221
User 65677 AUC after training: 0.7022222222222221
User 65677 does not improve AUC. Reverting changes.
Training on augumented user 138360 11/50 current_auc = 0.7022222222222221
User 138360 AUC after training: 0.7022222222222221
User 138360 does not improve AUC. Reverting changes.
Training on augumented user 32906 12/50 current_auc = 0.7022222222222221
User 32906 AUC after training: 0.7022222222222221
User 32906 does not improve AUC. Reverting changes.
Training on augumented user 104798 13/50 current_auc = 0.7022222222222221
User 104798 AUC after training: 0.7022222222222221
User 104798 does not improve AUC. Reverting changes.
Training on augumented user 40367 14/50 current_auc = 0.7022222222222221
User 40367 AUC after training: 0.7022222222222221
User 40367 does not improve AUC. Reverting changes.
Training on augumented user 94371 15/50 current_auc = 0.7022222222222221
User 94371 AUC after training: 0.7022222222222221
User 94371 does not improve AUC. Reverting changes.
Training on augumented user 67082 16/50 current_auc = 0.7022222222222221
User 67082 AUC after training: 0.6977777777777777
User 67082 does not improve AUC. Reverting changes.
Training on augumented user 99077 17/50 current_auc = 0.7022222222222221
User 99077 AUC after training: 0.6977777777777777
User 99077 does not improve AUC. Reverting changes.
Training on augumented user 131943 18/50 current_auc = 0.7022222222222221
User 131943 AUC after training: 0.7022222222222221
User 131943 does not improve AUC. Reverting changes.
Training on augumented user 124838 19/50 current_auc = 0.7022222222222221
User 124838 AUC after training: 0.7022222222222221
User 124838 does not improve AUC. Reverting changes.
Training on augumented user 102322 20/50 current_auc = 0.7022222222222221
User 102322 AUC after training: 0.7022222222222221
User 102322 does not improve AUC. Reverting changes.
Training on augumented user 102539 21/50 current_auc = 0.7022222222222221
User 102539 AUC after training: 0.6977777777777777
User 102539 does not improve AUC. Reverting changes.
Training on augumented user 59217 22/50 current_auc = 0.7022222222222221
User 59217 AUC after training: 0.6977777777777777
User 59217 does not improve AUC. Reverting changes.
Training on augumented user 27210 23/50 current_auc = 0.7022222222222221
User 27210 AUC after training: 0.7022222222222221
User 27210 does not improve AUC. Reverting changes.
Training on augumented user 77791 24/50 current_auc = 0.7022222222222221
User 77791 AUC after training: 0.7022222222222221
User 77791 does not improve AUC. Reverting changes.
Training on augumented user 9410 25/50 current_auc = 0.7022222222222221
User 9410 AUC after training: 0.7022222222222221
User 9410 does not improve AUC. Reverting changes.
Training on augumented user 99672 26/50 current_auc = 0.7022222222222221
User 99672 AUC after training: 0.7022222222222221
User 99672 does not improve AUC. Reverting changes.
Training on augumented user 13120 27/50 current_auc = 0.7022222222222221
User 13120 AUC after training: 0.7022222222222221
User 13120 does not improve AUC. Reverting changes.
Training on augumented user 33915 28/50 current_auc = 0.7022222222222221
User 33915 AUC after training: 0.6977777777777777
User 33915 does not improve AUC. Reverting changes.
Training on augumented user 80499 29/50 current_auc = 0.7022222222222221
User 80499 AUC after training: 0.7022222222222221
User 80499 does not improve AUC. Reverting changes.
Training on augumented user 1436 30/50 current_auc = 0.7022222222222221
User 1436 AUC after training: 0.6977777777777777
User 1436 does not improve AUC. Reverting changes.
Training on augumented user 83084 31/50 current_auc = 0.7022222222222221
User 83084 AUC after training: 0.7022222222222221
User 83084 does not improve AUC. Reverting changes.
Training on augumented user 47789 32/50 current_auc = 0.7022222222222221
User 47789 AUC after training: 0.7022222222222221
User 47789 does not improve AUC. Reverting changes.
Training on augumented user 5326 33/50 current_auc = 0.7022222222222221
User 5326 AUC after training: 0.6977777777777777
User 5326 does not improve AUC. Reverting changes.
Training on augumented user 132637 34/50 current_auc = 0.7022222222222221
User 132637 AUC after training: 0.6977777777777777
User 132637 does not improve AUC. Reverting changes.
Training on augumented user 66199 35/50 current_auc = 0.7022222222222221
User 66199 AUC after training: 0.6977777777777777
User 66199 does not improve AUC. Reverting changes.
Training on augumented user 70505 36/50 current_auc = 0.7022222222222221
User 70505 AUC after training: 0.6977777777777777
User 70505 does not improve AUC. Reverting changes.
Training on augumented user 64992 37/50 current_auc = 0.7022222222222221
User 64992 AUC after training: 0.6977777777777777
User 64992 does not improve AUC. Reverting changes.
Training on augumented user 50625 38/50 current_auc = 0.7022222222222221
User 50625 AUC after training: 0.7022222222222221
User 50625 does not improve AUC. Reverting changes.
Training on augumented user 52073 39/50 current_auc = 0.7022222222222221
User 52073 AUC after training: 0.6977777777777777
User 52073 does not improve AUC. Reverting changes.
Training on augumented user 44752 40/50 current_auc = 0.7022222222222221
User 44752 AUC after training: 0.6977777777777777
User 44752 does not improve AUC. Reverting changes.
Training on augumented user 102768 41/50 current_auc = 0.7022222222222221
User 102768 AUC after training: 0.7022222222222221
User 102768 does not improve AUC. Reverting changes.
Training on augumented user 100088 42/50 current_auc = 0.7022222222222221
User 100088 AUC after training: 0.6977777777777777
User 100088 does not improve AUC. Reverting changes.
Training on augumented user 87070 43/50 current_auc = 0.7022222222222221
User 87070 AUC after training: 0.6977777777777777
User 87070 does not improve AUC. Reverting changes.
Training on augumented user 10591 44/50 current_auc = 0.7022222222222221
User 10591 AUC after training: 0.6977777777777777
User 10591 does not improve AUC. Reverting changes.
Training on augumented user 74214 45/50 current_auc = 0.7022222222222221
User 74214 AUC after training: 0.7022222222222221
User 74214 does not improve AUC. Reverting changes.
Training on augumented user 123647 46/50 current_auc = 0.7022222222222221
User 123647 AUC after training: 0.7022222222222221
User 123647 does not improve AUC. Reverting changes.
Training on augumented user 42220 47/50 current_auc = 0.7022222222222221
User 42220 AUC after training: 0.7022222222222221
User 42220 does not improve AUC. Reverting changes.
Training on augumented user 77012 48/50 current_auc = 0.7022222222222221
User 77012 AUC after training: 0.6977777777777777
User 77012 does not improve AUC. Reverting changes.
Training on augumented user 5621 49/50 current_auc = 0.7022222222222221
User 5621 AUC after training: 0.6977777777777777
User 5621 does not improve AUC. Reverting changes.
[2024-12-02 19:46:23.830424] start test user 88166 238/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:46:24.286880] start test user 88166 238/568 recall augumented users by random, augumented_users = [1101, 28577, 107111, 73672, 91164, 7637, 66462, 97247, 20621, 21761, 58305, 2234, 80523, 134608, 38582, 77309, 29129, 76135, 78646, 123339, 124913, 107495, 21403, 109632, 87221, 71463, 8789, 80430, 62376, 24309, 4660, 92824, 6743, 62722, 85971, 24711, 1933, 22924, 44634, 32126, 105612, 94654, 33668, 136273, 8366, 80932, 64427, 74029, 67568, 57787]
[2024-12-02 19:46:24.301848] user = 88166 Cloud 238/568
[2024-12-02 19:46:24.322636] user = 88166 Local 238/568
[2024-12-02 19:46:24.348105] user = 88166 Local+ 238/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:46:26.332280] user = 88166 MPDA- 238/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.0
Training on augumented user 1101 0/50 current_auc = 0.0
User 1101 AUC after training: 0.0
User 1101 does not improve AUC. Reverting changes.
Training on augumented user 28577 1/50 current_auc = 0.0
User 28577 AUC after training: 0.0
User 28577 does not improve AUC. Reverting changes.
Training on augumented user 107111 2/50 current_auc = 0.0
User 107111 AUC after training: 0.0
User 107111 does not improve AUC. Reverting changes.
Training on augumented user 73672 3/50 current_auc = 0.0
User 73672 AUC after training: 0.0
User 73672 does not improve AUC. Reverting changes.
Training on augumented user 91164 4/50 current_auc = 0.0
User 91164 AUC after training: 0.0
User 91164 does not improve AUC. Reverting changes.
Training on augumented user 7637 5/50 current_auc = 0.0
User 7637 AUC after training: 0.0
User 7637 does not improve AUC. Reverting changes.
Training on augumented user 66462 6/50 current_auc = 0.0
User 66462 AUC after training: 0.0
User 66462 does not improve AUC. Reverting changes.
Training on augumented user 97247 7/50 current_auc = 0.0
User 97247 AUC after training: 0.0
User 97247 does not improve AUC. Reverting changes.
Training on augumented user 20621 8/50 current_auc = 0.0
User 20621 AUC after training: 0.0
User 20621 does not improve AUC. Reverting changes.
Training on augumented user 21761 9/50 current_auc = 0.0
User 21761 AUC after training: 0.0
User 21761 does not improve AUC. Reverting changes.
Training on augumented user 58305 10/50 current_auc = 0.0
User 58305 AUC after training: 0.0
User 58305 does not improve AUC. Reverting changes.
Training on augumented user 2234 11/50 current_auc = 0.0
User 2234 AUC after training: 0.0
User 2234 does not improve AUC. Reverting changes.
Training on augumented user 80523 12/50 current_auc = 0.0
User 80523 AUC after training: 0.0
User 80523 does not improve AUC. Reverting changes.
Training on augumented user 134608 13/50 current_auc = 0.0
User 134608 AUC after training: 0.0
User 134608 does not improve AUC. Reverting changes.
Training on augumented user 38582 14/50 current_auc = 0.0
User 38582 AUC after training: 0.0
User 38582 does not improve AUC. Reverting changes.
Training on augumented user 77309 15/50 current_auc = 0.0
User 77309 AUC after training: 0.0
User 77309 does not improve AUC. Reverting changes.
Training on augumented user 29129 16/50 current_auc = 0.0
User 29129 AUC after training: 0.0
User 29129 does not improve AUC. Reverting changes.
Training on augumented user 76135 17/50 current_auc = 0.0
User 76135 AUC after training: 0.0
User 76135 does not improve AUC. Reverting changes.
Training on augumented user 78646 18/50 current_auc = 0.0
User 78646 AUC after training: 0.0
User 78646 does not improve AUC. Reverting changes.
Training on augumented user 123339 19/50 current_auc = 0.0
User 123339 AUC after training: 0.0
User 123339 does not improve AUC. Reverting changes.
Training on augumented user 124913 20/50 current_auc = 0.0
User 124913 AUC after training: 0.0
User 124913 does not improve AUC. Reverting changes.
Training on augumented user 107495 21/50 current_auc = 0.0
User 107495 AUC after training: 0.0
User 107495 does not improve AUC. Reverting changes.
Training on augumented user 21403 22/50 current_auc = 0.0
User 21403 AUC after training: 0.0
User 21403 does not improve AUC. Reverting changes.
Training on augumented user 109632 23/50 current_auc = 0.0
User 109632 AUC after training: 0.0
User 109632 does not improve AUC. Reverting changes.
Training on augumented user 87221 24/50 current_auc = 0.0
User 87221 AUC after training: 0.0
User 87221 does not improve AUC. Reverting changes.
Training on augumented user 71463 25/50 current_auc = 0.0
User 71463 AUC after training: 0.0
User 71463 does not improve AUC. Reverting changes.
Training on augumented user 8789 26/50 current_auc = 0.0
User 8789 AUC after training: 0.0
User 8789 does not improve AUC. Reverting changes.
Training on augumented user 80430 27/50 current_auc = 0.0
User 80430 AUC after training: 0.0
User 80430 does not improve AUC. Reverting changes.
Training on augumented user 62376 28/50 current_auc = 0.0
User 62376 AUC after training: 0.0
User 62376 does not improve AUC. Reverting changes.
Training on augumented user 24309 29/50 current_auc = 0.0
User 24309 AUC after training: 0.0
User 24309 does not improve AUC. Reverting changes.
Training on augumented user 4660 30/50 current_auc = 0.0
User 4660 AUC after training: 0.0
User 4660 does not improve AUC. Reverting changes.
Training on augumented user 92824 31/50 current_auc = 0.0
User 92824 AUC after training: 0.0
User 92824 does not improve AUC. Reverting changes.
Training on augumented user 6743 32/50 current_auc = 0.0
User 6743 AUC after training: 0.0
User 6743 does not improve AUC. Reverting changes.
Training on augumented user 62722 33/50 current_auc = 0.0
User 62722 AUC after training: 0.0
User 62722 does not improve AUC. Reverting changes.
Training on augumented user 85971 34/50 current_auc = 0.0
User 85971 AUC after training: 0.0
User 85971 does not improve AUC. Reverting changes.
Training on augumented user 24711 35/50 current_auc = 0.0
User 24711 AUC after training: 0.0
User 24711 does not improve AUC. Reverting changes.
Training on augumented user 1933 36/50 current_auc = 0.0
User 1933 AUC after training: 0.0
User 1933 does not improve AUC. Reverting changes.
Training on augumented user 22924 37/50 current_auc = 0.0
User 22924 AUC after training: 0.0
User 22924 does not improve AUC. Reverting changes.
Training on augumented user 44634 38/50 current_auc = 0.0
User 44634 AUC after training: 0.0
User 44634 does not improve AUC. Reverting changes.
Training on augumented user 32126 39/50 current_auc = 0.0
User 32126 AUC after training: 0.0
User 32126 does not improve AUC. Reverting changes.
Training on augumented user 105612 40/50 current_auc = 0.0
User 105612 AUC after training: 0.0
User 105612 does not improve AUC. Reverting changes.
Training on augumented user 94654 41/50 current_auc = 0.0
User 94654 AUC after training: 0.0
User 94654 does not improve AUC. Reverting changes.
Training on augumented user 33668 42/50 current_auc = 0.0
User 33668 AUC after training: 0.0
User 33668 does not improve AUC. Reverting changes.
Training on augumented user 136273 43/50 current_auc = 0.0
User 136273 AUC after training: 0.0
User 136273 does not improve AUC. Reverting changes.
Training on augumented user 8366 44/50 current_auc = 0.0
User 8366 AUC after training: 0.0
User 8366 does not improve AUC. Reverting changes.
Training on augumented user 80932 45/50 current_auc = 0.0
User 80932 AUC after training: 0.0
User 80932 does not improve AUC. Reverting changes.
Training on augumented user 64427 46/50 current_auc = 0.0
User 64427 AUC after training: 0.0
User 64427 does not improve AUC. Reverting changes.
Training on augumented user 74029 47/50 current_auc = 0.0
User 74029 AUC after training: 0.0
User 74029 does not improve AUC. Reverting changes.
Training on augumented user 67568 48/50 current_auc = 0.0
User 67568 AUC after training: 0.0
User 67568 does not improve AUC. Reverting changes.
Training on augumented user 57787 49/50 current_auc = 0.0
User 57787 AUC after training: 0.0
User 57787 does not improve AUC. Reverting changes.
[2024-12-02 19:46:56.072948] start test user 88266 239/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:46:56.682778] start test user 88266 239/568 recall augumented users by random, augumented_users = [88984, 116519, 133020, 46016, 9924, 120323, 63442, 30229, 38824, 109926, 38903, 11625, 84673, 127187, 24097, 27235, 54732, 120882, 44908, 33411, 30007, 32716, 31373, 105835, 104484, 94486, 4660, 72444, 29670, 12241, 46097, 92029, 121953, 115949, 57804, 71851, 118399, 2646, 10215, 116099, 25116, 112763, 12315, 116320, 36311, 90029, 88705, 98093, 88959, 68689]
[2024-12-02 19:46:56.704685] user = 88266 Cloud 239/568
[2024-12-02 19:46:56.771663] user = 88266 Local 239/568
[2024-12-02 19:46:56.838466] user = 88266 Local+ 239/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:46:58.514751] user = 88266 MPDA- 239/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5622840217212441
Training on augumented user 88984 0/50 current_auc = 0.5622840217212441
User 88984 AUC after training: 0.5627776863584005
User 88984 improves AUC. Keeping the model.
Training on augumented user 116519 1/50 current_auc = 0.5627776863584005
User 116519 AUC after training: 0.5634359058746091
User 116519 improves AUC. Keeping the model.
Training on augumented user 133020 2/50 current_auc = 0.5634359058746091
User 133020 AUC after training: 0.5636004607536613
User 133020 improves AUC. Keeping the model.
Training on augumented user 46016 3/50 current_auc = 0.5636004607536613
User 46016 AUC after training: 0.5634359058746091
User 46016 does not improve AUC. Reverting changes.
Training on augumented user 9924 4/50 current_auc = 0.5636004607536613
User 9924 AUC after training: 0.563271350995557
User 9924 does not improve AUC. Reverting changes.
Training on augumented user 120323 5/50 current_auc = 0.5636004607536613
User 120323 AUC after training: 0.5631067961165048
User 120323 does not improve AUC. Reverting changes.
Training on augumented user 63442 6/50 current_auc = 0.5636004607536613
User 63442 AUC after training: 0.5636004607536613
User 63442 does not improve AUC. Reverting changes.
Training on augumented user 30229 7/50 current_auc = 0.5636004607536613
User 30229 AUC after training: 0.5613789698864572
User 30229 does not improve AUC. Reverting changes.
Training on augumented user 38824 8/50 current_auc = 0.5636004607536613
User 38824 AUC after training: 0.5642586802698701
User 38824 improves AUC. Keeping the model.
Training on augumented user 109926 9/50 current_auc = 0.5642586802698701
User 109926 AUC after training: 0.5640941253908178
User 109926 does not improve AUC. Reverting changes.
Training on augumented user 38903 10/50 current_auc = 0.5642586802698701
User 38903 AUC after training: 0.563271350995557
User 38903 does not improve AUC. Reverting changes.
Training on augumented user 11625 11/50 current_auc = 0.5642586802698701
User 11625 AUC after training: 0.5611321375678788
User 11625 does not improve AUC. Reverting changes.
Training on augumented user 84673 12/50 current_auc = 0.5642586802698701
User 84673 AUC after training: 0.5644232351489222
User 84673 improves AUC. Keeping the model.
Training on augumented user 127187 13/50 current_auc = 0.5644232351489222
User 127187 AUC after training: 0.5595688662168834
User 127187 does not improve AUC. Reverting changes.
Training on augumented user 24097 14/50 current_auc = 0.5644232351489222
User 24097 AUC after training: 0.5626131314793484
User 24097 does not improve AUC. Reverting changes.
Training on augumented user 27235 15/50 current_auc = 0.5644232351489222
User 27235 AUC after training: 0.565246009544183
User 27235 improves AUC. Keeping the model.
Training on augumented user 54732 16/50 current_auc = 0.565246009544183
User 54732 AUC after training: 0.5659042290603916
User 54732 improves AUC. Keeping the model.
Training on augumented user 120882 17/50 current_auc = 0.5659042290603916
User 120882 AUC after training: 0.5644232351489222
User 120882 does not improve AUC. Reverting changes.
Training on augumented user 44908 18/50 current_auc = 0.5659042290603916
User 44908 AUC after training: 0.5640941253908179
User 44908 does not improve AUC. Reverting changes.
Training on augumented user 33411 19/50 current_auc = 0.5659042290603916
User 33411 AUC after training: 0.5637650156327136
User 33411 does not improve AUC. Reverting changes.
Training on augumented user 30007 20/50 current_auc = 0.5659042290603916
User 30007 AUC after training: 0.5650814546651308
User 30007 does not improve AUC. Reverting changes.
Training on augumented user 32716 21/50 current_auc = 0.5659042290603916
User 32716 AUC after training: 0.5647523449070265
User 32716 does not improve AUC. Reverting changes.
Training on augumented user 31373 22/50 current_auc = 0.5659042290603916
User 31373 AUC after training: 0.5649168997860786
User 31373 does not improve AUC. Reverting changes.
Training on augumented user 105835 23/50 current_auc = 0.5659042290603916
User 105835 AUC after training: 0.5640118479512917
User 105835 does not improve AUC. Reverting changes.
Training on augumented user 104484 24/50 current_auc = 0.5659042290603916
User 104484 AUC after training: 0.5657396741813395
User 104484 does not improve AUC. Reverting changes.
Training on augumented user 94486 25/50 current_auc = 0.5659042290603916
User 94486 AUC after training: 0.5660687839394438
User 94486 improves AUC. Keeping the model.
Training on augumented user 4660 26/50 current_auc = 0.5660687839394438
User 4660 AUC after training: 0.5637650156327135
User 4660 does not improve AUC. Reverting changes.
Training on augumented user 72444 27/50 current_auc = 0.5660687839394438
User 72444 AUC after training: 0.5654105644232352
User 72444 does not improve AUC. Reverting changes.
Training on augumented user 29670 28/50 current_auc = 0.5660687839394438
User 29670 AUC after training: 0.5640941253908178
User 29670 does not improve AUC. Reverting changes.
Training on augumented user 12241 29/50 current_auc = 0.5660687839394438
User 12241 AUC after training: 0.5636004607536613
User 12241 does not improve AUC. Reverting changes.
Training on augumented user 46097 30/50 current_auc = 0.5660687839394438
User 46097 AUC after training: 0.5626131314793484
User 46097 does not improve AUC. Reverting changes.
Training on augumented user 92029 31/50 current_auc = 0.5660687839394438
User 92029 AUC after training: 0.5628599637979267
User 92029 does not improve AUC. Reverting changes.
Training on augumented user 121953 32/50 current_auc = 0.5660687839394438
User 121953 AUC after training: 0.5638472930722396
User 121953 does not improve AUC. Reverting changes.
Training on augumented user 115949 33/50 current_auc = 0.5660687839394438
User 115949 AUC after training: 0.5675497778509133
User 115949 improves AUC. Keeping the model.
Training on augumented user 57804 34/50 current_auc = 0.5675497778509133
User 57804 AUC after training: 0.5663978936975482
User 57804 does not improve AUC. Reverting changes.
Training on augumented user 71851 35/50 current_auc = 0.5675497778509133
User 71851 AUC after training: 0.567220668092809
User 71851 does not improve AUC. Reverting changes.
Training on augumented user 118399 36/50 current_auc = 0.5675497778509133
User 118399 AUC after training: 0.5683725522461741
User 118399 improves AUC. Keeping the model.
Training on augumented user 2646 37/50 current_auc = 0.5683725522461741
User 2646 AUC after training: 0.5670561132137568
User 2646 does not improve AUC. Reverting changes.
Training on augumented user 10215 38/50 current_auc = 0.5683725522461741
User 10215 AUC after training: 0.5687016620042784
User 10215 improves AUC. Keeping the model.
Training on augumented user 116099 39/50 current_auc = 0.5687016620042784
User 116099 AUC after training: 0.5680434424880698
User 116099 does not improve AUC. Reverting changes.
Training on augumented user 25116 40/50 current_auc = 0.5687016620042784
User 25116 AUC after training: 0.5649168997860787
User 25116 does not improve AUC. Reverting changes.
Training on augumented user 112763 41/50 current_auc = 0.5687016620042784
User 112763 AUC after training: 0.5677143327299654
User 112763 does not improve AUC. Reverting changes.
Training on augumented user 12315 42/50 current_auc = 0.5687016620042784
User 12315 AUC after training: 0.5677143327299655
User 12315 does not improve AUC. Reverting changes.
Training on augumented user 116320 43/50 current_auc = 0.5687016620042784
User 116320 AUC after training: 0.5695244363995393
User 116320 improves AUC. Keeping the model.
Training on augumented user 36311 44/50 current_auc = 0.5695244363995393
User 36311 AUC after training: 0.5667270034556524
User 36311 does not improve AUC. Reverting changes.
Training on augumented user 90029 45/50 current_auc = 0.5695244363995393
User 90029 AUC after training: 0.5695244363995393
User 90029 does not improve AUC. Reverting changes.
Training on augumented user 88705 46/50 current_auc = 0.5695244363995393
User 88705 AUC after training: 0.5680434424880698
User 88705 does not improve AUC. Reverting changes.
Training on augumented user 98093 47/50 current_auc = 0.5695244363995393
User 98093 AUC after training: 0.5687016620042784
User 98093 does not improve AUC. Reverting changes.
Training on augumented user 88959 48/50 current_auc = 0.5695244363995393
User 88959 AUC after training: 0.5688662168833307
User 88959 does not improve AUC. Reverting changes.
Training on augumented user 68689 49/50 current_auc = 0.5695244363995393
User 68689 AUC after training: 0.5696889912785914
User 68689 improves AUC. Keeping the model.
[2024-12-02 19:47:29.905458] start test user 88267 240/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:47:30.754771] start test user 88267 240/568 recall augumented users by random, augumented_users = [123832, 2625, 95309, 66988, 56791, 17692, 6388, 24392, 78338, 19539, 48433, 77975, 79893, 34530, 102294, 46557, 2522, 118728, 27807, 9679, 54610, 31777, 97274, 94476, 38868, 58069, 45502, 35109, 64569, 54602, 77220, 56593, 104256, 16231, 109053, 118721, 82822, 106749, 56438, 100703, 39620, 69936, 120333, 85639, 20137, 126100, 23736, 97540, 78485, 103927]
[2024-12-02 19:47:30.772954] user = 88267 Cloud 240/568
[2024-12-02 19:47:30.824096] user = 88267 Local 240/568
[2024-12-02 19:47:31.035618] user = 88267 Local+ 240/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:47:33.604636] user = 88267 MPDA- 240/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6195286195286196
Training on augumented user 123832 0/50 current_auc = 0.6195286195286196
User 123832 AUC after training: 0.6212121212121211
User 123832 improves AUC. Keeping the model.
Training on augumented user 2625 1/50 current_auc = 0.6212121212121211
User 2625 AUC after training: 0.6212121212121212
User 2625 improves AUC. Keeping the model.
Training on augumented user 95309 2/50 current_auc = 0.6212121212121212
User 95309 AUC after training: 0.6195286195286195
User 95309 does not improve AUC. Reverting changes.
Training on augumented user 66988 3/50 current_auc = 0.6212121212121212
User 66988 AUC after training: 0.6212121212121212
User 66988 does not improve AUC. Reverting changes.
Training on augumented user 56791 4/50 current_auc = 0.6212121212121212
User 56791 AUC after training: 0.6220538720538721
User 56791 improves AUC. Keeping the model.
Training on augumented user 17692 5/50 current_auc = 0.6220538720538721
User 17692 AUC after training: 0.6220538720538721
User 17692 does not improve AUC. Reverting changes.
Training on augumented user 6388 6/50 current_auc = 0.6220538720538721
User 6388 AUC after training: 0.6195286195286196
User 6388 does not improve AUC. Reverting changes.
Training on augumented user 24392 7/50 current_auc = 0.6220538720538721
User 24392 AUC after training: 0.6220538720538721
User 24392 does not improve AUC. Reverting changes.
Training on augumented user 78338 8/50 current_auc = 0.6220538720538721
User 78338 AUC after training: 0.6195286195286195
User 78338 does not improve AUC. Reverting changes.
Training on augumented user 19539 9/50 current_auc = 0.6220538720538721
User 19539 AUC after training: 0.622053872053872
User 19539 does not improve AUC. Reverting changes.
Training on augumented user 48433 10/50 current_auc = 0.6220538720538721
User 48433 AUC after training: 0.622053872053872
User 48433 does not improve AUC. Reverting changes.
Training on augumented user 77975 11/50 current_auc = 0.6220538720538721
User 77975 AUC after training: 0.6237373737373737
User 77975 improves AUC. Keeping the model.
Training on augumented user 79893 12/50 current_auc = 0.6237373737373737
User 79893 AUC after training: 0.6237373737373737
User 79893 does not improve AUC. Reverting changes.
Training on augumented user 34530 13/50 current_auc = 0.6237373737373737
User 34530 AUC after training: 0.6228956228956228
User 34530 does not improve AUC. Reverting changes.
Training on augumented user 102294 14/50 current_auc = 0.6237373737373737
User 102294 AUC after training: 0.6220538720538721
User 102294 does not improve AUC. Reverting changes.
Training on augumented user 46557 15/50 current_auc = 0.6237373737373737
User 46557 AUC after training: 0.6224747474747474
User 46557 does not improve AUC. Reverting changes.
Training on augumented user 2522 16/50 current_auc = 0.6237373737373737
User 2522 AUC after training: 0.6212121212121212
User 2522 does not improve AUC. Reverting changes.
Training on augumented user 118728 17/50 current_auc = 0.6237373737373737
User 118728 AUC after training: 0.6262626262626263
User 118728 improves AUC. Keeping the model.
Training on augumented user 27807 18/50 current_auc = 0.6262626262626263
User 27807 AUC after training: 0.625
User 27807 does not improve AUC. Reverting changes.
Training on augumented user 9679 19/50 current_auc = 0.6262626262626263
User 9679 AUC after training: 0.6245791245791246
User 9679 does not improve AUC. Reverting changes.
Training on augumented user 54610 20/50 current_auc = 0.6262626262626263
User 54610 AUC after training: 0.6279461279461279
User 54610 improves AUC. Keeping the model.
Training on augumented user 31777 21/50 current_auc = 0.6279461279461279
User 31777 AUC after training: 0.627104377104377
User 31777 does not improve AUC. Reverting changes.
Training on augumented user 97274 22/50 current_auc = 0.6279461279461279
User 97274 AUC after training: 0.627104377104377
User 97274 does not improve AUC. Reverting changes.
Training on augumented user 94476 23/50 current_auc = 0.6279461279461279
User 94476 AUC after training: 0.6254208754208754
User 94476 does not improve AUC. Reverting changes.
Training on augumented user 38868 24/50 current_auc = 0.6279461279461279
User 38868 AUC after training: 0.6212121212121211
User 38868 does not improve AUC. Reverting changes.
Training on augumented user 58069 25/50 current_auc = 0.6279461279461279
User 58069 AUC after training: 0.6296296296296297
User 58069 improves AUC. Keeping the model.
Training on augumented user 45502 26/50 current_auc = 0.6296296296296297
User 45502 AUC after training: 0.6296296296296297
User 45502 does not improve AUC. Reverting changes.
Training on augumented user 35109 27/50 current_auc = 0.6296296296296297
User 35109 AUC after training: 0.6304713804713805
User 35109 improves AUC. Keeping the model.
Training on augumented user 64569 28/50 current_auc = 0.6304713804713805
User 64569 AUC after training: 0.6296296296296297
User 64569 does not improve AUC. Reverting changes.
Training on augumented user 54602 29/50 current_auc = 0.6304713804713805
User 54602 AUC after training: 0.6304713804713804
User 54602 does not improve AUC. Reverting changes.
Training on augumented user 77220 30/50 current_auc = 0.6304713804713805
User 77220 AUC after training: 0.6317340067340067
User 77220 improves AUC. Keeping the model.
Training on augumented user 56593 31/50 current_auc = 0.6317340067340067
User 56593 AUC after training: 0.6308922558922558
User 56593 does not improve AUC. Reverting changes.
Training on augumented user 104256 32/50 current_auc = 0.6317340067340067
User 104256 AUC after training: 0.6317340067340067
User 104256 does not improve AUC. Reverting changes.
Training on augumented user 16231 33/50 current_auc = 0.6317340067340067
User 16231 AUC after training: 0.6287878787878788
User 16231 does not improve AUC. Reverting changes.
Training on augumented user 109053 34/50 current_auc = 0.6317340067340067
User 109053 AUC after training: 0.6313131313131313
User 109053 does not improve AUC. Reverting changes.
Training on augumented user 118721 35/50 current_auc = 0.6317340067340067
User 118721 AUC after training: 0.6304713804713804
User 118721 does not improve AUC. Reverting changes.
Training on augumented user 82822 36/50 current_auc = 0.6317340067340067
User 82822 AUC after training: 0.6296296296296297
User 82822 does not improve AUC. Reverting changes.
Training on augumented user 106749 37/50 current_auc = 0.6317340067340067
User 106749 AUC after training: 0.6317340067340067
User 106749 does not improve AUC. Reverting changes.
Training on augumented user 56438 38/50 current_auc = 0.6317340067340067
User 56438 AUC after training: 0.6300505050505051
User 56438 does not improve AUC. Reverting changes.
Training on augumented user 100703 39/50 current_auc = 0.6317340067340067
User 100703 AUC after training: 0.6308922558922558
User 100703 does not improve AUC. Reverting changes.
Training on augumented user 39620 40/50 current_auc = 0.6317340067340067
User 39620 AUC after training: 0.6300505050505051
User 39620 does not improve AUC. Reverting changes.
Training on augumented user 69936 41/50 current_auc = 0.6317340067340067
User 69936 AUC after training: 0.6325757575757576
User 69936 improves AUC. Keeping the model.
Training on augumented user 120333 42/50 current_auc = 0.6325757575757576
User 120333 AUC after training: 0.6308922558922558
User 120333 does not improve AUC. Reverting changes.
Training on augumented user 85639 43/50 current_auc = 0.6325757575757576
User 85639 AUC after training: 0.6287878787878788
User 85639 does not improve AUC. Reverting changes.
Training on augumented user 20137 44/50 current_auc = 0.6325757575757576
User 20137 AUC after training: 0.6317340067340067
User 20137 does not improve AUC. Reverting changes.
Training on augumented user 126100 45/50 current_auc = 0.6325757575757576
User 126100 AUC after training: 0.6325757575757576
User 126100 does not improve AUC. Reverting changes.
Training on augumented user 23736 46/50 current_auc = 0.6325757575757576
User 23736 AUC after training: 0.6304713804713805
User 23736 does not improve AUC. Reverting changes.
Training on augumented user 97540 47/50 current_auc = 0.6325757575757576
User 97540 AUC after training: 0.6334175084175084
User 97540 improves AUC. Keeping the model.
Training on augumented user 78485 48/50 current_auc = 0.6334175084175084
User 78485 AUC after training: 0.6334175084175084
User 78485 does not improve AUC. Reverting changes.
Training on augumented user 103927 49/50 current_auc = 0.6334175084175084
User 103927 AUC after training: 0.6325757575757576
User 103927 does not improve AUC. Reverting changes.
[2024-12-02 19:48:03.565968] start test user 88312 241/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:48:04.116200] start test user 88312 241/568 recall augumented users by random, augumented_users = [108504, 36975, 105269, 3442, 51641, 100457, 64768, 21508, 102551, 41440, 51397, 6097, 136954, 33123, 20483, 24909, 8419, 118621, 50113, 94551, 35542, 70148, 25226, 85119, 123734, 137780, 111455, 61456, 9705, 54312, 88984, 75081, 118019, 4683, 4299, 5957, 133617, 56264, 37138, 71800, 31242, 136360, 132615, 18559, 112624, 73042, 98521, 135417, 63908, 19117]
[2024-12-02 19:48:04.132491] user = 88312 Cloud 241/568
[2024-12-02 19:48:04.167092] user = 88312 Local 241/568
[2024-12-02 19:48:04.385576] user = 88312 Local+ 241/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:48:06.844637] user = 88312 MPDA- 241/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5966366809881848
Training on augumented user 108504 0/50 current_auc = 0.5966366809881848
User 108504 AUC after training: 0.5961779448621554
User 108504 does not improve AUC. Reverting changes.
Training on augumented user 36975 1/50 current_auc = 0.5966366809881848
User 36975 AUC after training: 0.5964017185821697
User 36975 does not improve AUC. Reverting changes.
Training on augumented user 105269 2/50 current_auc = 0.5966366809881848
User 105269 AUC after training: 0.5965695488721804
User 105269 does not improve AUC. Reverting changes.
Training on augumented user 3442 3/50 current_auc = 0.5966366809881848
User 3442 AUC after training: 0.5962786430361617
User 3442 does not improve AUC. Reverting changes.
Training on augumented user 51641 4/50 current_auc = 0.5966366809881848
User 51641 AUC after training: 0.5959765485141425
User 51641 does not improve AUC. Reverting changes.
Training on augumented user 100457 5/50 current_auc = 0.5966366809881848
User 100457 AUC after training: 0.5975429645542428
User 100457 improves AUC. Keeping the model.
Training on augumented user 64768 6/50 current_auc = 0.5975429645542428
User 64768 AUC after training: 0.5977443609022557
User 64768 improves AUC. Keeping the model.
Training on augumented user 21508 7/50 current_auc = 0.5977443609022557
User 21508 AUC after training: 0.5975205871822413
User 21508 does not improve AUC. Reverting changes.
Training on augumented user 102551 8/50 current_auc = 0.5977443609022557
User 102551 AUC after training: 0.597140171858217
User 102551 does not improve AUC. Reverting changes.
Training on augumented user 41440 9/50 current_auc = 0.5977443609022557
User 41440 AUC after training: 0.596625492302184
User 41440 does not improve AUC. Reverting changes.
Training on augumented user 51397 10/50 current_auc = 0.5977443609022557
User 51397 AUC after training: 0.5972073039742213
User 51397 does not improve AUC. Reverting changes.
Training on augumented user 6097 11/50 current_auc = 0.5977443609022557
User 6097 AUC after training: 0.5967150017901898
User 6097 does not improve AUC. Reverting changes.
Training on augumented user 136954 12/50 current_auc = 0.5977443609022557
User 136954 AUC after training: 0.5971737379162191
User 136954 does not improve AUC. Reverting changes.
Training on augumented user 33123 13/50 current_auc = 0.5977443609022557
User 33123 AUC after training: 0.5973415682062297
User 33123 does not improve AUC. Reverting changes.
Training on augumented user 20483 14/50 current_auc = 0.5977443609022557
User 20483 AUC after training: 0.5966926244181884
User 20483 does not improve AUC. Reverting changes.
Training on augumented user 24909 15/50 current_auc = 0.5977443609022557
User 24909 AUC after training: 0.5976324740422484
User 24909 does not improve AUC. Reverting changes.
Training on augumented user 8419 16/50 current_auc = 0.5977443609022557
User 8419 AUC after training: 0.5978786251342642
User 8419 improves AUC. Keeping the model.
Training on augumented user 118621 17/50 current_auc = 0.5978786251342642
User 118621 AUC after training: 0.5975429645542427
User 118621 does not improve AUC. Reverting changes.
Training on augumented user 50113 18/50 current_auc = 0.5978786251342642
User 50113 AUC after training: 0.5962003222341569
User 50113 does not improve AUC. Reverting changes.
Training on augumented user 94551 19/50 current_auc = 0.5978786251342642
User 94551 AUC after training: 0.5978114930182599
User 94551 does not improve AUC. Reverting changes.
Training on augumented user 35542 20/50 current_auc = 0.5978786251342642
User 35542 AUC after training: 0.5976548514142499
User 35542 does not improve AUC. Reverting changes.
Training on augumented user 70148 21/50 current_auc = 0.5978786251342642
User 70148 AUC after training: 0.597610096670247
User 70148 does not improve AUC. Reverting changes.
Training on augumented user 25226 22/50 current_auc = 0.5978786251342642
User 25226 AUC after training: 0.5978114930182599
User 25226 does not improve AUC. Reverting changes.
Training on augumented user 85119 23/50 current_auc = 0.5978786251342642
User 85119 AUC after training: 0.5977219835302542
User 85119 does not improve AUC. Reverting changes.
Training on augumented user 123734 24/50 current_auc = 0.5978786251342642
User 123734 AUC after training: 0.5979010025062657
User 123734 improves AUC. Keeping the model.
Training on augumented user 137780 25/50 current_auc = 0.5979010025062657
User 137780 AUC after training: 0.5975429645542427
User 137780 does not improve AUC. Reverting changes.
Training on augumented user 111455 26/50 current_auc = 0.5979010025062657
User 111455 AUC after training: 0.5971737379162191
User 111455 does not improve AUC. Reverting changes.
Training on augumented user 61456 27/50 current_auc = 0.5979010025062657
User 61456 AUC after training: 0.5978786251342643
User 61456 does not improve AUC. Reverting changes.
Training on augumented user 9705 28/50 current_auc = 0.5979010025062657
User 9705 AUC after training: 0.5978786251342643
User 9705 does not improve AUC. Reverting changes.
Training on augumented user 54312 29/50 current_auc = 0.5979010025062657
User 54312 AUC after training: 0.5978338703902613
User 54312 does not improve AUC. Reverting changes.
Training on augumented user 88984 30/50 current_auc = 0.5979010025062657
User 88984 AUC after training: 0.5984156820622986
User 88984 improves AUC. Keeping the model.
Training on augumented user 75081 31/50 current_auc = 0.5984156820622986
User 75081 AUC after training: 0.5986842105263157
User 75081 improves AUC. Keeping the model.
Training on augumented user 118019 32/50 current_auc = 0.5986842105263157
User 118019 AUC after training: 0.5982590404582886
User 118019 does not improve AUC. Reverting changes.
Training on augumented user 4683 33/50 current_auc = 0.5986842105263157
User 4683 AUC after training: 0.5977443609022556
User 4683 does not improve AUC. Reverting changes.
Training on augumented user 4299 34/50 current_auc = 0.5986842105263157
User 4299 AUC after training: 0.5987960973863229
User 4299 improves AUC. Keeping the model.
Training on augumented user 5957 35/50 current_auc = 0.5987960973863229
User 5957 AUC after training: 0.5987289652703187
User 5957 does not improve AUC. Reverting changes.
Training on augumented user 133617 36/50 current_auc = 0.5987960973863229
User 133617 AUC after training: 0.5975093984962405
User 133617 does not improve AUC. Reverting changes.
Training on augumented user 56264 37/50 current_auc = 0.5987960973863229
User 56264 AUC after training: 0.5989751163623345
User 56264 improves AUC. Keeping the model.
Training on augumented user 37138 38/50 current_auc = 0.5989751163623345
User 37138 AUC after training: 0.5991317579663444
User 37138 improves AUC. Keeping the model.
Training on augumented user 71800 39/50 current_auc = 0.5991317579663444
User 71800 AUC after training: 0.5989863050483352
User 71800 does not improve AUC. Reverting changes.
Training on augumented user 31242 40/50 current_auc = 0.5991317579663444
User 31242 AUC after training: 0.6002058718224133
User 31242 improves AUC. Keeping the model.
Training on augumented user 136360 41/50 current_auc = 0.6002058718224133
User 136360 AUC after training: 0.5990646258503401
User 136360 does not improve AUC. Reverting changes.
Training on augumented user 132615 42/50 current_auc = 0.6002058718224133
User 132615 AUC after training: 0.5998030791263875
User 132615 does not improve AUC. Reverting changes.
Training on augumented user 18559 43/50 current_auc = 0.6002058718224133
User 18559 AUC after training: 0.599937343358396
User 18559 does not improve AUC. Reverting changes.
Training on augumented user 112624 44/50 current_auc = 0.6002058718224133
User 112624 AUC after training: 0.5994897959183674
User 112624 does not improve AUC. Reverting changes.
Training on augumented user 73042 45/50 current_auc = 0.6002058718224133
User 73042 AUC after training: 0.6001163623344073
User 73042 does not improve AUC. Reverting changes.
Training on augumented user 98521 46/50 current_auc = 0.6002058718224133
User 98521 AUC after training: 0.5992548335123523
User 98521 does not improve AUC. Reverting changes.
Training on augumented user 135417 47/50 current_auc = 0.6002058718224133
User 135417 AUC after training: 0.5998478338703902
User 135417 does not improve AUC. Reverting changes.
Training on augumented user 63908 48/50 current_auc = 0.6002058718224133
User 63908 AUC after training: 0.5984044933762979
User 63908 does not improve AUC. Reverting changes.
Training on augumented user 19117 49/50 current_auc = 0.6002058718224133
User 19117 AUC after training: 0.599937343358396
User 19117 does not improve AUC. Reverting changes.
[2024-12-02 19:48:40.044947] start test user 88371 242/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:48:40.549656] start test user 88371 242/568 recall augumented users by random, augumented_users = [99671, 27006, 87319, 78268, 55171, 128401, 19655, 73341, 56587, 63507, 27947, 59497, 104217, 117757, 13685, 77116, 22502, 113449, 81171, 7034, 120101, 97090, 102723, 67187, 46079, 70364, 116744, 47953, 79351, 77560, 65682, 120646, 80914, 101370, 44239, 12807, 118298, 24938, 46602, 115370, 119776, 99996, 134461, 75883, 35303, 88027, 95627, 137196, 96041, 109549]
[2024-12-02 19:48:40.572029] user = 88371 Cloud 242/568
[2024-12-02 19:48:40.596687] user = 88371 Local 242/568
[2024-12-02 19:48:40.745772] user = 88371 Local+ 242/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:48:43.748915] user = 88371 MPDA- 242/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.48070175438596496
Training on augumented user 99671 0/50 current_auc = 0.48070175438596496
User 99671 AUC after training: 0.48538011695906436
User 99671 improves AUC. Keeping the model.
Training on augumented user 27006 1/50 current_auc = 0.48538011695906436
User 27006 AUC after training: 0.48538011695906436
User 27006 does not improve AUC. Reverting changes.
Training on augumented user 87319 2/50 current_auc = 0.48538011695906436
User 87319 AUC after training: 0.48421052631578954
User 87319 does not improve AUC. Reverting changes.
Training on augumented user 78268 3/50 current_auc = 0.48538011695906436
User 78268 AUC after training: 0.4807017543859649
User 78268 does not improve AUC. Reverting changes.
Training on augumented user 55171 4/50 current_auc = 0.48538011695906436
User 55171 AUC after training: 0.4842105263157895
User 55171 does not improve AUC. Reverting changes.
Training on augumented user 128401 5/50 current_auc = 0.48538011695906436
User 128401 AUC after training: 0.4830409356725146
User 128401 does not improve AUC. Reverting changes.
Training on augumented user 19655 6/50 current_auc = 0.48538011695906436
User 19655 AUC after training: 0.4795321637426901
User 19655 does not improve AUC. Reverting changes.
Training on augumented user 73341 7/50 current_auc = 0.48538011695906436
User 73341 AUC after training: 0.4842105263157895
User 73341 does not improve AUC. Reverting changes.
Training on augumented user 56587 8/50 current_auc = 0.48538011695906436
User 56587 AUC after training: 0.4818713450292398
User 56587 does not improve AUC. Reverting changes.
Training on augumented user 63507 9/50 current_auc = 0.48538011695906436
User 63507 AUC after training: 0.4842105263157895
User 63507 does not improve AUC. Reverting changes.
Training on augumented user 27947 10/50 current_auc = 0.48538011695906436
User 27947 AUC after training: 0.48538011695906436
User 27947 does not improve AUC. Reverting changes.
Training on augumented user 59497 11/50 current_auc = 0.48538011695906436
User 59497 AUC after training: 0.48538011695906436
User 59497 does not improve AUC. Reverting changes.
Training on augumented user 104217 12/50 current_auc = 0.48538011695906436
User 104217 AUC after training: 0.4842105263157895
User 104217 does not improve AUC. Reverting changes.
Training on augumented user 117757 13/50 current_auc = 0.48538011695906436
User 117757 AUC after training: 0.48538011695906436
User 117757 does not improve AUC. Reverting changes.
Training on augumented user 13685 14/50 current_auc = 0.48538011695906436
User 13685 AUC after training: 0.4865497076023392
User 13685 improves AUC. Keeping the model.
Training on augumented user 77116 15/50 current_auc = 0.4865497076023392
User 77116 AUC after training: 0.48538011695906436
User 77116 does not improve AUC. Reverting changes.
Training on augumented user 22502 16/50 current_auc = 0.4865497076023392
User 22502 AUC after training: 0.48538011695906436
User 22502 does not improve AUC. Reverting changes.
Training on augumented user 113449 17/50 current_auc = 0.4865497076023392
User 113449 AUC after training: 0.48538011695906436
User 113449 does not improve AUC. Reverting changes.
Training on augumented user 81171 18/50 current_auc = 0.4865497076023392
User 81171 AUC after training: 0.4830409356725147
User 81171 does not improve AUC. Reverting changes.
Training on augumented user 7034 19/50 current_auc = 0.4865497076023392
User 7034 AUC after training: 0.48538011695906436
User 7034 does not improve AUC. Reverting changes.
Training on augumented user 120101 20/50 current_auc = 0.4865497076023392
User 120101 AUC after training: 0.48538011695906436
User 120101 does not improve AUC. Reverting changes.
Training on augumented user 97090 21/50 current_auc = 0.4865497076023392
User 97090 AUC after training: 0.48421052631578954
User 97090 does not improve AUC. Reverting changes.
Training on augumented user 102723 22/50 current_auc = 0.4865497076023392
User 102723 AUC after training: 0.48538011695906436
User 102723 does not improve AUC. Reverting changes.
Training on augumented user 67187 23/50 current_auc = 0.4865497076023392
User 67187 AUC after training: 0.4865497076023392
User 67187 does not improve AUC. Reverting changes.
Training on augumented user 46079 24/50 current_auc = 0.4865497076023392
User 46079 AUC after training: 0.4865497076023392
User 46079 does not improve AUC. Reverting changes.
Training on augumented user 70364 25/50 current_auc = 0.4865497076023392
User 70364 AUC after training: 0.4818713450292398
User 70364 does not improve AUC. Reverting changes.
Training on augumented user 116744 26/50 current_auc = 0.4865497076023392
User 116744 AUC after training: 0.48771929824561405
User 116744 improves AUC. Keeping the model.
Training on augumented user 47953 27/50 current_auc = 0.48771929824561405
User 47953 AUC after training: 0.4865497076023392
User 47953 does not improve AUC. Reverting changes.
Training on augumented user 79351 28/50 current_auc = 0.48771929824561405
User 79351 AUC after training: 0.48771929824561405
User 79351 does not improve AUC. Reverting changes.
Training on augumented user 77560 29/50 current_auc = 0.48771929824561405
User 77560 AUC after training: 0.487719298245614
User 77560 does not improve AUC. Reverting changes.
Training on augumented user 65682 30/50 current_auc = 0.48771929824561405
User 65682 AUC after training: 0.4830409356725146
User 65682 does not improve AUC. Reverting changes.
Training on augumented user 120646 31/50 current_auc = 0.48771929824561405
User 120646 AUC after training: 0.48538011695906436
User 120646 does not improve AUC. Reverting changes.
Training on augumented user 80914 32/50 current_auc = 0.48771929824561405
User 80914 AUC after training: 0.48771929824561405
User 80914 does not improve AUC. Reverting changes.
Training on augumented user 101370 33/50 current_auc = 0.48771929824561405
User 101370 AUC after training: 0.48771929824561405
User 101370 does not improve AUC. Reverting changes.
Training on augumented user 44239 34/50 current_auc = 0.48771929824561405
User 44239 AUC after training: 0.48538011695906436
User 44239 does not improve AUC. Reverting changes.
Training on augumented user 12807 35/50 current_auc = 0.48771929824561405
User 12807 AUC after training: 0.4865497076023392
User 12807 does not improve AUC. Reverting changes.
Training on augumented user 118298 36/50 current_auc = 0.48771929824561405
User 118298 AUC after training: 0.4865497076023392
User 118298 does not improve AUC. Reverting changes.
Training on augumented user 24938 37/50 current_auc = 0.48771929824561405
User 24938 AUC after training: 0.4865497076023392
User 24938 does not improve AUC. Reverting changes.
Training on augumented user 46602 38/50 current_auc = 0.48771929824561405
User 46602 AUC after training: 0.4865497076023392
User 46602 does not improve AUC. Reverting changes.
Training on augumented user 115370 39/50 current_auc = 0.48771929824561405
User 115370 AUC after training: 0.4865497076023392
User 115370 does not improve AUC. Reverting changes.
Training on augumented user 119776 40/50 current_auc = 0.48771929824561405
User 119776 AUC after training: 0.4842105263157895
User 119776 does not improve AUC. Reverting changes.
Training on augumented user 99996 41/50 current_auc = 0.48771929824561405
User 99996 AUC after training: 0.48771929824561405
User 99996 does not improve AUC. Reverting changes.
Training on augumented user 134461 42/50 current_auc = 0.48771929824561405
User 134461 AUC after training: 0.48771929824561405
User 134461 does not improve AUC. Reverting changes.
Training on augumented user 75883 43/50 current_auc = 0.48771929824561405
User 75883 AUC after training: 0.48654970760233923
User 75883 does not improve AUC. Reverting changes.
Training on augumented user 35303 44/50 current_auc = 0.48771929824561405
User 35303 AUC after training: 0.4818713450292398
User 35303 does not improve AUC. Reverting changes.
Training on augumented user 88027 45/50 current_auc = 0.48771929824561405
User 88027 AUC after training: 0.4818713450292398
User 88027 does not improve AUC. Reverting changes.
Training on augumented user 95627 46/50 current_auc = 0.48771929824561405
User 95627 AUC after training: 0.48538011695906436
User 95627 does not improve AUC. Reverting changes.
Training on augumented user 137196 47/50 current_auc = 0.48771929824561405
User 137196 AUC after training: 0.48771929824561405
User 137196 does not improve AUC. Reverting changes.
Training on augumented user 96041 48/50 current_auc = 0.48771929824561405
User 96041 AUC after training: 0.48888888888888893
User 96041 improves AUC. Keeping the model.
Training on augumented user 109549 49/50 current_auc = 0.48888888888888893
User 109549 AUC after training: 0.48771929824561405
User 109549 does not improve AUC. Reverting changes.
[2024-12-02 19:49:14.988268] start test user 88412 243/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:49:15.428870] start test user 88412 243/568 recall augumented users by random, augumented_users = [96268, 112331, 95556, 5026, 131231, 127125, 46803, 84277, 52838, 80194, 31976, 37209, 111928, 119074, 96979, 72325, 49057, 33005, 107386, 61273, 108313, 81242, 5924, 34247, 77805, 49701, 41234, 59319, 102548, 23611, 31144, 127652, 42786, 100670, 94950, 45425, 128877, 719, 39129, 53362, 60857, 52118, 69710, 112282, 96819, 80361, 95523, 93778, 18814, 64412]
[2024-12-02 19:49:15.445558] user = 88412 Cloud 243/568
[2024-12-02 19:49:15.460609] user = 88412 Local 243/568
[2024-12-02 19:49:15.571169] user = 88412 Local+ 243/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:49:17.711029] user = 88412 MPDA- 243/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.47619047619047616
Training on augumented user 96268 0/50 current_auc = 0.47619047619047616
User 96268 AUC after training: 0.4777777777777778
User 96268 improves AUC. Keeping the model.
Training on augumented user 112331 1/50 current_auc = 0.4777777777777778
User 112331 AUC after training: 0.47619047619047616
User 112331 does not improve AUC. Reverting changes.
Training on augumented user 95556 2/50 current_auc = 0.4777777777777778
User 95556 AUC after training: 0.47698412698412695
User 95556 does not improve AUC. Reverting changes.
Training on augumented user 5026 3/50 current_auc = 0.4777777777777778
User 5026 AUC after training: 0.47539682539682543
User 5026 does not improve AUC. Reverting changes.
Training on augumented user 131231 4/50 current_auc = 0.4777777777777778
User 131231 AUC after training: 0.476984126984127
User 131231 does not improve AUC. Reverting changes.
Training on augumented user 127125 5/50 current_auc = 0.4777777777777778
User 127125 AUC after training: 0.4785714285714286
User 127125 improves AUC. Keeping the model.
Training on augumented user 46803 6/50 current_auc = 0.4785714285714286
User 46803 AUC after training: 0.4793650793650794
User 46803 improves AUC. Keeping the model.
Training on augumented user 84277 7/50 current_auc = 0.4793650793650794
User 84277 AUC after training: 0.4785714285714286
User 84277 does not improve AUC. Reverting changes.
Training on augumented user 52838 8/50 current_auc = 0.4793650793650794
User 52838 AUC after training: 0.4809523809523809
User 52838 improves AUC. Keeping the model.
Training on augumented user 80194 9/50 current_auc = 0.4809523809523809
User 80194 AUC after training: 0.4785714285714286
User 80194 does not improve AUC. Reverting changes.
Training on augumented user 31976 10/50 current_auc = 0.4809523809523809
User 31976 AUC after training: 0.4801587301587301
User 31976 does not improve AUC. Reverting changes.
Training on augumented user 37209 11/50 current_auc = 0.4809523809523809
User 37209 AUC after training: 0.4801587301587302
User 37209 does not improve AUC. Reverting changes.
Training on augumented user 111928 12/50 current_auc = 0.4809523809523809
User 111928 AUC after training: 0.48174603174603176
User 111928 improves AUC. Keeping the model.
Training on augumented user 119074 13/50 current_auc = 0.48174603174603176
User 119074 AUC after training: 0.4801587301587302
User 119074 does not improve AUC. Reverting changes.
Training on augumented user 96979 14/50 current_auc = 0.48174603174603176
User 96979 AUC after training: 0.4817460317460317
User 96979 does not improve AUC. Reverting changes.
Training on augumented user 72325 15/50 current_auc = 0.48174603174603176
User 72325 AUC after training: 0.48253968253968255
User 72325 improves AUC. Keeping the model.
Training on augumented user 49057 16/50 current_auc = 0.48253968253968255
User 49057 AUC after training: 0.4793650793650793
User 49057 does not improve AUC. Reverting changes.
Training on augumented user 33005 17/50 current_auc = 0.48253968253968255
User 33005 AUC after training: 0.4801587301587302
User 33005 does not improve AUC. Reverting changes.
Training on augumented user 107386 18/50 current_auc = 0.48253968253968255
User 107386 AUC after training: 0.48095238095238096
User 107386 does not improve AUC. Reverting changes.
Training on augumented user 61273 19/50 current_auc = 0.48253968253968255
User 61273 AUC after training: 0.48015873015873023
User 61273 does not improve AUC. Reverting changes.
Training on augumented user 108313 20/50 current_auc = 0.48253968253968255
User 108313 AUC after training: 0.48095238095238096
User 108313 does not improve AUC. Reverting changes.
Training on augumented user 81242 21/50 current_auc = 0.48253968253968255
User 81242 AUC after training: 0.48174603174603176
User 81242 does not improve AUC. Reverting changes.
Training on augumented user 5924 22/50 current_auc = 0.48253968253968255
User 5924 AUC after training: 0.48253968253968255
User 5924 does not improve AUC. Reverting changes.
Training on augumented user 34247 23/50 current_auc = 0.48253968253968255
User 34247 AUC after training: 0.48174603174603176
User 34247 does not improve AUC. Reverting changes.
Training on augumented user 77805 24/50 current_auc = 0.48253968253968255
User 77805 AUC after training: 0.48095238095238096
User 77805 does not improve AUC. Reverting changes.
Training on augumented user 49701 25/50 current_auc = 0.48253968253968255
User 49701 AUC after training: 0.48095238095238096
User 49701 does not improve AUC. Reverting changes.
Training on augumented user 41234 26/50 current_auc = 0.48253968253968255
User 41234 AUC after training: 0.4785714285714286
User 41234 does not improve AUC. Reverting changes.
Training on augumented user 59319 27/50 current_auc = 0.48253968253968255
User 59319 AUC after training: 0.48095238095238096
User 59319 does not improve AUC. Reverting changes.
Training on augumented user 102548 28/50 current_auc = 0.48253968253968255
User 102548 AUC after training: 0.48412698412698413
User 102548 improves AUC. Keeping the model.
Training on augumented user 23611 29/50 current_auc = 0.48412698412698413
User 23611 AUC after training: 0.48333333333333334
User 23611 does not improve AUC. Reverting changes.
Training on augumented user 31144 30/50 current_auc = 0.48412698412698413
User 31144 AUC after training: 0.48174603174603176
User 31144 does not improve AUC. Reverting changes.
Training on augumented user 127652 31/50 current_auc = 0.48412698412698413
User 127652 AUC after training: 0.4825396825396826
User 127652 does not improve AUC. Reverting changes.
Training on augumented user 42786 32/50 current_auc = 0.48412698412698413
User 42786 AUC after training: 0.48174603174603176
User 42786 does not improve AUC. Reverting changes.
Training on augumented user 100670 33/50 current_auc = 0.48412698412698413
User 100670 AUC after training: 0.48253968253968255
User 100670 does not improve AUC. Reverting changes.
Training on augumented user 94950 34/50 current_auc = 0.48412698412698413
User 94950 AUC after training: 0.4785714285714286
User 94950 does not improve AUC. Reverting changes.
Training on augumented user 45425 35/50 current_auc = 0.48412698412698413
User 45425 AUC after training: 0.4801587301587302
User 45425 does not improve AUC. Reverting changes.
Training on augumented user 128877 36/50 current_auc = 0.48412698412698413
User 128877 AUC after training: 0.4801587301587302
User 128877 does not improve AUC. Reverting changes.
Training on augumented user 719 37/50 current_auc = 0.48412698412698413
User 719 AUC after training: 0.4849206349206349
User 719 improves AUC. Keeping the model.
Training on augumented user 39129 38/50 current_auc = 0.4849206349206349
User 39129 AUC after training: 0.48253968253968255
User 39129 does not improve AUC. Reverting changes.
Training on augumented user 53362 39/50 current_auc = 0.4849206349206349
User 53362 AUC after training: 0.48333333333333334
User 53362 does not improve AUC. Reverting changes.
Training on augumented user 60857 40/50 current_auc = 0.4849206349206349
User 60857 AUC after training: 0.4841269841269841
User 60857 does not improve AUC. Reverting changes.
Training on augumented user 52118 41/50 current_auc = 0.4849206349206349
User 52118 AUC after training: 0.48253968253968255
User 52118 does not improve AUC. Reverting changes.
Training on augumented user 69710 42/50 current_auc = 0.4849206349206349
User 69710 AUC after training: 0.48253968253968255
User 69710 does not improve AUC. Reverting changes.
Training on augumented user 112282 43/50 current_auc = 0.4849206349206349
User 112282 AUC after training: 0.4825396825396826
User 112282 does not improve AUC. Reverting changes.
Training on augumented user 96819 44/50 current_auc = 0.4849206349206349
User 96819 AUC after training: 0.4825396825396825
User 96819 does not improve AUC. Reverting changes.
Training on augumented user 80361 45/50 current_auc = 0.4849206349206349
User 80361 AUC after training: 0.480952380952381
User 80361 does not improve AUC. Reverting changes.
Training on augumented user 95523 46/50 current_auc = 0.4849206349206349
User 95523 AUC after training: 0.4849206349206349
User 95523 does not improve AUC. Reverting changes.
Training on augumented user 93778 47/50 current_auc = 0.4849206349206349
User 93778 AUC after training: 0.48333333333333334
User 93778 does not improve AUC. Reverting changes.
Training on augumented user 18814 48/50 current_auc = 0.4849206349206349
User 18814 AUC after training: 0.48253968253968255
User 18814 does not improve AUC. Reverting changes.
Training on augumented user 64412 49/50 current_auc = 0.4849206349206349
User 64412 AUC after training: 0.4833333333333334
User 64412 does not improve AUC. Reverting changes.
[2024-12-02 19:49:45.130224] start test user 88423 244/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:49:45.558759] start test user 88423 244/568 recall augumented users by random, augumented_users = [42953, 108301, 33503, 37939, 58381, 120466, 80991, 41927, 57373, 58919, 61429, 89335, 127195, 51343, 84419, 121269, 65860, 48259, 127028, 78520, 63971, 75102, 4338, 34971, 33481, 56823, 88191, 68593, 99840, 69604, 91172, 2989, 74462, 21581, 76684, 46996, 71496, 21775, 118168, 33421, 48018, 96307, 117659, 136775, 123435, 52541, 70890, 136312, 56547, 71584]
[2024-12-02 19:49:45.574499] user = 88423 Cloud 244/568
[2024-12-02 19:49:45.585484] user = 88423 Local 244/568
[2024-12-02 19:49:45.637418] user = 88423 Local+ 244/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:49:47.186945] user = 88423 MPDA- 244/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.49866666666666665
Training on augumented user 42953 0/50 current_auc = 0.49866666666666665
User 42953 AUC after training: 0.496
User 42953 does not improve AUC. Reverting changes.
Training on augumented user 108301 1/50 current_auc = 0.49866666666666665
User 108301 AUC after training: 0.496
User 108301 does not improve AUC. Reverting changes.
Training on augumented user 33503 2/50 current_auc = 0.49866666666666665
User 33503 AUC after training: 0.496
User 33503 does not improve AUC. Reverting changes.
Training on augumented user 37939 3/50 current_auc = 0.49866666666666665
User 37939 AUC after training: 0.496
User 37939 does not improve AUC. Reverting changes.
Training on augumented user 58381 4/50 current_auc = 0.49866666666666665
User 58381 AUC after training: 0.496
User 58381 does not improve AUC. Reverting changes.
Training on augumented user 120466 5/50 current_auc = 0.49866666666666665
User 120466 AUC after training: 0.49866666666666665
User 120466 does not improve AUC. Reverting changes.
Training on augumented user 80991 6/50 current_auc = 0.49866666666666665
User 80991 AUC after training: 0.496
User 80991 does not improve AUC. Reverting changes.
Training on augumented user 41927 7/50 current_auc = 0.49866666666666665
User 41927 AUC after training: 0.496
User 41927 does not improve AUC. Reverting changes.
Training on augumented user 57373 8/50 current_auc = 0.49866666666666665
User 57373 AUC after training: 0.496
User 57373 does not improve AUC. Reverting changes.
Training on augumented user 58919 9/50 current_auc = 0.49866666666666665
User 58919 AUC after training: 0.5013333333333333
User 58919 improves AUC. Keeping the model.
Training on augumented user 61429 10/50 current_auc = 0.5013333333333333
User 61429 AUC after training: 0.5013333333333333
User 61429 does not improve AUC. Reverting changes.
Training on augumented user 89335 11/50 current_auc = 0.5013333333333333
User 89335 AUC after training: 0.5013333333333333
User 89335 does not improve AUC. Reverting changes.
Training on augumented user 127195 12/50 current_auc = 0.5013333333333333
User 127195 AUC after training: 0.5013333333333333
User 127195 does not improve AUC. Reverting changes.
Training on augumented user 51343 13/50 current_auc = 0.5013333333333333
User 51343 AUC after training: 0.5013333333333333
User 51343 does not improve AUC. Reverting changes.
Training on augumented user 84419 14/50 current_auc = 0.5013333333333333
User 84419 AUC after training: 0.5013333333333333
User 84419 does not improve AUC. Reverting changes.
Training on augumented user 121269 15/50 current_auc = 0.5013333333333333
User 121269 AUC after training: 0.4986666666666667
User 121269 does not improve AUC. Reverting changes.
Training on augumented user 65860 16/50 current_auc = 0.5013333333333333
User 65860 AUC after training: 0.49333333333333335
User 65860 does not improve AUC. Reverting changes.
Training on augumented user 48259 17/50 current_auc = 0.5013333333333333
User 48259 AUC after training: 0.49866666666666665
User 48259 does not improve AUC. Reverting changes.
Training on augumented user 127028 18/50 current_auc = 0.5013333333333333
User 127028 AUC after training: 0.5013333333333333
User 127028 does not improve AUC. Reverting changes.
Training on augumented user 78520 19/50 current_auc = 0.5013333333333333
User 78520 AUC after training: 0.5013333333333333
User 78520 does not improve AUC. Reverting changes.
Training on augumented user 63971 20/50 current_auc = 0.5013333333333333
User 63971 AUC after training: 0.5013333333333333
User 63971 does not improve AUC. Reverting changes.
Training on augumented user 75102 21/50 current_auc = 0.5013333333333333
User 75102 AUC after training: 0.4986666666666667
User 75102 does not improve AUC. Reverting changes.
Training on augumented user 4338 22/50 current_auc = 0.5013333333333333
User 4338 AUC after training: 0.5013333333333333
User 4338 does not improve AUC. Reverting changes.
Training on augumented user 34971 23/50 current_auc = 0.5013333333333333
User 34971 AUC after training: 0.5013333333333333
User 34971 does not improve AUC. Reverting changes.
Training on augumented user 33481 24/50 current_auc = 0.5013333333333333
User 33481 AUC after training: 0.5013333333333333
User 33481 does not improve AUC. Reverting changes.
Training on augumented user 56823 25/50 current_auc = 0.5013333333333333
User 56823 AUC after training: 0.5013333333333333
User 56823 does not improve AUC. Reverting changes.
Training on augumented user 88191 26/50 current_auc = 0.5013333333333333
User 88191 AUC after training: 0.5013333333333333
User 88191 does not improve AUC. Reverting changes.
Training on augumented user 68593 27/50 current_auc = 0.5013333333333333
User 68593 AUC after training: 0.4986666666666667
User 68593 does not improve AUC. Reverting changes.
Training on augumented user 99840 28/50 current_auc = 0.5013333333333333
User 99840 AUC after training: 0.4986666666666667
User 99840 does not improve AUC. Reverting changes.
Training on augumented user 69604 29/50 current_auc = 0.5013333333333333
User 69604 AUC after training: 0.5013333333333333
User 69604 does not improve AUC. Reverting changes.
Training on augumented user 91172 30/50 current_auc = 0.5013333333333333
User 91172 AUC after training: 0.4906666666666667
User 91172 does not improve AUC. Reverting changes.
Training on augumented user 2989 31/50 current_auc = 0.5013333333333333
User 2989 AUC after training: 0.4986666666666667
User 2989 does not improve AUC. Reverting changes.
Training on augumented user 74462 32/50 current_auc = 0.5013333333333333
User 74462 AUC after training: 0.4986666666666667
User 74462 does not improve AUC. Reverting changes.
Training on augumented user 21581 33/50 current_auc = 0.5013333333333333
User 21581 AUC after training: 0.496
User 21581 does not improve AUC. Reverting changes.
Training on augumented user 76684 34/50 current_auc = 0.5013333333333333
User 76684 AUC after training: 0.4986666666666667
User 76684 does not improve AUC. Reverting changes.
Training on augumented user 46996 35/50 current_auc = 0.5013333333333333
User 46996 AUC after training: 0.4986666666666667
User 46996 does not improve AUC. Reverting changes.
Training on augumented user 71496 36/50 current_auc = 0.5013333333333333
User 71496 AUC after training: 0.5013333333333333
User 71496 does not improve AUC. Reverting changes.
Training on augumented user 21775 37/50 current_auc = 0.5013333333333333
User 21775 AUC after training: 0.5013333333333333
User 21775 does not improve AUC. Reverting changes.
Training on augumented user 118168 38/50 current_auc = 0.5013333333333333
User 118168 AUC after training: 0.49600000000000005
User 118168 does not improve AUC. Reverting changes.
Training on augumented user 33421 39/50 current_auc = 0.5013333333333333
User 33421 AUC after training: 0.49866666666666665
User 33421 does not improve AUC. Reverting changes.
Training on augumented user 48018 40/50 current_auc = 0.5013333333333333
User 48018 AUC after training: 0.5013333333333333
User 48018 does not improve AUC. Reverting changes.
Training on augumented user 96307 41/50 current_auc = 0.5013333333333333
User 96307 AUC after training: 0.5013333333333333
User 96307 does not improve AUC. Reverting changes.
Training on augumented user 117659 42/50 current_auc = 0.5013333333333333
User 117659 AUC after training: 0.49600000000000005
User 117659 does not improve AUC. Reverting changes.
Training on augumented user 136775 43/50 current_auc = 0.5013333333333333
User 136775 AUC after training: 0.49600000000000005
User 136775 does not improve AUC. Reverting changes.
Training on augumented user 123435 44/50 current_auc = 0.5013333333333333
User 123435 AUC after training: 0.5013333333333333
User 123435 does not improve AUC. Reverting changes.
Training on augumented user 52541 45/50 current_auc = 0.5013333333333333
User 52541 AUC after training: 0.5013333333333333
User 52541 does not improve AUC. Reverting changes.
Training on augumented user 70890 46/50 current_auc = 0.5013333333333333
User 70890 AUC after training: 0.5013333333333333
User 70890 does not improve AUC. Reverting changes.
Training on augumented user 136312 47/50 current_auc = 0.5013333333333333
User 136312 AUC after training: 0.49866666666666665
User 136312 does not improve AUC. Reverting changes.
Training on augumented user 56547 48/50 current_auc = 0.5013333333333333
User 56547 AUC after training: 0.49866666666666665
User 56547 does not improve AUC. Reverting changes.
Training on augumented user 71584 49/50 current_auc = 0.5013333333333333
User 71584 AUC after training: 0.49866666666666665
User 71584 does not improve AUC. Reverting changes.
[2024-12-02 19:50:18.224202] start test user 88484 245/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:50:18.709131] start test user 88484 245/568 recall augumented users by random, augumented_users = [130834, 41154, 5937, 128336, 24228, 134688, 76258, 93685, 19896, 49103, 21697, 75820, 122362, 87024, 43805, 62816, 93980, 123008, 85046, 16905, 133152, 74049, 9343, 134811, 116933, 13581, 16937, 105099, 38692, 66084, 60580, 885, 123077, 15317, 121487, 63255, 57401, 130793, 131223, 131802, 94342, 60701, 9707, 23167, 50418, 58827, 80102, 8922, 134206, 65206]
[2024-12-02 19:50:18.724380] user = 88484 Cloud 245/568
[2024-12-02 19:50:18.734681] user = 88484 Local 245/568
[2024-12-02 19:50:18.768334] user = 88484 Local+ 245/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:50:20.483201] user = 88484 MPDA- 245/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6515151515151516
Training on augumented user 130834 0/50 current_auc = 0.6515151515151516
User 130834 AUC after training: 0.6545454545454545
User 130834 improves AUC. Keeping the model.
Training on augumented user 41154 1/50 current_auc = 0.6545454545454545
User 41154 AUC after training: 0.6545454545454545
User 41154 does not improve AUC. Reverting changes.
Training on augumented user 5937 2/50 current_auc = 0.6545454545454545
User 5937 AUC after training: 0.6545454545454545
User 5937 does not improve AUC. Reverting changes.
Training on augumented user 128336 3/50 current_auc = 0.6545454545454545
User 128336 AUC after training: 0.6515151515151516
User 128336 does not improve AUC. Reverting changes.
Training on augumented user 24228 4/50 current_auc = 0.6545454545454545
User 24228 AUC after training: 0.6545454545454545
User 24228 does not improve AUC. Reverting changes.
Training on augumented user 134688 5/50 current_auc = 0.6545454545454545
User 134688 AUC after training: 0.6515151515151516
User 134688 does not improve AUC. Reverting changes.
Training on augumented user 76258 6/50 current_auc = 0.6545454545454545
User 76258 AUC after training: 0.6545454545454545
User 76258 does not improve AUC. Reverting changes.
Training on augumented user 93685 7/50 current_auc = 0.6545454545454545
User 93685 AUC after training: 0.6515151515151516
User 93685 does not improve AUC. Reverting changes.
Training on augumented user 19896 8/50 current_auc = 0.6545454545454545
User 19896 AUC after training: 0.6515151515151516
User 19896 does not improve AUC. Reverting changes.
Training on augumented user 49103 9/50 current_auc = 0.6545454545454545
User 49103 AUC after training: 0.6575757575757576
User 49103 improves AUC. Keeping the model.
Training on augumented user 21697 10/50 current_auc = 0.6575757575757576
User 21697 AUC after training: 0.6575757575757576
User 21697 does not improve AUC. Reverting changes.
Training on augumented user 75820 11/50 current_auc = 0.6575757575757576
User 75820 AUC after training: 0.6575757575757576
User 75820 does not improve AUC. Reverting changes.
Training on augumented user 122362 12/50 current_auc = 0.6575757575757576
User 122362 AUC after training: 0.6575757575757576
User 122362 does not improve AUC. Reverting changes.
Training on augumented user 87024 13/50 current_auc = 0.6575757575757576
User 87024 AUC after training: 0.6575757575757576
User 87024 does not improve AUC. Reverting changes.
Training on augumented user 43805 14/50 current_auc = 0.6575757575757576
User 43805 AUC after training: 0.6575757575757576
User 43805 does not improve AUC. Reverting changes.
Training on augumented user 62816 15/50 current_auc = 0.6575757575757576
User 62816 AUC after training: 0.6575757575757576
User 62816 does not improve AUC. Reverting changes.
Training on augumented user 93980 16/50 current_auc = 0.6575757575757576
User 93980 AUC after training: 0.6575757575757576
User 93980 does not improve AUC. Reverting changes.
Training on augumented user 123008 17/50 current_auc = 0.6575757575757576
User 123008 AUC after training: 0.6575757575757576
User 123008 does not improve AUC. Reverting changes.
Training on augumented user 85046 18/50 current_auc = 0.6575757575757576
User 85046 AUC after training: 0.6575757575757576
User 85046 does not improve AUC. Reverting changes.
Training on augumented user 16905 19/50 current_auc = 0.6575757575757576
User 16905 AUC after training: 0.6575757575757576
User 16905 does not improve AUC. Reverting changes.
Training on augumented user 133152 20/50 current_auc = 0.6575757575757576
User 133152 AUC after training: 0.6575757575757576
User 133152 does not improve AUC. Reverting changes.
Training on augumented user 74049 21/50 current_auc = 0.6575757575757576
User 74049 AUC after training: 0.6575757575757576
User 74049 does not improve AUC. Reverting changes.
Training on augumented user 9343 22/50 current_auc = 0.6575757575757576
User 9343 AUC after training: 0.6575757575757576
User 9343 does not improve AUC. Reverting changes.
Training on augumented user 134811 23/50 current_auc = 0.6575757575757576
User 134811 AUC after training: 0.6575757575757576
User 134811 does not improve AUC. Reverting changes.
Training on augumented user 116933 24/50 current_auc = 0.6575757575757576
User 116933 AUC after training: 0.6575757575757576
User 116933 does not improve AUC. Reverting changes.
Training on augumented user 13581 25/50 current_auc = 0.6575757575757576
User 13581 AUC after training: 0.6575757575757576
User 13581 does not improve AUC. Reverting changes.
Training on augumented user 16937 26/50 current_auc = 0.6575757575757576
User 16937 AUC after training: 0.6575757575757576
User 16937 does not improve AUC. Reverting changes.
Training on augumented user 105099 27/50 current_auc = 0.6575757575757576
User 105099 AUC after training: 0.6575757575757576
User 105099 does not improve AUC. Reverting changes.
Training on augumented user 38692 28/50 current_auc = 0.6575757575757576
User 38692 AUC after training: 0.6545454545454545
User 38692 does not improve AUC. Reverting changes.
Training on augumented user 66084 29/50 current_auc = 0.6575757575757576
User 66084 AUC after training: 0.6575757575757576
User 66084 does not improve AUC. Reverting changes.
Training on augumented user 60580 30/50 current_auc = 0.6575757575757576
User 60580 AUC after training: 0.6575757575757576
User 60580 does not improve AUC. Reverting changes.
Training on augumented user 885 31/50 current_auc = 0.6575757575757576
User 885 AUC after training: 0.6575757575757576
User 885 does not improve AUC. Reverting changes.
Training on augumented user 123077 32/50 current_auc = 0.6575757575757576
User 123077 AUC after training: 0.6575757575757576
User 123077 does not improve AUC. Reverting changes.
Training on augumented user 15317 33/50 current_auc = 0.6575757575757576
User 15317 AUC after training: 0.6575757575757576
User 15317 does not improve AUC. Reverting changes.
Training on augumented user 121487 34/50 current_auc = 0.6575757575757576
User 121487 AUC after training: 0.6575757575757576
User 121487 does not improve AUC. Reverting changes.
Training on augumented user 63255 35/50 current_auc = 0.6575757575757576
User 63255 AUC after training: 0.6484848484848484
User 63255 does not improve AUC. Reverting changes.
Training on augumented user 57401 36/50 current_auc = 0.6575757575757576
User 57401 AUC after training: 0.6545454545454545
User 57401 does not improve AUC. Reverting changes.
Training on augumented user 130793 37/50 current_auc = 0.6575757575757576
User 130793 AUC after training: 0.6545454545454545
User 130793 does not improve AUC. Reverting changes.
Training on augumented user 131223 38/50 current_auc = 0.6575757575757576
User 131223 AUC after training: 0.6575757575757576
User 131223 does not improve AUC. Reverting changes.
Training on augumented user 131802 39/50 current_auc = 0.6575757575757576
User 131802 AUC after training: 0.6575757575757576
User 131802 does not improve AUC. Reverting changes.
Training on augumented user 94342 40/50 current_auc = 0.6575757575757576
User 94342 AUC after training: 0.6575757575757576
User 94342 does not improve AUC. Reverting changes.
Training on augumented user 60701 41/50 current_auc = 0.6575757575757576
User 60701 AUC after training: 0.6575757575757576
User 60701 does not improve AUC. Reverting changes.
Training on augumented user 9707 42/50 current_auc = 0.6575757575757576
User 9707 AUC after training: 0.6575757575757576
User 9707 does not improve AUC. Reverting changes.
Training on augumented user 23167 43/50 current_auc = 0.6575757575757576
User 23167 AUC after training: 0.6575757575757576
User 23167 does not improve AUC. Reverting changes.
Training on augumented user 50418 44/50 current_auc = 0.6575757575757576
User 50418 AUC after training: 0.6575757575757576
User 50418 does not improve AUC. Reverting changes.
Training on augumented user 58827 45/50 current_auc = 0.6575757575757576
User 58827 AUC after training: 0.6575757575757576
User 58827 does not improve AUC. Reverting changes.
Training on augumented user 80102 46/50 current_auc = 0.6575757575757576
User 80102 AUC after training: 0.6575757575757576
User 80102 does not improve AUC. Reverting changes.
Training on augumented user 8922 47/50 current_auc = 0.6575757575757576
User 8922 AUC after training: 0.6575757575757576
User 8922 does not improve AUC. Reverting changes.
Training on augumented user 134206 48/50 current_auc = 0.6575757575757576
User 134206 AUC after training: 0.6575757575757576
User 134206 does not improve AUC. Reverting changes.
Training on augumented user 65206 49/50 current_auc = 0.6575757575757576
User 65206 AUC after training: 0.6575757575757576
User 65206 does not improve AUC. Reverting changes.
[2024-12-02 19:50:48.026667] start test user 88546 246/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:50:48.439271] start test user 88546 246/568 recall augumented users by random, augumented_users = [113795, 60810, 137976, 100323, 98250, 37851, 55552, 36230, 111571, 56449, 95119, 38852, 20945, 111595, 135211, 31896, 27926, 37721, 107312, 130827, 2479, 66537, 20098, 55952, 79579, 6747, 46662, 85421, 122587, 118964, 223, 25978, 80554, 116390, 50988, 102706, 89099, 129854, 76114, 49852, 73921, 85908, 110361, 18009, 110047, 130732, 56417, 78576, 42829, 86139]
[2024-12-02 19:50:48.453911] user = 88546 Cloud 246/568
[2024-12-02 19:50:48.481131] user = 88546 Local 246/568
[2024-12-02 19:50:48.524935] user = 88546 Local+ 246/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:50:50.817294] user = 88546 MPDA- 246/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5258371579126295
Training on augumented user 113795 0/50 current_auc = 0.5258371579126295
User 113795 AUC after training: 0.52568842427333
User 113795 does not improve AUC. Reverting changes.
Training on augumented user 60810 1/50 current_auc = 0.5258371579126295
User 60810 AUC after training: 0.5253697093319735
User 60810 does not improve AUC. Reverting changes.
Training on augumented user 137976 2/50 current_auc = 0.5258371579126295
User 137976 AUC after training: 0.5248597654258031
User 137976 does not improve AUC. Reverting changes.
Training on augumented user 100323 3/50 current_auc = 0.5258371579126295
User 100323 AUC after training: 0.5254122046574876
User 100323 does not improve AUC. Reverting changes.
Training on augumented user 98250 4/50 current_auc = 0.5258371579126295
User 98250 AUC after training: 0.5257734149243583
User 98250 does not improve AUC. Reverting changes.
Training on augumented user 37851 5/50 current_auc = 0.5258371579126295
User 37851 AUC after training: 0.5262408635050145
User 37851 improves AUC. Keeping the model.
Training on augumented user 55552 6/50 current_auc = 0.5262408635050145
User 55552 AUC after training: 0.5262408635050144
User 55552 does not improve AUC. Reverting changes.
Training on augumented user 36230 7/50 current_auc = 0.5262408635050145
User 36230 AUC after training: 0.5264533401325854
User 36230 improves AUC. Keeping the model.
Training on augumented user 111571 8/50 current_auc = 0.5264533401325854
User 111571 AUC after training: 0.5266870644229135
User 111571 improves AUC. Keeping the model.
Training on augumented user 56449 9/50 current_auc = 0.5266870644229135
User 56449 AUC after training: 0.5265170831208567
User 56449 does not improve AUC. Reverting changes.
Training on augumented user 95119 10/50 current_auc = 0.5266870644229135
User 95119 AUC after training: 0.5264958354580996
User 95119 does not improve AUC. Reverting changes.
Training on augumented user 38852 11/50 current_auc = 0.5266870644229135
User 38852 AUC after training: 0.5261771205167431
User 38852 does not improve AUC. Reverting changes.
Training on augumented user 20945 12/50 current_auc = 0.5266870644229135
User 20945 AUC after training: 0.5265170831208568
User 20945 does not improve AUC. Reverting changes.
Training on augumented user 111595 13/50 current_auc = 0.5266870644229135
User 111595 AUC after training: 0.5268570457249703
User 111595 improves AUC. Keeping the model.
Training on augumented user 135211 14/50 current_auc = 0.5268570457249703
User 135211 AUC after training: 0.5270907700152984
User 135211 improves AUC. Keeping the model.
Training on augumented user 31896 15/50 current_auc = 0.5270907700152984
User 31896 AUC after training: 0.5269420363759987
User 31896 does not improve AUC. Reverting changes.
Training on augumented user 27926 16/50 current_auc = 0.5270907700152984
User 27926 AUC after training: 0.5273669896311406
User 27926 improves AUC. Keeping the model.
Training on augumented user 37721 17/50 current_auc = 0.5273669896311406
User 37721 AUC after training: 0.527027027027027
User 37721 does not improve AUC. Reverting changes.
Training on augumented user 107312 18/50 current_auc = 0.5273669896311406
User 107312 AUC after training: 0.5276644569097398
User 107312 improves AUC. Keeping the model.
Training on augumented user 130827 19/50 current_auc = 0.5276644569097398
User 130827 AUC after training: 0.5272819989801122
User 130827 does not improve AUC. Reverting changes.
Training on augumented user 2479 20/50 current_auc = 0.5276644569097398
User 2479 AUC after training: 0.527027027027027
User 2479 does not improve AUC. Reverting changes.
Training on augumented user 66537 21/50 current_auc = 0.5276644569097398
User 66537 AUC after training: 0.52766445690974
User 66537 improves AUC. Keeping the model.
Training on augumented user 20098 22/50 current_auc = 0.52766445690974
User 20098 AUC after training: 0.5276219615842257
User 20098 does not improve AUC. Reverting changes.
Training on augumented user 55952 23/50 current_auc = 0.52766445690974
User 55952 AUC after training: 0.5276219615842257
User 55952 does not improve AUC. Reverting changes.
Training on augumented user 79579 24/50 current_auc = 0.52766445690974
User 79579 AUC after training: 0.5260921298657149
User 79579 does not improve AUC. Reverting changes.
Training on augumented user 6747 25/50 current_auc = 0.52766445690974
User 6747 AUC after training: 0.52766445690974
User 6747 does not improve AUC. Reverting changes.
Training on augumented user 46662 26/50 current_auc = 0.52766445690974
User 46662 AUC after training: 0.5278131905490396
User 46662 improves AUC. Keeping the model.
Training on augumented user 85421 27/50 current_auc = 0.5278131905490396
User 85421 AUC after training: 0.5275582185959544
User 85421 does not improve AUC. Reverting changes.
Training on augumented user 122587 28/50 current_auc = 0.5278131905490396
User 122587 AUC after training: 0.5275794662587114
User 122587 does not improve AUC. Reverting changes.
Training on augumented user 118964 29/50 current_auc = 0.5278131905490396
User 118964 AUC after training: 0.5271545130035696
User 118964 does not improve AUC. Reverting changes.
Training on augumented user 223 30/50 current_auc = 0.5278131905490396
User 223 AUC after training: 0.5275582185959544
User 223 does not improve AUC. Reverting changes.
Training on augumented user 25978 31/50 current_auc = 0.5278131905490396
User 25978 AUC after training: 0.5261771205167431
User 25978 does not improve AUC. Reverting changes.
Training on augumented user 80554 32/50 current_auc = 0.5278131905490396
User 80554 AUC after training: 0.527451980282169
User 80554 does not improve AUC. Reverting changes.
Training on augumented user 116390 33/50 current_auc = 0.5278131905490396
User 116390 AUC after training: 0.5280894101648819
User 116390 improves AUC. Keeping the model.
Training on augumented user 50988 34/50 current_auc = 0.5280894101648819
User 50988 AUC after training: 0.5278769335373108
User 50988 does not improve AUC. Reverting changes.
Training on augumented user 102706 35/50 current_auc = 0.5280894101648819
User 102706 AUC after training: 0.52766445690974
User 102706 does not improve AUC. Reverting changes.
Training on augumented user 89099 36/50 current_auc = 0.5280894101648819
User 89099 AUC after training: 0.5285143634200238
User 89099 improves AUC. Keeping the model.
Training on augumented user 129854 37/50 current_auc = 0.5285143634200238
User 129854 AUC after training: 0.5282593914669386
User 129854 does not improve AUC. Reverting changes.
Training on augumented user 76114 38/50 current_auc = 0.5285143634200238
User 76114 AUC after training: 0.528556858745538
User 76114 improves AUC. Keeping the model.
Training on augumented user 49852 39/50 current_auc = 0.528556858745538
User 49852 AUC after training: 0.5288118306986231
User 49852 improves AUC. Keeping the model.
Training on augumented user 73921 40/50 current_auc = 0.5288118306986231
User 73921 AUC after training: 0.5278344382117968
User 73921 does not improve AUC. Reverting changes.
Training on augumented user 85908 41/50 current_auc = 0.5288118306986231
User 85908 AUC after training: 0.5269845317015128
User 85908 does not improve AUC. Reverting changes.
Training on augumented user 110361 42/50 current_auc = 0.5288118306986231
User 110361 AUC after training: 0.5287693353731089
User 110361 does not improve AUC. Reverting changes.
Training on augumented user 18009 43/50 current_auc = 0.5288118306986231
User 18009 AUC after training: 0.5291092979772225
User 18009 improves AUC. Keeping the model.
Training on augumented user 110047 44/50 current_auc = 0.5291092979772225
User 110047 AUC after training: 0.529003059663437
User 110047 does not improve AUC. Reverting changes.
Training on augumented user 130732 45/50 current_auc = 0.5291092979772225
User 130732 AUC after training: 0.5290455549889511
User 130732 does not improve AUC. Reverting changes.
Training on augumented user 56417 46/50 current_auc = 0.5291092979772225
User 56417 AUC after training: 0.5278131905490396
User 56417 does not improve AUC. Reverting changes.
Training on augumented user 78576 47/50 current_auc = 0.5291092979772225
User 78576 AUC after training: 0.5289605643379228
User 78576 does not improve AUC. Reverting changes.
Training on augumented user 42829 48/50 current_auc = 0.5291092979772225
User 42829 AUC after training: 0.5287480877103519
User 42829 does not improve AUC. Reverting changes.
Training on augumented user 86139 49/50 current_auc = 0.5291092979772225
User 86139 AUC after training: 0.5285993540710522
User 86139 does not improve AUC. Reverting changes.
[2024-12-02 19:51:21.751985] start test user 88561 247/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:51:22.166291] start test user 88561 247/568 recall augumented users by random, augumented_users = [133185, 54479, 42377, 4283, 9281, 72616, 127202, 22782, 126424, 7283, 70291, 18550, 71664, 43928, 77807, 9872, 19418, 5716, 105383, 123729, 103600, 122432, 110076, 122086, 70451, 26026, 67743, 91396, 74914, 5701, 51086, 30703, 124042, 110719, 109883, 18331, 52359, 67728, 32506, 21782, 133165, 74802, 17332, 43553, 34935, 74123, 38639, 24960, 14710, 25810]
[2024-12-02 19:51:22.182633] user = 88561 Cloud 247/568
[2024-12-02 19:51:22.207066] user = 88561 Local 247/568
[2024-12-02 19:51:22.424999] user = 88561 Local+ 247/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:51:24.441742] user = 88561 MPDA- 247/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7114133216348615
Training on augumented user 133185 0/50 current_auc = 0.7114133216348615
User 133185 AUC after training: 0.710828398040506
User 133185 does not improve AUC. Reverting changes.
Training on augumented user 54479 1/50 current_auc = 0.7114133216348615
User 54479 AUC after training: 0.7114133216348615
User 54479 does not improve AUC. Reverting changes.
Training on augumented user 42377 2/50 current_auc = 0.7114133216348615
User 42377 AUC after training: 0.7114133216348615
User 42377 does not improve AUC. Reverting changes.
Training on augumented user 4283 3/50 current_auc = 0.7114133216348615
User 4283 AUC after training: 0.7106090516926227
User 4283 does not improve AUC. Reverting changes.
Training on augumented user 9281 4/50 current_auc = 0.7114133216348615
User 9281 AUC after training: 0.711340206185567
User 9281 does not improve AUC. Reverting changes.
Training on augumented user 72616 5/50 current_auc = 0.7114133216348615
User 72616 AUC after training: 0.7111939752869781
User 72616 does not improve AUC. Reverting changes.
Training on augumented user 127202 6/50 current_auc = 0.7114133216348615
User 127202 AUC after training: 0.7114864370841559
User 127202 improves AUC. Keeping the model.
Training on augumented user 22782 7/50 current_auc = 0.7114864370841559
User 22782 AUC after training: 0.7112670907362726
User 22782 does not improve AUC. Reverting changes.
Training on augumented user 126424 8/50 current_auc = 0.7114864370841559
User 126424 AUC after training: 0.7116326679827448
User 126424 improves AUC. Keeping the model.
Training on augumented user 7283 9/50 current_auc = 0.7116326679827448
User 7283 AUC after training: 0.7117057834320393
User 7283 improves AUC. Keeping the model.
Training on augumented user 70291 10/50 current_auc = 0.7117057834320393
User 70291 AUC after training: 0.7122907070263946
User 70291 improves AUC. Keeping the model.
Training on augumented user 18550 11/50 current_auc = 0.7122907070263946
User 18550 AUC after training: 0.7124369379249835
User 18550 improves AUC. Keeping the model.
Training on augumented user 71664 12/50 current_auc = 0.7124369379249835
User 71664 AUC after training: 0.7123638224756892
User 71664 does not improve AUC. Reverting changes.
Training on augumented user 43928 13/50 current_auc = 0.7124369379249835
User 43928 AUC after training: 0.7117788988813336
User 43928 does not improve AUC. Reverting changes.
Training on augumented user 77807 14/50 current_auc = 0.7124369379249835
User 77807 AUC after training: 0.7122907070263947
User 77807 does not improve AUC. Reverting changes.
Training on augumented user 9872 15/50 current_auc = 0.7124369379249835
User 9872 AUC after training: 0.7135336696644001
User 9872 improves AUC. Keeping the model.
Training on augumented user 19418 16/50 current_auc = 0.7135336696644001
User 19418 AUC after training: 0.7134605542151056
User 19418 does not improve AUC. Reverting changes.
Training on augumented user 5716 17/50 current_auc = 0.7135336696644001
User 5716 AUC after training: 0.7126562842728669
User 5716 does not improve AUC. Reverting changes.
Training on augumented user 105383 18/50 current_auc = 0.7135336696644001
User 105383 AUC after training: 0.7133143233165167
User 105383 does not improve AUC. Reverting changes.
Training on augumented user 123729 19/50 current_auc = 0.7135336696644001
User 123729 AUC after training: 0.7138261314615779
User 123729 improves AUC. Keeping the model.
Training on augumented user 103600 20/50 current_auc = 0.7138261314615779
User 103600 AUC after training: 0.7142648241573444
User 103600 improves AUC. Keeping the model.
Training on augumented user 122432 21/50 current_auc = 0.7142648241573444
User 122432 AUC after training: 0.7122175915771003
User 122432 does not improve AUC. Reverting changes.
Training on augumented user 110076 22/50 current_auc = 0.7142648241573444
User 110076 AUC after training: 0.7142648241573445
User 110076 improves AUC. Keeping the model.
Training on augumented user 122086 23/50 current_auc = 0.7142648241573445
User 122086 AUC after training: 0.7137530160122834
User 122086 does not improve AUC. Reverting changes.
Training on augumented user 70451 24/50 current_auc = 0.7142648241573445
User 70451 AUC after training: 0.71419170870805
User 70451 does not improve AUC. Reverting changes.
Training on augumented user 26026 25/50 current_auc = 0.7142648241573445
User 26026 AUC after training: 0.7140454778094611
User 26026 does not improve AUC. Reverting changes.
Training on augumented user 67743 26/50 current_auc = 0.7142648241573445
User 67743 AUC after training: 0.7127293997221613
User 67743 does not improve AUC. Reverting changes.
Training on augumented user 91396 27/50 current_auc = 0.7142648241573445
User 91396 AUC after training: 0.7141185932587556
User 91396 does not improve AUC. Reverting changes.
Training on augumented user 74914 28/50 current_auc = 0.7142648241573445
User 74914 AUC after training: 0.71419170870805
User 74914 does not improve AUC. Reverting changes.
Training on augumented user 5701 29/50 current_auc = 0.7142648241573445
User 5701 AUC after training: 0.7138992469108723
User 5701 does not improve AUC. Reverting changes.
Training on augumented user 51086 30/50 current_auc = 0.7142648241573445
User 51086 AUC after training: 0.7133874387658112
User 51086 does not improve AUC. Reverting changes.
Training on augumented user 30703 31/50 current_auc = 0.7142648241573445
User 30703 AUC after training: 0.71419170870805
User 30703 does not improve AUC. Reverting changes.
Training on augumented user 124042 32/50 current_auc = 0.7142648241573445
User 124042 AUC after training: 0.7140454778094611
User 124042 does not improve AUC. Reverting changes.
Training on augumented user 110719 33/50 current_auc = 0.7142648241573445
User 110719 AUC after training: 0.7141185932587555
User 110719 does not improve AUC. Reverting changes.
Training on augumented user 109883 34/50 current_auc = 0.7142648241573445
User 109883 AUC after training: 0.7107552825912116
User 109883 does not improve AUC. Reverting changes.
Training on augumented user 18331 35/50 current_auc = 0.7142648241573445
User 18331 AUC after training: 0.7132412078672223
User 18331 does not improve AUC. Reverting changes.
Training on augumented user 52359 36/50 current_auc = 0.7142648241573445
User 52359 AUC after training: 0.7144110550559333
User 52359 improves AUC. Keeping the model.
Training on augumented user 67728 37/50 current_auc = 0.7144110550559333
User 67728 AUC after training: 0.7141185932587556
User 67728 does not improve AUC. Reverting changes.
Training on augumented user 32506 38/50 current_auc = 0.7144110550559333
User 32506 AUC after training: 0.7139723623601667
User 32506 does not improve AUC. Reverting changes.
Training on augumented user 21782 39/50 current_auc = 0.7144110550559333
User 21782 AUC after training: 0.7140454778094611
User 21782 does not improve AUC. Reverting changes.
Training on augumented user 133165 40/50 current_auc = 0.7144110550559333
User 133165 AUC after training: 0.7127293997221613
User 133165 does not improve AUC. Reverting changes.
Training on augumented user 74802 41/50 current_auc = 0.7144110550559333
User 74802 AUC after training: 0.7140454778094611
User 74802 does not improve AUC. Reverting changes.
Training on augumented user 17332 42/50 current_auc = 0.7144110550559333
User 17332 AUC after training: 0.7139723623601667
User 17332 does not improve AUC. Reverting changes.
Training on augumented user 43553 43/50 current_auc = 0.7144110550559333
User 43553 AUC after training: 0.7136067851136945
User 43553 does not improve AUC. Reverting changes.
Training on augumented user 34935 44/50 current_auc = 0.7144110550559333
User 34935 AUC after training: 0.7144841705052277
User 34935 improves AUC. Keeping the model.
Training on augumented user 74123 45/50 current_auc = 0.7144841705052277
User 74123 AUC after training: 0.7147035168531111
User 74123 improves AUC. Keeping the model.
Training on augumented user 38639 46/50 current_auc = 0.7147035168531111
User 38639 AUC after training: 0.7156540176939387
User 38639 improves AUC. Keeping the model.
Training on augumented user 24960 47/50 current_auc = 0.7156540176939387
User 24960 AUC after training: 0.7157271331432331
User 24960 improves AUC. Keeping the model.
Training on augumented user 14710 48/50 current_auc = 0.7157271331432331
User 14710 AUC after training: 0.7154346713460555
User 14710 does not improve AUC. Reverting changes.
Training on augumented user 25810 49/50 current_auc = 0.7157271331432331
User 25810 AUC after training: 0.7158002485925276
User 25810 improves AUC. Keeping the model.
[2024-12-02 19:51:52.978384] start test user 88570 248/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:51:53.392035] start test user 88570 248/568 recall augumented users by random, augumented_users = [138278, 30164, 117791, 72944, 120959, 24283, 76642, 65760, 77101, 115459, 105358, 67244, 2537, 63583, 113906, 54836, 97686, 17900, 34274, 98054, 40088, 127164, 118509, 27999, 128744, 43403, 59325, 121964, 59112, 44846, 42445, 73968, 105825, 65929, 118153, 51818, 121442, 95009, 51527, 47779, 115785, 28604, 87166, 113937, 37520, 122501, 75189, 27349, 56387, 5266]
[2024-12-02 19:51:53.406585] user = 88570 Cloud 248/568
[2024-12-02 19:51:53.416378] user = 88570 Local 248/568
[2024-12-02 19:51:53.454385] user = 88570 Local+ 248/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:51:55.658924] user = 88570 MPDA- 248/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.36363636363636365
Training on augumented user 138278 0/50 current_auc = 0.36363636363636365
User 138278 AUC after training: 0.3582887700534759
User 138278 does not improve AUC. Reverting changes.
Training on augumented user 30164 1/50 current_auc = 0.36363636363636365
User 30164 AUC after training: 0.36363636363636365
User 30164 does not improve AUC. Reverting changes.
Training on augumented user 117791 2/50 current_auc = 0.36363636363636365
User 117791 AUC after training: 0.36363636363636365
User 117791 does not improve AUC. Reverting changes.
Training on augumented user 72944 3/50 current_auc = 0.36363636363636365
User 72944 AUC after training: 0.36363636363636365
User 72944 does not improve AUC. Reverting changes.
Training on augumented user 120959 4/50 current_auc = 0.36363636363636365
User 120959 AUC after training: 0.3529411764705882
User 120959 does not improve AUC. Reverting changes.
Training on augumented user 24283 5/50 current_auc = 0.36363636363636365
User 24283 AUC after training: 0.36363636363636365
User 24283 does not improve AUC. Reverting changes.
Training on augumented user 76642 6/50 current_auc = 0.36363636363636365
User 76642 AUC after training: 0.36363636363636365
User 76642 does not improve AUC. Reverting changes.
Training on augumented user 65760 7/50 current_auc = 0.36363636363636365
User 65760 AUC after training: 0.3582887700534759
User 65760 does not improve AUC. Reverting changes.
Training on augumented user 77101 8/50 current_auc = 0.36363636363636365
User 77101 AUC after training: 0.36363636363636365
User 77101 does not improve AUC. Reverting changes.
Training on augumented user 115459 9/50 current_auc = 0.36363636363636365
User 115459 AUC after training: 0.3475935828877005
User 115459 does not improve AUC. Reverting changes.
Training on augumented user 105358 10/50 current_auc = 0.36363636363636365
User 105358 AUC after training: 0.36363636363636365
User 105358 does not improve AUC. Reverting changes.
Training on augumented user 67244 11/50 current_auc = 0.36363636363636365
User 67244 AUC after training: 0.3582887700534759
User 67244 does not improve AUC. Reverting changes.
Training on augumented user 2537 12/50 current_auc = 0.36363636363636365
User 2537 AUC after training: 0.36363636363636365
User 2537 does not improve AUC. Reverting changes.
Training on augumented user 63583 13/50 current_auc = 0.36363636363636365
User 63583 AUC after training: 0.3582887700534759
User 63583 does not improve AUC. Reverting changes.
Training on augumented user 113906 14/50 current_auc = 0.36363636363636365
User 113906 AUC after training: 0.3582887700534759
User 113906 does not improve AUC. Reverting changes.
Training on augumented user 54836 15/50 current_auc = 0.36363636363636365
User 54836 AUC after training: 0.36363636363636365
User 54836 does not improve AUC. Reverting changes.
Training on augumented user 97686 16/50 current_auc = 0.36363636363636365
User 97686 AUC after training: 0.36363636363636365
User 97686 does not improve AUC. Reverting changes.
Training on augumented user 17900 17/50 current_auc = 0.36363636363636365
User 17900 AUC after training: 0.36363636363636365
User 17900 does not improve AUC. Reverting changes.
Training on augumented user 34274 18/50 current_auc = 0.36363636363636365
User 34274 AUC after training: 0.36363636363636365
User 34274 does not improve AUC. Reverting changes.
Training on augumented user 98054 19/50 current_auc = 0.36363636363636365
User 98054 AUC after training: 0.36363636363636365
User 98054 does not improve AUC. Reverting changes.
Training on augumented user 40088 20/50 current_auc = 0.36363636363636365
User 40088 AUC after training: 0.36363636363636365
User 40088 does not improve AUC. Reverting changes.
Training on augumented user 127164 21/50 current_auc = 0.36363636363636365
User 127164 AUC after training: 0.3529411764705882
User 127164 does not improve AUC. Reverting changes.
Training on augumented user 118509 22/50 current_auc = 0.36363636363636365
User 118509 AUC after training: 0.36363636363636365
User 118509 does not improve AUC. Reverting changes.
Training on augumented user 27999 23/50 current_auc = 0.36363636363636365
User 27999 AUC after training: 0.3582887700534759
User 27999 does not improve AUC. Reverting changes.
Training on augumented user 128744 24/50 current_auc = 0.36363636363636365
User 128744 AUC after training: 0.3582887700534759
User 128744 does not improve AUC. Reverting changes.
Training on augumented user 43403 25/50 current_auc = 0.36363636363636365
User 43403 AUC after training: 0.3475935828877005
User 43403 does not improve AUC. Reverting changes.
Training on augumented user 59325 26/50 current_auc = 0.36363636363636365
User 59325 AUC after training: 0.36363636363636365
User 59325 does not improve AUC. Reverting changes.
Training on augumented user 121964 27/50 current_auc = 0.36363636363636365
User 121964 AUC after training: 0.3582887700534759
User 121964 does not improve AUC. Reverting changes.
Training on augumented user 59112 28/50 current_auc = 0.36363636363636365
User 59112 AUC after training: 0.3529411764705882
User 59112 does not improve AUC. Reverting changes.
Training on augumented user 44846 29/50 current_auc = 0.36363636363636365
User 44846 AUC after training: 0.3475935828877005
User 44846 does not improve AUC. Reverting changes.
Training on augumented user 42445 30/50 current_auc = 0.36363636363636365
User 42445 AUC after training: 0.3529411764705882
User 42445 does not improve AUC. Reverting changes.
Training on augumented user 73968 31/50 current_auc = 0.36363636363636365
User 73968 AUC after training: 0.36363636363636365
User 73968 does not improve AUC. Reverting changes.
Training on augumented user 105825 32/50 current_auc = 0.36363636363636365
User 105825 AUC after training: 0.36363636363636365
User 105825 does not improve AUC. Reverting changes.
Training on augumented user 65929 33/50 current_auc = 0.36363636363636365
User 65929 AUC after training: 0.36363636363636365
User 65929 does not improve AUC. Reverting changes.
Training on augumented user 118153 34/50 current_auc = 0.36363636363636365
User 118153 AUC after training: 0.3582887700534759
User 118153 does not improve AUC. Reverting changes.
Training on augumented user 51818 35/50 current_auc = 0.36363636363636365
User 51818 AUC after training: 0.3529411764705882
User 51818 does not improve AUC. Reverting changes.
Training on augumented user 121442 36/50 current_auc = 0.36363636363636365
User 121442 AUC after training: 0.3582887700534759
User 121442 does not improve AUC. Reverting changes.
Training on augumented user 95009 37/50 current_auc = 0.36363636363636365
User 95009 AUC after training: 0.3529411764705882
User 95009 does not improve AUC. Reverting changes.
Training on augumented user 51527 38/50 current_auc = 0.36363636363636365
User 51527 AUC after training: 0.36363636363636365
User 51527 does not improve AUC. Reverting changes.
Training on augumented user 47779 39/50 current_auc = 0.36363636363636365
User 47779 AUC after training: 0.3582887700534759
User 47779 does not improve AUC. Reverting changes.
Training on augumented user 115785 40/50 current_auc = 0.36363636363636365
User 115785 AUC after training: 0.36363636363636365
User 115785 does not improve AUC. Reverting changes.
Training on augumented user 28604 41/50 current_auc = 0.36363636363636365
User 28604 AUC after training: 0.36363636363636365
User 28604 does not improve AUC. Reverting changes.
Training on augumented user 87166 42/50 current_auc = 0.36363636363636365
User 87166 AUC after training: 0.3582887700534759
User 87166 does not improve AUC. Reverting changes.
Training on augumented user 113937 43/50 current_auc = 0.36363636363636365
User 113937 AUC after training: 0.36363636363636365
User 113937 does not improve AUC. Reverting changes.
Training on augumented user 37520 44/50 current_auc = 0.36363636363636365
User 37520 AUC after training: 0.3582887700534759
User 37520 does not improve AUC. Reverting changes.
Training on augumented user 122501 45/50 current_auc = 0.36363636363636365
User 122501 AUC after training: 0.36363636363636365
User 122501 does not improve AUC. Reverting changes.
Training on augumented user 75189 46/50 current_auc = 0.36363636363636365
User 75189 AUC after training: 0.36363636363636365
User 75189 does not improve AUC. Reverting changes.
Training on augumented user 27349 47/50 current_auc = 0.36363636363636365
User 27349 AUC after training: 0.3689839572192513
User 27349 improves AUC. Keeping the model.
Training on augumented user 56387 48/50 current_auc = 0.3689839572192513
User 56387 AUC after training: 0.3689839572192513
User 56387 does not improve AUC. Reverting changes.
Training on augumented user 5266 49/50 current_auc = 0.3689839572192513
User 5266 AUC after training: 0.3689839572192513
User 5266 does not improve AUC. Reverting changes.
[2024-12-02 19:52:24.271844] start test user 88574 249/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:52:24.810921] start test user 88574 249/568 recall augumented users by random, augumented_users = [115092, 58205, 86057, 50738, 46748, 54527, 10935, 49820, 108246, 38073, 125512, 51049, 75429, 3499, 33266, 3851, 23296, 102833, 25494, 68306, 70551, 6126, 134882, 7034, 51532, 79382, 137064, 81094, 55409, 86778, 41799, 67095, 125342, 60561, 105668, 533, 97349, 104591, 124472, 113232, 26169, 127023, 15131, 67317, 10035, 123273, 98634, 23786, 131207, 84635]
[2024-12-02 19:52:24.827572] user = 88574 Cloud 249/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:52:24.834717] user = 88574 Local 249/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:52:24.860480] user = 88574 Local+ 249/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:52:27.373909] user = 88574 MPDA- 249/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 115092 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115092 AUC after training: 0.5
User 115092 does not improve AUC. Reverting changes.
Training on augumented user 58205 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58205 AUC after training: 0.5
User 58205 does not improve AUC. Reverting changes.
Training on augumented user 86057 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86057 AUC after training: 0.5
User 86057 does not improve AUC. Reverting changes.
Training on augumented user 50738 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50738 AUC after training: 0.5
User 50738 does not improve AUC. Reverting changes.
Training on augumented user 46748 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46748 AUC after training: 0.5
User 46748 does not improve AUC. Reverting changes.
Training on augumented user 54527 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54527 AUC after training: 0.5
User 54527 does not improve AUC. Reverting changes.
Training on augumented user 10935 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10935 AUC after training: 0.5
User 10935 does not improve AUC. Reverting changes.
Training on augumented user 49820 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49820 AUC after training: 0.5
User 49820 does not improve AUC. Reverting changes.
Training on augumented user 108246 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108246 AUC after training: 0.5
User 108246 does not improve AUC. Reverting changes.
Training on augumented user 38073 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38073 AUC after training: 0.5
User 38073 does not improve AUC. Reverting changes.
Training on augumented user 125512 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125512 AUC after training: 0.5
User 125512 does not improve AUC. Reverting changes.
Training on augumented user 51049 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51049 AUC after training: 0.5
User 51049 does not improve AUC. Reverting changes.
Training on augumented user 75429 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75429 AUC after training: 0.5
User 75429 does not improve AUC. Reverting changes.
Training on augumented user 3499 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3499 AUC after training: 0.5
User 3499 does not improve AUC. Reverting changes.
Training on augumented user 33266 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33266 AUC after training: 0.5
User 33266 does not improve AUC. Reverting changes.
Training on augumented user 3851 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3851 AUC after training: 0.5
User 3851 does not improve AUC. Reverting changes.
Training on augumented user 23296 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23296 AUC after training: 0.5
User 23296 does not improve AUC. Reverting changes.
Training on augumented user 102833 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102833 AUC after training: 0.5
User 102833 does not improve AUC. Reverting changes.
Training on augumented user 25494 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25494 AUC after training: 0.5
User 25494 does not improve AUC. Reverting changes.
Training on augumented user 68306 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68306 AUC after training: 0.5
User 68306 does not improve AUC. Reverting changes.
Training on augumented user 70551 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70551 AUC after training: 0.5
User 70551 does not improve AUC. Reverting changes.
Training on augumented user 6126 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6126 AUC after training: 0.5
User 6126 does not improve AUC. Reverting changes.
Training on augumented user 134882 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134882 AUC after training: 0.5
User 134882 does not improve AUC. Reverting changes.
Training on augumented user 7034 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7034 AUC after training: 0.5
User 7034 does not improve AUC. Reverting changes.
Training on augumented user 51532 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51532 AUC after training: 0.5
User 51532 does not improve AUC. Reverting changes.
Training on augumented user 79382 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79382 AUC after training: 0.5
User 79382 does not improve AUC. Reverting changes.
Training on augumented user 137064 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137064 AUC after training: 0.5
User 137064 does not improve AUC. Reverting changes.
Training on augumented user 81094 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81094 AUC after training: 0.5
User 81094 does not improve AUC. Reverting changes.
Training on augumented user 55409 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55409 AUC after training: 0.5
User 55409 does not improve AUC. Reverting changes.
Training on augumented user 86778 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86778 AUC after training: 0.5
User 86778 does not improve AUC. Reverting changes.
Training on augumented user 41799 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41799 AUC after training: 0.5
User 41799 does not improve AUC. Reverting changes.
Training on augumented user 67095 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67095 AUC after training: 0.5
User 67095 does not improve AUC. Reverting changes.
Training on augumented user 125342 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125342 AUC after training: 0.5
User 125342 does not improve AUC. Reverting changes.
Training on augumented user 60561 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60561 AUC after training: 0.5
User 60561 does not improve AUC. Reverting changes.
Training on augumented user 105668 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105668 AUC after training: 0.5
User 105668 does not improve AUC. Reverting changes.
Training on augumented user 533 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 533 AUC after training: 0.5
User 533 does not improve AUC. Reverting changes.
Training on augumented user 97349 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97349 AUC after training: 0.5
User 97349 does not improve AUC. Reverting changes.
Training on augumented user 104591 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104591 AUC after training: 0.5
User 104591 does not improve AUC. Reverting changes.
Training on augumented user 124472 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124472 AUC after training: 0.5
User 124472 does not improve AUC. Reverting changes.
Training on augumented user 113232 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113232 AUC after training: 0.5
User 113232 does not improve AUC. Reverting changes.
Training on augumented user 26169 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26169 AUC after training: 0.5
User 26169 does not improve AUC. Reverting changes.
Training on augumented user 127023 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127023 AUC after training: 0.5
User 127023 does not improve AUC. Reverting changes.
Training on augumented user 15131 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15131 AUC after training: 0.5
User 15131 does not improve AUC. Reverting changes.
Training on augumented user 67317 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67317 AUC after training: 0.5
User 67317 does not improve AUC. Reverting changes.
Training on augumented user 10035 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10035 AUC after training: 0.5
User 10035 does not improve AUC. Reverting changes.
Training on augumented user 123273 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123273 AUC after training: 0.5
User 123273 does not improve AUC. Reverting changes.
Training on augumented user 98634 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98634 AUC after training: 0.5
User 98634 does not improve AUC. Reverting changes.
Training on augumented user 23786 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23786 AUC after training: 0.5
User 23786 does not improve AUC. Reverting changes.
Training on augumented user 131207 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131207 AUC after training: 0.5
User 131207 does not improve AUC. Reverting changes.
Training on augumented user 84635 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84635 AUC after training: 0.5
User 84635 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:52:57.274572] start test user 88628 250/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:52:57.809316] start test user 88628 250/568 recall augumented users by random, augumented_users = [21048, 31676, 119221, 34680, 98989, 80693, 36804, 54297, 131005, 24549, 88493, 60205, 91263, 63673, 34006, 94555, 82175, 70205, 100349, 118730, 25507, 48822, 70986, 23654, 133468, 46571, 57029, 50963, 9887, 32761, 63431, 92035, 2591, 92754, 91043, 20075, 89554, 15462, 131884, 76206, 84780, 70006, 56817, 66098, 19336, 42094, 109929, 127233, 107555, 136221]
[2024-12-02 19:52:57.827290] user = 88628 Cloud 250/568
[2024-12-02 19:52:57.838842] user = 88628 Local 250/568
[2024-12-02 19:52:57.929462] user = 88628 Local+ 250/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:53:00.184266] user = 88628 MPDA- 250/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 21048 0/50 current_auc = 1.0
User 21048 AUC after training: 1.0
User 21048 does not improve AUC. Reverting changes.
Training on augumented user 31676 1/50 current_auc = 1.0
User 31676 AUC after training: 1.0
User 31676 does not improve AUC. Reverting changes.
Training on augumented user 119221 2/50 current_auc = 1.0
User 119221 AUC after training: 1.0
User 119221 does not improve AUC. Reverting changes.
Training on augumented user 34680 3/50 current_auc = 1.0
User 34680 AUC after training: 1.0
User 34680 does not improve AUC. Reverting changes.
Training on augumented user 98989 4/50 current_auc = 1.0
User 98989 AUC after training: 1.0
User 98989 does not improve AUC. Reverting changes.
Training on augumented user 80693 5/50 current_auc = 1.0
User 80693 AUC after training: 1.0
User 80693 does not improve AUC. Reverting changes.
Training on augumented user 36804 6/50 current_auc = 1.0
User 36804 AUC after training: 1.0
User 36804 does not improve AUC. Reverting changes.
Training on augumented user 54297 7/50 current_auc = 1.0
User 54297 AUC after training: 1.0
User 54297 does not improve AUC. Reverting changes.
Training on augumented user 131005 8/50 current_auc = 1.0
User 131005 AUC after training: 1.0
User 131005 does not improve AUC. Reverting changes.
Training on augumented user 24549 9/50 current_auc = 1.0
User 24549 AUC after training: 1.0
User 24549 does not improve AUC. Reverting changes.
Training on augumented user 88493 10/50 current_auc = 1.0
User 88493 AUC after training: 1.0
User 88493 does not improve AUC. Reverting changes.
Training on augumented user 60205 11/50 current_auc = 1.0
User 60205 AUC after training: 1.0
User 60205 does not improve AUC. Reverting changes.
Training on augumented user 91263 12/50 current_auc = 1.0
User 91263 AUC after training: 1.0
User 91263 does not improve AUC. Reverting changes.
Training on augumented user 63673 13/50 current_auc = 1.0
User 63673 AUC after training: 1.0
User 63673 does not improve AUC. Reverting changes.
Training on augumented user 34006 14/50 current_auc = 1.0
User 34006 AUC after training: 1.0
User 34006 does not improve AUC. Reverting changes.
Training on augumented user 94555 15/50 current_auc = 1.0
User 94555 AUC after training: 1.0
User 94555 does not improve AUC. Reverting changes.
Training on augumented user 82175 16/50 current_auc = 1.0
User 82175 AUC after training: 1.0
User 82175 does not improve AUC. Reverting changes.
Training on augumented user 70205 17/50 current_auc = 1.0
User 70205 AUC after training: 1.0
User 70205 does not improve AUC. Reverting changes.
Training on augumented user 100349 18/50 current_auc = 1.0
User 100349 AUC after training: 1.0
User 100349 does not improve AUC. Reverting changes.
Training on augumented user 118730 19/50 current_auc = 1.0
User 118730 AUC after training: 1.0
User 118730 does not improve AUC. Reverting changes.
Training on augumented user 25507 20/50 current_auc = 1.0
User 25507 AUC after training: 1.0
User 25507 does not improve AUC. Reverting changes.
Training on augumented user 48822 21/50 current_auc = 1.0
User 48822 AUC after training: 1.0
User 48822 does not improve AUC. Reverting changes.
Training on augumented user 70986 22/50 current_auc = 1.0
User 70986 AUC after training: 1.0
User 70986 does not improve AUC. Reverting changes.
Training on augumented user 23654 23/50 current_auc = 1.0
User 23654 AUC after training: 1.0
User 23654 does not improve AUC. Reverting changes.
Training on augumented user 133468 24/50 current_auc = 1.0
User 133468 AUC after training: 1.0
User 133468 does not improve AUC. Reverting changes.
Training on augumented user 46571 25/50 current_auc = 1.0
User 46571 AUC after training: 1.0
User 46571 does not improve AUC. Reverting changes.
Training on augumented user 57029 26/50 current_auc = 1.0
User 57029 AUC after training: 1.0
User 57029 does not improve AUC. Reverting changes.
Training on augumented user 50963 27/50 current_auc = 1.0
User 50963 AUC after training: 1.0
User 50963 does not improve AUC. Reverting changes.
Training on augumented user 9887 28/50 current_auc = 1.0
User 9887 AUC after training: 1.0
User 9887 does not improve AUC. Reverting changes.
Training on augumented user 32761 29/50 current_auc = 1.0
User 32761 AUC after training: 1.0
User 32761 does not improve AUC. Reverting changes.
Training on augumented user 63431 30/50 current_auc = 1.0
User 63431 AUC after training: 1.0
User 63431 does not improve AUC. Reverting changes.
Training on augumented user 92035 31/50 current_auc = 1.0
User 92035 AUC after training: 1.0
User 92035 does not improve AUC. Reverting changes.
Training on augumented user 2591 32/50 current_auc = 1.0
User 2591 AUC after training: 1.0
User 2591 does not improve AUC. Reverting changes.
Training on augumented user 92754 33/50 current_auc = 1.0
User 92754 AUC after training: 1.0
User 92754 does not improve AUC. Reverting changes.
Training on augumented user 91043 34/50 current_auc = 1.0
User 91043 AUC after training: 1.0
User 91043 does not improve AUC. Reverting changes.
Training on augumented user 20075 35/50 current_auc = 1.0
User 20075 AUC after training: 1.0
User 20075 does not improve AUC. Reverting changes.
Training on augumented user 89554 36/50 current_auc = 1.0
User 89554 AUC after training: 1.0
User 89554 does not improve AUC. Reverting changes.
Training on augumented user 15462 37/50 current_auc = 1.0
User 15462 AUC after training: 1.0
User 15462 does not improve AUC. Reverting changes.
Training on augumented user 131884 38/50 current_auc = 1.0
User 131884 AUC after training: 1.0
User 131884 does not improve AUC. Reverting changes.
Training on augumented user 76206 39/50 current_auc = 1.0
User 76206 AUC after training: 1.0
User 76206 does not improve AUC. Reverting changes.
Training on augumented user 84780 40/50 current_auc = 1.0
User 84780 AUC after training: 1.0
User 84780 does not improve AUC. Reverting changes.
Training on augumented user 70006 41/50 current_auc = 1.0
User 70006 AUC after training: 1.0
User 70006 does not improve AUC. Reverting changes.
Training on augumented user 56817 42/50 current_auc = 1.0
User 56817 AUC after training: 1.0
User 56817 does not improve AUC. Reverting changes.
Training on augumented user 66098 43/50 current_auc = 1.0
User 66098 AUC after training: 1.0
User 66098 does not improve AUC. Reverting changes.
Training on augumented user 19336 44/50 current_auc = 1.0
User 19336 AUC after training: 1.0
User 19336 does not improve AUC. Reverting changes.
Training on augumented user 42094 45/50 current_auc = 1.0
User 42094 AUC after training: 1.0
User 42094 does not improve AUC. Reverting changes.
Training on augumented user 109929 46/50 current_auc = 1.0
User 109929 AUC after training: 1.0
User 109929 does not improve AUC. Reverting changes.
Training on augumented user 127233 47/50 current_auc = 1.0
User 127233 AUC after training: 1.0
User 127233 does not improve AUC. Reverting changes.
Training on augumented user 107555 48/50 current_auc = 1.0
User 107555 AUC after training: 1.0
User 107555 does not improve AUC. Reverting changes.
Training on augumented user 136221 49/50 current_auc = 1.0
User 136221 AUC after training: 1.0
User 136221 does not improve AUC. Reverting changes.
[2024-12-02 19:53:29.652841] start test user 88641 251/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:53:30.067876] start test user 88641 251/568 recall augumented users by random, augumented_users = [119661, 92661, 59927, 93660, 76164, 48687, 95013, 89324, 49193, 66355, 30392, 103350, 104002, 129587, 98740, 119689, 113888, 50411, 35650, 55705, 55305, 52991, 17761, 101065, 40566, 13556, 134325, 63591, 133202, 131520, 56273, 51882, 118048, 56443, 68389, 105973, 95234, 122200, 128394, 122586, 38565, 86275, 88949, 7729, 64594, 10318, 137179, 78336, 40103, 98684]
[2024-12-02 19:53:30.083684] user = 88641 Cloud 251/568
[2024-12-02 19:53:30.093948] user = 88641 Local 251/568
[2024-12-02 19:53:30.225002] user = 88641 Local+ 251/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:53:33.154671] user = 88641 MPDA- 251/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7272727272727272
Training on augumented user 119661 0/50 current_auc = 0.7272727272727272
User 119661 AUC after training: 0.7272727272727272
User 119661 does not improve AUC. Reverting changes.
Training on augumented user 92661 1/50 current_auc = 0.7272727272727272
User 92661 AUC after training: 0.7272727272727272
User 92661 does not improve AUC. Reverting changes.
Training on augumented user 59927 2/50 current_auc = 0.7272727272727272
User 59927 AUC after training: 0.7272727272727272
User 59927 does not improve AUC. Reverting changes.
Training on augumented user 93660 3/50 current_auc = 0.7272727272727272
User 93660 AUC after training: 0.7272727272727272
User 93660 does not improve AUC. Reverting changes.
Training on augumented user 76164 4/50 current_auc = 0.7272727272727272
User 76164 AUC after training: 0.7272727272727272
User 76164 does not improve AUC. Reverting changes.
Training on augumented user 48687 5/50 current_auc = 0.7272727272727272
User 48687 AUC after training: 0.7272727272727272
User 48687 does not improve AUC. Reverting changes.
Training on augumented user 95013 6/50 current_auc = 0.7272727272727272
User 95013 AUC after training: 0.7272727272727272
User 95013 does not improve AUC. Reverting changes.
Training on augumented user 89324 7/50 current_auc = 0.7272727272727272
User 89324 AUC after training: 0.7272727272727272
User 89324 does not improve AUC. Reverting changes.
Training on augumented user 49193 8/50 current_auc = 0.7272727272727272
User 49193 AUC after training: 0.7272727272727272
User 49193 does not improve AUC. Reverting changes.
Training on augumented user 66355 9/50 current_auc = 0.7272727272727272
User 66355 AUC after training: 0.7272727272727272
User 66355 does not improve AUC. Reverting changes.
Training on augumented user 30392 10/50 current_auc = 0.7272727272727272
User 30392 AUC after training: 0.7272727272727272
User 30392 does not improve AUC. Reverting changes.
Training on augumented user 103350 11/50 current_auc = 0.7272727272727272
User 103350 AUC after training: 0.7272727272727272
User 103350 does not improve AUC. Reverting changes.
Training on augumented user 104002 12/50 current_auc = 0.7272727272727272
User 104002 AUC after training: 0.7272727272727272
User 104002 does not improve AUC. Reverting changes.
Training on augumented user 129587 13/50 current_auc = 0.7272727272727272
User 129587 AUC after training: 0.7272727272727272
User 129587 does not improve AUC. Reverting changes.
Training on augumented user 98740 14/50 current_auc = 0.7272727272727272
User 98740 AUC after training: 0.7272727272727272
User 98740 does not improve AUC. Reverting changes.
Training on augumented user 119689 15/50 current_auc = 0.7272727272727272
User 119689 AUC after training: 0.7272727272727272
User 119689 does not improve AUC. Reverting changes.
Training on augumented user 113888 16/50 current_auc = 0.7272727272727272
User 113888 AUC after training: 0.7272727272727272
User 113888 does not improve AUC. Reverting changes.
Training on augumented user 50411 17/50 current_auc = 0.7272727272727272
User 50411 AUC after training: 0.7272727272727272
User 50411 does not improve AUC. Reverting changes.
Training on augumented user 35650 18/50 current_auc = 0.7272727272727272
User 35650 AUC after training: 0.7272727272727272
User 35650 does not improve AUC. Reverting changes.
Training on augumented user 55705 19/50 current_auc = 0.7272727272727272
User 55705 AUC after training: 0.7272727272727272
User 55705 does not improve AUC. Reverting changes.
Training on augumented user 55305 20/50 current_auc = 0.7272727272727272
User 55305 AUC after training: 0.7272727272727272
User 55305 does not improve AUC. Reverting changes.
Training on augumented user 52991 21/50 current_auc = 0.7272727272727272
User 52991 AUC after training: 0.7272727272727272
User 52991 does not improve AUC. Reverting changes.
Training on augumented user 17761 22/50 current_auc = 0.7272727272727272
User 17761 AUC after training: 0.7272727272727272
User 17761 does not improve AUC. Reverting changes.
Training on augumented user 101065 23/50 current_auc = 0.7272727272727272
User 101065 AUC after training: 0.7272727272727272
User 101065 does not improve AUC. Reverting changes.
Training on augumented user 40566 24/50 current_auc = 0.7272727272727272
User 40566 AUC after training: 0.7272727272727272
User 40566 does not improve AUC. Reverting changes.
Training on augumented user 13556 25/50 current_auc = 0.7272727272727272
User 13556 AUC after training: 0.7272727272727272
User 13556 does not improve AUC. Reverting changes.
Training on augumented user 134325 26/50 current_auc = 0.7272727272727272
User 134325 AUC after training: 0.7272727272727272
User 134325 does not improve AUC. Reverting changes.
Training on augumented user 63591 27/50 current_auc = 0.7272727272727272
User 63591 AUC after training: 0.7272727272727272
User 63591 does not improve AUC. Reverting changes.
Training on augumented user 133202 28/50 current_auc = 0.7272727272727272
User 133202 AUC after training: 0.7272727272727272
User 133202 does not improve AUC. Reverting changes.
Training on augumented user 131520 29/50 current_auc = 0.7272727272727272
User 131520 AUC after training: 0.7272727272727272
User 131520 does not improve AUC. Reverting changes.
Training on augumented user 56273 30/50 current_auc = 0.7272727272727272
User 56273 AUC after training: 0.7272727272727272
User 56273 does not improve AUC. Reverting changes.
Training on augumented user 51882 31/50 current_auc = 0.7272727272727272
User 51882 AUC after training: 0.7272727272727272
User 51882 does not improve AUC. Reverting changes.
Training on augumented user 118048 32/50 current_auc = 0.7272727272727272
User 118048 AUC after training: 0.7272727272727272
User 118048 does not improve AUC. Reverting changes.
Training on augumented user 56443 33/50 current_auc = 0.7272727272727272
User 56443 AUC after training: 0.7272727272727272
User 56443 does not improve AUC. Reverting changes.
Training on augumented user 68389 34/50 current_auc = 0.7272727272727272
User 68389 AUC after training: 0.7272727272727272
User 68389 does not improve AUC. Reverting changes.
Training on augumented user 105973 35/50 current_auc = 0.7272727272727272
User 105973 AUC after training: 0.7272727272727272
User 105973 does not improve AUC. Reverting changes.
Training on augumented user 95234 36/50 current_auc = 0.7272727272727272
User 95234 AUC after training: 0.7272727272727272
User 95234 does not improve AUC. Reverting changes.
Training on augumented user 122200 37/50 current_auc = 0.7272727272727272
User 122200 AUC after training: 0.7272727272727272
User 122200 does not improve AUC. Reverting changes.
Training on augumented user 128394 38/50 current_auc = 0.7272727272727272
User 128394 AUC after training: 0.7272727272727272
User 128394 does not improve AUC. Reverting changes.
Training on augumented user 122586 39/50 current_auc = 0.7272727272727272
User 122586 AUC after training: 0.7272727272727272
User 122586 does not improve AUC. Reverting changes.
Training on augumented user 38565 40/50 current_auc = 0.7272727272727272
User 38565 AUC after training: 0.7272727272727272
User 38565 does not improve AUC. Reverting changes.
Training on augumented user 86275 41/50 current_auc = 0.7272727272727272
User 86275 AUC after training: 0.7272727272727272
User 86275 does not improve AUC. Reverting changes.
Training on augumented user 88949 42/50 current_auc = 0.7272727272727272
User 88949 AUC after training: 0.7272727272727272
User 88949 does not improve AUC. Reverting changes.
Training on augumented user 7729 43/50 current_auc = 0.7272727272727272
User 7729 AUC after training: 0.7272727272727272
User 7729 does not improve AUC. Reverting changes.
Training on augumented user 64594 44/50 current_auc = 0.7272727272727272
User 64594 AUC after training: 0.7272727272727272
User 64594 does not improve AUC. Reverting changes.
Training on augumented user 10318 45/50 current_auc = 0.7272727272727272
User 10318 AUC after training: 0.7272727272727272
User 10318 does not improve AUC. Reverting changes.
Training on augumented user 137179 46/50 current_auc = 0.7272727272727272
User 137179 AUC after training: 0.7272727272727272
User 137179 does not improve AUC. Reverting changes.
Training on augumented user 78336 47/50 current_auc = 0.7272727272727272
User 78336 AUC after training: 0.7272727272727272
User 78336 does not improve AUC. Reverting changes.
Training on augumented user 40103 48/50 current_auc = 0.7272727272727272
User 40103 AUC after training: 0.7272727272727272
User 40103 does not improve AUC. Reverting changes.
Training on augumented user 98684 49/50 current_auc = 0.7272727272727272
User 98684 AUC after training: 0.7272727272727272
User 98684 does not improve AUC. Reverting changes.
[2024-12-02 19:54:01.212466] start test user 88646 252/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:54:01.850356] start test user 88646 252/568 recall augumented users by random, augumented_users = [122898, 112239, 33157, 40164, 26352, 74681, 93784, 53923, 59521, 98100, 55006, 55057, 58261, 40957, 55132, 39028, 77749, 129500, 59748, 8269, 17876, 58536, 131501, 110013, 30185, 48136, 48723, 95302, 125692, 67701, 40429, 14328, 12601, 84272, 96285, 136384, 134722, 134098, 55876, 18102, 19501, 107075, 18676, 108030, 135003, 101125, 110819, 44779, 31668, 22136]
[2024-12-02 19:54:01.871844] user = 88646 Cloud 252/568
[2024-12-02 19:54:01.881126] user = 88646 Local 252/568
[2024-12-02 19:54:01.970655] user = 88646 Local+ 252/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:54:04.062714] user = 88646 MPDA- 252/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 122898 0/50 current_auc = 1.0
User 122898 AUC after training: 1.0
User 122898 does not improve AUC. Reverting changes.
Training on augumented user 112239 1/50 current_auc = 1.0
User 112239 AUC after training: 1.0
User 112239 does not improve AUC. Reverting changes.
Training on augumented user 33157 2/50 current_auc = 1.0
User 33157 AUC after training: 1.0
User 33157 does not improve AUC. Reverting changes.
Training on augumented user 40164 3/50 current_auc = 1.0
User 40164 AUC after training: 1.0
User 40164 does not improve AUC. Reverting changes.
Training on augumented user 26352 4/50 current_auc = 1.0
User 26352 AUC after training: 1.0
User 26352 does not improve AUC. Reverting changes.
Training on augumented user 74681 5/50 current_auc = 1.0
User 74681 AUC after training: 1.0
User 74681 does not improve AUC. Reverting changes.
Training on augumented user 93784 6/50 current_auc = 1.0
User 93784 AUC after training: 1.0
User 93784 does not improve AUC. Reverting changes.
Training on augumented user 53923 7/50 current_auc = 1.0
User 53923 AUC after training: 1.0
User 53923 does not improve AUC. Reverting changes.
Training on augumented user 59521 8/50 current_auc = 1.0
User 59521 AUC after training: 1.0
User 59521 does not improve AUC. Reverting changes.
Training on augumented user 98100 9/50 current_auc = 1.0
User 98100 AUC after training: 1.0
User 98100 does not improve AUC. Reverting changes.
Training on augumented user 55006 10/50 current_auc = 1.0
User 55006 AUC after training: 1.0
User 55006 does not improve AUC. Reverting changes.
Training on augumented user 55057 11/50 current_auc = 1.0
User 55057 AUC after training: 1.0
User 55057 does not improve AUC. Reverting changes.
Training on augumented user 58261 12/50 current_auc = 1.0
User 58261 AUC after training: 1.0
User 58261 does not improve AUC. Reverting changes.
Training on augumented user 40957 13/50 current_auc = 1.0
User 40957 AUC after training: 1.0
User 40957 does not improve AUC. Reverting changes.
Training on augumented user 55132 14/50 current_auc = 1.0
User 55132 AUC after training: 1.0
User 55132 does not improve AUC. Reverting changes.
Training on augumented user 39028 15/50 current_auc = 1.0
User 39028 AUC after training: 1.0
User 39028 does not improve AUC. Reverting changes.
Training on augumented user 77749 16/50 current_auc = 1.0
User 77749 AUC after training: 1.0
User 77749 does not improve AUC. Reverting changes.
Training on augumented user 129500 17/50 current_auc = 1.0
User 129500 AUC after training: 1.0
User 129500 does not improve AUC. Reverting changes.
Training on augumented user 59748 18/50 current_auc = 1.0
User 59748 AUC after training: 1.0
User 59748 does not improve AUC. Reverting changes.
Training on augumented user 8269 19/50 current_auc = 1.0
User 8269 AUC after training: 1.0
User 8269 does not improve AUC. Reverting changes.
Training on augumented user 17876 20/50 current_auc = 1.0
User 17876 AUC after training: 1.0
User 17876 does not improve AUC. Reverting changes.
Training on augumented user 58536 21/50 current_auc = 1.0
User 58536 AUC after training: 1.0
User 58536 does not improve AUC. Reverting changes.
Training on augumented user 131501 22/50 current_auc = 1.0
User 131501 AUC after training: 1.0
User 131501 does not improve AUC. Reverting changes.
Training on augumented user 110013 23/50 current_auc = 1.0
User 110013 AUC after training: 1.0
User 110013 does not improve AUC. Reverting changes.
Training on augumented user 30185 24/50 current_auc = 1.0
User 30185 AUC after training: 1.0
User 30185 does not improve AUC. Reverting changes.
Training on augumented user 48136 25/50 current_auc = 1.0
User 48136 AUC after training: 1.0
User 48136 does not improve AUC. Reverting changes.
Training on augumented user 48723 26/50 current_auc = 1.0
User 48723 AUC after training: 1.0
User 48723 does not improve AUC. Reverting changes.
Training on augumented user 95302 27/50 current_auc = 1.0
User 95302 AUC after training: 1.0
User 95302 does not improve AUC. Reverting changes.
Training on augumented user 125692 28/50 current_auc = 1.0
User 125692 AUC after training: 1.0
User 125692 does not improve AUC. Reverting changes.
Training on augumented user 67701 29/50 current_auc = 1.0
User 67701 AUC after training: 1.0
User 67701 does not improve AUC. Reverting changes.
Training on augumented user 40429 30/50 current_auc = 1.0
User 40429 AUC after training: 1.0
User 40429 does not improve AUC. Reverting changes.
Training on augumented user 14328 31/50 current_auc = 1.0
User 14328 AUC after training: 1.0
User 14328 does not improve AUC. Reverting changes.
Training on augumented user 12601 32/50 current_auc = 1.0
User 12601 AUC after training: 1.0
User 12601 does not improve AUC. Reverting changes.
Training on augumented user 84272 33/50 current_auc = 1.0
User 84272 AUC after training: 1.0
User 84272 does not improve AUC. Reverting changes.
Training on augumented user 96285 34/50 current_auc = 1.0
User 96285 AUC after training: 1.0
User 96285 does not improve AUC. Reverting changes.
Training on augumented user 136384 35/50 current_auc = 1.0
User 136384 AUC after training: 1.0
User 136384 does not improve AUC. Reverting changes.
Training on augumented user 134722 36/50 current_auc = 1.0
User 134722 AUC after training: 1.0
User 134722 does not improve AUC. Reverting changes.
Training on augumented user 134098 37/50 current_auc = 1.0
User 134098 AUC after training: 1.0
User 134098 does not improve AUC. Reverting changes.
Training on augumented user 55876 38/50 current_auc = 1.0
User 55876 AUC after training: 1.0
User 55876 does not improve AUC. Reverting changes.
Training on augumented user 18102 39/50 current_auc = 1.0
User 18102 AUC after training: 1.0
User 18102 does not improve AUC. Reverting changes.
Training on augumented user 19501 40/50 current_auc = 1.0
User 19501 AUC after training: 1.0
User 19501 does not improve AUC. Reverting changes.
Training on augumented user 107075 41/50 current_auc = 1.0
User 107075 AUC after training: 1.0
User 107075 does not improve AUC. Reverting changes.
Training on augumented user 18676 42/50 current_auc = 1.0
User 18676 AUC after training: 1.0
User 18676 does not improve AUC. Reverting changes.
Training on augumented user 108030 43/50 current_auc = 1.0
User 108030 AUC after training: 1.0
User 108030 does not improve AUC. Reverting changes.
Training on augumented user 135003 44/50 current_auc = 1.0
User 135003 AUC after training: 1.0
User 135003 does not improve AUC. Reverting changes.
Training on augumented user 101125 45/50 current_auc = 1.0
User 101125 AUC after training: 1.0
User 101125 does not improve AUC. Reverting changes.
Training on augumented user 110819 46/50 current_auc = 1.0
User 110819 AUC after training: 1.0
User 110819 does not improve AUC. Reverting changes.
Training on augumented user 44779 47/50 current_auc = 1.0
User 44779 AUC after training: 1.0
User 44779 does not improve AUC. Reverting changes.
Training on augumented user 31668 48/50 current_auc = 1.0
User 31668 AUC after training: 1.0
User 31668 does not improve AUC. Reverting changes.
Training on augumented user 22136 49/50 current_auc = 1.0
User 22136 AUC after training: 1.0
User 22136 does not improve AUC. Reverting changes.
[2024-12-02 19:54:33.012223] start test user 88651 253/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:54:33.499371] start test user 88651 253/568 recall augumented users by random, augumented_users = [18133, 132640, 19141, 115744, 8512, 32458, 106944, 104526, 16953, 23265, 34442, 121521, 110077, 9245, 73538, 8591, 35616, 26647, 56342, 73712, 118907, 99575, 103329, 32699, 19536, 89196, 69198, 109988, 110846, 46501, 38415, 52092, 98817, 109455, 130591, 124832, 22483, 101754, 53911, 12673, 74605, 55394, 23933, 13275, 128564, 88104, 111803, 17015, 6239, 115936]
[2024-12-02 19:54:33.513955] user = 88651 Cloud 253/568
[2024-12-02 19:54:33.523363] user = 88651 Local 253/568
[2024-12-02 19:54:33.563473] user = 88651 Local+ 253/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:54:36.146941] user = 88651 MPDA- 253/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 18133 0/50 current_auc = 0.5
User 18133 AUC after training: 0.5
User 18133 does not improve AUC. Reverting changes.
Training on augumented user 132640 1/50 current_auc = 0.5
User 132640 AUC after training: 0.5
User 132640 does not improve AUC. Reverting changes.
Training on augumented user 19141 2/50 current_auc = 0.5
User 19141 AUC after training: 0.5
User 19141 does not improve AUC. Reverting changes.
Training on augumented user 115744 3/50 current_auc = 0.5
User 115744 AUC after training: 0.5
User 115744 does not improve AUC. Reverting changes.
Training on augumented user 8512 4/50 current_auc = 0.5
User 8512 AUC after training: 0.5
User 8512 does not improve AUC. Reverting changes.
Training on augumented user 32458 5/50 current_auc = 0.5
User 32458 AUC after training: 0.5
User 32458 does not improve AUC. Reverting changes.
Training on augumented user 106944 6/50 current_auc = 0.5
User 106944 AUC after training: 0.5
User 106944 does not improve AUC. Reverting changes.
Training on augumented user 104526 7/50 current_auc = 0.5
User 104526 AUC after training: 0.5
User 104526 does not improve AUC. Reverting changes.
Training on augumented user 16953 8/50 current_auc = 0.5
User 16953 AUC after training: 0.5
User 16953 does not improve AUC. Reverting changes.
Training on augumented user 23265 9/50 current_auc = 0.5
User 23265 AUC after training: 0.45238095238095233
User 23265 does not improve AUC. Reverting changes.
Training on augumented user 34442 10/50 current_auc = 0.5
User 34442 AUC after training: 0.45238095238095233
User 34442 does not improve AUC. Reverting changes.
Training on augumented user 121521 11/50 current_auc = 0.5
User 121521 AUC after training: 0.45238095238095233
User 121521 does not improve AUC. Reverting changes.
Training on augumented user 110077 12/50 current_auc = 0.5
User 110077 AUC after training: 0.45238095238095233
User 110077 does not improve AUC. Reverting changes.
Training on augumented user 9245 13/50 current_auc = 0.5
User 9245 AUC after training: 0.5
User 9245 does not improve AUC. Reverting changes.
Training on augumented user 73538 14/50 current_auc = 0.5
User 73538 AUC after training: 0.5
User 73538 does not improve AUC. Reverting changes.
Training on augumented user 8591 15/50 current_auc = 0.5
User 8591 AUC after training: 0.45238095238095233
User 8591 does not improve AUC. Reverting changes.
Training on augumented user 35616 16/50 current_auc = 0.5
User 35616 AUC after training: 0.5
User 35616 does not improve AUC. Reverting changes.
Training on augumented user 26647 17/50 current_auc = 0.5
User 26647 AUC after training: 0.5
User 26647 does not improve AUC. Reverting changes.
Training on augumented user 56342 18/50 current_auc = 0.5
User 56342 AUC after training: 0.4761904761904762
User 56342 does not improve AUC. Reverting changes.
Training on augumented user 73712 19/50 current_auc = 0.5
User 73712 AUC after training: 0.45238095238095233
User 73712 does not improve AUC. Reverting changes.
Training on augumented user 118907 20/50 current_auc = 0.5
User 118907 AUC after training: 0.5
User 118907 does not improve AUC. Reverting changes.
Training on augumented user 99575 21/50 current_auc = 0.5
User 99575 AUC after training: 0.5
User 99575 does not improve AUC. Reverting changes.
Training on augumented user 103329 22/50 current_auc = 0.5
User 103329 AUC after training: 0.5
User 103329 does not improve AUC. Reverting changes.
Training on augumented user 32699 23/50 current_auc = 0.5
User 32699 AUC after training: 0.5
User 32699 does not improve AUC. Reverting changes.
Training on augumented user 19536 24/50 current_auc = 0.5
User 19536 AUC after training: 0.45238095238095233
User 19536 does not improve AUC. Reverting changes.
Training on augumented user 89196 25/50 current_auc = 0.5
User 89196 AUC after training: 0.5
User 89196 does not improve AUC. Reverting changes.
Training on augumented user 69198 26/50 current_auc = 0.5
User 69198 AUC after training: 0.5
User 69198 does not improve AUC. Reverting changes.
Training on augumented user 109988 27/50 current_auc = 0.5
User 109988 AUC after training: 0.5
User 109988 does not improve AUC. Reverting changes.
Training on augumented user 110846 28/50 current_auc = 0.5
User 110846 AUC after training: 0.4761904761904762
User 110846 does not improve AUC. Reverting changes.
Training on augumented user 46501 29/50 current_auc = 0.5
User 46501 AUC after training: 0.5
User 46501 does not improve AUC. Reverting changes.
Training on augumented user 38415 30/50 current_auc = 0.5
User 38415 AUC after training: 0.5
User 38415 does not improve AUC. Reverting changes.
Training on augumented user 52092 31/50 current_auc = 0.5
User 52092 AUC after training: 0.5
User 52092 does not improve AUC. Reverting changes.
Training on augumented user 98817 32/50 current_auc = 0.5
User 98817 AUC after training: 0.5
User 98817 does not improve AUC. Reverting changes.
Training on augumented user 109455 33/50 current_auc = 0.5
User 109455 AUC after training: 0.5
User 109455 does not improve AUC. Reverting changes.
Training on augumented user 130591 34/50 current_auc = 0.5
User 130591 AUC after training: 0.45238095238095233
User 130591 does not improve AUC. Reverting changes.
Training on augumented user 124832 35/50 current_auc = 0.5
User 124832 AUC after training: 0.5
User 124832 does not improve AUC. Reverting changes.
Training on augumented user 22483 36/50 current_auc = 0.5
User 22483 AUC after training: 0.5
User 22483 does not improve AUC. Reverting changes.
Training on augumented user 101754 37/50 current_auc = 0.5
User 101754 AUC after training: 0.45238095238095233
User 101754 does not improve AUC. Reverting changes.
Training on augumented user 53911 38/50 current_auc = 0.5
User 53911 AUC after training: 0.5
User 53911 does not improve AUC. Reverting changes.
Training on augumented user 12673 39/50 current_auc = 0.5
User 12673 AUC after training: 0.5
User 12673 does not improve AUC. Reverting changes.
Training on augumented user 74605 40/50 current_auc = 0.5
User 74605 AUC after training: 0.5
User 74605 does not improve AUC. Reverting changes.
Training on augumented user 55394 41/50 current_auc = 0.5
User 55394 AUC after training: 0.5
User 55394 does not improve AUC. Reverting changes.
Training on augumented user 23933 42/50 current_auc = 0.5
User 23933 AUC after training: 0.5
User 23933 does not improve AUC. Reverting changes.
Training on augumented user 13275 43/50 current_auc = 0.5
User 13275 AUC after training: 0.45238095238095233
User 13275 does not improve AUC. Reverting changes.
Training on augumented user 128564 44/50 current_auc = 0.5
User 128564 AUC after training: 0.5
User 128564 does not improve AUC. Reverting changes.
Training on augumented user 88104 45/50 current_auc = 0.5
User 88104 AUC after training: 0.5
User 88104 does not improve AUC. Reverting changes.
Training on augumented user 111803 46/50 current_auc = 0.5
User 111803 AUC after training: 0.5
User 111803 does not improve AUC. Reverting changes.
Training on augumented user 17015 47/50 current_auc = 0.5
User 17015 AUC after training: 0.45238095238095233
User 17015 does not improve AUC. Reverting changes.
Training on augumented user 6239 48/50 current_auc = 0.5
User 6239 AUC after training: 0.5
User 6239 does not improve AUC. Reverting changes.
Training on augumented user 115936 49/50 current_auc = 0.5
User 115936 AUC after training: 0.5
User 115936 does not improve AUC. Reverting changes.
[2024-12-02 19:55:02.809594] start test user 88687 254/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:55:03.837462] start test user 88687 254/568 recall augumented users by random, augumented_users = [737, 75661, 106034, 126129, 7241, 116014, 103346, 18256, 40906, 32174, 84300, 127370, 92631, 65910, 124706, 8572, 14629, 71378, 102819, 121655, 80067, 91437, 81732, 38565, 105921, 82474, 47567, 80341, 15596, 59276, 929, 26974, 7933, 97160, 66899, 76720, 23543, 66824, 18796, 109700, 60028, 31652, 43890, 77216, 12782, 79207, 91243, 1072, 120042, 5015]
[2024-12-02 19:55:03.867874] user = 88687 Cloud 254/568
[2024-12-02 19:55:03.901501] user = 88687 Local 254/568
[2024-12-02 19:55:03.985514] user = 88687 Local+ 254/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:55:06.090230] user = 88687 MPDA- 254/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6031746031746031
Training on augumented user 737 0/50 current_auc = 0.6031746031746031
User 737 AUC after training: 0.6095238095238096
User 737 improves AUC. Keeping the model.
Training on augumented user 75661 1/50 current_auc = 0.6095238095238096
User 75661 AUC after training: 0.6126984126984127
User 75661 improves AUC. Keeping the model.
Training on augumented user 106034 2/50 current_auc = 0.6126984126984127
User 106034 AUC after training: 0.6126984126984127
User 106034 does not improve AUC. Reverting changes.
Training on augumented user 126129 3/50 current_auc = 0.6126984126984127
User 126129 AUC after training: 0.6095238095238096
User 126129 does not improve AUC. Reverting changes.
Training on augumented user 7241 4/50 current_auc = 0.6126984126984127
User 7241 AUC after training: 0.6095238095238096
User 7241 does not improve AUC. Reverting changes.
Training on augumented user 116014 5/50 current_auc = 0.6126984126984127
User 116014 AUC after training: 0.6095238095238096
User 116014 does not improve AUC. Reverting changes.
Training on augumented user 103346 6/50 current_auc = 0.6126984126984127
User 103346 AUC after training: 0.6126984126984127
User 103346 does not improve AUC. Reverting changes.
Training on augumented user 18256 7/50 current_auc = 0.6126984126984127
User 18256 AUC after training: 0.6126984126984127
User 18256 does not improve AUC. Reverting changes.
Training on augumented user 40906 8/50 current_auc = 0.6126984126984127
User 40906 AUC after training: 0.6126984126984127
User 40906 does not improve AUC. Reverting changes.
Training on augumented user 32174 9/50 current_auc = 0.6126984126984127
User 32174 AUC after training: 0.6095238095238096
User 32174 does not improve AUC. Reverting changes.
Training on augumented user 84300 10/50 current_auc = 0.6126984126984127
User 84300 AUC after training: 0.6126984126984127
User 84300 does not improve AUC. Reverting changes.
Training on augumented user 127370 11/50 current_auc = 0.6126984126984127
User 127370 AUC after training: 0.6095238095238096
User 127370 does not improve AUC. Reverting changes.
Training on augumented user 92631 12/50 current_auc = 0.6126984126984127
User 92631 AUC after training: 0.6095238095238096
User 92631 does not improve AUC. Reverting changes.
Training on augumented user 65910 13/50 current_auc = 0.6126984126984127
User 65910 AUC after training: 0.6126984126984127
User 65910 does not improve AUC. Reverting changes.
Training on augumented user 124706 14/50 current_auc = 0.6126984126984127
User 124706 AUC after training: 0.6126984126984127
User 124706 does not improve AUC. Reverting changes.
Training on augumented user 8572 15/50 current_auc = 0.6126984126984127
User 8572 AUC after training: 0.6126984126984127
User 8572 does not improve AUC. Reverting changes.
Training on augumented user 14629 16/50 current_auc = 0.6126984126984127
User 14629 AUC after training: 0.6126984126984127
User 14629 does not improve AUC. Reverting changes.
Training on augumented user 71378 17/50 current_auc = 0.6126984126984127
User 71378 AUC after training: 0.6126984126984127
User 71378 does not improve AUC. Reverting changes.
Training on augumented user 102819 18/50 current_auc = 0.6126984126984127
User 102819 AUC after training: 0.6095238095238096
User 102819 does not improve AUC. Reverting changes.
Training on augumented user 121655 19/50 current_auc = 0.6126984126984127
User 121655 AUC after training: 0.6126984126984127
User 121655 does not improve AUC. Reverting changes.
Training on augumented user 80067 20/50 current_auc = 0.6126984126984127
User 80067 AUC after training: 0.6126984126984127
User 80067 does not improve AUC. Reverting changes.
Training on augumented user 91437 21/50 current_auc = 0.6126984126984127
User 91437 AUC after training: 0.6063492063492064
User 91437 does not improve AUC. Reverting changes.
Training on augumented user 81732 22/50 current_auc = 0.6126984126984127
User 81732 AUC after training: 0.6126984126984127
User 81732 does not improve AUC. Reverting changes.
Training on augumented user 38565 23/50 current_auc = 0.6126984126984127
User 38565 AUC after training: 0.6126984126984127
User 38565 does not improve AUC. Reverting changes.
Training on augumented user 105921 24/50 current_auc = 0.6126984126984127
User 105921 AUC after training: 0.6095238095238096
User 105921 does not improve AUC. Reverting changes.
Training on augumented user 82474 25/50 current_auc = 0.6126984126984127
User 82474 AUC after training: 0.6126984126984127
User 82474 does not improve AUC. Reverting changes.
Training on augumented user 47567 26/50 current_auc = 0.6126984126984127
User 47567 AUC after training: 0.6126984126984127
User 47567 does not improve AUC. Reverting changes.
Training on augumented user 80341 27/50 current_auc = 0.6126984126984127
User 80341 AUC after training: 0.6126984126984127
User 80341 does not improve AUC. Reverting changes.
Training on augumented user 15596 28/50 current_auc = 0.6126984126984127
User 15596 AUC after training: 0.6126984126984127
User 15596 does not improve AUC. Reverting changes.
Training on augumented user 59276 29/50 current_auc = 0.6126984126984127
User 59276 AUC after training: 0.6126984126984127
User 59276 does not improve AUC. Reverting changes.
Training on augumented user 929 30/50 current_auc = 0.6126984126984127
User 929 AUC after training: 0.6095238095238096
User 929 does not improve AUC. Reverting changes.
Training on augumented user 26974 31/50 current_auc = 0.6126984126984127
User 26974 AUC after training: 0.6126984126984127
User 26974 does not improve AUC. Reverting changes.
Training on augumented user 7933 32/50 current_auc = 0.6126984126984127
User 7933 AUC after training: 0.6126984126984127
User 7933 does not improve AUC. Reverting changes.
Training on augumented user 97160 33/50 current_auc = 0.6126984126984127
User 97160 AUC after training: 0.6095238095238096
User 97160 does not improve AUC. Reverting changes.
Training on augumented user 66899 34/50 current_auc = 0.6126984126984127
User 66899 AUC after training: 0.6095238095238096
User 66899 does not improve AUC. Reverting changes.
Training on augumented user 76720 35/50 current_auc = 0.6126984126984127
User 76720 AUC after training: 0.6126984126984127
User 76720 does not improve AUC. Reverting changes.
Training on augumented user 23543 36/50 current_auc = 0.6126984126984127
User 23543 AUC after training: 0.6063492063492064
User 23543 does not improve AUC. Reverting changes.
Training on augumented user 66824 37/50 current_auc = 0.6126984126984127
User 66824 AUC after training: 0.6158730158730159
User 66824 improves AUC. Keeping the model.
Training on augumented user 18796 38/50 current_auc = 0.6158730158730159
User 18796 AUC after training: 0.6095238095238096
User 18796 does not improve AUC. Reverting changes.
Training on augumented user 109700 39/50 current_auc = 0.6158730158730159
User 109700 AUC after training: 0.6126984126984127
User 109700 does not improve AUC. Reverting changes.
Training on augumented user 60028 40/50 current_auc = 0.6158730158730159
User 60028 AUC after training: 0.6063492063492064
User 60028 does not improve AUC. Reverting changes.
Training on augumented user 31652 41/50 current_auc = 0.6158730158730159
User 31652 AUC after training: 0.6095238095238096
User 31652 does not improve AUC. Reverting changes.
Training on augumented user 43890 42/50 current_auc = 0.6158730158730159
User 43890 AUC after training: 0.6126984126984127
User 43890 does not improve AUC. Reverting changes.
Training on augumented user 77216 43/50 current_auc = 0.6158730158730159
User 77216 AUC after training: 0.6126984126984127
User 77216 does not improve AUC. Reverting changes.
Training on augumented user 12782 44/50 current_auc = 0.6158730158730159
User 12782 AUC after training: 0.6158730158730159
User 12782 does not improve AUC. Reverting changes.
Training on augumented user 79207 45/50 current_auc = 0.6158730158730159
User 79207 AUC after training: 0.6158730158730159
User 79207 does not improve AUC. Reverting changes.
Training on augumented user 91243 46/50 current_auc = 0.6158730158730159
User 91243 AUC after training: 0.6126984126984127
User 91243 does not improve AUC. Reverting changes.
Training on augumented user 1072 47/50 current_auc = 0.6158730158730159
User 1072 AUC after training: 0.6158730158730159
User 1072 does not improve AUC. Reverting changes.
Training on augumented user 120042 48/50 current_auc = 0.6158730158730159
User 120042 AUC after training: 0.6126984126984127
User 120042 does not improve AUC. Reverting changes.
Training on augumented user 5015 49/50 current_auc = 0.6158730158730159
User 5015 AUC after training: 0.6095238095238096
User 5015 does not improve AUC. Reverting changes.
[2024-12-02 19:55:35.577767] start test user 88738 255/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:55:35.980502] start test user 88738 255/568 recall augumented users by random, augumented_users = [37299, 20385, 38017, 34731, 59114, 3050, 33849, 122744, 44906, 73131, 120427, 117435, 48957, 7346, 59969, 112579, 103589, 104648, 16328, 15367, 132144, 52147, 100791, 105231, 92531, 28639, 123879, 113930, 77175, 24, 27685, 85203, 117713, 116519, 13031, 109565, 108124, 32555, 89863, 104263, 16251, 107856, 2284, 91058, 53374, 40886, 47806, 102172, 60091, 136263]
[2024-12-02 19:55:35.996945] user = 88738 Cloud 255/568
[2024-12-02 19:55:36.077985] user = 88738 Local 255/568
[2024-12-02 19:55:36.209172] user = 88738 Local+ 255/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:55:38.668898] user = 88738 MPDA- 255/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.745857541215599
Training on augumented user 37299 0/50 current_auc = 0.745857541215599
User 37299 AUC after training: 0.7459978623419895
User 37299 improves AUC. Keeping the model.
Training on augumented user 20385 1/50 current_auc = 0.7459978623419895
User 20385 AUC after training: 0.7459112812214507
User 20385 does not improve AUC. Reverting changes.
Training on augumented user 38017 2/50 current_auc = 0.7459978623419895
User 38017 AUC after training: 0.7460127901213927
User 38017 improves AUC. Keeping the model.
Training on augumented user 34731 3/50 current_auc = 0.7460127901213927
User 34731 AUC after training: 0.7460635445713638
User 34731 improves AUC. Keeping the model.
Training on augumented user 59114 4/50 current_auc = 0.7460635445713638
User 59114 AUC after training: 0.7459859201184669
User 59114 does not improve AUC. Reverting changes.
Training on augumented user 3050 5/50 current_auc = 0.7460635445713638
User 3050 AUC after training: 0.7459053101096893
User 3050 does not improve AUC. Reverting changes.
Training on augumented user 33849 6/50 current_auc = 0.7460635445713638
User 33849 AUC after training: 0.745968006783183
User 33849 does not improve AUC. Reverting changes.
Training on augumented user 122744 7/50 current_auc = 0.7460635445713638
User 122744 AUC after training: 0.7459948767861089
User 122744 does not improve AUC. Reverting changes.
Training on augumented user 44906 8/50 current_auc = 0.7460635445713638
User 44906 AUC after training: 0.7460068190096314
User 44906 does not improve AUC. Reverting changes.
Training on augumented user 73131 9/50 current_auc = 0.7460635445713638
User 73131 AUC after training: 0.746120270133096
User 73131 improves AUC. Keeping the model.
Training on augumented user 120427 10/50 current_auc = 0.746120270133096
User 120427 AUC after training: 0.7463979268299965
User 120427 improves AUC. Keeping the model.
Training on augumented user 117435 11/50 current_auc = 0.7463979268299965
User 117435 AUC after training: 0.7463770279388319
User 117435 does not improve AUC. Reverting changes.
Training on augumented user 48957 12/50 current_auc = 0.7463979268299965
User 48957 AUC after training: 0.7457515539818358
User 48957 does not improve AUC. Reverting changes.
Training on augumented user 7346 13/50 current_auc = 0.7463979268299965
User 7346 AUC after training: 0.7464770440608337
User 7346 improves AUC. Keeping the model.
Training on augumented user 59969 14/50 current_auc = 0.7464770440608337
User 59969 AUC after training: 0.7464307679446837
User 59969 does not improve AUC. Reverting changes.
Training on augumented user 112579 15/50 current_auc = 0.7464770440608337
User 112579 AUC after training: 0.746589002406358
User 112579 improves AUC. Keeping the model.
Training on augumented user 103589 16/50 current_auc = 0.746589002406358
User 103589 AUC after training: 0.7463710568270706
User 103589 does not improve AUC. Reverting changes.
Training on augumented user 104648 17/50 current_auc = 0.746589002406358
User 104648 AUC after training: 0.7465681035151934
User 104648 does not improve AUC. Reverting changes.
Training on augumented user 16328 18/50 current_auc = 0.746589002406358
User 16328 AUC after training: 0.7463665784932495
User 16328 does not improve AUC. Reverting changes.
Training on augumented user 15367 19/50 current_auc = 0.746589002406358
User 15367 AUC after training: 0.746487493506416
User 15367 does not improve AUC. Reverting changes.
Training on augumented user 132144 20/50 current_auc = 0.746589002406358
User 132144 AUC after training: 0.7462307357006801
User 132144 does not improve AUC. Reverting changes.
Training on augumented user 52147 21/50 current_auc = 0.746589002406358
User 52147 AUC after training: 0.7465277985108048
User 52147 does not improve AUC. Reverting changes.
Training on augumented user 100791 22/50 current_auc = 0.746589002406358
User 100791 AUC after training: 0.746436739056445
User 100791 does not improve AUC. Reverting changes.
Training on augumented user 105231 23/50 current_auc = 0.746589002406358
User 105231 AUC after training: 0.7464247968329223
User 105231 does not improve AUC. Reverting changes.
Training on augumented user 92531 24/50 current_auc = 0.746589002406358
User 92531 AUC after training: 0.7464188257211609
User 92531 does not improve AUC. Reverting changes.
Training on augumented user 28639 25/50 current_auc = 0.746589002406358
User 28639 AUC after training: 0.7466158724092838
User 28639 improves AUC. Keeping the model.
Training on augumented user 123879 26/50 current_auc = 0.7466158724092838
User 123879 AUC after training: 0.7466949896401212
User 123879 improves AUC. Keeping the model.
Training on augumented user 113930 27/50 current_auc = 0.7466949896401212
User 113930 AUC after training: 0.7467352946445098
User 113930 improves AUC. Keeping the model.
Training on augumented user 77175 28/50 current_auc = 0.7467352946445098
User 77175 AUC after training: 0.7466755835268969
User 77175 does not improve AUC. Reverting changes.
Training on augumented user 24 29/50 current_auc = 0.7467352946445098
User 24 AUC after training: 0.7463740423829512
User 24 does not improve AUC. Reverting changes.
Training on augumented user 27685 30/50 current_auc = 0.7467352946445098
User 27685 AUC after training: 0.7467800779827196
User 27685 improves AUC. Keeping the model.
Training on augumented user 85203 31/50 current_auc = 0.7467800779827196
User 85203 AUC after training: 0.7465681035151935
User 85203 does not improve AUC. Reverting changes.
Training on augumented user 117713 32/50 current_auc = 0.7467800779827196
User 117713 AUC after training: 0.7467352946445098
User 117713 does not improve AUC. Reverting changes.
Training on augumented user 116519 33/50 current_auc = 0.7467800779827196
User 116519 AUC after training: 0.7462307357006803
User 116519 does not improve AUC. Reverting changes.
Training on augumented user 13031 34/50 current_auc = 0.7467800779827196
User 13031 AUC after training: 0.7467979913180035
User 13031 improves AUC. Keeping the model.
Training on augumented user 109565 35/50 current_auc = 0.7467979913180035
User 109565 AUC after training: 0.7461202701330961
User 109565 does not improve AUC. Reverting changes.
Training on augumented user 108124 36/50 current_auc = 0.7467979913180035
User 108124 AUC after training: 0.746299403485935
User 108124 does not improve AUC. Reverting changes.
Training on augumented user 32555 37/50 current_auc = 0.7467979913180035
User 32555 AUC after training: 0.7465098851755209
User 32555 does not improve AUC. Reverting changes.
Training on augumented user 89863 38/50 current_auc = 0.7467979913180035
User 89863 AUC after training: 0.7466845401945389
User 89863 does not improve AUC. Reverting changes.
Training on augumented user 104263 39/50 current_auc = 0.7467979913180035
User 104263 AUC after training: 0.7468606879914972
User 104263 improves AUC. Keeping the model.
Training on augumented user 16251 40/50 current_auc = 0.7468606879914972
User 16251 AUC after training: 0.7466218435210451
User 16251 does not improve AUC. Reverting changes.
Training on augumented user 107856 41/50 current_auc = 0.7468606879914972
User 107856 AUC after training: 0.7467950057621228
User 107856 does not improve AUC. Reverting changes.
Training on augumented user 2284 42/50 current_auc = 0.7468606879914972
User 2284 AUC after training: 0.7468397891003326
User 2284 does not improve AUC. Reverting changes.
Training on augumented user 91058 43/50 current_auc = 0.7468606879914972
User 91058 AUC after training: 0.7467293235327486
User 91058 does not improve AUC. Reverting changes.
Training on augumented user 53374 44/50 current_auc = 0.7468606879914972
User 53374 AUC after training: 0.7467920202062422
User 53374 does not improve AUC. Reverting changes.
Training on augumented user 40886 45/50 current_auc = 0.7468606879914972
User 40886 AUC after training: 0.7466278146328065
User 40886 does not improve AUC. Reverting changes.
Training on augumented user 47806 46/50 current_auc = 0.7468606879914972
User 47806 AUC after training: 0.7460501095699008
User 47806 does not improve AUC. Reverting changes.
Training on augumented user 102172 47/50 current_auc = 0.7468606879914972
User 102172 AUC after training: 0.7467323090886292
User 102172 does not improve AUC. Reverting changes.
Training on augumented user 60091 48/50 current_auc = 0.7468606879914972
User 60091 AUC after training: 0.7468308324326907
User 60091 does not improve AUC. Reverting changes.
Training on augumented user 136263 49/50 current_auc = 0.7468606879914972
User 136263 AUC after training: 0.7468159046532874
User 136263 does not improve AUC. Reverting changes.
[2024-12-02 19:56:14.157965] start test user 88739 256/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:56:14.686718] start test user 88739 256/568 recall augumented users by random, augumented_users = [66859, 41136, 55466, 66846, 123078, 124395, 123092, 3110, 36008, 128348, 81236, 18708, 25214, 81654, 26325, 111373, 39522, 37229, 119039, 18402, 117174, 98884, 10951, 76665, 136614, 116186, 21017, 57977, 33947, 23042, 428, 82242, 101550, 108719, 38840, 49711, 62773, 99784, 98666, 47175, 102464, 96172, 56477, 131121, 81339, 35650, 33801, 39658, 3202, 47742]
[2024-12-02 19:56:14.714293] user = 88739 Cloud 256/568
[2024-12-02 19:56:14.749212] user = 88739 Local 256/568
[2024-12-02 19:56:14.816861] user = 88739 Local+ 256/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:56:17.167546] user = 88739 MPDA- 256/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.840039741679086
Training on augumented user 66859 0/50 current_auc = 0.840039741679086
User 66859 AUC after training: 0.8390461997019375
User 66859 does not improve AUC. Reverting changes.
Training on augumented user 41136 1/50 current_auc = 0.840039741679086
User 41136 AUC after training: 0.8410332836562345
User 41136 improves AUC. Keeping the model.
Training on augumented user 55466 2/50 current_auc = 0.8410332836562345
User 55466 AUC after training: 0.8435171385991058
User 55466 improves AUC. Keeping the model.
Training on augumented user 66846 3/50 current_auc = 0.8435171385991058
User 66846 AUC after training: 0.8430203676105316
User 66846 does not improve AUC. Reverting changes.
Training on augumented user 123078 4/50 current_auc = 0.8435171385991058
User 123078 AUC after training: 0.8425235966219573
User 123078 does not improve AUC. Reverting changes.
Training on augumented user 124395 5/50 current_auc = 0.8435171385991058
User 124395 AUC after training: 0.8445106805762543
User 124395 improves AUC. Keeping the model.
Training on augumented user 123092 6/50 current_auc = 0.8445106805762543
User 123092 AUC after training: 0.84401390958768
User 123092 does not improve AUC. Reverting changes.
Training on augumented user 3110 7/50 current_auc = 0.8445106805762543
User 3110 AUC after training: 0.8445106805762543
User 3110 does not improve AUC. Reverting changes.
Training on augumented user 36008 8/50 current_auc = 0.8445106805762543
User 36008 AUC after training: 0.8440139095876802
User 36008 does not improve AUC. Reverting changes.
Training on augumented user 128348 9/50 current_auc = 0.8445106805762543
User 128348 AUC after training: 0.8445106805762543
User 128348 does not improve AUC. Reverting changes.
Training on augumented user 81236 10/50 current_auc = 0.8445106805762543
User 81236 AUC after training: 0.842026825633383
User 81236 does not improve AUC. Reverting changes.
Training on augumented user 18708 11/50 current_auc = 0.8445106805762543
User 18708 AUC after training: 0.8445106805762543
User 18708 does not improve AUC. Reverting changes.
Training on augumented user 25214 12/50 current_auc = 0.8445106805762543
User 25214 AUC after training: 0.8440139095876801
User 25214 does not improve AUC. Reverting changes.
Training on augumented user 81654 13/50 current_auc = 0.8445106805762543
User 81654 AUC after training: 0.84401390958768
User 81654 does not improve AUC. Reverting changes.
Training on augumented user 26325 14/50 current_auc = 0.8445106805762543
User 26325 AUC after training: 0.8440139095876801
User 26325 does not improve AUC. Reverting changes.
Training on augumented user 111373 15/50 current_auc = 0.8445106805762543
User 111373 AUC after training: 0.8440139095876801
User 111373 does not improve AUC. Reverting changes.
Training on augumented user 39522 16/50 current_auc = 0.8445106805762543
User 39522 AUC after training: 0.8440139095876801
User 39522 does not improve AUC. Reverting changes.
Training on augumented user 37229 17/50 current_auc = 0.8445106805762543
User 37229 AUC after training: 0.8425235966219573
User 37229 does not improve AUC. Reverting changes.
Training on augumented user 119039 18/50 current_auc = 0.8445106805762543
User 119039 AUC after training: 0.8445106805762543
User 119039 does not improve AUC. Reverting changes.
Training on augumented user 18402 19/50 current_auc = 0.8445106805762543
User 18402 AUC after training: 0.8440139095876801
User 18402 does not improve AUC. Reverting changes.
Training on augumented user 117174 20/50 current_auc = 0.8445106805762543
User 117174 AUC after training: 0.84401390958768
User 117174 does not improve AUC. Reverting changes.
Training on augumented user 98884 21/50 current_auc = 0.8445106805762543
User 98884 AUC after training: 0.8435171385991058
User 98884 does not improve AUC. Reverting changes.
Training on augumented user 10951 22/50 current_auc = 0.8445106805762543
User 10951 AUC after training: 0.8440139095876802
User 10951 does not improve AUC. Reverting changes.
Training on augumented user 76665 23/50 current_auc = 0.8445106805762543
User 76665 AUC after training: 0.8435171385991058
User 76665 does not improve AUC. Reverting changes.
Training on augumented user 136614 24/50 current_auc = 0.8445106805762543
User 136614 AUC after training: 0.8440139095876801
User 136614 does not improve AUC. Reverting changes.
Training on augumented user 116186 25/50 current_auc = 0.8445106805762543
User 116186 AUC after training: 0.84401390958768
User 116186 does not improve AUC. Reverting changes.
Training on augumented user 21017 26/50 current_auc = 0.8445106805762543
User 21017 AUC after training: 0.842026825633383
User 21017 does not improve AUC. Reverting changes.
Training on augumented user 57977 27/50 current_auc = 0.8445106805762543
User 57977 AUC after training: 0.8469945355191257
User 57977 improves AUC. Keeping the model.
Training on augumented user 33947 28/50 current_auc = 0.8469945355191257
User 33947 AUC after training: 0.8462493790362643
User 33947 does not improve AUC. Reverting changes.
Training on augumented user 23042 29/50 current_auc = 0.8469945355191257
User 23042 AUC after training: 0.8469945355191257
User 23042 does not improve AUC. Reverting changes.
Training on augumented user 428 30/50 current_auc = 0.8469945355191257
User 428 AUC after training: 0.8469945355191257
User 428 does not improve AUC. Reverting changes.
Training on augumented user 82242 31/50 current_auc = 0.8469945355191257
User 82242 AUC after training: 0.8469945355191257
User 82242 does not improve AUC. Reverting changes.
Training on augumented user 101550 32/50 current_auc = 0.8469945355191257
User 101550 AUC after training: 0.8469945355191257
User 101550 does not improve AUC. Reverting changes.
Training on augumented user 108719 33/50 current_auc = 0.8469945355191257
User 108719 AUC after training: 0.8474913065077
User 108719 improves AUC. Keeping the model.
Training on augumented user 38840 34/50 current_auc = 0.8474913065077
User 38840 AUC after training: 0.8474913065077
User 38840 does not improve AUC. Reverting changes.
Training on augumented user 49711 35/50 current_auc = 0.8474913065077
User 49711 AUC after training: 0.8474913065077
User 49711 does not improve AUC. Reverting changes.
Training on augumented user 62773 36/50 current_auc = 0.8474913065077
User 62773 AUC after training: 0.8469945355191257
User 62773 does not improve AUC. Reverting changes.
Training on augumented user 99784 37/50 current_auc = 0.8474913065077
User 99784 AUC after training: 0.8469945355191257
User 99784 does not improve AUC. Reverting changes.
Training on augumented user 98666 38/50 current_auc = 0.8474913065077
User 98666 AUC after training: 0.8469945355191257
User 98666 does not improve AUC. Reverting changes.
Training on augumented user 47175 39/50 current_auc = 0.8474913065077
User 47175 AUC after training: 0.8464977645305515
User 47175 does not improve AUC. Reverting changes.
Training on augumented user 102464 40/50 current_auc = 0.8474913065077
User 102464 AUC after training: 0.8474913065077
User 102464 does not improve AUC. Reverting changes.
Training on augumented user 96172 41/50 current_auc = 0.8474913065077
User 96172 AUC after training: 0.8460009935419772
User 96172 does not improve AUC. Reverting changes.
Training on augumented user 56477 42/50 current_auc = 0.8474913065077
User 56477 AUC after training: 0.8460009935419772
User 56477 does not improve AUC. Reverting changes.
Training on augumented user 131121 43/50 current_auc = 0.8474913065077
User 131121 AUC after training: 0.8460009935419772
User 131121 does not improve AUC. Reverting changes.
Training on augumented user 81339 44/50 current_auc = 0.8474913065077
User 81339 AUC after training: 0.8469945355191257
User 81339 does not improve AUC. Reverting changes.
Training on augumented user 35650 45/50 current_auc = 0.8474913065077
User 35650 AUC after training: 0.8469945355191257
User 35650 does not improve AUC. Reverting changes.
Training on augumented user 33801 46/50 current_auc = 0.8474913065077
User 33801 AUC after training: 0.8464977645305515
User 33801 does not improve AUC. Reverting changes.
Training on augumented user 39658 47/50 current_auc = 0.8474913065077
User 39658 AUC after training: 0.8464977645305514
User 39658 does not improve AUC. Reverting changes.
Training on augumented user 3202 48/50 current_auc = 0.8474913065077
User 3202 AUC after training: 0.8469945355191257
User 3202 does not improve AUC. Reverting changes.
Training on augumented user 47742 49/50 current_auc = 0.8474913065077
User 47742 AUC after training: 0.8469945355191257
User 47742 does not improve AUC. Reverting changes.
[2024-12-02 19:56:49.536995] start test user 88773 257/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:56:49.947688] start test user 88773 257/568 recall augumented users by random, augumented_users = [93869, 39877, 43745, 108593, 41596, 92185, 98455, 39323, 55300, 111082, 124356, 27002, 102175, 117264, 39805, 72309, 81694, 124850, 84413, 111227, 14059, 101672, 17546, 99904, 134189, 75452, 14882, 20963, 76289, 107209, 41127, 14891, 44465, 41345, 25434, 10551, 105186, 82342, 21386, 76421, 80787, 88648, 104077, 43893, 117262, 65110, 30763, 71995, 32563, 136360]
[2024-12-02 19:56:49.965030] user = 88773 Cloud 257/568
[2024-12-02 19:56:49.990668] user = 88773 Local 257/568
[2024-12-02 19:56:50.251706] user = 88773 Local+ 257/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:56:52.691386] user = 88773 MPDA- 257/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7281030444964871
Training on augumented user 93869 0/50 current_auc = 0.7281030444964871
User 93869 AUC after training: 0.7282786885245902
User 93869 improves AUC. Keeping the model.
Training on augumented user 39877 1/50 current_auc = 0.7282786885245902
User 39877 AUC after training: 0.7281030444964871
User 39877 does not improve AUC. Reverting changes.
Training on augumented user 43745 2/50 current_auc = 0.7282786885245902
User 43745 AUC after training: 0.7280444964871194
User 43745 does not improve AUC. Reverting changes.
Training on augumented user 108593 3/50 current_auc = 0.7282786885245902
User 108593 AUC after training: 0.7283372365339579
User 108593 improves AUC. Keeping the model.
Training on augumented user 41596 4/50 current_auc = 0.7283372365339579
User 41596 AUC after training: 0.7281615925058548
User 41596 does not improve AUC. Reverting changes.
Training on augumented user 92185 5/50 current_auc = 0.7283372365339579
User 92185 AUC after training: 0.7281615925058548
User 92185 does not improve AUC. Reverting changes.
Training on augumented user 98455 6/50 current_auc = 0.7283372365339579
User 98455 AUC after training: 0.7283957845433255
User 98455 improves AUC. Keeping the model.
Training on augumented user 39323 7/50 current_auc = 0.7283957845433255
User 39323 AUC after training: 0.7285714285714286
User 39323 improves AUC. Keeping the model.
Training on augumented user 55300 8/50 current_auc = 0.7285714285714286
User 55300 AUC after training: 0.7285714285714285
User 55300 does not improve AUC. Reverting changes.
Training on augumented user 111082 9/50 current_auc = 0.7285714285714286
User 111082 AUC after training: 0.7283957845433255
User 111082 does not improve AUC. Reverting changes.
Training on augumented user 124356 10/50 current_auc = 0.7285714285714286
User 124356 AUC after training: 0.7285128805620609
User 124356 does not improve AUC. Reverting changes.
Training on augumented user 27002 11/50 current_auc = 0.7285714285714286
User 27002 AUC after training: 0.7285128805620609
User 27002 does not improve AUC. Reverting changes.
Training on augumented user 102175 12/50 current_auc = 0.7285714285714286
User 102175 AUC after training: 0.7287470725995316
User 102175 improves AUC. Keeping the model.
Training on augumented user 117264 13/50 current_auc = 0.7287470725995316
User 117264 AUC after training: 0.7281615925058548
User 117264 does not improve AUC. Reverting changes.
Training on augumented user 39805 14/50 current_auc = 0.7287470725995316
User 39805 AUC after training: 0.7284543325526932
User 39805 does not improve AUC. Reverting changes.
Training on augumented user 72309 15/50 current_auc = 0.7287470725995316
User 72309 AUC after training: 0.7282201405152225
User 72309 does not improve AUC. Reverting changes.
Training on augumented user 81694 16/50 current_auc = 0.7287470725995316
User 81694 AUC after training: 0.7280444964871194
User 81694 does not improve AUC. Reverting changes.
Training on augumented user 124850 17/50 current_auc = 0.7287470725995316
User 124850 AUC after training: 0.7286885245901639
User 124850 does not improve AUC. Reverting changes.
Training on augumented user 84413 18/50 current_auc = 0.7287470725995316
User 84413 AUC after training: 0.7285128805620609
User 84413 does not improve AUC. Reverting changes.
Training on augumented user 111227 19/50 current_auc = 0.7287470725995316
User 111227 AUC after training: 0.7283957845433255
User 111227 does not improve AUC. Reverting changes.
Training on augumented user 14059 20/50 current_auc = 0.7287470725995316
User 14059 AUC after training: 0.7286299765807962
User 14059 does not improve AUC. Reverting changes.
Training on augumented user 101672 21/50 current_auc = 0.7287470725995316
User 101672 AUC after training: 0.7285714285714285
User 101672 does not improve AUC. Reverting changes.
Training on augumented user 17546 22/50 current_auc = 0.7287470725995316
User 17546 AUC after training: 0.7283372365339579
User 17546 does not improve AUC. Reverting changes.
Training on augumented user 99904 23/50 current_auc = 0.7287470725995316
User 99904 AUC after training: 0.7285128805620609
User 99904 does not improve AUC. Reverting changes.
Training on augumented user 134189 24/50 current_auc = 0.7287470725995316
User 134189 AUC after training: 0.7285128805620609
User 134189 does not improve AUC. Reverting changes.
Training on augumented user 75452 25/50 current_auc = 0.7287470725995316
User 75452 AUC after training: 0.7286299765807962
User 75452 does not improve AUC. Reverting changes.
Training on augumented user 14882 26/50 current_auc = 0.7287470725995316
User 14882 AUC after training: 0.7285128805620609
User 14882 does not improve AUC. Reverting changes.
Training on augumented user 20963 27/50 current_auc = 0.7287470725995316
User 20963 AUC after training: 0.728512880562061
User 20963 does not improve AUC. Reverting changes.
Training on augumented user 76289 28/50 current_auc = 0.7287470725995316
User 76289 AUC after training: 0.7283372365339579
User 76289 does not improve AUC. Reverting changes.
Training on augumented user 107209 29/50 current_auc = 0.7287470725995316
User 107209 AUC after training: 0.7286299765807963
User 107209 does not improve AUC. Reverting changes.
Training on augumented user 41127 30/50 current_auc = 0.7287470725995316
User 41127 AUC after training: 0.7272248243559719
User 41127 does not improve AUC. Reverting changes.
Training on augumented user 14891 31/50 current_auc = 0.7287470725995316
User 14891 AUC after training: 0.7280444964871194
User 14891 does not improve AUC. Reverting changes.
Training on augumented user 44465 32/50 current_auc = 0.7287470725995316
User 44465 AUC after training: 0.7268149882903981
User 44465 does not improve AUC. Reverting changes.
Training on augumented user 41345 33/50 current_auc = 0.7287470725995316
User 41345 AUC after training: 0.728864168618267
User 41345 improves AUC. Keeping the model.
Training on augumented user 25434 34/50 current_auc = 0.728864168618267
User 25434 AUC after training: 0.7280444964871194
User 25434 does not improve AUC. Reverting changes.
Training on augumented user 10551 35/50 current_auc = 0.728864168618267
User 10551 AUC after training: 0.7284543325526932
User 10551 does not improve AUC. Reverting changes.
Training on augumented user 105186 36/50 current_auc = 0.728864168618267
User 105186 AUC after training: 0.7286299765807963
User 105186 does not improve AUC. Reverting changes.
Training on augumented user 82342 37/50 current_auc = 0.728864168618267
User 82342 AUC after training: 0.7285714285714285
User 82342 does not improve AUC. Reverting changes.
Training on augumented user 21386 38/50 current_auc = 0.728864168618267
User 21386 AUC after training: 0.7283957845433255
User 21386 does not improve AUC. Reverting changes.
Training on augumented user 76421 39/50 current_auc = 0.728864168618267
User 76421 AUC after training: 0.7286299765807962
User 76421 does not improve AUC. Reverting changes.
Training on augumented user 80787 40/50 current_auc = 0.728864168618267
User 80787 AUC after training: 0.7285128805620609
User 80787 does not improve AUC. Reverting changes.
Training on augumented user 88648 41/50 current_auc = 0.728864168618267
User 88648 AUC after training: 0.7281030444964871
User 88648 does not improve AUC. Reverting changes.
Training on augumented user 104077 42/50 current_auc = 0.728864168618267
User 104077 AUC after training: 0.7281030444964871
User 104077 does not improve AUC. Reverting changes.
Training on augumented user 43893 43/50 current_auc = 0.728864168618267
User 43893 AUC after training: 0.7285128805620609
User 43893 does not improve AUC. Reverting changes.
Training on augumented user 117262 44/50 current_auc = 0.728864168618267
User 117262 AUC after training: 0.7285128805620609
User 117262 does not improve AUC. Reverting changes.
Training on augumented user 65110 45/50 current_auc = 0.728864168618267
User 65110 AUC after training: 0.7287470725995316
User 65110 does not improve AUC. Reverting changes.
Training on augumented user 30763 46/50 current_auc = 0.728864168618267
User 30763 AUC after training: 0.7283957845433255
User 30763 does not improve AUC. Reverting changes.
Training on augumented user 71995 47/50 current_auc = 0.728864168618267
User 71995 AUC after training: 0.7292740046838407
User 71995 improves AUC. Keeping the model.
Training on augumented user 32563 48/50 current_auc = 0.7292740046838407
User 32563 AUC after training: 0.7293325526932084
User 32563 improves AUC. Keeping the model.
Training on augumented user 136360 49/50 current_auc = 0.7293325526932084
User 136360 AUC after training: 0.7296252927400468
User 136360 improves AUC. Keeping the model.
[2024-12-02 19:57:27.048965] start test user 88798 258/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:57:27.772115] start test user 88798 258/568 recall augumented users by random, augumented_users = [11751, 130349, 54321, 78985, 135251, 16007, 40642, 112902, 63523, 20994, 64303, 110678, 58156, 64128, 129436, 73631, 31429, 38484, 103320, 82027, 50907, 32570, 34403, 22944, 52665, 102068, 56930, 82686, 129529, 69007, 99218, 137416, 23563, 44547, 51899, 27453, 49053, 137619, 75069, 41101, 42681, 108950, 36983, 56451, 81478, 175, 61220, 12452, 11433, 132111]
[2024-12-02 19:57:27.794800] user = 88798 Cloud 258/568
[2024-12-02 19:57:27.821782] user = 88798 Local 258/568
[2024-12-02 19:57:27.927128] user = 88798 Local+ 258/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:57:30.180957] user = 88798 MPDA- 258/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7921768707482992
Training on augumented user 11751 0/50 current_auc = 0.7921768707482992
User 11751 AUC after training: 0.7948979591836735
User 11751 improves AUC. Keeping the model.
Training on augumented user 130349 1/50 current_auc = 0.7948979591836735
User 130349 AUC after training: 0.7945578231292516
User 130349 does not improve AUC. Reverting changes.
Training on augumented user 54321 2/50 current_auc = 0.7948979591836735
User 54321 AUC after training: 0.7952380952380953
User 54321 improves AUC. Keeping the model.
Training on augumented user 78985 3/50 current_auc = 0.7952380952380953
User 78985 AUC after training: 0.795578231292517
User 78985 improves AUC. Keeping the model.
Training on augumented user 135251 4/50 current_auc = 0.795578231292517
User 135251 AUC after training: 0.7948979591836736
User 135251 does not improve AUC. Reverting changes.
Training on augumented user 16007 5/50 current_auc = 0.795578231292517
User 16007 AUC after training: 0.7945578231292517
User 16007 does not improve AUC. Reverting changes.
Training on augumented user 40642 6/50 current_auc = 0.795578231292517
User 40642 AUC after training: 0.7959183673469388
User 40642 improves AUC. Keeping the model.
Training on augumented user 112902 7/50 current_auc = 0.7959183673469388
User 112902 AUC after training: 0.7948979591836735
User 112902 does not improve AUC. Reverting changes.
Training on augumented user 63523 8/50 current_auc = 0.7959183673469388
User 63523 AUC after training: 0.7952380952380953
User 63523 does not improve AUC. Reverting changes.
Training on augumented user 20994 9/50 current_auc = 0.7959183673469388
User 20994 AUC after training: 0.7959183673469388
User 20994 does not improve AUC. Reverting changes.
Training on augumented user 64303 10/50 current_auc = 0.7959183673469388
User 64303 AUC after training: 0.795578231292517
User 64303 does not improve AUC. Reverting changes.
Training on augumented user 110678 11/50 current_auc = 0.7959183673469388
User 110678 AUC after training: 0.7959183673469388
User 110678 does not improve AUC. Reverting changes.
Training on augumented user 58156 12/50 current_auc = 0.7959183673469388
User 58156 AUC after training: 0.7952380952380952
User 58156 does not improve AUC. Reverting changes.
Training on augumented user 64128 13/50 current_auc = 0.7959183673469388
User 64128 AUC after training: 0.7948979591836735
User 64128 does not improve AUC. Reverting changes.
Training on augumented user 129436 14/50 current_auc = 0.7959183673469388
User 129436 AUC after training: 0.7962585034013605
User 129436 improves AUC. Keeping the model.
Training on augumented user 73631 15/50 current_auc = 0.7962585034013605
User 73631 AUC after training: 0.7959183673469388
User 73631 does not improve AUC. Reverting changes.
Training on augumented user 31429 16/50 current_auc = 0.7962585034013605
User 31429 AUC after training: 0.795578231292517
User 31429 does not improve AUC. Reverting changes.
Training on augumented user 38484 17/50 current_auc = 0.7962585034013605
User 38484 AUC after training: 0.7955782312925169
User 38484 does not improve AUC. Reverting changes.
Training on augumented user 103320 18/50 current_auc = 0.7962585034013605
User 103320 AUC after training: 0.7959183673469387
User 103320 does not improve AUC. Reverting changes.
Training on augumented user 82027 19/50 current_auc = 0.7962585034013605
User 82027 AUC after training: 0.7965986394557822
User 82027 improves AUC. Keeping the model.
Training on augumented user 50907 20/50 current_auc = 0.7965986394557822
User 50907 AUC after training: 0.7965986394557822
User 50907 does not improve AUC. Reverting changes.
Training on augumented user 32570 21/50 current_auc = 0.7965986394557822
User 32570 AUC after training: 0.7962585034013605
User 32570 does not improve AUC. Reverting changes.
Training on augumented user 34403 22/50 current_auc = 0.7965986394557822
User 34403 AUC after training: 0.7965986394557822
User 34403 does not improve AUC. Reverting changes.
Training on augumented user 22944 23/50 current_auc = 0.7965986394557822
User 22944 AUC after training: 0.7976190476190474
User 22944 improves AUC. Keeping the model.
Training on augumented user 52665 24/50 current_auc = 0.7976190476190474
User 52665 AUC after training: 0.7945578231292516
User 52665 does not improve AUC. Reverting changes.
Training on augumented user 102068 25/50 current_auc = 0.7976190476190474
User 102068 AUC after training: 0.795578231292517
User 102068 does not improve AUC. Reverting changes.
Training on augumented user 56930 26/50 current_auc = 0.7976190476190474
User 56930 AUC after training: 0.7972789115646257
User 56930 does not improve AUC. Reverting changes.
Training on augumented user 82686 27/50 current_auc = 0.7976190476190474
User 82686 AUC after training: 0.7979591836734693
User 82686 improves AUC. Keeping the model.
Training on augumented user 129529 28/50 current_auc = 0.7979591836734693
User 129529 AUC after training: 0.7989795918367346
User 129529 improves AUC. Keeping the model.
Training on augumented user 69007 29/50 current_auc = 0.7989795918367346
User 69007 AUC after training: 0.7979591836734694
User 69007 does not improve AUC. Reverting changes.
Training on augumented user 99218 30/50 current_auc = 0.7989795918367346
User 99218 AUC after training: 0.7982993197278911
User 99218 does not improve AUC. Reverting changes.
Training on augumented user 137416 31/50 current_auc = 0.7989795918367346
User 137416 AUC after training: 0.7976190476190476
User 137416 does not improve AUC. Reverting changes.
Training on augumented user 23563 32/50 current_auc = 0.7989795918367346
User 23563 AUC after training: 0.798299319727891
User 23563 does not improve AUC. Reverting changes.
Training on augumented user 44547 33/50 current_auc = 0.7989795918367346
User 44547 AUC after training: 0.7989795918367346
User 44547 does not improve AUC. Reverting changes.
Training on augumented user 51899 34/50 current_auc = 0.7989795918367346
User 51899 AUC after training: 0.7982993197278913
User 51899 does not improve AUC. Reverting changes.
Training on augumented user 27453 35/50 current_auc = 0.7989795918367346
User 27453 AUC after training: 0.7976190476190476
User 27453 does not improve AUC. Reverting changes.
Training on augumented user 49053 36/50 current_auc = 0.7989795918367346
User 49053 AUC after training: 0.7982993197278911
User 49053 does not improve AUC. Reverting changes.
Training on augumented user 137619 37/50 current_auc = 0.7989795918367346
User 137619 AUC after training: 0.7959183673469388
User 137619 does not improve AUC. Reverting changes.
Training on augumented user 75069 38/50 current_auc = 0.7989795918367346
User 75069 AUC after training: 0.7979591836734693
User 75069 does not improve AUC. Reverting changes.
Training on augumented user 41101 39/50 current_auc = 0.7989795918367346
User 41101 AUC after training: 0.7969387755102041
User 41101 does not improve AUC. Reverting changes.
Training on augumented user 42681 40/50 current_auc = 0.7989795918367346
User 42681 AUC after training: 0.7986394557823129
User 42681 does not improve AUC. Reverting changes.
Training on augumented user 108950 41/50 current_auc = 0.7989795918367346
User 108950 AUC after training: 0.7976190476190477
User 108950 does not improve AUC. Reverting changes.
Training on augumented user 36983 42/50 current_auc = 0.7989795918367346
User 36983 AUC after training: 0.7965986394557824
User 36983 does not improve AUC. Reverting changes.
Training on augumented user 56451 43/50 current_auc = 0.7989795918367346
User 56451 AUC after training: 0.7965986394557824
User 56451 does not improve AUC. Reverting changes.
Training on augumented user 81478 44/50 current_auc = 0.7989795918367346
User 81478 AUC after training: 0.7979591836734694
User 81478 does not improve AUC. Reverting changes.
Training on augumented user 175 45/50 current_auc = 0.7989795918367346
User 175 AUC after training: 0.7986394557823129
User 175 does not improve AUC. Reverting changes.
Training on augumented user 61220 46/50 current_auc = 0.7989795918367346
User 61220 AUC after training: 0.7986394557823129
User 61220 does not improve AUC. Reverting changes.
Training on augumented user 12452 47/50 current_auc = 0.7989795918367346
User 12452 AUC after training: 0.7972789115646258
User 12452 does not improve AUC. Reverting changes.
Training on augumented user 11433 48/50 current_auc = 0.7989795918367346
User 11433 AUC after training: 0.7976190476190477
User 11433 does not improve AUC. Reverting changes.
Training on augumented user 132111 49/50 current_auc = 0.7989795918367346
User 132111 AUC after training: 0.7976190476190477
User 132111 does not improve AUC. Reverting changes.
[2024-12-02 19:57:58.083953] start test user 88818 259/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:57:58.503397] start test user 88818 259/568 recall augumented users by random, augumented_users = [56769, 11733, 32614, 16570, 98400, 22831, 41644, 114996, 64682, 9833, 112532, 115700, 47246, 100724, 106493, 94293, 42318, 6422, 77394, 14861, 40935, 22946, 39293, 121465, 59969, 111812, 74279, 82740, 2587, 130730, 79979, 74761, 84679, 58290, 69038, 63409, 105191, 87045, 100548, 52872, 96078, 44058, 133210, 113362, 85035, 34327, 81265, 99472, 132565, 64132]
[2024-12-02 19:57:58.518247] user = 88818 Cloud 259/568
[2024-12-02 19:57:58.538679] user = 88818 Local 259/568
[2024-12-02 19:57:58.607048] user = 88818 Local+ 259/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:58:00.096834] user = 88818 MPDA- 259/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5325164293537787
Training on augumented user 56769 0/50 current_auc = 0.5325164293537787
User 56769 AUC after training: 0.5319687842278203
User 56769 does not improve AUC. Reverting changes.
Training on augumented user 11733 1/50 current_auc = 0.5325164293537787
User 11733 AUC after training: 0.5334063526834611
User 11733 improves AUC. Keeping the model.
Training on augumented user 32614 2/50 current_auc = 0.5334063526834611
User 32614 AUC after training: 0.5332694414019716
User 32614 does not improve AUC. Reverting changes.
Training on augumented user 16570 3/50 current_auc = 0.5334063526834611
User 16570 AUC after training: 0.5338170865279299
User 16570 improves AUC. Keeping the model.
Training on augumented user 98400 4/50 current_auc = 0.5338170865279299
User 98400 AUC after training: 0.5336801752464403
User 98400 does not improve AUC. Reverting changes.
Training on augumented user 22831 5/50 current_auc = 0.5338170865279299
User 22831 AUC after training: 0.5332694414019715
User 22831 does not improve AUC. Reverting changes.
Training on augumented user 41644 6/50 current_auc = 0.5338170865279299
User 41644 AUC after training: 0.5339539978094194
User 41644 improves AUC. Keeping the model.
Training on augumented user 114996 7/50 current_auc = 0.5339539978094194
User 114996 AUC after training: 0.5338170865279299
User 114996 does not improve AUC. Reverting changes.
Training on augumented user 64682 8/50 current_auc = 0.5339539978094194
User 64682 AUC after training: 0.5347070098576123
User 64682 improves AUC. Keeping the model.
Training on augumented user 9833 9/50 current_auc = 0.5347070098576123
User 9833 AUC after training: 0.5335432639649508
User 9833 does not improve AUC. Reverting changes.
Training on augumented user 112532 10/50 current_auc = 0.5347070098576123
User 112532 AUC after training: 0.5335432639649507
User 112532 does not improve AUC. Reverting changes.
Training on augumented user 115700 11/50 current_auc = 0.5347070098576123
User 115700 AUC after training: 0.5339539978094194
User 115700 does not improve AUC. Reverting changes.
Training on augumented user 47246 12/50 current_auc = 0.5347070098576123
User 47246 AUC after training: 0.5335432639649507
User 47246 does not improve AUC. Reverting changes.
Training on augumented user 100724 13/50 current_auc = 0.5347070098576123
User 100724 AUC after training: 0.5345700985761227
User 100724 does not improve AUC. Reverting changes.
Training on augumented user 106493 14/50 current_auc = 0.5347070098576123
User 106493 AUC after training: 0.5365553121577219
User 106493 improves AUC. Keeping the model.
Training on augumented user 94293 15/50 current_auc = 0.5365553121577219
User 94293 AUC after training: 0.5365553121577219
User 94293 does not improve AUC. Reverting changes.
Training on augumented user 42318 16/50 current_auc = 0.5365553121577219
User 42318 AUC after training: 0.5358707557502739
User 42318 does not improve AUC. Reverting changes.
Training on augumented user 6422 17/50 current_auc = 0.5365553121577219
User 6422 AUC after training: 0.5362814895947426
User 6422 does not improve AUC. Reverting changes.
Training on augumented user 77394 18/50 current_auc = 0.5365553121577219
User 77394 AUC after training: 0.5364184008762322
User 77394 does not improve AUC. Reverting changes.
Training on augumented user 14861 19/50 current_auc = 0.5365553121577219
User 14861 AUC after training: 0.536829134720701
User 14861 improves AUC. Keeping the model.
Training on augumented user 40935 20/50 current_auc = 0.536829134720701
User 40935 AUC after training: 0.5369660460021906
User 40935 improves AUC. Keeping the model.
Training on augumented user 22946 21/50 current_auc = 0.5369660460021906
User 22946 AUC after training: 0.5365553121577218
User 22946 does not improve AUC. Reverting changes.
Training on augumented user 39293 22/50 current_auc = 0.5369660460021906
User 39293 AUC after training: 0.536829134720701
User 39293 does not improve AUC. Reverting changes.
Training on augumented user 121465 23/50 current_auc = 0.5369660460021906
User 121465 AUC after training: 0.5358707557502739
User 121465 does not improve AUC. Reverting changes.
Training on augumented user 59969 24/50 current_auc = 0.5369660460021906
User 59969 AUC after training: 0.5365553121577218
User 59969 does not improve AUC. Reverting changes.
Training on augumented user 111812 25/50 current_auc = 0.5369660460021906
User 111812 AUC after training: 0.536829134720701
User 111812 does not improve AUC. Reverting changes.
Training on augumented user 74279 26/50 current_auc = 0.5369660460021906
User 74279 AUC after training: 0.5360076670317634
User 74279 does not improve AUC. Reverting changes.
Training on augumented user 82740 27/50 current_auc = 0.5369660460021906
User 82740 AUC after training: 0.536144578313253
User 82740 does not improve AUC. Reverting changes.
Training on augumented user 2587 28/50 current_auc = 0.5369660460021906
User 2587 AUC after training: 0.5369660460021906
User 2587 does not improve AUC. Reverting changes.
Training on augumented user 130730 29/50 current_auc = 0.5369660460021906
User 130730 AUC after training: 0.5360076670317634
User 130730 does not improve AUC. Reverting changes.
Training on augumented user 79979 30/50 current_auc = 0.5369660460021906
User 79979 AUC after training: 0.5360076670317634
User 79979 does not improve AUC. Reverting changes.
Training on augumented user 74761 31/50 current_auc = 0.5369660460021906
User 74761 AUC after training: 0.5364184008762323
User 74761 does not improve AUC. Reverting changes.
Training on augumented user 84679 32/50 current_auc = 0.5369660460021906
User 84679 AUC after training: 0.536829134720701
User 84679 does not improve AUC. Reverting changes.
Training on augumented user 58290 33/50 current_auc = 0.5369660460021906
User 58290 AUC after training: 0.5369660460021906
User 58290 does not improve AUC. Reverting changes.
Training on augumented user 69038 34/50 current_auc = 0.5369660460021906
User 69038 AUC after training: 0.5342278203723987
User 69038 does not improve AUC. Reverting changes.
Training on augumented user 63409 35/50 current_auc = 0.5369660460021906
User 63409 AUC after training: 0.5366922234392114
User 63409 does not improve AUC. Reverting changes.
Training on augumented user 105191 36/50 current_auc = 0.5369660460021906
User 105191 AUC after training: 0.5355969331872946
User 105191 does not improve AUC. Reverting changes.
Training on augumented user 87045 37/50 current_auc = 0.5369660460021906
User 87045 AUC after training: 0.5357338444687842
User 87045 does not improve AUC. Reverting changes.
Training on augumented user 100548 38/50 current_auc = 0.5369660460021906
User 100548 AUC after training: 0.5365553121577218
User 100548 does not improve AUC. Reverting changes.
Training on augumented user 52872 39/50 current_auc = 0.5369660460021906
User 52872 AUC after training: 0.5364184008762322
User 52872 does not improve AUC. Reverting changes.
Training on augumented user 96078 40/50 current_auc = 0.5369660460021906
User 96078 AUC after training: 0.5361445783132531
User 96078 does not improve AUC. Reverting changes.
Training on augumented user 44058 41/50 current_auc = 0.5369660460021906
User 44058 AUC after training: 0.536829134720701
User 44058 does not improve AUC. Reverting changes.
Training on augumented user 133210 42/50 current_auc = 0.5369660460021906
User 133210 AUC after training: 0.5355969331872946
User 133210 does not improve AUC. Reverting changes.
Training on augumented user 113362 43/50 current_auc = 0.5369660460021906
User 113362 AUC after training: 0.5366922234392114
User 113362 does not improve AUC. Reverting changes.
Training on augumented user 85035 44/50 current_auc = 0.5369660460021906
User 85035 AUC after training: 0.5366922234392114
User 85035 does not improve AUC. Reverting changes.
Training on augumented user 34327 45/50 current_auc = 0.5369660460021906
User 34327 AUC after training: 0.5360076670317634
User 34327 does not improve AUC. Reverting changes.
Training on augumented user 81265 46/50 current_auc = 0.5369660460021906
User 81265 AUC after training: 0.536829134720701
User 81265 does not improve AUC. Reverting changes.
Training on augumented user 99472 47/50 current_auc = 0.5369660460021906
User 99472 AUC after training: 0.5358707557502739
User 99472 does not improve AUC. Reverting changes.
Training on augumented user 132565 48/50 current_auc = 0.5369660460021906
User 132565 AUC after training: 0.5365553121577218
User 132565 does not improve AUC. Reverting changes.
Training on augumented user 64132 49/50 current_auc = 0.5369660460021906
User 64132 AUC after training: 0.5365553121577218
User 64132 does not improve AUC. Reverting changes.
[2024-12-02 19:58:29.982766] start test user 88820 260/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:58:30.464551] start test user 88820 260/568 recall augumented users by random, augumented_users = [44550, 137178, 33219, 102458, 10930, 66815, 108419, 52873, 28949, 16658, 138456, 72762, 38942, 7346, 50458, 126701, 32297, 100027, 35049, 77093, 68596, 83115, 37368, 47489, 23303, 97623, 30571, 106679, 115023, 76450, 37321, 82191, 6153, 867, 109646, 76865, 206, 72437, 112635, 14002, 102464, 15331, 34392, 38510, 81969, 51656, 2577, 117210, 109058, 108417]
[2024-12-02 19:58:30.492387] user = 88820 Cloud 260/568
[2024-12-02 19:58:30.607631] user = 88820 Local 260/568
[2024-12-02 19:58:31.399418] user = 88820 Local+ 260/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:58:33.802584] user = 88820 MPDA- 260/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.696116183670769
Training on augumented user 44550 0/50 current_auc = 0.696116183670769
User 44550 AUC after training: 0.6959375413523886
User 44550 does not improve AUC. Reverting changes.
Training on augumented user 137178 1/50 current_auc = 0.696116183670769
User 137178 AUC after training: 0.6960963345242821
User 137178 does not improve AUC. Reverting changes.
Training on augumented user 33219 2/50 current_auc = 0.696116183670769
User 33219 AUC after training: 0.6959441577345509
User 33219 does not improve AUC. Reverting changes.
Training on augumented user 102458 3/50 current_auc = 0.696116183670769
User 102458 AUC after training: 0.6959970887918486
User 102458 does not improve AUC. Reverting changes.
Training on augumented user 10930 4/50 current_auc = 0.696116183670769
User 10930 AUC after training: 0.6958052137091438
User 10930 does not improve AUC. Reverting changes.
Training on augumented user 66815 5/50 current_auc = 0.696116183670769
User 66815 AUC after training: 0.6958813021040097
User 66815 does not improve AUC. Reverting changes.
Training on augumented user 108419 6/50 current_auc = 0.696116183670769
User 108419 AUC after training: 0.6969035331480746
User 108419 improves AUC. Keeping the model.
Training on augumented user 52873 7/50 current_auc = 0.6969035331480746
User 52873 AUC after training: 0.6971681884345641
User 52873 improves AUC. Keeping the model.
Training on augumented user 28949 8/50 current_auc = 0.6971681884345641
User 28949 AUC after training: 0.6974460764853778
User 28949 improves AUC. Keeping the model.
Training on augumented user 16658 9/50 current_auc = 0.6974460764853778
User 16658 AUC after training: 0.697538705835649
User 16658 improves AUC. Keeping the model.
Training on augumented user 138456 10/50 current_auc = 0.697538705835649
User 138456 AUC after training: 0.6966686515813154
User 138456 does not improve AUC. Reverting changes.
Training on augumented user 72762 11/50 current_auc = 0.697538705835649
User 72762 AUC after training: 0.6972938996956464
User 72762 does not improve AUC. Reverting changes.
Training on augumented user 38942 12/50 current_auc = 0.697538705835649
User 38942 AUC after training: 0.6976445679502448
User 38942 improves AUC. Keeping the model.
Training on augumented user 7346 13/50 current_auc = 0.6976445679502448
User 7346 AUC after training: 0.6969630805875348
User 7346 does not improve AUC. Reverting changes.
Training on augumented user 50458 14/50 current_auc = 0.6976445679502448
User 50458 AUC after training: 0.6974129945745665
User 50458 does not improve AUC. Reverting changes.
Training on augumented user 126701 15/50 current_auc = 0.6976445679502448
User 126701 AUC after training: 0.6976081778483525
User 126701 does not improve AUC. Reverting changes.
Training on augumented user 32297 16/50 current_auc = 0.6976445679502448
User 32297 AUC after training: 0.6977008071986239
User 32297 improves AUC. Keeping the model.
Training on augumented user 100027 17/50 current_auc = 0.6977008071986239
User 100027 AUC after training: 0.6972244276829431
User 100027 does not improve AUC. Reverting changes.
Training on augumented user 35049 18/50 current_auc = 0.6977008071986239
User 35049 AUC after training: 0.697846367606193
User 35049 improves AUC. Keeping the model.
Training on augumented user 77093 19/50 current_auc = 0.697846367606193
User 77093 AUC after training: 0.6974956993515945
User 77093 does not improve AUC. Reverting changes.
Training on augumented user 68596 20/50 current_auc = 0.697846367606193
User 68596 AUC after training: 0.6980250099245733
User 68596 improves AUC. Keeping the model.
Training on augumented user 83115 21/50 current_auc = 0.6980250099245733
User 83115 AUC after training: 0.6982929734021437
User 83115 improves AUC. Keeping the model.
Training on augumented user 37368 22/50 current_auc = 0.6982929734021437
User 37368 AUC after training: 0.6982631996824137
User 37368 does not improve AUC. Reverting changes.
Training on augumented user 47489 23/50 current_auc = 0.6982929734021437
User 47489 AUC after training: 0.6982698160645759
User 47489 does not improve AUC. Reverting changes.
Training on augumented user 23303 24/50 current_auc = 0.6982929734021437
User 23303 AUC after training: 0.6978463676061929
User 23303 does not improve AUC. Reverting changes.
Training on augumented user 97623 25/50 current_auc = 0.6982929734021437
User 97623 AUC after training: 0.6988355167394469
User 97623 improves AUC. Keeping the model.
Training on augumented user 30571 26/50 current_auc = 0.6988355167394469
User 30571 AUC after training: 0.6985642450707953
User 30571 does not improve AUC. Reverting changes.
Training on augumented user 106679 27/50 current_auc = 0.6988355167394469
User 106679 AUC after training: 0.6987991266375546
User 106679 does not improve AUC. Reverting changes.
Training on augumented user 115023 28/50 current_auc = 0.6988355167394469
User 115023 AUC after training: 0.6988586740770147
User 115023 improves AUC. Keeping the model.
Training on augumented user 76450 29/50 current_auc = 0.6988586740770147
User 76450 AUC after training: 0.6986436416567421
User 76450 does not improve AUC. Reverting changes.
Training on augumented user 37321 30/50 current_auc = 0.6988586740770147
User 37321 AUC after training: 0.69934828635702
User 37321 improves AUC. Keeping the model.
Training on augumented user 82191 31/50 current_auc = 0.69934828635702
User 82191 AUC after training: 0.6985774778351198
User 82191 does not improve AUC. Reverting changes.
Training on augumented user 6153 32/50 current_auc = 0.69934828635702
User 6153 AUC after training: 0.6991762604208018
User 6153 does not improve AUC. Reverting changes.
Training on augumented user 867 33/50 current_auc = 0.69934828635702
User 867 AUC after training: 0.698868598650258
User 867 does not improve AUC. Reverting changes.
Training on augumented user 109646 34/50 current_auc = 0.69934828635702
User 109646 AUC after training: 0.6991564112743152
User 109646 does not improve AUC. Reverting changes.
Training on augumented user 76865 35/50 current_auc = 0.69934828635702
User 76865 AUC after training: 0.6987461955802567
User 76865 does not improve AUC. Reverting changes.
Training on augumented user 206 36/50 current_auc = 0.69934828635702
User 206 AUC after training: 0.6993714436945878
User 206 improves AUC. Keeping the model.
Training on augumented user 72437 37/50 current_auc = 0.6993714436945878
User 72437 AUC after training: 0.699209342331613
User 72437 does not improve AUC. Reverting changes.
Training on augumented user 112635 38/50 current_auc = 0.6993714436945878
User 112635 AUC after training: 0.6980382426888978
User 112635 does not improve AUC. Reverting changes.
Training on augumented user 14002 39/50 current_auc = 0.6993714436945878
User 14002 AUC after training: 0.6991928013762074
User 14002 does not improve AUC. Reverting changes.
Training on augumented user 102464 40/50 current_auc = 0.6993714436945878
User 102464 AUC after training: 0.6993118962551277
User 102464 does not improve AUC. Reverting changes.
Training on augumented user 15331 41/50 current_auc = 0.6993714436945878
User 15331 AUC after training: 0.6993085880640466
User 15331 does not improve AUC. Reverting changes.
Training on augumented user 34392 42/50 current_auc = 0.6993714436945878
User 34392 AUC after training: 0.6989612280005293
User 34392 does not improve AUC. Reverting changes.
Training on augumented user 38510 43/50 current_auc = 0.6993714436945878
User 38510 AUC after training: 0.6995004631467513
User 38510 improves AUC. Keeping the model.
Training on augumented user 81969 44/50 current_auc = 0.6995004631467513
User 81969 AUC after training: 0.6992589651978298
User 81969 does not improve AUC. Reverting changes.
Training on augumented user 51656 45/50 current_auc = 0.6995004631467513
User 51656 AUC after training: 0.6994541484716157
User 51656 does not improve AUC. Reverting changes.
Training on augumented user 2577 46/50 current_auc = 0.6995004631467513
User 2577 AUC after training: 0.6996427153632394
User 2577 improves AUC. Keeping the model.
Training on augumented user 117210 47/50 current_auc = 0.6996427153632394
User 117210 AUC after training: 0.6998081249172953
User 117210 improves AUC. Keeping the model.
Training on augumented user 109058 48/50 current_auc = 0.6998081249172953
User 109058 AUC after training: 0.6997882757708085
User 109058 does not improve AUC. Reverting changes.
Training on augumented user 108417 49/50 current_auc = 0.6998081249172953
User 108417 AUC after training: 0.6995897843059414
User 108417 does not improve AUC. Reverting changes.
[2024-12-02 19:59:05.940171] start test user 88821 261/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:59:06.405173] start test user 88821 261/568 recall augumented users by random, augumented_users = [82332, 6501, 22089, 111127, 14169, 84762, 33460, 74925, 16611, 123226, 64669, 32362, 42255, 26931, 95959, 87955, 35389, 107663, 47924, 102656, 52133, 6819, 123382, 79220, 106398, 120545, 51221, 55584, 10970, 5465, 100998, 92016, 59492, 20234, 68774, 116890, 101777, 103659, 96622, 102650, 50233, 6467, 46663, 37441, 6432, 10078, 99613, 98306, 12681, 100790]
[2024-12-02 19:59:06.421427] user = 88821 Cloud 261/568
[2024-12-02 19:59:06.465612] user = 88821 Local 261/568
[2024-12-02 19:59:06.643696] user = 88821 Local+ 261/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:59:08.868540] user = 88821 MPDA- 261/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8089561855670103
Training on augumented user 82332 0/50 current_auc = 0.8089561855670103
User 82332 AUC after training: 0.8089561855670103
User 82332 does not improve AUC. Reverting changes.
Training on augumented user 6501 1/50 current_auc = 0.8089561855670103
User 6501 AUC after training: 0.8089561855670103
User 6501 does not improve AUC. Reverting changes.
Training on augumented user 22089 2/50 current_auc = 0.8089561855670103
User 22089 AUC after training: 0.8084729381443299
User 22089 does not improve AUC. Reverting changes.
Training on augumented user 111127 3/50 current_auc = 0.8089561855670103
User 111127 AUC after training: 0.8089561855670103
User 111127 does not improve AUC. Reverting changes.
Training on augumented user 14169 4/50 current_auc = 0.8089561855670103
User 14169 AUC after training: 0.8096005154639175
User 14169 improves AUC. Keeping the model.
Training on augumented user 84762 5/50 current_auc = 0.8096005154639175
User 84762 AUC after training: 0.8094394329896908
User 84762 does not improve AUC. Reverting changes.
Training on augumented user 33460 6/50 current_auc = 0.8096005154639175
User 33460 AUC after training: 0.8092783505154639
User 33460 does not improve AUC. Reverting changes.
Training on augumented user 74925 7/50 current_auc = 0.8096005154639175
User 74925 AUC after training: 0.8087951030927836
User 74925 does not improve AUC. Reverting changes.
Training on augumented user 16611 8/50 current_auc = 0.8096005154639175
User 16611 AUC after training: 0.8092783505154639
User 16611 does not improve AUC. Reverting changes.
Training on augumented user 123226 9/50 current_auc = 0.8096005154639175
User 123226 AUC after training: 0.8094394329896908
User 123226 does not improve AUC. Reverting changes.
Training on augumented user 64669 10/50 current_auc = 0.8096005154639175
User 64669 AUC after training: 0.8097615979381443
User 64669 improves AUC. Keeping the model.
Training on augumented user 32362 11/50 current_auc = 0.8097615979381443
User 32362 AUC after training: 0.8097615979381443
User 32362 does not improve AUC. Reverting changes.
Training on augumented user 42255 12/50 current_auc = 0.8097615979381443
User 42255 AUC after training: 0.8097615979381443
User 42255 does not improve AUC. Reverting changes.
Training on augumented user 26931 13/50 current_auc = 0.8097615979381443
User 26931 AUC after training: 0.8096005154639175
User 26931 does not improve AUC. Reverting changes.
Training on augumented user 95959 14/50 current_auc = 0.8097615979381443
User 95959 AUC after training: 0.8099226804123711
User 95959 improves AUC. Keeping the model.
Training on augumented user 87955 15/50 current_auc = 0.8099226804123711
User 87955 AUC after training: 0.810083762886598
User 87955 improves AUC. Keeping the model.
Training on augumented user 35389 16/50 current_auc = 0.810083762886598
User 35389 AUC after training: 0.8112113402061856
User 35389 improves AUC. Keeping the model.
Training on augumented user 107663 17/50 current_auc = 0.8112113402061856
User 107663 AUC after training: 0.8107280927835052
User 107663 does not improve AUC. Reverting changes.
Training on augumented user 47924 18/50 current_auc = 0.8112113402061856
User 47924 AUC after training: 0.8084729381443299
User 47924 does not improve AUC. Reverting changes.
Training on augumented user 102656 19/50 current_auc = 0.8112113402061856
User 102656 AUC after training: 0.810889175257732
User 102656 does not improve AUC. Reverting changes.
Training on augumented user 52133 20/50 current_auc = 0.8112113402061856
User 52133 AUC after training: 0.810083762886598
User 52133 does not improve AUC. Reverting changes.
Training on augumented user 6819 21/50 current_auc = 0.8112113402061856
User 6819 AUC after training: 0.810889175257732
User 6819 does not improve AUC. Reverting changes.
Training on augumented user 123382 22/50 current_auc = 0.8112113402061856
User 123382 AUC after training: 0.8104059278350515
User 123382 does not improve AUC. Reverting changes.
Training on augumented user 79220 23/50 current_auc = 0.8112113402061856
User 79220 AUC after training: 0.8096005154639175
User 79220 does not improve AUC. Reverting changes.
Training on augumented user 106398 24/50 current_auc = 0.8112113402061856
User 106398 AUC after training: 0.8107280927835052
User 106398 does not improve AUC. Reverting changes.
Training on augumented user 120545 25/50 current_auc = 0.8112113402061856
User 120545 AUC after training: 0.8110502577319587
User 120545 does not improve AUC. Reverting changes.
Training on augumented user 51221 26/50 current_auc = 0.8112113402061856
User 51221 AUC after training: 0.8110502577319587
User 51221 does not improve AUC. Reverting changes.
Training on augumented user 55584 27/50 current_auc = 0.8112113402061856
User 55584 AUC after training: 0.8096005154639175
User 55584 does not improve AUC. Reverting changes.
Training on augumented user 10970 28/50 current_auc = 0.8112113402061856
User 10970 AUC after training: 0.810083762886598
User 10970 does not improve AUC. Reverting changes.
Training on augumented user 5465 29/50 current_auc = 0.8112113402061856
User 5465 AUC after training: 0.8123389175257733
User 5465 improves AUC. Keeping the model.
Training on augumented user 100998 30/50 current_auc = 0.8123389175257733
User 100998 AUC after training: 0.8126610824742267
User 100998 improves AUC. Keeping the model.
Training on augumented user 92016 31/50 current_auc = 0.8126610824742267
User 92016 AUC after training: 0.8115335051546392
User 92016 does not improve AUC. Reverting changes.
Training on augumented user 59492 32/50 current_auc = 0.8126610824742267
User 59492 AUC after training: 0.8128221649484536
User 59492 improves AUC. Keeping the model.
Training on augumented user 20234 33/50 current_auc = 0.8128221649484536
User 20234 AUC after training: 0.8125
User 20234 does not improve AUC. Reverting changes.
Training on augumented user 68774 34/50 current_auc = 0.8128221649484536
User 68774 AUC after training: 0.8126610824742269
User 68774 does not improve AUC. Reverting changes.
Training on augumented user 116890 35/50 current_auc = 0.8128221649484536
User 116890 AUC after training: 0.8126610824742267
User 116890 does not improve AUC. Reverting changes.
Training on augumented user 101777 36/50 current_auc = 0.8128221649484536
User 101777 AUC after training: 0.8128221649484536
User 101777 does not improve AUC. Reverting changes.
Training on augumented user 103659 37/50 current_auc = 0.8128221649484536
User 103659 AUC after training: 0.8123389175257733
User 103659 does not improve AUC. Reverting changes.
Training on augumented user 96622 38/50 current_auc = 0.8128221649484536
User 96622 AUC after training: 0.8131443298969072
User 96622 improves AUC. Keeping the model.
Training on augumented user 102650 39/50 current_auc = 0.8131443298969072
User 102650 AUC after training: 0.8131443298969072
User 102650 does not improve AUC. Reverting changes.
Training on augumented user 50233 40/50 current_auc = 0.8131443298969072
User 50233 AUC after training: 0.8136275773195877
User 50233 improves AUC. Keeping the model.
Training on augumented user 6467 41/50 current_auc = 0.8136275773195877
User 6467 AUC after training: 0.813305412371134
User 6467 does not improve AUC. Reverting changes.
Training on augumented user 46663 42/50 current_auc = 0.8136275773195877
User 46663 AUC after training: 0.814110824742268
User 46663 improves AUC. Keeping the model.
Training on augumented user 37441 43/50 current_auc = 0.814110824742268
User 37441 AUC after training: 0.814110824742268
User 37441 does not improve AUC. Reverting changes.
Training on augumented user 6432 44/50 current_auc = 0.814110824742268
User 6432 AUC after training: 0.8137886597938144
User 6432 does not improve AUC. Reverting changes.
Training on augumented user 10078 45/50 current_auc = 0.814110824742268
User 10078 AUC after training: 0.8137886597938144
User 10078 does not improve AUC. Reverting changes.
Training on augumented user 99613 46/50 current_auc = 0.814110824742268
User 99613 AUC after training: 0.8142719072164948
User 99613 improves AUC. Keeping the model.
Training on augumented user 98306 47/50 current_auc = 0.8142719072164948
User 98306 AUC after training: 0.8145940721649484
User 98306 improves AUC. Keeping the model.
Training on augumented user 12681 48/50 current_auc = 0.8145940721649484
User 12681 AUC after training: 0.8144329896907216
User 12681 does not improve AUC. Reverting changes.
Training on augumented user 100790 49/50 current_auc = 0.8145940721649484
User 100790 AUC after training: 0.8136275773195876
User 100790 does not improve AUC. Reverting changes.
[2024-12-02 19:59:40.275194] start test user 88832 262/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:59:40.829675] start test user 88832 262/568 recall augumented users by random, augumented_users = [117937, 65787, 75874, 65559, 68263, 33479, 93475, 94245, 26179, 117553, 70332, 122347, 70706, 117796, 6450, 6629, 82044, 109658, 62358, 59401, 16977, 32369, 20163, 94375, 75948, 81727, 60751, 98007, 33870, 54039, 78153, 58933, 16914, 25647, 34263, 37120, 53761, 78492, 75665, 71493, 19133, 32969, 137559, 92730, 128291, 78559, 129612, 112701, 38927, 75436]
[2024-12-02 19:59:40.865419] user = 88832 Cloud 262/568
[2024-12-02 19:59:40.876545] user = 88832 Local 262/568
[2024-12-02 19:59:41.018930] user = 88832 Local+ 262/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:59:43.324567] user = 88832 MPDA- 262/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.40909090909090906
Training on augumented user 117937 0/50 current_auc = 0.40909090909090906
User 117937 AUC after training: 0.40909090909090906
User 117937 does not improve AUC. Reverting changes.
Training on augumented user 65787 1/50 current_auc = 0.40909090909090906
User 65787 AUC after training: 0.40909090909090906
User 65787 does not improve AUC. Reverting changes.
Training on augumented user 75874 2/50 current_auc = 0.40909090909090906
User 75874 AUC after training: 0.40909090909090906
User 75874 does not improve AUC. Reverting changes.
Training on augumented user 65559 3/50 current_auc = 0.40909090909090906
User 65559 AUC after training: 0.40909090909090906
User 65559 does not improve AUC. Reverting changes.
Training on augumented user 68263 4/50 current_auc = 0.40909090909090906
User 68263 AUC after training: 0.40909090909090906
User 68263 does not improve AUC. Reverting changes.
Training on augumented user 33479 5/50 current_auc = 0.40909090909090906
User 33479 AUC after training: 0.40909090909090906
User 33479 does not improve AUC. Reverting changes.
Training on augumented user 93475 6/50 current_auc = 0.40909090909090906
User 93475 AUC after training: 0.40909090909090906
User 93475 does not improve AUC. Reverting changes.
Training on augumented user 94245 7/50 current_auc = 0.40909090909090906
User 94245 AUC after training: 0.40909090909090906
User 94245 does not improve AUC. Reverting changes.
Training on augumented user 26179 8/50 current_auc = 0.40909090909090906
User 26179 AUC after training: 0.40909090909090906
User 26179 does not improve AUC. Reverting changes.
Training on augumented user 117553 9/50 current_auc = 0.40909090909090906
User 117553 AUC after training: 0.40909090909090906
User 117553 does not improve AUC. Reverting changes.
Training on augumented user 70332 10/50 current_auc = 0.40909090909090906
User 70332 AUC after training: 0.40909090909090906
User 70332 does not improve AUC. Reverting changes.
Training on augumented user 122347 11/50 current_auc = 0.40909090909090906
User 122347 AUC after training: 0.40909090909090906
User 122347 does not improve AUC. Reverting changes.
Training on augumented user 70706 12/50 current_auc = 0.40909090909090906
User 70706 AUC after training: 0.40909090909090906
User 70706 does not improve AUC. Reverting changes.
Training on augumented user 117796 13/50 current_auc = 0.40909090909090906
User 117796 AUC after training: 0.40909090909090906
User 117796 does not improve AUC. Reverting changes.
Training on augumented user 6450 14/50 current_auc = 0.40909090909090906
User 6450 AUC after training: 0.40909090909090906
User 6450 does not improve AUC. Reverting changes.
Training on augumented user 6629 15/50 current_auc = 0.40909090909090906
User 6629 AUC after training: 0.40909090909090906
User 6629 does not improve AUC. Reverting changes.
Training on augumented user 82044 16/50 current_auc = 0.40909090909090906
User 82044 AUC after training: 0.40909090909090906
User 82044 does not improve AUC. Reverting changes.
Training on augumented user 109658 17/50 current_auc = 0.40909090909090906
User 109658 AUC after training: 0.40909090909090906
User 109658 does not improve AUC. Reverting changes.
Training on augumented user 62358 18/50 current_auc = 0.40909090909090906
User 62358 AUC after training: 0.40909090909090906
User 62358 does not improve AUC. Reverting changes.
Training on augumented user 59401 19/50 current_auc = 0.40909090909090906
User 59401 AUC after training: 0.40909090909090906
User 59401 does not improve AUC. Reverting changes.
Training on augumented user 16977 20/50 current_auc = 0.40909090909090906
User 16977 AUC after training: 0.40909090909090906
User 16977 does not improve AUC. Reverting changes.
Training on augumented user 32369 21/50 current_auc = 0.40909090909090906
User 32369 AUC after training: 0.40909090909090906
User 32369 does not improve AUC. Reverting changes.
Training on augumented user 20163 22/50 current_auc = 0.40909090909090906
User 20163 AUC after training: 0.40909090909090906
User 20163 does not improve AUC. Reverting changes.
Training on augumented user 94375 23/50 current_auc = 0.40909090909090906
User 94375 AUC after training: 0.40909090909090906
User 94375 does not improve AUC. Reverting changes.
Training on augumented user 75948 24/50 current_auc = 0.40909090909090906
User 75948 AUC after training: 0.40909090909090906
User 75948 does not improve AUC. Reverting changes.
Training on augumented user 81727 25/50 current_auc = 0.40909090909090906
User 81727 AUC after training: 0.40909090909090906
User 81727 does not improve AUC. Reverting changes.
Training on augumented user 60751 26/50 current_auc = 0.40909090909090906
User 60751 AUC after training: 0.40909090909090906
User 60751 does not improve AUC. Reverting changes.
Training on augumented user 98007 27/50 current_auc = 0.40909090909090906
User 98007 AUC after training: 0.40909090909090906
User 98007 does not improve AUC. Reverting changes.
Training on augumented user 33870 28/50 current_auc = 0.40909090909090906
User 33870 AUC after training: 0.40909090909090906
User 33870 does not improve AUC. Reverting changes.
Training on augumented user 54039 29/50 current_auc = 0.40909090909090906
User 54039 AUC after training: 0.40909090909090906
User 54039 does not improve AUC. Reverting changes.
Training on augumented user 78153 30/50 current_auc = 0.40909090909090906
User 78153 AUC after training: 0.40909090909090906
User 78153 does not improve AUC. Reverting changes.
Training on augumented user 58933 31/50 current_auc = 0.40909090909090906
User 58933 AUC after training: 0.40909090909090906
User 58933 does not improve AUC. Reverting changes.
Training on augumented user 16914 32/50 current_auc = 0.40909090909090906
User 16914 AUC after training: 0.40909090909090906
User 16914 does not improve AUC. Reverting changes.
Training on augumented user 25647 33/50 current_auc = 0.40909090909090906
User 25647 AUC after training: 0.40909090909090906
User 25647 does not improve AUC. Reverting changes.
Training on augumented user 34263 34/50 current_auc = 0.40909090909090906
User 34263 AUC after training: 0.40909090909090906
User 34263 does not improve AUC. Reverting changes.
Training on augumented user 37120 35/50 current_auc = 0.40909090909090906
User 37120 AUC after training: 0.40909090909090906
User 37120 does not improve AUC. Reverting changes.
Training on augumented user 53761 36/50 current_auc = 0.40909090909090906
User 53761 AUC after training: 0.40909090909090906
User 53761 does not improve AUC. Reverting changes.
Training on augumented user 78492 37/50 current_auc = 0.40909090909090906
User 78492 AUC after training: 0.40909090909090906
User 78492 does not improve AUC. Reverting changes.
Training on augumented user 75665 38/50 current_auc = 0.40909090909090906
User 75665 AUC after training: 0.40909090909090906
User 75665 does not improve AUC. Reverting changes.
Training on augumented user 71493 39/50 current_auc = 0.40909090909090906
User 71493 AUC after training: 0.40909090909090906
User 71493 does not improve AUC. Reverting changes.
Training on augumented user 19133 40/50 current_auc = 0.40909090909090906
User 19133 AUC after training: 0.40909090909090906
User 19133 does not improve AUC. Reverting changes.
Training on augumented user 32969 41/50 current_auc = 0.40909090909090906
User 32969 AUC after training: 0.40909090909090906
User 32969 does not improve AUC. Reverting changes.
Training on augumented user 137559 42/50 current_auc = 0.40909090909090906
User 137559 AUC after training: 0.40909090909090906
User 137559 does not improve AUC. Reverting changes.
Training on augumented user 92730 43/50 current_auc = 0.40909090909090906
User 92730 AUC after training: 0.40909090909090906
User 92730 does not improve AUC. Reverting changes.
Training on augumented user 128291 44/50 current_auc = 0.40909090909090906
User 128291 AUC after training: 0.40909090909090906
User 128291 does not improve AUC. Reverting changes.
Training on augumented user 78559 45/50 current_auc = 0.40909090909090906
User 78559 AUC after training: 0.40909090909090906
User 78559 does not improve AUC. Reverting changes.
Training on augumented user 129612 46/50 current_auc = 0.40909090909090906
User 129612 AUC after training: 0.40909090909090906
User 129612 does not improve AUC. Reverting changes.
Training on augumented user 112701 47/50 current_auc = 0.40909090909090906
User 112701 AUC after training: 0.40909090909090906
User 112701 does not improve AUC. Reverting changes.
Training on augumented user 38927 48/50 current_auc = 0.40909090909090906
User 38927 AUC after training: 0.40909090909090906
User 38927 does not improve AUC. Reverting changes.
Training on augumented user 75436 49/50 current_auc = 0.40909090909090906
User 75436 AUC after training: 0.40909090909090906
User 75436 does not improve AUC. Reverting changes.
[2024-12-02 20:00:10.331167] start test user 88833 263/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:00:10.766018] start test user 88833 263/568 recall augumented users by random, augumented_users = [47893, 112932, 101355, 72164, 105485, 49698, 92824, 45596, 85742, 34867, 62774, 113439, 68815, 53528, 64214, 84518, 80871, 107634, 135792, 117370, 34197, 6944, 57594, 114646, 9010, 13669, 62922, 122591, 15379, 103098, 69214, 18575, 64870, 41230, 89373, 135596, 137050, 29245, 25020, 18055, 97978, 54872, 91189, 50195, 80932, 56542, 121693, 56598, 16024, 37638]
[2024-12-02 20:00:10.782087] user = 88833 Cloud 263/568
[2024-12-02 20:00:10.812207] user = 88833 Local 263/568
[2024-12-02 20:00:10.893508] user = 88833 Local+ 263/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:00:12.941347] user = 88833 MPDA- 263/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4650809716599191
Training on augumented user 47893 0/50 current_auc = 0.4650809716599191
User 47893 AUC after training: 0.4643218623481781
User 47893 does not improve AUC. Reverting changes.
Training on augumented user 112932 1/50 current_auc = 0.4650809716599191
User 112932 AUC after training: 0.4644664545980336
User 112932 does not improve AUC. Reverting changes.
Training on augumented user 101355 2/50 current_auc = 0.4650809716599191
User 101355 AUC after training: 0.4647556390977443
User 101355 does not improve AUC. Reverting changes.
Training on augumented user 72164 3/50 current_auc = 0.4650809716599191
User 72164 AUC after training: 0.46551474840948526
User 72164 improves AUC. Keeping the model.
Training on augumented user 105485 4/50 current_auc = 0.46551474840948526
User 105485 AUC after training: 0.46518941584731055
User 105485 does not improve AUC. Reverting changes.
Training on augumented user 49698 5/50 current_auc = 0.46551474840948526
User 49698 AUC after training: 0.4651171197223829
User 49698 does not improve AUC. Reverting changes.
Training on augumented user 92824 6/50 current_auc = 0.46551474840948526
User 92824 AUC after training: 0.464574898785425
User 92824 does not improve AUC. Reverting changes.
Training on augumented user 45596 7/50 current_auc = 0.46551474840948526
User 45596 AUC after training: 0.46504482359745514
User 45596 does not improve AUC. Reverting changes.
Training on augumented user 85742 8/50 current_auc = 0.46551474840948526
User 85742 AUC after training: 0.464827935222672
User 85742 does not improve AUC. Reverting changes.
Training on augumented user 34867 9/50 current_auc = 0.46551474840948526
User 34867 AUC after training: 0.4656231925968768
User 34867 improves AUC. Keeping the model.
Training on augumented user 62774 10/50 current_auc = 0.4656231925968768
User 62774 AUC after training: 0.465315934065934
User 62774 does not improve AUC. Reverting changes.
Training on augumented user 113439 11/50 current_auc = 0.4656231925968768
User 113439 AUC after training: 0.46491830537883166
User 113439 does not improve AUC. Reverting changes.
Training on augumented user 68815 12/50 current_auc = 0.4656231925968768
User 68815 AUC after training: 0.46520748987854255
User 68815 does not improve AUC. Reverting changes.
Training on augumented user 53528 13/50 current_auc = 0.4656231925968768
User 53528 AUC after training: 0.465568970503181
User 53528 does not improve AUC. Reverting changes.
Training on augumented user 64214 14/50 current_auc = 0.4656231925968768
User 64214 AUC after training: 0.4651894158473106
User 64214 does not improve AUC. Reverting changes.
Training on augumented user 84518 15/50 current_auc = 0.4656231925968768
User 84518 AUC after training: 0.46461104684788895
User 84518 does not improve AUC. Reverting changes.
Training on augumented user 80871 16/50 current_auc = 0.4656231925968768
User 80871 AUC after training: 0.4659485251590515
User 80871 improves AUC. Keeping the model.
Training on augumented user 107634 17/50 current_auc = 0.4659485251590515
User 107634 AUC after training: 0.4662377096587623
User 107634 improves AUC. Keeping the model.
Training on augumented user 135792 18/50 current_auc = 0.4662377096587623
User 135792 AUC after training: 0.4658762290341238
User 135792 does not improve AUC. Reverting changes.
Training on augumented user 117370 19/50 current_auc = 0.4662377096587623
User 117370 AUC after training: 0.4664184499710815
User 117370 improves AUC. Keeping the model.
Training on augumented user 34197 20/50 current_auc = 0.4664184499710815
User 34197 AUC after training: 0.46703296703296704
User 34197 improves AUC. Keeping the model.
Training on augumented user 6944 21/50 current_auc = 0.46703296703296704
User 6944 AUC after training: 0.46659919028340086
User 6944 does not improve AUC. Reverting changes.
Training on augumented user 57594 22/50 current_auc = 0.46703296703296704
User 57594 AUC after training: 0.46623770965876227
User 57594 does not improve AUC. Reverting changes.
Training on augumented user 114646 23/50 current_auc = 0.46703296703296704
User 114646 AUC after training: 0.468262001156738
User 114646 improves AUC. Keeping the model.
Training on augumented user 9010 24/50 current_auc = 0.468262001156738
User 9010 AUC after training: 0.46808126084441876
User 9010 does not improve AUC. Reverting changes.
Training on augumented user 13669 25/50 current_auc = 0.468262001156738
User 13669 AUC after training: 0.46739444765760557
User 13669 does not improve AUC. Reverting changes.
Training on augumented user 62922 26/50 current_auc = 0.468262001156738
User 62922 AUC after training: 0.4688765182186235
User 62922 improves AUC. Keeping the model.
Training on augumented user 122591 27/50 current_auc = 0.4688765182186235
User 122591 AUC after training: 0.46782822440717176
User 122591 does not improve AUC. Reverting changes.
Training on augumented user 15379 28/50 current_auc = 0.4688765182186235
User 15379 AUC after training: 0.46855118565644877
User 15379 does not improve AUC. Reverting changes.
Training on augumented user 103098 29/50 current_auc = 0.4688765182186235
User 103098 AUC after training: 0.4670691150954309
User 103098 does not improve AUC. Reverting changes.
Training on augumented user 69214 30/50 current_auc = 0.4688765182186235
User 69214 AUC after training: 0.46677993059572004
User 69214 does not improve AUC. Reverting changes.
Training on augumented user 18575 31/50 current_auc = 0.4688765182186235
User 18575 AUC after training: 0.4680451127819549
User 18575 does not improve AUC. Reverting changes.
Training on augumented user 64870 32/50 current_auc = 0.4688765182186235
User 64870 AUC after training: 0.46851503759398494
User 64870 does not improve AUC. Reverting changes.
Training on augumented user 41230 33/50 current_auc = 0.4688765182186235
User 41230 AUC after training: 0.46728600347021404
User 41230 does not improve AUC. Reverting changes.
Training on augumented user 89373 34/50 current_auc = 0.4688765182186235
User 89373 AUC after training: 0.46818970503181034
User 89373 does not improve AUC. Reverting changes.
Training on augumented user 135596 35/50 current_auc = 0.4688765182186235
User 135596 AUC after training: 0.4688765182186235
User 135596 does not improve AUC. Reverting changes.
Training on augumented user 137050 36/50 current_auc = 0.4688765182186235
User 137050 AUC after training: 0.46891266628108735
User 137050 improves AUC. Keeping the model.
Training on augumented user 29245 37/50 current_auc = 0.46891266628108735
User 29245 AUC after training: 0.4687319259687681
User 29245 does not improve AUC. Reverting changes.
Training on augumented user 25020 38/50 current_auc = 0.46891266628108735
User 25020 AUC after training: 0.4690572585309427
User 25020 improves AUC. Keeping the model.
Training on augumented user 18055 39/50 current_auc = 0.4690572585309427
User 18055 AUC after training: 0.469491035280509
User 18055 improves AUC. Keeping the model.
Training on augumented user 97978 40/50 current_auc = 0.469491035280509
User 97978 AUC after training: 0.4690572585309427
User 97978 does not improve AUC. Reverting changes.
Training on augumented user 54872 41/50 current_auc = 0.469491035280509
User 54872 AUC after training: 0.4695994794679006
User 54872 improves AUC. Keeping the model.
Training on augumented user 91189 42/50 current_auc = 0.4695994794679006
User 91189 AUC after training: 0.4710092539039908
User 91189 improves AUC. Keeping the model.
Training on augumented user 50195 43/50 current_auc = 0.4710092539039908
User 50195 AUC after training: 0.467792076344708
User 50195 does not improve AUC. Reverting changes.
Training on augumented user 80932 44/50 current_auc = 0.4710092539039908
User 80932 AUC after training: 0.46956333140543666
User 80932 does not improve AUC. Reverting changes.
Training on augumented user 56542 45/50 current_auc = 0.4710092539039908
User 56542 AUC after training: 0.46992481203007513
User 56542 does not improve AUC. Reverting changes.
Training on augumented user 121693 46/50 current_auc = 0.4710092539039908
User 121693 AUC after training: 0.47079236552920767
User 121693 does not improve AUC. Reverting changes.
Training on augumented user 56598 47/50 current_auc = 0.4710092539039908
User 56598 AUC after training: 0.4697079236552921
User 56598 does not improve AUC. Reverting changes.
Training on augumented user 16024 48/50 current_auc = 0.4710092539039908
User 16024 AUC after training: 0.46996096009253907
User 16024 does not improve AUC. Reverting changes.
Training on augumented user 37638 49/50 current_auc = 0.4710092539039908
User 37638 AUC after training: 0.4685873337189127
User 37638 does not improve AUC. Reverting changes.
[2024-12-02 20:00:45.039378] start test user 88836 264/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:00:45.776281] start test user 88836 264/568 recall augumented users by random, augumented_users = [106855, 57913, 5674, 138149, 15079, 1450, 83317, 81322, 33007, 50007, 123109, 91798, 45464, 135346, 81502, 42428, 86158, 85907, 75058, 54013, 136039, 131437, 58341, 110771, 56417, 11482, 124538, 85565, 67833, 42638, 129149, 134897, 115767, 19223, 44072, 28807, 123648, 39015, 119206, 24940, 53092, 87534, 69144, 126628, 126691, 109378, 132184, 1556, 19924, 128701]
[2024-12-02 20:00:45.792059] user = 88836 Cloud 264/568
[2024-12-02 20:00:45.838930] user = 88836 Local 264/568
[2024-12-02 20:00:45.904598] user = 88836 Local+ 264/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:00:48.063978] user = 88836 MPDA- 264/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5762129669386002
Training on augumented user 106855 0/50 current_auc = 0.5762129669386002
User 106855 AUC after training: 0.5757835981107772
User 106855 does not improve AUC. Reverting changes.
Training on augumented user 57913 1/50 current_auc = 0.5762129669386002
User 57913 AUC after training: 0.5757835981107772
User 57913 does not improve AUC. Reverting changes.
Training on augumented user 5674 2/50 current_auc = 0.5762129669386002
User 5674 AUC after training: 0.5755689136968656
User 5674 does not improve AUC. Reverting changes.
Training on augumented user 138149 3/50 current_auc = 0.5762129669386002
User 138149 AUC after training: 0.5757835981107771
User 138149 does not improve AUC. Reverting changes.
Training on augumented user 15079 4/50 current_auc = 0.5762129669386002
User 15079 AUC after training: 0.5755689136968656
User 15079 does not improve AUC. Reverting changes.
Training on augumented user 1450 5/50 current_auc = 0.5762129669386002
User 1450 AUC after training: 0.5762129669386002
User 1450 does not improve AUC. Reverting changes.
Training on augumented user 83317 6/50 current_auc = 0.5762129669386002
User 83317 AUC after training: 0.575354229282954
User 83317 does not improve AUC. Reverting changes.
Training on augumented user 81322 7/50 current_auc = 0.5762129669386002
User 81322 AUC after training: 0.5759982825246888
User 81322 does not improve AUC. Reverting changes.
Training on augumented user 33007 8/50 current_auc = 0.5762129669386002
User 33007 AUC after training: 0.5751395448690425
User 33007 does not improve AUC. Reverting changes.
Training on augumented user 50007 9/50 current_auc = 0.5762129669386002
User 50007 AUC after training: 0.5757835981107771
User 50007 does not improve AUC. Reverting changes.
Training on augumented user 123109 10/50 current_auc = 0.5762129669386002
User 123109 AUC after training: 0.5757835981107772
User 123109 does not improve AUC. Reverting changes.
Training on augumented user 91798 11/50 current_auc = 0.5762129669386002
User 91798 AUC after training: 0.5740661227994848
User 91798 does not improve AUC. Reverting changes.
Training on augumented user 45464 12/50 current_auc = 0.5762129669386002
User 45464 AUC after training: 0.5759982825246887
User 45464 does not improve AUC. Reverting changes.
Training on augumented user 135346 13/50 current_auc = 0.5762129669386002
User 135346 AUC after training: 0.5749248604551309
User 135346 does not improve AUC. Reverting changes.
Training on augumented user 81502 14/50 current_auc = 0.5762129669386002
User 81502 AUC after training: 0.5755689136968656
User 81502 does not improve AUC. Reverting changes.
Training on augumented user 42428 15/50 current_auc = 0.5762129669386002
User 42428 AUC after training: 0.5759982825246888
User 42428 does not improve AUC. Reverting changes.
Training on augumented user 86158 16/50 current_auc = 0.5762129669386002
User 86158 AUC after training: 0.5759982825246887
User 86158 does not improve AUC. Reverting changes.
Training on augumented user 85907 17/50 current_auc = 0.5762129669386002
User 85907 AUC after training: 0.5757835981107772
User 85907 does not improve AUC. Reverting changes.
Training on augumented user 75058 18/50 current_auc = 0.5762129669386002
User 75058 AUC after training: 0.5757835981107772
User 75058 does not improve AUC. Reverting changes.
Training on augumented user 54013 19/50 current_auc = 0.5762129669386002
User 54013 AUC after training: 0.5755689136968656
User 54013 does not improve AUC. Reverting changes.
Training on augumented user 136039 20/50 current_auc = 0.5762129669386002
User 136039 AUC after training: 0.5759982825246888
User 136039 does not improve AUC. Reverting changes.
Training on augumented user 131437 21/50 current_auc = 0.5762129669386002
User 131437 AUC after training: 0.5755689136968656
User 131437 does not improve AUC. Reverting changes.
Training on augumented user 58341 22/50 current_auc = 0.5762129669386002
User 58341 AUC after training: 0.5764276513525117
User 58341 improves AUC. Keeping the model.
Training on augumented user 110771 23/50 current_auc = 0.5764276513525117
User 110771 AUC after training: 0.5757835981107771
User 110771 does not improve AUC. Reverting changes.
Training on augumented user 56417 24/50 current_auc = 0.5764276513525117
User 56417 AUC after training: 0.5755689136968656
User 56417 does not improve AUC. Reverting changes.
Training on augumented user 11482 25/50 current_auc = 0.5764276513525117
User 11482 AUC after training: 0.5762129669386002
User 11482 does not improve AUC. Reverting changes.
Training on augumented user 124538 26/50 current_auc = 0.5764276513525117
User 124538 AUC after training: 0.5753542292829541
User 124538 does not improve AUC. Reverting changes.
Training on augumented user 85565 27/50 current_auc = 0.5764276513525117
User 85565 AUC after training: 0.5759982825246887
User 85565 does not improve AUC. Reverting changes.
Training on augumented user 67833 28/50 current_auc = 0.5764276513525117
User 67833 AUC after training: 0.5740661227994848
User 67833 does not improve AUC. Reverting changes.
Training on augumented user 42638 29/50 current_auc = 0.5764276513525117
User 42638 AUC after training: 0.5757835981107772
User 42638 does not improve AUC. Reverting changes.
Training on augumented user 129149 30/50 current_auc = 0.5764276513525117
User 129149 AUC after training: 0.5757835981107772
User 129149 does not improve AUC. Reverting changes.
Training on augumented user 134897 31/50 current_auc = 0.5764276513525117
User 134897 AUC after training: 0.5762129669386002
User 134897 does not improve AUC. Reverting changes.
Training on augumented user 115767 32/50 current_auc = 0.5764276513525117
User 115767 AUC after training: 0.5753542292829541
User 115767 does not improve AUC. Reverting changes.
Training on augumented user 19223 33/50 current_auc = 0.5764276513525117
User 19223 AUC after training: 0.5759982825246887
User 19223 does not improve AUC. Reverting changes.
Training on augumented user 44072 34/50 current_auc = 0.5764276513525117
User 44072 AUC after training: 0.5757835981107772
User 44072 does not improve AUC. Reverting changes.
Training on augumented user 28807 35/50 current_auc = 0.5764276513525117
User 28807 AUC after training: 0.5764276513525117
User 28807 does not improve AUC. Reverting changes.
Training on augumented user 123648 36/50 current_auc = 0.5764276513525117
User 123648 AUC after training: 0.5759982825246887
User 123648 does not improve AUC. Reverting changes.
Training on augumented user 39015 37/50 current_auc = 0.5764276513525117
User 39015 AUC after training: 0.5755689136968656
User 39015 does not improve AUC. Reverting changes.
Training on augumented user 119206 38/50 current_auc = 0.5764276513525117
User 119206 AUC after training: 0.5764276513525117
User 119206 does not improve AUC. Reverting changes.
Training on augumented user 24940 39/50 current_auc = 0.5764276513525117
User 24940 AUC after training: 0.5757835981107773
User 24940 does not improve AUC. Reverting changes.
Training on augumented user 53092 40/50 current_auc = 0.5764276513525117
User 53092 AUC after training: 0.5764276513525117
User 53092 does not improve AUC. Reverting changes.
Training on augumented user 87534 41/50 current_auc = 0.5764276513525117
User 87534 AUC after training: 0.5762129669386002
User 87534 does not improve AUC. Reverting changes.
Training on augumented user 69144 42/50 current_auc = 0.5764276513525117
User 69144 AUC after training: 0.5751395448690425
User 69144 does not improve AUC. Reverting changes.
Training on augumented user 126628 43/50 current_auc = 0.5764276513525117
User 126628 AUC after training: 0.5755689136968656
User 126628 does not improve AUC. Reverting changes.
Training on augumented user 126691 44/50 current_auc = 0.5764276513525117
User 126691 AUC after training: 0.5747101760412194
User 126691 does not improve AUC. Reverting changes.
Training on augumented user 109378 45/50 current_auc = 0.5764276513525117
User 109378 AUC after training: 0.5749248604551309
User 109378 does not improve AUC. Reverting changes.
Training on augumented user 132184 46/50 current_auc = 0.5764276513525117
User 132184 AUC after training: 0.5753542292829541
User 132184 does not improve AUC. Reverting changes.
Training on augumented user 1556 47/50 current_auc = 0.5764276513525117
User 1556 AUC after training: 0.5753542292829541
User 1556 does not improve AUC. Reverting changes.
Training on augumented user 19924 48/50 current_auc = 0.5764276513525117
User 19924 AUC after training: 0.5755689136968656
User 19924 does not improve AUC. Reverting changes.
Training on augumented user 128701 49/50 current_auc = 0.5764276513525117
User 128701 AUC after training: 0.5749248604551309
User 128701 does not improve AUC. Reverting changes.
[2024-12-02 20:01:16.105305] start test user 88851 265/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:01:16.515044] start test user 88851 265/568 recall augumented users by random, augumented_users = [8033, 67767, 48313, 109131, 43014, 62127, 88303, 1950, 39178, 17760, 31188, 115349, 137649, 46497, 128577, 48176, 126335, 24336, 31988, 74157, 119517, 122147, 128302, 9445, 107101, 106017, 92289, 134912, 18910, 1794, 8822, 36074, 112670, 116477, 38442, 1815, 74964, 115376, 24290, 96447, 55914, 82520, 43204, 82856, 53222, 2979, 90594, 4887, 103984, 53093]
[2024-12-02 20:01:16.530595] user = 88851 Cloud 265/568
[2024-12-02 20:01:16.549721] user = 88851 Local 265/568
[2024-12-02 20:01:16.654693] user = 88851 Local+ 265/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:01:18.761017] user = 88851 MPDA- 265/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6997263273125343
Training on augumented user 8033 0/50 current_auc = 0.6997263273125343
User 8033 AUC after training: 0.7020251778872468
User 8033 improves AUC. Keeping the model.
Training on augumented user 67767 1/50 current_auc = 0.7020251778872468
User 67767 AUC after training: 0.7025725232621784
User 67767 improves AUC. Keeping the model.
Training on augumented user 48313 2/50 current_auc = 0.7025725232621784
User 48313 AUC after training: 0.7023535851122058
User 48313 does not improve AUC. Reverting changes.
Training on augumented user 109131 3/50 current_auc = 0.7025725232621784
User 109131 AUC after training: 0.7021346469622332
User 109131 does not improve AUC. Reverting changes.
Training on augumented user 43014 4/50 current_auc = 0.7025725232621784
User 43014 AUC after training: 0.7002736726874658
User 43014 does not improve AUC. Reverting changes.
Training on augumented user 62127 5/50 current_auc = 0.7025725232621784
User 62127 AUC after training: 0.7031198686371101
User 62127 improves AUC. Keeping the model.
Training on augumented user 88303 6/50 current_auc = 0.7031198686371101
User 88303 AUC after training: 0.70311986863711
User 88303 does not improve AUC. Reverting changes.
Training on augumented user 1950 7/50 current_auc = 0.7031198686371101
User 1950 AUC after training: 0.7004926108374384
User 1950 does not improve AUC. Reverting changes.
Training on augumented user 39178 8/50 current_auc = 0.7031198686371101
User 39178 AUC after training: 0.7024630541871921
User 39178 does not improve AUC. Reverting changes.
Training on augumented user 17760 9/50 current_auc = 0.7031198686371101
User 17760 AUC after training: 0.7004926108374384
User 17760 does not improve AUC. Reverting changes.
Training on augumented user 31188 10/50 current_auc = 0.7031198686371101
User 31188 AUC after training: 0.7007115489874111
User 31188 does not improve AUC. Reverting changes.
Training on augumented user 115349 11/50 current_auc = 0.7031198686371101
User 115349 AUC after training: 0.7013683634373289
User 115349 does not improve AUC. Reverting changes.
Training on augumented user 137649 12/50 current_auc = 0.7031198686371101
User 137649 AUC after training: 0.7003831417624521
User 137649 does not improve AUC. Reverting changes.
Training on augumented user 46497 13/50 current_auc = 0.7031198686371101
User 46497 AUC after training: 0.7015873015873015
User 46497 does not improve AUC. Reverting changes.
Training on augumented user 128577 14/50 current_auc = 0.7031198686371101
User 128577 AUC after training: 0.7027914614121511
User 128577 does not improve AUC. Reverting changes.
Training on augumented user 48176 15/50 current_auc = 0.7031198686371101
User 48176 AUC after training: 0.7021346469622332
User 48176 does not improve AUC. Reverting changes.
Training on augumented user 126335 16/50 current_auc = 0.7031198686371101
User 126335 AUC after training: 0.7020251778872468
User 126335 does not improve AUC. Reverting changes.
Training on augumented user 24336 17/50 current_auc = 0.7031198686371101
User 24336 AUC after training: 0.7023535851122058
User 24336 does not improve AUC. Reverting changes.
Training on augumented user 31988 18/50 current_auc = 0.7031198686371101
User 31988 AUC after training: 0.7022441160372195
User 31988 does not improve AUC. Reverting changes.
Training on augumented user 74157 19/50 current_auc = 0.7031198686371101
User 74157 AUC after training: 0.7021346469622332
User 74157 does not improve AUC. Reverting changes.
Training on augumented user 119517 20/50 current_auc = 0.7031198686371101
User 119517 AUC after training: 0.7007115489874111
User 119517 does not improve AUC. Reverting changes.
Training on augumented user 122147 21/50 current_auc = 0.7031198686371101
User 122147 AUC after training: 0.7025725232621784
User 122147 does not improve AUC. Reverting changes.
Training on augumented user 128302 22/50 current_auc = 0.7031198686371101
User 128302 AUC after training: 0.7023535851122058
User 128302 does not improve AUC. Reverting changes.
Training on augumented user 9445 23/50 current_auc = 0.7031198686371101
User 9445 AUC after training: 0.7022441160372195
User 9445 does not improve AUC. Reverting changes.
Training on augumented user 107101 24/50 current_auc = 0.7031198686371101
User 107101 AUC after training: 0.7019157088122605
User 107101 does not improve AUC. Reverting changes.
Training on augumented user 106017 25/50 current_auc = 0.7031198686371101
User 106017 AUC after training: 0.7025725232621784
User 106017 does not improve AUC. Reverting changes.
Training on augumented user 92289 26/50 current_auc = 0.7031198686371101
User 92289 AUC after training: 0.7029009304871374
User 92289 does not improve AUC. Reverting changes.
Training on augumented user 134912 27/50 current_auc = 0.7031198686371101
User 134912 AUC after training: 0.7027914614121511
User 134912 does not improve AUC. Reverting changes.
Training on augumented user 18910 28/50 current_auc = 0.7031198686371101
User 18910 AUC after training: 0.7014778325123152
User 18910 does not improve AUC. Reverting changes.
Training on augumented user 1794 29/50 current_auc = 0.7031198686371101
User 1794 AUC after training: 0.70103995621237
User 1794 does not improve AUC. Reverting changes.
Training on augumented user 8822 30/50 current_auc = 0.7031198686371101
User 8822 AUC after training: 0.7014778325123153
User 8822 does not improve AUC. Reverting changes.
Training on augumented user 36074 31/50 current_auc = 0.7031198686371101
User 36074 AUC after training: 0.7019157088122605
User 36074 does not improve AUC. Reverting changes.
Training on augumented user 112670 32/50 current_auc = 0.7031198686371101
User 112670 AUC after training: 0.70103995621237
User 112670 does not improve AUC. Reverting changes.
Training on augumented user 116477 33/50 current_auc = 0.7031198686371101
User 116477 AUC after training: 0.7025725232621784
User 116477 does not improve AUC. Reverting changes.
Training on augumented user 38442 34/50 current_auc = 0.7031198686371101
User 38442 AUC after training: 0.7029009304871373
User 38442 does not improve AUC. Reverting changes.
Training on augumented user 1815 35/50 current_auc = 0.7031198686371101
User 1815 AUC after training: 0.6998357963875206
User 1815 does not improve AUC. Reverting changes.
Training on augumented user 74964 36/50 current_auc = 0.7031198686371101
User 74964 AUC after training: 0.7020251778872468
User 74964 does not improve AUC. Reverting changes.
Training on augumented user 115376 37/50 current_auc = 0.7031198686371101
User 115376 AUC after training: 0.7022441160372195
User 115376 does not improve AUC. Reverting changes.
Training on augumented user 24290 38/50 current_auc = 0.7031198686371101
User 24290 AUC after training: 0.70103995621237
User 24290 does not improve AUC. Reverting changes.
Training on augumented user 96447 39/50 current_auc = 0.7031198686371101
User 96447 AUC after training: 0.6962233169129721
User 96447 does not improve AUC. Reverting changes.
Training on augumented user 55914 40/50 current_auc = 0.7031198686371101
User 55914 AUC after training: 0.7007115489874111
User 55914 does not improve AUC. Reverting changes.
Training on augumented user 82520 41/50 current_auc = 0.7031198686371101
User 82520 AUC after training: 0.7024630541871921
User 82520 does not improve AUC. Reverting changes.
Training on augumented user 43204 42/50 current_auc = 0.7031198686371101
User 43204 AUC after training: 0.7023535851122058
User 43204 does not improve AUC. Reverting changes.
Training on augumented user 82856 43/50 current_auc = 0.7031198686371101
User 82856 AUC after training: 0.7019157088122605
User 82856 does not improve AUC. Reverting changes.
Training on augumented user 53222 44/50 current_auc = 0.7031198686371101
User 53222 AUC after training: 0.7018062397372742
User 53222 does not improve AUC. Reverting changes.
Training on augumented user 2979 45/50 current_auc = 0.7031198686371101
User 2979 AUC after training: 0.7022441160372195
User 2979 does not improve AUC. Reverting changes.
Training on augumented user 90594 46/50 current_auc = 0.7031198686371101
User 90594 AUC after training: 0.7003284072249589
User 90594 does not improve AUC. Reverting changes.
Training on augumented user 4887 47/50 current_auc = 0.7031198686371101
User 4887 AUC after training: 0.7029009304871374
User 4887 does not improve AUC. Reverting changes.
Training on augumented user 103984 48/50 current_auc = 0.7031198686371101
User 103984 AUC after training: 0.701696770662288
User 103984 does not improve AUC. Reverting changes.
Training on augumented user 53093 49/50 current_auc = 0.7031198686371101
User 53093 AUC after training: 0.7032293377120963
User 53093 improves AUC. Keeping the model.
[2024-12-02 20:01:47.932745] start test user 88857 266/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:01:48.450015] start test user 88857 266/568 recall augumented users by random, augumented_users = [44764, 6203, 32886, 43754, 34323, 44322, 119325, 1786, 25181, 19600, 30052, 129565, 120813, 26438, 22003, 127301, 120802, 10302, 78928, 119442, 71419, 60542, 89865, 119956, 114414, 94094, 116180, 4640, 61230, 39876, 8925, 132948, 72260, 134908, 105268, 113113, 125767, 81848, 15953, 107938, 115172, 79182, 70540, 9853, 112447, 31732, 79945, 57064, 4436, 50352]
[2024-12-02 20:01:48.464702] user = 88857 Cloud 266/568
[2024-12-02 20:01:48.475170] user = 88857 Local 266/568
[2024-12-02 20:01:48.572276] user = 88857 Local+ 266/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:01:51.451153] user = 88857 MPDA- 266/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.1
Training on augumented user 44764 0/50 current_auc = 0.1
User 44764 AUC after training: 0.1
User 44764 does not improve AUC. Reverting changes.
Training on augumented user 6203 1/50 current_auc = 0.1
User 6203 AUC after training: 0.1
User 6203 does not improve AUC. Reverting changes.
Training on augumented user 32886 2/50 current_auc = 0.1
User 32886 AUC after training: 0.1
User 32886 does not improve AUC. Reverting changes.
Training on augumented user 43754 3/50 current_auc = 0.1
User 43754 AUC after training: 0.1
User 43754 does not improve AUC. Reverting changes.
Training on augumented user 34323 4/50 current_auc = 0.1
User 34323 AUC after training: 0.1
User 34323 does not improve AUC. Reverting changes.
Training on augumented user 44322 5/50 current_auc = 0.1
User 44322 AUC after training: 0.1
User 44322 does not improve AUC. Reverting changes.
Training on augumented user 119325 6/50 current_auc = 0.1
User 119325 AUC after training: 0.1
User 119325 does not improve AUC. Reverting changes.
Training on augumented user 1786 7/50 current_auc = 0.1
User 1786 AUC after training: 0.1
User 1786 does not improve AUC. Reverting changes.
Training on augumented user 25181 8/50 current_auc = 0.1
User 25181 AUC after training: 0.1
User 25181 does not improve AUC. Reverting changes.
Training on augumented user 19600 9/50 current_auc = 0.1
User 19600 AUC after training: 0.1
User 19600 does not improve AUC. Reverting changes.
Training on augumented user 30052 10/50 current_auc = 0.1
User 30052 AUC after training: 0.1
User 30052 does not improve AUC. Reverting changes.
Training on augumented user 129565 11/50 current_auc = 0.1
User 129565 AUC after training: 0.1
User 129565 does not improve AUC. Reverting changes.
Training on augumented user 120813 12/50 current_auc = 0.1
User 120813 AUC after training: 0.1
User 120813 does not improve AUC. Reverting changes.
Training on augumented user 26438 13/50 current_auc = 0.1
User 26438 AUC after training: 0.1
User 26438 does not improve AUC. Reverting changes.
Training on augumented user 22003 14/50 current_auc = 0.1
User 22003 AUC after training: 0.1
User 22003 does not improve AUC. Reverting changes.
Training on augumented user 127301 15/50 current_auc = 0.1
User 127301 AUC after training: 0.1
User 127301 does not improve AUC. Reverting changes.
Training on augumented user 120802 16/50 current_auc = 0.1
User 120802 AUC after training: 0.1
User 120802 does not improve AUC. Reverting changes.
Training on augumented user 10302 17/50 current_auc = 0.1
User 10302 AUC after training: 0.1
User 10302 does not improve AUC. Reverting changes.
Training on augumented user 78928 18/50 current_auc = 0.1
User 78928 AUC after training: 0.1
User 78928 does not improve AUC. Reverting changes.
Training on augumented user 119442 19/50 current_auc = 0.1
User 119442 AUC after training: 0.1
User 119442 does not improve AUC. Reverting changes.
Training on augumented user 71419 20/50 current_auc = 0.1
User 71419 AUC after training: 0.1
User 71419 does not improve AUC. Reverting changes.
Training on augumented user 60542 21/50 current_auc = 0.1
User 60542 AUC after training: 0.1
User 60542 does not improve AUC. Reverting changes.
Training on augumented user 89865 22/50 current_auc = 0.1
User 89865 AUC after training: 0.1
User 89865 does not improve AUC. Reverting changes.
Training on augumented user 119956 23/50 current_auc = 0.1
User 119956 AUC after training: 0.1
User 119956 does not improve AUC. Reverting changes.
Training on augumented user 114414 24/50 current_auc = 0.1
User 114414 AUC after training: 0.1
User 114414 does not improve AUC. Reverting changes.
Training on augumented user 94094 25/50 current_auc = 0.1
User 94094 AUC after training: 0.1
User 94094 does not improve AUC. Reverting changes.
Training on augumented user 116180 26/50 current_auc = 0.1
User 116180 AUC after training: 0.1
User 116180 does not improve AUC. Reverting changes.
Training on augumented user 4640 27/50 current_auc = 0.1
User 4640 AUC after training: 0.1
User 4640 does not improve AUC. Reverting changes.
Training on augumented user 61230 28/50 current_auc = 0.1
User 61230 AUC after training: 0.1
User 61230 does not improve AUC. Reverting changes.
Training on augumented user 39876 29/50 current_auc = 0.1
User 39876 AUC after training: 0.1
User 39876 does not improve AUC. Reverting changes.
Training on augumented user 8925 30/50 current_auc = 0.1
User 8925 AUC after training: 0.1
User 8925 does not improve AUC. Reverting changes.
Training on augumented user 132948 31/50 current_auc = 0.1
User 132948 AUC after training: 0.1
User 132948 does not improve AUC. Reverting changes.
Training on augumented user 72260 32/50 current_auc = 0.1
User 72260 AUC after training: 0.1
User 72260 does not improve AUC. Reverting changes.
Training on augumented user 134908 33/50 current_auc = 0.1
User 134908 AUC after training: 0.1
User 134908 does not improve AUC. Reverting changes.
Training on augumented user 105268 34/50 current_auc = 0.1
User 105268 AUC after training: 0.1
User 105268 does not improve AUC. Reverting changes.
Training on augumented user 113113 35/50 current_auc = 0.1
User 113113 AUC after training: 0.1
User 113113 does not improve AUC. Reverting changes.
Training on augumented user 125767 36/50 current_auc = 0.1
User 125767 AUC after training: 0.1
User 125767 does not improve AUC. Reverting changes.
Training on augumented user 81848 37/50 current_auc = 0.1
User 81848 AUC after training: 0.1
User 81848 does not improve AUC. Reverting changes.
Training on augumented user 15953 38/50 current_auc = 0.1
User 15953 AUC after training: 0.1
User 15953 does not improve AUC. Reverting changes.
Training on augumented user 107938 39/50 current_auc = 0.1
User 107938 AUC after training: 0.1
User 107938 does not improve AUC. Reverting changes.
Training on augumented user 115172 40/50 current_auc = 0.1
User 115172 AUC after training: 0.1
User 115172 does not improve AUC. Reverting changes.
Training on augumented user 79182 41/50 current_auc = 0.1
User 79182 AUC after training: 0.1
User 79182 does not improve AUC. Reverting changes.
Training on augumented user 70540 42/50 current_auc = 0.1
User 70540 AUC after training: 0.1
User 70540 does not improve AUC. Reverting changes.
Training on augumented user 9853 43/50 current_auc = 0.1
User 9853 AUC after training: 0.1
User 9853 does not improve AUC. Reverting changes.
Training on augumented user 112447 44/50 current_auc = 0.1
User 112447 AUC after training: 0.1
User 112447 does not improve AUC. Reverting changes.
Training on augumented user 31732 45/50 current_auc = 0.1
User 31732 AUC after training: 0.1
User 31732 does not improve AUC. Reverting changes.
Training on augumented user 79945 46/50 current_auc = 0.1
User 79945 AUC after training: 0.1
User 79945 does not improve AUC. Reverting changes.
Training on augumented user 57064 47/50 current_auc = 0.1
User 57064 AUC after training: 0.1
User 57064 does not improve AUC. Reverting changes.
Training on augumented user 4436 48/50 current_auc = 0.1
User 4436 AUC after training: 0.1
User 4436 does not improve AUC. Reverting changes.
Training on augumented user 50352 49/50 current_auc = 0.1
User 50352 AUC after training: 0.1
User 50352 does not improve AUC. Reverting changes.
[2024-12-02 20:02:21.974238] start test user 88883 267/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:02:22.399099] start test user 88883 267/568 recall augumented users by random, augumented_users = [102177, 14367, 36967, 61186, 13576, 115089, 109502, 120036, 71744, 83559, 103573, 107806, 87552, 14450, 133697, 89480, 17841, 6592, 80440, 132101, 28757, 60125, 59413, 28433, 7, 107201, 111475, 39116, 86362, 112724, 30182, 41491, 108055, 75818, 109831, 126235, 42444, 95864, 89943, 53020, 69203, 38801, 56911, 84314, 108766, 120012, 128912, 81079, 77821, 138412]
[2024-12-02 20:02:22.414343] user = 88883 Cloud 267/568
[2024-12-02 20:02:22.435648] user = 88883 Local 267/568
[2024-12-02 20:02:22.480209] user = 88883 Local+ 267/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:02:24.414711] user = 88883 MPDA- 267/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5989341085271318
Training on augumented user 102177 0/50 current_auc = 0.5989341085271318
User 102177 AUC after training: 0.5988372093023255
User 102177 does not improve AUC. Reverting changes.
Training on augumented user 14367 1/50 current_auc = 0.5989341085271318
User 14367 AUC after training: 0.5990794573643411
User 14367 improves AUC. Keeping the model.
Training on augumented user 36967 2/50 current_auc = 0.5990794573643411
User 36967 AUC after training: 0.5989341085271318
User 36967 does not improve AUC. Reverting changes.
Training on augumented user 61186 3/50 current_auc = 0.5990794573643411
User 61186 AUC after training: 0.5987403100775194
User 61186 does not improve AUC. Reverting changes.
Training on augumented user 13576 4/50 current_auc = 0.5990794573643411
User 13576 AUC after training: 0.5989825581395348
User 13576 does not improve AUC. Reverting changes.
Training on augumented user 115089 5/50 current_auc = 0.5990794573643411
User 115089 AUC after training: 0.5987403100775194
User 115089 does not improve AUC. Reverting changes.
Training on augumented user 109502 6/50 current_auc = 0.5990794573643411
User 109502 AUC after training: 0.5988372093023255
User 109502 does not improve AUC. Reverting changes.
Training on augumented user 120036 7/50 current_auc = 0.5990794573643411
User 120036 AUC after training: 0.5992732558139535
User 120036 improves AUC. Keeping the model.
Training on augumented user 71744 8/50 current_auc = 0.5992732558139535
User 71744 AUC after training: 0.599467054263566
User 71744 improves AUC. Keeping the model.
Training on augumented user 83559 9/50 current_auc = 0.599467054263566
User 83559 AUC after training: 0.5984011627906978
User 83559 does not improve AUC. Reverting changes.
Training on augumented user 103573 10/50 current_auc = 0.599467054263566
User 103573 AUC after training: 0.5982073643410852
User 103573 does not improve AUC. Reverting changes.
Training on augumented user 107806 11/50 current_auc = 0.599467054263566
User 107806 AUC after training: 0.6010174418604651
User 107806 improves AUC. Keeping the model.
Training on augumented user 87552 12/50 current_auc = 0.6010174418604651
User 87552 AUC after training: 0.6013081395348838
User 87552 improves AUC. Keeping the model.
Training on augumented user 14450 13/50 current_auc = 0.6013081395348838
User 14450 AUC after training: 0.6008236434108527
User 14450 does not improve AUC. Reverting changes.
Training on augumented user 133697 14/50 current_auc = 0.6013081395348838
User 133697 AUC after training: 0.5986434108527131
User 133697 does not improve AUC. Reverting changes.
Training on augumented user 89480 15/50 current_auc = 0.6013081395348838
User 89480 AUC after training: 0.6014050387596899
User 89480 improves AUC. Keeping the model.
Training on augumented user 17841 16/50 current_auc = 0.6014050387596899
User 17841 AUC after training: 0.6016957364341086
User 17841 improves AUC. Keeping the model.
Training on augumented user 6592 17/50 current_auc = 0.6016957364341086
User 6592 AUC after training: 0.6014050387596899
User 6592 does not improve AUC. Reverting changes.
Training on augumented user 80440 18/50 current_auc = 0.6016957364341086
User 80440 AUC after training: 0.6017926356589146
User 80440 improves AUC. Keeping the model.
Training on augumented user 132101 19/50 current_auc = 0.6017926356589146
User 132101 AUC after training: 0.600484496124031
User 132101 does not improve AUC. Reverting changes.
Training on augumented user 28757 20/50 current_auc = 0.6017926356589146
User 28757 AUC after training: 0.6018895348837209
User 28757 improves AUC. Keeping the model.
Training on augumented user 60125 21/50 current_auc = 0.6018895348837209
User 60125 AUC after training: 0.601453488372093
User 60125 does not improve AUC. Reverting changes.
Training on augumented user 59413 22/50 current_auc = 0.6018895348837209
User 59413 AUC after training: 0.6008236434108527
User 59413 does not improve AUC. Reverting changes.
Training on augumented user 28433 23/50 current_auc = 0.6018895348837209
User 28433 AUC after training: 0.601986434108527
User 28433 improves AUC. Keeping the model.
Training on augumented user 7 24/50 current_auc = 0.601986434108527
User 7 AUC after training: 0.6007267441860464
User 7 does not improve AUC. Reverting changes.
Training on augumented user 107201 25/50 current_auc = 0.601986434108527
User 107201 AUC after training: 0.6022771317829456
User 107201 improves AUC. Keeping the model.
Training on augumented user 111475 26/50 current_auc = 0.6022771317829456
User 111475 AUC after training: 0.6024709302325582
User 111475 improves AUC. Keeping the model.
Training on augumented user 39116 27/50 current_auc = 0.6024709302325582
User 39116 AUC after training: 0.6023740310077519
User 39116 does not improve AUC. Reverting changes.
Training on augumented user 86362 28/50 current_auc = 0.6024709302325582
User 86362 AUC after training: 0.6024709302325582
User 86362 does not improve AUC. Reverting changes.
Training on augumented user 112724 29/50 current_auc = 0.6024709302325582
User 112724 AUC after training: 0.6022771317829456
User 112724 does not improve AUC. Reverting changes.
Training on augumented user 30182 30/50 current_auc = 0.6024709302325582
User 30182 AUC after training: 0.6024709302325582
User 30182 does not improve AUC. Reverting changes.
Training on augumented user 41491 31/50 current_auc = 0.6024709302325582
User 41491 AUC after training: 0.600048449612403
User 41491 does not improve AUC. Reverting changes.
Training on augumented user 108055 32/50 current_auc = 0.6024709302325582
User 108055 AUC after training: 0.6021802325581396
User 108055 does not improve AUC. Reverting changes.
Training on augumented user 75818 33/50 current_auc = 0.6024709302325582
User 75818 AUC after training: 0.6025678294573643
User 75818 improves AUC. Keeping the model.
Training on augumented user 109831 34/50 current_auc = 0.6025678294573643
User 109831 AUC after training: 0.6025678294573643
User 109831 does not improve AUC. Reverting changes.
Training on augumented user 126235 35/50 current_auc = 0.6025678294573643
User 126235 AUC after training: 0.6027131782945736
User 126235 improves AUC. Keeping the model.
Training on augumented user 42444 36/50 current_auc = 0.6027131782945736
User 42444 AUC after training: 0.6027131782945736
User 42444 does not improve AUC. Reverting changes.
Training on augumented user 95864 37/50 current_auc = 0.6027131782945736
User 95864 AUC after training: 0.6028100775193799
User 95864 improves AUC. Keeping the model.
Training on augumented user 89943 38/50 current_auc = 0.6028100775193799
User 89943 AUC after training: 0.602374031007752
User 89943 does not improve AUC. Reverting changes.
Training on augumented user 53020 39/50 current_auc = 0.6028100775193799
User 53020 AUC after training: 0.6022771317829457
User 53020 does not improve AUC. Reverting changes.
Training on augumented user 69203 40/50 current_auc = 0.6028100775193799
User 69203 AUC after training: 0.6027131782945736
User 69203 does not improve AUC. Reverting changes.
Training on augumented user 38801 41/50 current_auc = 0.6028100775193799
User 38801 AUC after training: 0.6028100775193799
User 38801 does not improve AUC. Reverting changes.
Training on augumented user 56911 42/50 current_auc = 0.6028100775193799
User 56911 AUC after training: 0.6026647286821706
User 56911 does not improve AUC. Reverting changes.
Training on augumented user 84314 43/50 current_auc = 0.6028100775193799
User 84314 AUC after training: 0.6026162790697674
User 84314 does not improve AUC. Reverting changes.
Training on augumented user 108766 44/50 current_auc = 0.6028100775193799
User 108766 AUC after training: 0.6025193798449612
User 108766 does not improve AUC. Reverting changes.
Training on augumented user 120012 45/50 current_auc = 0.6028100775193799
User 120012 AUC after training: 0.6027131782945735
User 120012 does not improve AUC. Reverting changes.
Training on augumented user 128912 46/50 current_auc = 0.6028100775193799
User 128912 AUC after training: 0.601937984496124
User 128912 does not improve AUC. Reverting changes.
Training on augumented user 81079 47/50 current_auc = 0.6028100775193799
User 81079 AUC after training: 0.602470930232558
User 81079 does not improve AUC. Reverting changes.
Training on augumented user 77821 48/50 current_auc = 0.6028100775193799
User 77821 AUC after training: 0.602422480620155
User 77821 does not improve AUC. Reverting changes.
Training on augumented user 138412 49/50 current_auc = 0.6028100775193799
User 138412 AUC after training: 0.6029554263565892
User 138412 improves AUC. Keeping the model.
[2024-12-02 20:02:49.076672] start test user 88907 268/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:02:50.116949] start test user 88907 268/568 recall augumented users by random, augumented_users = [29425, 119490, 21537, 75310, 96770, 88969, 9051, 84307, 92932, 90217, 49383, 43047, 64949, 44902, 35028, 119307, 135393, 94186, 38364, 87502, 104315, 104126, 101356, 133218, 78616, 73431, 26488, 90325, 119351, 39006, 135936, 81730, 44980, 110753, 19797, 97725, 5035, 92214, 10649, 19887, 14413, 39882, 27441, 117386, 3380, 50095, 76111, 6450, 95926, 126285]
[2024-12-02 20:02:50.132699] user = 88907 Cloud 268/568
[2024-12-02 20:02:50.178640] user = 88907 Local 268/568
[2024-12-02 20:02:50.243400] user = 88907 Local+ 268/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:02:52.778592] user = 88907 MPDA- 268/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8173913043478261
Training on augumented user 29425 0/50 current_auc = 0.8173913043478261
User 29425 AUC after training: 0.8173913043478261
User 29425 does not improve AUC. Reverting changes.
Training on augumented user 119490 1/50 current_auc = 0.8173913043478261
User 119490 AUC after training: 0.8188405797101449
User 119490 improves AUC. Keeping the model.
Training on augumented user 21537 2/50 current_auc = 0.8188405797101449
User 21537 AUC after training: 0.8181159420289855
User 21537 does not improve AUC. Reverting changes.
Training on augumented user 75310 3/50 current_auc = 0.8188405797101449
User 75310 AUC after training: 0.8181159420289855
User 75310 does not improve AUC. Reverting changes.
Training on augumented user 96770 4/50 current_auc = 0.8188405797101449
User 96770 AUC after training: 0.8188405797101449
User 96770 does not improve AUC. Reverting changes.
Training on augumented user 88969 5/50 current_auc = 0.8188405797101449
User 88969 AUC after training: 0.8166666666666667
User 88969 does not improve AUC. Reverting changes.
Training on augumented user 9051 6/50 current_auc = 0.8188405797101449
User 9051 AUC after training: 0.8188405797101449
User 9051 does not improve AUC. Reverting changes.
Training on augumented user 84307 7/50 current_auc = 0.8188405797101449
User 84307 AUC after training: 0.8181159420289855
User 84307 does not improve AUC. Reverting changes.
Training on augumented user 92932 8/50 current_auc = 0.8188405797101449
User 92932 AUC after training: 0.8173913043478261
User 92932 does not improve AUC. Reverting changes.
Training on augumented user 90217 9/50 current_auc = 0.8188405797101449
User 90217 AUC after training: 0.8166666666666667
User 90217 does not improve AUC. Reverting changes.
Training on augumented user 49383 10/50 current_auc = 0.8188405797101449
User 49383 AUC after training: 0.8188405797101449
User 49383 does not improve AUC. Reverting changes.
Training on augumented user 43047 11/50 current_auc = 0.8188405797101449
User 43047 AUC after training: 0.8181159420289855
User 43047 does not improve AUC. Reverting changes.
Training on augumented user 64949 12/50 current_auc = 0.8188405797101449
User 64949 AUC after training: 0.8188405797101449
User 64949 does not improve AUC. Reverting changes.
Training on augumented user 44902 13/50 current_auc = 0.8188405797101449
User 44902 AUC after training: 0.8188405797101449
User 44902 does not improve AUC. Reverting changes.
Training on augumented user 35028 14/50 current_auc = 0.8188405797101449
User 35028 AUC after training: 0.8181159420289855
User 35028 does not improve AUC. Reverting changes.
Training on augumented user 119307 15/50 current_auc = 0.8188405797101449
User 119307 AUC after training: 0.8159420289855073
User 119307 does not improve AUC. Reverting changes.
Training on augumented user 135393 16/50 current_auc = 0.8188405797101449
User 135393 AUC after training: 0.8181159420289855
User 135393 does not improve AUC. Reverting changes.
Training on augumented user 94186 17/50 current_auc = 0.8188405797101449
User 94186 AUC after training: 0.8166666666666667
User 94186 does not improve AUC. Reverting changes.
Training on augumented user 38364 18/50 current_auc = 0.8188405797101449
User 38364 AUC after training: 0.8181159420289855
User 38364 does not improve AUC. Reverting changes.
Training on augumented user 87502 19/50 current_auc = 0.8188405797101449
User 87502 AUC after training: 0.8159420289855073
User 87502 does not improve AUC. Reverting changes.
Training on augumented user 104315 20/50 current_auc = 0.8188405797101449
User 104315 AUC after training: 0.8181159420289855
User 104315 does not improve AUC. Reverting changes.
Training on augumented user 104126 21/50 current_auc = 0.8188405797101449
User 104126 AUC after training: 0.8159420289855073
User 104126 does not improve AUC. Reverting changes.
Training on augumented user 101356 22/50 current_auc = 0.8188405797101449
User 101356 AUC after training: 0.8188405797101449
User 101356 does not improve AUC. Reverting changes.
Training on augumented user 133218 23/50 current_auc = 0.8188405797101449
User 133218 AUC after training: 0.8188405797101449
User 133218 does not improve AUC. Reverting changes.
Training on augumented user 78616 24/50 current_auc = 0.8188405797101449
User 78616 AUC after training: 0.8188405797101449
User 78616 does not improve AUC. Reverting changes.
Training on augumented user 73431 25/50 current_auc = 0.8188405797101449
User 73431 AUC after training: 0.8181159420289855
User 73431 does not improve AUC. Reverting changes.
Training on augumented user 26488 26/50 current_auc = 0.8188405797101449
User 26488 AUC after training: 0.8166666666666668
User 26488 does not improve AUC. Reverting changes.
Training on augumented user 90325 27/50 current_auc = 0.8188405797101449
User 90325 AUC after training: 0.8166666666666667
User 90325 does not improve AUC. Reverting changes.
Training on augumented user 119351 28/50 current_auc = 0.8188405797101449
User 119351 AUC after training: 0.8181159420289855
User 119351 does not improve AUC. Reverting changes.
Training on augumented user 39006 29/50 current_auc = 0.8188405797101449
User 39006 AUC after training: 0.8188405797101449
User 39006 does not improve AUC. Reverting changes.
Training on augumented user 135936 30/50 current_auc = 0.8188405797101449
User 135936 AUC after training: 0.8188405797101449
User 135936 does not improve AUC. Reverting changes.
Training on augumented user 81730 31/50 current_auc = 0.8188405797101449
User 81730 AUC after training: 0.8181159420289855
User 81730 does not improve AUC. Reverting changes.
Training on augumented user 44980 32/50 current_auc = 0.8188405797101449
User 44980 AUC after training: 0.8188405797101449
User 44980 does not improve AUC. Reverting changes.
Training on augumented user 110753 33/50 current_auc = 0.8188405797101449
User 110753 AUC after training: 0.8173913043478261
User 110753 does not improve AUC. Reverting changes.
Training on augumented user 19797 34/50 current_auc = 0.8188405797101449
User 19797 AUC after training: 0.8173913043478261
User 19797 does not improve AUC. Reverting changes.
Training on augumented user 97725 35/50 current_auc = 0.8188405797101449
User 97725 AUC after training: 0.8188405797101449
User 97725 does not improve AUC. Reverting changes.
Training on augumented user 5035 36/50 current_auc = 0.8188405797101449
User 5035 AUC after training: 0.8188405797101449
User 5035 does not improve AUC. Reverting changes.
Training on augumented user 92214 37/50 current_auc = 0.8188405797101449
User 92214 AUC after training: 0.8181159420289855
User 92214 does not improve AUC. Reverting changes.
Training on augumented user 10649 38/50 current_auc = 0.8188405797101449
User 10649 AUC after training: 0.8141304347826086
User 10649 does not improve AUC. Reverting changes.
Training on augumented user 19887 39/50 current_auc = 0.8188405797101449
User 19887 AUC after training: 0.8173913043478261
User 19887 does not improve AUC. Reverting changes.
Training on augumented user 14413 40/50 current_auc = 0.8188405797101449
User 14413 AUC after training: 0.8181159420289855
User 14413 does not improve AUC. Reverting changes.
Training on augumented user 39882 41/50 current_auc = 0.8188405797101449
User 39882 AUC after training: 0.8188405797101449
User 39882 does not improve AUC. Reverting changes.
Training on augumented user 27441 42/50 current_auc = 0.8188405797101449
User 27441 AUC after training: 0.8173913043478261
User 27441 does not improve AUC. Reverting changes.
Training on augumented user 117386 43/50 current_auc = 0.8188405797101449
User 117386 AUC after training: 0.8181159420289855
User 117386 does not improve AUC. Reverting changes.
Training on augumented user 3380 44/50 current_auc = 0.8188405797101449
User 3380 AUC after training: 0.8181159420289855
User 3380 does not improve AUC. Reverting changes.
Training on augumented user 50095 45/50 current_auc = 0.8188405797101449
User 50095 AUC after training: 0.8166666666666667
User 50095 does not improve AUC. Reverting changes.
Training on augumented user 76111 46/50 current_auc = 0.8188405797101449
User 76111 AUC after training: 0.8181159420289855
User 76111 does not improve AUC. Reverting changes.
Training on augumented user 6450 47/50 current_auc = 0.8188405797101449
User 6450 AUC after training: 0.8188405797101449
User 6450 does not improve AUC. Reverting changes.
Training on augumented user 95926 48/50 current_auc = 0.8188405797101449
User 95926 AUC after training: 0.8188405797101449
User 95926 does not improve AUC. Reverting changes.
Training on augumented user 126285 49/50 current_auc = 0.8188405797101449
User 126285 AUC after training: 0.8181159420289855
User 126285 does not improve AUC. Reverting changes.
[2024-12-02 20:03:21.843386] start test user 88950 269/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:03:22.516693] start test user 88950 269/568 recall augumented users by random, augumented_users = [69574, 35926, 87119, 32492, 68945, 122801, 75512, 19870, 81448, 42615, 127379, 89194, 3074, 56923, 21909, 111789, 130359, 90226, 36888, 89126, 56106, 71298, 9066, 91680, 136221, 4773, 59329, 32304, 102317, 13585, 115540, 453, 130334, 50393, 16659, 43512, 133199, 119101, 72190, 116020, 112764, 79284, 109057, 92808, 40039, 28758, 19003, 41056, 86771, 15913]
[2024-12-02 20:03:22.545750] user = 88950 Cloud 269/568
[2024-12-02 20:03:22.572549] user = 88950 Local 269/568
[2024-12-02 20:03:22.638133] user = 88950 Local+ 269/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:03:24.976713] user = 88950 MPDA- 269/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.33006535947712423
Training on augumented user 69574 0/50 current_auc = 0.33006535947712423
User 69574 AUC after training: 0.32924836601307195
User 69574 does not improve AUC. Reverting changes.
Training on augumented user 35926 1/50 current_auc = 0.33006535947712423
User 35926 AUC after training: 0.32924836601307195
User 35926 does not improve AUC. Reverting changes.
Training on augumented user 87119 2/50 current_auc = 0.33006535947712423
User 87119 AUC after training: 0.3276143790849674
User 87119 does not improve AUC. Reverting changes.
Training on augumented user 32492 3/50 current_auc = 0.33006535947712423
User 32492 AUC after training: 0.33006535947712423
User 32492 does not improve AUC. Reverting changes.
Training on augumented user 68945 4/50 current_auc = 0.33006535947712423
User 68945 AUC after training: 0.33006535947712423
User 68945 does not improve AUC. Reverting changes.
Training on augumented user 122801 5/50 current_auc = 0.33006535947712423
User 122801 AUC after training: 0.32924836601307195
User 122801 does not improve AUC. Reverting changes.
Training on augumented user 75512 6/50 current_auc = 0.33006535947712423
User 75512 AUC after training: 0.3251633986928105
User 75512 does not improve AUC. Reverting changes.
Training on augumented user 19870 7/50 current_auc = 0.33006535947712423
User 19870 AUC after training: 0.3276143790849674
User 19870 does not improve AUC. Reverting changes.
Training on augumented user 81448 8/50 current_auc = 0.33006535947712423
User 81448 AUC after training: 0.3316993464052288
User 81448 improves AUC. Keeping the model.
Training on augumented user 42615 9/50 current_auc = 0.3316993464052288
User 42615 AUC after training: 0.3325163398692811
User 42615 improves AUC. Keeping the model.
Training on augumented user 127379 10/50 current_auc = 0.3325163398692811
User 127379 AUC after training: 0.32924836601307195
User 127379 does not improve AUC. Reverting changes.
Training on augumented user 89194 11/50 current_auc = 0.3325163398692811
User 89194 AUC after training: 0.3300653594771242
User 89194 does not improve AUC. Reverting changes.
Training on augumented user 3074 12/50 current_auc = 0.3325163398692811
User 3074 AUC after training: 0.3316993464052288
User 3074 does not improve AUC. Reverting changes.
Training on augumented user 56923 13/50 current_auc = 0.3325163398692811
User 56923 AUC after training: 0.3276143790849673
User 56923 does not improve AUC. Reverting changes.
Training on augumented user 21909 14/50 current_auc = 0.3325163398692811
User 21909 AUC after training: 0.32843137254901966
User 21909 does not improve AUC. Reverting changes.
Training on augumented user 111789 15/50 current_auc = 0.3325163398692811
User 111789 AUC after training: 0.3276143790849674
User 111789 does not improve AUC. Reverting changes.
Training on augumented user 130359 16/50 current_auc = 0.3325163398692811
User 130359 AUC after training: 0.3276143790849674
User 130359 does not improve AUC. Reverting changes.
Training on augumented user 90226 17/50 current_auc = 0.3325163398692811
User 90226 AUC after training: 0.3308823529411765
User 90226 does not improve AUC. Reverting changes.
Training on augumented user 36888 18/50 current_auc = 0.3325163398692811
User 36888 AUC after training: 0.3308823529411765
User 36888 does not improve AUC. Reverting changes.
Training on augumented user 89126 19/50 current_auc = 0.3325163398692811
User 89126 AUC after training: 0.32843137254901966
User 89126 does not improve AUC. Reverting changes.
Training on augumented user 56106 20/50 current_auc = 0.3325163398692811
User 56106 AUC after training: 0.3284313725490196
User 56106 does not improve AUC. Reverting changes.
Training on augumented user 71298 21/50 current_auc = 0.3325163398692811
User 71298 AUC after training: 0.3316993464052288
User 71298 does not improve AUC. Reverting changes.
Training on augumented user 9066 22/50 current_auc = 0.3325163398692811
User 9066 AUC after training: 0.32924836601307195
User 9066 does not improve AUC. Reverting changes.
Training on augumented user 91680 23/50 current_auc = 0.3325163398692811
User 91680 AUC after training: 0.3308823529411765
User 91680 does not improve AUC. Reverting changes.
Training on augumented user 136221 24/50 current_auc = 0.3325163398692811
User 136221 AUC after training: 0.3308823529411765
User 136221 does not improve AUC. Reverting changes.
Training on augumented user 4773 25/50 current_auc = 0.3325163398692811
User 4773 AUC after training: 0.33006535947712423
User 4773 does not improve AUC. Reverting changes.
Training on augumented user 59329 26/50 current_auc = 0.3325163398692811
User 59329 AUC after training: 0.3325163398692811
User 59329 does not improve AUC. Reverting changes.
Training on augumented user 32304 27/50 current_auc = 0.3325163398692811
User 32304 AUC after training: 0.3292483660130719
User 32304 does not improve AUC. Reverting changes.
Training on augumented user 102317 28/50 current_auc = 0.3325163398692811
User 102317 AUC after training: 0.32924836601307195
User 102317 does not improve AUC. Reverting changes.
Training on augumented user 13585 29/50 current_auc = 0.3325163398692811
User 13585 AUC after training: 0.3316993464052288
User 13585 does not improve AUC. Reverting changes.
Training on augumented user 115540 30/50 current_auc = 0.3325163398692811
User 115540 AUC after training: 0.33006535947712423
User 115540 does not improve AUC. Reverting changes.
Training on augumented user 453 31/50 current_auc = 0.3325163398692811
User 453 AUC after training: 0.3308823529411765
User 453 does not improve AUC. Reverting changes.
Training on augumented user 130334 32/50 current_auc = 0.3325163398692811
User 130334 AUC after training: 0.3316993464052288
User 130334 does not improve AUC. Reverting changes.
Training on augumented user 50393 33/50 current_auc = 0.3325163398692811
User 50393 AUC after training: 0.3308823529411765
User 50393 does not improve AUC. Reverting changes.
Training on augumented user 16659 34/50 current_auc = 0.3325163398692811
User 16659 AUC after training: 0.3292483660130719
User 16659 does not improve AUC. Reverting changes.
Training on augumented user 43512 35/50 current_auc = 0.3325163398692811
User 43512 AUC after training: 0.3276143790849674
User 43512 does not improve AUC. Reverting changes.
Training on augumented user 133199 36/50 current_auc = 0.3325163398692811
User 133199 AUC after training: 0.3276143790849674
User 133199 does not improve AUC. Reverting changes.
Training on augumented user 119101 37/50 current_auc = 0.3325163398692811
User 119101 AUC after training: 0.3308823529411765
User 119101 does not improve AUC. Reverting changes.
Training on augumented user 72190 38/50 current_auc = 0.3325163398692811
User 72190 AUC after training: 0.3325163398692811
User 72190 does not improve AUC. Reverting changes.
Training on augumented user 116020 39/50 current_auc = 0.3325163398692811
User 116020 AUC after training: 0.32843137254901966
User 116020 does not improve AUC. Reverting changes.
Training on augumented user 112764 40/50 current_auc = 0.3325163398692811
User 112764 AUC after training: 0.3316993464052288
User 112764 does not improve AUC. Reverting changes.
Training on augumented user 79284 41/50 current_auc = 0.3325163398692811
User 79284 AUC after training: 0.3308823529411765
User 79284 does not improve AUC. Reverting changes.
Training on augumented user 109057 42/50 current_auc = 0.3325163398692811
User 109057 AUC after training: 0.3276143790849674
User 109057 does not improve AUC. Reverting changes.
Training on augumented user 92808 43/50 current_auc = 0.3325163398692811
User 92808 AUC after training: 0.3308823529411765
User 92808 does not improve AUC. Reverting changes.
Training on augumented user 40039 44/50 current_auc = 0.3325163398692811
User 40039 AUC after training: 0.32516339869281047
User 40039 does not improve AUC. Reverting changes.
Training on augumented user 28758 45/50 current_auc = 0.3325163398692811
User 28758 AUC after training: 0.32679738562091504
User 28758 does not improve AUC. Reverting changes.
Training on augumented user 19003 46/50 current_auc = 0.3325163398692811
User 19003 AUC after training: 0.3308823529411765
User 19003 does not improve AUC. Reverting changes.
Training on augumented user 41056 47/50 current_auc = 0.3325163398692811
User 41056 AUC after training: 0.33006535947712423
User 41056 does not improve AUC. Reverting changes.
Training on augumented user 86771 48/50 current_auc = 0.3325163398692811
User 86771 AUC after training: 0.3316993464052288
User 86771 does not improve AUC. Reverting changes.
Training on augumented user 15913 49/50 current_auc = 0.3325163398692811
User 15913 AUC after training: 0.3292483660130719
User 15913 does not improve AUC. Reverting changes.
[2024-12-02 20:03:54.644279] start test user 88953 270/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:03:55.381886] start test user 88953 270/568 recall augumented users by random, augumented_users = [81867, 9961, 137018, 111271, 84454, 126238, 108694, 131661, 27068, 15929, 15016, 22247, 118651, 14811, 55635, 45905, 32408, 101056, 28872, 19276, 3775, 9403, 91233, 10565, 131740, 127052, 76991, 124900, 87893, 56455, 62765, 57668, 19152, 86208, 87981, 117722, 90755, 20054, 52128, 9421, 35089, 33468, 53574, 26494, 101728, 47006, 88969, 78367, 57528, 7287]
[2024-12-02 20:03:55.418389] user = 88953 Cloud 270/568
[2024-12-02 20:03:55.430245] user = 88953 Local 270/568
[2024-12-02 20:03:55.513826] user = 88953 Local+ 270/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:03:58.412971] user = 88953 MPDA- 270/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6770833333333333
Training on augumented user 81867 0/50 current_auc = 0.6770833333333333
User 81867 AUC after training: 0.6696428571428571
User 81867 does not improve AUC. Reverting changes.
Training on augumented user 9961 1/50 current_auc = 0.6770833333333333
User 9961 AUC after training: 0.6770833333333333
User 9961 does not improve AUC. Reverting changes.
Training on augumented user 137018 2/50 current_auc = 0.6770833333333333
User 137018 AUC after training: 0.6741071428571428
User 137018 does not improve AUC. Reverting changes.
Training on augumented user 111271 3/50 current_auc = 0.6770833333333333
User 111271 AUC after training: 0.6770833333333333
User 111271 does not improve AUC. Reverting changes.
Training on augumented user 84454 4/50 current_auc = 0.6770833333333333
User 84454 AUC after training: 0.6785714285714286
User 84454 improves AUC. Keeping the model.
Training on augumented user 126238 5/50 current_auc = 0.6785714285714286
User 126238 AUC after training: 0.6726190476190477
User 126238 does not improve AUC. Reverting changes.
Training on augumented user 108694 6/50 current_auc = 0.6785714285714286
User 108694 AUC after training: 0.6755952380952381
User 108694 does not improve AUC. Reverting changes.
Training on augumented user 131661 7/50 current_auc = 0.6785714285714286
User 131661 AUC after training: 0.6726190476190477
User 131661 does not improve AUC. Reverting changes.
Training on augumented user 27068 8/50 current_auc = 0.6785714285714286
User 27068 AUC after training: 0.6785714285714286
User 27068 does not improve AUC. Reverting changes.
Training on augumented user 15929 9/50 current_auc = 0.6785714285714286
User 15929 AUC after training: 0.6785714285714286
User 15929 does not improve AUC. Reverting changes.
Training on augumented user 15016 10/50 current_auc = 0.6785714285714286
User 15016 AUC after training: 0.6755952380952381
User 15016 does not improve AUC. Reverting changes.
Training on augumented user 22247 11/50 current_auc = 0.6785714285714286
User 22247 AUC after training: 0.6755952380952381
User 22247 does not improve AUC. Reverting changes.
Training on augumented user 118651 12/50 current_auc = 0.6785714285714286
User 118651 AUC after training: 0.6726190476190477
User 118651 does not improve AUC. Reverting changes.
Training on augumented user 14811 13/50 current_auc = 0.6785714285714286
User 14811 AUC after training: 0.6696428571428571
User 14811 does not improve AUC. Reverting changes.
Training on augumented user 55635 14/50 current_auc = 0.6785714285714286
User 55635 AUC after training: 0.6666666666666667
User 55635 does not improve AUC. Reverting changes.
Training on augumented user 45905 15/50 current_auc = 0.6785714285714286
User 45905 AUC after training: 0.6785714285714286
User 45905 does not improve AUC. Reverting changes.
Training on augumented user 32408 16/50 current_auc = 0.6785714285714286
User 32408 AUC after training: 0.6755952380952381
User 32408 does not improve AUC. Reverting changes.
Training on augumented user 101056 17/50 current_auc = 0.6785714285714286
User 101056 AUC after training: 0.6755952380952381
User 101056 does not improve AUC. Reverting changes.
Training on augumented user 28872 18/50 current_auc = 0.6785714285714286
User 28872 AUC after training: 0.6800595238095238
User 28872 improves AUC. Keeping the model.
Training on augumented user 19276 19/50 current_auc = 0.6800595238095238
User 19276 AUC after training: 0.6770833333333333
User 19276 does not improve AUC. Reverting changes.
Training on augumented user 3775 20/50 current_auc = 0.6800595238095238
User 3775 AUC after training: 0.6770833333333333
User 3775 does not improve AUC. Reverting changes.
Training on augumented user 9403 21/50 current_auc = 0.6800595238095238
User 9403 AUC after training: 0.6726190476190477
User 9403 does not improve AUC. Reverting changes.
Training on augumented user 91233 22/50 current_auc = 0.6800595238095238
User 91233 AUC after training: 0.6726190476190477
User 91233 does not improve AUC. Reverting changes.
Training on augumented user 10565 23/50 current_auc = 0.6800595238095238
User 10565 AUC after training: 0.6785714285714286
User 10565 does not improve AUC. Reverting changes.
Training on augumented user 131740 24/50 current_auc = 0.6800595238095238
User 131740 AUC after training: 0.6755952380952381
User 131740 does not improve AUC. Reverting changes.
Training on augumented user 127052 25/50 current_auc = 0.6800595238095238
User 127052 AUC after training: 0.6800595238095238
User 127052 does not improve AUC. Reverting changes.
Training on augumented user 76991 26/50 current_auc = 0.6800595238095238
User 76991 AUC after training: 0.6785714285714286
User 76991 does not improve AUC. Reverting changes.
Training on augumented user 124900 27/50 current_auc = 0.6800595238095238
User 124900 AUC after training: 0.6785714285714286
User 124900 does not improve AUC. Reverting changes.
Training on augumented user 87893 28/50 current_auc = 0.6800595238095238
User 87893 AUC after training: 0.6755952380952381
User 87893 does not improve AUC. Reverting changes.
Training on augumented user 56455 29/50 current_auc = 0.6800595238095238
User 56455 AUC after training: 0.6755952380952381
User 56455 does not improve AUC. Reverting changes.
Training on augumented user 62765 30/50 current_auc = 0.6800595238095238
User 62765 AUC after training: 0.6800595238095238
User 62765 does not improve AUC. Reverting changes.
Training on augumented user 57668 31/50 current_auc = 0.6800595238095238
User 57668 AUC after training: 0.6755952380952381
User 57668 does not improve AUC. Reverting changes.
Training on augumented user 19152 32/50 current_auc = 0.6800595238095238
User 19152 AUC after training: 0.6800595238095238
User 19152 does not improve AUC. Reverting changes.
Training on augumented user 86208 33/50 current_auc = 0.6800595238095238
User 86208 AUC after training: 0.6755952380952381
User 86208 does not improve AUC. Reverting changes.
Training on augumented user 87981 34/50 current_auc = 0.6800595238095238
User 87981 AUC after training: 0.6770833333333333
User 87981 does not improve AUC. Reverting changes.
Training on augumented user 117722 35/50 current_auc = 0.6800595238095238
User 117722 AUC after training: 0.6755952380952381
User 117722 does not improve AUC. Reverting changes.
Training on augumented user 90755 36/50 current_auc = 0.6800595238095238
User 90755 AUC after training: 0.6726190476190477
User 90755 does not improve AUC. Reverting changes.
Training on augumented user 20054 37/50 current_auc = 0.6800595238095238
User 20054 AUC after training: 0.6785714285714286
User 20054 does not improve AUC. Reverting changes.
Training on augumented user 52128 38/50 current_auc = 0.6800595238095238
User 52128 AUC after training: 0.6755952380952381
User 52128 does not improve AUC. Reverting changes.
Training on augumented user 9421 39/50 current_auc = 0.6800595238095238
User 9421 AUC after training: 0.6770833333333333
User 9421 does not improve AUC. Reverting changes.
Training on augumented user 35089 40/50 current_auc = 0.6800595238095238
User 35089 AUC after training: 0.6800595238095238
User 35089 does not improve AUC. Reverting changes.
Training on augumented user 33468 41/50 current_auc = 0.6800595238095238
User 33468 AUC after training: 0.6785714285714286
User 33468 does not improve AUC. Reverting changes.
Training on augumented user 53574 42/50 current_auc = 0.6800595238095238
User 53574 AUC after training: 0.6726190476190477
User 53574 does not improve AUC. Reverting changes.
Training on augumented user 26494 43/50 current_auc = 0.6800595238095238
User 26494 AUC after training: 0.6785714285714286
User 26494 does not improve AUC. Reverting changes.
Training on augumented user 101728 44/50 current_auc = 0.6800595238095238
User 101728 AUC after training: 0.6696428571428571
User 101728 does not improve AUC. Reverting changes.
Training on augumented user 47006 45/50 current_auc = 0.6800595238095238
User 47006 AUC after training: 0.6755952380952381
User 47006 does not improve AUC. Reverting changes.
Training on augumented user 88969 46/50 current_auc = 0.6800595238095238
User 88969 AUC after training: 0.6785714285714286
User 88969 does not improve AUC. Reverting changes.
Training on augumented user 78367 47/50 current_auc = 0.6800595238095238
User 78367 AUC after training: 0.6770833333333333
User 78367 does not improve AUC. Reverting changes.
Training on augumented user 57528 48/50 current_auc = 0.6800595238095238
User 57528 AUC after training: 0.6711309523809523
User 57528 does not improve AUC. Reverting changes.
Training on augumented user 7287 49/50 current_auc = 0.6800595238095238
User 7287 AUC after training: 0.6755952380952381
User 7287 does not improve AUC. Reverting changes.
[2024-12-02 20:04:31.754145] start test user 88956 271/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:04:32.215271] start test user 88956 271/568 recall augumented users by random, augumented_users = [66019, 114618, 21549, 23585, 70742, 106376, 124534, 52628, 21590, 131914, 72611, 7431, 120971, 100096, 74721, 13240, 28675, 131728, 20453, 32331, 122034, 84333, 126466, 428, 98829, 111709, 40652, 93072, 138074, 36499, 85897, 14518, 76483, 75666, 64818, 16465, 111747, 130360, 90733, 70732, 26988, 71651, 13903, 116238, 42455, 74308, 97662, 131088, 83752, 66617]
[2024-12-02 20:04:32.229108] user = 88956 Cloud 271/568
[2024-12-02 20:04:32.241485] user = 88956 Local 271/568
[2024-12-02 20:04:32.327340] user = 88956 Local+ 271/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:04:34.843787] user = 88956 MPDA- 271/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7092063492063492
Training on augumented user 66019 0/50 current_auc = 0.7092063492063492
User 66019 AUC after training: 0.7130158730158729
User 66019 improves AUC. Keeping the model.
Training on augumented user 114618 1/50 current_auc = 0.7130158730158729
User 114618 AUC after training: 0.713015873015873
User 114618 improves AUC. Keeping the model.
Training on augumented user 21549 2/50 current_auc = 0.713015873015873
User 21549 AUC after training: 0.7136507936507936
User 21549 improves AUC. Keeping the model.
Training on augumented user 23585 3/50 current_auc = 0.7136507936507936
User 23585 AUC after training: 0.7136507936507936
User 23585 does not improve AUC. Reverting changes.
Training on augumented user 70742 4/50 current_auc = 0.7136507936507936
User 70742 AUC after training: 0.7130158730158731
User 70742 does not improve AUC. Reverting changes.
Training on augumented user 106376 5/50 current_auc = 0.7136507936507936
User 106376 AUC after training: 0.713015873015873
User 106376 does not improve AUC. Reverting changes.
Training on augumented user 124534 6/50 current_auc = 0.7136507936507936
User 124534 AUC after training: 0.7136507936507936
User 124534 does not improve AUC. Reverting changes.
Training on augumented user 52628 7/50 current_auc = 0.7136507936507936
User 52628 AUC after training: 0.7142857142857143
User 52628 improves AUC. Keeping the model.
Training on augumented user 21590 8/50 current_auc = 0.7142857142857143
User 21590 AUC after training: 0.7123809523809523
User 21590 does not improve AUC. Reverting changes.
Training on augumented user 131914 9/50 current_auc = 0.7142857142857143
User 131914 AUC after training: 0.7136507936507936
User 131914 does not improve AUC. Reverting changes.
Training on augumented user 72611 10/50 current_auc = 0.7142857142857143
User 72611 AUC after training: 0.7117460317460318
User 72611 does not improve AUC. Reverting changes.
Training on augumented user 7431 11/50 current_auc = 0.7142857142857143
User 7431 AUC after training: 0.714920634920635
User 7431 improves AUC. Keeping the model.
Training on augumented user 120971 12/50 current_auc = 0.714920634920635
User 120971 AUC after training: 0.7117460317460318
User 120971 does not improve AUC. Reverting changes.
Training on augumented user 100096 13/50 current_auc = 0.714920634920635
User 100096 AUC after training: 0.714920634920635
User 100096 does not improve AUC. Reverting changes.
Training on augumented user 74721 14/50 current_auc = 0.714920634920635
User 74721 AUC after training: 0.7142857142857143
User 74721 does not improve AUC. Reverting changes.
Training on augumented user 13240 15/50 current_auc = 0.714920634920635
User 13240 AUC after training: 0.714920634920635
User 13240 does not improve AUC. Reverting changes.
Training on augumented user 28675 16/50 current_auc = 0.714920634920635
User 28675 AUC after training: 0.714920634920635
User 28675 does not improve AUC. Reverting changes.
Training on augumented user 131728 17/50 current_auc = 0.714920634920635
User 131728 AUC after training: 0.7155555555555556
User 131728 improves AUC. Keeping the model.
Training on augumented user 20453 18/50 current_auc = 0.7155555555555556
User 20453 AUC after training: 0.714920634920635
User 20453 does not improve AUC. Reverting changes.
Training on augumented user 32331 19/50 current_auc = 0.7155555555555556
User 32331 AUC after training: 0.714920634920635
User 32331 does not improve AUC. Reverting changes.
Training on augumented user 122034 20/50 current_auc = 0.7155555555555556
User 122034 AUC after training: 0.7155555555555556
User 122034 does not improve AUC. Reverting changes.
Training on augumented user 84333 21/50 current_auc = 0.7155555555555556
User 84333 AUC after training: 0.7142857142857143
User 84333 does not improve AUC. Reverting changes.
Training on augumented user 126466 22/50 current_auc = 0.7155555555555556
User 126466 AUC after training: 0.714920634920635
User 126466 does not improve AUC. Reverting changes.
Training on augumented user 428 23/50 current_auc = 0.7155555555555556
User 428 AUC after training: 0.7155555555555556
User 428 does not improve AUC. Reverting changes.
Training on augumented user 98829 24/50 current_auc = 0.7155555555555556
User 98829 AUC after training: 0.7155555555555556
User 98829 does not improve AUC. Reverting changes.
Training on augumented user 111709 25/50 current_auc = 0.7155555555555556
User 111709 AUC after training: 0.713015873015873
User 111709 does not improve AUC. Reverting changes.
Training on augumented user 40652 26/50 current_auc = 0.7155555555555556
User 40652 AUC after training: 0.7136507936507936
User 40652 does not improve AUC. Reverting changes.
Training on augumented user 93072 27/50 current_auc = 0.7155555555555556
User 93072 AUC after training: 0.7111111111111111
User 93072 does not improve AUC. Reverting changes.
Training on augumented user 138074 28/50 current_auc = 0.7155555555555556
User 138074 AUC after training: 0.7155555555555556
User 138074 does not improve AUC. Reverting changes.
Training on augumented user 36499 29/50 current_auc = 0.7155555555555556
User 36499 AUC after training: 0.7111111111111111
User 36499 does not improve AUC. Reverting changes.
Training on augumented user 85897 30/50 current_auc = 0.7155555555555556
User 85897 AUC after training: 0.7136507936507936
User 85897 does not improve AUC. Reverting changes.
Training on augumented user 14518 31/50 current_auc = 0.7155555555555556
User 14518 AUC after training: 0.7155555555555556
User 14518 does not improve AUC. Reverting changes.
Training on augumented user 76483 32/50 current_auc = 0.7155555555555556
User 76483 AUC after training: 0.7155555555555556
User 76483 does not improve AUC. Reverting changes.
Training on augumented user 75666 33/50 current_auc = 0.7155555555555556
User 75666 AUC after training: 0.7142857142857143
User 75666 does not improve AUC. Reverting changes.
Training on augumented user 64818 34/50 current_auc = 0.7155555555555556
User 64818 AUC after training: 0.7136507936507936
User 64818 does not improve AUC. Reverting changes.
Training on augumented user 16465 35/50 current_auc = 0.7155555555555556
User 16465 AUC after training: 0.7130158730158731
User 16465 does not improve AUC. Reverting changes.
Training on augumented user 111747 36/50 current_auc = 0.7155555555555556
User 111747 AUC after training: 0.714920634920635
User 111747 does not improve AUC. Reverting changes.
Training on augumented user 130360 37/50 current_auc = 0.7155555555555556
User 130360 AUC after training: 0.7155555555555556
User 130360 does not improve AUC. Reverting changes.
Training on augumented user 90733 38/50 current_auc = 0.7155555555555556
User 90733 AUC after training: 0.714920634920635
User 90733 does not improve AUC. Reverting changes.
Training on augumented user 70732 39/50 current_auc = 0.7155555555555556
User 70732 AUC after training: 0.7155555555555556
User 70732 does not improve AUC. Reverting changes.
Training on augumented user 26988 40/50 current_auc = 0.7155555555555556
User 26988 AUC after training: 0.7136507936507936
User 26988 does not improve AUC. Reverting changes.
Training on augumented user 71651 41/50 current_auc = 0.7155555555555556
User 71651 AUC after training: 0.7155555555555556
User 71651 does not improve AUC. Reverting changes.
Training on augumented user 13903 42/50 current_auc = 0.7155555555555556
User 13903 AUC after training: 0.7155555555555556
User 13903 does not improve AUC. Reverting changes.
Training on augumented user 116238 43/50 current_auc = 0.7155555555555556
User 116238 AUC after training: 0.713015873015873
User 116238 does not improve AUC. Reverting changes.
Training on augumented user 42455 44/50 current_auc = 0.7155555555555556
User 42455 AUC after training: 0.7155555555555556
User 42455 does not improve AUC. Reverting changes.
Training on augumented user 74308 45/50 current_auc = 0.7155555555555556
User 74308 AUC after training: 0.7155555555555556
User 74308 does not improve AUC. Reverting changes.
Training on augumented user 97662 46/50 current_auc = 0.7155555555555556
User 97662 AUC after training: 0.7155555555555556
User 97662 does not improve AUC. Reverting changes.
Training on augumented user 131088 47/50 current_auc = 0.7155555555555556
User 131088 AUC after training: 0.714920634920635
User 131088 does not improve AUC. Reverting changes.
Training on augumented user 83752 48/50 current_auc = 0.7155555555555556
User 83752 AUC after training: 0.7123809523809523
User 83752 does not improve AUC. Reverting changes.
Training on augumented user 66617 49/50 current_auc = 0.7155555555555556
User 66617 AUC after training: 0.7142857142857143
User 66617 does not improve AUC. Reverting changes.
[2024-12-02 20:05:07.419372] start test user 89045 272/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:05:08.170532] start test user 89045 272/568 recall augumented users by random, augumented_users = [135496, 14937, 85875, 132037, 84301, 116476, 80072, 28154, 98343, 13652, 40369, 97911, 107484, 76889, 49877, 117391, 111465, 1153, 60577, 11135, 27821, 115052, 105250, 1061, 37017, 119348, 112444, 104723, 42144, 128571, 80310, 52084, 8857, 4224, 25735, 12521, 83369, 119524, 79478, 103740, 3922, 130103, 65691, 113727, 65592, 47973, 33010, 52028, 68732, 61697]
[2024-12-02 20:05:08.184813] user = 89045 Cloud 272/568
[2024-12-02 20:05:08.193584] user = 89045 Local 272/568
[2024-12-02 20:05:08.257382] user = 89045 Local+ 272/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:05:09.866687] user = 89045 MPDA- 272/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 135496 0/50 current_auc = 1.0
User 135496 AUC after training: 1.0
User 135496 does not improve AUC. Reverting changes.
Training on augumented user 14937 1/50 current_auc = 1.0
User 14937 AUC after training: 1.0
User 14937 does not improve AUC. Reverting changes.
Training on augumented user 85875 2/50 current_auc = 1.0
User 85875 AUC after training: 1.0
User 85875 does not improve AUC. Reverting changes.
Training on augumented user 132037 3/50 current_auc = 1.0
User 132037 AUC after training: 1.0
User 132037 does not improve AUC. Reverting changes.
Training on augumented user 84301 4/50 current_auc = 1.0
User 84301 AUC after training: 1.0
User 84301 does not improve AUC. Reverting changes.
Training on augumented user 116476 5/50 current_auc = 1.0
User 116476 AUC after training: 1.0
User 116476 does not improve AUC. Reverting changes.
Training on augumented user 80072 6/50 current_auc = 1.0
User 80072 AUC after training: 1.0
User 80072 does not improve AUC. Reverting changes.
Training on augumented user 28154 7/50 current_auc = 1.0
User 28154 AUC after training: 1.0
User 28154 does not improve AUC. Reverting changes.
Training on augumented user 98343 8/50 current_auc = 1.0
User 98343 AUC after training: 1.0
User 98343 does not improve AUC. Reverting changes.
Training on augumented user 13652 9/50 current_auc = 1.0
User 13652 AUC after training: 1.0
User 13652 does not improve AUC. Reverting changes.
Training on augumented user 40369 10/50 current_auc = 1.0
User 40369 AUC after training: 1.0
User 40369 does not improve AUC. Reverting changes.
Training on augumented user 97911 11/50 current_auc = 1.0
User 97911 AUC after training: 1.0
User 97911 does not improve AUC. Reverting changes.
Training on augumented user 107484 12/50 current_auc = 1.0
User 107484 AUC after training: 1.0
User 107484 does not improve AUC. Reverting changes.
Training on augumented user 76889 13/50 current_auc = 1.0
User 76889 AUC after training: 1.0
User 76889 does not improve AUC. Reverting changes.
Training on augumented user 49877 14/50 current_auc = 1.0
User 49877 AUC after training: 1.0
User 49877 does not improve AUC. Reverting changes.
Training on augumented user 117391 15/50 current_auc = 1.0
User 117391 AUC after training: 1.0
User 117391 does not improve AUC. Reverting changes.
Training on augumented user 111465 16/50 current_auc = 1.0
User 111465 AUC after training: 1.0
User 111465 does not improve AUC. Reverting changes.
Training on augumented user 1153 17/50 current_auc = 1.0
User 1153 AUC after training: 1.0
User 1153 does not improve AUC. Reverting changes.
Training on augumented user 60577 18/50 current_auc = 1.0
User 60577 AUC after training: 1.0
User 60577 does not improve AUC. Reverting changes.
Training on augumented user 11135 19/50 current_auc = 1.0
User 11135 AUC after training: 1.0
User 11135 does not improve AUC. Reverting changes.
Training on augumented user 27821 20/50 current_auc = 1.0
User 27821 AUC after training: 1.0
User 27821 does not improve AUC. Reverting changes.
Training on augumented user 115052 21/50 current_auc = 1.0
User 115052 AUC after training: 1.0
User 115052 does not improve AUC. Reverting changes.
Training on augumented user 105250 22/50 current_auc = 1.0
User 105250 AUC after training: 1.0
User 105250 does not improve AUC. Reverting changes.
Training on augumented user 1061 23/50 current_auc = 1.0
User 1061 AUC after training: 1.0
User 1061 does not improve AUC. Reverting changes.
Training on augumented user 37017 24/50 current_auc = 1.0
User 37017 AUC after training: 1.0
User 37017 does not improve AUC. Reverting changes.
Training on augumented user 119348 25/50 current_auc = 1.0
User 119348 AUC after training: 1.0
User 119348 does not improve AUC. Reverting changes.
Training on augumented user 112444 26/50 current_auc = 1.0
User 112444 AUC after training: 1.0
User 112444 does not improve AUC. Reverting changes.
Training on augumented user 104723 27/50 current_auc = 1.0
User 104723 AUC after training: 1.0
User 104723 does not improve AUC. Reverting changes.
Training on augumented user 42144 28/50 current_auc = 1.0
User 42144 AUC after training: 1.0
User 42144 does not improve AUC. Reverting changes.
Training on augumented user 128571 29/50 current_auc = 1.0
User 128571 AUC after training: 1.0
User 128571 does not improve AUC. Reverting changes.
Training on augumented user 80310 30/50 current_auc = 1.0
User 80310 AUC after training: 1.0
User 80310 does not improve AUC. Reverting changes.
Training on augumented user 52084 31/50 current_auc = 1.0
User 52084 AUC after training: 1.0
User 52084 does not improve AUC. Reverting changes.
Training on augumented user 8857 32/50 current_auc = 1.0
User 8857 AUC after training: 1.0
User 8857 does not improve AUC. Reverting changes.
Training on augumented user 4224 33/50 current_auc = 1.0
User 4224 AUC after training: 1.0
User 4224 does not improve AUC. Reverting changes.
Training on augumented user 25735 34/50 current_auc = 1.0
User 25735 AUC after training: 1.0
User 25735 does not improve AUC. Reverting changes.
Training on augumented user 12521 35/50 current_auc = 1.0
User 12521 AUC after training: 1.0
User 12521 does not improve AUC. Reverting changes.
Training on augumented user 83369 36/50 current_auc = 1.0
User 83369 AUC after training: 1.0
User 83369 does not improve AUC. Reverting changes.
Training on augumented user 119524 37/50 current_auc = 1.0
User 119524 AUC after training: 1.0
User 119524 does not improve AUC. Reverting changes.
Training on augumented user 79478 38/50 current_auc = 1.0
User 79478 AUC after training: 1.0
User 79478 does not improve AUC. Reverting changes.
Training on augumented user 103740 39/50 current_auc = 1.0
User 103740 AUC after training: 1.0
User 103740 does not improve AUC. Reverting changes.
Training on augumented user 3922 40/50 current_auc = 1.0
User 3922 AUC after training: 1.0
User 3922 does not improve AUC. Reverting changes.
Training on augumented user 130103 41/50 current_auc = 1.0
User 130103 AUC after training: 1.0
User 130103 does not improve AUC. Reverting changes.
Training on augumented user 65691 42/50 current_auc = 1.0
User 65691 AUC after training: 1.0
User 65691 does not improve AUC. Reverting changes.
Training on augumented user 113727 43/50 current_auc = 1.0
User 113727 AUC after training: 1.0
User 113727 does not improve AUC. Reverting changes.
Training on augumented user 65592 44/50 current_auc = 1.0
User 65592 AUC after training: 1.0
User 65592 does not improve AUC. Reverting changes.
Training on augumented user 47973 45/50 current_auc = 1.0
User 47973 AUC after training: 1.0
User 47973 does not improve AUC. Reverting changes.
Training on augumented user 33010 46/50 current_auc = 1.0
User 33010 AUC after training: 1.0
User 33010 does not improve AUC. Reverting changes.
Training on augumented user 52028 47/50 current_auc = 1.0
User 52028 AUC after training: 1.0
User 52028 does not improve AUC. Reverting changes.
Training on augumented user 68732 48/50 current_auc = 1.0
User 68732 AUC after training: 1.0
User 68732 does not improve AUC. Reverting changes.
Training on augumented user 61697 49/50 current_auc = 1.0
User 61697 AUC after training: 1.0
User 61697 does not improve AUC. Reverting changes.
[2024-12-02 20:05:35.608797] start test user 89059 273/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:05:36.294268] start test user 89059 273/568 recall augumented users by random, augumented_users = [132619, 33910, 46383, 64189, 123699, 97565, 90987, 64941, 79005, 132449, 42867, 8294, 44140, 29080, 77616, 107184, 87073, 100981, 3724, 135622, 121161, 58965, 82216, 2653, 7304, 35809, 37577, 99396, 5879, 27531, 1629, 80402, 42254, 81161, 133994, 117681, 80721, 15033, 19377, 20120, 127012, 18852, 84213, 65123, 13175, 74757, 134153, 125216, 62851, 37476]
[2024-12-02 20:05:36.309754] user = 89059 Cloud 273/568
[2024-12-02 20:05:36.352869] user = 89059 Local 273/568
[2024-12-02 20:05:36.412321] user = 89059 Local+ 273/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:05:38.867454] user = 89059 MPDA- 273/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6264044943820224
Training on augumented user 132619 0/50 current_auc = 0.6264044943820224
User 132619 AUC after training: 0.6262566528681254
User 132619 does not improve AUC. Reverting changes.
Training on augumented user 33910 1/50 current_auc = 0.6264044943820224
User 33910 AUC after training: 0.6260348905972797
User 33910 does not improve AUC. Reverting changes.
Training on augumented user 46383 2/50 current_auc = 0.6264044943820224
User 46383 AUC after training: 0.6261827321111768
User 46383 does not improve AUC. Reverting changes.
Training on augumented user 64189 3/50 current_auc = 0.6264044943820224
User 64189 AUC after training: 0.6264784151389711
User 64189 improves AUC. Keeping the model.
Training on augumented user 123699 4/50 current_auc = 0.6264784151389711
User 123699 AUC after training: 0.6272176227084565
User 123699 improves AUC. Keeping the model.
Training on augumented user 97565 5/50 current_auc = 0.6272176227084565
User 97565 AUC after training: 0.6271437019515079
User 97565 does not improve AUC. Reverting changes.
Training on augumented user 90987 6/50 current_auc = 0.6272176227084565
User 90987 AUC after training: 0.6275133057362507
User 90987 improves AUC. Keeping the model.
Training on augumented user 64941 7/50 current_auc = 0.6275133057362507
User 64941 AUC after training: 0.627956830277942
User 64941 improves AUC. Keeping the model.
Training on augumented user 79005 8/50 current_auc = 0.627956830277942
User 79005 AUC after training: 0.6274393849793023
User 79005 does not improve AUC. Reverting changes.
Training on augumented user 132449 9/50 current_auc = 0.627956830277942
User 132449 AUC after training: 0.6276611472501479
User 132449 does not improve AUC. Reverting changes.
Training on augumented user 42867 10/50 current_auc = 0.627956830277942
User 42867 AUC after training: 0.627808988764045
User 42867 does not improve AUC. Reverting changes.
Training on augumented user 8294 11/50 current_auc = 0.627956830277942
User 8294 AUC after training: 0.6274393849793022
User 8294 does not improve AUC. Reverting changes.
Training on augumented user 44140 12/50 current_auc = 0.627956830277942
User 44140 AUC after training: 0.6281785925487877
User 44140 improves AUC. Keeping the model.
Training on augumented user 29080 13/50 current_auc = 0.6281785925487877
User 29080 AUC after training: 0.6277350680070963
User 29080 does not improve AUC. Reverting changes.
Training on augumented user 77616 14/50 current_auc = 0.6281785925487877
User 77616 AUC after training: 0.6272915434654052
User 77616 does not improve AUC. Reverting changes.
Training on augumented user 107184 15/50 current_auc = 0.6281785925487877
User 107184 AUC after training: 0.6277350680070963
User 107184 does not improve AUC. Reverting changes.
Training on augumented user 87073 16/50 current_auc = 0.6281785925487877
User 87073 AUC after training: 0.6275872264931993
User 87073 does not improve AUC. Reverting changes.
Training on augumented user 100981 17/50 current_auc = 0.6281785925487877
User 100981 AUC after training: 0.6281785925487877
User 100981 does not improve AUC. Reverting changes.
Training on augumented user 3724 18/50 current_auc = 0.6281785925487877
User 3724 AUC after training: 0.6282525133057363
User 3724 improves AUC. Keeping the model.
Training on augumented user 135622 19/50 current_auc = 0.6282525133057363
User 135622 AUC after training: 0.6280307510348907
User 135622 does not improve AUC. Reverting changes.
Training on augumented user 121161 20/50 current_auc = 0.6282525133057363
User 121161 AUC after training: 0.6286221170904791
User 121161 improves AUC. Keeping the model.
Training on augumented user 58965 21/50 current_auc = 0.6286221170904791
User 58965 AUC after training: 0.6284003548196334
User 58965 does not improve AUC. Reverting changes.
Training on augumented user 82216 22/50 current_auc = 0.6286221170904791
User 82216 AUC after training: 0.6270697811945594
User 82216 does not improve AUC. Reverting changes.
Training on augumented user 2653 23/50 current_auc = 0.6286221170904791
User 2653 AUC after training: 0.6285481963335304
User 2653 does not improve AUC. Reverting changes.
Training on augumented user 7304 24/50 current_auc = 0.6286221170904791
User 7304 AUC after training: 0.6289178001182733
User 7304 improves AUC. Keeping the model.
Training on augumented user 35809 25/50 current_auc = 0.6289178001182733
User 35809 AUC after training: 0.6293613246599645
User 35809 improves AUC. Keeping the model.
Training on augumented user 37577 26/50 current_auc = 0.6293613246599645
User 37577 AUC after training: 0.6281046717918392
User 37577 does not improve AUC. Reverting changes.
Training on augumented user 99396 27/50 current_auc = 0.6293613246599645
User 99396 AUC after training: 0.6295091661738615
User 99396 improves AUC. Keeping the model.
Training on augumented user 5879 28/50 current_auc = 0.6295091661738615
User 5879 AUC after training: 0.627956830277942
User 5879 does not improve AUC. Reverting changes.
Training on augumented user 27531 29/50 current_auc = 0.6295091661738615
User 27531 AUC after training: 0.6285481963335304
User 27531 does not improve AUC. Reverting changes.
Training on augumented user 1629 30/50 current_auc = 0.6295091661738615
User 1629 AUC after training: 0.6282525133057362
User 1629 does not improve AUC. Reverting changes.
Training on augumented user 80402 31/50 current_auc = 0.6295091661738615
User 80402 AUC after training: 0.629139562389119
User 80402 does not improve AUC. Reverting changes.
Training on augumented user 42254 32/50 current_auc = 0.6295091661738615
User 42254 AUC after training: 0.6288438793613247
User 42254 does not improve AUC. Reverting changes.
Training on augumented user 81161 33/50 current_auc = 0.6295091661738615
User 81161 AUC after training: 0.6282525133057363
User 81161 does not improve AUC. Reverting changes.
Training on augumented user 133994 34/50 current_auc = 0.6295091661738615
User 133994 AUC after training: 0.6298787699586044
User 133994 improves AUC. Keeping the model.
Training on augumented user 117681 35/50 current_auc = 0.6298787699586044
User 117681 AUC after training: 0.6290656416321703
User 117681 does not improve AUC. Reverting changes.
Training on augumented user 80721 36/50 current_auc = 0.6298787699586044
User 80721 AUC after training: 0.6282525133057363
User 80721 does not improve AUC. Reverting changes.
Training on augumented user 15033 37/50 current_auc = 0.6298787699586044
User 15033 AUC after training: 0.6284003548196334
User 15033 does not improve AUC. Reverting changes.
Training on augumented user 19377 38/50 current_auc = 0.6298787699586044
User 19377 AUC after training: 0.6292874039030161
User 19377 does not improve AUC. Reverting changes.
Training on augumented user 20120 39/50 current_auc = 0.6298787699586044
User 20120 AUC after training: 0.629287403903016
User 20120 does not improve AUC. Reverting changes.
Training on augumented user 127012 40/50 current_auc = 0.6298787699586044
User 127012 AUC after training: 0.6295830869308101
User 127012 does not improve AUC. Reverting changes.
Training on augumented user 18852 41/50 current_auc = 0.6298787699586044
User 18852 AUC after training: 0.6294352454169132
User 18852 does not improve AUC. Reverting changes.
Training on augumented user 84213 42/50 current_auc = 0.6298787699586044
User 84213 AUC after training: 0.6297309284447073
User 84213 does not improve AUC. Reverting changes.
Training on augumented user 65123 43/50 current_auc = 0.6298787699586044
User 65123 AUC after training: 0.6295091661738617
User 65123 does not improve AUC. Reverting changes.
Training on augumented user 13175 44/50 current_auc = 0.6298787699586044
User 13175 AUC after training: 0.6298048492016559
User 13175 does not improve AUC. Reverting changes.
Training on augumented user 74757 45/50 current_auc = 0.6298787699586044
User 74757 AUC after training: 0.6296570076877588
User 74757 does not improve AUC. Reverting changes.
Training on augumented user 134153 46/50 current_auc = 0.6298787699586044
User 134153 AUC after training: 0.6292134831460674
User 134153 does not improve AUC. Reverting changes.
Training on augumented user 125216 47/50 current_auc = 0.6298787699586044
User 125216 AUC after training: 0.629952690715553
User 125216 improves AUC. Keeping the model.
Training on augumented user 62851 48/50 current_auc = 0.629952690715553
User 62851 AUC after training: 0.6306179775280899
User 62851 improves AUC. Keeping the model.
Training on augumented user 37476 49/50 current_auc = 0.6306179775280899
User 37476 AUC after training: 0.6297309284447073
User 37476 does not improve AUC. Reverting changes.
[2024-12-02 20:06:13.715237] start test user 89069 274/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:06:14.212622] start test user 89069 274/568 recall augumented users by random, augumented_users = [59360, 46354, 72472, 118855, 126023, 116085, 92709, 20171, 38405, 58860, 63211, 31247, 123602, 80231, 121527, 17293, 22972, 75444, 130545, 80493, 125390, 58462, 100930, 105237, 26203, 29979, 39421, 81645, 82023, 14985, 27739, 51883, 106531, 50478, 58051, 125571, 38881, 18966, 133992, 55154, 53910, 87296, 123217, 102439, 48384, 17384, 90152, 11533, 119948, 18160]
[2024-12-02 20:06:14.227929] user = 89069 Cloud 274/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:06:14.234330] user = 89069 Local 274/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:06:14.264377] user = 89069 Local+ 274/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:06:16.132659] user = 89069 MPDA- 274/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 59360 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59360 AUC after training: 0.5
User 59360 does not improve AUC. Reverting changes.
Training on augumented user 46354 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46354 AUC after training: 0.5
User 46354 does not improve AUC. Reverting changes.
Training on augumented user 72472 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72472 AUC after training: 0.5
User 72472 does not improve AUC. Reverting changes.
Training on augumented user 118855 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118855 AUC after training: 0.5
User 118855 does not improve AUC. Reverting changes.
Training on augumented user 126023 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126023 AUC after training: 0.5
User 126023 does not improve AUC. Reverting changes.
Training on augumented user 116085 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116085 AUC after training: 0.5
User 116085 does not improve AUC. Reverting changes.
Training on augumented user 92709 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92709 AUC after training: 0.5
User 92709 does not improve AUC. Reverting changes.
Training on augumented user 20171 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20171 AUC after training: 0.5
User 20171 does not improve AUC. Reverting changes.
Training on augumented user 38405 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38405 AUC after training: 0.5
User 38405 does not improve AUC. Reverting changes.
Training on augumented user 58860 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58860 AUC after training: 0.5
User 58860 does not improve AUC. Reverting changes.
Training on augumented user 63211 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63211 AUC after training: 0.5
User 63211 does not improve AUC. Reverting changes.
Training on augumented user 31247 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31247 AUC after training: 0.5
User 31247 does not improve AUC. Reverting changes.
Training on augumented user 123602 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123602 AUC after training: 0.5
User 123602 does not improve AUC. Reverting changes.
Training on augumented user 80231 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80231 AUC after training: 0.5
User 80231 does not improve AUC. Reverting changes.
Training on augumented user 121527 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121527 AUC after training: 0.5
User 121527 does not improve AUC. Reverting changes.
Training on augumented user 17293 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17293 AUC after training: 0.5
User 17293 does not improve AUC. Reverting changes.
Training on augumented user 22972 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22972 AUC after training: 0.5
User 22972 does not improve AUC. Reverting changes.
Training on augumented user 75444 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75444 AUC after training: 0.5
User 75444 does not improve AUC. Reverting changes.
Training on augumented user 130545 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130545 AUC after training: 0.5
User 130545 does not improve AUC. Reverting changes.
Training on augumented user 80493 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80493 AUC after training: 0.5
User 80493 does not improve AUC. Reverting changes.
Training on augumented user 125390 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125390 AUC after training: 0.5
User 125390 does not improve AUC. Reverting changes.
Training on augumented user 58462 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58462 AUC after training: 0.5
User 58462 does not improve AUC. Reverting changes.
Training on augumented user 100930 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100930 AUC after training: 0.5
User 100930 does not improve AUC. Reverting changes.
Training on augumented user 105237 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105237 AUC after training: 0.5
User 105237 does not improve AUC. Reverting changes.
Training on augumented user 26203 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26203 AUC after training: 0.5
User 26203 does not improve AUC. Reverting changes.
Training on augumented user 29979 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29979 AUC after training: 0.5
User 29979 does not improve AUC. Reverting changes.
Training on augumented user 39421 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39421 AUC after training: 0.5
User 39421 does not improve AUC. Reverting changes.
Training on augumented user 81645 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81645 AUC after training: 0.5
User 81645 does not improve AUC. Reverting changes.
Training on augumented user 82023 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82023 AUC after training: 0.5
User 82023 does not improve AUC. Reverting changes.
Training on augumented user 14985 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14985 AUC after training: 0.5
User 14985 does not improve AUC. Reverting changes.
Training on augumented user 27739 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27739 AUC after training: 0.5
User 27739 does not improve AUC. Reverting changes.
Training on augumented user 51883 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51883 AUC after training: 0.5
User 51883 does not improve AUC. Reverting changes.
Training on augumented user 106531 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106531 AUC after training: 0.5
User 106531 does not improve AUC. Reverting changes.
Training on augumented user 50478 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50478 AUC after training: 0.5
User 50478 does not improve AUC. Reverting changes.
Training on augumented user 58051 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58051 AUC after training: 0.5
User 58051 does not improve AUC. Reverting changes.
Training on augumented user 125571 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125571 AUC after training: 0.5
User 125571 does not improve AUC. Reverting changes.
Training on augumented user 38881 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38881 AUC after training: 0.5
User 38881 does not improve AUC. Reverting changes.
Training on augumented user 18966 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18966 AUC after training: 0.5
User 18966 does not improve AUC. Reverting changes.
Training on augumented user 133992 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133992 AUC after training: 0.5
User 133992 does not improve AUC. Reverting changes.
Training on augumented user 55154 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55154 AUC after training: 0.5
User 55154 does not improve AUC. Reverting changes.
Training on augumented user 53910 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53910 AUC after training: 0.5
User 53910 does not improve AUC. Reverting changes.
Training on augumented user 87296 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87296 AUC after training: 0.5
User 87296 does not improve AUC. Reverting changes.
Training on augumented user 123217 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123217 AUC after training: 0.5
User 123217 does not improve AUC. Reverting changes.
Training on augumented user 102439 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102439 AUC after training: 0.5
User 102439 does not improve AUC. Reverting changes.
Training on augumented user 48384 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48384 AUC after training: 0.5
User 48384 does not improve AUC. Reverting changes.
Training on augumented user 17384 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17384 AUC after training: 0.5
User 17384 does not improve AUC. Reverting changes.
Training on augumented user 90152 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90152 AUC after training: 0.5
User 90152 does not improve AUC. Reverting changes.
Training on augumented user 11533 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11533 AUC after training: 0.5
User 11533 does not improve AUC. Reverting changes.
Training on augumented user 119948 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119948 AUC after training: 0.5
User 119948 does not improve AUC. Reverting changes.
Training on augumented user 18160 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18160 AUC after training: 0.5
User 18160 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:06:46.052623] start test user 89088 275/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:06:46.676950] start test user 89088 275/568 recall augumented users by random, augumented_users = [34690, 66109, 96128, 43031, 57612, 70795, 56436, 12899, 42479, 124895, 59467, 23447, 925, 51479, 57558, 130743, 124870, 62143, 47565, 76726, 12959, 44173, 122543, 17811, 134405, 1146, 12458, 31909, 4344, 47568, 9835, 88410, 103928, 128657, 35618, 31848, 67174, 47499, 66573, 111069, 44295, 126534, 9528, 89100, 96427, 63084, 36090, 25455, 69485, 107873]
[2024-12-02 20:06:46.693422] user = 89088 Cloud 275/568
[2024-12-02 20:06:46.713045] user = 89088 Local 275/568
[2024-12-02 20:06:46.853451] user = 89088 Local+ 275/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:06:48.252300] user = 89088 MPDA- 275/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.584423676012461
Training on augumented user 34690 0/50 current_auc = 0.584423676012461
User 34690 AUC after training: 0.5841121495327103
User 34690 does not improve AUC. Reverting changes.
Training on augumented user 66109 1/50 current_auc = 0.584423676012461
User 66109 AUC after training: 0.5834890965732088
User 66109 does not improve AUC. Reverting changes.
Training on augumented user 96128 2/50 current_auc = 0.584423676012461
User 96128 AUC after training: 0.5847352024922119
User 96128 improves AUC. Keeping the model.
Training on augumented user 43031 3/50 current_auc = 0.5847352024922119
User 43031 AUC after training: 0.584423676012461
User 43031 does not improve AUC. Reverting changes.
Training on augumented user 57612 4/50 current_auc = 0.5847352024922119
User 57612 AUC after training: 0.5838006230529595
User 57612 does not improve AUC. Reverting changes.
Training on augumented user 70795 5/50 current_auc = 0.5847352024922119
User 70795 AUC after training: 0.5850467289719627
User 70795 improves AUC. Keeping the model.
Training on augumented user 56436 6/50 current_auc = 0.5850467289719627
User 56436 AUC after training: 0.584423676012461
User 56436 does not improve AUC. Reverting changes.
Training on augumented user 12899 7/50 current_auc = 0.5850467289719627
User 12899 AUC after training: 0.584423676012461
User 12899 does not improve AUC. Reverting changes.
Training on augumented user 42479 8/50 current_auc = 0.5850467289719627
User 42479 AUC after training: 0.5866043613707166
User 42479 improves AUC. Keeping the model.
Training on augumented user 124895 9/50 current_auc = 0.5866043613707166
User 124895 AUC after training: 0.5853582554517134
User 124895 does not improve AUC. Reverting changes.
Training on augumented user 59467 10/50 current_auc = 0.5866043613707166
User 59467 AUC after training: 0.5866043613707166
User 59467 does not improve AUC. Reverting changes.
Training on augumented user 23447 11/50 current_auc = 0.5866043613707166
User 23447 AUC after training: 0.5862928348909657
User 23447 does not improve AUC. Reverting changes.
Training on augumented user 925 12/50 current_auc = 0.5866043613707166
User 925 AUC after training: 0.5869158878504673
User 925 improves AUC. Keeping the model.
Training on augumented user 51479 13/50 current_auc = 0.5869158878504673
User 51479 AUC after training: 0.5841121495327102
User 51479 does not improve AUC. Reverting changes.
Training on augumented user 57558 14/50 current_auc = 0.5869158878504673
User 57558 AUC after training: 0.584423676012461
User 57558 does not improve AUC. Reverting changes.
Training on augumented user 130743 15/50 current_auc = 0.5869158878504673
User 130743 AUC after training: 0.5862928348909657
User 130743 does not improve AUC. Reverting changes.
Training on augumented user 124870 16/50 current_auc = 0.5869158878504673
User 124870 AUC after training: 0.5878504672897196
User 124870 improves AUC. Keeping the model.
Training on augumented user 62143 17/50 current_auc = 0.5878504672897196
User 62143 AUC after training: 0.5878504672897197
User 62143 improves AUC. Keeping the model.
Training on augumented user 47565 18/50 current_auc = 0.5878504672897197
User 47565 AUC after training: 0.5881619937694704
User 47565 improves AUC. Keeping the model.
Training on augumented user 76726 19/50 current_auc = 0.5881619937694704
User 76726 AUC after training: 0.5878504672897196
User 76726 does not improve AUC. Reverting changes.
Training on augumented user 12959 20/50 current_auc = 0.5881619937694704
User 12959 AUC after training: 0.5878504672897196
User 12959 does not improve AUC. Reverting changes.
Training on augumented user 44173 21/50 current_auc = 0.5881619937694704
User 44173 AUC after training: 0.5881619937694704
User 44173 does not improve AUC. Reverting changes.
Training on augumented user 122543 22/50 current_auc = 0.5881619937694704
User 122543 AUC after training: 0.5875389408099689
User 122543 does not improve AUC. Reverting changes.
Training on augumented user 17811 23/50 current_auc = 0.5881619937694704
User 17811 AUC after training: 0.5862928348909657
User 17811 does not improve AUC. Reverting changes.
Training on augumented user 134405 24/50 current_auc = 0.5881619937694704
User 134405 AUC after training: 0.5853582554517134
User 134405 does not improve AUC. Reverting changes.
Training on augumented user 1146 25/50 current_auc = 0.5881619937694704
User 1146 AUC after training: 0.5878504672897196
User 1146 does not improve AUC. Reverting changes.
Training on augumented user 12458 26/50 current_auc = 0.5881619937694704
User 12458 AUC after training: 0.5884735202492212
User 12458 improves AUC. Keeping the model.
Training on augumented user 31909 27/50 current_auc = 0.5884735202492212
User 31909 AUC after training: 0.5881619937694704
User 31909 does not improve AUC. Reverting changes.
Training on augumented user 4344 28/50 current_auc = 0.5884735202492212
User 4344 AUC after training: 0.5881619937694704
User 4344 does not improve AUC. Reverting changes.
Training on augumented user 47568 29/50 current_auc = 0.5884735202492212
User 47568 AUC after training: 0.5878504672897197
User 47568 does not improve AUC. Reverting changes.
Training on augumented user 9835 30/50 current_auc = 0.5884735202492212
User 9835 AUC after training: 0.5884735202492212
User 9835 does not improve AUC. Reverting changes.
Training on augumented user 88410 31/50 current_auc = 0.5884735202492212
User 88410 AUC after training: 0.5872274143302181
User 88410 does not improve AUC. Reverting changes.
Training on augumented user 103928 32/50 current_auc = 0.5884735202492212
User 103928 AUC after training: 0.5881619937694704
User 103928 does not improve AUC. Reverting changes.
Training on augumented user 128657 33/50 current_auc = 0.5884735202492212
User 128657 AUC after training: 0.588785046728972
User 128657 improves AUC. Keeping the model.
Training on augumented user 35618 34/50 current_auc = 0.588785046728972
User 35618 AUC after training: 0.5875389408099689
User 35618 does not improve AUC. Reverting changes.
Training on augumented user 31848 35/50 current_auc = 0.588785046728972
User 31848 AUC after training: 0.5869158878504673
User 31848 does not improve AUC. Reverting changes.
Training on augumented user 67174 36/50 current_auc = 0.588785046728972
User 67174 AUC after training: 0.5884735202492213
User 67174 does not improve AUC. Reverting changes.
Training on augumented user 47499 37/50 current_auc = 0.588785046728972
User 47499 AUC after training: 0.5890965732087228
User 47499 improves AUC. Keeping the model.
Training on augumented user 66573 38/50 current_auc = 0.5890965732087228
User 66573 AUC after training: 0.5884735202492213
User 66573 does not improve AUC. Reverting changes.
Training on augumented user 111069 39/50 current_auc = 0.5890965732087228
User 111069 AUC after training: 0.5881619937694704
User 111069 does not improve AUC. Reverting changes.
Training on augumented user 44295 40/50 current_auc = 0.5890965732087228
User 44295 AUC after training: 0.5878504672897197
User 44295 does not improve AUC. Reverting changes.
Training on augumented user 126534 41/50 current_auc = 0.5890965732087228
User 126534 AUC after training: 0.5881619937694704
User 126534 does not improve AUC. Reverting changes.
Training on augumented user 9528 42/50 current_auc = 0.5890965732087228
User 9528 AUC after training: 0.5878504672897197
User 9528 does not improve AUC. Reverting changes.
Training on augumented user 89100 43/50 current_auc = 0.5890965732087228
User 89100 AUC after training: 0.5890965732087228
User 89100 does not improve AUC. Reverting changes.
Training on augumented user 96427 44/50 current_auc = 0.5890965732087228
User 96427 AUC after training: 0.588785046728972
User 96427 does not improve AUC. Reverting changes.
Training on augumented user 63084 45/50 current_auc = 0.5890965732087228
User 63084 AUC after training: 0.588785046728972
User 63084 does not improve AUC. Reverting changes.
Training on augumented user 36090 46/50 current_auc = 0.5890965732087228
User 36090 AUC after training: 0.588785046728972
User 36090 does not improve AUC. Reverting changes.
Training on augumented user 25455 47/50 current_auc = 0.5890965732087228
User 25455 AUC after training: 0.5875389408099689
User 25455 does not improve AUC. Reverting changes.
Training on augumented user 69485 48/50 current_auc = 0.5890965732087228
User 69485 AUC after training: 0.5884735202492213
User 69485 does not improve AUC. Reverting changes.
Training on augumented user 107873 49/50 current_auc = 0.5890965732087228
User 107873 AUC after training: 0.5884735202492213
User 107873 does not improve AUC. Reverting changes.
[2024-12-02 20:07:15.069782] start test user 89096 276/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:07:15.786038] start test user 89096 276/568 recall augumented users by random, augumented_users = [30947, 127951, 66520, 126068, 108812, 112406, 32683, 2947, 91950, 19377, 71828, 19782, 112191, 131868, 116984, 123771, 86865, 125250, 106298, 16215, 26187, 69357, 6597, 99434, 95453, 100579, 102528, 23052, 11603, 92103, 56423, 112939, 134897, 47320, 24290, 11471, 127556, 46212, 28362, 31069, 100075, 79262, 2390, 58590, 40270, 69919, 86384, 127062, 2389, 112442]
[2024-12-02 20:07:15.820885] user = 89096 Cloud 276/568
[2024-12-02 20:07:15.913771] user = 89096 Local 276/568
[2024-12-02 20:07:15.995789] user = 89096 Local+ 276/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:07:18.684580] user = 89096 MPDA- 276/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6754582199964411
Training on augumented user 30947 0/50 current_auc = 0.6754582199964411
User 30947 AUC after training: 0.6751785850471567
User 30947 does not improve AUC. Reverting changes.
Training on augumented user 127951 1/50 current_auc = 0.6754582199964411
User 127951 AUC after training: 0.6753787782494851
User 127951 does not improve AUC. Reverting changes.
Training on augumented user 66520 2/50 current_auc = 0.6754582199964411
User 66520 AUC after training: 0.6753374685410682
User 66520 does not improve AUC. Reverting changes.
Training on augumented user 126068 3/50 current_auc = 0.6754582199964411
User 126068 AUC after training: 0.6756584131987695
User 126068 improves AUC. Keeping the model.
Training on augumented user 108812 4/50 current_auc = 0.6756584131987695
User 108812 AUC after training: 0.6757696316445077
User 108812 improves AUC. Keeping the model.
Training on augumented user 112406 5/50 current_auc = 0.6757696316445077
User 112406 AUC after training: 0.6758808500902458
User 112406 improves AUC. Keeping the model.
Training on augumented user 32683 6/50 current_auc = 0.6758808500902458
User 32683 AUC after training: 0.6759221597986629
User 32683 improves AUC. Keeping the model.
Training on augumented user 2947 7/50 current_auc = 0.6759221597986629
User 2947 AUC after training: 0.675553550092788
User 2947 does not improve AUC. Reverting changes.
Training on augumented user 91950 8/50 current_auc = 0.6759221597986629
User 91950 AUC after training: 0.6760651549431833
User 91950 improves AUC. Keeping the model.
Training on augumented user 19377 9/50 current_auc = 0.6760651549431833
User 19377 AUC after training: 0.6761668403792866
User 19377 improves AUC. Keeping the model.
Training on augumented user 71828 10/50 current_auc = 0.6761668403792866
User 71828 AUC after training: 0.675305691842286
User 71828 does not improve AUC. Reverting changes.
Training on augumented user 19782 11/50 current_auc = 0.6761668403792866
User 19782 AUC after training: 0.6766975112489513
User 19782 improves AUC. Keeping the model.
Training on augumented user 112191 12/50 current_auc = 0.6766975112489513
User 112191 AUC after training: 0.677034344256044
User 112191 improves AUC. Keeping the model.
Training on augumented user 131868 13/50 current_auc = 0.677034344256044
User 131868 AUC after training: 0.6767388209573684
User 131868 does not improve AUC. Reverting changes.
Training on augumented user 116984 14/50 current_auc = 0.677034344256044
User 116984 AUC after training: 0.6753819559193633
User 116984 does not improve AUC. Reverting changes.
Training on augumented user 123771 15/50 current_auc = 0.677034344256044
User 123771 AUC after training: 0.6770597656150698
User 123771 improves AUC. Keeping the model.
Training on augumented user 86865 16/50 current_auc = 0.6770597656150698
User 86865 AUC after training: 0.6769199481404276
User 86865 does not improve AUC. Reverting changes.
Training on augumented user 125250 17/50 current_auc = 0.6770597656150698
User 125250 AUC after training: 0.6777016549304726
User 125250 improves AUC. Keeping the model.
Training on augumented user 106298 18/50 current_auc = 0.6777016549304726
User 106298 AUC after training: 0.6777461423087678
User 106298 improves AUC. Keeping the model.
Training on augumented user 16215 19/50 current_auc = 0.6777461423087678
User 16215 AUC after training: 0.6778160510460889
User 16215 improves AUC. Keeping the model.
Training on augumented user 26187 20/50 current_auc = 0.6778160510460889
User 26187 AUC after training: 0.6777969850268195
User 26187 does not improve AUC. Reverting changes.
Training on augumented user 69357 21/50 current_auc = 0.6778160510460889
User 69357 AUC after training: 0.6775364160968045
User 69357 does not improve AUC. Reverting changes.
Training on augumented user 6597 22/50 current_auc = 0.6778160510460889
User 6597 AUC after training: 0.6763670335816152
User 6597 does not improve AUC. Reverting changes.
Training on augumented user 99434 23/50 current_auc = 0.6778160510460889
User 99434 AUC after training: 0.6777270762894985
User 99434 does not improve AUC. Reverting changes.
Training on augumented user 95453 24/50 current_auc = 0.6778160510460889
User 95453 AUC after training: 0.6778065180364543
User 95453 does not improve AUC. Reverting changes.
Training on augumented user 100579 25/50 current_auc = 0.6778160510460889
User 100579 AUC after training: 0.677898670462923
User 100579 improves AUC. Keeping the model.
Training on augumented user 102528 26/50 current_auc = 0.677898670462923
User 102528 AUC after training: 0.6779209141520707
User 102528 improves AUC. Keeping the model.
Training on augumented user 23052 27/50 current_auc = 0.6779209141520707
User 23052 AUC after training: 0.6773203345450849
User 23052 does not improve AUC. Reverting changes.
Training on augumented user 11603 28/50 current_auc = 0.6779209141520707
User 11603 AUC after training: 0.6774823957088746
User 11603 does not improve AUC. Reverting changes.
Training on augumented user 92103 29/50 current_auc = 0.6779209141520707
User 92103 AUC after training: 0.6775936141546126
User 92103 does not improve AUC. Reverting changes.
Training on augumented user 56423 30/50 current_auc = 0.6779209141520707
User 56423 AUC after training: 0.6778700714340189
User 56423 does not improve AUC. Reverting changes.
Training on augumented user 112939 31/50 current_auc = 0.6779209141520707
User 112939 AUC after training: 0.6777143656099855
User 112939 does not improve AUC. Reverting changes.
Training on augumented user 134897 32/50 current_auc = 0.6779209141520707
User 134897 AUC after training: 0.6779177364821923
User 134897 does not improve AUC. Reverting changes.
Training on augumented user 47320 33/50 current_auc = 0.6779209141520707
User 47320 AUC after training: 0.6779082034725576
User 47320 does not improve AUC. Reverting changes.
Training on augumented user 24290 34/50 current_auc = 0.6779209141520707
User 24290 AUC after training: 0.6777016549304726
User 24290 does not improve AUC. Reverting changes.
Training on augumented user 11471 35/50 current_auc = 0.6779209141520707
User 11471 AUC after training: 0.6777620306581589
User 11471 does not improve AUC. Reverting changes.
Training on augumented user 127556 36/50 current_auc = 0.6779209141520707
User 127556 AUC after training: 0.6773457559041106
User 127556 does not improve AUC. Reverting changes.
Training on augumented user 46212 37/50 current_auc = 0.6779209141520707
User 46212 AUC after training: 0.6776571675521774
User 46212 does not improve AUC. Reverting changes.
Training on augumented user 28362 38/50 current_auc = 0.6779209141520707
User 28362 AUC after training: 0.6778160510460889
User 28362 does not improve AUC. Reverting changes.
Training on augumented user 31069 39/50 current_auc = 0.6779209141520707
User 31069 AUC after training: 0.6778668937641406
User 31069 does not improve AUC. Reverting changes.
Training on augumented user 100075 40/50 current_auc = 0.6779209141520707
User 100075 AUC after training: 0.6780480209471998
User 100075 improves AUC. Keeping the model.
Training on augumented user 79262 41/50 current_auc = 0.6780480209471998
User 79262 AUC after training: 0.6778478277448712
User 79262 does not improve AUC. Reverting changes.
Training on augumented user 2390 42/50 current_auc = 0.6780480209471998
User 2390 AUC after training: 0.6781655947326943
User 2390 improves AUC. Keeping the model.
Training on augumented user 58590 43/50 current_auc = 0.6781655947326943
User 58590 AUC after training: 0.6779908228893917
User 58590 does not improve AUC. Reverting changes.
Training on augumented user 40270 44/50 current_auc = 0.6781655947326943
User 40270 AUC after training: 0.6781369957037904
User 40270 does not improve AUC. Reverting changes.
Training on augumented user 69919 45/50 current_auc = 0.6781655947326943
User 69919 AUC after training: 0.6780257772580522
User 69919 does not improve AUC. Reverting changes.
Training on augumented user 86384 46/50 current_auc = 0.6781655947326943
User 86384 AUC after training: 0.6780289549279305
User 86384 does not improve AUC. Reverting changes.
Training on augumented user 127062 47/50 current_auc = 0.6781655947326943
User 127062 AUC after training: 0.6780511986170781
User 127062 does not improve AUC. Reverting changes.
Training on augumented user 2389 48/50 current_auc = 0.6781655947326943
User 2389 AUC after training: 0.6780734423062257
User 2389 does not improve AUC. Reverting changes.
Training on augumented user 112442 49/50 current_auc = 0.6781655947326943
User 112442 AUC after training: 0.6781687724025727
User 112442 improves AUC. Keeping the model.
[2024-12-02 20:07:51.216737] start test user 89128 277/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:07:51.631060] start test user 89128 277/568 recall augumented users by random, augumented_users = [85701, 65580, 110856, 17640, 33663, 90524, 57987, 65442, 48764, 77071, 100080, 122454, 37231, 133519, 21673, 137303, 97624, 61162, 16600, 69882, 53214, 71764, 6469, 52671, 1290, 86924, 65109, 125419, 90332, 4385, 131664, 1200, 3463, 108356, 99810, 37679, 72400, 33332, 49706, 13219, 49012, 75403, 121759, 54241, 71932, 82092, 79303, 45255, 89365, 84491]
[2024-12-02 20:07:51.646475] user = 89128 Cloud 277/568
[2024-12-02 20:07:51.673502] user = 89128 Local 277/568
[2024-12-02 20:07:51.765901] user = 89128 Local+ 277/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:07:53.548336] user = 89128 MPDA- 277/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5528368794326242
Training on augumented user 85701 0/50 current_auc = 0.5528368794326242
User 85701 AUC after training: 0.5528368794326242
User 85701 does not improve AUC. Reverting changes.
Training on augumented user 65580 1/50 current_auc = 0.5528368794326242
User 65580 AUC after training: 0.5528368794326242
User 65580 does not improve AUC. Reverting changes.
Training on augumented user 110856 2/50 current_auc = 0.5528368794326242
User 110856 AUC after training: 0.5531914893617021
User 110856 improves AUC. Keeping the model.
Training on augumented user 17640 3/50 current_auc = 0.5531914893617021
User 17640 AUC after training: 0.5524822695035461
User 17640 does not improve AUC. Reverting changes.
Training on augumented user 33663 4/50 current_auc = 0.5531914893617021
User 33663 AUC after training: 0.5528368794326242
User 33663 does not improve AUC. Reverting changes.
Training on augumented user 90524 5/50 current_auc = 0.5531914893617021
User 90524 AUC after training: 0.5531914893617021
User 90524 does not improve AUC. Reverting changes.
Training on augumented user 57987 6/50 current_auc = 0.5531914893617021
User 57987 AUC after training: 0.5528368794326242
User 57987 does not improve AUC. Reverting changes.
Training on augumented user 65442 7/50 current_auc = 0.5531914893617021
User 65442 AUC after training: 0.5531914893617021
User 65442 does not improve AUC. Reverting changes.
Training on augumented user 48764 8/50 current_auc = 0.5531914893617021
User 48764 AUC after training: 0.5528368794326242
User 48764 does not improve AUC. Reverting changes.
Training on augumented user 77071 9/50 current_auc = 0.5531914893617021
User 77071 AUC after training: 0.5531914893617021
User 77071 does not improve AUC. Reverting changes.
Training on augumented user 100080 10/50 current_auc = 0.5531914893617021
User 100080 AUC after training: 0.5524822695035461
User 100080 does not improve AUC. Reverting changes.
Training on augumented user 122454 11/50 current_auc = 0.5531914893617021
User 122454 AUC after training: 0.5539007092198581
User 122454 improves AUC. Keeping the model.
Training on augumented user 37231 12/50 current_auc = 0.5539007092198581
User 37231 AUC after training: 0.5535460992907801
User 37231 does not improve AUC. Reverting changes.
Training on augumented user 133519 13/50 current_auc = 0.5539007092198581
User 133519 AUC after training: 0.5531914893617021
User 133519 does not improve AUC. Reverting changes.
Training on augumented user 21673 14/50 current_auc = 0.5539007092198581
User 21673 AUC after training: 0.5539007092198581
User 21673 does not improve AUC. Reverting changes.
Training on augumented user 137303 15/50 current_auc = 0.5539007092198581
User 137303 AUC after training: 0.5531914893617021
User 137303 does not improve AUC. Reverting changes.
Training on augumented user 97624 16/50 current_auc = 0.5539007092198581
User 97624 AUC after training: 0.5531914893617021
User 97624 does not improve AUC. Reverting changes.
Training on augumented user 61162 17/50 current_auc = 0.5539007092198581
User 61162 AUC after training: 0.5542553191489361
User 61162 improves AUC. Keeping the model.
Training on augumented user 16600 18/50 current_auc = 0.5542553191489361
User 16600 AUC after training: 0.5535460992907801
User 16600 does not improve AUC. Reverting changes.
Training on augumented user 69882 19/50 current_auc = 0.5542553191489361
User 69882 AUC after training: 0.5542553191489361
User 69882 does not improve AUC. Reverting changes.
Training on augumented user 53214 20/50 current_auc = 0.5542553191489361
User 53214 AUC after training: 0.5539007092198581
User 53214 does not improve AUC. Reverting changes.
Training on augumented user 71764 21/50 current_auc = 0.5542553191489361
User 71764 AUC after training: 0.55
User 71764 does not improve AUC. Reverting changes.
Training on augumented user 6469 22/50 current_auc = 0.5542553191489361
User 6469 AUC after training: 0.5535460992907801
User 6469 does not improve AUC. Reverting changes.
Training on augumented user 52671 23/50 current_auc = 0.5542553191489361
User 52671 AUC after training: 0.5539007092198581
User 52671 does not improve AUC. Reverting changes.
Training on augumented user 1290 24/50 current_auc = 0.5542553191489361
User 1290 AUC after training: 0.5542553191489361
User 1290 does not improve AUC. Reverting changes.
Training on augumented user 86924 25/50 current_auc = 0.5542553191489361
User 86924 AUC after training: 0.5542553191489361
User 86924 does not improve AUC. Reverting changes.
Training on augumented user 65109 26/50 current_auc = 0.5542553191489361
User 65109 AUC after training: 0.5546099290780142
User 65109 improves AUC. Keeping the model.
Training on augumented user 125419 27/50 current_auc = 0.5546099290780142
User 125419 AUC after training: 0.5531914893617021
User 125419 does not improve AUC. Reverting changes.
Training on augumented user 90332 28/50 current_auc = 0.5546099290780142
User 90332 AUC after training: 0.5542553191489361
User 90332 does not improve AUC. Reverting changes.
Training on augumented user 4385 29/50 current_auc = 0.5546099290780142
User 4385 AUC after training: 0.5539007092198581
User 4385 does not improve AUC. Reverting changes.
Training on augumented user 131664 30/50 current_auc = 0.5546099290780142
User 131664 AUC after training: 0.5542553191489362
User 131664 does not improve AUC. Reverting changes.
Training on augumented user 1200 31/50 current_auc = 0.5546099290780142
User 1200 AUC after training: 0.5499999999999999
User 1200 does not improve AUC. Reverting changes.
Training on augumented user 3463 32/50 current_auc = 0.5546099290780142
User 3463 AUC after training: 0.5539007092198581
User 3463 does not improve AUC. Reverting changes.
Training on augumented user 108356 33/50 current_auc = 0.5546099290780142
User 108356 AUC after training: 0.5546099290780142
User 108356 does not improve AUC. Reverting changes.
Training on augumented user 99810 34/50 current_auc = 0.5546099290780142
User 99810 AUC after training: 0.553191489361702
User 99810 does not improve AUC. Reverting changes.
Training on augumented user 37679 35/50 current_auc = 0.5546099290780142
User 37679 AUC after training: 0.5535460992907801
User 37679 does not improve AUC. Reverting changes.
Training on augumented user 72400 36/50 current_auc = 0.5546099290780142
User 72400 AUC after training: 0.5546099290780142
User 72400 does not improve AUC. Reverting changes.
Training on augumented user 33332 37/50 current_auc = 0.5546099290780142
User 33332 AUC after training: 0.5546099290780142
User 33332 does not improve AUC. Reverting changes.
Training on augumented user 49706 38/50 current_auc = 0.5546099290780142
User 49706 AUC after training: 0.5539007092198581
User 49706 does not improve AUC. Reverting changes.
Training on augumented user 13219 39/50 current_auc = 0.5546099290780142
User 13219 AUC after training: 0.5542553191489361
User 13219 does not improve AUC. Reverting changes.
Training on augumented user 49012 40/50 current_auc = 0.5546099290780142
User 49012 AUC after training: 0.5539007092198581
User 49012 does not improve AUC. Reverting changes.
Training on augumented user 75403 41/50 current_auc = 0.5546099290780142
User 75403 AUC after training: 0.5539007092198581
User 75403 does not improve AUC. Reverting changes.
Training on augumented user 121759 42/50 current_auc = 0.5546099290780142
User 121759 AUC after training: 0.5542553191489362
User 121759 does not improve AUC. Reverting changes.
Training on augumented user 54241 43/50 current_auc = 0.5546099290780142
User 54241 AUC after training: 0.5539007092198581
User 54241 does not improve AUC. Reverting changes.
Training on augumented user 71932 44/50 current_auc = 0.5546099290780142
User 71932 AUC after training: 0.5517730496453901
User 71932 does not improve AUC. Reverting changes.
Training on augumented user 82092 45/50 current_auc = 0.5546099290780142
User 82092 AUC after training: 0.5542553191489361
User 82092 does not improve AUC. Reverting changes.
Training on augumented user 79303 46/50 current_auc = 0.5546099290780142
User 79303 AUC after training: 0.5539007092198582
User 79303 does not improve AUC. Reverting changes.
Training on augumented user 45255 47/50 current_auc = 0.5546099290780142
User 45255 AUC after training: 0.5535460992907801
User 45255 does not improve AUC. Reverting changes.
Training on augumented user 89365 48/50 current_auc = 0.5546099290780142
User 89365 AUC after training: 0.5542553191489362
User 89365 does not improve AUC. Reverting changes.
Training on augumented user 84491 49/50 current_auc = 0.5546099290780142
User 84491 AUC after training: 0.5542553191489362
User 84491 does not improve AUC. Reverting changes.
[2024-12-02 20:08:22.028893] start test user 89180 278/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:08:22.425124] start test user 89180 278/568 recall augumented users by random, augumented_users = [123947, 30309, 69203, 107853, 87148, 134606, 52235, 2930, 36922, 20217, 62978, 109991, 93199, 74847, 129344, 46856, 15547, 137176, 65199, 1831, 113316, 6053, 17091, 136794, 45708, 123779, 60422, 5454, 112969, 134810, 38917, 133176, 119255, 80928, 49735, 122926, 121073, 112088, 7609, 66456, 114827, 5271, 122774, 28639, 11565, 94069, 66285, 5248, 6638, 81787]
[2024-12-02 20:08:22.439425] user = 89180 Cloud 278/568
[2024-12-02 20:08:22.460097] user = 89180 Local 278/568
[2024-12-02 20:08:22.493392] user = 89180 Local+ 278/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:08:24.065832] user = 89180 MPDA- 278/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8333333333333334
Training on augumented user 123947 0/50 current_auc = 0.8333333333333334
User 123947 AUC after training: 0.8333333333333334
User 123947 does not improve AUC. Reverting changes.
Training on augumented user 30309 1/50 current_auc = 0.8333333333333334
User 30309 AUC after training: 0.8333333333333334
User 30309 does not improve AUC. Reverting changes.
Training on augumented user 69203 2/50 current_auc = 0.8333333333333334
User 69203 AUC after training: 0.8333333333333334
User 69203 does not improve AUC. Reverting changes.
Training on augumented user 107853 3/50 current_auc = 0.8333333333333334
User 107853 AUC after training: 0.8333333333333334
User 107853 does not improve AUC. Reverting changes.
Training on augumented user 87148 4/50 current_auc = 0.8333333333333334
User 87148 AUC after training: 0.8333333333333334
User 87148 does not improve AUC. Reverting changes.
Training on augumented user 134606 5/50 current_auc = 0.8333333333333334
User 134606 AUC after training: 0.8333333333333334
User 134606 does not improve AUC. Reverting changes.
Training on augumented user 52235 6/50 current_auc = 0.8333333333333334
User 52235 AUC after training: 0.8333333333333334
User 52235 does not improve AUC. Reverting changes.
Training on augumented user 2930 7/50 current_auc = 0.8333333333333334
User 2930 AUC after training: 0.8333333333333334
User 2930 does not improve AUC. Reverting changes.
Training on augumented user 36922 8/50 current_auc = 0.8333333333333334
User 36922 AUC after training: 0.8333333333333334
User 36922 does not improve AUC. Reverting changes.
Training on augumented user 20217 9/50 current_auc = 0.8333333333333334
User 20217 AUC after training: 0.8333333333333334
User 20217 does not improve AUC. Reverting changes.
Training on augumented user 62978 10/50 current_auc = 0.8333333333333334
User 62978 AUC after training: 0.8333333333333334
User 62978 does not improve AUC. Reverting changes.
Training on augumented user 109991 11/50 current_auc = 0.8333333333333334
User 109991 AUC after training: 0.8333333333333334
User 109991 does not improve AUC. Reverting changes.
Training on augumented user 93199 12/50 current_auc = 0.8333333333333334
User 93199 AUC after training: 0.8333333333333334
User 93199 does not improve AUC. Reverting changes.
Training on augumented user 74847 13/50 current_auc = 0.8333333333333334
User 74847 AUC after training: 0.8333333333333334
User 74847 does not improve AUC. Reverting changes.
Training on augumented user 129344 14/50 current_auc = 0.8333333333333334
User 129344 AUC after training: 0.8333333333333334
User 129344 does not improve AUC. Reverting changes.
Training on augumented user 46856 15/50 current_auc = 0.8333333333333334
User 46856 AUC after training: 0.8333333333333334
User 46856 does not improve AUC. Reverting changes.
Training on augumented user 15547 16/50 current_auc = 0.8333333333333334
User 15547 AUC after training: 0.8333333333333334
User 15547 does not improve AUC. Reverting changes.
Training on augumented user 137176 17/50 current_auc = 0.8333333333333334
User 137176 AUC after training: 0.8333333333333334
User 137176 does not improve AUC. Reverting changes.
Training on augumented user 65199 18/50 current_auc = 0.8333333333333334
User 65199 AUC after training: 0.8333333333333334
User 65199 does not improve AUC. Reverting changes.
Training on augumented user 1831 19/50 current_auc = 0.8333333333333334
User 1831 AUC after training: 0.8333333333333334
User 1831 does not improve AUC. Reverting changes.
Training on augumented user 113316 20/50 current_auc = 0.8333333333333334
User 113316 AUC after training: 0.8333333333333334
User 113316 does not improve AUC. Reverting changes.
Training on augumented user 6053 21/50 current_auc = 0.8333333333333334
User 6053 AUC after training: 0.8333333333333334
User 6053 does not improve AUC. Reverting changes.
Training on augumented user 17091 22/50 current_auc = 0.8333333333333334
User 17091 AUC after training: 0.8333333333333334
User 17091 does not improve AUC. Reverting changes.
Training on augumented user 136794 23/50 current_auc = 0.8333333333333334
User 136794 AUC after training: 0.8333333333333334
User 136794 does not improve AUC. Reverting changes.
Training on augumented user 45708 24/50 current_auc = 0.8333333333333334
User 45708 AUC after training: 0.8333333333333334
User 45708 does not improve AUC. Reverting changes.
Training on augumented user 123779 25/50 current_auc = 0.8333333333333334
User 123779 AUC after training: 0.8333333333333334
User 123779 does not improve AUC. Reverting changes.
Training on augumented user 60422 26/50 current_auc = 0.8333333333333334
User 60422 AUC after training: 0.8333333333333334
User 60422 does not improve AUC. Reverting changes.
Training on augumented user 5454 27/50 current_auc = 0.8333333333333334
User 5454 AUC after training: 0.8333333333333334
User 5454 does not improve AUC. Reverting changes.
Training on augumented user 112969 28/50 current_auc = 0.8333333333333334
User 112969 AUC after training: 0.8333333333333334
User 112969 does not improve AUC. Reverting changes.
Training on augumented user 134810 29/50 current_auc = 0.8333333333333334
User 134810 AUC after training: 0.8333333333333334
User 134810 does not improve AUC. Reverting changes.
Training on augumented user 38917 30/50 current_auc = 0.8333333333333334
User 38917 AUC after training: 0.8333333333333334
User 38917 does not improve AUC. Reverting changes.
Training on augumented user 133176 31/50 current_auc = 0.8333333333333334
User 133176 AUC after training: 0.8333333333333334
User 133176 does not improve AUC. Reverting changes.
Training on augumented user 119255 32/50 current_auc = 0.8333333333333334
User 119255 AUC after training: 0.8333333333333334
User 119255 does not improve AUC. Reverting changes.
Training on augumented user 80928 33/50 current_auc = 0.8333333333333334
User 80928 AUC after training: 0.8333333333333334
User 80928 does not improve AUC. Reverting changes.
Training on augumented user 49735 34/50 current_auc = 0.8333333333333334
User 49735 AUC after training: 0.8333333333333334
User 49735 does not improve AUC. Reverting changes.
Training on augumented user 122926 35/50 current_auc = 0.8333333333333334
User 122926 AUC after training: 0.8333333333333334
User 122926 does not improve AUC. Reverting changes.
Training on augumented user 121073 36/50 current_auc = 0.8333333333333334
User 121073 AUC after training: 0.8333333333333334
User 121073 does not improve AUC. Reverting changes.
Training on augumented user 112088 37/50 current_auc = 0.8333333333333334
User 112088 AUC after training: 0.8333333333333334
User 112088 does not improve AUC. Reverting changes.
Training on augumented user 7609 38/50 current_auc = 0.8333333333333334
User 7609 AUC after training: 0.8333333333333334
User 7609 does not improve AUC. Reverting changes.
Training on augumented user 66456 39/50 current_auc = 0.8333333333333334
User 66456 AUC after training: 0.8333333333333334
User 66456 does not improve AUC. Reverting changes.
Training on augumented user 114827 40/50 current_auc = 0.8333333333333334
User 114827 AUC after training: 0.8333333333333334
User 114827 does not improve AUC. Reverting changes.
Training on augumented user 5271 41/50 current_auc = 0.8333333333333334
User 5271 AUC after training: 0.8333333333333334
User 5271 does not improve AUC. Reverting changes.
Training on augumented user 122774 42/50 current_auc = 0.8333333333333334
User 122774 AUC after training: 0.8333333333333334
User 122774 does not improve AUC. Reverting changes.
Training on augumented user 28639 43/50 current_auc = 0.8333333333333334
User 28639 AUC after training: 0.8333333333333334
User 28639 does not improve AUC. Reverting changes.
Training on augumented user 11565 44/50 current_auc = 0.8333333333333334
User 11565 AUC after training: 0.8333333333333334
User 11565 does not improve AUC. Reverting changes.
Training on augumented user 94069 45/50 current_auc = 0.8333333333333334
User 94069 AUC after training: 0.8333333333333334
User 94069 does not improve AUC. Reverting changes.
Training on augumented user 66285 46/50 current_auc = 0.8333333333333334
User 66285 AUC after training: 0.8333333333333334
User 66285 does not improve AUC. Reverting changes.
Training on augumented user 5248 47/50 current_auc = 0.8333333333333334
User 5248 AUC after training: 0.8333333333333334
User 5248 does not improve AUC. Reverting changes.
Training on augumented user 6638 48/50 current_auc = 0.8333333333333334
User 6638 AUC after training: 0.8333333333333334
User 6638 does not improve AUC. Reverting changes.
Training on augumented user 81787 49/50 current_auc = 0.8333333333333334
User 81787 AUC after training: 0.8333333333333334
User 81787 does not improve AUC. Reverting changes.
[2024-12-02 20:08:54.308740] start test user 89209 279/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:08:54.952870] start test user 89209 279/568 recall augumented users by random, augumented_users = [19581, 39385, 134933, 1237, 126086, 11645, 20211, 95337, 40521, 1005, 127392, 102076, 32198, 68455, 87233, 94724, 20439, 125779, 123998, 84075, 12740, 56818, 132128, 69290, 28850, 37936, 134549, 135262, 117027, 34619, 87116, 131224, 90424, 85898, 52078, 77907, 87453, 134338, 70080, 100189, 38036, 87696, 67096, 56673, 124050, 58383, 104115, 59146, 118042, 11163]
[2024-12-02 20:08:54.967958] user = 89209 Cloud 279/568
[2024-12-02 20:08:55.001624] user = 89209 Local 279/568
[2024-12-02 20:08:55.118781] user = 89209 Local+ 279/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:08:57.565916] user = 89209 MPDA- 279/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6644230769230769
Training on augumented user 19581 0/50 current_auc = 0.6644230769230769
User 19581 AUC after training: 0.6637820512820513
User 19581 does not improve AUC. Reverting changes.
Training on augumented user 39385 1/50 current_auc = 0.6644230769230769
User 39385 AUC after training: 0.6650641025641025
User 39385 improves AUC. Keeping the model.
Training on augumented user 134933 2/50 current_auc = 0.6650641025641025
User 134933 AUC after training: 0.6631410256410256
User 134933 does not improve AUC. Reverting changes.
Training on augumented user 1237 3/50 current_auc = 0.6650641025641025
User 1237 AUC after training: 0.6650641025641025
User 1237 does not improve AUC. Reverting changes.
Training on augumented user 126086 4/50 current_auc = 0.6650641025641025
User 126086 AUC after training: 0.6650641025641025
User 126086 does not improve AUC. Reverting changes.
Training on augumented user 11645 5/50 current_auc = 0.6650641025641025
User 11645 AUC after training: 0.6644230769230769
User 11645 does not improve AUC. Reverting changes.
Training on augumented user 20211 6/50 current_auc = 0.6650641025641025
User 20211 AUC after training: 0.6644230769230769
User 20211 does not improve AUC. Reverting changes.
Training on augumented user 95337 7/50 current_auc = 0.6650641025641025
User 95337 AUC after training: 0.6644230769230769
User 95337 does not improve AUC. Reverting changes.
Training on augumented user 40521 8/50 current_auc = 0.6650641025641025
User 40521 AUC after training: 0.6637820512820514
User 40521 does not improve AUC. Reverting changes.
Training on augumented user 1005 9/50 current_auc = 0.6650641025641025
User 1005 AUC after training: 0.6663461538461538
User 1005 improves AUC. Keeping the model.
Training on augumented user 127392 10/50 current_auc = 0.6663461538461538
User 127392 AUC after training: 0.6644230769230769
User 127392 does not improve AUC. Reverting changes.
Training on augumented user 102076 11/50 current_auc = 0.6663461538461538
User 102076 AUC after training: 0.6663461538461538
User 102076 does not improve AUC. Reverting changes.
Training on augumented user 32198 12/50 current_auc = 0.6663461538461538
User 32198 AUC after training: 0.6663461538461538
User 32198 does not improve AUC. Reverting changes.
Training on augumented user 68455 13/50 current_auc = 0.6663461538461538
User 68455 AUC after training: 0.6637820512820513
User 68455 does not improve AUC. Reverting changes.
Training on augumented user 87233 14/50 current_auc = 0.6663461538461538
User 87233 AUC after training: 0.6637820512820513
User 87233 does not improve AUC. Reverting changes.
Training on augumented user 94724 15/50 current_auc = 0.6663461538461538
User 94724 AUC after training: 0.6657051282051282
User 94724 does not improve AUC. Reverting changes.
Training on augumented user 20439 16/50 current_auc = 0.6663461538461538
User 20439 AUC after training: 0.6657051282051282
User 20439 does not improve AUC. Reverting changes.
Training on augumented user 125779 17/50 current_auc = 0.6663461538461538
User 125779 AUC after training: 0.6644230769230769
User 125779 does not improve AUC. Reverting changes.
Training on augumented user 123998 18/50 current_auc = 0.6663461538461538
User 123998 AUC after training: 0.6650641025641025
User 123998 does not improve AUC. Reverting changes.
Training on augumented user 84075 19/50 current_auc = 0.6663461538461538
User 84075 AUC after training: 0.6644230769230769
User 84075 does not improve AUC. Reverting changes.
Training on augumented user 12740 20/50 current_auc = 0.6663461538461538
User 12740 AUC after training: 0.664423076923077
User 12740 does not improve AUC. Reverting changes.
Training on augumented user 56818 21/50 current_auc = 0.6663461538461538
User 56818 AUC after training: 0.6612179487179487
User 56818 does not improve AUC. Reverting changes.
Training on augumented user 132128 22/50 current_auc = 0.6663461538461538
User 132128 AUC after training: 0.6657051282051282
User 132128 does not improve AUC. Reverting changes.
Training on augumented user 69290 23/50 current_auc = 0.6663461538461538
User 69290 AUC after training: 0.6650641025641025
User 69290 does not improve AUC. Reverting changes.
Training on augumented user 28850 24/50 current_auc = 0.6663461538461538
User 28850 AUC after training: 0.6657051282051282
User 28850 does not improve AUC. Reverting changes.
Training on augumented user 37936 25/50 current_auc = 0.6663461538461538
User 37936 AUC after training: 0.6644230769230769
User 37936 does not improve AUC. Reverting changes.
Training on augumented user 134549 26/50 current_auc = 0.6663461538461538
User 134549 AUC after training: 0.6644230769230769
User 134549 does not improve AUC. Reverting changes.
Training on augumented user 135262 27/50 current_auc = 0.6663461538461538
User 135262 AUC after training: 0.6657051282051282
User 135262 does not improve AUC. Reverting changes.
Training on augumented user 117027 28/50 current_auc = 0.6663461538461538
User 117027 AUC after training: 0.6644230769230769
User 117027 does not improve AUC. Reverting changes.
Training on augumented user 34619 29/50 current_auc = 0.6663461538461538
User 34619 AUC after training: 0.6644230769230769
User 34619 does not improve AUC. Reverting changes.
Training on augumented user 87116 30/50 current_auc = 0.6663461538461538
User 87116 AUC after training: 0.6644230769230769
User 87116 does not improve AUC. Reverting changes.
Training on augumented user 131224 31/50 current_auc = 0.6663461538461538
User 131224 AUC after training: 0.6644230769230769
User 131224 does not improve AUC. Reverting changes.
Training on augumented user 90424 32/50 current_auc = 0.6663461538461538
User 90424 AUC after training: 0.6625
User 90424 does not improve AUC. Reverting changes.
Training on augumented user 85898 33/50 current_auc = 0.6663461538461538
User 85898 AUC after training: 0.6637820512820514
User 85898 does not improve AUC. Reverting changes.
Training on augumented user 52078 34/50 current_auc = 0.6663461538461538
User 52078 AUC after training: 0.664423076923077
User 52078 does not improve AUC. Reverting changes.
Training on augumented user 77907 35/50 current_auc = 0.6663461538461538
User 77907 AUC after training: 0.6644230769230769
User 77907 does not improve AUC. Reverting changes.
Training on augumented user 87453 36/50 current_auc = 0.6663461538461538
User 87453 AUC after training: 0.6650641025641025
User 87453 does not improve AUC. Reverting changes.
Training on augumented user 134338 37/50 current_auc = 0.6663461538461538
User 134338 AUC after training: 0.6650641025641025
User 134338 does not improve AUC. Reverting changes.
Training on augumented user 70080 38/50 current_auc = 0.6663461538461538
User 70080 AUC after training: 0.6631410256410256
User 70080 does not improve AUC. Reverting changes.
Training on augumented user 100189 39/50 current_auc = 0.6663461538461538
User 100189 AUC after training: 0.6631410256410256
User 100189 does not improve AUC. Reverting changes.
Training on augumented user 38036 40/50 current_auc = 0.6663461538461538
User 38036 AUC after training: 0.6637820512820513
User 38036 does not improve AUC. Reverting changes.
Training on augumented user 87696 41/50 current_auc = 0.6663461538461538
User 87696 AUC after training: 0.6644230769230769
User 87696 does not improve AUC. Reverting changes.
Training on augumented user 67096 42/50 current_auc = 0.6663461538461538
User 67096 AUC after training: 0.6650641025641025
User 67096 does not improve AUC. Reverting changes.
Training on augumented user 56673 43/50 current_auc = 0.6663461538461538
User 56673 AUC after training: 0.6644230769230769
User 56673 does not improve AUC. Reverting changes.
Training on augumented user 124050 44/50 current_auc = 0.6663461538461538
User 124050 AUC after training: 0.6644230769230769
User 124050 does not improve AUC. Reverting changes.
Training on augumented user 58383 45/50 current_auc = 0.6663461538461538
User 58383 AUC after training: 0.664423076923077
User 58383 does not improve AUC. Reverting changes.
Training on augumented user 104115 46/50 current_auc = 0.6663461538461538
User 104115 AUC after training: 0.6637820512820514
User 104115 does not improve AUC. Reverting changes.
Training on augumented user 59146 47/50 current_auc = 0.6663461538461538
User 59146 AUC after training: 0.6644230769230769
User 59146 does not improve AUC. Reverting changes.
Training on augumented user 118042 48/50 current_auc = 0.6663461538461538
User 118042 AUC after training: 0.6644230769230769
User 118042 does not improve AUC. Reverting changes.
Training on augumented user 11163 49/50 current_auc = 0.6663461538461538
User 11163 AUC after training: 0.6657051282051282
User 11163 does not improve AUC. Reverting changes.
[2024-12-02 20:09:25.411691] start test user 89211 280/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:09:25.943439] start test user 89211 280/568 recall augumented users by random, augumented_users = [28855, 29424, 3722, 722, 65287, 42360, 69786, 5305, 18802, 28677, 122095, 14549, 28055, 36955, 110602, 103016, 3998, 39205, 34797, 28640, 53342, 89284, 66895, 69585, 49674, 102855, 48512, 19653, 31210, 120426, 121443, 56650, 41502, 90415, 15235, 36594, 61217, 101019, 56415, 122168, 94293, 79383, 70151, 88732, 33173, 25006, 28359, 31124, 86386, 24727]
[2024-12-02 20:09:25.960317] user = 89211 Cloud 280/568
[2024-12-02 20:09:25.970876] user = 89211 Local 280/568
[2024-12-02 20:09:25.992139] user = 89211 Local+ 280/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:09:28.217450] user = 89211 MPDA- 280/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8
Training on augumented user 28855 0/50 current_auc = 0.8
User 28855 AUC after training: 0.8
User 28855 does not improve AUC. Reverting changes.
Training on augumented user 29424 1/50 current_auc = 0.8
User 29424 AUC after training: 0.8
User 29424 does not improve AUC. Reverting changes.
Training on augumented user 3722 2/50 current_auc = 0.8
User 3722 AUC after training: 0.8
User 3722 does not improve AUC. Reverting changes.
Training on augumented user 722 3/50 current_auc = 0.8
User 722 AUC after training: 0.8
User 722 does not improve AUC. Reverting changes.
Training on augumented user 65287 4/50 current_auc = 0.8
User 65287 AUC after training: 0.8
User 65287 does not improve AUC. Reverting changes.
Training on augumented user 42360 5/50 current_auc = 0.8
User 42360 AUC after training: 0.8
User 42360 does not improve AUC. Reverting changes.
Training on augumented user 69786 6/50 current_auc = 0.8
User 69786 AUC after training: 0.8
User 69786 does not improve AUC. Reverting changes.
Training on augumented user 5305 7/50 current_auc = 0.8
User 5305 AUC after training: 0.8
User 5305 does not improve AUC. Reverting changes.
Training on augumented user 18802 8/50 current_auc = 0.8
User 18802 AUC after training: 0.8
User 18802 does not improve AUC. Reverting changes.
Training on augumented user 28677 9/50 current_auc = 0.8
User 28677 AUC after training: 0.8
User 28677 does not improve AUC. Reverting changes.
Training on augumented user 122095 10/50 current_auc = 0.8
User 122095 AUC after training: 0.8
User 122095 does not improve AUC. Reverting changes.
Training on augumented user 14549 11/50 current_auc = 0.8
User 14549 AUC after training: 0.8
User 14549 does not improve AUC. Reverting changes.
Training on augumented user 28055 12/50 current_auc = 0.8
User 28055 AUC after training: 0.8
User 28055 does not improve AUC. Reverting changes.
Training on augumented user 36955 13/50 current_auc = 0.8
User 36955 AUC after training: 0.8
User 36955 does not improve AUC. Reverting changes.
Training on augumented user 110602 14/50 current_auc = 0.8
User 110602 AUC after training: 0.8
User 110602 does not improve AUC. Reverting changes.
Training on augumented user 103016 15/50 current_auc = 0.8
User 103016 AUC after training: 0.8
User 103016 does not improve AUC. Reverting changes.
Training on augumented user 3998 16/50 current_auc = 0.8
User 3998 AUC after training: 0.8
User 3998 does not improve AUC. Reverting changes.
Training on augumented user 39205 17/50 current_auc = 0.8
User 39205 AUC after training: 0.8
User 39205 does not improve AUC. Reverting changes.
Training on augumented user 34797 18/50 current_auc = 0.8
User 34797 AUC after training: 0.8
User 34797 does not improve AUC. Reverting changes.
Training on augumented user 28640 19/50 current_auc = 0.8
User 28640 AUC after training: 0.8
User 28640 does not improve AUC. Reverting changes.
Training on augumented user 53342 20/50 current_auc = 0.8
User 53342 AUC after training: 0.8
User 53342 does not improve AUC. Reverting changes.
Training on augumented user 89284 21/50 current_auc = 0.8
User 89284 AUC after training: 0.8
User 89284 does not improve AUC. Reverting changes.
Training on augumented user 66895 22/50 current_auc = 0.8
User 66895 AUC after training: 0.8
User 66895 does not improve AUC. Reverting changes.
Training on augumented user 69585 23/50 current_auc = 0.8
User 69585 AUC after training: 0.8
User 69585 does not improve AUC. Reverting changes.
Training on augumented user 49674 24/50 current_auc = 0.8
User 49674 AUC after training: 0.8
User 49674 does not improve AUC. Reverting changes.
Training on augumented user 102855 25/50 current_auc = 0.8
User 102855 AUC after training: 0.8
User 102855 does not improve AUC. Reverting changes.
Training on augumented user 48512 26/50 current_auc = 0.8
User 48512 AUC after training: 0.8
User 48512 does not improve AUC. Reverting changes.
Training on augumented user 19653 27/50 current_auc = 0.8
User 19653 AUC after training: 0.8
User 19653 does not improve AUC. Reverting changes.
Training on augumented user 31210 28/50 current_auc = 0.8
User 31210 AUC after training: 0.8
User 31210 does not improve AUC. Reverting changes.
Training on augumented user 120426 29/50 current_auc = 0.8
User 120426 AUC after training: 0.8
User 120426 does not improve AUC. Reverting changes.
Training on augumented user 121443 30/50 current_auc = 0.8
User 121443 AUC after training: 0.8
User 121443 does not improve AUC. Reverting changes.
Training on augumented user 56650 31/50 current_auc = 0.8
User 56650 AUC after training: 0.8
User 56650 does not improve AUC. Reverting changes.
Training on augumented user 41502 32/50 current_auc = 0.8
User 41502 AUC after training: 0.8
User 41502 does not improve AUC. Reverting changes.
Training on augumented user 90415 33/50 current_auc = 0.8
User 90415 AUC after training: 0.8
User 90415 does not improve AUC. Reverting changes.
Training on augumented user 15235 34/50 current_auc = 0.8
User 15235 AUC after training: 0.8
User 15235 does not improve AUC. Reverting changes.
Training on augumented user 36594 35/50 current_auc = 0.8
User 36594 AUC after training: 0.8
User 36594 does not improve AUC. Reverting changes.
Training on augumented user 61217 36/50 current_auc = 0.8
User 61217 AUC after training: 0.8
User 61217 does not improve AUC. Reverting changes.
Training on augumented user 101019 37/50 current_auc = 0.8
User 101019 AUC after training: 0.8
User 101019 does not improve AUC. Reverting changes.
Training on augumented user 56415 38/50 current_auc = 0.8
User 56415 AUC after training: 0.8
User 56415 does not improve AUC. Reverting changes.
Training on augumented user 122168 39/50 current_auc = 0.8
User 122168 AUC after training: 0.8
User 122168 does not improve AUC. Reverting changes.
Training on augumented user 94293 40/50 current_auc = 0.8
User 94293 AUC after training: 0.8
User 94293 does not improve AUC. Reverting changes.
Training on augumented user 79383 41/50 current_auc = 0.8
User 79383 AUC after training: 0.8
User 79383 does not improve AUC. Reverting changes.
Training on augumented user 70151 42/50 current_auc = 0.8
User 70151 AUC after training: 0.8
User 70151 does not improve AUC. Reverting changes.
Training on augumented user 88732 43/50 current_auc = 0.8
User 88732 AUC after training: 0.8
User 88732 does not improve AUC. Reverting changes.
Training on augumented user 33173 44/50 current_auc = 0.8
User 33173 AUC after training: 0.8
User 33173 does not improve AUC. Reverting changes.
Training on augumented user 25006 45/50 current_auc = 0.8
User 25006 AUC after training: 0.8
User 25006 does not improve AUC. Reverting changes.
Training on augumented user 28359 46/50 current_auc = 0.8
User 28359 AUC after training: 0.8
User 28359 does not improve AUC. Reverting changes.
Training on augumented user 31124 47/50 current_auc = 0.8
User 31124 AUC after training: 0.8
User 31124 does not improve AUC. Reverting changes.
Training on augumented user 86386 48/50 current_auc = 0.8
User 86386 AUC after training: 0.8
User 86386 does not improve AUC. Reverting changes.
Training on augumented user 24727 49/50 current_auc = 0.8
User 24727 AUC after training: 0.8
User 24727 does not improve AUC. Reverting changes.
[2024-12-02 20:09:56.411893] start test user 89213 281/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:09:56.843915] start test user 89213 281/568 recall augumented users by random, augumented_users = [109315, 29049, 52693, 123468, 67078, 124655, 98405, 54110, 9175, 63355, 38141, 70967, 23588, 77168, 10165, 41235, 15549, 84355, 91410, 49341, 74093, 22468, 98740, 94805, 66283, 111272, 55863, 122264, 16004, 85716, 71506, 57890, 59393, 25471, 39036, 23484, 30359, 34324, 67542, 53582, 38897, 77383, 3809, 109586, 2777, 14800, 81193, 41186, 55166, 92401]
[2024-12-02 20:09:56.859040] user = 89213 Cloud 281/568
[2024-12-02 20:09:56.869815] user = 89213 Local 281/568
[2024-12-02 20:09:56.905359] user = 89213 Local+ 281/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:09:59.719401] user = 89213 MPDA- 281/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7708333333333334
Training on augumented user 109315 0/50 current_auc = 0.7708333333333334
User 109315 AUC after training: 0.7645833333333333
User 109315 does not improve AUC. Reverting changes.
Training on augumented user 29049 1/50 current_auc = 0.7708333333333334
User 29049 AUC after training: 0.7666666666666667
User 29049 does not improve AUC. Reverting changes.
Training on augumented user 52693 2/50 current_auc = 0.7708333333333334
User 52693 AUC after training: 0.7604166666666666
User 52693 does not improve AUC. Reverting changes.
Training on augumented user 123468 3/50 current_auc = 0.7708333333333334
User 123468 AUC after training: 0.7708333333333334
User 123468 does not improve AUC. Reverting changes.
Training on augumented user 67078 4/50 current_auc = 0.7708333333333334
User 67078 AUC after training: 0.7645833333333333
User 67078 does not improve AUC. Reverting changes.
Training on augumented user 124655 5/50 current_auc = 0.7708333333333334
User 124655 AUC after training: 0.775
User 124655 improves AUC. Keeping the model.
Training on augumented user 98405 6/50 current_auc = 0.775
User 98405 AUC after training: 0.7708333333333334
User 98405 does not improve AUC. Reverting changes.
Training on augumented user 54110 7/50 current_auc = 0.775
User 54110 AUC after training: 0.775
User 54110 does not improve AUC. Reverting changes.
Training on augumented user 9175 8/50 current_auc = 0.775
User 9175 AUC after training: 0.7479166666666667
User 9175 does not improve AUC. Reverting changes.
Training on augumented user 63355 9/50 current_auc = 0.775
User 63355 AUC after training: 0.775
User 63355 does not improve AUC. Reverting changes.
Training on augumented user 38141 10/50 current_auc = 0.775
User 38141 AUC after training: 0.7625
User 38141 does not improve AUC. Reverting changes.
Training on augumented user 70967 11/50 current_auc = 0.775
User 70967 AUC after training: 0.7708333333333334
User 70967 does not improve AUC. Reverting changes.
Training on augumented user 23588 12/50 current_auc = 0.775
User 23588 AUC after training: 0.775
User 23588 does not improve AUC. Reverting changes.
Training on augumented user 77168 13/50 current_auc = 0.775
User 77168 AUC after training: 0.7708333333333334
User 77168 does not improve AUC. Reverting changes.
Training on augumented user 10165 14/50 current_auc = 0.775
User 10165 AUC after training: 0.7708333333333334
User 10165 does not improve AUC. Reverting changes.
Training on augumented user 41235 15/50 current_auc = 0.775
User 41235 AUC after training: 0.7666666666666667
User 41235 does not improve AUC. Reverting changes.
Training on augumented user 15549 16/50 current_auc = 0.775
User 15549 AUC after training: 0.7666666666666667
User 15549 does not improve AUC. Reverting changes.
Training on augumented user 84355 17/50 current_auc = 0.775
User 84355 AUC after training: 0.7708333333333334
User 84355 does not improve AUC. Reverting changes.
Training on augumented user 91410 18/50 current_auc = 0.775
User 91410 AUC after training: 0.7666666666666667
User 91410 does not improve AUC. Reverting changes.
Training on augumented user 49341 19/50 current_auc = 0.775
User 49341 AUC after training: 0.7708333333333334
User 49341 does not improve AUC. Reverting changes.
Training on augumented user 74093 20/50 current_auc = 0.775
User 74093 AUC after training: 0.7708333333333334
User 74093 does not improve AUC. Reverting changes.
Training on augumented user 22468 21/50 current_auc = 0.775
User 22468 AUC after training: 0.7645833333333333
User 22468 does not improve AUC. Reverting changes.
Training on augumented user 98740 22/50 current_auc = 0.775
User 98740 AUC after training: 0.7645833333333333
User 98740 does not improve AUC. Reverting changes.
Training on augumented user 94805 23/50 current_auc = 0.775
User 94805 AUC after training: 0.7666666666666667
User 94805 does not improve AUC. Reverting changes.
Training on augumented user 66283 24/50 current_auc = 0.775
User 66283 AUC after training: 0.7604166666666666
User 66283 does not improve AUC. Reverting changes.
Training on augumented user 111272 25/50 current_auc = 0.775
User 111272 AUC after training: 0.75625
User 111272 does not improve AUC. Reverting changes.
Training on augumented user 55863 26/50 current_auc = 0.775
User 55863 AUC after training: 0.7708333333333334
User 55863 does not improve AUC. Reverting changes.
Training on augumented user 122264 27/50 current_auc = 0.775
User 122264 AUC after training: 0.775
User 122264 does not improve AUC. Reverting changes.
Training on augumented user 16004 28/50 current_auc = 0.775
User 16004 AUC after training: 0.7645833333333333
User 16004 does not improve AUC. Reverting changes.
Training on augumented user 85716 29/50 current_auc = 0.775
User 85716 AUC after training: 0.7604166666666666
User 85716 does not improve AUC. Reverting changes.
Training on augumented user 71506 30/50 current_auc = 0.775
User 71506 AUC after training: 0.775
User 71506 does not improve AUC. Reverting changes.
Training on augumented user 57890 31/50 current_auc = 0.775
User 57890 AUC after training: 0.775
User 57890 does not improve AUC. Reverting changes.
Training on augumented user 59393 32/50 current_auc = 0.775
User 59393 AUC after training: 0.7708333333333334
User 59393 does not improve AUC. Reverting changes.
Training on augumented user 25471 33/50 current_auc = 0.775
User 25471 AUC after training: 0.775
User 25471 does not improve AUC. Reverting changes.
Training on augumented user 39036 34/50 current_auc = 0.775
User 39036 AUC after training: 0.775
User 39036 does not improve AUC. Reverting changes.
Training on augumented user 23484 35/50 current_auc = 0.775
User 23484 AUC after training: 0.7666666666666667
User 23484 does not improve AUC. Reverting changes.
Training on augumented user 30359 36/50 current_auc = 0.775
User 30359 AUC after training: 0.7708333333333334
User 30359 does not improve AUC. Reverting changes.
Training on augumented user 34324 37/50 current_auc = 0.775
User 34324 AUC after training: 0.7604166666666666
User 34324 does not improve AUC. Reverting changes.
Training on augumented user 67542 38/50 current_auc = 0.775
User 67542 AUC after training: 0.7708333333333334
User 67542 does not improve AUC. Reverting changes.
Training on augumented user 53582 39/50 current_auc = 0.775
User 53582 AUC after training: 0.775
User 53582 does not improve AUC. Reverting changes.
Training on augumented user 38897 40/50 current_auc = 0.775
User 38897 AUC after training: 0.7645833333333333
User 38897 does not improve AUC. Reverting changes.
Training on augumented user 77383 41/50 current_auc = 0.775
User 77383 AUC after training: 0.7645833333333333
User 77383 does not improve AUC. Reverting changes.
Training on augumented user 3809 42/50 current_auc = 0.775
User 3809 AUC after training: 0.7708333333333334
User 3809 does not improve AUC. Reverting changes.
Training on augumented user 109586 43/50 current_auc = 0.775
User 109586 AUC after training: 0.7708333333333334
User 109586 does not improve AUC. Reverting changes.
Training on augumented user 2777 44/50 current_auc = 0.775
User 2777 AUC after training: 0.7666666666666667
User 2777 does not improve AUC. Reverting changes.
Training on augumented user 14800 45/50 current_auc = 0.775
User 14800 AUC after training: 0.7708333333333334
User 14800 does not improve AUC. Reverting changes.
Training on augumented user 81193 46/50 current_auc = 0.775
User 81193 AUC after training: 0.7625
User 81193 does not improve AUC. Reverting changes.
Training on augumented user 41186 47/50 current_auc = 0.775
User 41186 AUC after training: 0.775
User 41186 does not improve AUC. Reverting changes.
Training on augumented user 55166 48/50 current_auc = 0.775
User 55166 AUC after training: 0.775
User 55166 does not improve AUC. Reverting changes.
Training on augumented user 92401 49/50 current_auc = 0.775
User 92401 AUC after training: 0.7708333333333334
User 92401 does not improve AUC. Reverting changes.
[2024-12-02 20:10:26.649467] start test user 89242 282/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:10:27.088320] start test user 89242 282/568 recall augumented users by random, augumented_users = [2584, 74874, 108618, 20570, 76836, 138033, 56615, 32579, 113039, 2209, 121199, 45569, 101501, 112844, 121525, 12797, 136878, 96630, 48015, 74172, 61646, 22939, 56662, 34965, 26607, 30901, 116785, 59314, 107505, 82876, 91992, 99073, 36096, 120360, 22196, 115743, 11376, 137023, 131031, 87902, 128043, 60722, 1275, 120622, 65379, 12632, 135843, 99861, 16078, 81074]
[2024-12-02 20:10:27.106319] user = 89242 Cloud 282/568
[2024-12-02 20:10:27.116574] user = 89242 Local 282/568
[2024-12-02 20:10:27.500889] user = 89242 Local+ 282/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:10:29.688787] user = 89242 MPDA- 282/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4393939393939394
Training on augumented user 2584 0/50 current_auc = 0.4393939393939394
User 2584 AUC after training: 0.42424242424242425
User 2584 does not improve AUC. Reverting changes.
Training on augumented user 74874 1/50 current_auc = 0.4393939393939394
User 74874 AUC after training: 0.43434343434343436
User 74874 does not improve AUC. Reverting changes.
Training on augumented user 108618 2/50 current_auc = 0.4393939393939394
User 108618 AUC after training: 0.4393939393939394
User 108618 does not improve AUC. Reverting changes.
Training on augumented user 20570 3/50 current_auc = 0.4393939393939394
User 20570 AUC after training: 0.4318181818181818
User 20570 does not improve AUC. Reverting changes.
Training on augumented user 76836 4/50 current_auc = 0.4393939393939394
User 76836 AUC after training: 0.4368686868686869
User 76836 does not improve AUC. Reverting changes.
Training on augumented user 138033 5/50 current_auc = 0.4393939393939394
User 138033 AUC after training: 0.43686868686868685
User 138033 does not improve AUC. Reverting changes.
Training on augumented user 56615 6/50 current_auc = 0.4393939393939394
User 56615 AUC after training: 0.43434343434343436
User 56615 does not improve AUC. Reverting changes.
Training on augumented user 32579 7/50 current_auc = 0.4393939393939394
User 32579 AUC after training: 0.43434343434343436
User 32579 does not improve AUC. Reverting changes.
Training on augumented user 113039 8/50 current_auc = 0.4393939393939394
User 113039 AUC after training: 0.4343434343434343
User 113039 does not improve AUC. Reverting changes.
Training on augumented user 2209 9/50 current_auc = 0.4393939393939394
User 2209 AUC after training: 0.4116161616161616
User 2209 does not improve AUC. Reverting changes.
Training on augumented user 121199 10/50 current_auc = 0.4393939393939394
User 121199 AUC after training: 0.42929292929292934
User 121199 does not improve AUC. Reverting changes.
Training on augumented user 45569 11/50 current_auc = 0.4393939393939394
User 45569 AUC after training: 0.43686868686868685
User 45569 does not improve AUC. Reverting changes.
Training on augumented user 101501 12/50 current_auc = 0.4393939393939394
User 101501 AUC after training: 0.43686868686868685
User 101501 does not improve AUC. Reverting changes.
Training on augumented user 112844 13/50 current_auc = 0.4393939393939394
User 112844 AUC after training: 0.4368686868686869
User 112844 does not improve AUC. Reverting changes.
Training on augumented user 121525 14/50 current_auc = 0.4393939393939394
User 121525 AUC after training: 0.42676767676767674
User 121525 does not improve AUC. Reverting changes.
Training on augumented user 12797 15/50 current_auc = 0.4393939393939394
User 12797 AUC after training: 0.4393939393939394
User 12797 does not improve AUC. Reverting changes.
Training on augumented user 136878 16/50 current_auc = 0.4393939393939394
User 136878 AUC after training: 0.4318181818181818
User 136878 does not improve AUC. Reverting changes.
Training on augumented user 96630 17/50 current_auc = 0.4393939393939394
User 96630 AUC after training: 0.44191919191919193
User 96630 improves AUC. Keeping the model.
Training on augumented user 48015 18/50 current_auc = 0.44191919191919193
User 48015 AUC after training: 0.43434343434343436
User 48015 does not improve AUC. Reverting changes.
Training on augumented user 74172 19/50 current_auc = 0.44191919191919193
User 74172 AUC after training: 0.4419191919191919
User 74172 does not improve AUC. Reverting changes.
Training on augumented user 61646 20/50 current_auc = 0.44191919191919193
User 61646 AUC after training: 0.4318181818181818
User 61646 does not improve AUC. Reverting changes.
Training on augumented user 22939 21/50 current_auc = 0.44191919191919193
User 22939 AUC after training: 0.4419191919191919
User 22939 does not improve AUC. Reverting changes.
Training on augumented user 56662 22/50 current_auc = 0.44191919191919193
User 56662 AUC after training: 0.4318181818181818
User 56662 does not improve AUC. Reverting changes.
Training on augumented user 34965 23/50 current_auc = 0.44191919191919193
User 34965 AUC after training: 0.4318181818181818
User 34965 does not improve AUC. Reverting changes.
Training on augumented user 26607 24/50 current_auc = 0.44191919191919193
User 26607 AUC after training: 0.4368686868686869
User 26607 does not improve AUC. Reverting changes.
Training on augumented user 30901 25/50 current_auc = 0.44191919191919193
User 30901 AUC after training: 0.4242424242424242
User 30901 does not improve AUC. Reverting changes.
Training on augumented user 116785 26/50 current_auc = 0.44191919191919193
User 116785 AUC after training: 0.43686868686868685
User 116785 does not improve AUC. Reverting changes.
Training on augumented user 59314 27/50 current_auc = 0.44191919191919193
User 59314 AUC after training: 0.4343434343434343
User 59314 does not improve AUC. Reverting changes.
Training on augumented user 107505 28/50 current_auc = 0.44191919191919193
User 107505 AUC after training: 0.4343434343434343
User 107505 does not improve AUC. Reverting changes.
Training on augumented user 82876 29/50 current_auc = 0.44191919191919193
User 82876 AUC after training: 0.44191919191919193
User 82876 does not improve AUC. Reverting changes.
Training on augumented user 91992 30/50 current_auc = 0.44191919191919193
User 91992 AUC after training: 0.4318181818181818
User 91992 does not improve AUC. Reverting changes.
Training on augumented user 99073 31/50 current_auc = 0.44191919191919193
User 99073 AUC after training: 0.4393939393939394
User 99073 does not improve AUC. Reverting changes.
Training on augumented user 36096 32/50 current_auc = 0.44191919191919193
User 36096 AUC after training: 0.4444444444444445
User 36096 improves AUC. Keeping the model.
Training on augumented user 120360 33/50 current_auc = 0.4444444444444445
User 120360 AUC after training: 0.42424242424242425
User 120360 does not improve AUC. Reverting changes.
Training on augumented user 22196 34/50 current_auc = 0.4444444444444445
User 22196 AUC after training: 0.4393939393939394
User 22196 does not improve AUC. Reverting changes.
Training on augumented user 115743 35/50 current_auc = 0.4444444444444445
User 115743 AUC after training: 0.4318181818181818
User 115743 does not improve AUC. Reverting changes.
Training on augumented user 11376 36/50 current_auc = 0.4444444444444445
User 11376 AUC after training: 0.44191919191919193
User 11376 does not improve AUC. Reverting changes.
Training on augumented user 137023 37/50 current_auc = 0.4444444444444445
User 137023 AUC after training: 0.4419191919191919
User 137023 does not improve AUC. Reverting changes.
Training on augumented user 131031 38/50 current_auc = 0.4444444444444445
User 131031 AUC after training: 0.4368686868686869
User 131031 does not improve AUC. Reverting changes.
Training on augumented user 87902 39/50 current_auc = 0.4444444444444445
User 87902 AUC after training: 0.44191919191919193
User 87902 does not improve AUC. Reverting changes.
Training on augumented user 128043 40/50 current_auc = 0.4444444444444445
User 128043 AUC after training: 0.44191919191919193
User 128043 does not improve AUC. Reverting changes.
Training on augumented user 60722 41/50 current_auc = 0.4444444444444445
User 60722 AUC after training: 0.41919191919191917
User 60722 does not improve AUC. Reverting changes.
Training on augumented user 1275 42/50 current_auc = 0.4444444444444445
User 1275 AUC after training: 0.4318181818181818
User 1275 does not improve AUC. Reverting changes.
Training on augumented user 120622 43/50 current_auc = 0.4444444444444445
User 120622 AUC after training: 0.4343434343434343
User 120622 does not improve AUC. Reverting changes.
Training on augumented user 65379 44/50 current_auc = 0.4444444444444445
User 65379 AUC after training: 0.4393939393939394
User 65379 does not improve AUC. Reverting changes.
Training on augumented user 12632 45/50 current_auc = 0.4444444444444445
User 12632 AUC after training: 0.42676767676767674
User 12632 does not improve AUC. Reverting changes.
Training on augumented user 135843 46/50 current_auc = 0.4444444444444445
User 135843 AUC after training: 0.44191919191919193
User 135843 does not improve AUC. Reverting changes.
Training on augumented user 99861 47/50 current_auc = 0.4444444444444445
User 99861 AUC after training: 0.4393939393939394
User 99861 does not improve AUC. Reverting changes.
Training on augumented user 16078 48/50 current_auc = 0.4444444444444445
User 16078 AUC after training: 0.43686868686868685
User 16078 does not improve AUC. Reverting changes.
Training on augumented user 81074 49/50 current_auc = 0.4444444444444445
User 81074 AUC after training: 0.4217171717171717
User 81074 does not improve AUC. Reverting changes.
[2024-12-02 20:10:57.862264] start test user 89299 283/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:10:58.575898] start test user 89299 283/568 recall augumented users by random, augumented_users = [24913, 93918, 19226, 38819, 74389, 81245, 8362, 119198, 132566, 62878, 58, 58450, 18220, 124534, 89668, 68960, 50809, 51306, 117312, 7907, 61124, 7700, 38523, 38363, 61357, 116385, 50833, 128403, 129356, 13363, 31049, 77692, 43775, 95888, 116423, 95231, 49009, 76184, 108093, 85361, 22926, 111226, 48854, 107300, 113127, 52574, 9997, 86468, 117517, 43844]
[2024-12-02 20:10:58.595553] user = 89299 Cloud 283/568
[2024-12-02 20:10:58.686491] user = 89299 Local 283/568
[2024-12-02 20:10:58.973780] user = 89299 Local+ 283/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:11:01.195506] user = 89299 MPDA- 283/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6420669129720853
Training on augumented user 24913 0/50 current_auc = 0.6420669129720853
User 24913 AUC after training: 0.6420361247947455
User 24913 does not improve AUC. Reverting changes.
Training on augumented user 93918 1/50 current_auc = 0.6420669129720853
User 93918 AUC after training: 0.6420412561576354
User 93918 does not improve AUC. Reverting changes.
Training on augumented user 19226 2/50 current_auc = 0.6420669129720853
User 19226 AUC after training: 0.6420977011494253
User 19226 improves AUC. Keeping the model.
Training on augumented user 38819 3/50 current_auc = 0.6420977011494253
User 38819 AUC after training: 0.6420361247947455
User 38819 does not improve AUC. Reverting changes.
Training on augumented user 74389 4/50 current_auc = 0.6420977011494253
User 74389 AUC after training: 0.6421387520525451
User 74389 improves AUC. Keeping the model.
Training on augumented user 81245 5/50 current_auc = 0.6421387520525451
User 81245 AUC after training: 0.6423234811165845
User 81245 improves AUC. Keeping the model.
Training on augumented user 8362 6/50 current_auc = 0.6423234811165845
User 8362 AUC after training: 0.6423029556650247
User 8362 does not improve AUC. Reverting changes.
Training on augumented user 119198 7/50 current_auc = 0.6423234811165845
User 119198 AUC after training: 0.6419540229885058
User 119198 does not improve AUC. Reverting changes.
Training on augumented user 132566 8/50 current_auc = 0.6423234811165845
User 132566 AUC after training: 0.6420258620689656
User 132566 does not improve AUC. Reverting changes.
Training on augumented user 62878 9/50 current_auc = 0.6423234811165845
User 62878 AUC after training: 0.6421079638752053
User 62878 does not improve AUC. Reverting changes.
Training on augumented user 58 10/50 current_auc = 0.6423234811165845
User 58 AUC after training: 0.6420155993431855
User 58 does not improve AUC. Reverting changes.
Training on augumented user 58450 11/50 current_auc = 0.6423234811165845
User 58450 AUC after training: 0.642190065681445
User 58450 does not improve AUC. Reverting changes.
Training on augumented user 18220 12/50 current_auc = 0.6423234811165845
User 18220 AUC after training: 0.6423645320197044
User 18220 improves AUC. Keeping the model.
Training on augumented user 124534 13/50 current_auc = 0.6423645320197044
User 124534 AUC after training: 0.6422824302134647
User 124534 does not improve AUC. Reverting changes.
Training on augumented user 89668 14/50 current_auc = 0.6423645320197044
User 89668 AUC after training: 0.6425492610837438
User 89668 improves AUC. Keeping the model.
Training on augumented user 68960 15/50 current_auc = 0.6425492610837438
User 68960 AUC after training: 0.6427032019704434
User 68960 improves AUC. Keeping the model.
Training on augumented user 50809 16/50 current_auc = 0.6427032019704434
User 50809 AUC after training: 0.6427750410509032
User 50809 improves AUC. Keeping the model.
Training on augumented user 51306 17/50 current_auc = 0.6427750410509032
User 51306 AUC after training: 0.642805829228243
User 51306 improves AUC. Keeping the model.
Training on augumented user 117312 18/50 current_auc = 0.642805829228243
User 117312 AUC after training: 0.6426724137931035
User 117312 does not improve AUC. Reverting changes.
Training on augumented user 7907 19/50 current_auc = 0.642805829228243
User 7907 AUC after training: 0.6428468801313629
User 7907 improves AUC. Keeping the model.
Training on augumented user 61124 20/50 current_auc = 0.6428468801313629
User 61124 AUC after training: 0.6428674055829228
User 61124 improves AUC. Keeping the model.
Training on augumented user 7700 21/50 current_auc = 0.6428674055829228
User 7700 AUC after training: 0.6429700328407225
User 7700 improves AUC. Keeping the model.
Training on augumented user 38523 22/50 current_auc = 0.6429700328407225
User 38523 AUC after training: 0.6427032019704434
User 38523 does not improve AUC. Reverting changes.
Training on augumented user 38363 23/50 current_auc = 0.6429700328407225
User 38363 AUC after training: 0.6427647783251231
User 38363 does not improve AUC. Reverting changes.
Training on augumented user 61357 24/50 current_auc = 0.6429700328407225
User 61357 AUC after training: 0.6426929392446634
User 61357 does not improve AUC. Reverting changes.
Training on augumented user 116385 25/50 current_auc = 0.6429700328407225
User 116385 AUC after training: 0.6429187192118228
User 116385 does not improve AUC. Reverting changes.
Training on augumented user 50833 26/50 current_auc = 0.6429700328407225
User 50833 AUC after training: 0.6427955665024631
User 50833 does not improve AUC. Reverting changes.
Training on augumented user 128403 27/50 current_auc = 0.6429700328407225
User 128403 AUC after training: 0.643144499178982
User 128403 improves AUC. Keeping the model.
Training on augumented user 129356 28/50 current_auc = 0.643144499178982
User 129356 AUC after training: 0.643113711001642
User 129356 does not improve AUC. Reverting changes.
Training on augumented user 13363 29/50 current_auc = 0.643144499178982
User 13363 AUC after training: 0.6430726600985222
User 13363 does not improve AUC. Reverting changes.
Training on augumented user 31049 30/50 current_auc = 0.643144499178982
User 31049 AUC after training: 0.6431958128078819
User 31049 improves AUC. Keeping the model.
Training on augumented user 77692 31/50 current_auc = 0.6431958128078819
User 77692 AUC after training: 0.6431958128078819
User 77692 does not improve AUC. Reverting changes.
Training on augumented user 43775 32/50 current_auc = 0.6431958128078819
User 43775 AUC after training: 0.6433087027914615
User 43775 improves AUC. Keeping the model.
Training on augumented user 95888 33/50 current_auc = 0.6433087027914615
User 95888 AUC after training: 0.6432984400656814
User 95888 does not improve AUC. Reverting changes.
Training on augumented user 116423 34/50 current_auc = 0.6433087027914615
User 116423 AUC after training: 0.6431752873563218
User 116423 does not improve AUC. Reverting changes.
Training on augumented user 95231 35/50 current_auc = 0.6433087027914615
User 95231 AUC after training: 0.6427545155993433
User 95231 does not improve AUC. Reverting changes.
Training on augumented user 49009 36/50 current_auc = 0.6433087027914615
User 49009 AUC after training: 0.6433497536945814
User 49009 improves AUC. Keeping the model.
Training on augumented user 76184 37/50 current_auc = 0.6433497536945814
User 76184 AUC after training: 0.643462643678161
User 76184 improves AUC. Keeping the model.
Training on augumented user 108093 38/50 current_auc = 0.643462643678161
User 108093 AUC after training: 0.6434215927750411
User 108093 does not improve AUC. Reverting changes.
Training on augumented user 85361 39/50 current_auc = 0.643462643678161
User 85361 AUC after training: 0.6434523809523809
User 85361 does not improve AUC. Reverting changes.
Training on augumented user 22926 40/50 current_auc = 0.643462643678161
User 22926 AUC after training: 0.6426621510673235
User 22926 does not improve AUC. Reverting changes.
Training on augumented user 111226 41/50 current_auc = 0.643462643678161
User 111226 AUC after training: 0.6435036945812808
User 111226 improves AUC. Keeping the model.
Training on augumented user 48854 42/50 current_auc = 0.6435036945812808
User 48854 AUC after training: 0.643134236453202
User 48854 does not improve AUC. Reverting changes.
Training on augumented user 107300 43/50 current_auc = 0.6435036945812808
User 107300 AUC after training: 0.6433497536945811
User 107300 does not improve AUC. Reverting changes.
Training on augumented user 113127 44/50 current_auc = 0.6435036945812808
User 113127 AUC after training: 0.6435652709359607
User 113127 improves AUC. Keeping the model.
Training on augumented user 52574 45/50 current_auc = 0.6435652709359607
User 52574 AUC after training: 0.6429700328407224
User 52574 does not improve AUC. Reverting changes.
Training on augumented user 9997 46/50 current_auc = 0.6435652709359607
User 9997 AUC after training: 0.6434729064039408
User 9997 does not improve AUC. Reverting changes.
Training on augumented user 86468 47/50 current_auc = 0.6435652709359607
User 86468 AUC after training: 0.6435139573070607
User 86468 does not improve AUC. Reverting changes.
Training on augumented user 117517 48/50 current_auc = 0.6435652709359607
User 117517 AUC after training: 0.6435652709359605
User 117517 does not improve AUC. Reverting changes.
Training on augumented user 43844 49/50 current_auc = 0.6435652709359607
User 43844 AUC after training: 0.6433805418719212
User 43844 does not improve AUC. Reverting changes.
[2024-12-02 20:11:32.586120] start test user 89310 284/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:11:33.330919] start test user 89310 284/568 recall augumented users by random, augumented_users = [28858, 75691, 6022, 69178, 12766, 849, 63263, 28376, 67795, 8703, 16848, 111458, 71681, 71206, 33573, 104748, 12715, 134399, 95961, 117344, 37834, 131703, 76678, 100244, 73168, 2704, 45763, 35981, 135465, 63016, 2175, 55450, 110467, 102131, 75596, 77701, 123065, 3417, 92687, 2800, 22483, 84904, 136214, 61826, 113790, 125788, 26019, 131822, 78520, 13868]
[2024-12-02 20:11:33.377490] user = 89310 Cloud 284/568
[2024-12-02 20:11:33.407050] user = 89310 Local 284/568
[2024-12-02 20:11:33.460660] user = 89310 Local+ 284/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:11:35.959424] user = 89310 MPDA- 284/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.36296296296296293
Training on augumented user 28858 0/50 current_auc = 0.36296296296296293
User 28858 AUC after training: 0.36296296296296293
User 28858 does not improve AUC. Reverting changes.
Training on augumented user 75691 1/50 current_auc = 0.36296296296296293
User 75691 AUC after training: 0.36296296296296293
User 75691 does not improve AUC. Reverting changes.
Training on augumented user 6022 2/50 current_auc = 0.36296296296296293
User 6022 AUC after training: 0.36296296296296293
User 6022 does not improve AUC. Reverting changes.
Training on augumented user 69178 3/50 current_auc = 0.36296296296296293
User 69178 AUC after training: 0.36296296296296293
User 69178 does not improve AUC. Reverting changes.
Training on augumented user 12766 4/50 current_auc = 0.36296296296296293
User 12766 AUC after training: 0.36666666666666664
User 12766 improves AUC. Keeping the model.
Training on augumented user 849 5/50 current_auc = 0.36666666666666664
User 849 AUC after training: 0.36666666666666664
User 849 does not improve AUC. Reverting changes.
Training on augumented user 63263 6/50 current_auc = 0.36666666666666664
User 63263 AUC after training: 0.36666666666666664
User 63263 does not improve AUC. Reverting changes.
Training on augumented user 28376 7/50 current_auc = 0.36666666666666664
User 28376 AUC after training: 0.36666666666666664
User 28376 does not improve AUC. Reverting changes.
Training on augumented user 67795 8/50 current_auc = 0.36666666666666664
User 67795 AUC after training: 0.36666666666666664
User 67795 does not improve AUC. Reverting changes.
Training on augumented user 8703 9/50 current_auc = 0.36666666666666664
User 8703 AUC after training: 0.36296296296296293
User 8703 does not improve AUC. Reverting changes.
Training on augumented user 16848 10/50 current_auc = 0.36666666666666664
User 16848 AUC after training: 0.36666666666666664
User 16848 does not improve AUC. Reverting changes.
Training on augumented user 111458 11/50 current_auc = 0.36666666666666664
User 111458 AUC after training: 0.36666666666666664
User 111458 does not improve AUC. Reverting changes.
Training on augumented user 71681 12/50 current_auc = 0.36666666666666664
User 71681 AUC after training: 0.36666666666666664
User 71681 does not improve AUC. Reverting changes.
Training on augumented user 71206 13/50 current_auc = 0.36666666666666664
User 71206 AUC after training: 0.3592592592592592
User 71206 does not improve AUC. Reverting changes.
Training on augumented user 33573 14/50 current_auc = 0.36666666666666664
User 33573 AUC after training: 0.36666666666666664
User 33573 does not improve AUC. Reverting changes.
Training on augumented user 104748 15/50 current_auc = 0.36666666666666664
User 104748 AUC after training: 0.36666666666666664
User 104748 does not improve AUC. Reverting changes.
Training on augumented user 12715 16/50 current_auc = 0.36666666666666664
User 12715 AUC after training: 0.36666666666666664
User 12715 does not improve AUC. Reverting changes.
Training on augumented user 134399 17/50 current_auc = 0.36666666666666664
User 134399 AUC after training: 0.36666666666666664
User 134399 does not improve AUC. Reverting changes.
Training on augumented user 95961 18/50 current_auc = 0.36666666666666664
User 95961 AUC after training: 0.36666666666666664
User 95961 does not improve AUC. Reverting changes.
Training on augumented user 117344 19/50 current_auc = 0.36666666666666664
User 117344 AUC after training: 0.36666666666666664
User 117344 does not improve AUC. Reverting changes.
Training on augumented user 37834 20/50 current_auc = 0.36666666666666664
User 37834 AUC after training: 0.36666666666666664
User 37834 does not improve AUC. Reverting changes.
Training on augumented user 131703 21/50 current_auc = 0.36666666666666664
User 131703 AUC after training: 0.36666666666666664
User 131703 does not improve AUC. Reverting changes.
Training on augumented user 76678 22/50 current_auc = 0.36666666666666664
User 76678 AUC after training: 0.36666666666666664
User 76678 does not improve AUC. Reverting changes.
Training on augumented user 100244 23/50 current_auc = 0.36666666666666664
User 100244 AUC after training: 0.36296296296296293
User 100244 does not improve AUC. Reverting changes.
Training on augumented user 73168 24/50 current_auc = 0.36666666666666664
User 73168 AUC after training: 0.36666666666666664
User 73168 does not improve AUC. Reverting changes.
Training on augumented user 2704 25/50 current_auc = 0.36666666666666664
User 2704 AUC after training: 0.36666666666666664
User 2704 does not improve AUC. Reverting changes.
Training on augumented user 45763 26/50 current_auc = 0.36666666666666664
User 45763 AUC after training: 0.36666666666666664
User 45763 does not improve AUC. Reverting changes.
Training on augumented user 35981 27/50 current_auc = 0.36666666666666664
User 35981 AUC after training: 0.36666666666666664
User 35981 does not improve AUC. Reverting changes.
Training on augumented user 135465 28/50 current_auc = 0.36666666666666664
User 135465 AUC after training: 0.36666666666666664
User 135465 does not improve AUC. Reverting changes.
Training on augumented user 63016 29/50 current_auc = 0.36666666666666664
User 63016 AUC after training: 0.36666666666666664
User 63016 does not improve AUC. Reverting changes.
Training on augumented user 2175 30/50 current_auc = 0.36666666666666664
User 2175 AUC after training: 0.36296296296296293
User 2175 does not improve AUC. Reverting changes.
Training on augumented user 55450 31/50 current_auc = 0.36666666666666664
User 55450 AUC after training: 0.36666666666666664
User 55450 does not improve AUC. Reverting changes.
Training on augumented user 110467 32/50 current_auc = 0.36666666666666664
User 110467 AUC after training: 0.36666666666666664
User 110467 does not improve AUC. Reverting changes.
Training on augumented user 102131 33/50 current_auc = 0.36666666666666664
User 102131 AUC after training: 0.37037037037037035
User 102131 improves AUC. Keeping the model.
Training on augumented user 75596 34/50 current_auc = 0.37037037037037035
User 75596 AUC after training: 0.37407407407407406
User 75596 improves AUC. Keeping the model.
Training on augumented user 77701 35/50 current_auc = 0.37407407407407406
User 77701 AUC after training: 0.37407407407407406
User 77701 does not improve AUC. Reverting changes.
Training on augumented user 123065 36/50 current_auc = 0.37407407407407406
User 123065 AUC after training: 0.37407407407407406
User 123065 does not improve AUC. Reverting changes.
Training on augumented user 3417 37/50 current_auc = 0.37407407407407406
User 3417 AUC after training: 0.36666666666666664
User 3417 does not improve AUC. Reverting changes.
Training on augumented user 92687 38/50 current_auc = 0.37407407407407406
User 92687 AUC after training: 0.37037037037037035
User 92687 does not improve AUC. Reverting changes.
Training on augumented user 2800 39/50 current_auc = 0.37407407407407406
User 2800 AUC after training: 0.37037037037037035
User 2800 does not improve AUC. Reverting changes.
Training on augumented user 22483 40/50 current_auc = 0.37407407407407406
User 22483 AUC after training: 0.37777777777777777
User 22483 improves AUC. Keeping the model.
Training on augumented user 84904 41/50 current_auc = 0.37777777777777777
User 84904 AUC after training: 0.37777777777777777
User 84904 does not improve AUC. Reverting changes.
Training on augumented user 136214 42/50 current_auc = 0.37777777777777777
User 136214 AUC after training: 0.37407407407407406
User 136214 does not improve AUC. Reverting changes.
Training on augumented user 61826 43/50 current_auc = 0.37777777777777777
User 61826 AUC after training: 0.37777777777777777
User 61826 does not improve AUC. Reverting changes.
Training on augumented user 113790 44/50 current_auc = 0.37777777777777777
User 113790 AUC after training: 0.37777777777777777
User 113790 does not improve AUC. Reverting changes.
Training on augumented user 125788 45/50 current_auc = 0.37777777777777777
User 125788 AUC after training: 0.37777777777777777
User 125788 does not improve AUC. Reverting changes.
Training on augumented user 26019 46/50 current_auc = 0.37777777777777777
User 26019 AUC after training: 0.37777777777777777
User 26019 does not improve AUC. Reverting changes.
Training on augumented user 131822 47/50 current_auc = 0.37777777777777777
User 131822 AUC after training: 0.37777777777777777
User 131822 does not improve AUC. Reverting changes.
Training on augumented user 78520 48/50 current_auc = 0.37777777777777777
User 78520 AUC after training: 0.37407407407407406
User 78520 does not improve AUC. Reverting changes.
Training on augumented user 13868 49/50 current_auc = 0.37777777777777777
User 13868 AUC after training: 0.37777777777777777
User 13868 does not improve AUC. Reverting changes.
[2024-12-02 20:12:06.621004] start test user 89331 285/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:12:07.045148] start test user 89331 285/568 recall augumented users by random, augumented_users = [14523, 27900, 94592, 86422, 90395, 65151, 82386, 102740, 103572, 85299, 9641, 101147, 75874, 37474, 119789, 35994, 108378, 123449, 85076, 89023, 90904, 41818, 17348, 43596, 6627, 134776, 91203, 66616, 88199, 130542, 117267, 5964, 116184, 12262, 117935, 36732, 28493, 84518, 76732, 50715, 23077, 53214, 42076, 43097, 16007, 4075, 101974, 14774, 43336, 123840]
[2024-12-02 20:12:07.060287] user = 89331 Cloud 285/568
[2024-12-02 20:12:07.087225] user = 89331 Local 285/568
[2024-12-02 20:12:07.168848] user = 89331 Local+ 285/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:12:09.424421] user = 89331 MPDA- 285/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.729375
Training on augumented user 14523 0/50 current_auc = 0.729375
User 14523 AUC after training: 0.7293750000000001
User 14523 improves AUC. Keeping the model.
Training on augumented user 27900 1/50 current_auc = 0.7293750000000001
User 27900 AUC after training: 0.72875
User 27900 does not improve AUC. Reverting changes.
Training on augumented user 94592 2/50 current_auc = 0.7293750000000001
User 94592 AUC after training: 0.729375
User 94592 does not improve AUC. Reverting changes.
Training on augumented user 86422 3/50 current_auc = 0.7293750000000001
User 86422 AUC after training: 0.7306250000000001
User 86422 improves AUC. Keeping the model.
Training on augumented user 90395 4/50 current_auc = 0.7306250000000001
User 90395 AUC after training: 0.7312500000000001
User 90395 improves AUC. Keeping the model.
Training on augumented user 65151 5/50 current_auc = 0.7312500000000001
User 65151 AUC after training: 0.7293750000000001
User 65151 does not improve AUC. Reverting changes.
Training on augumented user 82386 6/50 current_auc = 0.7312500000000001
User 82386 AUC after training: 0.7306250000000001
User 82386 does not improve AUC. Reverting changes.
Training on augumented user 102740 7/50 current_auc = 0.7312500000000001
User 102740 AUC after training: 0.73
User 102740 does not improve AUC. Reverting changes.
Training on augumented user 103572 8/50 current_auc = 0.7312500000000001
User 103572 AUC after training: 0.7306250000000001
User 103572 does not improve AUC. Reverting changes.
Training on augumented user 85299 9/50 current_auc = 0.7312500000000001
User 85299 AUC after training: 0.73
User 85299 does not improve AUC. Reverting changes.
Training on augumented user 9641 10/50 current_auc = 0.7312500000000001
User 9641 AUC after training: 0.7306250000000001
User 9641 does not improve AUC. Reverting changes.
Training on augumented user 101147 11/50 current_auc = 0.7312500000000001
User 101147 AUC after training: 0.730625
User 101147 does not improve AUC. Reverting changes.
Training on augumented user 75874 12/50 current_auc = 0.7312500000000001
User 75874 AUC after training: 0.7312500000000001
User 75874 does not improve AUC. Reverting changes.
Training on augumented user 37474 13/50 current_auc = 0.7312500000000001
User 37474 AUC after training: 0.729375
User 37474 does not improve AUC. Reverting changes.
Training on augumented user 119789 14/50 current_auc = 0.7312500000000001
User 119789 AUC after training: 0.729375
User 119789 does not improve AUC. Reverting changes.
Training on augumented user 35994 15/50 current_auc = 0.7312500000000001
User 35994 AUC after training: 0.7306250000000001
User 35994 does not improve AUC. Reverting changes.
Training on augumented user 108378 16/50 current_auc = 0.7312500000000001
User 108378 AUC after training: 0.73
User 108378 does not improve AUC. Reverting changes.
Training on augumented user 123449 17/50 current_auc = 0.7312500000000001
User 123449 AUC after training: 0.72875
User 123449 does not improve AUC. Reverting changes.
Training on augumented user 85076 18/50 current_auc = 0.7312500000000001
User 85076 AUC after training: 0.729375
User 85076 does not improve AUC. Reverting changes.
Training on augumented user 89023 19/50 current_auc = 0.7312500000000001
User 89023 AUC after training: 0.7324999999999999
User 89023 improves AUC. Keeping the model.
Training on augumented user 90904 20/50 current_auc = 0.7324999999999999
User 90904 AUC after training: 0.7300000000000001
User 90904 does not improve AUC. Reverting changes.
Training on augumented user 41818 21/50 current_auc = 0.7324999999999999
User 41818 AUC after training: 0.7312500000000001
User 41818 does not improve AUC. Reverting changes.
Training on augumented user 17348 22/50 current_auc = 0.7324999999999999
User 17348 AUC after training: 0.7306250000000001
User 17348 does not improve AUC. Reverting changes.
Training on augumented user 43596 23/50 current_auc = 0.7324999999999999
User 43596 AUC after training: 0.72875
User 43596 does not improve AUC. Reverting changes.
Training on augumented user 6627 24/50 current_auc = 0.7324999999999999
User 6627 AUC after training: 0.729375
User 6627 does not improve AUC. Reverting changes.
Training on augumented user 134776 25/50 current_auc = 0.7324999999999999
User 134776 AUC after training: 0.730625
User 134776 does not improve AUC. Reverting changes.
Training on augumented user 91203 26/50 current_auc = 0.7324999999999999
User 91203 AUC after training: 0.73
User 91203 does not improve AUC. Reverting changes.
Training on augumented user 66616 27/50 current_auc = 0.7324999999999999
User 66616 AUC after training: 0.7306250000000001
User 66616 does not improve AUC. Reverting changes.
Training on augumented user 88199 28/50 current_auc = 0.7324999999999999
User 88199 AUC after training: 0.73
User 88199 does not improve AUC. Reverting changes.
Training on augumented user 130542 29/50 current_auc = 0.7324999999999999
User 130542 AUC after training: 0.7293750000000001
User 130542 does not improve AUC. Reverting changes.
Training on augumented user 117267 30/50 current_auc = 0.7324999999999999
User 117267 AUC after training: 0.73
User 117267 does not improve AUC. Reverting changes.
Training on augumented user 5964 31/50 current_auc = 0.7324999999999999
User 5964 AUC after training: 0.730625
User 5964 does not improve AUC. Reverting changes.
Training on augumented user 116184 32/50 current_auc = 0.7324999999999999
User 116184 AUC after training: 0.72875
User 116184 does not improve AUC. Reverting changes.
Training on augumented user 12262 33/50 current_auc = 0.7324999999999999
User 12262 AUC after training: 0.731875
User 12262 does not improve AUC. Reverting changes.
Training on augumented user 117935 34/50 current_auc = 0.7324999999999999
User 117935 AUC after training: 0.731875
User 117935 does not improve AUC. Reverting changes.
Training on augumented user 36732 35/50 current_auc = 0.7324999999999999
User 36732 AUC after training: 0.7324999999999999
User 36732 does not improve AUC. Reverting changes.
Training on augumented user 28493 36/50 current_auc = 0.7324999999999999
User 28493 AUC after training: 0.730625
User 28493 does not improve AUC. Reverting changes.
Training on augumented user 84518 37/50 current_auc = 0.7324999999999999
User 84518 AUC after training: 0.7300000000000001
User 84518 does not improve AUC. Reverting changes.
Training on augumented user 76732 38/50 current_auc = 0.7324999999999999
User 76732 AUC after training: 0.73125
User 76732 does not improve AUC. Reverting changes.
Training on augumented user 50715 39/50 current_auc = 0.7324999999999999
User 50715 AUC after training: 0.73125
User 50715 does not improve AUC. Reverting changes.
Training on augumented user 23077 40/50 current_auc = 0.7324999999999999
User 23077 AUC after training: 0.7318749999999999
User 23077 does not improve AUC. Reverting changes.
Training on augumented user 53214 41/50 current_auc = 0.7324999999999999
User 53214 AUC after training: 0.73
User 53214 does not improve AUC. Reverting changes.
Training on augumented user 42076 42/50 current_auc = 0.7324999999999999
User 42076 AUC after training: 0.730625
User 42076 does not improve AUC. Reverting changes.
Training on augumented user 43097 43/50 current_auc = 0.7324999999999999
User 43097 AUC after training: 0.729375
User 43097 does not improve AUC. Reverting changes.
Training on augumented user 16007 44/50 current_auc = 0.7324999999999999
User 16007 AUC after training: 0.733125
User 16007 improves AUC. Keeping the model.
Training on augumented user 4075 45/50 current_auc = 0.733125
User 4075 AUC after training: 0.731875
User 4075 does not improve AUC. Reverting changes.
Training on augumented user 101974 46/50 current_auc = 0.733125
User 101974 AUC after training: 0.730625
User 101974 does not improve AUC. Reverting changes.
Training on augumented user 14774 47/50 current_auc = 0.733125
User 14774 AUC after training: 0.73125
User 14774 does not improve AUC. Reverting changes.
Training on augumented user 43336 48/50 current_auc = 0.733125
User 43336 AUC after training: 0.733125
User 43336 does not improve AUC. Reverting changes.
Training on augumented user 123840 49/50 current_auc = 0.733125
User 123840 AUC after training: 0.733125
User 123840 does not improve AUC. Reverting changes.
[2024-12-02 20:12:36.268744] start test user 89392 286/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:12:36.702266] start test user 89392 286/568 recall augumented users by random, augumented_users = [99484, 124854, 93020, 35154, 82048, 126290, 2654, 108955, 135699, 25534, 77376, 21717, 40968, 93324, 66472, 120003, 73819, 54426, 78716, 101142, 117364, 40263, 31193, 94824, 16956, 101126, 32452, 33360, 94277, 100468, 47698, 104313, 2765, 102722, 35180, 88313, 13058, 52063, 46078, 36608, 52016, 137484, 119819, 52467, 20978, 1942, 111994, 70328, 8882, 62579]
[2024-12-02 20:12:36.718731] user = 89392 Cloud 286/568
[2024-12-02 20:12:36.734203] user = 89392 Local 286/568
[2024-12-02 20:12:36.819266] user = 89392 Local+ 286/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:12:39.908799] user = 89392 MPDA- 286/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5772357723577236
Training on augumented user 99484 0/50 current_auc = 0.5772357723577236
User 99484 AUC after training: 0.5705838876570584
User 99484 does not improve AUC. Reverting changes.
Training on augumented user 124854 1/50 current_auc = 0.5772357723577236
User 124854 AUC after training: 0.5742793791574279
User 124854 does not improve AUC. Reverting changes.
Training on augumented user 93020 2/50 current_auc = 0.5772357723577236
User 93020 AUC after training: 0.581670362158167
User 93020 improves AUC. Keeping the model.
Training on augumented user 35154 3/50 current_auc = 0.581670362158167
User 35154 AUC after training: 0.5824094604582409
User 35154 improves AUC. Keeping the model.
Training on augumented user 82048 4/50 current_auc = 0.5824094604582409
User 82048 AUC after training: 0.5831485587583148
User 82048 improves AUC. Keeping the model.
Training on augumented user 126290 5/50 current_auc = 0.5831485587583148
User 126290 AUC after training: 0.5779748706577975
User 126290 does not improve AUC. Reverting changes.
Training on augumented user 2654 6/50 current_auc = 0.5831485587583148
User 2654 AUC after training: 0.5801921655580192
User 2654 does not improve AUC. Reverting changes.
Training on augumented user 108955 7/50 current_auc = 0.5831485587583148
User 108955 AUC after training: 0.5868440502586845
User 108955 improves AUC. Keeping the model.
Training on augumented user 135699 8/50 current_auc = 0.5868440502586845
User 135699 AUC after training: 0.5846267553584628
User 135699 does not improve AUC. Reverting changes.
Training on augumented user 25534 9/50 current_auc = 0.5868440502586845
User 25534 AUC after training: 0.5838876570583889
User 25534 does not improve AUC. Reverting changes.
Training on augumented user 77376 10/50 current_auc = 0.5868440502586845
User 77376 AUC after training: 0.5868440502586845
User 77376 does not improve AUC. Reverting changes.
Training on augumented user 21717 11/50 current_auc = 0.5868440502586845
User 21717 AUC after training: 0.5809312638580932
User 21717 does not improve AUC. Reverting changes.
Training on augumented user 40968 12/50 current_auc = 0.5868440502586845
User 40968 AUC after training: 0.5920177383592018
User 40968 improves AUC. Keeping the model.
Training on augumented user 93324 13/50 current_auc = 0.5920177383592018
User 93324 AUC after training: 0.5898004434589801
User 93324 does not improve AUC. Reverting changes.
Training on augumented user 66472 14/50 current_auc = 0.5920177383592018
User 66472 AUC after training: 0.5920177383592018
User 66472 does not improve AUC. Reverting changes.
Training on augumented user 120003 15/50 current_auc = 0.5920177383592018
User 120003 AUC after training: 0.5934959349593496
User 120003 improves AUC. Keeping the model.
Training on augumented user 73819 16/50 current_auc = 0.5934959349593496
User 73819 AUC after training: 0.5942350332594235
User 73819 improves AUC. Keeping the model.
Training on augumented user 54426 17/50 current_auc = 0.5942350332594235
User 54426 AUC after training: 0.5868440502586845
User 54426 does not improve AUC. Reverting changes.
Training on augumented user 78716 18/50 current_auc = 0.5942350332594235
User 78716 AUC after training: 0.5942350332594235
User 78716 does not improve AUC. Reverting changes.
Training on augumented user 101142 19/50 current_auc = 0.5942350332594235
User 101142 AUC after training: 0.5794530672579453
User 101142 does not improve AUC. Reverting changes.
Training on augumented user 117364 20/50 current_auc = 0.5942350332594235
User 117364 AUC after training: 0.5912786400591279
User 117364 does not improve AUC. Reverting changes.
Training on augumented user 40263 21/50 current_auc = 0.5942350332594235
User 40263 AUC after training: 0.5875831485587584
User 40263 does not improve AUC. Reverting changes.
Training on augumented user 31193 22/50 current_auc = 0.5942350332594235
User 31193 AUC after training: 0.5934959349593496
User 31193 does not improve AUC. Reverting changes.
Training on augumented user 94824 23/50 current_auc = 0.5942350332594235
User 94824 AUC after training: 0.5920177383592018
User 94824 does not improve AUC. Reverting changes.
Training on augumented user 16956 24/50 current_auc = 0.5942350332594235
User 16956 AUC after training: 0.5912786400591279
User 16956 does not improve AUC. Reverting changes.
Training on augumented user 101126 25/50 current_auc = 0.5942350332594235
User 101126 AUC after training: 0.5927568366592757
User 101126 does not improve AUC. Reverting changes.
Training on augumented user 32452 26/50 current_auc = 0.5942350332594235
User 32452 AUC after training: 0.5927568366592757
User 32452 does not improve AUC. Reverting changes.
Training on augumented user 33360 27/50 current_auc = 0.5942350332594235
User 33360 AUC after training: 0.5942350332594235
User 33360 does not improve AUC. Reverting changes.
Training on augumented user 94277 28/50 current_auc = 0.5942350332594235
User 94277 AUC after training: 0.5949741315594974
User 94277 improves AUC. Keeping the model.
Training on augumented user 100468 29/50 current_auc = 0.5949741315594974
User 100468 AUC after training: 0.5934959349593496
User 100468 does not improve AUC. Reverting changes.
Training on augumented user 47698 30/50 current_auc = 0.5949741315594974
User 47698 AUC after training: 0.590539541759054
User 47698 does not improve AUC. Reverting changes.
Training on augumented user 104313 31/50 current_auc = 0.5949741315594974
User 104313 AUC after training: 0.5949741315594974
User 104313 does not improve AUC. Reverting changes.
Training on augumented user 2765 32/50 current_auc = 0.5949741315594974
User 2765 AUC after training: 0.5942350332594235
User 2765 does not improve AUC. Reverting changes.
Training on augumented user 102722 33/50 current_auc = 0.5949741315594974
User 102722 AUC after training: 0.5949741315594975
User 102722 improves AUC. Keeping the model.
Training on augumented user 35180 34/50 current_auc = 0.5949741315594975
User 35180 AUC after training: 0.5949741315594974
User 35180 does not improve AUC. Reverting changes.
Training on augumented user 88313 35/50 current_auc = 0.5949741315594975
User 88313 AUC after training: 0.5898004434589801
User 88313 does not improve AUC. Reverting changes.
Training on augumented user 13058 36/50 current_auc = 0.5949741315594975
User 13058 AUC after training: 0.5964523281596453
User 13058 improves AUC. Keeping the model.
Training on augumented user 52063 37/50 current_auc = 0.5964523281596453
User 52063 AUC after training: 0.5979305247597931
User 52063 improves AUC. Keeping the model.
Training on augumented user 46078 38/50 current_auc = 0.5979305247597931
User 46078 AUC after training: 0.5986696230598669
User 46078 improves AUC. Keeping the model.
Training on augumented user 36608 39/50 current_auc = 0.5986696230598669
User 36608 AUC after training: 0.5994087213599408
User 36608 improves AUC. Keeping the model.
Training on augumented user 52016 40/50 current_auc = 0.5994087213599408
User 52016 AUC after training: 0.6008869179600886
User 52016 improves AUC. Keeping the model.
Training on augumented user 137484 41/50 current_auc = 0.6008869179600886
User 137484 AUC after training: 0.6008869179600886
User 137484 does not improve AUC. Reverting changes.
Training on augumented user 119819 42/50 current_auc = 0.6008869179600886
User 119819 AUC after training: 0.6031042128603105
User 119819 improves AUC. Keeping the model.
Training on augumented user 52467 43/50 current_auc = 0.6031042128603105
User 52467 AUC after training: 0.6001478196600147
User 52467 does not improve AUC. Reverting changes.
Training on augumented user 20978 44/50 current_auc = 0.6031042128603105
User 20978 AUC after training: 0.6038433111603844
User 20978 improves AUC. Keeping the model.
Training on augumented user 1942 45/50 current_auc = 0.6038433111603844
User 1942 AUC after training: 0.5898004434589801
User 1942 does not improve AUC. Reverting changes.
Training on augumented user 111994 46/50 current_auc = 0.6038433111603844
User 111994 AUC after training: 0.6023651145602364
User 111994 does not improve AUC. Reverting changes.
Training on augumented user 70328 47/50 current_auc = 0.6038433111603844
User 70328 AUC after training: 0.6023651145602364
User 70328 does not improve AUC. Reverting changes.
Training on augumented user 8882 48/50 current_auc = 0.6038433111603844
User 8882 AUC after training: 0.597930524759793
User 8882 does not improve AUC. Reverting changes.
Training on augumented user 62579 49/50 current_auc = 0.6038433111603844
User 62579 AUC after training: 0.5964523281596452
User 62579 does not improve AUC. Reverting changes.
[2024-12-02 20:13:09.375105] start test user 89406 287/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:13:09.993967] start test user 89406 287/568 recall augumented users by random, augumented_users = [14397, 101173, 127606, 113792, 115637, 8074, 13318, 9984, 31911, 102293, 130635, 128009, 41792, 56909, 116970, 6917, 101889, 122335, 61572, 34350, 22522, 80440, 49142, 7438, 13546, 114397, 87861, 45989, 64, 35442, 99435, 85401, 18629, 16107, 99362, 138250, 62323, 86648, 118399, 257, 128513, 107467, 5521, 59926, 69131, 52376, 19722, 33231, 82022, 106861]
[2024-12-02 20:13:10.016038] user = 89406 Cloud 287/568
[2024-12-02 20:13:10.048368] user = 89406 Local 287/568
[2024-12-02 20:13:10.205493] user = 89406 Local+ 287/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:13:13.250965] user = 89406 MPDA- 287/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7598755411255411
Training on augumented user 14397 0/50 current_auc = 0.7598755411255411
User 14397 AUC after training: 0.7586580086580086
User 14397 does not improve AUC. Reverting changes.
Training on augumented user 101173 1/50 current_auc = 0.7598755411255411
User 101173 AUC after training: 0.7591991341991341
User 101173 does not improve AUC. Reverting changes.
Training on augumented user 127606 2/50 current_auc = 0.7598755411255411
User 127606 AUC after training: 0.7589285714285714
User 127606 does not improve AUC. Reverting changes.
Training on augumented user 113792 3/50 current_auc = 0.7598755411255411
User 113792 AUC after training: 0.7593344155844155
User 113792 does not improve AUC. Reverting changes.
Training on augumented user 115637 4/50 current_auc = 0.7598755411255411
User 115637 AUC after training: 0.759469696969697
User 115637 does not improve AUC. Reverting changes.
Training on augumented user 8074 5/50 current_auc = 0.7598755411255411
User 8074 AUC after training: 0.7581168831168831
User 8074 does not improve AUC. Reverting changes.
Training on augumented user 13318 6/50 current_auc = 0.7598755411255411
User 13318 AUC after training: 0.7582521645021645
User 13318 does not improve AUC. Reverting changes.
Training on augumented user 9984 7/50 current_auc = 0.7598755411255411
User 9984 AUC after training: 0.7598755411255411
User 9984 does not improve AUC. Reverting changes.
Training on augumented user 31911 8/50 current_auc = 0.7598755411255411
User 31911 AUC after training: 0.759469696969697
User 31911 does not improve AUC. Reverting changes.
Training on augumented user 102293 9/50 current_auc = 0.7598755411255411
User 102293 AUC after training: 0.757711038961039
User 102293 does not improve AUC. Reverting changes.
Training on augumented user 130635 10/50 current_auc = 0.7598755411255411
User 130635 AUC after training: 0.7591991341991342
User 130635 does not improve AUC. Reverting changes.
Training on augumented user 128009 11/50 current_auc = 0.7598755411255411
User 128009 AUC after training: 0.7589285714285714
User 128009 does not improve AUC. Reverting changes.
Training on augumented user 41792 12/50 current_auc = 0.7598755411255411
User 41792 AUC after training: 0.7591991341991342
User 41792 does not improve AUC. Reverting changes.
Training on augumented user 56909 13/50 current_auc = 0.7598755411255411
User 56909 AUC after training: 0.759469696969697
User 56909 does not improve AUC. Reverting changes.
Training on augumented user 116970 14/50 current_auc = 0.7598755411255411
User 116970 AUC after training: 0.7600108225108225
User 116970 improves AUC. Keeping the model.
Training on augumented user 6917 15/50 current_auc = 0.7600108225108225
User 6917 AUC after training: 0.7601461038961039
User 6917 improves AUC. Keeping the model.
Training on augumented user 101889 16/50 current_auc = 0.7601461038961039
User 101889 AUC after training: 0.7600108225108225
User 101889 does not improve AUC. Reverting changes.
Training on augumented user 122335 17/50 current_auc = 0.7601461038961039
User 122335 AUC after training: 0.7600108225108225
User 122335 does not improve AUC. Reverting changes.
Training on augumented user 61572 18/50 current_auc = 0.7601461038961039
User 61572 AUC after training: 0.760551948051948
User 61572 improves AUC. Keeping the model.
Training on augumented user 34350 19/50 current_auc = 0.760551948051948
User 34350 AUC after training: 0.7621753246753247
User 34350 improves AUC. Keeping the model.
Training on augumented user 22522 20/50 current_auc = 0.7621753246753247
User 22522 AUC after training: 0.7621753246753247
User 22522 does not improve AUC. Reverting changes.
Training on augumented user 80440 21/50 current_auc = 0.7621753246753247
User 80440 AUC after training: 0.7623106060606061
User 80440 improves AUC. Keeping the model.
Training on augumented user 49142 22/50 current_auc = 0.7623106060606061
User 49142 AUC after training: 0.7623106060606061
User 49142 does not improve AUC. Reverting changes.
Training on augumented user 7438 23/50 current_auc = 0.7623106060606061
User 7438 AUC after training: 0.7620400432900433
User 7438 does not improve AUC. Reverting changes.
Training on augumented user 13546 24/50 current_auc = 0.7623106060606061
User 13546 AUC after training: 0.7625811688311688
User 13546 improves AUC. Keeping the model.
Training on augumented user 114397 25/50 current_auc = 0.7625811688311688
User 114397 AUC after training: 0.7624458874458875
User 114397 does not improve AUC. Reverting changes.
Training on augumented user 87861 26/50 current_auc = 0.7625811688311688
User 87861 AUC after training: 0.7609577922077921
User 87861 does not improve AUC. Reverting changes.
Training on augumented user 45989 27/50 current_auc = 0.7625811688311688
User 45989 AUC after training: 0.7612283549783551
User 45989 does not improve AUC. Reverting changes.
Training on augumented user 64 28/50 current_auc = 0.7625811688311688
User 64 AUC after training: 0.7625811688311688
User 64 does not improve AUC. Reverting changes.
Training on augumented user 35442 29/50 current_auc = 0.7625811688311688
User 35442 AUC after training: 0.7625811688311689
User 35442 improves AUC. Keeping the model.
Training on augumented user 99435 30/50 current_auc = 0.7625811688311689
User 99435 AUC after training: 0.7627164502164502
User 99435 improves AUC. Keeping the model.
Training on augumented user 85401 31/50 current_auc = 0.7627164502164502
User 85401 AUC after training: 0.7628517316017316
User 85401 improves AUC. Keeping the model.
Training on augumented user 18629 32/50 current_auc = 0.7628517316017316
User 18629 AUC after training: 0.7639339826839826
User 18629 improves AUC. Keeping the model.
Training on augumented user 16107 33/50 current_auc = 0.7639339826839826
User 16107 AUC after training: 0.7632575757575758
User 16107 does not improve AUC. Reverting changes.
Training on augumented user 99362 34/50 current_auc = 0.7639339826839826
User 99362 AUC after training: 0.7637987012987013
User 99362 does not improve AUC. Reverting changes.
Training on augumented user 138250 35/50 current_auc = 0.7639339826839826
User 138250 AUC after training: 0.7639339826839826
User 138250 does not improve AUC. Reverting changes.
Training on augumented user 62323 36/50 current_auc = 0.7639339826839826
User 62323 AUC after training: 0.7633928571428572
User 62323 does not improve AUC. Reverting changes.
Training on augumented user 86648 37/50 current_auc = 0.7639339826839826
User 86648 AUC after training: 0.7624458874458874
User 86648 does not improve AUC. Reverting changes.
Training on augumented user 118399 38/50 current_auc = 0.7639339826839826
User 118399 AUC after training: 0.7637987012987013
User 118399 does not improve AUC. Reverting changes.
Training on augumented user 257 39/50 current_auc = 0.7639339826839826
User 257 AUC after training: 0.7639339826839827
User 257 improves AUC. Keeping the model.
Training on augumented user 128513 40/50 current_auc = 0.7639339826839827
User 128513 AUC after training: 0.7635281385281384
User 128513 does not improve AUC. Reverting changes.
Training on augumented user 107467 41/50 current_auc = 0.7639339826839827
User 107467 AUC after training: 0.7610930735930737
User 107467 does not improve AUC. Reverting changes.
Training on augumented user 5521 42/50 current_auc = 0.7639339826839827
User 5521 AUC after training: 0.7637987012987012
User 5521 does not improve AUC. Reverting changes.
Training on augumented user 59926 43/50 current_auc = 0.7639339826839827
User 59926 AUC after training: 0.7628517316017317
User 59926 does not improve AUC. Reverting changes.
Training on augumented user 69131 44/50 current_auc = 0.7639339826839827
User 69131 AUC after training: 0.7632575757575758
User 69131 does not improve AUC. Reverting changes.
Training on augumented user 52376 45/50 current_auc = 0.7639339826839827
User 52376 AUC after training: 0.762987012987013
User 52376 does not improve AUC. Reverting changes.
Training on augumented user 19722 46/50 current_auc = 0.7639339826839827
User 19722 AUC after training: 0.7606872294372294
User 19722 does not improve AUC. Reverting changes.
Training on augumented user 33231 47/50 current_auc = 0.7639339826839827
User 33231 AUC after training: 0.7635281385281385
User 33231 does not improve AUC. Reverting changes.
Training on augumented user 82022 48/50 current_auc = 0.7639339826839827
User 82022 AUC after training: 0.7619047619047619
User 82022 does not improve AUC. Reverting changes.
Training on augumented user 106861 49/50 current_auc = 0.7639339826839827
User 106861 AUC after training: 0.7608225108225107
User 106861 does not improve AUC. Reverting changes.
[2024-12-02 20:13:45.494211] start test user 89442 288/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:13:46.103394] start test user 89442 288/568 recall augumented users by random, augumented_users = [131848, 103313, 91474, 74297, 95564, 98328, 78812, 5352, 76870, 79951, 6243, 91756, 113216, 20121, 40445, 131385, 44088, 131563, 28161, 49651, 105655, 40933, 1261, 35196, 109770, 48667, 113931, 56321, 46969, 85167, 127202, 22707, 77648, 9116, 33005, 107181, 134515, 23405, 53970, 13116, 92225, 83202, 65105, 67059, 51224, 36101, 107543, 32561, 85295, 5152]
[2024-12-02 20:13:46.119060] user = 89442 Cloud 288/568
[2024-12-02 20:13:46.165547] user = 89442 Local 288/568
[2024-12-02 20:13:46.286002] user = 89442 Local+ 288/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:13:49.036594] user = 89442 MPDA- 288/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6725380899293942
Training on augumented user 131848 0/50 current_auc = 0.6725380899293942
User 131848 AUC after training: 0.6728353771832032
User 131848 improves AUC. Keeping the model.
Training on augumented user 103313 1/50 current_auc = 0.6728353771832032
User 103313 AUC after training: 0.6725380899293942
User 103313 does not improve AUC. Reverting changes.
Training on augumented user 91474 2/50 current_auc = 0.6728353771832032
User 91474 AUC after training: 0.67305834262356
User 91474 improves AUC. Keeping the model.
Training on augumented user 74297 3/50 current_auc = 0.67305834262356
User 74297 AUC after training: 0.6714604236343367
User 74297 does not improve AUC. Reverting changes.
Training on augumented user 95564 4/50 current_auc = 0.67305834262356
User 95564 AUC after training: 0.6729468599033817
User 95564 does not improve AUC. Reverting changes.
Training on augumented user 98328 5/50 current_auc = 0.67305834262356
User 98328 AUC after training: 0.6729468599033815
User 98328 does not improve AUC. Reverting changes.
Training on augumented user 78812 6/50 current_auc = 0.67305834262356
User 78812 AUC after training: 0.6723151244890375
User 78812 does not improve AUC. Reverting changes.
Training on augumented user 5352 7/50 current_auc = 0.67305834262356
User 5352 AUC after training: 0.6716090672612411
User 5352 does not improve AUC. Reverting changes.
Training on augumented user 76870 8/50 current_auc = 0.67305834262356
User 76870 AUC after training: 0.6727610553697511
User 76870 does not improve AUC. Reverting changes.
Training on augumented user 79951 9/50 current_auc = 0.67305834262356
User 79951 AUC after training: 0.6729840208101078
User 79951 does not improve AUC. Reverting changes.
Training on augumented user 6243 10/50 current_auc = 0.67305834262356
User 6243 AUC after training: 0.6726495726495727
User 6243 does not improve AUC. Reverting changes.
Training on augumented user 91756 11/50 current_auc = 0.67305834262356
User 91756 AUC after training: 0.6732441471571906
User 91756 improves AUC. Keeping the model.
Training on augumented user 113216 12/50 current_auc = 0.6732441471571906
User 113216 AUC after training: 0.6719063545150502
User 113216 does not improve AUC. Reverting changes.
Training on augumented user 20121 13/50 current_auc = 0.6732441471571906
User 20121 AUC after training: 0.6729468599033817
User 20121 does not improve AUC. Reverting changes.
Training on augumented user 40445 14/50 current_auc = 0.6732441471571906
User 40445 AUC after training: 0.6732813080639167
User 40445 improves AUC. Keeping the model.
Training on augumented user 131385 15/50 current_auc = 0.6732813080639167
User 131385 AUC after training: 0.6735414344109996
User 131385 improves AUC. Keeping the model.
Training on augumented user 44088 16/50 current_auc = 0.6735414344109996
User 44088 AUC after training: 0.6737643998513564
User 44088 improves AUC. Keeping the model.
Training on augumented user 131563 17/50 current_auc = 0.6737643998513564
User 131563 AUC after training: 0.6738758825715347
User 131563 improves AUC. Keeping the model.
Training on augumented user 28161 18/50 current_auc = 0.6738758825715347
User 28161 AUC after training: 0.6740245261984391
User 28161 improves AUC. Keeping the model.
Training on augumented user 49651 19/50 current_auc = 0.6740245261984391
User 49651 AUC after training: 0.6737643998513564
User 49651 does not improve AUC. Reverting changes.
Training on augumented user 105655 20/50 current_auc = 0.6740245261984391
User 105655 AUC after training: 0.6740988480118916
User 105655 improves AUC. Keeping the model.
Training on augumented user 40933 21/50 current_auc = 0.6740988480118916
User 40933 AUC after training: 0.6742103307320698
User 40933 improves AUC. Keeping the model.
Training on augumented user 1261 22/50 current_auc = 0.6742103307320698
User 1261 AUC after training: 0.6739873652917131
User 1261 does not improve AUC. Reverting changes.
Training on augumented user 35196 23/50 current_auc = 0.6742103307320698
User 35196 AUC after training: 0.6740616871051653
User 35196 does not improve AUC. Reverting changes.
Training on augumented user 109770 24/50 current_auc = 0.6742103307320698
User 109770 AUC after training: 0.6739502043849869
User 109770 does not improve AUC. Reverting changes.
Training on augumented user 48667 25/50 current_auc = 0.6742103307320698
User 48667 AUC after training: 0.6740988480118916
User 48667 does not improve AUC. Reverting changes.
Training on augumented user 113931 26/50 current_auc = 0.6742103307320698
User 113931 AUC after training: 0.6740988480118916
User 113931 does not improve AUC. Reverting changes.
Training on augumented user 56321 27/50 current_auc = 0.6742103307320698
User 56321 AUC after training: 0.673950204384987
User 56321 does not improve AUC. Reverting changes.
Training on augumented user 46969 28/50 current_auc = 0.6742103307320698
User 46969 AUC after training: 0.6744332961724266
User 46969 improves AUC. Keeping the model.
Training on augumented user 85167 29/50 current_auc = 0.6744332961724266
User 85167 AUC after training: 0.6743218134522483
User 85167 does not improve AUC. Reverting changes.
Training on augumented user 127202 30/50 current_auc = 0.6744332961724266
User 127202 AUC after training: 0.6743589743589743
User 127202 does not improve AUC. Reverting changes.
Training on augumented user 22707 31/50 current_auc = 0.6744332961724266
User 22707 AUC after training: 0.673355629877369
User 22707 does not improve AUC. Reverting changes.
Training on augumented user 77648 32/50 current_auc = 0.6744332961724266
User 77648 AUC after training: 0.6744704570791527
User 77648 improves AUC. Keeping the model.
Training on augumented user 9116 33/50 current_auc = 0.6744704570791527
User 9116 AUC after training: 0.67123745819398
User 9116 does not improve AUC. Reverting changes.
Training on augumented user 33005 34/50 current_auc = 0.6744704570791527
User 33005 AUC after training: 0.6750650315867708
User 33005 improves AUC. Keeping the model.
Training on augumented user 107181 35/50 current_auc = 0.6750650315867708
User 107181 AUC after training: 0.6750278706800447
User 107181 does not improve AUC. Reverting changes.
Training on augumented user 134515 36/50 current_auc = 0.6750650315867708
User 134515 AUC after training: 0.6752508361204014
User 134515 improves AUC. Keeping the model.
Training on augumented user 23405 37/50 current_auc = 0.6752508361204014
User 23405 AUC after training: 0.6751765143069491
User 23405 does not improve AUC. Reverting changes.
Training on augumented user 53970 38/50 current_auc = 0.6752508361204014
User 53970 AUC after training: 0.6746191007060572
User 53970 does not improve AUC. Reverting changes.
Training on augumented user 13116 39/50 current_auc = 0.6752508361204014
User 13116 AUC after training: 0.6753994797473057
User 13116 improves AUC. Keeping the model.
Training on augumented user 92225 40/50 current_auc = 0.6753994797473057
User 92225 AUC after training: 0.6752508361204013
User 92225 does not improve AUC. Reverting changes.
Training on augumented user 83202 41/50 current_auc = 0.6753994797473057
User 83202 AUC after training: 0.6748792270531401
User 83202 does not improve AUC. Reverting changes.
Training on augumented user 65105 42/50 current_auc = 0.6753994797473057
User 65105 AUC after training: 0.6753994797473059
User 65105 improves AUC. Keeping the model.
Training on augumented user 67059 43/50 current_auc = 0.6753994797473059
User 67059 AUC after training: 0.6753251579338536
User 67059 does not improve AUC. Reverting changes.
Training on augumented user 51224 44/50 current_auc = 0.6753994797473059
User 51224 AUC after training: 0.6759940542549239
User 51224 improves AUC. Keeping the model.
Training on augumented user 36101 45/50 current_auc = 0.6759940542549239
User 36101 AUC after training: 0.6759940542549239
User 36101 does not improve AUC. Reverting changes.
Training on augumented user 107543 46/50 current_auc = 0.6759940542549239
User 107543 AUC after training: 0.6758454106280193
User 107543 does not improve AUC. Reverting changes.
Training on augumented user 32561 47/50 current_auc = 0.6759940542549239
User 32561 AUC after training: 0.675176514306949
User 32561 does not improve AUC. Reverting changes.
Training on augumented user 85295 48/50 current_auc = 0.6759940542549239
User 85295 AUC after training: 0.6761798587885545
User 85295 improves AUC. Keeping the model.
Training on augumented user 5152 49/50 current_auc = 0.6761798587885545
User 5152 AUC after training: 0.6756967670011149
User 5152 does not improve AUC. Reverting changes.
[2024-12-02 20:14:13.838076] start test user 89454 289/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:14:14.564688] start test user 89454 289/568 recall augumented users by random, augumented_users = [78278, 10517, 41916, 97015, 30508, 89487, 84135, 773, 133147, 115842, 30835, 105427, 14354, 69128, 39086, 77320, 37810, 15077, 44092, 115410, 89122, 107731, 75895, 111292, 37284, 78643, 26290, 102365, 87985, 48286, 105784, 97804, 11454, 69622, 8212, 129676, 119279, 7645, 114070, 82520, 123638, 50414, 49638, 56876, 112600, 4345, 2604, 103891, 118466, 50056]
[2024-12-02 20:14:14.604138] user = 89454 Cloud 289/568
[2024-12-02 20:14:14.698103] user = 89454 Local 289/568
[2024-12-02 20:14:14.882161] user = 89454 Local+ 289/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:14:16.941727] user = 89454 MPDA- 289/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5736482471776589
Training on augumented user 78278 0/50 current_auc = 0.5736482471776589
User 78278 AUC after training: 0.5734997029114676
User 78278 does not improve AUC. Reverting changes.
Training on augumented user 10517 1/50 current_auc = 0.5736482471776589
User 10517 AUC after training: 0.5732620320855615
User 10517 does not improve AUC. Reverting changes.
Training on augumented user 41916 2/50 current_auc = 0.5736482471776589
User 41916 AUC after training: 0.5734699940582293
User 41916 does not improve AUC. Reverting changes.
Training on augumented user 97015 3/50 current_auc = 0.5736482471776589
User 97015 AUC after training: 0.5732026143790849
User 97015 does not improve AUC. Reverting changes.
Training on augumented user 30508 4/50 current_auc = 0.5736482471776589
User 30508 AUC after training: 0.5732323232323232
User 30508 does not improve AUC. Reverting changes.
Training on augumented user 89487 5/50 current_auc = 0.5736482471776589
User 89487 AUC after training: 0.5739750445632799
User 89487 improves AUC. Keeping the model.
Training on augumented user 84135 6/50 current_auc = 0.5739750445632799
User 84135 AUC after training: 0.5735888294711824
User 84135 does not improve AUC. Reverting changes.
Training on augumented user 773 7/50 current_auc = 0.5739750445632799
User 773 AUC after training: 0.5737373737373738
User 773 does not improve AUC. Reverting changes.
Training on augumented user 133147 8/50 current_auc = 0.5739750445632799
User 133147 AUC after training: 0.5740344622697564
User 133147 improves AUC. Keeping the model.
Training on augumented user 115842 9/50 current_auc = 0.5740344622697564
User 115842 AUC after training: 0.5735591206179441
User 115842 does not improve AUC. Reverting changes.
Training on augumented user 30835 10/50 current_auc = 0.5740344622697564
User 30835 AUC after training: 0.5745989304812834
User 30835 improves AUC. Keeping the model.
Training on augumented user 105427 11/50 current_auc = 0.5745989304812834
User 105427 AUC after training: 0.5746583481877598
User 105427 improves AUC. Keeping the model.
Training on augumented user 14354 12/50 current_auc = 0.5746583481877598
User 14354 AUC after training: 0.5745989304812834
User 14354 does not improve AUC. Reverting changes.
Training on augumented user 69128 13/50 current_auc = 0.5746583481877598
User 69128 AUC after training: 0.5738562091503268
User 69128 does not improve AUC. Reverting changes.
Training on augumented user 39086 14/50 current_auc = 0.5746583481877598
User 39086 AUC after training: 0.5746880570409982
User 39086 improves AUC. Keeping the model.
Training on augumented user 77320 15/50 current_auc = 0.5746880570409982
User 77320 AUC after training: 0.574777183600713
User 77320 improves AUC. Keeping the model.
Training on augumented user 37810 16/50 current_auc = 0.574777183600713
User 37810 AUC after training: 0.5743612596553773
User 37810 does not improve AUC. Reverting changes.
Training on augumented user 15077 17/50 current_auc = 0.574777183600713
User 15077 AUC after training: 0.5744206773618539
User 15077 does not improve AUC. Reverting changes.
Training on augumented user 44092 18/50 current_auc = 0.574777183600713
User 44092 AUC after training: 0.5740641711229946
User 44092 does not improve AUC. Reverting changes.
Training on augumented user 115410 19/50 current_auc = 0.574777183600713
User 115410 AUC after training: 0.574004753416518
User 115410 does not improve AUC. Reverting changes.
Training on augumented user 89122 20/50 current_auc = 0.574777183600713
User 89122 AUC after training: 0.5741830065359477
User 89122 does not improve AUC. Reverting changes.
Training on augumented user 107731 21/50 current_auc = 0.574777183600713
User 107731 AUC after training: 0.5743018419489008
User 107731 does not improve AUC. Reverting changes.
Training on augumented user 75895 22/50 current_auc = 0.574777183600713
User 75895 AUC after training: 0.574450386215092
User 75895 does not improve AUC. Reverting changes.
Training on augumented user 111292 23/50 current_auc = 0.574777183600713
User 111292 AUC after training: 0.5745098039215686
User 111292 does not improve AUC. Reverting changes.
Training on augumented user 37284 24/50 current_auc = 0.574777183600713
User 37284 AUC after training: 0.5749554367201426
User 37284 improves AUC. Keeping the model.
Training on augumented user 78643 25/50 current_auc = 0.5749554367201426
User 78643 AUC after training: 0.5745692216280451
User 78643 does not improve AUC. Reverting changes.
Training on augumented user 26290 26/50 current_auc = 0.5749554367201426
User 26290 AUC after training: 0.5739453357100416
User 26290 does not improve AUC. Reverting changes.
Training on augumented user 102365 27/50 current_auc = 0.5749554367201426
User 102365 AUC after training: 0.5745395127748069
User 102365 does not improve AUC. Reverting changes.
Training on augumented user 87985 28/50 current_auc = 0.5749554367201426
User 87985 AUC after training: 0.574777183600713
User 87985 does not improve AUC. Reverting changes.
Training on augumented user 48286 29/50 current_auc = 0.5749554367201426
User 48286 AUC after training: 0.5750297088532382
User 48286 improves AUC. Keeping the model.
Training on augumented user 105784 30/50 current_auc = 0.5750297088532382
User 105784 AUC after training: 0.5747474747474748
User 105784 does not improve AUC. Reverting changes.
Training on augumented user 97804 31/50 current_auc = 0.5750297088532382
User 97804 AUC after training: 0.5740641711229947
User 97804 does not improve AUC. Reverting changes.
Training on augumented user 11454 32/50 current_auc = 0.5750297088532382
User 11454 AUC after training: 0.5745395127748069
User 11454 does not improve AUC. Reverting changes.
Training on augumented user 69622 33/50 current_auc = 0.5750297088532382
User 69622 AUC after training: 0.5752525252525252
User 69622 improves AUC. Keeping the model.
Training on augumented user 8212 34/50 current_auc = 0.5752525252525252
User 8212 AUC after training: 0.5745692216280451
User 8212 does not improve AUC. Reverting changes.
Training on augumented user 129676 35/50 current_auc = 0.5752525252525252
User 129676 AUC after training: 0.5750148544266191
User 129676 does not improve AUC. Reverting changes.
Training on augumented user 119279 36/50 current_auc = 0.5752525252525252
User 119279 AUC after training: 0.5745395127748069
User 119279 does not improve AUC. Reverting changes.
Training on augumented user 7645 37/50 current_auc = 0.5752525252525252
User 7645 AUC after training: 0.5751336898395722
User 7645 does not improve AUC. Reverting changes.
Training on augumented user 114070 38/50 current_auc = 0.5752525252525252
User 114070 AUC after training: 0.5746880570409982
User 114070 does not improve AUC. Reverting changes.
Training on augumented user 82520 39/50 current_auc = 0.5752525252525252
User 82520 AUC after training: 0.5754901960784313
User 82520 improves AUC. Keeping the model.
Training on augumented user 123638 40/50 current_auc = 0.5754901960784313
User 123638 AUC after training: 0.5742424242424242
User 123638 does not improve AUC. Reverting changes.
Training on augumented user 50414 41/50 current_auc = 0.5754901960784313
User 50414 AUC after training: 0.5747177658942365
User 50414 does not improve AUC. Reverting changes.
Training on augumented user 49638 42/50 current_auc = 0.5754901960784313
User 49638 AUC after training: 0.5750742721330957
User 49638 does not improve AUC. Reverting changes.
Training on augumented user 56876 43/50 current_auc = 0.5754901960784313
User 56876 AUC after training: 0.5751633986928104
User 56876 does not improve AUC. Reverting changes.
Training on augumented user 112600 44/50 current_auc = 0.5754901960784313
User 112600 AUC after training: 0.5750445632798573
User 112600 does not improve AUC. Reverting changes.
Training on augumented user 4345 45/50 current_auc = 0.5754901960784313
User 4345 AUC after training: 0.575222816399287
User 4345 does not improve AUC. Reverting changes.
Training on augumented user 2604 46/50 current_auc = 0.5754901960784313
User 2604 AUC after training: 0.5749257278669043
User 2604 does not improve AUC. Reverting changes.
Training on augumented user 103891 47/50 current_auc = 0.5754901960784313
User 103891 AUC after training: 0.5746286393345217
User 103891 does not improve AUC. Reverting changes.
Training on augumented user 118466 48/50 current_auc = 0.5754901960784313
User 118466 AUC after training: 0.5739750445632799
User 118466 does not improve AUC. Reverting changes.
Training on augumented user 50056 49/50 current_auc = 0.5754901960784313
User 50056 AUC after training: 0.5748663101604278
User 50056 does not improve AUC. Reverting changes.
[2024-12-02 20:14:47.832384] start test user 89459 290/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:14:48.610246] start test user 89459 290/568 recall augumented users by random, augumented_users = [18470, 105417, 133906, 62382, 122209, 21467, 69347, 37968, 20252, 46907, 79258, 136953, 94157, 103364, 31738, 73320, 3430, 4986, 70052, 8021, 19508, 89901, 96836, 45752, 49506, 48568, 100890, 61925, 12127, 44984, 10780, 64943, 104422, 74145, 114440, 96021, 136122, 6790, 57637, 67722, 16030, 86284, 95023, 127255, 40674, 127479, 16346, 6659, 63685, 23584]
[2024-12-02 20:14:48.625856] user = 89459 Cloud 290/568
[2024-12-02 20:14:48.687372] user = 89459 Local 290/568
[2024-12-02 20:14:48.859947] user = 89459 Local+ 290/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:14:51.119242] user = 89459 MPDA- 290/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7247904339250493
Training on augumented user 18470 0/50 current_auc = 0.7247904339250493
User 18470 AUC after training: 0.7246055226824457
User 18470 does not improve AUC. Reverting changes.
Training on augumented user 105417 1/50 current_auc = 0.7247904339250493
User 105417 AUC after training: 0.7256533530571992
User 105417 improves AUC. Keeping the model.
Training on augumented user 133906 2/50 current_auc = 0.7256533530571992
User 133906 AUC after training: 0.7262080867850098
User 133906 improves AUC. Keeping the model.
Training on augumented user 62382 3/50 current_auc = 0.7262080867850098
User 62382 AUC after training: 0.7265779092702169
User 62382 improves AUC. Keeping the model.
Training on augumented user 122209 4/50 current_auc = 0.7265779092702169
User 122209 AUC after training: 0.7270710059171597
User 122209 improves AUC. Keeping the model.
Training on augumented user 21467 5/50 current_auc = 0.7270710059171597
User 21467 AUC after training: 0.7266395463510849
User 21467 does not improve AUC. Reverting changes.
Training on augumented user 69347 6/50 current_auc = 0.7270710059171597
User 69347 AUC after training: 0.7266395463510849
User 69347 does not improve AUC. Reverting changes.
Training on augumented user 37968 7/50 current_auc = 0.7270710059171597
User 37968 AUC after training: 0.7268244575936884
User 37968 does not improve AUC. Reverting changes.
Training on augumented user 20252 8/50 current_auc = 0.7270710059171597
User 20252 AUC after training: 0.7268860946745561
User 20252 does not improve AUC. Reverting changes.
Training on augumented user 46907 9/50 current_auc = 0.7270710059171597
User 46907 AUC after training: 0.7275024654832347
User 46907 improves AUC. Keeping the model.
Training on augumented user 79258 10/50 current_auc = 0.7275024654832347
User 79258 AUC after training: 0.7263313609467456
User 79258 does not improve AUC. Reverting changes.
Training on augumented user 136953 11/50 current_auc = 0.7275024654832347
User 136953 AUC after training: 0.7271942800788955
User 136953 does not improve AUC. Reverting changes.
Training on augumented user 94157 12/50 current_auc = 0.7275024654832347
User 94157 AUC after training: 0.7281496548323472
User 94157 improves AUC. Keeping the model.
Training on augumented user 103364 13/50 current_auc = 0.7281496548323472
User 103364 AUC after training: 0.7287043885601577
User 103364 improves AUC. Keeping the model.
Training on augumented user 31738 14/50 current_auc = 0.7287043885601577
User 31738 AUC after training: 0.7278722879684418
User 31738 does not improve AUC. Reverting changes.
Training on augumented user 73320 15/50 current_auc = 0.7287043885601577
User 73320 AUC after training: 0.7289509368836291
User 73320 improves AUC. Keeping the model.
Training on augumented user 3430 16/50 current_auc = 0.7289509368836291
User 3430 AUC after training: 0.7290742110453649
User 3430 improves AUC. Keeping the model.
Training on augumented user 4986 17/50 current_auc = 0.7290742110453649
User 4986 AUC after training: 0.7289817554240632
User 4986 does not improve AUC. Reverting changes.
Training on augumented user 70052 18/50 current_auc = 0.7290742110453649
User 70052 AUC after training: 0.728242110453649
User 70052 does not improve AUC. Reverting changes.
Training on augumented user 8021 19/50 current_auc = 0.7290742110453649
User 8021 AUC after training: 0.7291666666666666
User 8021 improves AUC. Keeping the model.
Training on augumented user 19508 20/50 current_auc = 0.7291666666666666
User 19508 AUC after training: 0.7288584812623274
User 19508 does not improve AUC. Reverting changes.
Training on augumented user 89901 21/50 current_auc = 0.7291666666666666
User 89901 AUC after training: 0.7291666666666666
User 89901 does not improve AUC. Reverting changes.
Training on augumented user 96836 22/50 current_auc = 0.7291666666666666
User 96836 AUC after training: 0.7291666666666665
User 96836 does not improve AUC. Reverting changes.
Training on augumented user 45752 23/50 current_auc = 0.7291666666666666
User 45752 AUC after training: 0.7292899408284024
User 45752 improves AUC. Keeping the model.
Training on augumented user 49506 24/50 current_auc = 0.7292899408284024
User 49506 AUC after training: 0.7295364891518736
User 49506 improves AUC. Keeping the model.
Training on augumented user 48568 25/50 current_auc = 0.7295364891518736
User 48568 AUC after training: 0.7281188362919132
User 48568 does not improve AUC. Reverting changes.
Training on augumented user 100890 26/50 current_auc = 0.7295364891518736
User 100890 AUC after training: 0.7291666666666665
User 100890 does not improve AUC. Reverting changes.
Training on augumented user 61925 27/50 current_auc = 0.7295364891518736
User 61925 AUC after training: 0.7297830374753451
User 61925 improves AUC. Keeping the model.
Training on augumented user 12127 28/50 current_auc = 0.7297830374753451
User 12127 AUC after training: 0.7289817554240632
User 12127 does not improve AUC. Reverting changes.
Training on augumented user 44984 29/50 current_auc = 0.7297830374753451
User 44984 AUC after training: 0.729783037475345
User 44984 does not improve AUC. Reverting changes.
Training on augumented user 10780 30/50 current_auc = 0.7297830374753451
User 10780 AUC after training: 0.729844674556213
User 10780 improves AUC. Keeping the model.
Training on augumented user 64943 31/50 current_auc = 0.729844674556213
User 64943 AUC after training: 0.7295364891518736
User 64943 does not improve AUC. Reverting changes.
Training on augumented user 104422 32/50 current_auc = 0.729844674556213
User 104422 AUC after training: 0.73021449704142
User 104422 improves AUC. Keeping the model.
Training on augumented user 74145 33/50 current_auc = 0.73021449704142
User 74145 AUC after training: 0.7293207593688362
User 74145 does not improve AUC. Reverting changes.
Training on augumented user 114440 34/50 current_auc = 0.73021449704142
User 114440 AUC after training: 0.730676775147929
User 114440 improves AUC. Keeping the model.
Training on augumented user 96021 35/50 current_auc = 0.730676775147929
User 96021 AUC after training: 0.730676775147929
User 96021 does not improve AUC. Reverting changes.
Training on augumented user 136122 36/50 current_auc = 0.730676775147929
User 136122 AUC after training: 0.7303685897435898
User 136122 does not improve AUC. Reverting changes.
Training on augumented user 6790 37/50 current_auc = 0.730676775147929
User 6790 AUC after training: 0.7303377712031558
User 6790 does not improve AUC. Reverting changes.
Training on augumented user 57637 38/50 current_auc = 0.730676775147929
User 57637 AUC after training: 0.7310157790927021
User 57637 improves AUC. Keeping the model.
Training on augumented user 67722 39/50 current_auc = 0.7310157790927021
User 67722 AUC after training: 0.7295364891518737
User 67722 does not improve AUC. Reverting changes.
Training on augumented user 16030 40/50 current_auc = 0.7310157790927021
User 16030 AUC after training: 0.7313856015779092
User 16030 improves AUC. Keeping the model.
Training on augumented user 86284 41/50 current_auc = 0.7313856015779092
User 86284 AUC after training: 0.7314472386587771
User 86284 improves AUC. Keeping the model.
Training on augumented user 95023 42/50 current_auc = 0.7314472386587771
User 95023 AUC after training: 0.7320019723865878
User 95023 improves AUC. Keeping the model.
Training on augumented user 127255 43/50 current_auc = 0.7320019723865878
User 127255 AUC after training: 0.7324950690335305
User 127255 improves AUC. Keeping the model.
Training on augumented user 40674 44/50 current_auc = 0.7324950690335305
User 40674 AUC after training: 0.7316937869822484
User 40674 does not improve AUC. Reverting changes.
Training on augumented user 127479 45/50 current_auc = 0.7324950690335305
User 127479 AUC after training: 0.7318170611439843
User 127479 does not improve AUC. Reverting changes.
Training on augumented user 16346 46/50 current_auc = 0.7324950690335305
User 16346 AUC after training: 0.7323717948717949
User 16346 does not improve AUC. Reverting changes.
Training on augumented user 6659 47/50 current_auc = 0.7324950690335305
User 6659 AUC after training: 0.732310157790927
User 6659 does not improve AUC. Reverting changes.
Training on augumented user 63685 48/50 current_auc = 0.7324950690335305
User 63685 AUC after training: 0.7325567061143985
User 63685 improves AUC. Keeping the model.
Training on augumented user 23584 49/50 current_auc = 0.7325567061143985
User 23584 AUC after training: 0.7324334319526626
User 23584 does not improve AUC. Reverting changes.
[2024-12-02 20:15:22.709243] start test user 89460 291/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:15:23.132615] start test user 89460 291/568 recall augumented users by random, augumented_users = [102392, 133477, 123274, 44212, 64316, 14047, 41396, 83862, 21480, 112988, 12405, 11845, 84861, 44249, 5771, 81381, 71535, 116948, 98259, 111997, 34710, 27774, 83809, 36415, 44927, 73388, 16635, 94812, 62998, 18227, 10733, 137464, 34535, 14753, 59310, 75979, 62356, 91444, 136079, 24339, 63538, 20831, 42946, 52640, 2836, 96479, 92916, 86181, 136053, 47027]
[2024-12-02 20:15:23.147539] user = 89460 Cloud 291/568
[2024-12-02 20:15:23.157278] user = 89460 Local 291/568
[2024-12-02 20:15:23.235624] user = 89460 Local+ 291/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:15:25.942762] user = 89460 MPDA- 291/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6277173913043479
Training on augumented user 102392 0/50 current_auc = 0.6277173913043479
User 102392 AUC after training: 0.6277173913043479
User 102392 does not improve AUC. Reverting changes.
Training on augumented user 133477 1/50 current_auc = 0.6277173913043479
User 133477 AUC after training: 0.6277173913043479
User 133477 does not improve AUC. Reverting changes.
Training on augumented user 123274 2/50 current_auc = 0.6277173913043479
User 123274 AUC after training: 0.6304347826086957
User 123274 improves AUC. Keeping the model.
Training on augumented user 44212 3/50 current_auc = 0.6304347826086957
User 44212 AUC after training: 0.6304347826086957
User 44212 does not improve AUC. Reverting changes.
Training on augumented user 64316 4/50 current_auc = 0.6304347826086957
User 64316 AUC after training: 0.6331521739130436
User 64316 improves AUC. Keeping the model.
Training on augumented user 14047 5/50 current_auc = 0.6331521739130436
User 14047 AUC after training: 0.6331521739130436
User 14047 does not improve AUC. Reverting changes.
Training on augumented user 41396 6/50 current_auc = 0.6331521739130436
User 41396 AUC after training: 0.6331521739130436
User 41396 does not improve AUC. Reverting changes.
Training on augumented user 83862 7/50 current_auc = 0.6331521739130436
User 83862 AUC after training: 0.6331521739130436
User 83862 does not improve AUC. Reverting changes.
Training on augumented user 21480 8/50 current_auc = 0.6331521739130436
User 21480 AUC after training: 0.6277173913043479
User 21480 does not improve AUC. Reverting changes.
Training on augumented user 112988 9/50 current_auc = 0.6331521739130436
User 112988 AUC after training: 0.641304347826087
User 112988 improves AUC. Keeping the model.
Training on augumented user 12405 10/50 current_auc = 0.641304347826087
User 12405 AUC after training: 0.6413043478260869
User 12405 does not improve AUC. Reverting changes.
Training on augumented user 11845 11/50 current_auc = 0.641304347826087
User 11845 AUC after training: 0.641304347826087
User 11845 does not improve AUC. Reverting changes.
Training on augumented user 84861 12/50 current_auc = 0.641304347826087
User 84861 AUC after training: 0.641304347826087
User 84861 does not improve AUC. Reverting changes.
Training on augumented user 44249 13/50 current_auc = 0.641304347826087
User 44249 AUC after training: 0.6440217391304348
User 44249 improves AUC. Keeping the model.
Training on augumented user 5771 14/50 current_auc = 0.6440217391304348
User 5771 AUC after training: 0.6467391304347827
User 5771 improves AUC. Keeping the model.
Training on augumented user 81381 15/50 current_auc = 0.6467391304347827
User 81381 AUC after training: 0.6440217391304348
User 81381 does not improve AUC. Reverting changes.
Training on augumented user 71535 16/50 current_auc = 0.6467391304347827
User 71535 AUC after training: 0.6467391304347827
User 71535 does not improve AUC. Reverting changes.
Training on augumented user 116948 17/50 current_auc = 0.6467391304347827
User 116948 AUC after training: 0.6467391304347827
User 116948 does not improve AUC. Reverting changes.
Training on augumented user 98259 18/50 current_auc = 0.6467391304347827
User 98259 AUC after training: 0.6467391304347827
User 98259 does not improve AUC. Reverting changes.
Training on augumented user 111997 19/50 current_auc = 0.6467391304347827
User 111997 AUC after training: 0.6467391304347827
User 111997 does not improve AUC. Reverting changes.
Training on augumented user 34710 20/50 current_auc = 0.6467391304347827
User 34710 AUC after training: 0.6440217391304348
User 34710 does not improve AUC. Reverting changes.
Training on augumented user 27774 21/50 current_auc = 0.6467391304347827
User 27774 AUC after training: 0.6467391304347827
User 27774 does not improve AUC. Reverting changes.
Training on augumented user 83809 22/50 current_auc = 0.6467391304347827
User 83809 AUC after training: 0.6467391304347827
User 83809 does not improve AUC. Reverting changes.
Training on augumented user 36415 23/50 current_auc = 0.6467391304347827
User 36415 AUC after training: 0.6467391304347827
User 36415 does not improve AUC. Reverting changes.
Training on augumented user 44927 24/50 current_auc = 0.6467391304347827
User 44927 AUC after training: 0.6413043478260869
User 44927 does not improve AUC. Reverting changes.
Training on augumented user 73388 25/50 current_auc = 0.6467391304347827
User 73388 AUC after training: 0.6467391304347827
User 73388 does not improve AUC. Reverting changes.
Training on augumented user 16635 26/50 current_auc = 0.6467391304347827
User 16635 AUC after training: 0.6494565217391305
User 16635 improves AUC. Keeping the model.
Training on augumented user 94812 27/50 current_auc = 0.6494565217391305
User 94812 AUC after training: 0.6440217391304348
User 94812 does not improve AUC. Reverting changes.
Training on augumented user 62998 28/50 current_auc = 0.6494565217391305
User 62998 AUC after training: 0.6494565217391305
User 62998 does not improve AUC. Reverting changes.
Training on augumented user 18227 29/50 current_auc = 0.6494565217391305
User 18227 AUC after training: 0.6494565217391305
User 18227 does not improve AUC. Reverting changes.
Training on augumented user 10733 30/50 current_auc = 0.6494565217391305
User 10733 AUC after training: 0.6467391304347826
User 10733 does not improve AUC. Reverting changes.
Training on augumented user 137464 31/50 current_auc = 0.6494565217391305
User 137464 AUC after training: 0.6467391304347826
User 137464 does not improve AUC. Reverting changes.
Training on augumented user 34535 32/50 current_auc = 0.6494565217391305
User 34535 AUC after training: 0.6467391304347827
User 34535 does not improve AUC. Reverting changes.
Training on augumented user 14753 33/50 current_auc = 0.6494565217391305
User 14753 AUC after training: 0.6467391304347827
User 14753 does not improve AUC. Reverting changes.
Training on augumented user 59310 34/50 current_auc = 0.6494565217391305
User 59310 AUC after training: 0.6494565217391305
User 59310 does not improve AUC. Reverting changes.
Training on augumented user 75979 35/50 current_auc = 0.6494565217391305
User 75979 AUC after training: 0.6494565217391305
User 75979 does not improve AUC. Reverting changes.
Training on augumented user 62356 36/50 current_auc = 0.6494565217391305
User 62356 AUC after training: 0.6467391304347827
User 62356 does not improve AUC. Reverting changes.
Training on augumented user 91444 37/50 current_auc = 0.6494565217391305
User 91444 AUC after training: 0.6440217391304348
User 91444 does not improve AUC. Reverting changes.
Training on augumented user 136079 38/50 current_auc = 0.6494565217391305
User 136079 AUC after training: 0.6467391304347827
User 136079 does not improve AUC. Reverting changes.
Training on augumented user 24339 39/50 current_auc = 0.6494565217391305
User 24339 AUC after training: 0.6494565217391305
User 24339 does not improve AUC. Reverting changes.
Training on augumented user 63538 40/50 current_auc = 0.6494565217391305
User 63538 AUC after training: 0.6358695652173912
User 63538 does not improve AUC. Reverting changes.
Training on augumented user 20831 41/50 current_auc = 0.6494565217391305
User 20831 AUC after training: 0.6440217391304348
User 20831 does not improve AUC. Reverting changes.
Training on augumented user 42946 42/50 current_auc = 0.6494565217391305
User 42946 AUC after training: 0.6358695652173914
User 42946 does not improve AUC. Reverting changes.
Training on augumented user 52640 43/50 current_auc = 0.6494565217391305
User 52640 AUC after training: 0.6467391304347827
User 52640 does not improve AUC. Reverting changes.
Training on augumented user 2836 44/50 current_auc = 0.6494565217391305
User 2836 AUC after training: 0.6467391304347826
User 2836 does not improve AUC. Reverting changes.
Training on augumented user 96479 45/50 current_auc = 0.6494565217391305
User 96479 AUC after training: 0.6467391304347827
User 96479 does not improve AUC. Reverting changes.
Training on augumented user 92916 46/50 current_auc = 0.6494565217391305
User 92916 AUC after training: 0.641304347826087
User 92916 does not improve AUC. Reverting changes.
Training on augumented user 86181 47/50 current_auc = 0.6494565217391305
User 86181 AUC after training: 0.6467391304347827
User 86181 does not improve AUC. Reverting changes.
Training on augumented user 136053 48/50 current_auc = 0.6494565217391305
User 136053 AUC after training: 0.6494565217391305
User 136053 does not improve AUC. Reverting changes.
Training on augumented user 47027 49/50 current_auc = 0.6494565217391305
User 47027 AUC after training: 0.6494565217391305
User 47027 does not improve AUC. Reverting changes.
[2024-12-02 20:15:55.020631] start test user 89501 292/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:15:55.655399] start test user 89501 292/568 recall augumented users by random, augumented_users = [68667, 48805, 35650, 4485, 101560, 89900, 119963, 94268, 35586, 44700, 97998, 11054, 57584, 37830, 133697, 65986, 55529, 48078, 5854, 62227, 100599, 111352, 62250, 94062, 16046, 4500, 108394, 76912, 106289, 68703, 70518, 101422, 97861, 18545, 42774, 63367, 42145, 19628, 43163, 38227, 26225, 10166, 60901, 24173, 38153, 46419, 10542, 19497, 137747, 68858]
[2024-12-02 20:15:55.670077] user = 89501 Cloud 292/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:15:55.675929] user = 89501 Local 292/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:15:55.705420] user = 89501 Local+ 292/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:15:57.447452] user = 89501 MPDA- 292/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 68667 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68667 AUC after training: 0.5
User 68667 does not improve AUC. Reverting changes.
Training on augumented user 48805 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48805 AUC after training: 0.5
User 48805 does not improve AUC. Reverting changes.
Training on augumented user 35650 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35650 AUC after training: 0.5
User 35650 does not improve AUC. Reverting changes.
Training on augumented user 4485 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4485 AUC after training: 0.5
User 4485 does not improve AUC. Reverting changes.
Training on augumented user 101560 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101560 AUC after training: 0.5
User 101560 does not improve AUC. Reverting changes.
Training on augumented user 89900 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89900 AUC after training: 0.5
User 89900 does not improve AUC. Reverting changes.
Training on augumented user 119963 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119963 AUC after training: 0.5
User 119963 does not improve AUC. Reverting changes.
Training on augumented user 94268 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94268 AUC after training: 0.5
User 94268 does not improve AUC. Reverting changes.
Training on augumented user 35586 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35586 AUC after training: 0.5
User 35586 does not improve AUC. Reverting changes.
Training on augumented user 44700 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44700 AUC after training: 0.5
User 44700 does not improve AUC. Reverting changes.
Training on augumented user 97998 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97998 AUC after training: 0.5
User 97998 does not improve AUC. Reverting changes.
Training on augumented user 11054 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11054 AUC after training: 0.5
User 11054 does not improve AUC. Reverting changes.
Training on augumented user 57584 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57584 AUC after training: 0.5
User 57584 does not improve AUC. Reverting changes.
Training on augumented user 37830 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37830 AUC after training: 0.5
User 37830 does not improve AUC. Reverting changes.
Training on augumented user 133697 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133697 AUC after training: 0.5
User 133697 does not improve AUC. Reverting changes.
Training on augumented user 65986 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65986 AUC after training: 0.5
User 65986 does not improve AUC. Reverting changes.
Training on augumented user 55529 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55529 AUC after training: 0.5
User 55529 does not improve AUC. Reverting changes.
Training on augumented user 48078 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48078 AUC after training: 0.5
User 48078 does not improve AUC. Reverting changes.
Training on augumented user 5854 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5854 AUC after training: 0.5
User 5854 does not improve AUC. Reverting changes.
Training on augumented user 62227 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62227 AUC after training: 0.5
User 62227 does not improve AUC. Reverting changes.
Training on augumented user 100599 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100599 AUC after training: 0.5
User 100599 does not improve AUC. Reverting changes.
Training on augumented user 111352 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111352 AUC after training: 0.5
User 111352 does not improve AUC. Reverting changes.
Training on augumented user 62250 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62250 AUC after training: 0.5
User 62250 does not improve AUC. Reverting changes.
Training on augumented user 94062 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94062 AUC after training: 0.5
User 94062 does not improve AUC. Reverting changes.
Training on augumented user 16046 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16046 AUC after training: 0.5
User 16046 does not improve AUC. Reverting changes.
Training on augumented user 4500 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4500 AUC after training: 0.5
User 4500 does not improve AUC. Reverting changes.
Training on augumented user 108394 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108394 AUC after training: 0.5
User 108394 does not improve AUC. Reverting changes.
Training on augumented user 76912 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76912 AUC after training: 0.5
User 76912 does not improve AUC. Reverting changes.
Training on augumented user 106289 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106289 AUC after training: 0.5
User 106289 does not improve AUC. Reverting changes.
Training on augumented user 68703 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68703 AUC after training: 0.5
User 68703 does not improve AUC. Reverting changes.
Training on augumented user 70518 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70518 AUC after training: 0.5
User 70518 does not improve AUC. Reverting changes.
Training on augumented user 101422 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101422 AUC after training: 0.5
User 101422 does not improve AUC. Reverting changes.
Training on augumented user 97861 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97861 AUC after training: 0.5
User 97861 does not improve AUC. Reverting changes.
Training on augumented user 18545 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18545 AUC after training: 0.5
User 18545 does not improve AUC. Reverting changes.
Training on augumented user 42774 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42774 AUC after training: 0.5
User 42774 does not improve AUC. Reverting changes.
Training on augumented user 63367 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63367 AUC after training: 0.5
User 63367 does not improve AUC. Reverting changes.
Training on augumented user 42145 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42145 AUC after training: 0.5
User 42145 does not improve AUC. Reverting changes.
Training on augumented user 19628 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19628 AUC after training: 0.5
User 19628 does not improve AUC. Reverting changes.
Training on augumented user 43163 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43163 AUC after training: 0.5
User 43163 does not improve AUC. Reverting changes.
Training on augumented user 38227 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38227 AUC after training: 0.5
User 38227 does not improve AUC. Reverting changes.
Training on augumented user 26225 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26225 AUC after training: 0.5
User 26225 does not improve AUC. Reverting changes.
Training on augumented user 10166 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10166 AUC after training: 0.5
User 10166 does not improve AUC. Reverting changes.
Training on augumented user 60901 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60901 AUC after training: 0.5
User 60901 does not improve AUC. Reverting changes.
Training on augumented user 24173 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24173 AUC after training: 0.5
User 24173 does not improve AUC. Reverting changes.
Training on augumented user 38153 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38153 AUC after training: 0.5
User 38153 does not improve AUC. Reverting changes.
Training on augumented user 46419 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46419 AUC after training: 0.5
User 46419 does not improve AUC. Reverting changes.
Training on augumented user 10542 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10542 AUC after training: 0.5
User 10542 does not improve AUC. Reverting changes.
Training on augumented user 19497 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19497 AUC after training: 0.5
User 19497 does not improve AUC. Reverting changes.
Training on augumented user 137747 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137747 AUC after training: 0.5
User 137747 does not improve AUC. Reverting changes.
Training on augumented user 68858 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68858 AUC after training: 0.5
User 68858 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:16:24.283138] start test user 89520 293/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:16:24.789545] start test user 89520 293/568 recall augumented users by random, augumented_users = [22188, 1971, 4120, 55392, 86224, 16641, 134672, 12026, 53413, 91577, 51524, 48982, 106782, 119374, 26004, 69910, 35510, 14078, 15520, 120129, 4440, 110132, 46511, 7135, 73224, 121786, 859, 5856, 9046, 125546, 100583, 76118, 109618, 107725, 135094, 29798, 127855, 8376, 111725, 72019, 107750, 16443, 22606, 70467, 36775, 67240, 20267, 120767, 73315, 9411]
[2024-12-02 20:16:24.824143] user = 89520 Cloud 293/568
[2024-12-02 20:16:24.856254] user = 89520 Local 293/568
[2024-12-02 20:16:24.915617] user = 89520 Local+ 293/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:16:27.628413] user = 89520 MPDA- 293/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5972027972027971
Training on augumented user 22188 0/50 current_auc = 0.5972027972027971
User 22188 AUC after training: 0.598001998001998
User 22188 improves AUC. Keeping the model.
Training on augumented user 1971 1/50 current_auc = 0.598001998001998
User 1971 AUC after training: 0.5982017982017982
User 1971 improves AUC. Keeping the model.
Training on augumented user 4120 2/50 current_auc = 0.5982017982017982
User 4120 AUC after training: 0.5974025974025974
User 4120 does not improve AUC. Reverting changes.
Training on augumented user 55392 3/50 current_auc = 0.5982017982017982
User 55392 AUC after training: 0.5986013986013986
User 55392 improves AUC. Keeping the model.
Training on augumented user 86224 4/50 current_auc = 0.5986013986013986
User 86224 AUC after training: 0.5976023976023975
User 86224 does not improve AUC. Reverting changes.
Training on augumented user 16641 5/50 current_auc = 0.5986013986013986
User 16641 AUC after training: 0.5986013986013986
User 16641 does not improve AUC. Reverting changes.
Training on augumented user 134672 6/50 current_auc = 0.5986013986013986
User 134672 AUC after training: 0.5988011988011989
User 134672 improves AUC. Keeping the model.
Training on augumented user 12026 7/50 current_auc = 0.5988011988011989
User 12026 AUC after training: 0.5978021978021978
User 12026 does not improve AUC. Reverting changes.
Training on augumented user 53413 8/50 current_auc = 0.5988011988011989
User 53413 AUC after training: 0.5962037962037962
User 53413 does not improve AUC. Reverting changes.
Training on augumented user 91577 9/50 current_auc = 0.5988011988011989
User 91577 AUC after training: 0.5988011988011988
User 91577 does not improve AUC. Reverting changes.
Training on augumented user 51524 10/50 current_auc = 0.5988011988011989
User 51524 AUC after training: 0.5980019980019979
User 51524 does not improve AUC. Reverting changes.
Training on augumented user 48982 11/50 current_auc = 0.5988011988011989
User 48982 AUC after training: 0.5984015984015983
User 48982 does not improve AUC. Reverting changes.
Training on augumented user 106782 12/50 current_auc = 0.5988011988011989
User 106782 AUC after training: 0.5954045954045953
User 106782 does not improve AUC. Reverting changes.
Training on augumented user 119374 13/50 current_auc = 0.5988011988011989
User 119374 AUC after training: 0.5974025974025974
User 119374 does not improve AUC. Reverting changes.
Training on augumented user 26004 14/50 current_auc = 0.5988011988011989
User 26004 AUC after training: 0.5986013986013986
User 26004 does not improve AUC. Reverting changes.
Training on augumented user 69910 15/50 current_auc = 0.5988011988011989
User 69910 AUC after training: 0.5974025974025974
User 69910 does not improve AUC. Reverting changes.
Training on augumented user 35510 16/50 current_auc = 0.5988011988011989
User 35510 AUC after training: 0.5968031968031967
User 35510 does not improve AUC. Reverting changes.
Training on augumented user 14078 17/50 current_auc = 0.5988011988011989
User 14078 AUC after training: 0.5988011988011988
User 14078 does not improve AUC. Reverting changes.
Training on augumented user 15520 18/50 current_auc = 0.5988011988011989
User 15520 AUC after training: 0.598001998001998
User 15520 does not improve AUC. Reverting changes.
Training on augumented user 120129 19/50 current_auc = 0.5988011988011989
User 120129 AUC after training: 0.5982017982017981
User 120129 does not improve AUC. Reverting changes.
Training on augumented user 4440 20/50 current_auc = 0.5988011988011989
User 4440 AUC after training: 0.5986013986013986
User 4440 does not improve AUC. Reverting changes.
Training on augumented user 110132 21/50 current_auc = 0.5988011988011989
User 110132 AUC after training: 0.5984015984015985
User 110132 does not improve AUC. Reverting changes.
Training on augumented user 46511 22/50 current_auc = 0.5988011988011989
User 46511 AUC after training: 0.5982017982017981
User 46511 does not improve AUC. Reverting changes.
Training on augumented user 7135 23/50 current_auc = 0.5988011988011989
User 7135 AUC after training: 0.5986013986013986
User 7135 does not improve AUC. Reverting changes.
Training on augumented user 73224 24/50 current_auc = 0.5988011988011989
User 73224 AUC after training: 0.5988011988011989
User 73224 does not improve AUC. Reverting changes.
Training on augumented user 121786 25/50 current_auc = 0.5988011988011989
User 121786 AUC after training: 0.5986013986013986
User 121786 does not improve AUC. Reverting changes.
Training on augumented user 859 26/50 current_auc = 0.5988011988011989
User 859 AUC after training: 0.5988011988011988
User 859 does not improve AUC. Reverting changes.
Training on augumented user 5856 27/50 current_auc = 0.5988011988011989
User 5856 AUC after training: 0.5994005994005994
User 5856 improves AUC. Keeping the model.
Training on augumented user 9046 28/50 current_auc = 0.5994005994005994
User 9046 AUC after training: 0.5992007992007993
User 9046 does not improve AUC. Reverting changes.
Training on augumented user 125546 29/50 current_auc = 0.5994005994005994
User 125546 AUC after training: 0.5980019980019979
User 125546 does not improve AUC. Reverting changes.
Training on augumented user 100583 30/50 current_auc = 0.5994005994005994
User 100583 AUC after training: 0.5978021978021979
User 100583 does not improve AUC. Reverting changes.
Training on augumented user 76118 31/50 current_auc = 0.5994005994005994
User 76118 AUC after training: 0.5966033966033966
User 76118 does not improve AUC. Reverting changes.
Training on augumented user 109618 32/50 current_auc = 0.5994005994005994
User 109618 AUC after training: 0.599000999000999
User 109618 does not improve AUC. Reverting changes.
Training on augumented user 107725 33/50 current_auc = 0.5994005994005994
User 107725 AUC after training: 0.5976023976023975
User 107725 does not improve AUC. Reverting changes.
Training on augumented user 135094 34/50 current_auc = 0.5994005994005994
User 135094 AUC after training: 0.5980019980019979
User 135094 does not improve AUC. Reverting changes.
Training on augumented user 29798 35/50 current_auc = 0.5994005994005994
User 29798 AUC after training: 0.5992007992007993
User 29798 does not improve AUC. Reverting changes.
Training on augumented user 127855 36/50 current_auc = 0.5994005994005994
User 127855 AUC after training: 0.5982017982017982
User 127855 does not improve AUC. Reverting changes.
Training on augumented user 8376 37/50 current_auc = 0.5994005994005994
User 8376 AUC after training: 0.5984015984015983
User 8376 does not improve AUC. Reverting changes.
Training on augumented user 111725 38/50 current_auc = 0.5994005994005994
User 111725 AUC after training: 0.5992007992007993
User 111725 does not improve AUC. Reverting changes.
Training on augumented user 72019 39/50 current_auc = 0.5994005994005994
User 72019 AUC after training: 0.5992007992007992
User 72019 does not improve AUC. Reverting changes.
Training on augumented user 107750 40/50 current_auc = 0.5994005994005994
User 107750 AUC after training: 0.599000999000999
User 107750 does not improve AUC. Reverting changes.
Training on augumented user 16443 41/50 current_auc = 0.5994005994005994
User 16443 AUC after training: 0.5982017982017982
User 16443 does not improve AUC. Reverting changes.
Training on augumented user 22606 42/50 current_auc = 0.5994005994005994
User 22606 AUC after training: 0.5988011988011988
User 22606 does not improve AUC. Reverting changes.
Training on augumented user 70467 43/50 current_auc = 0.5994005994005994
User 70467 AUC after training: 0.5992007992007992
User 70467 does not improve AUC. Reverting changes.
Training on augumented user 36775 44/50 current_auc = 0.5994005994005994
User 36775 AUC after training: 0.5986013986013986
User 36775 does not improve AUC. Reverting changes.
Training on augumented user 67240 45/50 current_auc = 0.5994005994005994
User 67240 AUC after training: 0.5984015984015983
User 67240 does not improve AUC. Reverting changes.
Training on augumented user 20267 46/50 current_auc = 0.5994005994005994
User 20267 AUC after training: 0.598001998001998
User 20267 does not improve AUC. Reverting changes.
Training on augumented user 120767 47/50 current_auc = 0.5994005994005994
User 120767 AUC after training: 0.5990009990009989
User 120767 does not improve AUC. Reverting changes.
Training on augumented user 73315 48/50 current_auc = 0.5994005994005994
User 73315 AUC after training: 0.5988011988011989
User 73315 does not improve AUC. Reverting changes.
Training on augumented user 9411 49/50 current_auc = 0.5994005994005994
User 9411 AUC after training: 0.5984015984015983
User 9411 does not improve AUC. Reverting changes.
[2024-12-02 20:16:55.751716] start test user 89527 294/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:16:56.171066] start test user 89527 294/568 recall augumented users by random, augumented_users = [18016, 130592, 64700, 59309, 13543, 66690, 75470, 82186, 8891, 45864, 32506, 49372, 105237, 32620, 62331, 18551, 34323, 15018, 103622, 137617, 40692, 90283, 27590, 130453, 99182, 30312, 42718, 82864, 71751, 77151, 51925, 26875, 89981, 18063, 19745, 18687, 25999, 87298, 121379, 17961, 26642, 99130, 13328, 78640, 44498, 76559, 107800, 14172, 16319, 68388]
[2024-12-02 20:16:56.186467] user = 89527 Cloud 294/568
[2024-12-02 20:16:56.200272] user = 89527 Local 294/568
[2024-12-02 20:16:56.238801] user = 89527 Local+ 294/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:16:58.416172] user = 89527 MPDA- 294/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5437735849056604
Training on augumented user 18016 0/50 current_auc = 0.5437735849056604
User 18016 AUC after training: 0.5445283018867925
User 18016 improves AUC. Keeping the model.
Training on augumented user 130592 1/50 current_auc = 0.5445283018867925
User 130592 AUC after training: 0.5430188679245282
User 130592 does not improve AUC. Reverting changes.
Training on augumented user 64700 2/50 current_auc = 0.5445283018867925
User 64700 AUC after training: 0.5456603773584906
User 64700 improves AUC. Keeping the model.
Training on augumented user 59309 3/50 current_auc = 0.5456603773584906
User 59309 AUC after training: 0.5452830188679245
User 59309 does not improve AUC. Reverting changes.
Training on augumented user 13543 4/50 current_auc = 0.5456603773584906
User 13543 AUC after training: 0.5437735849056604
User 13543 does not improve AUC. Reverting changes.
Training on augumented user 66690 5/50 current_auc = 0.5456603773584906
User 66690 AUC after training: 0.5445283018867925
User 66690 does not improve AUC. Reverting changes.
Training on augumented user 75470 6/50 current_auc = 0.5456603773584906
User 75470 AUC after training: 0.5452830188679245
User 75470 does not improve AUC. Reverting changes.
Training on augumented user 82186 7/50 current_auc = 0.5456603773584906
User 82186 AUC after training: 0.5445283018867925
User 82186 does not improve AUC. Reverting changes.
Training on augumented user 8891 8/50 current_auc = 0.5456603773584906
User 8891 AUC after training: 0.5456603773584906
User 8891 does not improve AUC. Reverting changes.
Training on augumented user 45864 9/50 current_auc = 0.5456603773584906
User 45864 AUC after training: 0.5437735849056603
User 45864 does not improve AUC. Reverting changes.
Training on augumented user 32506 10/50 current_auc = 0.5456603773584906
User 32506 AUC after training: 0.5441509433962264
User 32506 does not improve AUC. Reverting changes.
Training on augumented user 49372 11/50 current_auc = 0.5456603773584906
User 49372 AUC after training: 0.5441509433962264
User 49372 does not improve AUC. Reverting changes.
Training on augumented user 105237 12/50 current_auc = 0.5456603773584906
User 105237 AUC after training: 0.5433962264150943
User 105237 does not improve AUC. Reverting changes.
Training on augumented user 32620 13/50 current_auc = 0.5456603773584906
User 32620 AUC after training: 0.5437735849056604
User 32620 does not improve AUC. Reverting changes.
Training on augumented user 62331 14/50 current_auc = 0.5456603773584906
User 62331 AUC after training: 0.5430188679245282
User 62331 does not improve AUC. Reverting changes.
Training on augumented user 18551 15/50 current_auc = 0.5456603773584906
User 18551 AUC after training: 0.5467924528301886
User 18551 improves AUC. Keeping the model.
Training on augumented user 34323 16/50 current_auc = 0.5467924528301886
User 34323 AUC after training: 0.5445283018867925
User 34323 does not improve AUC. Reverting changes.
Training on augumented user 15018 17/50 current_auc = 0.5467924528301886
User 15018 AUC after training: 0.5464150943396227
User 15018 does not improve AUC. Reverting changes.
Training on augumented user 103622 18/50 current_auc = 0.5467924528301886
User 103622 AUC after training: 0.5460377358490566
User 103622 does not improve AUC. Reverting changes.
Training on augumented user 137617 19/50 current_auc = 0.5467924528301886
User 137617 AUC after training: 0.5441509433962264
User 137617 does not improve AUC. Reverting changes.
Training on augumented user 40692 20/50 current_auc = 0.5467924528301886
User 40692 AUC after training: 0.5452830188679245
User 40692 does not improve AUC. Reverting changes.
Training on augumented user 90283 21/50 current_auc = 0.5467924528301886
User 90283 AUC after training: 0.5467924528301886
User 90283 does not improve AUC. Reverting changes.
Training on augumented user 27590 22/50 current_auc = 0.5467924528301886
User 27590 AUC after training: 0.5464150943396227
User 27590 does not improve AUC. Reverting changes.
Training on augumented user 130453 23/50 current_auc = 0.5467924528301886
User 130453 AUC after training: 0.5452830188679245
User 130453 does not improve AUC. Reverting changes.
Training on augumented user 99182 24/50 current_auc = 0.5467924528301886
User 99182 AUC after training: 0.5449056603773584
User 99182 does not improve AUC. Reverting changes.
Training on augumented user 30312 25/50 current_auc = 0.5467924528301886
User 30312 AUC after training: 0.5449056603773585
User 30312 does not improve AUC. Reverting changes.
Training on augumented user 42718 26/50 current_auc = 0.5467924528301886
User 42718 AUC after training: 0.5456603773584906
User 42718 does not improve AUC. Reverting changes.
Training on augumented user 82864 27/50 current_auc = 0.5467924528301886
User 82864 AUC after training: 0.5452830188679245
User 82864 does not improve AUC. Reverting changes.
Training on augumented user 71751 28/50 current_auc = 0.5467924528301886
User 71751 AUC after training: 0.5460377358490566
User 71751 does not improve AUC. Reverting changes.
Training on augumented user 77151 29/50 current_auc = 0.5467924528301886
User 77151 AUC after training: 0.5456603773584906
User 77151 does not improve AUC. Reverting changes.
Training on augumented user 51925 30/50 current_auc = 0.5467924528301886
User 51925 AUC after training: 0.5467924528301886
User 51925 does not improve AUC. Reverting changes.
Training on augumented user 26875 31/50 current_auc = 0.5467924528301886
User 26875 AUC after training: 0.5460377358490567
User 26875 does not improve AUC. Reverting changes.
Training on augumented user 89981 32/50 current_auc = 0.5467924528301886
User 89981 AUC after training: 0.5471698113207547
User 89981 improves AUC. Keeping the model.
Training on augumented user 18063 33/50 current_auc = 0.5471698113207547
User 18063 AUC after training: 0.5467924528301886
User 18063 does not improve AUC. Reverting changes.
Training on augumented user 19745 34/50 current_auc = 0.5471698113207547
User 19745 AUC after training: 0.5467924528301887
User 19745 does not improve AUC. Reverting changes.
Training on augumented user 18687 35/50 current_auc = 0.5471698113207547
User 18687 AUC after training: 0.5464150943396227
User 18687 does not improve AUC. Reverting changes.
Training on augumented user 25999 36/50 current_auc = 0.5471698113207547
User 25999 AUC after training: 0.5467924528301886
User 25999 does not improve AUC. Reverting changes.
Training on augumented user 87298 37/50 current_auc = 0.5471698113207547
User 87298 AUC after training: 0.5475471698113208
User 87298 improves AUC. Keeping the model.
Training on augumented user 121379 38/50 current_auc = 0.5475471698113208
User 121379 AUC after training: 0.5449056603773585
User 121379 does not improve AUC. Reverting changes.
Training on augumented user 17961 39/50 current_auc = 0.5475471698113208
User 17961 AUC after training: 0.5479245283018868
User 17961 improves AUC. Keeping the model.
Training on augumented user 26642 40/50 current_auc = 0.5479245283018868
User 26642 AUC after training: 0.5483018867924528
User 26642 improves AUC. Keeping the model.
Training on augumented user 99130 41/50 current_auc = 0.5483018867924528
User 99130 AUC after training: 0.5483018867924528
User 99130 does not improve AUC. Reverting changes.
Training on augumented user 13328 42/50 current_auc = 0.5483018867924528
User 13328 AUC after training: 0.5483018867924528
User 13328 does not improve AUC. Reverting changes.
Training on augumented user 78640 43/50 current_auc = 0.5483018867924528
User 78640 AUC after training: 0.5483018867924528
User 78640 does not improve AUC. Reverting changes.
Training on augumented user 44498 44/50 current_auc = 0.5483018867924528
User 44498 AUC after training: 0.5475471698113207
User 44498 does not improve AUC. Reverting changes.
Training on augumented user 76559 45/50 current_auc = 0.5483018867924528
User 76559 AUC after training: 0.5475471698113208
User 76559 does not improve AUC. Reverting changes.
Training on augumented user 107800 46/50 current_auc = 0.5483018867924528
User 107800 AUC after training: 0.5490566037735849
User 107800 improves AUC. Keeping the model.
Training on augumented user 14172 47/50 current_auc = 0.5490566037735849
User 14172 AUC after training: 0.5479245283018868
User 14172 does not improve AUC. Reverting changes.
Training on augumented user 16319 48/50 current_auc = 0.5490566037735849
User 16319 AUC after training: 0.5471698113207548
User 16319 does not improve AUC. Reverting changes.
Training on augumented user 68388 49/50 current_auc = 0.5490566037735849
User 68388 AUC after training: 0.5483018867924528
User 68388 does not improve AUC. Reverting changes.
[2024-12-02 20:17:22.905629] start test user 89529 295/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:17:23.337361] start test user 89529 295/568 recall augumented users by random, augumented_users = [39603, 113589, 18825, 42091, 93460, 32884, 32722, 40099, 65705, 48416, 716, 24782, 84628, 12719, 10610, 99303, 51783, 62959, 111334, 126952, 8825, 8346, 31402, 68689, 79310, 64336, 30563, 50132, 87587, 136995, 115714, 108580, 137637, 74854, 76655, 133618, 82063, 110112, 89562, 23312, 97182, 133859, 4441, 123222, 37316, 56349, 50900, 48614, 78462, 104347]
[2024-12-02 20:17:23.352565] user = 89529 Cloud 295/568
[2024-12-02 20:17:23.366743] user = 89529 Local 295/568
[2024-12-02 20:17:23.394973] user = 89529 Local+ 295/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:17:25.746701] user = 89529 MPDA- 295/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.3933333333333334
Training on augumented user 39603 0/50 current_auc = 0.3933333333333334
User 39603 AUC after training: 0.3918518518518519
User 39603 does not improve AUC. Reverting changes.
Training on augumented user 113589 1/50 current_auc = 0.3933333333333334
User 113589 AUC after training: 0.3933333333333334
User 113589 does not improve AUC. Reverting changes.
Training on augumented user 18825 2/50 current_auc = 0.3933333333333334
User 18825 AUC after training: 0.39296296296296307
User 18825 does not improve AUC. Reverting changes.
Training on augumented user 42091 3/50 current_auc = 0.3933333333333334
User 42091 AUC after training: 0.3937037037037038
User 42091 improves AUC. Keeping the model.
Training on augumented user 93460 4/50 current_auc = 0.3937037037037038
User 93460 AUC after training: 0.3937037037037038
User 93460 does not improve AUC. Reverting changes.
Training on augumented user 32884 5/50 current_auc = 0.3937037037037038
User 32884 AUC after training: 0.3937037037037038
User 32884 does not improve AUC. Reverting changes.
Training on augumented user 32722 6/50 current_auc = 0.3937037037037038
User 32722 AUC after training: 0.3937037037037038
User 32722 does not improve AUC. Reverting changes.
Training on augumented user 40099 7/50 current_auc = 0.3937037037037038
User 40099 AUC after training: 0.39407407407407413
User 40099 improves AUC. Keeping the model.
Training on augumented user 65705 8/50 current_auc = 0.39407407407407413
User 65705 AUC after training: 0.39222222222222225
User 65705 does not improve AUC. Reverting changes.
Training on augumented user 48416 9/50 current_auc = 0.39407407407407413
User 48416 AUC after training: 0.39296296296296307
User 48416 does not improve AUC. Reverting changes.
Training on augumented user 716 10/50 current_auc = 0.39407407407407413
User 716 AUC after training: 0.3937037037037038
User 716 does not improve AUC. Reverting changes.
Training on augumented user 24782 11/50 current_auc = 0.39407407407407413
User 24782 AUC after training: 0.39407407407407413
User 24782 does not improve AUC. Reverting changes.
Training on augumented user 84628 12/50 current_auc = 0.39407407407407413
User 84628 AUC after training: 0.39407407407407413
User 84628 does not improve AUC. Reverting changes.
Training on augumented user 12719 13/50 current_auc = 0.39407407407407413
User 12719 AUC after training: 0.3933333333333334
User 12719 does not improve AUC. Reverting changes.
Training on augumented user 10610 14/50 current_auc = 0.39407407407407413
User 10610 AUC after training: 0.39407407407407413
User 10610 does not improve AUC. Reverting changes.
Training on augumented user 99303 15/50 current_auc = 0.39407407407407413
User 99303 AUC after training: 0.3933333333333334
User 99303 does not improve AUC. Reverting changes.
Training on augumented user 51783 16/50 current_auc = 0.39407407407407413
User 51783 AUC after training: 0.39481481481481484
User 51783 improves AUC. Keeping the model.
Training on augumented user 62959 17/50 current_auc = 0.39481481481481484
User 62959 AUC after training: 0.39481481481481484
User 62959 does not improve AUC. Reverting changes.
Training on augumented user 111334 18/50 current_auc = 0.39481481481481484
User 111334 AUC after training: 0.39481481481481484
User 111334 does not improve AUC. Reverting changes.
Training on augumented user 126952 19/50 current_auc = 0.39481481481481484
User 126952 AUC after training: 0.3940740740740741
User 126952 does not improve AUC. Reverting changes.
Training on augumented user 8825 20/50 current_auc = 0.39481481481481484
User 8825 AUC after training: 0.3944444444444445
User 8825 does not improve AUC. Reverting changes.
Training on augumented user 8346 21/50 current_auc = 0.39481481481481484
User 8346 AUC after training: 0.39333333333333337
User 8346 does not improve AUC. Reverting changes.
Training on augumented user 31402 22/50 current_auc = 0.39481481481481484
User 31402 AUC after training: 0.39481481481481484
User 31402 does not improve AUC. Reverting changes.
Training on augumented user 68689 23/50 current_auc = 0.39481481481481484
User 68689 AUC after training: 0.3940740740740741
User 68689 does not improve AUC. Reverting changes.
Training on augumented user 79310 24/50 current_auc = 0.39481481481481484
User 79310 AUC after training: 0.3940740740740741
User 79310 does not improve AUC. Reverting changes.
Training on augumented user 64336 25/50 current_auc = 0.39481481481481484
User 64336 AUC after training: 0.39481481481481484
User 64336 does not improve AUC. Reverting changes.
Training on augumented user 30563 26/50 current_auc = 0.39481481481481484
User 30563 AUC after training: 0.3933333333333334
User 30563 does not improve AUC. Reverting changes.
Training on augumented user 50132 27/50 current_auc = 0.39481481481481484
User 50132 AUC after training: 0.39333333333333337
User 50132 does not improve AUC. Reverting changes.
Training on augumented user 87587 28/50 current_auc = 0.39481481481481484
User 87587 AUC after training: 0.39481481481481484
User 87587 does not improve AUC. Reverting changes.
Training on augumented user 136995 29/50 current_auc = 0.39481481481481484
User 136995 AUC after training: 0.39555555555555555
User 136995 improves AUC. Keeping the model.
Training on augumented user 115714 30/50 current_auc = 0.39555555555555555
User 115714 AUC after training: 0.39555555555555555
User 115714 does not improve AUC. Reverting changes.
Training on augumented user 108580 31/50 current_auc = 0.39555555555555555
User 108580 AUC after training: 0.39481481481481484
User 108580 does not improve AUC. Reverting changes.
Training on augumented user 137637 32/50 current_auc = 0.39555555555555555
User 137637 AUC after training: 0.3951851851851853
User 137637 does not improve AUC. Reverting changes.
Training on augumented user 74854 33/50 current_auc = 0.39555555555555555
User 74854 AUC after training: 0.39481481481481484
User 74854 does not improve AUC. Reverting changes.
Training on augumented user 76655 34/50 current_auc = 0.39555555555555555
User 76655 AUC after training: 0.39481481481481484
User 76655 does not improve AUC. Reverting changes.
Training on augumented user 133618 35/50 current_auc = 0.39555555555555555
User 133618 AUC after training: 0.39555555555555555
User 133618 does not improve AUC. Reverting changes.
Training on augumented user 82063 36/50 current_auc = 0.39555555555555555
User 82063 AUC after training: 0.39592592592592596
User 82063 improves AUC. Keeping the model.
Training on augumented user 110112 37/50 current_auc = 0.39592592592592596
User 110112 AUC after training: 0.3944444444444445
User 110112 does not improve AUC. Reverting changes.
Training on augumented user 89562 38/50 current_auc = 0.39592592592592596
User 89562 AUC after training: 0.3937037037037037
User 89562 does not improve AUC. Reverting changes.
Training on augumented user 23312 39/50 current_auc = 0.39592592592592596
User 23312 AUC after training: 0.3951851851851853
User 23312 does not improve AUC. Reverting changes.
Training on augumented user 97182 40/50 current_auc = 0.39592592592592596
User 97182 AUC after training: 0.3944444444444445
User 97182 does not improve AUC. Reverting changes.
Training on augumented user 133859 41/50 current_auc = 0.39592592592592596
User 133859 AUC after training: 0.39592592592592596
User 133859 does not improve AUC. Reverting changes.
Training on augumented user 4441 42/50 current_auc = 0.39592592592592596
User 4441 AUC after training: 0.39555555555555555
User 4441 does not improve AUC. Reverting changes.
Training on augumented user 123222 43/50 current_auc = 0.39592592592592596
User 123222 AUC after training: 0.39592592592592596
User 123222 does not improve AUC. Reverting changes.
Training on augumented user 37316 44/50 current_auc = 0.39592592592592596
User 37316 AUC after training: 0.3951851851851852
User 37316 does not improve AUC. Reverting changes.
Training on augumented user 56349 45/50 current_auc = 0.39592592592592596
User 56349 AUC after training: 0.39555555555555555
User 56349 does not improve AUC. Reverting changes.
Training on augumented user 50900 46/50 current_auc = 0.39592592592592596
User 50900 AUC after training: 0.3951851851851853
User 50900 does not improve AUC. Reverting changes.
Training on augumented user 48614 47/50 current_auc = 0.39592592592592596
User 48614 AUC after training: 0.39555555555555555
User 48614 does not improve AUC. Reverting changes.
Training on augumented user 78462 48/50 current_auc = 0.39592592592592596
User 78462 AUC after training: 0.3937037037037038
User 78462 does not improve AUC. Reverting changes.
Training on augumented user 104347 49/50 current_auc = 0.39592592592592596
User 104347 AUC after training: 0.395925925925926
User 104347 improves AUC. Keeping the model.
[2024-12-02 20:17:48.311261] start test user 89564 296/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:17:48.881322] start test user 89564 296/568 recall augumented users by random, augumented_users = [31749, 31687, 33867, 108049, 129836, 60888, 113334, 47025, 123736, 29588, 86614, 82301, 9719, 134513, 98488, 122762, 114643, 75734, 60401, 44551, 27811, 79518, 17167, 63143, 1708, 9135, 126411, 67410, 119947, 128011, 81882, 17692, 64165, 115249, 111388, 15421, 80485, 131562, 76134, 94310, 40870, 36324, 77696, 56270, 79007, 34904, 39817, 64542, 57371, 63183]
[2024-12-02 20:17:48.898347] user = 89564 Cloud 296/568
[2024-12-02 20:17:48.912212] user = 89564 Local 296/568
[2024-12-02 20:17:49.106245] user = 89564 Local+ 296/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:17:52.041619] user = 89564 MPDA- 296/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.688421052631579
Training on augumented user 31749 0/50 current_auc = 0.688421052631579
User 31749 AUC after training: 0.688421052631579
User 31749 does not improve AUC. Reverting changes.
Training on augumented user 31687 1/50 current_auc = 0.688421052631579
User 31687 AUC after training: 0.688421052631579
User 31687 does not improve AUC. Reverting changes.
Training on augumented user 33867 2/50 current_auc = 0.688421052631579
User 33867 AUC after training: 0.6886842105263159
User 33867 improves AUC. Keeping the model.
Training on augumented user 108049 3/50 current_auc = 0.6886842105263159
User 108049 AUC after training: 0.6881578947368422
User 108049 does not improve AUC. Reverting changes.
Training on augumented user 129836 4/50 current_auc = 0.6886842105263159
User 129836 AUC after training: 0.688421052631579
User 129836 does not improve AUC. Reverting changes.
Training on augumented user 60888 5/50 current_auc = 0.6886842105263159
User 60888 AUC after training: 0.6878947368421053
User 60888 does not improve AUC. Reverting changes.
Training on augumented user 113334 6/50 current_auc = 0.6886842105263159
User 113334 AUC after training: 0.6881578947368421
User 113334 does not improve AUC. Reverting changes.
Training on augumented user 47025 7/50 current_auc = 0.6886842105263159
User 47025 AUC after training: 0.6886842105263158
User 47025 does not improve AUC. Reverting changes.
Training on augumented user 123736 8/50 current_auc = 0.6886842105263159
User 123736 AUC after training: 0.6886842105263158
User 123736 does not improve AUC. Reverting changes.
Training on augumented user 29588 9/50 current_auc = 0.6886842105263159
User 29588 AUC after training: 0.6886842105263158
User 29588 does not improve AUC. Reverting changes.
Training on augumented user 86614 10/50 current_auc = 0.6886842105263159
User 86614 AUC after training: 0.6889473684210526
User 86614 improves AUC. Keeping the model.
Training on augumented user 82301 11/50 current_auc = 0.6889473684210526
User 82301 AUC after training: 0.6881578947368422
User 82301 does not improve AUC. Reverting changes.
Training on augumented user 9719 12/50 current_auc = 0.6889473684210526
User 9719 AUC after training: 0.6894736842105263
User 9719 improves AUC. Keeping the model.
Training on augumented user 134513 13/50 current_auc = 0.6894736842105263
User 134513 AUC after training: 0.6884210526315789
User 134513 does not improve AUC. Reverting changes.
Training on augumented user 98488 14/50 current_auc = 0.6894736842105263
User 98488 AUC after training: 0.6868421052631579
User 98488 does not improve AUC. Reverting changes.
Training on augumented user 122762 15/50 current_auc = 0.6894736842105263
User 122762 AUC after training: 0.6889473684210526
User 122762 does not improve AUC. Reverting changes.
Training on augumented user 114643 16/50 current_auc = 0.6894736842105263
User 114643 AUC after training: 0.6892105263157895
User 114643 does not improve AUC. Reverting changes.
Training on augumented user 75734 17/50 current_auc = 0.6894736842105263
User 75734 AUC after training: 0.6892105263157895
User 75734 does not improve AUC. Reverting changes.
Training on augumented user 60401 18/50 current_auc = 0.6894736842105263
User 60401 AUC after training: 0.6892105263157895
User 60401 does not improve AUC. Reverting changes.
Training on augumented user 44551 19/50 current_auc = 0.6894736842105263
User 44551 AUC after training: 0.6892105263157895
User 44551 does not improve AUC. Reverting changes.
Training on augumented user 27811 20/50 current_auc = 0.6894736842105263
User 27811 AUC after training: 0.6897368421052632
User 27811 improves AUC. Keeping the model.
Training on augumented user 79518 21/50 current_auc = 0.6897368421052632
User 79518 AUC after training: 0.688421052631579
User 79518 does not improve AUC. Reverting changes.
Training on augumented user 17167 22/50 current_auc = 0.6897368421052632
User 17167 AUC after training: 0.6873684210526316
User 17167 does not improve AUC. Reverting changes.
Training on augumented user 63143 23/50 current_auc = 0.6897368421052632
User 63143 AUC after training: 0.6886842105263158
User 63143 does not improve AUC. Reverting changes.
Training on augumented user 1708 24/50 current_auc = 0.6897368421052632
User 1708 AUC after training: 0.6873684210526316
User 1708 does not improve AUC. Reverting changes.
Training on augumented user 9135 25/50 current_auc = 0.6897368421052632
User 9135 AUC after training: 0.6881578947368421
User 9135 does not improve AUC. Reverting changes.
Training on augumented user 126411 26/50 current_auc = 0.6897368421052632
User 126411 AUC after training: 0.6881578947368422
User 126411 does not improve AUC. Reverting changes.
Training on augumented user 67410 27/50 current_auc = 0.6897368421052632
User 67410 AUC after training: 0.6876315789473685
User 67410 does not improve AUC. Reverting changes.
Training on augumented user 119947 28/50 current_auc = 0.6897368421052632
User 119947 AUC after training: 0.6878947368421053
User 119947 does not improve AUC. Reverting changes.
Training on augumented user 128011 29/50 current_auc = 0.6897368421052632
User 128011 AUC after training: 0.6878947368421053
User 128011 does not improve AUC. Reverting changes.
Training on augumented user 81882 30/50 current_auc = 0.6897368421052632
User 81882 AUC after training: 0.6886842105263159
User 81882 does not improve AUC. Reverting changes.
Training on augumented user 17692 31/50 current_auc = 0.6897368421052632
User 17692 AUC after training: 0.6892105263157895
User 17692 does not improve AUC. Reverting changes.
Training on augumented user 64165 32/50 current_auc = 0.6897368421052632
User 64165 AUC after training: 0.6876315789473685
User 64165 does not improve AUC. Reverting changes.
Training on augumented user 115249 33/50 current_auc = 0.6897368421052632
User 115249 AUC after training: 0.6892105263157895
User 115249 does not improve AUC. Reverting changes.
Training on augumented user 111388 34/50 current_auc = 0.6897368421052632
User 111388 AUC after training: 0.6881578947368421
User 111388 does not improve AUC. Reverting changes.
Training on augumented user 15421 35/50 current_auc = 0.6897368421052632
User 15421 AUC after training: 0.6886842105263158
User 15421 does not improve AUC. Reverting changes.
Training on augumented user 80485 36/50 current_auc = 0.6897368421052632
User 80485 AUC after training: 0.6897368421052632
User 80485 does not improve AUC. Reverting changes.
Training on augumented user 131562 37/50 current_auc = 0.6897368421052632
User 131562 AUC after training: 0.6886842105263158
User 131562 does not improve AUC. Reverting changes.
Training on augumented user 76134 38/50 current_auc = 0.6897368421052632
User 76134 AUC after training: 0.6889473684210526
User 76134 does not improve AUC. Reverting changes.
Training on augumented user 94310 39/50 current_auc = 0.6897368421052632
User 94310 AUC after training: 0.6873684210526316
User 94310 does not improve AUC. Reverting changes.
Training on augumented user 40870 40/50 current_auc = 0.6897368421052632
User 40870 AUC after training: 0.688421052631579
User 40870 does not improve AUC. Reverting changes.
Training on augumented user 36324 41/50 current_auc = 0.6897368421052632
User 36324 AUC after training: 0.6876315789473685
User 36324 does not improve AUC. Reverting changes.
Training on augumented user 77696 42/50 current_auc = 0.6897368421052632
User 77696 AUC after training: 0.6886842105263158
User 77696 does not improve AUC. Reverting changes.
Training on augumented user 56270 43/50 current_auc = 0.6897368421052632
User 56270 AUC after training: 0.69
User 56270 improves AUC. Keeping the model.
Training on augumented user 79007 44/50 current_auc = 0.69
User 79007 AUC after training: 0.6897368421052632
User 79007 does not improve AUC. Reverting changes.
Training on augumented user 34904 45/50 current_auc = 0.69
User 34904 AUC after training: 0.6889473684210526
User 34904 does not improve AUC. Reverting changes.
Training on augumented user 39817 46/50 current_auc = 0.69
User 39817 AUC after training: 0.69
User 39817 does not improve AUC. Reverting changes.
Training on augumented user 64542 47/50 current_auc = 0.69
User 64542 AUC after training: 0.69
User 64542 does not improve AUC. Reverting changes.
Training on augumented user 57371 48/50 current_auc = 0.69
User 57371 AUC after training: 0.6894736842105263
User 57371 does not improve AUC. Reverting changes.
Training on augumented user 63183 49/50 current_auc = 0.69
User 63183 AUC after training: 0.69
User 63183 does not improve AUC. Reverting changes.
[2024-12-02 20:18:21.897735] start test user 89618 297/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:18:22.416077] start test user 89618 297/568 recall augumented users by random, augumented_users = [119789, 11519, 127843, 65203, 126233, 38981, 137650, 55664, 11202, 43359, 137769, 75388, 28119, 46876, 25100, 99455, 84608, 119132, 76898, 121947, 135954, 3416, 14799, 117333, 99778, 9305, 113317, 5722, 63934, 77942, 67490, 121967, 68021, 38566, 28158, 122781, 133458, 74892, 89418, 82408, 25700, 108711, 11449, 90359, 133157, 116706, 102095, 69268, 135808, 112842]
[2024-12-02 20:18:22.433050] user = 89618 Cloud 297/568
[2024-12-02 20:18:22.447079] user = 89618 Local 297/568
[2024-12-02 20:18:22.527851] user = 89618 Local+ 297/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:18:24.852139] user = 89618 MPDA- 297/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5300751879699248
Training on augumented user 119789 0/50 current_auc = 0.5300751879699248
User 119789 AUC after training: 0.531328320802005
User 119789 improves AUC. Keeping the model.
Training on augumented user 11519 1/50 current_auc = 0.531328320802005
User 11519 AUC after training: 0.5288220551378446
User 11519 does not improve AUC. Reverting changes.
Training on augumented user 127843 2/50 current_auc = 0.531328320802005
User 127843 AUC after training: 0.531328320802005
User 127843 does not improve AUC. Reverting changes.
Training on augumented user 65203 3/50 current_auc = 0.531328320802005
User 65203 AUC after training: 0.5288220551378446
User 65203 does not improve AUC. Reverting changes.
Training on augumented user 126233 4/50 current_auc = 0.531328320802005
User 126233 AUC after training: 0.5325814536340852
User 126233 improves AUC. Keeping the model.
Training on augumented user 38981 5/50 current_auc = 0.5325814536340852
User 38981 AUC after training: 0.5300751879699248
User 38981 does not improve AUC. Reverting changes.
Training on augumented user 137650 6/50 current_auc = 0.5325814536340852
User 137650 AUC after training: 0.5325814536340852
User 137650 does not improve AUC. Reverting changes.
Training on augumented user 55664 7/50 current_auc = 0.5325814536340852
User 55664 AUC after training: 0.5300751879699248
User 55664 does not improve AUC. Reverting changes.
Training on augumented user 11202 8/50 current_auc = 0.5325814536340852
User 11202 AUC after training: 0.531328320802005
User 11202 does not improve AUC. Reverting changes.
Training on augumented user 43359 9/50 current_auc = 0.5325814536340852
User 43359 AUC after training: 0.5338345864661653
User 43359 improves AUC. Keeping the model.
Training on augumented user 137769 10/50 current_auc = 0.5338345864661653
User 137769 AUC after training: 0.5325814536340852
User 137769 does not improve AUC. Reverting changes.
Training on augumented user 75388 11/50 current_auc = 0.5338345864661653
User 75388 AUC after training: 0.531328320802005
User 75388 does not improve AUC. Reverting changes.
Training on augumented user 28119 12/50 current_auc = 0.5338345864661653
User 28119 AUC after training: 0.5325814536340852
User 28119 does not improve AUC. Reverting changes.
Training on augumented user 46876 13/50 current_auc = 0.5338345864661653
User 46876 AUC after training: 0.531328320802005
User 46876 does not improve AUC. Reverting changes.
Training on augumented user 25100 14/50 current_auc = 0.5338345864661653
User 25100 AUC after training: 0.5325814536340853
User 25100 does not improve AUC. Reverting changes.
Training on augumented user 99455 15/50 current_auc = 0.5338345864661653
User 99455 AUC after training: 0.5325814536340852
User 99455 does not improve AUC. Reverting changes.
Training on augumented user 84608 16/50 current_auc = 0.5338345864661653
User 84608 AUC after training: 0.5338345864661653
User 84608 does not improve AUC. Reverting changes.
Training on augumented user 119132 17/50 current_auc = 0.5338345864661653
User 119132 AUC after training: 0.531328320802005
User 119132 does not improve AUC. Reverting changes.
Training on augumented user 76898 18/50 current_auc = 0.5338345864661653
User 76898 AUC after training: 0.5338345864661653
User 76898 does not improve AUC. Reverting changes.
Training on augumented user 121947 19/50 current_auc = 0.5338345864661653
User 121947 AUC after training: 0.5325814536340852
User 121947 does not improve AUC. Reverting changes.
Training on augumented user 135954 20/50 current_auc = 0.5338345864661653
User 135954 AUC after training: 0.5325814536340852
User 135954 does not improve AUC. Reverting changes.
Training on augumented user 3416 21/50 current_auc = 0.5338345864661653
User 3416 AUC after training: 0.5363408521303259
User 3416 improves AUC. Keeping the model.
Training on augumented user 14799 22/50 current_auc = 0.5363408521303259
User 14799 AUC after training: 0.5325814536340852
User 14799 does not improve AUC. Reverting changes.
Training on augumented user 117333 23/50 current_auc = 0.5363408521303259
User 117333 AUC after training: 0.5350877192982456
User 117333 does not improve AUC. Reverting changes.
Training on augumented user 99778 24/50 current_auc = 0.5363408521303259
User 99778 AUC after training: 0.531328320802005
User 99778 does not improve AUC. Reverting changes.
Training on augumented user 9305 25/50 current_auc = 0.5363408521303259
User 9305 AUC after training: 0.5300751879699248
User 9305 does not improve AUC. Reverting changes.
Training on augumented user 113317 26/50 current_auc = 0.5363408521303259
User 113317 AUC after training: 0.5325814536340852
User 113317 does not improve AUC. Reverting changes.
Training on augumented user 5722 27/50 current_auc = 0.5363408521303259
User 5722 AUC after training: 0.531328320802005
User 5722 does not improve AUC. Reverting changes.
Training on augumented user 63934 28/50 current_auc = 0.5363408521303259
User 63934 AUC after training: 0.531328320802005
User 63934 does not improve AUC. Reverting changes.
Training on augumented user 77942 29/50 current_auc = 0.5363408521303259
User 77942 AUC after training: 0.5363408521303259
User 77942 does not improve AUC. Reverting changes.
Training on augumented user 67490 30/50 current_auc = 0.5363408521303259
User 67490 AUC after training: 0.5300751879699248
User 67490 does not improve AUC. Reverting changes.
Training on augumented user 121967 31/50 current_auc = 0.5363408521303259
User 121967 AUC after training: 0.5350877192982456
User 121967 does not improve AUC. Reverting changes.
Training on augumented user 68021 32/50 current_auc = 0.5363408521303259
User 68021 AUC after training: 0.5250626566416039
User 68021 does not improve AUC. Reverting changes.
Training on augumented user 38566 33/50 current_auc = 0.5363408521303259
User 38566 AUC after training: 0.5375939849624061
User 38566 improves AUC. Keeping the model.
Training on augumented user 28158 34/50 current_auc = 0.5375939849624061
User 28158 AUC after training: 0.5363408521303258
User 28158 does not improve AUC. Reverting changes.
Training on augumented user 122781 35/50 current_auc = 0.5375939849624061
User 122781 AUC after training: 0.5413533834586466
User 122781 improves AUC. Keeping the model.
Training on augumented user 133458 36/50 current_auc = 0.5413533834586466
User 133458 AUC after training: 0.5413533834586466
User 133458 does not improve AUC. Reverting changes.
Training on augumented user 74892 37/50 current_auc = 0.5413533834586466
User 74892 AUC after training: 0.5388471177944862
User 74892 does not improve AUC. Reverting changes.
Training on augumented user 89418 38/50 current_auc = 0.5413533834586466
User 89418 AUC after training: 0.531328320802005
User 89418 does not improve AUC. Reverting changes.
Training on augumented user 82408 39/50 current_auc = 0.5413533834586466
User 82408 AUC after training: 0.5388471177944862
User 82408 does not improve AUC. Reverting changes.
Training on augumented user 25700 40/50 current_auc = 0.5413533834586466
User 25700 AUC after training: 0.5401002506265664
User 25700 does not improve AUC. Reverting changes.
Training on augumented user 108711 41/50 current_auc = 0.5413533834586466
User 108711 AUC after training: 0.5401002506265664
User 108711 does not improve AUC. Reverting changes.
Training on augumented user 11449 42/50 current_auc = 0.5413533834586466
User 11449 AUC after training: 0.5401002506265664
User 11449 does not improve AUC. Reverting changes.
Training on augumented user 90359 43/50 current_auc = 0.5413533834586466
User 90359 AUC after training: 0.5413533834586466
User 90359 does not improve AUC. Reverting changes.
Training on augumented user 133157 44/50 current_auc = 0.5413533834586466
User 133157 AUC after training: 0.5375939849624061
User 133157 does not improve AUC. Reverting changes.
Training on augumented user 116706 45/50 current_auc = 0.5413533834586466
User 116706 AUC after training: 0.5401002506265664
User 116706 does not improve AUC. Reverting changes.
Training on augumented user 102095 46/50 current_auc = 0.5413533834586466
User 102095 AUC after training: 0.5413533834586466
User 102095 does not improve AUC. Reverting changes.
Training on augumented user 69268 47/50 current_auc = 0.5413533834586466
User 69268 AUC after training: 0.5350877192982456
User 69268 does not improve AUC. Reverting changes.
Training on augumented user 135808 48/50 current_auc = 0.5413533834586466
User 135808 AUC after training: 0.5350877192982456
User 135808 does not improve AUC. Reverting changes.
Training on augumented user 112842 49/50 current_auc = 0.5413533834586466
User 112842 AUC after training: 0.5375939849624061
User 112842 does not improve AUC. Reverting changes.
[2024-12-02 20:18:53.502676] start test user 89658 298/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:18:53.982370] start test user 89658 298/568 recall augumented users by random, augumented_users = [22243, 73388, 14251, 58953, 126051, 46640, 11550, 4621, 73678, 57474, 58766, 133802, 89785, 115576, 92051, 136102, 64518, 21408, 35058, 122366, 118191, 116321, 83137, 35772, 110594, 50659, 110574, 65352, 49784, 68047, 127061, 27331, 7281, 673, 40457, 36396, 91146, 1298, 137432, 55913, 105867, 60694, 14891, 51350, 137928, 116202, 104510, 71759, 93826, 71806]
[2024-12-02 20:18:53.998237] user = 89658 Cloud 298/568
[2024-12-02 20:18:54.019138] user = 89658 Local 298/568
[2024-12-02 20:18:54.056354] user = 89658 Local+ 298/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:18:57.175225] user = 89658 MPDA- 298/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5521137026239067
Training on augumented user 22243 0/50 current_auc = 0.5521137026239067
User 22243 AUC after training: 0.5527210884353742
User 22243 improves AUC. Keeping the model.
Training on augumented user 73388 1/50 current_auc = 0.5527210884353742
User 73388 AUC after training: 0.5525996112730807
User 73388 does not improve AUC. Reverting changes.
Training on augumented user 14251 2/50 current_auc = 0.5527210884353742
User 14251 AUC after training: 0.5522351797862002
User 14251 does not improve AUC. Reverting changes.
Training on augumented user 58953 3/50 current_auc = 0.5527210884353742
User 58953 AUC after training: 0.5530247813411079
User 58953 improves AUC. Keeping the model.
Training on augumented user 126051 4/50 current_auc = 0.5530247813411079
User 126051 AUC after training: 0.5524173955296404
User 126051 does not improve AUC. Reverting changes.
Training on augumented user 46640 5/50 current_auc = 0.5530247813411079
User 46640 AUC after training: 0.5527210884353742
User 46640 does not improve AUC. Reverting changes.
Training on augumented user 11550 6/50 current_auc = 0.5530247813411079
User 11550 AUC after training: 0.5538143828960155
User 11550 improves AUC. Keeping the model.
Training on augumented user 4621 7/50 current_auc = 0.5538143828960155
User 4621 AUC after training: 0.5543002915451896
User 4621 improves AUC. Keeping the model.
Training on augumented user 73678 8/50 current_auc = 0.5543002915451896
User 73678 AUC after training: 0.5540573372206025
User 73678 does not improve AUC. Reverting changes.
Training on augumented user 57474 9/50 current_auc = 0.5543002915451896
User 57474 AUC after training: 0.5545432458697764
User 57474 improves AUC. Keeping the model.
Training on augumented user 58766 10/50 current_auc = 0.5545432458697764
User 58766 AUC after training: 0.5545432458697764
User 58766 does not improve AUC. Reverting changes.
Training on augumented user 133802 11/50 current_auc = 0.5545432458697764
User 133802 AUC after training: 0.5550291545189504
User 133802 improves AUC. Keeping the model.
Training on augumented user 89785 12/50 current_auc = 0.5550291545189504
User 89785 AUC after training: 0.5544217687074829
User 89785 does not improve AUC. Reverting changes.
Training on augumented user 115576 13/50 current_auc = 0.5550291545189504
User 115576 AUC after training: 0.553935860058309
User 115576 does not improve AUC. Reverting changes.
Training on augumented user 92051 14/50 current_auc = 0.5550291545189504
User 92051 AUC after training: 0.5540573372206025
User 92051 does not improve AUC. Reverting changes.
Training on augumented user 136102 15/50 current_auc = 0.5550291545189504
User 136102 AUC after training: 0.554178814382896
User 136102 does not improve AUC. Reverting changes.
Training on augumented user 64518 16/50 current_auc = 0.5550291545189504
User 64518 AUC after training: 0.5555150631681245
User 64518 improves AUC. Keeping the model.
Training on augumented user 21408 17/50 current_auc = 0.5555150631681245
User 21408 AUC after training: 0.553449951409135
User 21408 does not improve AUC. Reverting changes.
Training on augumented user 35058 18/50 current_auc = 0.5555150631681245
User 35058 AUC after training: 0.5545432458697764
User 35058 does not improve AUC. Reverting changes.
Training on augumented user 122366 19/50 current_auc = 0.5555150631681245
User 122366 AUC after training: 0.5547862001943634
User 122366 does not improve AUC. Reverting changes.
Training on augumented user 118191 20/50 current_auc = 0.5555150631681245
User 118191 AUC after training: 0.5543002915451894
User 118191 does not improve AUC. Reverting changes.
Training on augumented user 116321 21/50 current_auc = 0.5555150631681245
User 116321 AUC after training: 0.5546647230320699
User 116321 does not improve AUC. Reverting changes.
Training on augumented user 83137 22/50 current_auc = 0.5555150631681245
User 83137 AUC after training: 0.5553935860058309
User 83137 does not improve AUC. Reverting changes.
Training on augumented user 35772 23/50 current_auc = 0.5555150631681245
User 35772 AUC after training: 0.5553935860058309
User 35772 does not improve AUC. Reverting changes.
Training on augumented user 110594 24/50 current_auc = 0.5555150631681245
User 110594 AUC after training: 0.5545432458697765
User 110594 does not improve AUC. Reverting changes.
Training on augumented user 50659 25/50 current_auc = 0.5555150631681245
User 50659 AUC after training: 0.5540573372206025
User 50659 does not improve AUC. Reverting changes.
Training on augumented user 110574 26/50 current_auc = 0.5555150631681245
User 110574 AUC after training: 0.5549076773566569
User 110574 does not improve AUC. Reverting changes.
Training on augumented user 65352 27/50 current_auc = 0.5555150631681245
User 65352 AUC after training: 0.5543002915451894
User 65352 does not improve AUC. Reverting changes.
Training on augumented user 49784 28/50 current_auc = 0.5555150631681245
User 49784 AUC after training: 0.5543002915451894
User 49784 does not improve AUC. Reverting changes.
Training on augumented user 68047 29/50 current_auc = 0.5555150631681245
User 68047 AUC after training: 0.5549076773566569
User 68047 does not improve AUC. Reverting changes.
Training on augumented user 127061 30/50 current_auc = 0.5555150631681245
User 127061 AUC after training: 0.5533892128279884
User 127061 does not improve AUC. Reverting changes.
Training on augumented user 27331 31/50 current_auc = 0.5555150631681245
User 27331 AUC after training: 0.5543002915451896
User 27331 does not improve AUC. Reverting changes.
Training on augumented user 7281 32/50 current_auc = 0.5555150631681245
User 7281 AUC after training: 0.5552721088435374
User 7281 does not improve AUC. Reverting changes.
Training on augumented user 673 33/50 current_auc = 0.5555150631681245
User 673 AUC after training: 0.5538143828960155
User 673 does not improve AUC. Reverting changes.
Training on augumented user 40457 34/50 current_auc = 0.5555150631681245
User 40457 AUC after training: 0.5549076773566569
User 40457 does not improve AUC. Reverting changes.
Training on augumented user 36396 35/50 current_auc = 0.5555150631681245
User 36396 AUC after training: 0.5546647230320699
User 36396 does not improve AUC. Reverting changes.
Training on augumented user 91146 36/50 current_auc = 0.5555150631681245
User 91146 AUC after training: 0.5546647230320699
User 91146 does not improve AUC. Reverting changes.
Training on augumented user 1298 37/50 current_auc = 0.5555150631681245
User 1298 AUC after training: 0.5549076773566569
User 1298 does not improve AUC. Reverting changes.
Training on augumented user 137432 38/50 current_auc = 0.5555150631681245
User 137432 AUC after training: 0.5543002915451896
User 137432 does not improve AUC. Reverting changes.
Training on augumented user 55913 39/50 current_auc = 0.5555150631681245
User 55913 AUC after training: 0.5527210884353742
User 55913 does not improve AUC. Reverting changes.
Training on augumented user 105867 40/50 current_auc = 0.5555150631681245
User 105867 AUC after training: 0.5546647230320699
User 105867 does not improve AUC. Reverting changes.
Training on augumented user 60694 41/50 current_auc = 0.5555150631681245
User 60694 AUC after training: 0.5552721088435374
User 60694 does not improve AUC. Reverting changes.
Training on augumented user 14891 42/50 current_auc = 0.5555150631681245
User 14891 AUC after training: 0.5547862001943634
User 14891 does not improve AUC. Reverting changes.
Training on augumented user 51350 43/50 current_auc = 0.5555150631681245
User 51350 AUC after training: 0.554178814382896
User 51350 does not improve AUC. Reverting changes.
Training on augumented user 137928 44/50 current_auc = 0.5555150631681245
User 137928 AUC after training: 0.555150631681244
User 137928 does not improve AUC. Reverting changes.
Training on augumented user 116202 45/50 current_auc = 0.5555150631681245
User 116202 AUC after training: 0.5547862001943634
User 116202 does not improve AUC. Reverting changes.
Training on augumented user 104510 46/50 current_auc = 0.5555150631681245
User 104510 AUC after training: 0.5551506316812439
User 104510 does not improve AUC. Reverting changes.
Training on augumented user 71759 47/50 current_auc = 0.5555150631681245
User 71759 AUC after training: 0.5551506316812439
User 71759 does not improve AUC. Reverting changes.
Training on augumented user 93826 48/50 current_auc = 0.5555150631681245
User 93826 AUC after training: 0.5549076773566569
User 93826 does not improve AUC. Reverting changes.
Training on augumented user 71806 49/50 current_auc = 0.5555150631681245
User 71806 AUC after training: 0.5556365403304179
User 71806 improves AUC. Keeping the model.
[2024-12-02 20:19:27.439135] start test user 89670 299/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:19:27.960333] start test user 89670 299/568 recall augumented users by random, augumented_users = [63698, 96489, 54245, 21358, 69923, 23181, 28996, 124481, 17770, 77302, 81984, 27312, 84821, 77013, 10424, 3124, 53596, 92349, 69749, 101448, 114741, 24533, 33731, 109127, 54636, 27401, 236, 93222, 34925, 76889, 87767, 24597, 104408, 132405, 2888, 19029, 37437, 62268, 98551, 20440, 68856, 102061, 92332, 116657, 85720, 66384, 7295, 32014, 89231, 40030]
[2024-12-02 20:19:27.976231] user = 89670 Cloud 299/568
[2024-12-02 20:19:27.988270] user = 89670 Local 299/568
[2024-12-02 20:19:28.010163] user = 89670 Local+ 299/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:19:29.803006] user = 89670 MPDA- 299/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6471291866028709
Training on augumented user 63698 0/50 current_auc = 0.6471291866028709
User 63698 AUC after training: 0.6471291866028708
User 63698 does not improve AUC. Reverting changes.
Training on augumented user 96489 1/50 current_auc = 0.6471291866028709
User 96489 AUC after training: 0.6447368421052632
User 96489 does not improve AUC. Reverting changes.
Training on augumented user 54245 2/50 current_auc = 0.6471291866028709
User 54245 AUC after training: 0.6447368421052632
User 54245 does not improve AUC. Reverting changes.
Training on augumented user 21358 3/50 current_auc = 0.6471291866028709
User 21358 AUC after training: 0.645933014354067
User 21358 does not improve AUC. Reverting changes.
Training on augumented user 69923 4/50 current_auc = 0.6471291866028709
User 69923 AUC after training: 0.6471291866028709
User 69923 does not improve AUC. Reverting changes.
Training on augumented user 23181 5/50 current_auc = 0.6471291866028709
User 23181 AUC after training: 0.6435406698564593
User 23181 does not improve AUC. Reverting changes.
Training on augumented user 28996 6/50 current_auc = 0.6471291866028709
User 28996 AUC after training: 0.6471291866028708
User 28996 does not improve AUC. Reverting changes.
Training on augumented user 124481 7/50 current_auc = 0.6471291866028709
User 124481 AUC after training: 0.645933014354067
User 124481 does not improve AUC. Reverting changes.
Training on augumented user 17770 8/50 current_auc = 0.6471291866028709
User 17770 AUC after training: 0.6459330143540669
User 17770 does not improve AUC. Reverting changes.
Training on augumented user 77302 9/50 current_auc = 0.6471291866028709
User 77302 AUC after training: 0.6471291866028709
User 77302 does not improve AUC. Reverting changes.
Training on augumented user 81984 10/50 current_auc = 0.6471291866028709
User 81984 AUC after training: 0.6435406698564593
User 81984 does not improve AUC. Reverting changes.
Training on augumented user 27312 11/50 current_auc = 0.6471291866028709
User 27312 AUC after training: 0.6483253588516746
User 27312 improves AUC. Keeping the model.
Training on augumented user 84821 12/50 current_auc = 0.6483253588516746
User 84821 AUC after training: 0.6447368421052632
User 84821 does not improve AUC. Reverting changes.
Training on augumented user 77013 13/50 current_auc = 0.6483253588516746
User 77013 AUC after training: 0.645933014354067
User 77013 does not improve AUC. Reverting changes.
Training on augumented user 10424 14/50 current_auc = 0.6483253588516746
User 10424 AUC after training: 0.6471291866028709
User 10424 does not improve AUC. Reverting changes.
Training on augumented user 3124 15/50 current_auc = 0.6483253588516746
User 3124 AUC after training: 0.6483253588516746
User 3124 does not improve AUC. Reverting changes.
Training on augumented user 53596 16/50 current_auc = 0.6483253588516746
User 53596 AUC after training: 0.6495215311004784
User 53596 improves AUC. Keeping the model.
Training on augumented user 92349 17/50 current_auc = 0.6495215311004784
User 92349 AUC after training: 0.6477272727272727
User 92349 does not improve AUC. Reverting changes.
Training on augumented user 69749 18/50 current_auc = 0.6495215311004784
User 69749 AUC after training: 0.6495215311004784
User 69749 does not improve AUC. Reverting changes.
Training on augumented user 101448 19/50 current_auc = 0.6495215311004784
User 101448 AUC after training: 0.6471291866028708
User 101448 does not improve AUC. Reverting changes.
Training on augumented user 114741 20/50 current_auc = 0.6495215311004784
User 114741 AUC after training: 0.6495215311004784
User 114741 does not improve AUC. Reverting changes.
Training on augumented user 24533 21/50 current_auc = 0.6495215311004784
User 24533 AUC after training: 0.6483253588516746
User 24533 does not improve AUC. Reverting changes.
Training on augumented user 33731 22/50 current_auc = 0.6495215311004784
User 33731 AUC after training: 0.6483253588516746
User 33731 does not improve AUC. Reverting changes.
Training on augumented user 109127 23/50 current_auc = 0.6495215311004784
User 109127 AUC after training: 0.6483253588516746
User 109127 does not improve AUC. Reverting changes.
Training on augumented user 54636 24/50 current_auc = 0.6495215311004784
User 54636 AUC after training: 0.6471291866028708
User 54636 does not improve AUC. Reverting changes.
Training on augumented user 27401 25/50 current_auc = 0.6495215311004784
User 27401 AUC after training: 0.6483253588516746
User 27401 does not improve AUC. Reverting changes.
Training on augumented user 236 26/50 current_auc = 0.6495215311004784
User 236 AUC after training: 0.6483253588516746
User 236 does not improve AUC. Reverting changes.
Training on augumented user 93222 27/50 current_auc = 0.6495215311004784
User 93222 AUC after training: 0.6483253588516746
User 93222 does not improve AUC. Reverting changes.
Training on augumented user 34925 28/50 current_auc = 0.6495215311004784
User 34925 AUC after training: 0.6483253588516746
User 34925 does not improve AUC. Reverting changes.
Training on augumented user 76889 29/50 current_auc = 0.6495215311004784
User 76889 AUC after training: 0.6483253588516746
User 76889 does not improve AUC. Reverting changes.
Training on augumented user 87767 30/50 current_auc = 0.6495215311004784
User 87767 AUC after training: 0.6495215311004784
User 87767 does not improve AUC. Reverting changes.
Training on augumented user 24597 31/50 current_auc = 0.6495215311004784
User 24597 AUC after training: 0.6495215311004784
User 24597 does not improve AUC. Reverting changes.
Training on augumented user 104408 32/50 current_auc = 0.6495215311004784
User 104408 AUC after training: 0.6483253588516746
User 104408 does not improve AUC. Reverting changes.
Training on augumented user 132405 33/50 current_auc = 0.6495215311004784
User 132405 AUC after training: 0.6477272727272727
User 132405 does not improve AUC. Reverting changes.
Training on augumented user 2888 34/50 current_auc = 0.6495215311004784
User 2888 AUC after training: 0.6495215311004784
User 2888 does not improve AUC. Reverting changes.
Training on augumented user 19029 35/50 current_auc = 0.6495215311004784
User 19029 AUC after training: 0.6495215311004784
User 19029 does not improve AUC. Reverting changes.
Training on augumented user 37437 36/50 current_auc = 0.6495215311004784
User 37437 AUC after training: 0.6483253588516746
User 37437 does not improve AUC. Reverting changes.
Training on augumented user 62268 37/50 current_auc = 0.6495215311004784
User 62268 AUC after training: 0.6483253588516746
User 62268 does not improve AUC. Reverting changes.
Training on augumented user 98551 38/50 current_auc = 0.6495215311004784
User 98551 AUC after training: 0.6483253588516746
User 98551 does not improve AUC. Reverting changes.
Training on augumented user 20440 39/50 current_auc = 0.6495215311004784
User 20440 AUC after training: 0.6471291866028708
User 20440 does not improve AUC. Reverting changes.
Training on augumented user 68856 40/50 current_auc = 0.6495215311004784
User 68856 AUC after training: 0.6483253588516746
User 68856 does not improve AUC. Reverting changes.
Training on augumented user 102061 41/50 current_auc = 0.6495215311004784
User 102061 AUC after training: 0.6483253588516746
User 102061 does not improve AUC. Reverting changes.
Training on augumented user 92332 42/50 current_auc = 0.6495215311004784
User 92332 AUC after training: 0.6477272727272727
User 92332 does not improve AUC. Reverting changes.
Training on augumented user 116657 43/50 current_auc = 0.6495215311004784
User 116657 AUC after training: 0.6495215311004784
User 116657 does not improve AUC. Reverting changes.
Training on augumented user 85720 44/50 current_auc = 0.6495215311004784
User 85720 AUC after training: 0.6477272727272727
User 85720 does not improve AUC. Reverting changes.
Training on augumented user 66384 45/50 current_auc = 0.6495215311004784
User 66384 AUC after training: 0.6483253588516746
User 66384 does not improve AUC. Reverting changes.
Training on augumented user 7295 46/50 current_auc = 0.6495215311004784
User 7295 AUC after training: 0.6471291866028708
User 7295 does not improve AUC. Reverting changes.
Training on augumented user 32014 47/50 current_auc = 0.6495215311004784
User 32014 AUC after training: 0.6495215311004784
User 32014 does not improve AUC. Reverting changes.
Training on augumented user 89231 48/50 current_auc = 0.6495215311004784
User 89231 AUC after training: 0.6483253588516746
User 89231 does not improve AUC. Reverting changes.
Training on augumented user 40030 49/50 current_auc = 0.6495215311004784
User 40030 AUC after training: 0.6495215311004784
User 40030 does not improve AUC. Reverting changes.
[2024-12-02 20:20:01.572169] start test user 89688 300/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:20:02.140309] start test user 89688 300/568 recall augumented users by random, augumented_users = [51113, 44765, 82488, 73887, 28391, 33476, 100067, 49323, 19398, 2888, 21415, 46205, 47338, 62470, 27900, 73314, 21616, 30744, 52337, 95881, 131741, 134758, 4815, 65419, 71081, 63305, 96334, 89143, 94773, 14418, 88645, 88270, 127751, 22537, 79512, 56880, 13028, 67414, 90503, 9843, 46655, 34394, 79186, 56693, 6792, 81566, 3697, 129388, 48247, 43441]
[2024-12-02 20:20:02.155817] user = 89688 Cloud 300/568
[2024-12-02 20:20:02.169965] user = 89688 Local 300/568
[2024-12-02 20:20:02.197366] user = 89688 Local+ 300/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:20:04.715958] user = 89688 MPDA- 300/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7667342799188641
Training on augumented user 51113 0/50 current_auc = 0.7667342799188641
User 51113 AUC after training: 0.768762677484787
User 51113 improves AUC. Keeping the model.
Training on augumented user 44765 1/50 current_auc = 0.768762677484787
User 44765 AUC after training: 0.7702839756592292
User 44765 improves AUC. Keeping the model.
Training on augumented user 82488 2/50 current_auc = 0.7702839756592292
User 82488 AUC after training: 0.7682555780933062
User 82488 does not improve AUC. Reverting changes.
Training on augumented user 73887 3/50 current_auc = 0.7702839756592292
User 73887 AUC after training: 0.768762677484787
User 73887 does not improve AUC. Reverting changes.
Training on augumented user 28391 4/50 current_auc = 0.7702839756592292
User 28391 AUC after training: 0.7697768762677484
User 28391 does not improve AUC. Reverting changes.
Training on augumented user 33476 5/50 current_auc = 0.7702839756592292
User 33476 AUC after training: 0.7672413793103449
User 33476 does not improve AUC. Reverting changes.
Training on augumented user 100067 6/50 current_auc = 0.7702839756592292
User 100067 AUC after training: 0.7697768762677485
User 100067 does not improve AUC. Reverting changes.
Training on augumented user 49323 7/50 current_auc = 0.7702839756592292
User 49323 AUC after training: 0.7677484787018256
User 49323 does not improve AUC. Reverting changes.
Training on augumented user 19398 8/50 current_auc = 0.7702839756592292
User 19398 AUC after training: 0.7662271805273835
User 19398 does not improve AUC. Reverting changes.
Training on augumented user 2888 9/50 current_auc = 0.7702839756592292
User 2888 AUC after training: 0.7692697768762677
User 2888 does not improve AUC. Reverting changes.
Training on augumented user 21415 10/50 current_auc = 0.7702839756592292
User 21415 AUC after training: 0.7700304259634889
User 21415 does not improve AUC. Reverting changes.
Training on augumented user 46205 11/50 current_auc = 0.7702839756592292
User 46205 AUC after training: 0.7692697768762677
User 46205 does not improve AUC. Reverting changes.
Training on augumented user 47338 12/50 current_auc = 0.7702839756592292
User 47338 AUC after training: 0.7682555780933062
User 47338 does not improve AUC. Reverting changes.
Training on augumented user 62470 13/50 current_auc = 0.7702839756592292
User 62470 AUC after training: 0.768762677484787
User 62470 does not improve AUC. Reverting changes.
Training on augumented user 27900 14/50 current_auc = 0.7702839756592292
User 27900 AUC after training: 0.7702839756592291
User 27900 does not improve AUC. Reverting changes.
Training on augumented user 73314 15/50 current_auc = 0.7702839756592292
User 73314 AUC after training: 0.767241379310345
User 73314 does not improve AUC. Reverting changes.
Training on augumented user 21616 16/50 current_auc = 0.7702839756592292
User 21616 AUC after training: 0.7702839756592292
User 21616 does not improve AUC. Reverting changes.
Training on augumented user 30744 17/50 current_auc = 0.7702839756592292
User 30744 AUC after training: 0.766734279918864
User 30744 does not improve AUC. Reverting changes.
Training on augumented user 52337 18/50 current_auc = 0.7702839756592292
User 52337 AUC after training: 0.7692697768762677
User 52337 does not improve AUC. Reverting changes.
Training on augumented user 95881 19/50 current_auc = 0.7702839756592292
User 95881 AUC after training: 0.7672413793103449
User 95881 does not improve AUC. Reverting changes.
Training on augumented user 131741 20/50 current_auc = 0.7702839756592292
User 131741 AUC after training: 0.7733265720081136
User 131741 improves AUC. Keeping the model.
Training on augumented user 134758 21/50 current_auc = 0.7733265720081136
User 134758 AUC after training: 0.7743407707910751
User 134758 improves AUC. Keeping the model.
Training on augumented user 4815 22/50 current_auc = 0.7743407707910751
User 4815 AUC after training: 0.7728194726166329
User 4815 does not improve AUC. Reverting changes.
Training on augumented user 65419 23/50 current_auc = 0.7743407707910751
User 65419 AUC after training: 0.7723123732251522
User 65419 does not improve AUC. Reverting changes.
Training on augumented user 71081 24/50 current_auc = 0.7743407707910751
User 71081 AUC after training: 0.7738336713995944
User 71081 does not improve AUC. Reverting changes.
Training on augumented user 63305 25/50 current_auc = 0.7743407707910751
User 63305 AUC after training: 0.7743407707910751
User 63305 does not improve AUC. Reverting changes.
Training on augumented user 96334 26/50 current_auc = 0.7743407707910751
User 96334 AUC after training: 0.7738336713995944
User 96334 does not improve AUC. Reverting changes.
Training on augumented user 89143 27/50 current_auc = 0.7743407707910751
User 89143 AUC after training: 0.7723123732251521
User 89143 does not improve AUC. Reverting changes.
Training on augumented user 94773 28/50 current_auc = 0.7743407707910751
User 94773 AUC after training: 0.7677484787018255
User 94773 does not improve AUC. Reverting changes.
Training on augumented user 14418 29/50 current_auc = 0.7743407707910751
User 14418 AUC after training: 0.7723123732251521
User 14418 does not improve AUC. Reverting changes.
Training on augumented user 88645 30/50 current_auc = 0.7743407707910751
User 88645 AUC after training: 0.7692697768762677
User 88645 does not improve AUC. Reverting changes.
Training on augumented user 88270 31/50 current_auc = 0.7743407707910751
User 88270 AUC after training: 0.7712981744421906
User 88270 does not improve AUC. Reverting changes.
Training on augumented user 127751 32/50 current_auc = 0.7743407707910751
User 127751 AUC after training: 0.7733265720081136
User 127751 does not improve AUC. Reverting changes.
Training on augumented user 22537 33/50 current_auc = 0.7743407707910751
User 22537 AUC after training: 0.7728194726166329
User 22537 does not improve AUC. Reverting changes.
Training on augumented user 79512 34/50 current_auc = 0.7743407707910751
User 79512 AUC after training: 0.7712981744421907
User 79512 does not improve AUC. Reverting changes.
Training on augumented user 56880 35/50 current_auc = 0.7743407707910751
User 56880 AUC after training: 0.7723123732251521
User 56880 does not improve AUC. Reverting changes.
Training on augumented user 13028 36/50 current_auc = 0.7743407707910751
User 13028 AUC after training: 0.7728194726166329
User 13028 does not improve AUC. Reverting changes.
Training on augumented user 67414 37/50 current_auc = 0.7743407707910751
User 67414 AUC after training: 0.772819472616633
User 67414 does not improve AUC. Reverting changes.
Training on augumented user 90503 38/50 current_auc = 0.7743407707910751
User 90503 AUC after training: 0.7733265720081136
User 90503 does not improve AUC. Reverting changes.
Training on augumented user 9843 39/50 current_auc = 0.7743407707910751
User 9843 AUC after training: 0.7743407707910751
User 9843 does not improve AUC. Reverting changes.
Training on augumented user 46655 40/50 current_auc = 0.7743407707910751
User 46655 AUC after training: 0.7702839756592292
User 46655 does not improve AUC. Reverting changes.
Training on augumented user 34394 41/50 current_auc = 0.7743407707910751
User 34394 AUC after training: 0.7733265720081136
User 34394 does not improve AUC. Reverting changes.
Training on augumented user 79186 42/50 current_auc = 0.7743407707910751
User 79186 AUC after training: 0.7718052738336714
User 79186 does not improve AUC. Reverting changes.
Training on augumented user 56693 43/50 current_auc = 0.7743407707910751
User 56693 AUC after training: 0.7723123732251521
User 56693 does not improve AUC. Reverting changes.
Training on augumented user 6792 44/50 current_auc = 0.7743407707910751
User 6792 AUC after training: 0.7697768762677485
User 6792 does not improve AUC. Reverting changes.
Training on augumented user 81566 45/50 current_auc = 0.7743407707910751
User 81566 AUC after training: 0.7743407707910751
User 81566 does not improve AUC. Reverting changes.
Training on augumented user 3697 46/50 current_auc = 0.7743407707910751
User 3697 AUC after training: 0.7667342799188641
User 3697 does not improve AUC. Reverting changes.
Training on augumented user 129388 47/50 current_auc = 0.7743407707910751
User 129388 AUC after training: 0.7702839756592292
User 129388 does not improve AUC. Reverting changes.
Training on augumented user 48247 48/50 current_auc = 0.7743407707910751
User 48247 AUC after training: 0.7728194726166331
User 48247 does not improve AUC. Reverting changes.
Training on augumented user 43441 49/50 current_auc = 0.7743407707910751
User 43441 AUC after training: 0.7718052738336715
User 43441 does not improve AUC. Reverting changes.
[2024-12-02 20:20:30.384022] start test user 89721 301/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:20:30.995076] start test user 89721 301/568 recall augumented users by random, augumented_users = [74325, 116608, 117613, 62024, 4896, 112710, 109181, 92641, 71931, 112129, 89689, 65653, 121090, 56317, 66918, 38672, 97869, 113436, 117069, 17277, 127429, 8725, 102095, 15971, 24113, 68207, 127776, 82435, 22114, 35049, 60508, 36490, 102537, 26073, 84214, 91438, 121756, 48110, 1914, 136170, 27494, 51910, 48557, 98353, 12556, 42405, 128151, 9694, 71549, 65009]
[2024-12-02 20:20:31.011312] user = 89721 Cloud 301/568
[2024-12-02 20:20:31.039678] user = 89721 Local 301/568
[2024-12-02 20:20:31.072114] user = 89721 Local+ 301/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:20:32.647157] user = 89721 MPDA- 301/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.649090909090909
Training on augumented user 74325 0/50 current_auc = 0.649090909090909
User 74325 AUC after training: 0.6496969696969697
User 74325 improves AUC. Keeping the model.
Training on augumented user 116608 1/50 current_auc = 0.6496969696969697
User 116608 AUC after training: 0.6484848484848484
User 116608 does not improve AUC. Reverting changes.
Training on augumented user 117613 2/50 current_auc = 0.6496969696969697
User 117613 AUC after training: 0.6490909090909092
User 117613 does not improve AUC. Reverting changes.
Training on augumented user 62024 3/50 current_auc = 0.6496969696969697
User 62024 AUC after training: 0.6484848484848484
User 62024 does not improve AUC. Reverting changes.
Training on augumented user 4896 4/50 current_auc = 0.6496969696969697
User 4896 AUC after training: 0.6478787878787879
User 4896 does not improve AUC. Reverting changes.
Training on augumented user 112710 5/50 current_auc = 0.6496969696969697
User 112710 AUC after training: 0.6503030303030303
User 112710 improves AUC. Keeping the model.
Training on augumented user 109181 6/50 current_auc = 0.6503030303030303
User 109181 AUC after training: 0.6496969696969697
User 109181 does not improve AUC. Reverting changes.
Training on augumented user 92641 7/50 current_auc = 0.6503030303030303
User 92641 AUC after training: 0.6515151515151515
User 92641 improves AUC. Keeping the model.
Training on augumented user 71931 8/50 current_auc = 0.6515151515151515
User 71931 AUC after training: 0.6527272727272727
User 71931 improves AUC. Keeping the model.
Training on augumented user 112129 9/50 current_auc = 0.6527272727272727
User 112129 AUC after training: 0.6527272727272727
User 112129 does not improve AUC. Reverting changes.
Training on augumented user 89689 10/50 current_auc = 0.6527272727272727
User 89689 AUC after training: 0.6503030303030303
User 89689 does not improve AUC. Reverting changes.
Training on augumented user 65653 11/50 current_auc = 0.6527272727272727
User 65653 AUC after training: 0.6503030303030303
User 65653 does not improve AUC. Reverting changes.
Training on augumented user 121090 12/50 current_auc = 0.6527272727272727
User 121090 AUC after training: 0.6515151515151515
User 121090 does not improve AUC. Reverting changes.
Training on augumented user 56317 13/50 current_auc = 0.6527272727272727
User 56317 AUC after training: 0.6503030303030303
User 56317 does not improve AUC. Reverting changes.
Training on augumented user 66918 14/50 current_auc = 0.6527272727272727
User 66918 AUC after training: 0.6503030303030303
User 66918 does not improve AUC. Reverting changes.
Training on augumented user 38672 15/50 current_auc = 0.6527272727272727
User 38672 AUC after training: 0.6496969696969698
User 38672 does not improve AUC. Reverting changes.
Training on augumented user 97869 16/50 current_auc = 0.6527272727272727
User 97869 AUC after training: 0.6503030303030304
User 97869 does not improve AUC. Reverting changes.
Training on augumented user 113436 17/50 current_auc = 0.6527272727272727
User 113436 AUC after training: 0.6509090909090909
User 113436 does not improve AUC. Reverting changes.
Training on augumented user 117069 18/50 current_auc = 0.6527272727272727
User 117069 AUC after training: 0.6509090909090909
User 117069 does not improve AUC. Reverting changes.
Training on augumented user 17277 19/50 current_auc = 0.6527272727272727
User 17277 AUC after training: 0.6515151515151516
User 17277 does not improve AUC. Reverting changes.
Training on augumented user 127429 20/50 current_auc = 0.6527272727272727
User 127429 AUC after training: 0.6503030303030303
User 127429 does not improve AUC. Reverting changes.
Training on augumented user 8725 21/50 current_auc = 0.6527272727272727
User 8725 AUC after training: 0.6484848484848486
User 8725 does not improve AUC. Reverting changes.
Training on augumented user 102095 22/50 current_auc = 0.6527272727272727
User 102095 AUC after training: 0.6503030303030303
User 102095 does not improve AUC. Reverting changes.
Training on augumented user 15971 23/50 current_auc = 0.6527272727272727
User 15971 AUC after training: 0.6515151515151515
User 15971 does not improve AUC. Reverting changes.
Training on augumented user 24113 24/50 current_auc = 0.6527272727272727
User 24113 AUC after training: 0.6515151515151515
User 24113 does not improve AUC. Reverting changes.
Training on augumented user 68207 25/50 current_auc = 0.6527272727272727
User 68207 AUC after training: 0.6509090909090909
User 68207 does not improve AUC. Reverting changes.
Training on augumented user 127776 26/50 current_auc = 0.6527272727272727
User 127776 AUC after training: 0.6503030303030303
User 127776 does not improve AUC. Reverting changes.
Training on augumented user 82435 27/50 current_auc = 0.6527272727272727
User 82435 AUC after training: 0.6509090909090909
User 82435 does not improve AUC. Reverting changes.
Training on augumented user 22114 28/50 current_auc = 0.6527272727272727
User 22114 AUC after training: 0.6509090909090909
User 22114 does not improve AUC. Reverting changes.
Training on augumented user 35049 29/50 current_auc = 0.6527272727272727
User 35049 AUC after training: 0.6472727272727273
User 35049 does not improve AUC. Reverting changes.
Training on augumented user 60508 30/50 current_auc = 0.6527272727272727
User 60508 AUC after training: 0.6484848484848484
User 60508 does not improve AUC. Reverting changes.
Training on augumented user 36490 31/50 current_auc = 0.6527272727272727
User 36490 AUC after training: 0.6509090909090909
User 36490 does not improve AUC. Reverting changes.
Training on augumented user 102537 32/50 current_auc = 0.6527272727272727
User 102537 AUC after training: 0.6496969696969697
User 102537 does not improve AUC. Reverting changes.
Training on augumented user 26073 33/50 current_auc = 0.6527272727272727
User 26073 AUC after training: 0.6496969696969698
User 26073 does not improve AUC. Reverting changes.
Training on augumented user 84214 34/50 current_auc = 0.6527272727272727
User 84214 AUC after training: 0.6509090909090909
User 84214 does not improve AUC. Reverting changes.
Training on augumented user 91438 35/50 current_auc = 0.6527272727272727
User 91438 AUC after training: 0.649090909090909
User 91438 does not improve AUC. Reverting changes.
Training on augumented user 121756 36/50 current_auc = 0.6527272727272727
User 121756 AUC after training: 0.6527272727272727
User 121756 does not improve AUC. Reverting changes.
Training on augumented user 48110 37/50 current_auc = 0.6527272727272727
User 48110 AUC after training: 0.6503030303030303
User 48110 does not improve AUC. Reverting changes.
Training on augumented user 1914 38/50 current_auc = 0.6527272727272727
User 1914 AUC after training: 0.6490909090909092
User 1914 does not improve AUC. Reverting changes.
Training on augumented user 136170 39/50 current_auc = 0.6527272727272727
User 136170 AUC after training: 0.6503030303030303
User 136170 does not improve AUC. Reverting changes.
Training on augumented user 27494 40/50 current_auc = 0.6527272727272727
User 27494 AUC after training: 0.6515151515151516
User 27494 does not improve AUC. Reverting changes.
Training on augumented user 51910 41/50 current_auc = 0.6527272727272727
User 51910 AUC after training: 0.6515151515151515
User 51910 does not improve AUC. Reverting changes.
Training on augumented user 48557 42/50 current_auc = 0.6527272727272727
User 48557 AUC after training: 0.6503030303030304
User 48557 does not improve AUC. Reverting changes.
Training on augumented user 98353 43/50 current_auc = 0.6527272727272727
User 98353 AUC after training: 0.6509090909090909
User 98353 does not improve AUC. Reverting changes.
Training on augumented user 12556 44/50 current_auc = 0.6527272727272727
User 12556 AUC after training: 0.6515151515151515
User 12556 does not improve AUC. Reverting changes.
Training on augumented user 42405 45/50 current_auc = 0.6527272727272727
User 42405 AUC after training: 0.6472727272727272
User 42405 does not improve AUC. Reverting changes.
Training on augumented user 128151 46/50 current_auc = 0.6527272727272727
User 128151 AUC after training: 0.6515151515151516
User 128151 does not improve AUC. Reverting changes.
Training on augumented user 9694 47/50 current_auc = 0.6527272727272727
User 9694 AUC after training: 0.6496969696969697
User 9694 does not improve AUC. Reverting changes.
Training on augumented user 71549 48/50 current_auc = 0.6527272727272727
User 71549 AUC after training: 0.6515151515151515
User 71549 does not improve AUC. Reverting changes.
Training on augumented user 65009 49/50 current_auc = 0.6527272727272727
User 65009 AUC after training: 0.6509090909090909
User 65009 does not improve AUC. Reverting changes.
[2024-12-02 20:21:03.178132] start test user 89722 302/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:21:03.590588] start test user 89722 302/568 recall augumented users by random, augumented_users = [75700, 118728, 13805, 11942, 67559, 33047, 108443, 116444, 117029, 28262, 59126, 37890, 39612, 15123, 67678, 75417, 32117, 15655, 74256, 107169, 16954, 61813, 92075, 131291, 93252, 82930, 42746, 26331, 92979, 32200, 35766, 43453, 35682, 120762, 76268, 13596, 118003, 114554, 69425, 131691, 67775, 96078, 13797, 38829, 90813, 126233, 12296, 80755, 34531, 115443]
[2024-12-02 20:21:03.606554] user = 89722 Cloud 302/568
[2024-12-02 20:21:03.630554] user = 89722 Local 302/568
[2024-12-02 20:21:03.702562] user = 89722 Local+ 302/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:21:06.395313] user = 89722 MPDA- 302/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6403508771929824
Training on augumented user 75700 0/50 current_auc = 0.6403508771929824
User 75700 AUC after training: 0.641186299081036
User 75700 improves AUC. Keeping the model.
Training on augumented user 118728 1/50 current_auc = 0.641186299081036
User 118728 AUC after training: 0.6407685881370092
User 118728 does not improve AUC. Reverting changes.
Training on augumented user 13805 2/50 current_auc = 0.641186299081036
User 13805 AUC after training: 0.6416040100250626
User 13805 improves AUC. Keeping the model.
Training on augumented user 11942 3/50 current_auc = 0.6416040100250626
User 11942 AUC after training: 0.6416040100250626
User 11942 does not improve AUC. Reverting changes.
Training on augumented user 67559 4/50 current_auc = 0.6416040100250626
User 67559 AUC after training: 0.6416040100250626
User 67559 does not improve AUC. Reverting changes.
Training on augumented user 33047 5/50 current_auc = 0.6416040100250626
User 33047 AUC after training: 0.641186299081036
User 33047 does not improve AUC. Reverting changes.
Training on augumented user 108443 6/50 current_auc = 0.6416040100250626
User 108443 AUC after training: 0.6416040100250626
User 108443 does not improve AUC. Reverting changes.
Training on augumented user 116444 7/50 current_auc = 0.6416040100250626
User 116444 AUC after training: 0.641186299081036
User 116444 does not improve AUC. Reverting changes.
Training on augumented user 117029 8/50 current_auc = 0.6416040100250626
User 117029 AUC after training: 0.6416040100250626
User 117029 does not improve AUC. Reverting changes.
Training on augumented user 28262 9/50 current_auc = 0.6416040100250626
User 28262 AUC after training: 0.6403508771929824
User 28262 does not improve AUC. Reverting changes.
Training on augumented user 59126 10/50 current_auc = 0.6416040100250626
User 59126 AUC after training: 0.6424394319131161
User 59126 improves AUC. Keeping the model.
Training on augumented user 37890 11/50 current_auc = 0.6424394319131161
User 37890 AUC after training: 0.6416040100250626
User 37890 does not improve AUC. Reverting changes.
Training on augumented user 39612 12/50 current_auc = 0.6424394319131161
User 39612 AUC after training: 0.6420217209690895
User 39612 does not improve AUC. Reverting changes.
Training on augumented user 15123 13/50 current_auc = 0.6424394319131161
User 15123 AUC after training: 0.6424394319131161
User 15123 does not improve AUC. Reverting changes.
Training on augumented user 67678 14/50 current_auc = 0.6424394319131161
User 67678 AUC after training: 0.6424394319131161
User 67678 does not improve AUC. Reverting changes.
Training on augumented user 75417 15/50 current_auc = 0.6424394319131161
User 75417 AUC after training: 0.6416040100250626
User 75417 does not improve AUC. Reverting changes.
Training on augumented user 32117 16/50 current_auc = 0.6424394319131161
User 32117 AUC after training: 0.641186299081036
User 32117 does not improve AUC. Reverting changes.
Training on augumented user 15655 17/50 current_auc = 0.6424394319131161
User 15655 AUC after training: 0.6441102756892231
User 15655 improves AUC. Keeping the model.
Training on augumented user 74256 18/50 current_auc = 0.6441102756892231
User 74256 AUC after training: 0.6445279866332498
User 74256 improves AUC. Keeping the model.
Training on augumented user 107169 19/50 current_auc = 0.6445279866332498
User 107169 AUC after training: 0.6441102756892231
User 107169 does not improve AUC. Reverting changes.
Training on augumented user 16954 20/50 current_auc = 0.6445279866332498
User 16954 AUC after training: 0.6436925647451963
User 16954 does not improve AUC. Reverting changes.
Training on augumented user 61813 21/50 current_auc = 0.6445279866332498
User 61813 AUC after training: 0.6449456975772765
User 61813 improves AUC. Keeping the model.
Training on augumented user 92075 22/50 current_auc = 0.6449456975772765
User 92075 AUC after training: 0.6445279866332498
User 92075 does not improve AUC. Reverting changes.
Training on augumented user 131291 23/50 current_auc = 0.6449456975772765
User 131291 AUC after training: 0.6449456975772766
User 131291 improves AUC. Keeping the model.
Training on augumented user 93252 24/50 current_auc = 0.6449456975772766
User 93252 AUC after training: 0.6449456975772765
User 93252 does not improve AUC. Reverting changes.
Training on augumented user 82930 25/50 current_auc = 0.6449456975772766
User 82930 AUC after training: 0.6453634085213034
User 82930 improves AUC. Keeping the model.
Training on augumented user 42746 26/50 current_auc = 0.6453634085213034
User 42746 AUC after training: 0.6468253968253969
User 42746 improves AUC. Keeping the model.
Training on augumented user 26331 27/50 current_auc = 0.6468253968253969
User 26331 AUC after training: 0.6455722639933166
User 26331 does not improve AUC. Reverting changes.
Training on augumented user 92979 28/50 current_auc = 0.6468253968253969
User 92979 AUC after training: 0.6468253968253969
User 92979 does not improve AUC. Reverting changes.
Training on augumented user 32200 29/50 current_auc = 0.6468253968253969
User 32200 AUC after training: 0.6464076858813701
User 32200 does not improve AUC. Reverting changes.
Training on augumented user 35766 30/50 current_auc = 0.6468253968253969
User 35766 AUC after training: 0.6455722639933166
User 35766 does not improve AUC. Reverting changes.
Training on augumented user 43453 31/50 current_auc = 0.6468253968253969
User 43453 AUC after training: 0.6455722639933166
User 43453 does not improve AUC. Reverting changes.
Training on augumented user 35682 32/50 current_auc = 0.6468253968253969
User 35682 AUC after training: 0.6468253968253969
User 35682 does not improve AUC. Reverting changes.
Training on augumented user 120762 33/50 current_auc = 0.6468253968253969
User 120762 AUC after training: 0.6476608187134503
User 120762 improves AUC. Keeping the model.
Training on augumented user 76268 34/50 current_auc = 0.6476608187134503
User 76268 AUC after training: 0.6472431077694236
User 76268 does not improve AUC. Reverting changes.
Training on augumented user 13596 35/50 current_auc = 0.6476608187134503
User 13596 AUC after training: 0.6468253968253969
User 13596 does not improve AUC. Reverting changes.
Training on augumented user 118003 36/50 current_auc = 0.6476608187134503
User 118003 AUC after training: 0.6464076858813701
User 118003 does not improve AUC. Reverting changes.
Training on augumented user 114554 37/50 current_auc = 0.6476608187134503
User 114554 AUC after training: 0.6459899749373433
User 114554 does not improve AUC. Reverting changes.
Training on augumented user 69425 38/50 current_auc = 0.6476608187134503
User 69425 AUC after training: 0.6464076858813701
User 69425 does not improve AUC. Reverting changes.
Training on augumented user 131691 39/50 current_auc = 0.6476608187134503
User 131691 AUC after training: 0.6455722639933166
User 131691 does not improve AUC. Reverting changes.
Training on augumented user 67775 40/50 current_auc = 0.6476608187134503
User 67775 AUC after training: 0.6459899749373433
User 67775 does not improve AUC. Reverting changes.
Training on augumented user 96078 41/50 current_auc = 0.6476608187134503
User 96078 AUC after training: 0.648078529657477
User 96078 improves AUC. Keeping the model.
Training on augumented user 13797 42/50 current_auc = 0.648078529657477
User 13797 AUC after training: 0.6476608187134503
User 13797 does not improve AUC. Reverting changes.
Training on augumented user 38829 43/50 current_auc = 0.648078529657477
User 38829 AUC after training: 0.6451545530492899
User 38829 does not improve AUC. Reverting changes.
Training on augumented user 90813 44/50 current_auc = 0.648078529657477
User 90813 AUC after training: 0.6459899749373434
User 90813 does not improve AUC. Reverting changes.
Training on augumented user 126233 45/50 current_auc = 0.648078529657477
User 126233 AUC after training: 0.6472431077694236
User 126233 does not improve AUC. Reverting changes.
Training on augumented user 12296 46/50 current_auc = 0.648078529657477
User 12296 AUC after training: 0.6455722639933166
User 12296 does not improve AUC. Reverting changes.
Training on augumented user 80755 47/50 current_auc = 0.648078529657477
User 80755 AUC after training: 0.6464076858813701
User 80755 does not improve AUC. Reverting changes.
Training on augumented user 34531 48/50 current_auc = 0.648078529657477
User 34531 AUC after training: 0.6459899749373433
User 34531 does not improve AUC. Reverting changes.
Training on augumented user 115443 49/50 current_auc = 0.648078529657477
User 115443 AUC after training: 0.6455722639933166
User 115443 does not improve AUC. Reverting changes.
[2024-12-02 20:21:35.382028] start test user 89771 303/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:21:36.034418] start test user 89771 303/568 recall augumented users by random, augumented_users = [34857, 19538, 101980, 62418, 80570, 113550, 67721, 7916, 79536, 60104, 28255, 107577, 17363, 34336, 64829, 93663, 121276, 30905, 72306, 91418, 41091, 26832, 135480, 47847, 19495, 113862, 10387, 25806, 13895, 64913, 90957, 107953, 101139, 8358, 10019, 103428, 55778, 17874, 60825, 135001, 69004, 53361, 113389, 78908, 103541, 59643, 102706, 9265, 62639, 116697]
[2024-12-02 20:21:36.051031] user = 89771 Cloud 303/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:21:36.057900] user = 89771 Local 303/568
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:21:36.090286] user = 89771 Local+ 303/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:21:38.396383] user = 89771 MPDA- 303/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 34857 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34857 AUC after training: 0.5
User 34857 does not improve AUC. Reverting changes.
Training on augumented user 19538 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19538 AUC after training: 0.5
User 19538 does not improve AUC. Reverting changes.
Training on augumented user 101980 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101980 AUC after training: 0.5
User 101980 does not improve AUC. Reverting changes.
Training on augumented user 62418 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62418 AUC after training: 0.5
User 62418 does not improve AUC. Reverting changes.
Training on augumented user 80570 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80570 AUC after training: 0.5
User 80570 does not improve AUC. Reverting changes.
Training on augumented user 113550 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113550 AUC after training: 0.5
User 113550 does not improve AUC. Reverting changes.
Training on augumented user 67721 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67721 AUC after training: 0.5
User 67721 does not improve AUC. Reverting changes.
Training on augumented user 7916 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7916 AUC after training: 0.5
User 7916 does not improve AUC. Reverting changes.
Training on augumented user 79536 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79536 AUC after training: 0.5
User 79536 does not improve AUC. Reverting changes.
Training on augumented user 60104 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60104 AUC after training: 0.5
User 60104 does not improve AUC. Reverting changes.
Training on augumented user 28255 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28255 AUC after training: 0.5
User 28255 does not improve AUC. Reverting changes.
Training on augumented user 107577 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107577 AUC after training: 0.5
User 107577 does not improve AUC. Reverting changes.
Training on augumented user 17363 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17363 AUC after training: 0.5
User 17363 does not improve AUC. Reverting changes.
Training on augumented user 34336 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34336 AUC after training: 0.5
User 34336 does not improve AUC. Reverting changes.
Training on augumented user 64829 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64829 AUC after training: 0.5
User 64829 does not improve AUC. Reverting changes.
Training on augumented user 93663 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93663 AUC after training: 0.5
User 93663 does not improve AUC. Reverting changes.
Training on augumented user 121276 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121276 AUC after training: 0.5
User 121276 does not improve AUC. Reverting changes.
Training on augumented user 30905 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30905 AUC after training: 0.5
User 30905 does not improve AUC. Reverting changes.
Training on augumented user 72306 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72306 AUC after training: 0.5
User 72306 does not improve AUC. Reverting changes.
Training on augumented user 91418 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91418 AUC after training: 0.5
User 91418 does not improve AUC. Reverting changes.
Training on augumented user 41091 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41091 AUC after training: 0.5
User 41091 does not improve AUC. Reverting changes.
Training on augumented user 26832 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26832 AUC after training: 0.5
User 26832 does not improve AUC. Reverting changes.
Training on augumented user 135480 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135480 AUC after training: 0.5
User 135480 does not improve AUC. Reverting changes.
Training on augumented user 47847 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47847 AUC after training: 0.5
User 47847 does not improve AUC. Reverting changes.
Training on augumented user 19495 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19495 AUC after training: 0.5
User 19495 does not improve AUC. Reverting changes.
Training on augumented user 113862 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113862 AUC after training: 0.5
User 113862 does not improve AUC. Reverting changes.
Training on augumented user 10387 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10387 AUC after training: 0.5
User 10387 does not improve AUC. Reverting changes.
Training on augumented user 25806 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25806 AUC after training: 0.5
User 25806 does not improve AUC. Reverting changes.
Training on augumented user 13895 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13895 AUC after training: 0.5
User 13895 does not improve AUC. Reverting changes.
Training on augumented user 64913 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64913 AUC after training: 0.5
User 64913 does not improve AUC. Reverting changes.
Training on augumented user 90957 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90957 AUC after training: 0.5
User 90957 does not improve AUC. Reverting changes.
Training on augumented user 107953 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107953 AUC after training: 0.5
User 107953 does not improve AUC. Reverting changes.
Training on augumented user 101139 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101139 AUC after training: 0.5
User 101139 does not improve AUC. Reverting changes.
Training on augumented user 8358 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8358 AUC after training: 0.5
User 8358 does not improve AUC. Reverting changes.
Training on augumented user 10019 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10019 AUC after training: 0.5
User 10019 does not improve AUC. Reverting changes.
Training on augumented user 103428 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103428 AUC after training: 0.5
User 103428 does not improve AUC. Reverting changes.
Training on augumented user 55778 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55778 AUC after training: 0.5
User 55778 does not improve AUC. Reverting changes.
Training on augumented user 17874 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17874 AUC after training: 0.5
User 17874 does not improve AUC. Reverting changes.
Training on augumented user 60825 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60825 AUC after training: 0.5
User 60825 does not improve AUC. Reverting changes.
Training on augumented user 135001 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135001 AUC after training: 0.5
User 135001 does not improve AUC. Reverting changes.
Training on augumented user 69004 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69004 AUC after training: 0.5
User 69004 does not improve AUC. Reverting changes.
Training on augumented user 53361 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53361 AUC after training: 0.5
User 53361 does not improve AUC. Reverting changes.
Training on augumented user 113389 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113389 AUC after training: 0.5
User 113389 does not improve AUC. Reverting changes.
Training on augumented user 78908 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78908 AUC after training: 0.5
User 78908 does not improve AUC. Reverting changes.
Training on augumented user 103541 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103541 AUC after training: 0.5
User 103541 does not improve AUC. Reverting changes.
Training on augumented user 59643 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59643 AUC after training: 0.5
User 59643 does not improve AUC. Reverting changes.
Training on augumented user 102706 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102706 AUC after training: 0.5
User 102706 does not improve AUC. Reverting changes.
Training on augumented user 9265 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9265 AUC after training: 0.5
User 9265 does not improve AUC. Reverting changes.
Training on augumented user 62639 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62639 AUC after training: 0.5
User 62639 does not improve AUC. Reverting changes.
Training on augumented user 116697 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116697 AUC after training: 0.5
User 116697 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:22:04.970503] start test user 89799 304/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:22:05.416650] start test user 89799 304/568 recall augumented users by random, augumented_users = [127062, 27741, 19617, 46810, 110780, 133914, 18196, 47556, 66798, 44811, 100491, 8039, 20181, 122181, 9851, 6743, 94675, 122655, 68389, 821, 71203, 32572, 127859, 123830, 60625, 110210, 103911, 116488, 117472, 69376, 41937, 54111, 131848, 20729, 11706, 128494, 81988, 134843, 47006, 76459, 1281, 22491, 83301, 10160, 102087, 92633, 40761, 15590, 100258, 123280]
[2024-12-02 20:22:05.433874] user = 89799 Cloud 304/568
[2024-12-02 20:22:05.500031] user = 89799 Local 304/568
[2024-12-02 20:22:05.586728] user = 89799 Local+ 304/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:22:07.956199] user = 89799 MPDA- 304/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7345792893238149
Training on augumented user 127062 0/50 current_auc = 0.7345792893238149
User 127062 AUC after training: 0.7345907481465355
User 127062 improves AUC. Keeping the model.
Training on augumented user 27741 1/50 current_auc = 0.7345907481465355
User 27741 AUC after training: 0.7346193952033367
User 27741 improves AUC. Keeping the model.
Training on augumented user 19617 2/50 current_auc = 0.7346193952033367
User 19617 AUC after training: 0.7346537716714985
User 19617 improves AUC. Keeping the model.
Training on augumented user 46810 3/50 current_auc = 0.7346537716714985
User 46810 AUC after training: 0.7343730305148448
User 46810 does not improve AUC. Reverting changes.
Training on augumented user 110780 4/50 current_auc = 0.7346537716714985
User 110780 AUC after training: 0.7345506422670135
User 110780 does not improve AUC. Reverting changes.
Training on augumented user 133914 5/50 current_auc = 0.7346537716714985
User 133914 AUC after training: 0.7335709129244061
User 133914 does not improve AUC. Reverting changes.
Training on augumented user 18196 6/50 current_auc = 0.7346537716714985
User 18196 AUC after training: 0.7338516540810597
User 18196 does not improve AUC. Reverting changes.
Training on augumented user 47556 7/50 current_auc = 0.7346537716714985
User 47556 AUC after training: 0.7344074069830067
User 47556 does not improve AUC. Reverting changes.
Training on augumented user 66798 8/50 current_auc = 0.7346537716714985
User 66798 AUC after training: 0.7346423128487779
User 66798 does not improve AUC. Reverting changes.
Training on augumented user 44811 9/50 current_auc = 0.7346537716714985
User 44811 AUC after training: 0.7347167951964616
User 44811 improves AUC. Keeping the model.
Training on augumented user 100491 10/50 current_auc = 0.7347167951964616
User 100491 AUC after training: 0.7346766893169395
User 100491 does not improve AUC. Reverting changes.
Training on augumented user 8039 11/50 current_auc = 0.7347167951964616
User 8039 AUC after training: 0.7346251246146971
User 8039 does not improve AUC. Reverting changes.
Training on augumented user 20181 12/50 current_auc = 0.7347167951964616
User 20181 AUC after training: 0.7343558422807641
User 20181 does not improve AUC. Reverting changes.
Training on augumented user 122181 13/50 current_auc = 0.7347167951964616
User 122181 AUC after training: 0.7346996069623807
User 122181 does not improve AUC. Reverting changes.
Training on augumented user 9851 14/50 current_auc = 0.7347167951964616
User 9851 AUC after training: 0.7345964775578957
User 9851 does not improve AUC. Reverting changes.
Training on augumented user 6743 15/50 current_auc = 0.7347167951964616
User 6743 AUC after training: 0.7343844893375654
User 6743 does not improve AUC. Reverting changes.
Training on augumented user 94675 16/50 current_auc = 0.7347167951964616
User 94675 AUC after training: 0.7346251246146971
User 94675 does not improve AUC. Reverting changes.
Training on augumented user 122655 17/50 current_auc = 0.7347167951964616
User 122655 AUC after training: 0.734625124614697
User 122655 does not improve AUC. Reverting changes.
Training on augumented user 68389 18/50 current_auc = 0.7347167951964616
User 68389 AUC after training: 0.7339948893650666
User 68389 does not improve AUC. Reverting changes.
Training on augumented user 821 19/50 current_auc = 0.7347167951964616
User 821 AUC after training: 0.7344016775716462
User 821 does not improve AUC. Reverting changes.
Training on augumented user 71203 20/50 current_auc = 0.7347167951964616
User 71203 AUC after training: 0.7338401952583392
User 71203 does not improve AUC. Reverting changes.
Training on augumented user 32572 21/50 current_auc = 0.7347167951964616
User 32572 AUC after training: 0.7345048069761314
User 32572 does not improve AUC. Reverting changes.
Training on augumented user 127859 22/50 current_auc = 0.7347167951964616
User 127859 AUC after training: 0.7346824187282999
User 127859 does not improve AUC. Reverting changes.
Training on augumented user 123830 23/50 current_auc = 0.7347167951964616
User 123830 AUC after training: 0.7346881481396601
User 123830 does not improve AUC. Reverting changes.
Training on augumented user 60625 24/50 current_auc = 0.7347167951964616
User 60625 AUC after training: 0.7345964775578957
User 60625 does not improve AUC. Reverting changes.
Training on augumented user 110210 25/50 current_auc = 0.7347167951964616
User 110210 AUC after training: 0.7345936128522155
User 110210 does not improve AUC. Reverting changes.
Training on augumented user 103911 26/50 current_auc = 0.7347167951964616
User 103911 AUC after training: 0.7345506422670136
User 103911 does not improve AUC. Reverting changes.
Training on augumented user 116488 27/50 current_auc = 0.7347167951964616
User 116488 AUC after training: 0.7347626304873437
User 116488 improves AUC. Keeping the model.
Training on augumented user 117472 28/50 current_auc = 0.7347626304873437
User 117472 AUC after training: 0.7348199246009465
User 117472 improves AUC. Keeping the model.
Training on augumented user 69376 29/50 current_auc = 0.7348199246009465
User 69376 AUC after training: 0.7347569010759835
User 69376 does not improve AUC. Reverting changes.
Training on augumented user 41937 30/50 current_auc = 0.7348199246009465
User 41937 AUC after training: 0.7344933481534107
User 41937 does not improve AUC. Reverting changes.
Training on augumented user 54111 31/50 current_auc = 0.7348199246009465
User 54111 AUC after training: 0.7347339834305424
User 54111 does not improve AUC. Reverting changes.
Training on augumented user 131848 32/50 current_auc = 0.7348199246009465
User 131848 AUC after training: 0.7346881481396602
User 131848 does not improve AUC. Reverting changes.
Training on augumented user 20729 33/50 current_auc = 0.7348199246009465
User 20729 AUC after training: 0.7347397128419026
User 20729 does not improve AUC. Reverting changes.
Training on augumented user 11706 34/50 current_auc = 0.7348199246009465
User 11706 AUC after training: 0.7341782305285954
User 11706 does not improve AUC. Reverting changes.
Training on augumented user 128494 35/50 current_auc = 0.7348199246009465
User 128494 AUC after training: 0.7348371128350274
User 128494 improves AUC. Keeping the model.
Training on augumented user 81988 36/50 current_auc = 0.7348371128350274
User 81988 AUC after training: 0.7343386540466832
User 81988 does not improve AUC. Reverting changes.
Training on augumented user 134843 37/50 current_auc = 0.7348371128350274
User 134843 AUC after training: 0.7345850187351752
User 134843 does not improve AUC. Reverting changes.
Training on augumented user 47006 38/50 current_auc = 0.7348371128350274
User 47006 AUC after training: 0.734831383423667
User 47006 does not improve AUC. Reverting changes.
Training on augumented user 76459 39/50 current_auc = 0.7348371128350274
User 76459 AUC after training: 0.7346308540260573
User 76459 does not improve AUC. Reverting changes.
Training on augumented user 1281 40/50 current_auc = 0.7348371128350274
User 1281 AUC after training: 0.7347167951964615
User 1281 does not improve AUC. Reverting changes.
Training on augumented user 22491 41/50 current_auc = 0.7348371128350274
User 22491 AUC after training: 0.7343558422807641
User 22491 does not improve AUC. Reverting changes.
Training on augumented user 83301 42/50 current_auc = 0.7348371128350274
User 83301 AUC after training: 0.7346881481396601
User 83301 does not improve AUC. Reverting changes.
Training on augumented user 10160 43/50 current_auc = 0.7348371128350274
User 10160 AUC after training: 0.7348027363668657
User 10160 does not improve AUC. Reverting changes.
Training on augumented user 102087 44/50 current_auc = 0.7348371128350274
User 102087 AUC after training: 0.7345964775578957
User 102087 does not improve AUC. Reverting changes.
Training on augumented user 92633 45/50 current_auc = 0.7348371128350274
User 92633 AUC after training: 0.7347397128419026
User 92633 does not improve AUC. Reverting changes.
Training on augumented user 40761 46/50 current_auc = 0.7348371128350274
User 40761 AUC after training: 0.7343042775785216
User 40761 does not improve AUC. Reverting changes.
Training on augumented user 15590 47/50 current_auc = 0.7348371128350274
User 15590 AUC after training: 0.7344417834511682
User 15590 does not improve AUC. Reverting changes.
Training on augumented user 100258 48/50 current_auc = 0.7348371128350274
User 100258 AUC after training: 0.7348141951895862
User 100258 does not improve AUC. Reverting changes.
Training on augumented user 123280 49/50 current_auc = 0.7348371128350274
User 123280 AUC after training: 0.7344188658057271
User 123280 does not improve AUC. Reverting changes.
[2024-12-02 20:22:38.038527] start test user 89804 305/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:22:38.455026] start test user 89804 305/568 recall augumented users by random, augumented_users = [2863, 17540, 104289, 48323, 104713, 86193, 9428, 68098, 77980, 57893, 51097, 20583, 135349, 122166, 31905, 134572, 6047, 122455, 62558, 70784, 128911, 125913, 99687, 100704, 67356, 124433, 29158, 92824, 44741, 66524, 132422, 14863, 76379, 41105, 131168, 120661, 11653, 103316, 82355, 108161, 99091, 20715, 29113, 127641, 126340, 8432, 62010, 59284, 63975, 99655]
[2024-12-02 20:22:38.471320] user = 89804 Cloud 305/568
[2024-12-02 20:22:38.482009] user = 89804 Local 305/568
[2024-12-02 20:22:38.536161] user = 89804 Local+ 305/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:22:41.262012] user = 89804 MPDA- 305/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6222222222222222
Training on augumented user 2863 0/50 current_auc = 0.6222222222222222
User 2863 AUC after training: 0.6222222222222222
User 2863 does not improve AUC. Reverting changes.
Training on augumented user 17540 1/50 current_auc = 0.6222222222222222
User 17540 AUC after training: 0.6222222222222222
User 17540 does not improve AUC. Reverting changes.
Training on augumented user 104289 2/50 current_auc = 0.6222222222222222
User 104289 AUC after training: 0.6111111111111112
User 104289 does not improve AUC. Reverting changes.
Training on augumented user 48323 3/50 current_auc = 0.6222222222222222
User 48323 AUC after training: 0.6111111111111112
User 48323 does not improve AUC. Reverting changes.
Training on augumented user 104713 4/50 current_auc = 0.6222222222222222
User 104713 AUC after training: 0.6111111111111112
User 104713 does not improve AUC. Reverting changes.
Training on augumented user 86193 5/50 current_auc = 0.6222222222222222
User 86193 AUC after training: 0.6222222222222222
User 86193 does not improve AUC. Reverting changes.
Training on augumented user 9428 6/50 current_auc = 0.6222222222222222
User 9428 AUC after training: 0.6222222222222222
User 9428 does not improve AUC. Reverting changes.
Training on augumented user 68098 7/50 current_auc = 0.6222222222222222
User 68098 AUC after training: 0.6222222222222222
User 68098 does not improve AUC. Reverting changes.
Training on augumented user 77980 8/50 current_auc = 0.6222222222222222
User 77980 AUC after training: 0.6222222222222222
User 77980 does not improve AUC. Reverting changes.
Training on augumented user 57893 9/50 current_auc = 0.6222222222222222
User 57893 AUC after training: 0.6222222222222222
User 57893 does not improve AUC. Reverting changes.
Training on augumented user 51097 10/50 current_auc = 0.6222222222222222
User 51097 AUC after training: 0.6222222222222222
User 51097 does not improve AUC. Reverting changes.
Training on augumented user 20583 11/50 current_auc = 0.6222222222222222
User 20583 AUC after training: 0.6111111111111112
User 20583 does not improve AUC. Reverting changes.
Training on augumented user 135349 12/50 current_auc = 0.6222222222222222
User 135349 AUC after training: 0.6222222222222222
User 135349 does not improve AUC. Reverting changes.
Training on augumented user 122166 13/50 current_auc = 0.6222222222222222
User 122166 AUC after training: 0.6222222222222222
User 122166 does not improve AUC. Reverting changes.
Training on augumented user 31905 14/50 current_auc = 0.6222222222222222
User 31905 AUC after training: 0.6222222222222222
User 31905 does not improve AUC. Reverting changes.
Training on augumented user 134572 15/50 current_auc = 0.6222222222222222
User 134572 AUC after training: 0.6111111111111112
User 134572 does not improve AUC. Reverting changes.
Training on augumented user 6047 16/50 current_auc = 0.6222222222222222
User 6047 AUC after training: 0.6111111111111112
User 6047 does not improve AUC. Reverting changes.
Training on augumented user 122455 17/50 current_auc = 0.6222222222222222
User 122455 AUC after training: 0.6222222222222222
User 122455 does not improve AUC. Reverting changes.
Training on augumented user 62558 18/50 current_auc = 0.6222222222222222
User 62558 AUC after training: 0.6111111111111112
User 62558 does not improve AUC. Reverting changes.
Training on augumented user 70784 19/50 current_auc = 0.6222222222222222
User 70784 AUC after training: 0.6111111111111112
User 70784 does not improve AUC. Reverting changes.
Training on augumented user 128911 20/50 current_auc = 0.6222222222222222
User 128911 AUC after training: 0.6111111111111112
User 128911 does not improve AUC. Reverting changes.
Training on augumented user 125913 21/50 current_auc = 0.6222222222222222
User 125913 AUC after training: 0.6222222222222222
User 125913 does not improve AUC. Reverting changes.
Training on augumented user 99687 22/50 current_auc = 0.6222222222222222
User 99687 AUC after training: 0.6111111111111112
User 99687 does not improve AUC. Reverting changes.
Training on augumented user 100704 23/50 current_auc = 0.6222222222222222
User 100704 AUC after training: 0.6222222222222222
User 100704 does not improve AUC. Reverting changes.
Training on augumented user 67356 24/50 current_auc = 0.6222222222222222
User 67356 AUC after training: 0.6111111111111112
User 67356 does not improve AUC. Reverting changes.
Training on augumented user 124433 25/50 current_auc = 0.6222222222222222
User 124433 AUC after training: 0.6111111111111112
User 124433 does not improve AUC. Reverting changes.
Training on augumented user 29158 26/50 current_auc = 0.6222222222222222
User 29158 AUC after training: 0.6111111111111112
User 29158 does not improve AUC. Reverting changes.
Training on augumented user 92824 27/50 current_auc = 0.6222222222222222
User 92824 AUC after training: 0.6111111111111112
User 92824 does not improve AUC. Reverting changes.
Training on augumented user 44741 28/50 current_auc = 0.6222222222222222
User 44741 AUC after training: 0.6222222222222222
User 44741 does not improve AUC. Reverting changes.
Training on augumented user 66524 29/50 current_auc = 0.6222222222222222
User 66524 AUC after training: 0.6111111111111112
User 66524 does not improve AUC. Reverting changes.
Training on augumented user 132422 30/50 current_auc = 0.6222222222222222
User 132422 AUC after training: 0.6222222222222222
User 132422 does not improve AUC. Reverting changes.
Training on augumented user 14863 31/50 current_auc = 0.6222222222222222
User 14863 AUC after training: 0.6111111111111112
User 14863 does not improve AUC. Reverting changes.
Training on augumented user 76379 32/50 current_auc = 0.6222222222222222
User 76379 AUC after training: 0.6222222222222222
User 76379 does not improve AUC. Reverting changes.
Training on augumented user 41105 33/50 current_auc = 0.6222222222222222
User 41105 AUC after training: 0.6111111111111112
User 41105 does not improve AUC. Reverting changes.
Training on augumented user 131168 34/50 current_auc = 0.6222222222222222
User 131168 AUC after training: 0.6222222222222222
User 131168 does not improve AUC. Reverting changes.
Training on augumented user 120661 35/50 current_auc = 0.6222222222222222
User 120661 AUC after training: 0.6222222222222222
User 120661 does not improve AUC. Reverting changes.
Training on augumented user 11653 36/50 current_auc = 0.6222222222222222
User 11653 AUC after training: 0.6111111111111112
User 11653 does not improve AUC. Reverting changes.
Training on augumented user 103316 37/50 current_auc = 0.6222222222222222
User 103316 AUC after training: 0.6111111111111112
User 103316 does not improve AUC. Reverting changes.
Training on augumented user 82355 38/50 current_auc = 0.6222222222222222
User 82355 AUC after training: 0.6222222222222222
User 82355 does not improve AUC. Reverting changes.
Training on augumented user 108161 39/50 current_auc = 0.6222222222222222
User 108161 AUC after training: 0.6222222222222222
User 108161 does not improve AUC. Reverting changes.
Training on augumented user 99091 40/50 current_auc = 0.6222222222222222
User 99091 AUC after training: 0.6222222222222222
User 99091 does not improve AUC. Reverting changes.
Training on augumented user 20715 41/50 current_auc = 0.6222222222222222
User 20715 AUC after training: 0.6222222222222222
User 20715 does not improve AUC. Reverting changes.
Training on augumented user 29113 42/50 current_auc = 0.6222222222222222
User 29113 AUC after training: 0.6222222222222222
User 29113 does not improve AUC. Reverting changes.
Training on augumented user 127641 43/50 current_auc = 0.6222222222222222
User 127641 AUC after training: 0.6222222222222222
User 127641 does not improve AUC. Reverting changes.
Training on augumented user 126340 44/50 current_auc = 0.6222222222222222
User 126340 AUC after training: 0.6222222222222222
User 126340 does not improve AUC. Reverting changes.
Training on augumented user 8432 45/50 current_auc = 0.6222222222222222
User 8432 AUC after training: 0.6111111111111112
User 8432 does not improve AUC. Reverting changes.
Training on augumented user 62010 46/50 current_auc = 0.6222222222222222
User 62010 AUC after training: 0.6222222222222222
User 62010 does not improve AUC. Reverting changes.
Training on augumented user 59284 47/50 current_auc = 0.6222222222222222
User 59284 AUC after training: 0.6111111111111112
User 59284 does not improve AUC. Reverting changes.
Training on augumented user 63975 48/50 current_auc = 0.6222222222222222
User 63975 AUC after training: 0.6222222222222222
User 63975 does not improve AUC. Reverting changes.
Training on augumented user 99655 49/50 current_auc = 0.6222222222222222
User 99655 AUC after training: 0.6222222222222222
User 99655 does not improve AUC. Reverting changes.
[2024-12-02 20:23:10.384084] start test user 89848 306/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:23:11.036713] start test user 89848 306/568 recall augumented users by random, augumented_users = [23764, 89632, 1722, 33750, 43334, 28757, 38423, 60075, 11139, 92297, 132844, 58760, 60267, 123940, 84385, 136917, 135565, 125577, 105728, 28134, 129757, 138359, 85689, 34283, 109672, 126435, 2403, 82266, 22365, 23157, 15923, 117595, 67789, 46169, 99409, 108784, 67673, 102817, 15172, 37331, 101264, 105286, 99745, 47521, 81110, 26541, 136719, 38623, 87764, 39447]
[2024-12-02 20:23:11.054511] user = 89848 Cloud 306/568
[2024-12-02 20:23:11.066068] user = 89848 Local 306/568
[2024-12-02 20:23:11.315024] user = 89848 Local+ 306/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:23:12.883801] user = 89848 MPDA- 306/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6753246753246753
Training on augumented user 23764 0/50 current_auc = 0.6753246753246753
User 23764 AUC after training: 0.6753246753246753
User 23764 does not improve AUC. Reverting changes.
Training on augumented user 89632 1/50 current_auc = 0.6753246753246753
User 89632 AUC after training: 0.6701298701298701
User 89632 does not improve AUC. Reverting changes.
Training on augumented user 1722 2/50 current_auc = 0.6753246753246753
User 1722 AUC after training: 0.6779220779220779
User 1722 improves AUC. Keeping the model.
Training on augumented user 33750 3/50 current_auc = 0.6779220779220779
User 33750 AUC after training: 0.6727272727272727
User 33750 does not improve AUC. Reverting changes.
Training on augumented user 43334 4/50 current_auc = 0.6779220779220779
User 43334 AUC after training: 0.6727272727272727
User 43334 does not improve AUC. Reverting changes.
Training on augumented user 28757 5/50 current_auc = 0.6779220779220779
User 28757 AUC after training: 0.6727272727272727
User 28757 does not improve AUC. Reverting changes.
Training on augumented user 38423 6/50 current_auc = 0.6779220779220779
User 38423 AUC after training: 0.6779220779220779
User 38423 does not improve AUC. Reverting changes.
Training on augumented user 60075 7/50 current_auc = 0.6779220779220779
User 60075 AUC after training: 0.6779220779220779
User 60075 does not improve AUC. Reverting changes.
Training on augumented user 11139 8/50 current_auc = 0.6779220779220779
User 11139 AUC after training: 0.6753246753246753
User 11139 does not improve AUC. Reverting changes.
Training on augumented user 92297 9/50 current_auc = 0.6779220779220779
User 92297 AUC after training: 0.6753246753246753
User 92297 does not improve AUC. Reverting changes.
Training on augumented user 132844 10/50 current_auc = 0.6779220779220779
User 132844 AUC after training: 0.6753246753246753
User 132844 does not improve AUC. Reverting changes.
Training on augumented user 58760 11/50 current_auc = 0.6779220779220779
User 58760 AUC after training: 0.6753246753246753
User 58760 does not improve AUC. Reverting changes.
Training on augumented user 60267 12/50 current_auc = 0.6779220779220779
User 60267 AUC after training: 0.6753246753246753
User 60267 does not improve AUC. Reverting changes.
Training on augumented user 123940 13/50 current_auc = 0.6779220779220779
User 123940 AUC after training: 0.6753246753246753
User 123940 does not improve AUC. Reverting changes.
Training on augumented user 84385 14/50 current_auc = 0.6779220779220779
User 84385 AUC after training: 0.6753246753246753
User 84385 does not improve AUC. Reverting changes.
Training on augumented user 136917 15/50 current_auc = 0.6779220779220779
User 136917 AUC after training: 0.6753246753246753
User 136917 does not improve AUC. Reverting changes.
Training on augumented user 135565 16/50 current_auc = 0.6779220779220779
User 135565 AUC after training: 0.6753246753246753
User 135565 does not improve AUC. Reverting changes.
Training on augumented user 125577 17/50 current_auc = 0.6779220779220779
User 125577 AUC after training: 0.6753246753246753
User 125577 does not improve AUC. Reverting changes.
Training on augumented user 105728 18/50 current_auc = 0.6779220779220779
User 105728 AUC after training: 0.6753246753246753
User 105728 does not improve AUC. Reverting changes.
Training on augumented user 28134 19/50 current_auc = 0.6779220779220779
User 28134 AUC after training: 0.6753246753246753
User 28134 does not improve AUC. Reverting changes.
Training on augumented user 129757 20/50 current_auc = 0.6779220779220779
User 129757 AUC after training: 0.6753246753246753
User 129757 does not improve AUC. Reverting changes.
Training on augumented user 138359 21/50 current_auc = 0.6779220779220779
User 138359 AUC after training: 0.6753246753246753
User 138359 does not improve AUC. Reverting changes.
Training on augumented user 85689 22/50 current_auc = 0.6779220779220779
User 85689 AUC after training: 0.6727272727272727
User 85689 does not improve AUC. Reverting changes.
Training on augumented user 34283 23/50 current_auc = 0.6779220779220779
User 34283 AUC after training: 0.6753246753246753
User 34283 does not improve AUC. Reverting changes.
Training on augumented user 109672 24/50 current_auc = 0.6779220779220779
User 109672 AUC after training: 0.6779220779220779
User 109672 does not improve AUC. Reverting changes.
Training on augumented user 126435 25/50 current_auc = 0.6779220779220779
User 126435 AUC after training: 0.6753246753246753
User 126435 does not improve AUC. Reverting changes.
Training on augumented user 2403 26/50 current_auc = 0.6779220779220779
User 2403 AUC after training: 0.6753246753246753
User 2403 does not improve AUC. Reverting changes.
Training on augumented user 82266 27/50 current_auc = 0.6779220779220779
User 82266 AUC after training: 0.6753246753246753
User 82266 does not improve AUC. Reverting changes.
Training on augumented user 22365 28/50 current_auc = 0.6779220779220779
User 22365 AUC after training: 0.6727272727272727
User 22365 does not improve AUC. Reverting changes.
Training on augumented user 23157 29/50 current_auc = 0.6779220779220779
User 23157 AUC after training: 0.6753246753246753
User 23157 does not improve AUC. Reverting changes.
Training on augumented user 15923 30/50 current_auc = 0.6779220779220779
User 15923 AUC after training: 0.6753246753246753
User 15923 does not improve AUC. Reverting changes.
Training on augumented user 117595 31/50 current_auc = 0.6779220779220779
User 117595 AUC after training: 0.6753246753246753
User 117595 does not improve AUC. Reverting changes.
Training on augumented user 67789 32/50 current_auc = 0.6779220779220779
User 67789 AUC after training: 0.6727272727272727
User 67789 does not improve AUC. Reverting changes.
Training on augumented user 46169 33/50 current_auc = 0.6779220779220779
User 46169 AUC after training: 0.6753246753246753
User 46169 does not improve AUC. Reverting changes.
Training on augumented user 99409 34/50 current_auc = 0.6779220779220779
User 99409 AUC after training: 0.6753246753246753
User 99409 does not improve AUC. Reverting changes.
Training on augumented user 108784 35/50 current_auc = 0.6779220779220779
User 108784 AUC after training: 0.6753246753246753
User 108784 does not improve AUC. Reverting changes.
Training on augumented user 67673 36/50 current_auc = 0.6779220779220779
User 67673 AUC after training: 0.6727272727272727
User 67673 does not improve AUC. Reverting changes.
Training on augumented user 102817 37/50 current_auc = 0.6779220779220779
User 102817 AUC after training: 0.6727272727272727
User 102817 does not improve AUC. Reverting changes.
Training on augumented user 15172 38/50 current_auc = 0.6779220779220779
User 15172 AUC after training: 0.6727272727272727
User 15172 does not improve AUC. Reverting changes.
Training on augumented user 37331 39/50 current_auc = 0.6779220779220779
User 37331 AUC after training: 0.6701298701298701
User 37331 does not improve AUC. Reverting changes.
Training on augumented user 101264 40/50 current_auc = 0.6779220779220779
User 101264 AUC after training: 0.6753246753246753
User 101264 does not improve AUC. Reverting changes.
Training on augumented user 105286 41/50 current_auc = 0.6779220779220779
User 105286 AUC after training: 0.6753246753246753
User 105286 does not improve AUC. Reverting changes.
Training on augumented user 99745 42/50 current_auc = 0.6779220779220779
User 99745 AUC after training: 0.6753246753246753
User 99745 does not improve AUC. Reverting changes.
Training on augumented user 47521 43/50 current_auc = 0.6779220779220779
User 47521 AUC after training: 0.6753246753246753
User 47521 does not improve AUC. Reverting changes.
Training on augumented user 81110 44/50 current_auc = 0.6779220779220779
User 81110 AUC after training: 0.6753246753246753
User 81110 does not improve AUC. Reverting changes.
Training on augumented user 26541 45/50 current_auc = 0.6779220779220779
User 26541 AUC after training: 0.6753246753246753
User 26541 does not improve AUC. Reverting changes.
Training on augumented user 136719 46/50 current_auc = 0.6779220779220779
User 136719 AUC after training: 0.6753246753246753
User 136719 does not improve AUC. Reverting changes.
Training on augumented user 38623 47/50 current_auc = 0.6779220779220779
User 38623 AUC after training: 0.6753246753246753
User 38623 does not improve AUC. Reverting changes.
Training on augumented user 87764 48/50 current_auc = 0.6779220779220779
User 87764 AUC after training: 0.6753246753246753
User 87764 does not improve AUC. Reverting changes.
Training on augumented user 39447 49/50 current_auc = 0.6779220779220779
User 39447 AUC after training: 0.6753246753246753
User 39447 does not improve AUC. Reverting changes.
[2024-12-02 20:23:43.599356] start test user 89854 307/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:23:44.330211] start test user 89854 307/568 recall augumented users by random, augumented_users = [118412, 45413, 28194, 96161, 84857, 20900, 34732, 3371, 1465, 27286, 1499, 28542, 8009, 110444, 94748, 91945, 112395, 51963, 68616, 78441, 15846, 82405, 58698, 28083, 31970, 122631, 61965, 97590, 43839, 2267, 94080, 34961, 125322, 138288, 18262, 46786, 50908, 132500, 85680, 55362, 28789, 130005, 101648, 13794, 65461, 51037, 40461, 135845, 70197, 85089]
[2024-12-02 20:23:44.352794] user = 89854 Cloud 307/568
[2024-12-02 20:23:44.406386] user = 89854 Local 307/568
[2024-12-02 20:23:44.445507] user = 89854 Local+ 307/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:23:46.711235] user = 89854 MPDA- 307/568
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5187165775401069
Training on augumented user 118412 0/50 current_auc = 0.5187165775401069
User 118412 AUC after training: 0.5196078431372548
User 118412 improves AUC. Keeping the model.
Training on augumented user 45413 1/50 current_auc = 0.5196078431372548
User 45413 AUC after training: 0.5196078431372549
User 45413 improves AUC. Keeping the model.
Training on augumented user 28194 2/50 current_auc = 0.5196078431372549
User 28194 AUC after training: 0.5213903743315508
User 28194 improves AUC. Keeping the model.
Training on augumented user 96161 3/50 current_auc = 0.5213903743315508
User 96161 AUC after training: 0.5222816399286987
User 96161 improves AUC. Keeping the model.
Training on augumented user 84857 4/50 current_auc = 0.5222816399286987
User 84857 AUC after training: 0.5222816399286988
User 84857 improves AUC. Keeping the model.
Training on augumented user 20900 5/50 current_auc = 0.5222816399286988
User 20900 AUC after training: 0.5222816399286988
User 20900 does not improve AUC. Reverting changes.
Training on augumented user 34732 6/50 current_auc = 0.5222816399286988
User 34732 AUC after training: 0.5222816399286988
User 34732 does not improve AUC. Reverting changes.
Training on augumented user 3371 7/50 current_auc = 0.5222816399286988
User 3371 AUC after training: 0.5222816399286988
User 3371 does not improve AUC. Reverting changes.
Training on augumented user 1465 8/50 current_auc = 0.5222816399286988
User 1465 AUC after training: 0.5222816399286988
User 1465 does not improve AUC. Reverting changes.
Training on augumented user 27286 9/50 current_auc = 0.5222816399286988
User 27286 AUC after training: 0.5222816399286988
User 27286 does not improve AUC. Reverting changes.
Training on augumented user 1499 10/50 current_auc = 0.5222816399286988
User 1499 AUC after training: 0.5222816399286988
User 1499 does not improve AUC. Reverting changes.
Training on augumented user 28542 11/50 current_auc = 0.5222816399286988
User 28542 AUC after training: 0.5231729055258467
User 28542 improves AUC. Keeping the model.
Training on augumented user 8009 12/50 current_auc = 0.5231729055258467
User 8009 AUC after training: 0.5240641711229946
User 8009 improves AUC. Keeping the model.
Training on augumented user 110444 13/50 current_auc = 0.5240641711229946
User 110444 AUC after training: 0.5240641711229946
User 110444 does not improve AUC. Reverting changes.
Training on augumented user 94748 14/50 current_auc = 0.5240641711229946
User 94748 AUC after training: 0.5240641711229946
User 94748 does not improve AUC. Reverting changes.
Training on augumented user 91945 15/50 current_auc = 0.5240641711229946
User 91945 AUC after training: 0.5240641711229946
User 91945 does not improve AUC. Reverting changes.
Training on augumented user 112395 16/50 current_auc = 0.5240641711229946
User 112395 AUC after training: 0.5213903743315509
User 112395 does not improve AUC. Reverting changes.
Training on augumented user 51963 17/50 current_auc = 0.5240641711229946
User 51963 AUC after training: 0.5231729055258467
User 51963 does not improve AUC. Reverting changes.
Training on augumented user 68616 18/50 current_auc = 0.5240641711229946
User 68616 AUC after training: 0.5240641711229946
User 68616 does not improve AUC. Reverting changes.
Training on augumented user 78441 19/50 current_auc = 0.5240641711229946
User 78441 AUC after training: 0.5213903743315508
User 78441 does not improve AUC. Reverting changes.
Training on augumented user 15846 20/50 current_auc = 0.5240641711229946
User 15846 AUC after training: 0.5240641711229946
User 15846 does not improve AUC. Reverting changes.
Training on augumented user 82405 21/50 current_auc = 0.5240641711229946
User 82405 AUC after training: 0.5222816399286988
User 82405 does not improve AUC. Reverting changes.
Training on augumented user 58698 22/50 current_auc = 0.5240641711229946
User 58698 AUC after training: 0.5231729055258467
User 58698 does not improve AUC. Reverting changes.
Training on augumented user 28083 23/50 current_auc = 0.5240641711229946
User 28083 AUC after training: 0.5231729055258467
User 28083 does not improve AUC. Reverting changes.
Training on augumented user 31970 24/50 current_auc = 0.5240641711229946
User 31970 AUC after training: 0.5240641711229946
User 31970 does not improve AUC. Reverting changes.
Training on augumented user 122631 25/50 current_auc = 0.5240641711229946
User 122631 AUC after training: 0.5240641711229946
User 122631 does not improve AUC. Reverting changes.
Training on augumented user 61965 26/50 current_auc = 0.5240641711229946
User 61965 AUC after training: 0.5222816399286988
User 61965 does not improve AUC. Reverting changes.
Training on augumented user 97590 27/50 current_auc = 0.5240641711229946
User 97590 AUC after training: 0.5213903743315508
User 97590 does not improve AUC. Reverting changes.
Training on augumented user 43839 28/50 current_auc = 0.5240641711229946
User 43839 AUC after training: 0.5240641711229946
User 43839 does not improve AUC. Reverting changes.
Training on augumented user 2267 29/50 current_auc = 0.5240641711229946
User 2267 AUC after training: 0.5249554367201427
User 2267 improves AUC. Keeping the model.
Training on augumented user 94080 30/50 current_auc = 0.5249554367201427
User 94080 AUC after training: 0.5267379679144385
User 94080 improves AUC. Keeping the model.
Training on augumented user 34961 31/50 current_auc = 0.5267379679144385
User 34961 AUC after training: 0.5258467023172906
User 34961 does not improve AUC. Reverting changes.
Training on augumented user 125322 32/50 current_auc = 0.5267379679144385
